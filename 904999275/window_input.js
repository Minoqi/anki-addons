var MarkdownInput = (function (exports) {
   'use strict';

   /**
   The data structure for documents. @nonabstract
   */
   let Text$1 = class Text {
       /**
       Get the line description around the given position.
       */
       lineAt(pos) {
           if (pos < 0 || pos > this.length)
               throw new RangeError(`Invalid position ${pos} in document of length ${this.length}`);
           return this.lineInner(pos, false, 1, 0);
       }
       /**
       Get the description for the given (1-based) line number.
       */
       line(n) {
           if (n < 1 || n > this.lines)
               throw new RangeError(`Invalid line number ${n} in ${this.lines}-line document`);
           return this.lineInner(n, true, 1, 0);
       }
       /**
       Replace a range of the text with the given content.
       */
       replace(from, to, text) {
           let parts = [];
           this.decompose(0, from, parts, 2 /* Open.To */);
           if (text.length)
               text.decompose(0, text.length, parts, 1 /* Open.From */ | 2 /* Open.To */);
           this.decompose(to, this.length, parts, 1 /* Open.From */);
           return TextNode.from(parts, this.length - (to - from) + text.length);
       }
       /**
       Append another document to this one.
       */
       append(other) {
           return this.replace(this.length, this.length, other);
       }
       /**
       Retrieve the text between the given points.
       */
       slice(from, to = this.length) {
           let parts = [];
           this.decompose(from, to, parts, 0);
           return TextNode.from(parts, to - from);
       }
       /**
       Test whether this text is equal to another instance.
       */
       eq(other) {
           if (other == this)
               return true;
           if (other.length != this.length || other.lines != this.lines)
               return false;
           let start = this.scanIdentical(other, 1), end = this.length - this.scanIdentical(other, -1);
           let a = new RawTextCursor(this), b = new RawTextCursor(other);
           for (let skip = start, pos = start;;) {
               a.next(skip);
               b.next(skip);
               skip = 0;
               if (a.lineBreak != b.lineBreak || a.done != b.done || a.value != b.value)
                   return false;
               pos += a.value.length;
               if (a.done || pos >= end)
                   return true;
           }
       }
       /**
       Iterate over the text. When `dir` is `-1`, iteration happens
       from end to start. This will return lines and the breaks between
       them as separate strings.
       */
       iter(dir = 1) { return new RawTextCursor(this, dir); }
       /**
       Iterate over a range of the text. When `from` > `to`, the
       iterator will run in reverse.
       */
       iterRange(from, to = this.length) { return new PartialTextCursor(this, from, to); }
       /**
       Return a cursor that iterates over the given range of lines,
       _without_ returning the line breaks between, and yielding empty
       strings for empty lines.
       
       When `from` and `to` are given, they should be 1-based line numbers.
       */
       iterLines(from, to) {
           let inner;
           if (from == null) {
               inner = this.iter();
           }
           else {
               if (to == null)
                   to = this.lines + 1;
               let start = this.line(from).from;
               inner = this.iterRange(start, Math.max(start, to == this.lines + 1 ? this.length : to <= 1 ? 0 : this.line(to - 1).to));
           }
           return new LineCursor(inner);
       }
       /**
       Return the document as a string, using newline characters to
       separate lines.
       */
       toString() { return this.sliceString(0); }
       /**
       Convert the document to an array of lines (which can be
       deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).
       */
       toJSON() {
           let lines = [];
           this.flatten(lines);
           return lines;
       }
       /**
       @internal
       */
       constructor() { }
       /**
       Create a `Text` instance for the given array of lines.
       */
       static of(text) {
           if (text.length == 0)
               throw new RangeError("A document must have at least one line");
           if (text.length == 1 && !text[0])
               return Text.empty;
           return text.length <= 32 /* Tree.Branch */ ? new TextLeaf(text) : TextNode.from(TextLeaf.split(text, []));
       }
   };
   // Leaves store an array of line strings. There are always line breaks
   // between these strings. Leaves are limited in size and have to be
   // contained in TextNode instances for bigger documents.
   class TextLeaf extends Text$1 {
       constructor(text, length = textLength(text)) {
           super();
           this.text = text;
           this.length = length;
       }
       get lines() { return this.text.length; }
       get children() { return null; }
       lineInner(target, isLine, line, offset) {
           for (let i = 0;; i++) {
               let string = this.text[i], end = offset + string.length;
               if ((isLine ? line : end) >= target)
                   return new Line$1(offset, end, line, string);
               offset = end + 1;
               line++;
           }
       }
       decompose(from, to, target, open) {
           let text = from <= 0 && to >= this.length ? this
               : new TextLeaf(sliceText(this.text, from, to), Math.min(to, this.length) - Math.max(0, from));
           if (open & 1 /* Open.From */) {
               let prev = target.pop();
               let joined = appendText(text.text, prev.text.slice(), 0, text.length);
               if (joined.length <= 32 /* Tree.Branch */) {
                   target.push(new TextLeaf(joined, prev.length + text.length));
               }
               else {
                   let mid = joined.length >> 1;
                   target.push(new TextLeaf(joined.slice(0, mid)), new TextLeaf(joined.slice(mid)));
               }
           }
           else {
               target.push(text);
           }
       }
       replace(from, to, text) {
           if (!(text instanceof TextLeaf))
               return super.replace(from, to, text);
           let lines = appendText(this.text, appendText(text.text, sliceText(this.text, 0, from)), to);
           let newLen = this.length + text.length - (to - from);
           if (lines.length <= 32 /* Tree.Branch */)
               return new TextLeaf(lines, newLen);
           return TextNode.from(TextLeaf.split(lines, []), newLen);
       }
       sliceString(from, to = this.length, lineSep = "\n") {
           let result = "";
           for (let pos = 0, i = 0; pos <= to && i < this.text.length; i++) {
               let line = this.text[i], end = pos + line.length;
               if (pos > from && i)
                   result += lineSep;
               if (from < end && to > pos)
                   result += line.slice(Math.max(0, from - pos), to - pos);
               pos = end + 1;
           }
           return result;
       }
       flatten(target) {
           for (let line of this.text)
               target.push(line);
       }
       scanIdentical() { return 0; }
       static split(text, target) {
           let part = [], len = -1;
           for (let line of text) {
               part.push(line);
               len += line.length + 1;
               if (part.length == 32 /* Tree.Branch */) {
                   target.push(new TextLeaf(part, len));
                   part = [];
                   len = -1;
               }
           }
           if (len > -1)
               target.push(new TextLeaf(part, len));
           return target;
       }
   }
   // Nodes provide the tree structure of the `Text` type. They store a
   // number of other nodes or leaves, taking care to balance themselves
   // on changes. There are implied line breaks _between_ the children of
   // a node (but not before the first or after the last child).
   class TextNode extends Text$1 {
       constructor(children, length) {
           super();
           this.children = children;
           this.length = length;
           this.lines = 0;
           for (let child of children)
               this.lines += child.lines;
       }
       lineInner(target, isLine, line, offset) {
           for (let i = 0;; i++) {
               let child = this.children[i], end = offset + child.length, endLine = line + child.lines - 1;
               if ((isLine ? endLine : end) >= target)
                   return child.lineInner(target, isLine, line, offset);
               offset = end + 1;
               line = endLine + 1;
           }
       }
       decompose(from, to, target, open) {
           for (let i = 0, pos = 0; pos <= to && i < this.children.length; i++) {
               let child = this.children[i], end = pos + child.length;
               if (from <= end && to >= pos) {
                   let childOpen = open & ((pos <= from ? 1 /* Open.From */ : 0) | (end >= to ? 2 /* Open.To */ : 0));
                   if (pos >= from && end <= to && !childOpen)
                       target.push(child);
                   else
                       child.decompose(from - pos, to - pos, target, childOpen);
               }
               pos = end + 1;
           }
       }
       replace(from, to, text) {
           if (text.lines < this.lines)
               for (let i = 0, pos = 0; i < this.children.length; i++) {
                   let child = this.children[i], end = pos + child.length;
                   // Fast path: if the change only affects one child and the
                   // child's size remains in the acceptable range, only update
                   // that child
                   if (from >= pos && to <= end) {
                       let updated = child.replace(from - pos, to - pos, text);
                       let totalLines = this.lines - child.lines + updated.lines;
                       if (updated.lines < (totalLines >> (5 /* Tree.BranchShift */ - 1)) &&
                           updated.lines > (totalLines >> (5 /* Tree.BranchShift */ + 1))) {
                           let copy = this.children.slice();
                           copy[i] = updated;
                           return new TextNode(copy, this.length - (to - from) + text.length);
                       }
                       return super.replace(pos, end, updated);
                   }
                   pos = end + 1;
               }
           return super.replace(from, to, text);
       }
       sliceString(from, to = this.length, lineSep = "\n") {
           let result = "";
           for (let i = 0, pos = 0; i < this.children.length && pos <= to; i++) {
               let child = this.children[i], end = pos + child.length;
               if (pos > from && i)
                   result += lineSep;
               if (from < end && to > pos)
                   result += child.sliceString(from - pos, to - pos, lineSep);
               pos = end + 1;
           }
           return result;
       }
       flatten(target) {
           for (let child of this.children)
               child.flatten(target);
       }
       scanIdentical(other, dir) {
           if (!(other instanceof TextNode))
               return 0;
           let length = 0;
           let [iA, iB, eA, eB] = dir > 0 ? [0, 0, this.children.length, other.children.length]
               : [this.children.length - 1, other.children.length - 1, -1, -1];
           for (;; iA += dir, iB += dir) {
               if (iA == eA || iB == eB)
                   return length;
               let chA = this.children[iA], chB = other.children[iB];
               if (chA != chB)
                   return length + chA.scanIdentical(chB, dir);
               length += chA.length + 1;
           }
       }
       static from(children, length = children.reduce((l, ch) => l + ch.length + 1, -1)) {
           let lines = 0;
           for (let ch of children)
               lines += ch.lines;
           if (lines < 32 /* Tree.Branch */) {
               let flat = [];
               for (let ch of children)
                   ch.flatten(flat);
               return new TextLeaf(flat, length);
           }
           let chunk = Math.max(32 /* Tree.Branch */, lines >> 5 /* Tree.BranchShift */), maxChunk = chunk << 1, minChunk = chunk >> 1;
           let chunked = [], currentLines = 0, currentLen = -1, currentChunk = [];
           function add(child) {
               let last;
               if (child.lines > maxChunk && child instanceof TextNode) {
                   for (let node of child.children)
                       add(node);
               }
               else if (child.lines > minChunk && (currentLines > minChunk || !currentLines)) {
                   flush();
                   chunked.push(child);
               }
               else if (child instanceof TextLeaf && currentLines &&
                   (last = currentChunk[currentChunk.length - 1]) instanceof TextLeaf &&
                   child.lines + last.lines <= 32 /* Tree.Branch */) {
                   currentLines += child.lines;
                   currentLen += child.length + 1;
                   currentChunk[currentChunk.length - 1] = new TextLeaf(last.text.concat(child.text), last.length + 1 + child.length);
               }
               else {
                   if (currentLines + child.lines > chunk)
                       flush();
                   currentLines += child.lines;
                   currentLen += child.length + 1;
                   currentChunk.push(child);
               }
           }
           function flush() {
               if (currentLines == 0)
                   return;
               chunked.push(currentChunk.length == 1 ? currentChunk[0] : TextNode.from(currentChunk, currentLen));
               currentLen = -1;
               currentLines = currentChunk.length = 0;
           }
           for (let child of children)
               add(child);
           flush();
           return chunked.length == 1 ? chunked[0] : new TextNode(chunked, length);
       }
   }
   Text$1.empty = /*@__PURE__*/new TextLeaf([""], 0);
   function textLength(text) {
       let length = -1;
       for (let line of text)
           length += line.length + 1;
       return length;
   }
   function appendText(text, target, from = 0, to = 1e9) {
       for (let pos = 0, i = 0, first = true; i < text.length && pos <= to; i++) {
           let line = text[i], end = pos + line.length;
           if (end >= from) {
               if (end > to)
                   line = line.slice(0, to - pos);
               if (pos < from)
                   line = line.slice(from - pos);
               if (first) {
                   target[target.length - 1] += line;
                   first = false;
               }
               else
                   target.push(line);
           }
           pos = end + 1;
       }
       return target;
   }
   function sliceText(text, from, to) {
       return appendText(text, [""], from, to);
   }
   class RawTextCursor {
       constructor(text, dir = 1) {
           this.dir = dir;
           this.done = false;
           this.lineBreak = false;
           this.value = "";
           this.nodes = [text];
           this.offsets = [dir > 0 ? 1 : (text instanceof TextLeaf ? text.text.length : text.children.length) << 1];
       }
       nextInner(skip, dir) {
           this.done = this.lineBreak = false;
           for (;;) {
               let last = this.nodes.length - 1;
               let top = this.nodes[last], offsetValue = this.offsets[last], offset = offsetValue >> 1;
               let size = top instanceof TextLeaf ? top.text.length : top.children.length;
               if (offset == (dir > 0 ? size : 0)) {
                   if (last == 0) {
                       this.done = true;
                       this.value = "";
                       return this;
                   }
                   if (dir > 0)
                       this.offsets[last - 1]++;
                   this.nodes.pop();
                   this.offsets.pop();
               }
               else if ((offsetValue & 1) == (dir > 0 ? 0 : 1)) {
                   this.offsets[last] += dir;
                   if (skip == 0) {
                       this.lineBreak = true;
                       this.value = "\n";
                       return this;
                   }
                   skip--;
               }
               else if (top instanceof TextLeaf) {
                   // Move to the next string
                   let next = top.text[offset + (dir < 0 ? -1 : 0)];
                   this.offsets[last] += dir;
                   if (next.length > Math.max(0, skip)) {
                       this.value = skip == 0 ? next : dir > 0 ? next.slice(skip) : next.slice(0, next.length - skip);
                       return this;
                   }
                   skip -= next.length;
               }
               else {
                   let next = top.children[offset + (dir < 0 ? -1 : 0)];
                   if (skip > next.length) {
                       skip -= next.length;
                       this.offsets[last] += dir;
                   }
                   else {
                       if (dir < 0)
                           this.offsets[last]--;
                       this.nodes.push(next);
                       this.offsets.push(dir > 0 ? 1 : (next instanceof TextLeaf ? next.text.length : next.children.length) << 1);
                   }
               }
           }
       }
       next(skip = 0) {
           if (skip < 0) {
               this.nextInner(-skip, (-this.dir));
               skip = this.value.length;
           }
           return this.nextInner(skip, this.dir);
       }
   }
   class PartialTextCursor {
       constructor(text, start, end) {
           this.value = "";
           this.done = false;
           this.cursor = new RawTextCursor(text, start > end ? -1 : 1);
           this.pos = start > end ? text.length : 0;
           this.from = Math.min(start, end);
           this.to = Math.max(start, end);
       }
       nextInner(skip, dir) {
           if (dir < 0 ? this.pos <= this.from : this.pos >= this.to) {
               this.value = "";
               this.done = true;
               return this;
           }
           skip += Math.max(0, dir < 0 ? this.pos - this.to : this.from - this.pos);
           let limit = dir < 0 ? this.pos - this.from : this.to - this.pos;
           if (skip > limit)
               skip = limit;
           limit -= skip;
           let { value } = this.cursor.next(skip);
           this.pos += (value.length + skip) * dir;
           this.value = value.length <= limit ? value : dir < 0 ? value.slice(value.length - limit) : value.slice(0, limit);
           this.done = !this.value;
           return this;
       }
       next(skip = 0) {
           if (skip < 0)
               skip = Math.max(skip, this.from - this.pos);
           else if (skip > 0)
               skip = Math.min(skip, this.to - this.pos);
           return this.nextInner(skip, this.cursor.dir);
       }
       get lineBreak() { return this.cursor.lineBreak && this.value != ""; }
   }
   class LineCursor {
       constructor(inner) {
           this.inner = inner;
           this.afterBreak = true;
           this.value = "";
           this.done = false;
       }
       next(skip = 0) {
           let { done, lineBreak, value } = this.inner.next(skip);
           if (done) {
               this.done = true;
               this.value = "";
           }
           else if (lineBreak) {
               if (this.afterBreak) {
                   this.value = "";
               }
               else {
                   this.afterBreak = true;
                   this.next();
               }
           }
           else {
               this.value = value;
               this.afterBreak = false;
           }
           return this;
       }
       get lineBreak() { return false; }
   }
   if (typeof Symbol != "undefined") {
       Text$1.prototype[Symbol.iterator] = function () { return this.iter(); };
       RawTextCursor.prototype[Symbol.iterator] = PartialTextCursor.prototype[Symbol.iterator] =
           LineCursor.prototype[Symbol.iterator] = function () { return this; };
   }
   /**
   This type describes a line in the document. It is created
   on-demand when lines are [queried](https://codemirror.net/6/docs/ref/#state.Text.lineAt).
   */
   let Line$1 = class Line {
       /**
       @internal
       */
       constructor(
       /**
       The position of the start of the line.
       */
       from, 
       /**
       The position at the end of the line (_before_ the line break,
       or at the end of document for the last line).
       */
       to, 
       /**
       This line's line number (1-based).
       */
       number, 
       /**
       The line's content.
       */
       text) {
           this.from = from;
           this.to = to;
           this.number = number;
           this.text = text;
       }
       /**
       The length of the line (not including any line break after it).
       */
       get length() { return this.to - this.from; }
   };

   // Compressed representation of the Grapheme_Cluster_Break=Extend
   // information from
   // http://www.unicode.org/Public/13.0.0/ucd/auxiliary/GraphemeBreakProperty.txt.
   // Each pair of elements represents a range, as an offet from the
   // previous range and a length. Numbers are in base-36, with the empty
   // string being a shorthand for 1.
   let extend$2 = /*@__PURE__*/"lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map(s => s ? parseInt(s, 36) : 1);
   // Convert offsets into absolute values
   for (let i = 1; i < extend$2.length; i++)
       extend$2[i] += extend$2[i - 1];
   function isExtendingChar(code) {
       for (let i = 1; i < extend$2.length; i += 2)
           if (extend$2[i] > code)
               return extend$2[i - 1] <= code;
       return false;
   }
   function isRegionalIndicator(code) {
       return code >= 0x1F1E6 && code <= 0x1F1FF;
   }
   const ZWJ = 0x200d;
   /**
   Returns a next grapheme cluster break _after_ (not equal to)
   `pos`, if `forward` is true, or before otherwise. Returns `pos`
   itself if no further cluster break is available in the string.
   Moves across surrogate pairs, extending characters (when
   `includeExtending` is true), characters joined with zero-width
   joiners, and flag emoji.
   */
   function findClusterBreak(str, pos, forward = true, includeExtending = true) {
       return (forward ? nextClusterBreak : prevClusterBreak)(str, pos, includeExtending);
   }
   function nextClusterBreak(str, pos, includeExtending) {
       if (pos == str.length)
           return pos;
       // If pos is in the middle of a surrogate pair, move to its start
       if (pos && surrogateLow(str.charCodeAt(pos)) && surrogateHigh(str.charCodeAt(pos - 1)))
           pos--;
       let prev = codePointAt(str, pos);
       pos += codePointSize(prev);
       while (pos < str.length) {
           let next = codePointAt(str, pos);
           if (prev == ZWJ || next == ZWJ || includeExtending && isExtendingChar(next)) {
               pos += codePointSize(next);
               prev = next;
           }
           else if (isRegionalIndicator(next)) {
               let countBefore = 0, i = pos - 2;
               while (i >= 0 && isRegionalIndicator(codePointAt(str, i))) {
                   countBefore++;
                   i -= 2;
               }
               if (countBefore % 2 == 0)
                   break;
               else
                   pos += 2;
           }
           else {
               break;
           }
       }
       return pos;
   }
   function prevClusterBreak(str, pos, includeExtending) {
       while (pos > 0) {
           let found = nextClusterBreak(str, pos - 2, includeExtending);
           if (found < pos)
               return found;
           pos--;
       }
       return 0;
   }
   function surrogateLow(ch) { return ch >= 0xDC00 && ch < 0xE000; }
   function surrogateHigh(ch) { return ch >= 0xD800 && ch < 0xDC00; }
   /**
   Find the code point at the given position in a string (like the
   [`codePointAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt)
   string method).
   */
   function codePointAt(str, pos) {
       let code0 = str.charCodeAt(pos);
       if (!surrogateHigh(code0) || pos + 1 == str.length)
           return code0;
       let code1 = str.charCodeAt(pos + 1);
       if (!surrogateLow(code1))
           return code0;
       return ((code0 - 0xd800) << 10) + (code1 - 0xdc00) + 0x10000;
   }
   /**
   Given a Unicode codepoint, return the JavaScript string that
   respresents it (like
   [`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)).
   */
   function fromCodePoint$1(code) {
       if (code <= 0xffff)
           return String.fromCharCode(code);
       code -= 0x10000;
       return String.fromCharCode((code >> 10) + 0xd800, (code & 1023) + 0xdc00);
   }
   /**
   The amount of positions a character takes up a JavaScript string.
   */
   function codePointSize(code) { return code < 0x10000 ? 1 : 2; }

   const DefaultSplit = /\r\n?|\n/;
   /**
   Distinguishes different ways in which positions can be mapped.
   */
   var MapMode = /*@__PURE__*/(function (MapMode) {
       /**
       Map a position to a valid new position, even when its context
       was deleted.
       */
       MapMode[MapMode["Simple"] = 0] = "Simple";
       /**
       Return null if deletion happens across the position.
       */
       MapMode[MapMode["TrackDel"] = 1] = "TrackDel";
       /**
       Return null if the character _before_ the position is deleted.
       */
       MapMode[MapMode["TrackBefore"] = 2] = "TrackBefore";
       /**
       Return null if the character _after_ the position is deleted.
       */
       MapMode[MapMode["TrackAfter"] = 3] = "TrackAfter";
   return MapMode})(MapMode || (MapMode = {}));
   /**
   A change description is a variant of [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet)
   that doesn't store the inserted text. As such, it can't be
   applied, but is cheaper to store and manipulate.
   */
   class ChangeDesc {
       // Sections are encoded as pairs of integers. The first is the
       // length in the current document, and the second is -1 for
       // unaffected sections, and the length of the replacement content
       // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
       // 0), and a replacement two positive numbers.
       /**
       @internal
       */
       constructor(
       /**
       @internal
       */
       sections) {
           this.sections = sections;
       }
       /**
       The length of the document before the change.
       */
       get length() {
           let result = 0;
           for (let i = 0; i < this.sections.length; i += 2)
               result += this.sections[i];
           return result;
       }
       /**
       The length of the document after the change.
       */
       get newLength() {
           let result = 0;
           for (let i = 0; i < this.sections.length; i += 2) {
               let ins = this.sections[i + 1];
               result += ins < 0 ? this.sections[i] : ins;
           }
           return result;
       }
       /**
       False when there are actual changes in this set.
       */
       get empty() { return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0; }
       /**
       Iterate over the unchanged parts left by these changes. `posA`
       provides the position of the range in the old document, `posB`
       the new position in the changed document.
       */
       iterGaps(f) {
           for (let i = 0, posA = 0, posB = 0; i < this.sections.length;) {
               let len = this.sections[i++], ins = this.sections[i++];
               if (ins < 0) {
                   f(posA, posB, len);
                   posB += len;
               }
               else {
                   posB += ins;
               }
               posA += len;
           }
       }
       /**
       Iterate over the ranges changed by these changes. (See
       [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
       variant that also provides you with the inserted text.)
       `fromA`/`toA` provides the extent of the change in the starting
       document, `fromB`/`toB` the extent of the replacement in the
       changed document.
       
       When `individual` is true, adjacent changes (which are kept
       separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
       reported separately.
       */
       iterChangedRanges(f, individual = false) {
           iterChanges(this, f, individual);
       }
       /**
       Get a description of the inverted form of these changes.
       */
       get invertedDesc() {
           let sections = [];
           for (let i = 0; i < this.sections.length;) {
               let len = this.sections[i++], ins = this.sections[i++];
               if (ins < 0)
                   sections.push(len, ins);
               else
                   sections.push(ins, len);
           }
           return new ChangeDesc(sections);
       }
       /**
       Compute the combined effect of applying another set of changes
       after this one. The length of the document after this set should
       match the length before `other`.
       */
       composeDesc(other) { return this.empty ? other : other.empty ? this : composeSets(this, other); }
       /**
       Map this description, which should start with the same document
       as `other`, over another set of changes, so that it can be
       applied after it. When `before` is true, map as if the changes
       in `other` happened before the ones in `this`.
       */
       mapDesc(other, before = false) { return other.empty ? this : mapSet(this, other, before); }
       mapPos(pos, assoc = -1, mode = MapMode.Simple) {
           let posA = 0, posB = 0;
           for (let i = 0; i < this.sections.length;) {
               let len = this.sections[i++], ins = this.sections[i++], endA = posA + len;
               if (ins < 0) {
                   if (endA > pos)
                       return posB + (pos - posA);
                   posB += len;
               }
               else {
                   if (mode != MapMode.Simple && endA >= pos &&
                       (mode == MapMode.TrackDel && posA < pos && endA > pos ||
                           mode == MapMode.TrackBefore && posA < pos ||
                           mode == MapMode.TrackAfter && endA > pos))
                       return null;
                   if (endA > pos || endA == pos && assoc < 0 && !len)
                       return pos == posA || assoc < 0 ? posB : posB + ins;
                   posB += ins;
               }
               posA = endA;
           }
           if (pos > posA)
               throw new RangeError(`Position ${pos} is out of range for changeset of length ${posA}`);
           return posB;
       }
       /**
       Check whether these changes touch a given range. When one of the
       changes entirely covers the range, the string `"cover"` is
       returned.
       */
       touchesRange(from, to = from) {
           for (let i = 0, pos = 0; i < this.sections.length && pos <= to;) {
               let len = this.sections[i++], ins = this.sections[i++], end = pos + len;
               if (ins >= 0 && pos <= to && end >= from)
                   return pos < from && end > to ? "cover" : true;
               pos = end;
           }
           return false;
       }
       /**
       @internal
       */
       toString() {
           let result = "";
           for (let i = 0; i < this.sections.length;) {
               let len = this.sections[i++], ins = this.sections[i++];
               result += (result ? " " : "") + len + (ins >= 0 ? ":" + ins : "");
           }
           return result;
       }
       /**
       Serialize this change desc to a JSON-representable value.
       */
       toJSON() { return this.sections; }
       /**
       Create a change desc from its JSON representation (as produced
       by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
       */
       static fromJSON(json) {
           if (!Array.isArray(json) || json.length % 2 || json.some(a => typeof a != "number"))
               throw new RangeError("Invalid JSON representation of ChangeDesc");
           return new ChangeDesc(json);
       }
       /**
       @internal
       */
       static create(sections) { return new ChangeDesc(sections); }
   }
   /**
   A change set represents a group of modifications to a document. It
   stores the document length, and can only be applied to documents
   with exactly that length.
   */
   class ChangeSet extends ChangeDesc {
       constructor(sections, 
       /**
       @internal
       */
       inserted) {
           super(sections);
           this.inserted = inserted;
       }
       /**
       Apply the changes to a document, returning the modified
       document.
       */
       apply(doc) {
           if (this.length != doc.length)
               throw new RangeError("Applying change set to a document with the wrong length");
           iterChanges(this, (fromA, toA, fromB, _toB, text) => doc = doc.replace(fromB, fromB + (toA - fromA), text), false);
           return doc;
       }
       mapDesc(other, before = false) { return mapSet(this, other, before, true); }
       /**
       Given the document as it existed _before_ the changes, return a
       change set that represents the inverse of this set, which could
       be used to go from the document created by the changes back to
       the document as it existed before the changes.
       */
       invert(doc) {
           let sections = this.sections.slice(), inserted = [];
           for (let i = 0, pos = 0; i < sections.length; i += 2) {
               let len = sections[i], ins = sections[i + 1];
               if (ins >= 0) {
                   sections[i] = ins;
                   sections[i + 1] = len;
                   let index = i >> 1;
                   while (inserted.length < index)
                       inserted.push(Text$1.empty);
                   inserted.push(len ? doc.slice(pos, pos + len) : Text$1.empty);
               }
               pos += len;
           }
           return new ChangeSet(sections, inserted);
       }
       /**
       Combine two subsequent change sets into a single set. `other`
       must start in the document produced by `this`. If `this` goes
       `docA` → `docB` and `other` represents `docB` → `docC`, the
       returned value will represent the change `docA` → `docC`.
       */
       compose(other) { return this.empty ? other : other.empty ? this : composeSets(this, other, true); }
       /**
       Given another change set starting in the same document, maps this
       change set over the other, producing a new change set that can be
       applied to the document produced by applying `other`. When
       `before` is `true`, order changes as if `this` comes before
       `other`, otherwise (the default) treat `other` as coming first.
       
       Given two changes `A` and `B`, `A.compose(B.map(A))` and
       `B.compose(A.map(B, true))` will produce the same document. This
       provides a basic form of [operational
       transformation](https://en.wikipedia.org/wiki/Operational_transformation),
       and can be used for collaborative editing.
       */
       map(other, before = false) { return other.empty ? this : mapSet(this, other, before, true); }
       /**
       Iterate over the changed ranges in the document, calling `f` for
       each, with the range in the original document (`fromA`-`toA`)
       and the range that replaces it in the new document
       (`fromB`-`toB`).
       
       When `individual` is true, adjacent changes are reported
       separately.
       */
       iterChanges(f, individual = false) {
           iterChanges(this, f, individual);
       }
       /**
       Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
       set.
       */
       get desc() { return ChangeDesc.create(this.sections); }
       /**
       @internal
       */
       filter(ranges) {
           let resultSections = [], resultInserted = [], filteredSections = [];
           let iter = new SectionIter(this);
           done: for (let i = 0, pos = 0;;) {
               let next = i == ranges.length ? 1e9 : ranges[i++];
               while (pos < next || pos == next && iter.len == 0) {
                   if (iter.done)
                       break done;
                   let len = Math.min(iter.len, next - pos);
                   addSection(filteredSections, len, -1);
                   let ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;
                   addSection(resultSections, len, ins);
                   if (ins > 0)
                       addInsert(resultInserted, resultSections, iter.text);
                   iter.forward(len);
                   pos += len;
               }
               let end = ranges[i++];
               while (pos < end) {
                   if (iter.done)
                       break done;
                   let len = Math.min(iter.len, end - pos);
                   addSection(resultSections, len, -1);
                   addSection(filteredSections, len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);
                   iter.forward(len);
                   pos += len;
               }
           }
           return { changes: new ChangeSet(resultSections, resultInserted),
               filtered: ChangeDesc.create(filteredSections) };
       }
       /**
       Serialize this change set to a JSON-representable value.
       */
       toJSON() {
           let parts = [];
           for (let i = 0; i < this.sections.length; i += 2) {
               let len = this.sections[i], ins = this.sections[i + 1];
               if (ins < 0)
                   parts.push(len);
               else if (ins == 0)
                   parts.push([len]);
               else
                   parts.push([len].concat(this.inserted[i >> 1].toJSON()));
           }
           return parts;
       }
       /**
       Create a change set for the given changes, for a document of the
       given length, using `lineSep` as line separator.
       */
       static of(changes, length, lineSep) {
           let sections = [], inserted = [], pos = 0;
           let total = null;
           function flush(force = false) {
               if (!force && !sections.length)
                   return;
               if (pos < length)
                   addSection(sections, length - pos, -1);
               let set = new ChangeSet(sections, inserted);
               total = total ? total.compose(set.map(total)) : set;
               sections = [];
               inserted = [];
               pos = 0;
           }
           function process(spec) {
               if (Array.isArray(spec)) {
                   for (let sub of spec)
                       process(sub);
               }
               else if (spec instanceof ChangeSet) {
                   if (spec.length != length)
                       throw new RangeError(`Mismatched change set length (got ${spec.length}, expected ${length})`);
                   flush();
                   total = total ? total.compose(spec.map(total)) : spec;
               }
               else {
                   let { from, to = from, insert } = spec;
                   if (from > to || from < 0 || to > length)
                       throw new RangeError(`Invalid change range ${from} to ${to} (in doc of length ${length})`);
                   let insText = !insert ? Text$1.empty : typeof insert == "string" ? Text$1.of(insert.split(lineSep || DefaultSplit)) : insert;
                   let insLen = insText.length;
                   if (from == to && insLen == 0)
                       return;
                   if (from < pos)
                       flush();
                   if (from > pos)
                       addSection(sections, from - pos, -1);
                   addSection(sections, to - from, insLen);
                   addInsert(inserted, sections, insText);
                   pos = to;
               }
           }
           process(changes);
           flush(!total);
           return total;
       }
       /**
       Create an empty changeset of the given length.
       */
       static empty(length) {
           return new ChangeSet(length ? [length, -1] : [], []);
       }
       /**
       Create a changeset from its JSON representation (as produced by
       [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
       */
       static fromJSON(json) {
           if (!Array.isArray(json))
               throw new RangeError("Invalid JSON representation of ChangeSet");
           let sections = [], inserted = [];
           for (let i = 0; i < json.length; i++) {
               let part = json[i];
               if (typeof part == "number") {
                   sections.push(part, -1);
               }
               else if (!Array.isArray(part) || typeof part[0] != "number" || part.some((e, i) => i && typeof e != "string")) {
                   throw new RangeError("Invalid JSON representation of ChangeSet");
               }
               else if (part.length == 1) {
                   sections.push(part[0], 0);
               }
               else {
                   while (inserted.length < i)
                       inserted.push(Text$1.empty);
                   inserted[i] = Text$1.of(part.slice(1));
                   sections.push(part[0], inserted[i].length);
               }
           }
           return new ChangeSet(sections, inserted);
       }
       /**
       @internal
       */
       static createSet(sections, inserted) {
           return new ChangeSet(sections, inserted);
       }
   }
   function addSection(sections, len, ins, forceJoin = false) {
       if (len == 0 && ins <= 0)
           return;
       let last = sections.length - 2;
       if (last >= 0 && ins <= 0 && ins == sections[last + 1])
           sections[last] += len;
       else if (len == 0 && sections[last] == 0)
           sections[last + 1] += ins;
       else if (forceJoin) {
           sections[last] += len;
           sections[last + 1] += ins;
       }
       else
           sections.push(len, ins);
   }
   function addInsert(values, sections, value) {
       if (value.length == 0)
           return;
       let index = (sections.length - 2) >> 1;
       if (index < values.length) {
           values[values.length - 1] = values[values.length - 1].append(value);
       }
       else {
           while (values.length < index)
               values.push(Text$1.empty);
           values.push(value);
       }
   }
   function iterChanges(desc, f, individual) {
       let inserted = desc.inserted;
       for (let posA = 0, posB = 0, i = 0; i < desc.sections.length;) {
           let len = desc.sections[i++], ins = desc.sections[i++];
           if (ins < 0) {
               posA += len;
               posB += len;
           }
           else {
               let endA = posA, endB = posB, text = Text$1.empty;
               for (;;) {
                   endA += len;
                   endB += ins;
                   if (ins && inserted)
                       text = text.append(inserted[(i - 2) >> 1]);
                   if (individual || i == desc.sections.length || desc.sections[i + 1] < 0)
                       break;
                   len = desc.sections[i++];
                   ins = desc.sections[i++];
               }
               f(posA, endA, posB, endB, text);
               posA = endA;
               posB = endB;
           }
       }
   }
   function mapSet(setA, setB, before, mkSet = false) {
       // Produce a copy of setA that applies to the document after setB
       // has been applied (assuming both start at the same document).
       let sections = [], insert = mkSet ? [] : null;
       let a = new SectionIter(setA), b = new SectionIter(setB);
       // Iterate over both sets in parallel. inserted tracks, for changes
       // in A that have to be processed piece-by-piece, whether their
       // content has been inserted already, and refers to the section
       // index.
       for (let inserted = -1;;) {
           if (a.ins == -1 && b.ins == -1) {
               // Move across ranges skipped by both sets.
               let len = Math.min(a.len, b.len);
               addSection(sections, len, -1);
               a.forward(len);
               b.forward(len);
           }
           else if (b.ins >= 0 && (a.ins < 0 || inserted == a.i || a.off == 0 && (b.len < a.len || b.len == a.len && !before))) {
               // If there's a change in B that comes before the next change in
               // A (ordered by start pos, then len, then before flag), skip
               // that (and process any changes in A it covers).
               let len = b.len;
               addSection(sections, b.ins, -1);
               while (len) {
                   let piece = Math.min(a.len, len);
                   if (a.ins >= 0 && inserted < a.i && a.len <= piece) {
                       addSection(sections, 0, a.ins);
                       if (insert)
                           addInsert(insert, sections, a.text);
                       inserted = a.i;
                   }
                   a.forward(piece);
                   len -= piece;
               }
               b.next();
           }
           else if (a.ins >= 0) {
               // Process the part of a change in A up to the start of the next
               // non-deletion change in B (if overlapping).
               let len = 0, left = a.len;
               while (left) {
                   if (b.ins == -1) {
                       let piece = Math.min(left, b.len);
                       len += piece;
                       left -= piece;
                       b.forward(piece);
                   }
                   else if (b.ins == 0 && b.len < left) {
                       left -= b.len;
                       b.next();
                   }
                   else {
                       break;
                   }
               }
               addSection(sections, len, inserted < a.i ? a.ins : 0);
               if (insert && inserted < a.i)
                   addInsert(insert, sections, a.text);
               inserted = a.i;
               a.forward(a.len - left);
           }
           else if (a.done && b.done) {
               return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);
           }
           else {
               throw new Error("Mismatched change set lengths");
           }
       }
   }
   function composeSets(setA, setB, mkSet = false) {
       let sections = [];
       let insert = mkSet ? [] : null;
       let a = new SectionIter(setA), b = new SectionIter(setB);
       for (let open = false;;) {
           if (a.done && b.done) {
               return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);
           }
           else if (a.ins == 0) { // Deletion in A
               addSection(sections, a.len, 0, open);
               a.next();
           }
           else if (b.len == 0 && !b.done) { // Insertion in B
               addSection(sections, 0, b.ins, open);
               if (insert)
                   addInsert(insert, sections, b.text);
               b.next();
           }
           else if (a.done || b.done) {
               throw new Error("Mismatched change set lengths");
           }
           else {
               let len = Math.min(a.len2, b.len), sectionLen = sections.length;
               if (a.ins == -1) {
                   let insB = b.ins == -1 ? -1 : b.off ? 0 : b.ins;
                   addSection(sections, len, insB, open);
                   if (insert && insB)
                       addInsert(insert, sections, b.text);
               }
               else if (b.ins == -1) {
                   addSection(sections, a.off ? 0 : a.len, len, open);
                   if (insert)
                       addInsert(insert, sections, a.textBit(len));
               }
               else {
                   addSection(sections, a.off ? 0 : a.len, b.off ? 0 : b.ins, open);
                   if (insert && !b.off)
                       addInsert(insert, sections, b.text);
               }
               open = (a.ins > len || b.ins >= 0 && b.len > len) && (open || sections.length > sectionLen);
               a.forward2(len);
               b.forward(len);
           }
       }
   }
   class SectionIter {
       constructor(set) {
           this.set = set;
           this.i = 0;
           this.next();
       }
       next() {
           let { sections } = this.set;
           if (this.i < sections.length) {
               this.len = sections[this.i++];
               this.ins = sections[this.i++];
           }
           else {
               this.len = 0;
               this.ins = -2;
           }
           this.off = 0;
       }
       get done() { return this.ins == -2; }
       get len2() { return this.ins < 0 ? this.len : this.ins; }
       get text() {
           let { inserted } = this.set, index = (this.i - 2) >> 1;
           return index >= inserted.length ? Text$1.empty : inserted[index];
       }
       textBit(len) {
           let { inserted } = this.set, index = (this.i - 2) >> 1;
           return index >= inserted.length && !len ? Text$1.empty
               : inserted[index].slice(this.off, len == null ? undefined : this.off + len);
       }
       forward(len) {
           if (len == this.len)
               this.next();
           else {
               this.len -= len;
               this.off += len;
           }
       }
       forward2(len) {
           if (this.ins == -1)
               this.forward(len);
           else if (len == this.ins)
               this.next();
           else {
               this.ins -= len;
               this.off += len;
           }
       }
   }

   /**
   A single selection range. When
   [`allowMultipleSelections`](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)
   is enabled, a [selection](https://codemirror.net/6/docs/ref/#state.EditorSelection) may hold
   multiple ranges. By default, selections hold exactly one range.
   */
   class SelectionRange {
       constructor(
       /**
       The lower boundary of the range.
       */
       from, 
       /**
       The upper boundary of the range.
       */
       to, flags) {
           this.from = from;
           this.to = to;
           this.flags = flags;
       }
       /**
       The anchor of the range—the side that doesn't move when you
       extend it.
       */
       get anchor() { return this.flags & 16 /* RangeFlag.Inverted */ ? this.to : this.from; }
       /**
       The head of the range, which is moved when the range is
       [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
       */
       get head() { return this.flags & 16 /* RangeFlag.Inverted */ ? this.from : this.to; }
       /**
       True when `anchor` and `head` are at the same position.
       */
       get empty() { return this.from == this.to; }
       /**
       If this is a cursor that is explicitly associated with the
       character on one of its sides, this returns the side. -1 means
       the character before its position, 1 the character after, and 0
       means no association.
       */
       get assoc() { return this.flags & 4 /* RangeFlag.AssocBefore */ ? -1 : this.flags & 8 /* RangeFlag.AssocAfter */ ? 1 : 0; }
       /**
       The bidirectional text level associated with this cursor, if
       any.
       */
       get bidiLevel() {
           let level = this.flags & 3 /* RangeFlag.BidiLevelMask */;
           return level == 3 ? null : level;
       }
       /**
       The goal column (stored vertical offset) associated with a
       cursor. This is used to preserve the vertical position when
       [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
       lines of different length.
       */
       get goalColumn() {
           let value = this.flags >> 5 /* RangeFlag.GoalColumnOffset */;
           return value == 33554431 /* RangeFlag.NoGoalColumn */ ? undefined : value;
       }
       /**
       Map this range through a change, producing a valid range in the
       updated document.
       */
       map(change, assoc = -1) {
           let from, to;
           if (this.empty) {
               from = to = change.mapPos(this.from, assoc);
           }
           else {
               from = change.mapPos(this.from, 1);
               to = change.mapPos(this.to, -1);
           }
           return from == this.from && to == this.to ? this : new SelectionRange(from, to, this.flags);
       }
       /**
       Extend this range to cover at least `from` to `to`.
       */
       extend(from, to = from) {
           if (from <= this.anchor && to >= this.anchor)
               return EditorSelection.range(from, to);
           let head = Math.abs(from - this.anchor) > Math.abs(to - this.anchor) ? from : to;
           return EditorSelection.range(this.anchor, head);
       }
       /**
       Compare this range to another range.
       */
       eq(other) {
           return this.anchor == other.anchor && this.head == other.head;
       }
       /**
       Return a JSON-serializable object representing the range.
       */
       toJSON() { return { anchor: this.anchor, head: this.head }; }
       /**
       Convert a JSON representation of a range to a `SelectionRange`
       instance.
       */
       static fromJSON(json) {
           if (!json || typeof json.anchor != "number" || typeof json.head != "number")
               throw new RangeError("Invalid JSON representation for SelectionRange");
           return EditorSelection.range(json.anchor, json.head);
       }
       /**
       @internal
       */
       static create(from, to, flags) {
           return new SelectionRange(from, to, flags);
       }
   }
   /**
   An editor selection holds one or more selection ranges.
   */
   class EditorSelection {
       constructor(
       /**
       The ranges in the selection, sorted by position. Ranges cannot
       overlap (but they may touch, if they aren't empty).
       */
       ranges, 
       /**
       The index of the _main_ range in the selection (which is
       usually the range that was added last).
       */
       mainIndex) {
           this.ranges = ranges;
           this.mainIndex = mainIndex;
       }
       /**
       Map a selection through a change. Used to adjust the selection
       position for changes.
       */
       map(change, assoc = -1) {
           if (change.empty)
               return this;
           return EditorSelection.create(this.ranges.map(r => r.map(change, assoc)), this.mainIndex);
       }
       /**
       Compare this selection to another selection.
       */
       eq(other) {
           if (this.ranges.length != other.ranges.length ||
               this.mainIndex != other.mainIndex)
               return false;
           for (let i = 0; i < this.ranges.length; i++)
               if (!this.ranges[i].eq(other.ranges[i]))
                   return false;
           return true;
       }
       /**
       Get the primary selection range. Usually, you should make sure
       your code applies to _all_ ranges, by using methods like
       [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
       */
       get main() { return this.ranges[this.mainIndex]; }
       /**
       Make sure the selection only has one range. Returns a selection
       holding only the main range from this selection.
       */
       asSingle() {
           return this.ranges.length == 1 ? this : new EditorSelection([this.main], 0);
       }
       /**
       Extend this selection with an extra range.
       */
       addRange(range, main = true) {
           return EditorSelection.create([range].concat(this.ranges), main ? 0 : this.mainIndex + 1);
       }
       /**
       Replace a given range with another range, and then normalize the
       selection to merge and sort ranges if necessary.
       */
       replaceRange(range, which = this.mainIndex) {
           let ranges = this.ranges.slice();
           ranges[which] = range;
           return EditorSelection.create(ranges, this.mainIndex);
       }
       /**
       Convert this selection to an object that can be serialized to
       JSON.
       */
       toJSON() {
           return { ranges: this.ranges.map(r => r.toJSON()), main: this.mainIndex };
       }
       /**
       Create a selection from a JSON representation.
       */
       static fromJSON(json) {
           if (!json || !Array.isArray(json.ranges) || typeof json.main != "number" || json.main >= json.ranges.length)
               throw new RangeError("Invalid JSON representation for EditorSelection");
           return new EditorSelection(json.ranges.map((r) => SelectionRange.fromJSON(r)), json.main);
       }
       /**
       Create a selection holding a single range.
       */
       static single(anchor, head = anchor) {
           return new EditorSelection([EditorSelection.range(anchor, head)], 0);
       }
       /**
       Sort and merge the given set of ranges, creating a valid
       selection.
       */
       static create(ranges, mainIndex = 0) {
           if (ranges.length == 0)
               throw new RangeError("A selection needs at least one range");
           for (let pos = 0, i = 0; i < ranges.length; i++) {
               let range = ranges[i];
               if (range.empty ? range.from <= pos : range.from < pos)
                   return EditorSelection.normalized(ranges.slice(), mainIndex);
               pos = range.to;
           }
           return new EditorSelection(ranges, mainIndex);
       }
       /**
       Create a cursor selection range at the given position. You can
       safely ignore the optional arguments in most situations.
       */
       static cursor(pos, assoc = 0, bidiLevel, goalColumn) {
           return SelectionRange.create(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 4 /* RangeFlag.AssocBefore */ : 8 /* RangeFlag.AssocAfter */) |
               (bidiLevel == null ? 3 : Math.min(2, bidiLevel)) |
               ((goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431 /* RangeFlag.NoGoalColumn */) << 5 /* RangeFlag.GoalColumnOffset */));
       }
       /**
       Create a selection range.
       */
       static range(anchor, head, goalColumn, bidiLevel) {
           let flags = ((goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431 /* RangeFlag.NoGoalColumn */) << 5 /* RangeFlag.GoalColumnOffset */) |
               (bidiLevel == null ? 3 : Math.min(2, bidiLevel));
           return head < anchor ? SelectionRange.create(head, anchor, 16 /* RangeFlag.Inverted */ | 8 /* RangeFlag.AssocAfter */ | flags)
               : SelectionRange.create(anchor, head, (head > anchor ? 4 /* RangeFlag.AssocBefore */ : 0) | flags);
       }
       /**
       @internal
       */
       static normalized(ranges, mainIndex = 0) {
           let main = ranges[mainIndex];
           ranges.sort((a, b) => a.from - b.from);
           mainIndex = ranges.indexOf(main);
           for (let i = 1; i < ranges.length; i++) {
               let range = ranges[i], prev = ranges[i - 1];
               if (range.empty ? range.from <= prev.to : range.from < prev.to) {
                   let from = prev.from, to = Math.max(range.to, prev.to);
                   if (i <= mainIndex)
                       mainIndex--;
                   ranges.splice(--i, 2, range.anchor > range.head ? EditorSelection.range(to, from) : EditorSelection.range(from, to));
               }
           }
           return new EditorSelection(ranges, mainIndex);
       }
   }
   function checkSelection(selection, docLength) {
       for (let range of selection.ranges)
           if (range.to > docLength)
               throw new RangeError("Selection points outside of document");
   }

   let nextID = 0;
   /**
   A facet is a labeled value that is associated with an editor
   state. It takes inputs from any number of extensions, and combines
   those into a single output value.

   Examples of uses of facets are the [tab
   size](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize), [editor
   attributes](https://codemirror.net/6/docs/ref/#view.EditorView^editorAttributes), and [update
   listeners](https://codemirror.net/6/docs/ref/#view.EditorView^updateListener).
   */
   class Facet {
       constructor(
       /**
       @internal
       */
       combine, 
       /**
       @internal
       */
       compareInput, 
       /**
       @internal
       */
       compare, isStatic, enables) {
           this.combine = combine;
           this.compareInput = compareInput;
           this.compare = compare;
           this.isStatic = isStatic;
           /**
           @internal
           */
           this.id = nextID++;
           this.default = combine([]);
           this.extensions = typeof enables == "function" ? enables(this) : enables;
       }
       /**
       Define a new facet.
       */
       static define(config = {}) {
           return new Facet(config.combine || ((a) => a), config.compareInput || ((a, b) => a === b), config.compare || (!config.combine ? sameArray$1 : (a, b) => a === b), !!config.static, config.enables);
       }
       /**
       Returns an extension that adds the given value to this facet.
       */
       of(value) {
           return new FacetProvider([], this, 0 /* Provider.Static */, value);
       }
       /**
       Create an extension that computes a value for the facet from a
       state. You must take care to declare the parts of the state that
       this value depends on, since your function is only called again
       for a new state when one of those parts changed.
       
       In cases where your value depends only on a single field, you'll
       want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.
       */
       compute(deps, get) {
           if (this.isStatic)
               throw new Error("Can't compute a static facet");
           return new FacetProvider(deps, this, 1 /* Provider.Single */, get);
       }
       /**
       Create an extension that computes zero or more values for this
       facet from a state.
       */
       computeN(deps, get) {
           if (this.isStatic)
               throw new Error("Can't compute a static facet");
           return new FacetProvider(deps, this, 2 /* Provider.Multi */, get);
       }
       from(field, get) {
           if (!get)
               get = x => x;
           return this.compute([field], state => get(state.field(field)));
       }
   }
   function sameArray$1(a, b) {
       return a == b || a.length == b.length && a.every((e, i) => e === b[i]);
   }
   class FacetProvider {
       constructor(dependencies, facet, type, value) {
           this.dependencies = dependencies;
           this.facet = facet;
           this.type = type;
           this.value = value;
           this.id = nextID++;
       }
       dynamicSlot(addresses) {
           var _a;
           let getter = this.value;
           let compare = this.facet.compareInput;
           let id = this.id, idx = addresses[id] >> 1, multi = this.type == 2 /* Provider.Multi */;
           let depDoc = false, depSel = false, depAddrs = [];
           for (let dep of this.dependencies) {
               if (dep == "doc")
                   depDoc = true;
               else if (dep == "selection")
                   depSel = true;
               else if ((((_a = addresses[dep.id]) !== null && _a !== void 0 ? _a : 1) & 1) == 0)
                   depAddrs.push(addresses[dep.id]);
           }
           return {
               create(state) {
                   state.values[idx] = getter(state);
                   return 1 /* SlotStatus.Changed */;
               },
               update(state, tr) {
                   if ((depDoc && tr.docChanged) || (depSel && (tr.docChanged || tr.selection)) || ensureAll(state, depAddrs)) {
                       let newVal = getter(state);
                       if (multi ? !compareArray(newVal, state.values[idx], compare) : !compare(newVal, state.values[idx])) {
                           state.values[idx] = newVal;
                           return 1 /* SlotStatus.Changed */;
                       }
                   }
                   return 0;
               },
               reconfigure: (state, oldState) => {
                   let newVal, oldAddr = oldState.config.address[id];
                   if (oldAddr != null) {
                       let oldVal = getAddr(oldState, oldAddr);
                       if (this.dependencies.every(dep => {
                           return dep instanceof Facet ? oldState.facet(dep) === state.facet(dep) :
                               dep instanceof StateField ? oldState.field(dep, false) == state.field(dep, false) : true;
                       }) || (multi ? compareArray(newVal = getter(state), oldVal, compare) : compare(newVal = getter(state), oldVal))) {
                           state.values[idx] = oldVal;
                           return 0;
                       }
                   }
                   else {
                       newVal = getter(state);
                   }
                   state.values[idx] = newVal;
                   return 1 /* SlotStatus.Changed */;
               }
           };
       }
   }
   function compareArray(a, b, compare) {
       if (a.length != b.length)
           return false;
       for (let i = 0; i < a.length; i++)
           if (!compare(a[i], b[i]))
               return false;
       return true;
   }
   function ensureAll(state, addrs) {
       let changed = false;
       for (let addr of addrs)
           if (ensureAddr(state, addr) & 1 /* SlotStatus.Changed */)
               changed = true;
       return changed;
   }
   function dynamicFacetSlot(addresses, facet, providers) {
       let providerAddrs = providers.map(p => addresses[p.id]);
       let providerTypes = providers.map(p => p.type);
       let dynamic = providerAddrs.filter(p => !(p & 1));
       let idx = addresses[facet.id] >> 1;
       function get(state) {
           let values = [];
           for (let i = 0; i < providerAddrs.length; i++) {
               let value = getAddr(state, providerAddrs[i]);
               if (providerTypes[i] == 2 /* Provider.Multi */)
                   for (let val of value)
                       values.push(val);
               else
                   values.push(value);
           }
           return facet.combine(values);
       }
       return {
           create(state) {
               for (let addr of providerAddrs)
                   ensureAddr(state, addr);
               state.values[idx] = get(state);
               return 1 /* SlotStatus.Changed */;
           },
           update(state, tr) {
               if (!ensureAll(state, dynamic))
                   return 0;
               let value = get(state);
               if (facet.compare(value, state.values[idx]))
                   return 0;
               state.values[idx] = value;
               return 1 /* SlotStatus.Changed */;
           },
           reconfigure(state, oldState) {
               let depChanged = ensureAll(state, providerAddrs);
               let oldProviders = oldState.config.facets[facet.id], oldValue = oldState.facet(facet);
               if (oldProviders && !depChanged && sameArray$1(providers, oldProviders)) {
                   state.values[idx] = oldValue;
                   return 0;
               }
               let value = get(state);
               if (facet.compare(value, oldValue)) {
                   state.values[idx] = oldValue;
                   return 0;
               }
               state.values[idx] = value;
               return 1 /* SlotStatus.Changed */;
           }
       };
   }
   const initField = /*@__PURE__*/Facet.define({ static: true });
   /**
   Fields can store additional information in an editor state, and
   keep it in sync with the rest of the state.
   */
   class StateField {
       constructor(
       /**
       @internal
       */
       id, createF, updateF, compareF, 
       /**
       @internal
       */
       spec) {
           this.id = id;
           this.createF = createF;
           this.updateF = updateF;
           this.compareF = compareF;
           this.spec = spec;
           /**
           @internal
           */
           this.provides = undefined;
       }
       /**
       Define a state field.
       */
       static define(config) {
           let field = new StateField(nextID++, config.create, config.update, config.compare || ((a, b) => a === b), config);
           if (config.provide)
               field.provides = config.provide(field);
           return field;
       }
       create(state) {
           let init = state.facet(initField).find(i => i.field == this);
           return ((init === null || init === void 0 ? void 0 : init.create) || this.createF)(state);
       }
       /**
       @internal
       */
       slot(addresses) {
           let idx = addresses[this.id] >> 1;
           return {
               create: (state) => {
                   state.values[idx] = this.create(state);
                   return 1 /* SlotStatus.Changed */;
               },
               update: (state, tr) => {
                   let oldVal = state.values[idx];
                   let value = this.updateF(oldVal, tr);
                   if (this.compareF(oldVal, value))
                       return 0;
                   state.values[idx] = value;
                   return 1 /* SlotStatus.Changed */;
               },
               reconfigure: (state, oldState) => {
                   if (oldState.config.address[this.id] != null) {
                       state.values[idx] = oldState.field(this);
                       return 0;
                   }
                   state.values[idx] = this.create(state);
                   return 1 /* SlotStatus.Changed */;
               }
           };
       }
       /**
       Returns an extension that enables this field and overrides the
       way it is initialized. Can be useful when you need to provide a
       non-default starting value for the field.
       */
       init(create) {
           return [this, initField.of({ field: this, create })];
       }
       /**
       State field instances can be used as
       [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
       given state.
       */
       get extension() { return this; }
   }
   const Prec_ = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 };
   function prec(value) {
       return (ext) => new PrecExtension(ext, value);
   }
   /**
   By default extensions are registered in the order they are found
   in the flattened form of nested array that was provided.
   Individual extension values can be assigned a precedence to
   override this. Extensions that do not have a precedence set get
   the precedence of the nearest parent with a precedence, or
   [`default`](https://codemirror.net/6/docs/ref/#state.Prec.default) if there is no such parent. The
   final ordering of extensions is determined by first sorting by
   precedence and then by order within each precedence.
   */
   const Prec = {
       /**
       The highest precedence level, for extensions that should end up
       near the start of the precedence ordering.
       */
       highest: /*@__PURE__*/prec(Prec_.highest),
       /**
       A higher-than-default precedence, for extensions that should
       come before those with default precedence.
       */
       high: /*@__PURE__*/prec(Prec_.high),
       /**
       The default precedence, which is also used for extensions
       without an explicit precedence.
       */
       default: /*@__PURE__*/prec(Prec_.default),
       /**
       A lower-than-default precedence.
       */
       low: /*@__PURE__*/prec(Prec_.low),
       /**
       The lowest precedence level. Meant for things that should end up
       near the end of the extension order.
       */
       lowest: /*@__PURE__*/prec(Prec_.lowest)
   };
   class PrecExtension {
       constructor(inner, prec) {
           this.inner = inner;
           this.prec = prec;
       }
   }
   /**
   Extension compartments can be used to make a configuration
   dynamic. By [wrapping](https://codemirror.net/6/docs/ref/#state.Compartment.of) part of your
   configuration in a compartment, you can later
   [replace](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure) that part through a
   transaction.
   */
   class Compartment {
       /**
       Create an instance of this compartment to add to your [state
       configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
       */
       of(ext) { return new CompartmentInstance(this, ext); }
       /**
       Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
       reconfigures this compartment.
       */
       reconfigure(content) {
           return Compartment.reconfigure.of({ compartment: this, extension: content });
       }
       /**
       Get the current content of the compartment in the state, or
       `undefined` if it isn't present.
       */
       get(state) {
           return state.config.compartments.get(this);
       }
   }
   class CompartmentInstance {
       constructor(compartment, inner) {
           this.compartment = compartment;
           this.inner = inner;
       }
   }
   class Configuration {
       constructor(base, compartments, dynamicSlots, address, staticValues, facets) {
           this.base = base;
           this.compartments = compartments;
           this.dynamicSlots = dynamicSlots;
           this.address = address;
           this.staticValues = staticValues;
           this.facets = facets;
           this.statusTemplate = [];
           while (this.statusTemplate.length < dynamicSlots.length)
               this.statusTemplate.push(0 /* SlotStatus.Unresolved */);
       }
       staticFacet(facet) {
           let addr = this.address[facet.id];
           return addr == null ? facet.default : this.staticValues[addr >> 1];
       }
       static resolve(base, compartments, oldState) {
           let fields = [];
           let facets = Object.create(null);
           let newCompartments = new Map();
           for (let ext of flatten$1(base, compartments, newCompartments)) {
               if (ext instanceof StateField)
                   fields.push(ext);
               else
                   (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);
           }
           let address = Object.create(null);
           let staticValues = [];
           let dynamicSlots = [];
           for (let field of fields) {
               address[field.id] = dynamicSlots.length << 1;
               dynamicSlots.push(a => field.slot(a));
           }
           let oldFacets = oldState === null || oldState === void 0 ? void 0 : oldState.config.facets;
           for (let id in facets) {
               let providers = facets[id], facet = providers[0].facet;
               let oldProviders = oldFacets && oldFacets[id] || [];
               if (providers.every(p => p.type == 0 /* Provider.Static */)) {
                   address[facet.id] = (staticValues.length << 1) | 1;
                   if (sameArray$1(oldProviders, providers)) {
                       staticValues.push(oldState.facet(facet));
                   }
                   else {
                       let value = facet.combine(providers.map(p => p.value));
                       staticValues.push(oldState && facet.compare(value, oldState.facet(facet)) ? oldState.facet(facet) : value);
                   }
               }
               else {
                   for (let p of providers) {
                       if (p.type == 0 /* Provider.Static */) {
                           address[p.id] = (staticValues.length << 1) | 1;
                           staticValues.push(p.value);
                       }
                       else {
                           address[p.id] = dynamicSlots.length << 1;
                           dynamicSlots.push(a => p.dynamicSlot(a));
                       }
                   }
                   address[facet.id] = dynamicSlots.length << 1;
                   dynamicSlots.push(a => dynamicFacetSlot(a, facet, providers));
               }
           }
           let dynamic = dynamicSlots.map(f => f(address));
           return new Configuration(base, newCompartments, dynamic, address, staticValues, facets);
       }
   }
   function flatten$1(extension, compartments, newCompartments) {
       let result = [[], [], [], [], []];
       let seen = new Map();
       function inner(ext, prec) {
           let known = seen.get(ext);
           if (known != null) {
               if (known <= prec)
                   return;
               let found = result[known].indexOf(ext);
               if (found > -1)
                   result[known].splice(found, 1);
               if (ext instanceof CompartmentInstance)
                   newCompartments.delete(ext.compartment);
           }
           seen.set(ext, prec);
           if (Array.isArray(ext)) {
               for (let e of ext)
                   inner(e, prec);
           }
           else if (ext instanceof CompartmentInstance) {
               if (newCompartments.has(ext.compartment))
                   throw new RangeError(`Duplicate use of compartment in extensions`);
               let content = compartments.get(ext.compartment) || ext.inner;
               newCompartments.set(ext.compartment, content);
               inner(content, prec);
           }
           else if (ext instanceof PrecExtension) {
               inner(ext.inner, ext.prec);
           }
           else if (ext instanceof StateField) {
               result[prec].push(ext);
               if (ext.provides)
                   inner(ext.provides, prec);
           }
           else if (ext instanceof FacetProvider) {
               result[prec].push(ext);
               if (ext.facet.extensions)
                   inner(ext.facet.extensions, Prec_.default);
           }
           else {
               let content = ext.extension;
               if (!content)
                   throw new Error(`Unrecognized extension value in extension set (${ext}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
               inner(content, prec);
           }
       }
       inner(extension, Prec_.default);
       return result.reduce((a, b) => a.concat(b));
   }
   function ensureAddr(state, addr) {
       if (addr & 1)
           return 2 /* SlotStatus.Computed */;
       let idx = addr >> 1;
       let status = state.status[idx];
       if (status == 4 /* SlotStatus.Computing */)
           throw new Error("Cyclic dependency between fields and/or facets");
       if (status & 2 /* SlotStatus.Computed */)
           return status;
       state.status[idx] = 4 /* SlotStatus.Computing */;
       let changed = state.computeSlot(state, state.config.dynamicSlots[idx]);
       return state.status[idx] = 2 /* SlotStatus.Computed */ | changed;
   }
   function getAddr(state, addr) {
       return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];
   }

   const languageData = /*@__PURE__*/Facet.define();
   const allowMultipleSelections = /*@__PURE__*/Facet.define({
       combine: values => values.some(v => v),
       static: true
   });
   const lineSeparator = /*@__PURE__*/Facet.define({
       combine: values => values.length ? values[0] : undefined,
       static: true
   });
   const changeFilter = /*@__PURE__*/Facet.define();
   const transactionFilter = /*@__PURE__*/Facet.define();
   const transactionExtender = /*@__PURE__*/Facet.define();
   const readOnly = /*@__PURE__*/Facet.define({
       combine: values => values.length ? values[0] : false
   });

   /**
   Annotations are tagged values that are used to add metadata to
   transactions in an extensible way. They should be used to model
   things that effect the entire transaction (such as its [time
   stamp](https://codemirror.net/6/docs/ref/#state.Transaction^time) or information about its
   [origin](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent)). For effects that happen
   _alongside_ the other changes made by the transaction, [state
   effects](https://codemirror.net/6/docs/ref/#state.StateEffect) are more appropriate.
   */
   class Annotation {
       /**
       @internal
       */
       constructor(
       /**
       The annotation type.
       */
       type, 
       /**
       The value of this annotation.
       */
       value) {
           this.type = type;
           this.value = value;
       }
       /**
       Define a new type of annotation.
       */
       static define() { return new AnnotationType(); }
   }
   /**
   Marker that identifies a type of [annotation](https://codemirror.net/6/docs/ref/#state.Annotation).
   */
   class AnnotationType {
       /**
       Create an instance of this annotation.
       */
       of(value) { return new Annotation(this, value); }
   }
   /**
   Representation of a type of state effect. Defined with
   [`StateEffect.define`](https://codemirror.net/6/docs/ref/#state.StateEffect^define).
   */
   class StateEffectType {
       /**
       @internal
       */
       constructor(
       // The `any` types in these function types are there to work
       // around TypeScript issue #37631, where the type guard on
       // `StateEffect.is` mysteriously stops working when these properly
       // have type `Value`.
       /**
       @internal
       */
       map) {
           this.map = map;
       }
       /**
       Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
       type.
       */
       of(value) { return new StateEffect(this, value); }
   }
   /**
   State effects can be used to represent additional effects
   associated with a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction.effects). They
   are often useful to model changes to custom [state
   fields](https://codemirror.net/6/docs/ref/#state.StateField), when those changes aren't implicit in
   document or selection changes.
   */
   class StateEffect {
       /**
       @internal
       */
       constructor(
       /**
       @internal
       */
       type, 
       /**
       The value of this effect.
       */
       value) {
           this.type = type;
           this.value = value;
       }
       /**
       Map this effect through a position mapping. Will return
       `undefined` when that ends up deleting the effect.
       */
       map(mapping) {
           let mapped = this.type.map(this.value, mapping);
           return mapped === undefined ? undefined : mapped == this.value ? this : new StateEffect(this.type, mapped);
       }
       /**
       Tells you whether this effect object is of a given
       [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
       */
       is(type) { return this.type == type; }
       /**
       Define a new effect type. The type parameter indicates the type
       of values that his effect holds. It should be a type that
       doesn't include `undefined`, since that is used in
       [mapping](https://codemirror.net/6/docs/ref/#state.StateEffect.map) to indicate that an effect is
       removed.
       */
       static define(spec = {}) {
           return new StateEffectType(spec.map || (v => v));
       }
       /**
       Map an array of effects through a change set.
       */
       static mapEffects(effects, mapping) {
           if (!effects.length)
               return effects;
           let result = [];
           for (let effect of effects) {
               let mapped = effect.map(mapping);
               if (mapped)
                   result.push(mapped);
           }
           return result;
       }
   }
   /**
   This effect can be used to reconfigure the root extensions of
   the editor. Doing this will discard any extensions
   [appended](https://codemirror.net/6/docs/ref/#state.StateEffect^appendConfig), but does not reset
   the content of [reconfigured](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure)
   compartments.
   */
   StateEffect.reconfigure = /*@__PURE__*/StateEffect.define();
   /**
   Append extensions to the top-level configuration of the editor.
   */
   StateEffect.appendConfig = /*@__PURE__*/StateEffect.define();
   /**
   Changes to the editor state are grouped into transactions.
   Typically, a user action creates a single transaction, which may
   contain any number of document changes, may change the selection,
   or have other effects. Create a transaction by calling
   [`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update), or immediately
   dispatch one by calling
   [`EditorView.dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch).
   */
   class Transaction {
       constructor(
       /**
       The state from which the transaction starts.
       */
       startState, 
       /**
       The document changes made by this transaction.
       */
       changes, 
       /**
       The selection set by this transaction, or undefined if it
       doesn't explicitly set a selection.
       */
       selection, 
       /**
       The effects added to the transaction.
       */
       effects, 
       /**
       @internal
       */
       annotations, 
       /**
       Whether the selection should be scrolled into view after this
       transaction is dispatched.
       */
       scrollIntoView) {
           this.startState = startState;
           this.changes = changes;
           this.selection = selection;
           this.effects = effects;
           this.annotations = annotations;
           this.scrollIntoView = scrollIntoView;
           /**
           @internal
           */
           this._doc = null;
           /**
           @internal
           */
           this._state = null;
           if (selection)
               checkSelection(selection, changes.newLength);
           if (!annotations.some((a) => a.type == Transaction.time))
               this.annotations = annotations.concat(Transaction.time.of(Date.now()));
       }
       /**
       @internal
       */
       static create(startState, changes, selection, effects, annotations, scrollIntoView) {
           return new Transaction(startState, changes, selection, effects, annotations, scrollIntoView);
       }
       /**
       The new document produced by the transaction. Contrary to
       [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
       force the entire new state to be computed right away, so it is
       recommended that [transaction
       filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
       when they need to look at the new document.
       */
       get newDoc() {
           return this._doc || (this._doc = this.changes.apply(this.startState.doc));
       }
       /**
       The new selection produced by the transaction. If
       [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
       this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
       current selection through the changes made by the transaction.
       */
       get newSelection() {
           return this.selection || this.startState.selection.map(this.changes);
       }
       /**
       The new state created by the transaction. Computed on demand
       (but retained for subsequent access), so it is recommended not to
       access it in [transaction
       filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
       */
       get state() {
           if (!this._state)
               this.startState.applyTransaction(this);
           return this._state;
       }
       /**
       Get the value of the given annotation type, if any.
       */
       annotation(type) {
           for (let ann of this.annotations)
               if (ann.type == type)
                   return ann.value;
           return undefined;
       }
       /**
       Indicates whether the transaction changed the document.
       */
       get docChanged() { return !this.changes.empty; }
       /**
       Indicates whether this transaction reconfigures the state
       (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
       with a top-level configuration
       [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
       */
       get reconfigured() { return this.startState.config != this.state.config; }
       /**
       Returns true if the transaction has a [user
       event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
       or more specific than `event`. For example, if the transaction
       has `"select.pointer"` as user event, `"select"` and
       `"select.pointer"` will match it.
       */
       isUserEvent(event) {
           let e = this.annotation(Transaction.userEvent);
           return !!(e && (e == event || e.length > event.length && e.slice(0, event.length) == event && e[event.length] == "."));
       }
   }
   /**
   Annotation used to store transaction timestamps. Automatically
   added to every transaction, holding `Date.now()`.
   */
   Transaction.time = /*@__PURE__*/Annotation.define();
   /**
   Annotation used to associate a transaction with a user interface
   event. Holds a string identifying the event, using a
   dot-separated format to support attaching more specific
   information. The events used by the core libraries are:

    - `"input"` when content is entered
      - `"input.type"` for typed input
        - `"input.type.compose"` for composition
      - `"input.paste"` for pasted input
      - `"input.drop"` when adding content with drag-and-drop
      - `"input.complete"` when autocompleting
    - `"delete"` when the user deletes content
      - `"delete.selection"` when deleting the selection
      - `"delete.forward"` when deleting forward from the selection
      - `"delete.backward"` when deleting backward from the selection
      - `"delete.cut"` when cutting to the clipboard
    - `"move"` when content is moved
      - `"move.drop"` when content is moved within the editor through drag-and-drop
    - `"select"` when explicitly changing the selection
      - `"select.pointer"` when selecting with a mouse or other pointing device
    - `"undo"` and `"redo"` for history actions

   Use [`isUserEvent`](https://codemirror.net/6/docs/ref/#state.Transaction.isUserEvent) to check
   whether the annotation matches a given event.
   */
   Transaction.userEvent = /*@__PURE__*/Annotation.define();
   /**
   Annotation indicating whether a transaction should be added to
   the undo history or not.
   */
   Transaction.addToHistory = /*@__PURE__*/Annotation.define();
   /**
   Annotation indicating (when present and true) that a transaction
   represents a change made by some other actor, not the user. This
   is used, for example, to tag other people's changes in
   collaborative editing.
   */
   Transaction.remote = /*@__PURE__*/Annotation.define();
   function joinRanges(a, b) {
       let result = [];
       for (let iA = 0, iB = 0;;) {
           let from, to;
           if (iA < a.length && (iB == b.length || b[iB] >= a[iA])) {
               from = a[iA++];
               to = a[iA++];
           }
           else if (iB < b.length) {
               from = b[iB++];
               to = b[iB++];
           }
           else
               return result;
           if (!result.length || result[result.length - 1] < from)
               result.push(from, to);
           else if (result[result.length - 1] < to)
               result[result.length - 1] = to;
       }
   }
   function mergeTransaction(a, b, sequential) {
       var _a;
       let mapForA, mapForB, changes;
       if (sequential) {
           mapForA = b.changes;
           mapForB = ChangeSet.empty(b.changes.length);
           changes = a.changes.compose(b.changes);
       }
       else {
           mapForA = b.changes.map(a.changes);
           mapForB = a.changes.mapDesc(b.changes, true);
           changes = a.changes.compose(mapForA);
       }
       return {
           changes,
           selection: b.selection ? b.selection.map(mapForB) : (_a = a.selection) === null || _a === void 0 ? void 0 : _a.map(mapForA),
           effects: StateEffect.mapEffects(a.effects, mapForA).concat(StateEffect.mapEffects(b.effects, mapForB)),
           annotations: a.annotations.length ? a.annotations.concat(b.annotations) : b.annotations,
           scrollIntoView: a.scrollIntoView || b.scrollIntoView
       };
   }
   function resolveTransactionInner(state, spec, docSize) {
       let sel = spec.selection, annotations = asArray(spec.annotations);
       if (spec.userEvent)
           annotations = annotations.concat(Transaction.userEvent.of(spec.userEvent));
       return {
           changes: spec.changes instanceof ChangeSet ? spec.changes
               : ChangeSet.of(spec.changes || [], docSize, state.facet(lineSeparator)),
           selection: sel && (sel instanceof EditorSelection ? sel : EditorSelection.single(sel.anchor, sel.head)),
           effects: asArray(spec.effects),
           annotations,
           scrollIntoView: !!spec.scrollIntoView
       };
   }
   function resolveTransaction(state, specs, filter) {
       let s = resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);
       if (specs.length && specs[0].filter === false)
           filter = false;
       for (let i = 1; i < specs.length; i++) {
           if (specs[i].filter === false)
               filter = false;
           let seq = !!specs[i].sequential;
           s = mergeTransaction(s, resolveTransactionInner(state, specs[i], seq ? s.changes.newLength : state.doc.length), seq);
       }
       let tr = Transaction.create(state, s.changes, s.selection, s.effects, s.annotations, s.scrollIntoView);
       return extendTransaction(filter ? filterTransaction(tr) : tr);
   }
   // Finish a transaction by applying filters if necessary.
   function filterTransaction(tr) {
       let state = tr.startState;
       // Change filters
       let result = true;
       for (let filter of state.facet(changeFilter)) {
           let value = filter(tr);
           if (value === false) {
               result = false;
               break;
           }
           if (Array.isArray(value))
               result = result === true ? value : joinRanges(result, value);
       }
       if (result !== true) {
           let changes, back;
           if (result === false) {
               back = tr.changes.invertedDesc;
               changes = ChangeSet.empty(state.doc.length);
           }
           else {
               let filtered = tr.changes.filter(result);
               changes = filtered.changes;
               back = filtered.filtered.mapDesc(filtered.changes).invertedDesc;
           }
           tr = Transaction.create(state, changes, tr.selection && tr.selection.map(back), StateEffect.mapEffects(tr.effects, back), tr.annotations, tr.scrollIntoView);
       }
       // Transaction filters
       let filters = state.facet(transactionFilter);
       for (let i = filters.length - 1; i >= 0; i--) {
           let filtered = filters[i](tr);
           if (filtered instanceof Transaction)
               tr = filtered;
           else if (Array.isArray(filtered) && filtered.length == 1 && filtered[0] instanceof Transaction)
               tr = filtered[0];
           else
               tr = resolveTransaction(state, asArray(filtered), false);
       }
       return tr;
   }
   function extendTransaction(tr) {
       let state = tr.startState, extenders = state.facet(transactionExtender), spec = tr;
       for (let i = extenders.length - 1; i >= 0; i--) {
           let extension = extenders[i](tr);
           if (extension && Object.keys(extension).length)
               spec = mergeTransaction(spec, resolveTransactionInner(state, extension, tr.changes.newLength), true);
       }
       return spec == tr ? tr : Transaction.create(state, tr.changes, tr.selection, spec.effects, spec.annotations, spec.scrollIntoView);
   }
   const none$3 = [];
   function asArray(value) {
       return value == null ? none$3 : Array.isArray(value) ? value : [value];
   }

   /**
   The categories produced by a [character
   categorizer](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer). These are used
   do things like selecting by word.
   */
   var CharCategory = /*@__PURE__*/(function (CharCategory) {
       /**
       Word characters.
       */
       CharCategory[CharCategory["Word"] = 0] = "Word";
       /**
       Whitespace.
       */
       CharCategory[CharCategory["Space"] = 1] = "Space";
       /**
       Anything else.
       */
       CharCategory[CharCategory["Other"] = 2] = "Other";
   return CharCategory})(CharCategory || (CharCategory = {}));
   const nonASCIISingleCaseWordChar = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
   let wordChar;
   try {
       wordChar = /*@__PURE__*/new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
   }
   catch (_) { }
   function hasWordChar(str) {
       if (wordChar)
           return wordChar.test(str);
       for (let i = 0; i < str.length; i++) {
           let ch = str[i];
           if (/\w/.test(ch) || ch > "\x80" && (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch)))
               return true;
       }
       return false;
   }
   function makeCategorizer(wordChars) {
       return (char) => {
           if (!/\S/.test(char))
               return CharCategory.Space;
           if (hasWordChar(char))
               return CharCategory.Word;
           for (let i = 0; i < wordChars.length; i++)
               if (char.indexOf(wordChars[i]) > -1)
                   return CharCategory.Word;
           return CharCategory.Other;
       };
   }

   /**
   The editor state class is a persistent (immutable) data structure.
   To update a state, you [create](https://codemirror.net/6/docs/ref/#state.EditorState.update) a
   [transaction](https://codemirror.net/6/docs/ref/#state.Transaction), which produces a _new_ state
   instance, without modifying the original object.

   As such, _never_ mutate properties of a state directly. That'll
   just break things.
   */
   class EditorState {
       constructor(
       /**
       @internal
       */
       config, 
       /**
       The current document.
       */
       doc, 
       /**
       The current selection.
       */
       selection, 
       /**
       @internal
       */
       values, computeSlot, tr) {
           this.config = config;
           this.doc = doc;
           this.selection = selection;
           this.values = values;
           this.status = config.statusTemplate.slice();
           this.computeSlot = computeSlot;
           // Fill in the computed state immediately, so that further queries
           // for it made during the update return this state
           if (tr)
               tr._state = this;
           for (let i = 0; i < this.config.dynamicSlots.length; i++)
               ensureAddr(this, i << 1);
           this.computeSlot = null;
       }
       field(field, require = true) {
           let addr = this.config.address[field.id];
           if (addr == null) {
               if (require)
                   throw new RangeError("Field is not present in this state");
               return undefined;
           }
           ensureAddr(this, addr);
           return getAddr(this, addr);
       }
       /**
       Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
       state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
       can be passed. Unless
       [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
       [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
       are assumed to start in the _current_ document (not the document
       produced by previous specs), and its
       [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
       [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
       to the document created by its _own_ changes. The resulting
       transaction contains the combined effect of all the different
       specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
       specs take precedence over earlier ones.
       */
       update(...specs) {
           return resolveTransaction(this, specs, true);
       }
       /**
       @internal
       */
       applyTransaction(tr) {
           let conf = this.config, { base, compartments } = conf;
           for (let effect of tr.effects) {
               if (effect.is(Compartment.reconfigure)) {
                   if (conf) {
                       compartments = new Map;
                       conf.compartments.forEach((val, key) => compartments.set(key, val));
                       conf = null;
                   }
                   compartments.set(effect.value.compartment, effect.value.extension);
               }
               else if (effect.is(StateEffect.reconfigure)) {
                   conf = null;
                   base = effect.value;
               }
               else if (effect.is(StateEffect.appendConfig)) {
                   conf = null;
                   base = asArray(base).concat(effect.value);
               }
           }
           let startValues;
           if (!conf) {
               conf = Configuration.resolve(base, compartments, this);
               let intermediateState = new EditorState(conf, this.doc, this.selection, conf.dynamicSlots.map(() => null), (state, slot) => slot.reconfigure(state, this), null);
               startValues = intermediateState.values;
           }
           else {
               startValues = tr.startState.values.slice();
           }
           new EditorState(conf, tr.newDoc, tr.newSelection, startValues, (state, slot) => slot.update(state, tr), tr);
       }
       /**
       Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
       replaces every selection range with the given content.
       */
       replaceSelection(text) {
           if (typeof text == "string")
               text = this.toText(text);
           return this.changeByRange(range => ({ changes: { from: range.from, to: range.to, insert: text },
               range: EditorSelection.cursor(range.from + text.length) }));
       }
       /**
       Create a set of changes and a new selection by running the given
       function for each range in the active selection. The function
       can return an optional set of changes (in the coordinate space
       of the start document), plus an updated range (in the coordinate
       space of the document produced by the call's own changes). This
       method will merge all the changes and ranges into a single
       changeset and selection, and return it as a [transaction
       spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
       [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
       */
       changeByRange(f) {
           let sel = this.selection;
           let result1 = f(sel.ranges[0]);
           let changes = this.changes(result1.changes), ranges = [result1.range];
           let effects = asArray(result1.effects);
           for (let i = 1; i < sel.ranges.length; i++) {
               let result = f(sel.ranges[i]);
               let newChanges = this.changes(result.changes), newMapped = newChanges.map(changes);
               for (let j = 0; j < i; j++)
                   ranges[j] = ranges[j].map(newMapped);
               let mapBy = changes.mapDesc(newChanges, true);
               ranges.push(result.range.map(mapBy));
               changes = changes.compose(newMapped);
               effects = StateEffect.mapEffects(effects, newMapped).concat(StateEffect.mapEffects(asArray(result.effects), mapBy));
           }
           return {
               changes,
               selection: EditorSelection.create(ranges, sel.mainIndex),
               effects
           };
       }
       /**
       Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
       description, taking the state's document length and line
       separator into account.
       */
       changes(spec = []) {
           if (spec instanceof ChangeSet)
               return spec;
           return ChangeSet.of(spec, this.doc.length, this.facet(EditorState.lineSeparator));
       }
       /**
       Using the state's [line
       separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
       [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.
       */
       toText(string) {
           return Text$1.of(string.split(this.facet(EditorState.lineSeparator) || DefaultSplit));
       }
       /**
       Return the given range of the document as a string.
       */
       sliceDoc(from = 0, to = this.doc.length) {
           return this.doc.sliceString(from, to, this.lineBreak);
       }
       /**
       Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
       */
       facet(facet) {
           let addr = this.config.address[facet.id];
           if (addr == null)
               return facet.default;
           ensureAddr(this, addr);
           return getAddr(this, addr);
       }
       /**
       Convert this state to a JSON-serializable object. When custom
       fields should be serialized, you can pass them in as an object
       mapping property names (in the resulting object, which should
       not use `doc` or `selection`) to fields.
       */
       toJSON(fields) {
           let result = {
               doc: this.sliceDoc(),
               selection: this.selection.toJSON()
           };
           if (fields)
               for (let prop in fields) {
                   let value = fields[prop];
                   if (value instanceof StateField && this.config.address[value.id] != null)
                       result[prop] = value.spec.toJSON(this.field(fields[prop]), this);
               }
           return result;
       }
       /**
       Deserialize a state from its JSON representation. When custom
       fields should be deserialized, pass the same object you passed
       to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
       third argument.
       */
       static fromJSON(json, config = {}, fields) {
           if (!json || typeof json.doc != "string")
               throw new RangeError("Invalid JSON representation for EditorState");
           let fieldInit = [];
           if (fields)
               for (let prop in fields) {
                   if (Object.prototype.hasOwnProperty.call(json, prop)) {
                       let field = fields[prop], value = json[prop];
                       fieldInit.push(field.init(state => field.spec.fromJSON(value, state)));
                   }
               }
           return EditorState.create({
               doc: json.doc,
               selection: EditorSelection.fromJSON(json.selection),
               extensions: config.extensions ? fieldInit.concat([config.extensions]) : fieldInit
           });
       }
       /**
       Create a new state. You'll usually only need this when
       initializing an editor—updated states are created by applying
       transactions.
       */
       static create(config = {}) {
           let configuration = Configuration.resolve(config.extensions || [], new Map);
           let doc = config.doc instanceof Text$1 ? config.doc
               : Text$1.of((config.doc || "").split(configuration.staticFacet(EditorState.lineSeparator) || DefaultSplit));
           let selection = !config.selection ? EditorSelection.single(0)
               : config.selection instanceof EditorSelection ? config.selection
                   : EditorSelection.single(config.selection.anchor, config.selection.head);
           checkSelection(selection, doc.length);
           if (!configuration.staticFacet(allowMultipleSelections))
               selection = selection.asSingle();
           return new EditorState(configuration, doc, selection, configuration.dynamicSlots.map(() => null), (state, slot) => slot.create(state), null);
       }
       /**
       The size (in columns) of a tab in the document, determined by
       the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
       */
       get tabSize() { return this.facet(EditorState.tabSize); }
       /**
       Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
       string for this state.
       */
       get lineBreak() { return this.facet(EditorState.lineSeparator) || "\n"; }
       /**
       Returns true when the editor is
       [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
       */
       get readOnly() { return this.facet(readOnly); }
       /**
       Look up a translation for the given phrase (via the
       [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
       original string if no translation is found.
       
       If additional arguments are passed, they will be inserted in
       place of markers like `$1` (for the first value) and `$2`, etc.
       A single `$` is equivalent to `$1`, and `$$` will produce a
       literal dollar sign.
       */
       phrase(phrase, ...insert) {
           for (let map of this.facet(EditorState.phrases))
               if (Object.prototype.hasOwnProperty.call(map, phrase)) {
                   phrase = map[phrase];
                   break;
               }
           if (insert.length)
               phrase = phrase.replace(/\$(\$|\d*)/g, (m, i) => {
                   if (i == "$")
                       return "$";
                   let n = +(i || 1);
                   return !n || n > insert.length ? m : insert[n - 1];
               });
           return phrase;
       }
       /**
       Find the values for a given language data field, provided by the
       the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
       
       Examples of language data fields are...
       
       - [`"commentTokens"`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) for specifying
         comment syntax.
       - [`"autocomplete"`](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion^config.override)
         for providing language-specific completion sources.
       - [`"wordChars"`](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) for adding
         characters that should be considered part of words in this
         language.
       - [`"closeBrackets"`](https://codemirror.net/6/docs/ref/#autocomplete.CloseBracketConfig) controls
         bracket closing behavior.
       */
       languageDataAt(name, pos, side = -1) {
           let values = [];
           for (let provider of this.facet(languageData)) {
               for (let result of provider(this, pos, side)) {
                   if (Object.prototype.hasOwnProperty.call(result, name))
                       values.push(result[name]);
               }
           }
           return values;
       }
       /**
       Return a function that can categorize strings (expected to
       represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))
       into one of:
       
        - Word (contains an alphanumeric character or a character
          explicitly listed in the local language's `"wordChars"`
          language data, which should be a string)
        - Space (contains only whitespace)
        - Other (anything else)
       */
       charCategorizer(at) {
           return makeCategorizer(this.languageDataAt("wordChars", at).join(""));
       }
       /**
       Find the word at the given position, meaning the range
       containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
       around it. If no word characters are adjacent to the position,
       this returns null.
       */
       wordAt(pos) {
           let { text, from, length } = this.doc.lineAt(pos);
           let cat = this.charCategorizer(pos);
           let start = pos - from, end = pos - from;
           while (start > 0) {
               let prev = findClusterBreak(text, start, false);
               if (cat(text.slice(prev, start)) != CharCategory.Word)
                   break;
               start = prev;
           }
           while (end < length) {
               let next = findClusterBreak(text, end);
               if (cat(text.slice(end, next)) != CharCategory.Word)
                   break;
               end = next;
           }
           return start == end ? null : EditorSelection.range(start + from, end + from);
       }
   }
   /**
   A facet that, when enabled, causes the editor to allow multiple
   ranges to be selected. Be careful though, because by default the
   editor relies on the native DOM selection, which cannot handle
   multiple selections. An extension like
   [`drawSelection`](https://codemirror.net/6/docs/ref/#view.drawSelection) can be used to make
   secondary selections visible to the user.
   */
   EditorState.allowMultipleSelections = allowMultipleSelections;
   /**
   Configures the tab size to use in this state. The first
   (highest-precedence) value of the facet is used. If no value is
   given, this defaults to 4.
   */
   EditorState.tabSize = /*@__PURE__*/Facet.define({
       combine: values => values.length ? values[0] : 4
   });
   /**
   The line separator to use. By default, any of `"\n"`, `"\r\n"`
   and `"\r"` is treated as a separator when splitting lines, and
   lines are joined with `"\n"`.

   When you configure a value here, only that precise separator
   will be used, allowing you to round-trip documents through the
   editor without normalizing line separators.
   */
   EditorState.lineSeparator = lineSeparator;
   /**
   This facet controls the value of the
   [`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) getter, which is
   consulted by commands and extensions that implement editing
   functionality to determine whether they should apply. It
   defaults to false, but when its highest-precedence value is
   `true`, such functionality disables itself.

   Not to be confused with
   [`EditorView.editable`](https://codemirror.net/6/docs/ref/#view.EditorView^editable), which
   controls whether the editor's DOM is set to be editable (and
   thus focusable).
   */
   EditorState.readOnly = readOnly;
   /**
   Registers translation phrases. The
   [`phrase`](https://codemirror.net/6/docs/ref/#state.EditorState.phrase) method will look through
   all objects registered with this facet to find translations for
   its argument.
   */
   EditorState.phrases = /*@__PURE__*/Facet.define({
       compare(a, b) {
           let kA = Object.keys(a), kB = Object.keys(b);
           return kA.length == kB.length && kA.every(k => a[k] == b[k]);
       }
   });
   /**
   A facet used to register [language
   data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) providers.
   */
   EditorState.languageData = languageData;
   /**
   Facet used to register change filters, which are called for each
   transaction (unless explicitly
   [disabled](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter)), and can suppress
   part of the transaction's changes.

   Such a function can return `true` to indicate that it doesn't
   want to do anything, `false` to completely stop the changes in
   the transaction, or a set of ranges in which changes should be
   suppressed. Such ranges are represented as an array of numbers,
   with each pair of two numbers indicating the start and end of a
   range. So for example `[10, 20, 100, 110]` suppresses changes
   between 10 and 20, and between 100 and 110.
   */
   EditorState.changeFilter = changeFilter;
   /**
   Facet used to register a hook that gets a chance to update or
   replace transaction specs before they are applied. This will
   only be applied for transactions that don't have
   [`filter`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter) set to `false`. You
   can either return a single transaction spec (possibly the input
   transaction), or an array of specs (which will be combined in
   the same way as the arguments to
   [`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update)).

   When possible, it is recommended to avoid accessing
   [`Transaction.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state) in a filter,
   since it will force creation of a state that will then be
   discarded again, if the transaction is actually filtered.

   (This functionality should be used with care. Indiscriminately
   modifying transaction is likely to break something or degrade
   the user experience.)
   */
   EditorState.transactionFilter = transactionFilter;
   /**
   This is a more limited form of
   [`transactionFilter`](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter),
   which can only add
   [annotations](https://codemirror.net/6/docs/ref/#state.TransactionSpec.annotations) and
   [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects). _But_, this type
   of filter runs even if the transaction has disabled regular
   [filtering](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter), making it suitable
   for effects that don't need to touch the changes or selection,
   but do want to process every transaction.

   Extenders run _after_ filters, when both are present.
   */
   EditorState.transactionExtender = transactionExtender;
   Compartment.reconfigure = /*@__PURE__*/StateEffect.define();

   /**
   Utility function for combining behaviors to fill in a config
   object from an array of provided configs. `defaults` should hold
   default values for all optional fields in `Config`.

   The function will, by default, error
   when a field gets two values that aren't `===`-equal, but you can
   provide combine functions per field to do something else.
   */
   function combineConfig(configs, defaults, // Should hold only the optional properties of Config, but I haven't managed to express that
   combine = {}) {
       let result = {};
       for (let config of configs)
           for (let key of Object.keys(config)) {
               let value = config[key], current = result[key];
               if (current === undefined)
                   result[key] = value;
               else if (current === value || value === undefined) ; // No conflict
               else if (Object.hasOwnProperty.call(combine, key))
                   result[key] = combine[key](current, value);
               else
                   throw new Error("Config merge conflict for field " + key);
           }
       for (let key in defaults)
           if (result[key] === undefined)
               result[key] = defaults[key];
       return result;
   }

   /**
   Each range is associated with a value, which must inherit from
   this class.
   */
   class RangeValue {
       /**
       Compare this value with another value. Used when comparing
       rangesets. The default implementation compares by identity.
       Unless you are only creating a fixed number of unique instances
       of your value type, it is a good idea to implement this
       properly.
       */
       eq(other) { return this == other; }
       /**
       Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.
       */
       range(from, to = from) { return Range$1.create(from, to, this); }
   }
   RangeValue.prototype.startSide = RangeValue.prototype.endSide = 0;
   RangeValue.prototype.point = false;
   RangeValue.prototype.mapMode = MapMode.TrackDel;
   /**
   A range associates a value with a range of positions.
   */
   let Range$1 = class Range {
       constructor(
       /**
       The range's start position.
       */
       from, 
       /**
       Its end position.
       */
       to, 
       /**
       The value associated with this range.
       */
       value) {
           this.from = from;
           this.to = to;
           this.value = value;
       }
       /**
       @internal
       */
       static create(from, to, value) {
           return new Range(from, to, value);
       }
   };
   function cmpRange(a, b) {
       return a.from - b.from || a.value.startSide - b.value.startSide;
   }
   class Chunk {
       constructor(from, to, value, 
       // Chunks are marked with the largest point that occurs
       // in them (or -1 for no points), so that scans that are
       // only interested in points (such as the
       // heightmap-related logic) can skip range-only chunks.
       maxPoint) {
           this.from = from;
           this.to = to;
           this.value = value;
           this.maxPoint = maxPoint;
       }
       get length() { return this.to[this.to.length - 1]; }
       // Find the index of the given position and side. Use the ranges'
       // `from` pos when `end == false`, `to` when `end == true`.
       findIndex(pos, side, end, startAt = 0) {
           let arr = end ? this.to : this.from;
           for (let lo = startAt, hi = arr.length;;) {
               if (lo == hi)
                   return lo;
               let mid = (lo + hi) >> 1;
               let diff = arr[mid] - pos || (end ? this.value[mid].endSide : this.value[mid].startSide) - side;
               if (mid == lo)
                   return diff >= 0 ? lo : hi;
               if (diff >= 0)
                   hi = mid;
               else
                   lo = mid + 1;
           }
       }
       between(offset, from, to, f) {
           for (let i = this.findIndex(from, -1000000000 /* C.Far */, true), e = this.findIndex(to, 1000000000 /* C.Far */, false, i); i < e; i++)
               if (f(this.from[i] + offset, this.to[i] + offset, this.value[i]) === false)
                   return false;
       }
       map(offset, changes) {
           let value = [], from = [], to = [], newPos = -1, maxPoint = -1;
           for (let i = 0; i < this.value.length; i++) {
               let val = this.value[i], curFrom = this.from[i] + offset, curTo = this.to[i] + offset, newFrom, newTo;
               if (curFrom == curTo) {
                   let mapped = changes.mapPos(curFrom, val.startSide, val.mapMode);
                   if (mapped == null)
                       continue;
                   newFrom = newTo = mapped;
                   if (val.startSide != val.endSide) {
                       newTo = changes.mapPos(curFrom, val.endSide);
                       if (newTo < newFrom)
                           continue;
                   }
               }
               else {
                   newFrom = changes.mapPos(curFrom, val.startSide);
                   newTo = changes.mapPos(curTo, val.endSide);
                   if (newFrom > newTo || newFrom == newTo && val.startSide > 0 && val.endSide <= 0)
                       continue;
               }
               if ((newTo - newFrom || val.endSide - val.startSide) < 0)
                   continue;
               if (newPos < 0)
                   newPos = newFrom;
               if (val.point)
                   maxPoint = Math.max(maxPoint, newTo - newFrom);
               value.push(val);
               from.push(newFrom - newPos);
               to.push(newTo - newPos);
           }
           return { mapped: value.length ? new Chunk(from, to, value, maxPoint) : null, pos: newPos };
       }
   }
   /**
   A range set stores a collection of [ranges](https://codemirror.net/6/docs/ref/#state.Range) in a
   way that makes them efficient to [map](https://codemirror.net/6/docs/ref/#state.RangeSet.map) and
   [update](https://codemirror.net/6/docs/ref/#state.RangeSet.update). This is an immutable data
   structure.
   */
   class RangeSet {
       constructor(
       /**
       @internal
       */
       chunkPos, 
       /**
       @internal
       */
       chunk, 
       /**
       @internal
       */
       nextLayer, 
       /**
       @internal
       */
       maxPoint) {
           this.chunkPos = chunkPos;
           this.chunk = chunk;
           this.nextLayer = nextLayer;
           this.maxPoint = maxPoint;
       }
       /**
       @internal
       */
       static create(chunkPos, chunk, nextLayer, maxPoint) {
           return new RangeSet(chunkPos, chunk, nextLayer, maxPoint);
       }
       /**
       @internal
       */
       get length() {
           let last = this.chunk.length - 1;
           return last < 0 ? 0 : Math.max(this.chunkEnd(last), this.nextLayer.length);
       }
       /**
       The number of ranges in the set.
       */
       get size() {
           if (this.isEmpty)
               return 0;
           let size = this.nextLayer.size;
           for (let chunk of this.chunk)
               size += chunk.value.length;
           return size;
       }
       /**
       @internal
       */
       chunkEnd(index) {
           return this.chunkPos[index] + this.chunk[index].length;
       }
       /**
       Update the range set, optionally adding new ranges or filtering
       out existing ones.
       
       (Note: The type parameter is just there as a kludge to work
       around TypeScript variance issues that prevented `RangeSet<X>`
       from being a subtype of `RangeSet<Y>` when `X` is a subtype of
       `Y`.)
       */
       update(updateSpec) {
           let { add = [], sort = false, filterFrom = 0, filterTo = this.length } = updateSpec;
           let filter = updateSpec.filter;
           if (add.length == 0 && !filter)
               return this;
           if (sort)
               add = add.slice().sort(cmpRange);
           if (this.isEmpty)
               return add.length ? RangeSet.of(add) : this;
           let cur = new LayerCursor(this, null, -1).goto(0), i = 0, spill = [];
           let builder = new RangeSetBuilder();
           while (cur.value || i < add.length) {
               if (i < add.length && (cur.from - add[i].from || cur.startSide - add[i].value.startSide) >= 0) {
                   let range = add[i++];
                   if (!builder.addInner(range.from, range.to, range.value))
                       spill.push(range);
               }
               else if (cur.rangeIndex == 1 && cur.chunkIndex < this.chunk.length &&
                   (i == add.length || this.chunkEnd(cur.chunkIndex) < add[i].from) &&
                   (!filter || filterFrom > this.chunkEnd(cur.chunkIndex) || filterTo < this.chunkPos[cur.chunkIndex]) &&
                   builder.addChunk(this.chunkPos[cur.chunkIndex], this.chunk[cur.chunkIndex])) {
                   cur.nextChunk();
               }
               else {
                   if (!filter || filterFrom > cur.to || filterTo < cur.from || filter(cur.from, cur.to, cur.value)) {
                       if (!builder.addInner(cur.from, cur.to, cur.value))
                           spill.push(Range$1.create(cur.from, cur.to, cur.value));
                   }
                   cur.next();
               }
           }
           return builder.finishInner(this.nextLayer.isEmpty && !spill.length ? RangeSet.empty
               : this.nextLayer.update({ add: spill, filter, filterFrom, filterTo }));
       }
       /**
       Map this range set through a set of changes, return the new set.
       */
       map(changes) {
           if (changes.empty || this.isEmpty)
               return this;
           let chunks = [], chunkPos = [], maxPoint = -1;
           for (let i = 0; i < this.chunk.length; i++) {
               let start = this.chunkPos[i], chunk = this.chunk[i];
               let touch = changes.touchesRange(start, start + chunk.length);
               if (touch === false) {
                   maxPoint = Math.max(maxPoint, chunk.maxPoint);
                   chunks.push(chunk);
                   chunkPos.push(changes.mapPos(start));
               }
               else if (touch === true) {
                   let { mapped, pos } = chunk.map(start, changes);
                   if (mapped) {
                       maxPoint = Math.max(maxPoint, mapped.maxPoint);
                       chunks.push(mapped);
                       chunkPos.push(pos);
                   }
               }
           }
           let next = this.nextLayer.map(changes);
           return chunks.length == 0 ? next : new RangeSet(chunkPos, chunks, next || RangeSet.empty, maxPoint);
       }
       /**
       Iterate over the ranges that touch the region `from` to `to`,
       calling `f` for each. There is no guarantee that the ranges will
       be reported in any specific order. When the callback returns
       `false`, iteration stops.
       */
       between(from, to, f) {
           if (this.isEmpty)
               return;
           for (let i = 0; i < this.chunk.length; i++) {
               let start = this.chunkPos[i], chunk = this.chunk[i];
               if (to >= start && from <= start + chunk.length &&
                   chunk.between(start, from - start, to - start, f) === false)
                   return;
           }
           this.nextLayer.between(from, to, f);
       }
       /**
       Iterate over the ranges in this set, in order, including all
       ranges that end at or after `from`.
       */
       iter(from = 0) {
           return HeapCursor.from([this]).goto(from);
       }
       /**
       @internal
       */
       get isEmpty() { return this.nextLayer == this; }
       /**
       Iterate over the ranges in a collection of sets, in order,
       starting from `from`.
       */
       static iter(sets, from = 0) {
           return HeapCursor.from(sets).goto(from);
       }
       /**
       Iterate over two groups of sets, calling methods on `comparator`
       to notify it of possible differences.
       */
       static compare(oldSets, newSets, 
       /**
       This indicates how the underlying data changed between these
       ranges, and is needed to synchronize the iteration.
       */
       textDiff, comparator, 
       /**
       Can be used to ignore all non-point ranges, and points below
       the given size. When -1, all ranges are compared.
       */
       minPointSize = -1) {
           let a = oldSets.filter(set => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
           let b = newSets.filter(set => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
           let sharedChunks = findSharedChunks(a, b, textDiff);
           let sideA = new SpanCursor(a, sharedChunks, minPointSize);
           let sideB = new SpanCursor(b, sharedChunks, minPointSize);
           textDiff.iterGaps((fromA, fromB, length) => compare(sideA, fromA, sideB, fromB, length, comparator));
           if (textDiff.empty && textDiff.length == 0)
               compare(sideA, 0, sideB, 0, 0, comparator);
       }
       /**
       Compare the contents of two groups of range sets, returning true
       if they are equivalent in the given range.
       */
       static eq(oldSets, newSets, from = 0, to) {
           if (to == null)
               to = 1000000000 /* C.Far */ - 1;
           let a = oldSets.filter(set => !set.isEmpty && newSets.indexOf(set) < 0);
           let b = newSets.filter(set => !set.isEmpty && oldSets.indexOf(set) < 0);
           if (a.length != b.length)
               return false;
           if (!a.length)
               return true;
           let sharedChunks = findSharedChunks(a, b);
           let sideA = new SpanCursor(a, sharedChunks, 0).goto(from), sideB = new SpanCursor(b, sharedChunks, 0).goto(from);
           for (;;) {
               if (sideA.to != sideB.to ||
                   !sameValues(sideA.active, sideB.active) ||
                   sideA.point && (!sideB.point || !sideA.point.eq(sideB.point)))
                   return false;
               if (sideA.to > to)
                   return true;
               sideA.next();
               sideB.next();
           }
       }
       /**
       Iterate over a group of range sets at the same time, notifying
       the iterator about the ranges covering every given piece of
       content. Returns the open count (see
       [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end
       of the iteration.
       */
       static spans(sets, from, to, iterator, 
       /**
       When given and greater than -1, only points of at least this
       size are taken into account.
       */
       minPointSize = -1) {
           let cursor = new SpanCursor(sets, null, minPointSize).goto(from), pos = from;
           let openRanges = cursor.openStart;
           for (;;) {
               let curTo = Math.min(cursor.to, to);
               if (cursor.point) {
                   let active = cursor.activeForPoint(cursor.to);
                   let openCount = cursor.pointFrom < from ? active.length + 1 : Math.min(active.length, openRanges);
                   iterator.point(pos, curTo, cursor.point, active, openCount, cursor.pointRank);
                   openRanges = Math.min(cursor.openEnd(curTo), active.length);
               }
               else if (curTo > pos) {
                   iterator.span(pos, curTo, cursor.active, openRanges);
                   openRanges = cursor.openEnd(curTo);
               }
               if (cursor.to > to)
                   return openRanges + (cursor.point && cursor.to > to ? 1 : 0);
               pos = cursor.to;
               cursor.next();
           }
       }
       /**
       Create a range set for the given range or array of ranges. By
       default, this expects the ranges to be _sorted_ (by start
       position and, if two start at the same position,
       `value.startSide`). You can pass `true` as second argument to
       cause the method to sort them.
       */
       static of(ranges, sort = false) {
           let build = new RangeSetBuilder();
           for (let range of ranges instanceof Range$1 ? [ranges] : sort ? lazySort(ranges) : ranges)
               build.add(range.from, range.to, range.value);
           return build.finish();
       }
   }
   /**
   The empty set of ranges.
   */
   RangeSet.empty = /*@__PURE__*/new RangeSet([], [], null, -1);
   function lazySort(ranges) {
       if (ranges.length > 1)
           for (let prev = ranges[0], i = 1; i < ranges.length; i++) {
               let cur = ranges[i];
               if (cmpRange(prev, cur) > 0)
                   return ranges.slice().sort(cmpRange);
               prev = cur;
           }
       return ranges;
   }
   RangeSet.empty.nextLayer = RangeSet.empty;
   /**
   A range set builder is a data structure that helps build up a
   [range set](https://codemirror.net/6/docs/ref/#state.RangeSet) directly, without first allocating
   an array of [`Range`](https://codemirror.net/6/docs/ref/#state.Range) objects.
   */
   class RangeSetBuilder {
       finishChunk(newArrays) {
           this.chunks.push(new Chunk(this.from, this.to, this.value, this.maxPoint));
           this.chunkPos.push(this.chunkStart);
           this.chunkStart = -1;
           this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);
           this.maxPoint = -1;
           if (newArrays) {
               this.from = [];
               this.to = [];
               this.value = [];
           }
       }
       /**
       Create an empty builder.
       */
       constructor() {
           this.chunks = [];
           this.chunkPos = [];
           this.chunkStart = -1;
           this.last = null;
           this.lastFrom = -1000000000 /* C.Far */;
           this.lastTo = -1000000000 /* C.Far */;
           this.from = [];
           this.to = [];
           this.value = [];
           this.maxPoint = -1;
           this.setMaxPoint = -1;
           this.nextLayer = null;
       }
       /**
       Add a range. Ranges should be added in sorted (by `from` and
       `value.startSide`) order.
       */
       add(from, to, value) {
           if (!this.addInner(from, to, value))
               (this.nextLayer || (this.nextLayer = new RangeSetBuilder)).add(from, to, value);
       }
       /**
       @internal
       */
       addInner(from, to, value) {
           let diff = from - this.lastTo || value.startSide - this.last.endSide;
           if (diff <= 0 && (from - this.lastFrom || value.startSide - this.last.startSide) < 0)
               throw new Error("Ranges must be added sorted by `from` position and `startSide`");
           if (diff < 0)
               return false;
           if (this.from.length == 250 /* C.ChunkSize */)
               this.finishChunk(true);
           if (this.chunkStart < 0)
               this.chunkStart = from;
           this.from.push(from - this.chunkStart);
           this.to.push(to - this.chunkStart);
           this.last = value;
           this.lastFrom = from;
           this.lastTo = to;
           this.value.push(value);
           if (value.point)
               this.maxPoint = Math.max(this.maxPoint, to - from);
           return true;
       }
       /**
       @internal
       */
       addChunk(from, chunk) {
           if ((from - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0)
               return false;
           if (this.from.length)
               this.finishChunk(true);
           this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);
           this.chunks.push(chunk);
           this.chunkPos.push(from);
           let last = chunk.value.length - 1;
           this.last = chunk.value[last];
           this.lastFrom = chunk.from[last] + from;
           this.lastTo = chunk.to[last] + from;
           return true;
       }
       /**
       Finish the range set. Returns the new set. The builder can't be
       used anymore after this has been called.
       */
       finish() { return this.finishInner(RangeSet.empty); }
       /**
       @internal
       */
       finishInner(next) {
           if (this.from.length)
               this.finishChunk(false);
           if (this.chunks.length == 0)
               return next;
           let result = RangeSet.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next) : next, this.setMaxPoint);
           this.from = null; // Make sure further `add` calls produce errors
           return result;
       }
   }
   function findSharedChunks(a, b, textDiff) {
       let inA = new Map();
       for (let set of a)
           for (let i = 0; i < set.chunk.length; i++)
               if (set.chunk[i].maxPoint <= 0)
                   inA.set(set.chunk[i], set.chunkPos[i]);
       let shared = new Set();
       for (let set of b)
           for (let i = 0; i < set.chunk.length; i++) {
               let known = inA.get(set.chunk[i]);
               if (known != null && (textDiff ? textDiff.mapPos(known) : known) == set.chunkPos[i] &&
                   !(textDiff === null || textDiff === void 0 ? void 0 : textDiff.touchesRange(known, known + set.chunk[i].length)))
                   shared.add(set.chunk[i]);
           }
       return shared;
   }
   class LayerCursor {
       constructor(layer, skip, minPoint, rank = 0) {
           this.layer = layer;
           this.skip = skip;
           this.minPoint = minPoint;
           this.rank = rank;
       }
       get startSide() { return this.value ? this.value.startSide : 0; }
       get endSide() { return this.value ? this.value.endSide : 0; }
       goto(pos, side = -1000000000 /* C.Far */) {
           this.chunkIndex = this.rangeIndex = 0;
           this.gotoInner(pos, side, false);
           return this;
       }
       gotoInner(pos, side, forward) {
           while (this.chunkIndex < this.layer.chunk.length) {
               let next = this.layer.chunk[this.chunkIndex];
               if (!(this.skip && this.skip.has(next) ||
                   this.layer.chunkEnd(this.chunkIndex) < pos ||
                   next.maxPoint < this.minPoint))
                   break;
               this.chunkIndex++;
               forward = false;
           }
           if (this.chunkIndex < this.layer.chunk.length) {
               let rangeIndex = this.layer.chunk[this.chunkIndex].findIndex(pos - this.layer.chunkPos[this.chunkIndex], side, true);
               if (!forward || this.rangeIndex < rangeIndex)
                   this.setRangeIndex(rangeIndex);
           }
           this.next();
       }
       forward(pos, side) {
           if ((this.to - pos || this.endSide - side) < 0)
               this.gotoInner(pos, side, true);
       }
       next() {
           for (;;) {
               if (this.chunkIndex == this.layer.chunk.length) {
                   this.from = this.to = 1000000000 /* C.Far */;
                   this.value = null;
                   break;
               }
               else {
                   let chunkPos = this.layer.chunkPos[this.chunkIndex], chunk = this.layer.chunk[this.chunkIndex];
                   let from = chunkPos + chunk.from[this.rangeIndex];
                   this.from = from;
                   this.to = chunkPos + chunk.to[this.rangeIndex];
                   this.value = chunk.value[this.rangeIndex];
                   this.setRangeIndex(this.rangeIndex + 1);
                   if (this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)
                       break;
               }
           }
       }
       setRangeIndex(index) {
           if (index == this.layer.chunk[this.chunkIndex].value.length) {
               this.chunkIndex++;
               if (this.skip) {
                   while (this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]))
                       this.chunkIndex++;
               }
               this.rangeIndex = 0;
           }
           else {
               this.rangeIndex = index;
           }
       }
       nextChunk() {
           this.chunkIndex++;
           this.rangeIndex = 0;
           this.next();
       }
       compare(other) {
           return this.from - other.from || this.startSide - other.startSide || this.rank - other.rank ||
               this.to - other.to || this.endSide - other.endSide;
       }
   }
   class HeapCursor {
       constructor(heap) {
           this.heap = heap;
       }
       static from(sets, skip = null, minPoint = -1) {
           let heap = [];
           for (let i = 0; i < sets.length; i++) {
               for (let cur = sets[i]; !cur.isEmpty; cur = cur.nextLayer) {
                   if (cur.maxPoint >= minPoint)
                       heap.push(new LayerCursor(cur, skip, minPoint, i));
               }
           }
           return heap.length == 1 ? heap[0] : new HeapCursor(heap);
       }
       get startSide() { return this.value ? this.value.startSide : 0; }
       goto(pos, side = -1000000000 /* C.Far */) {
           for (let cur of this.heap)
               cur.goto(pos, side);
           for (let i = this.heap.length >> 1; i >= 0; i--)
               heapBubble(this.heap, i);
           this.next();
           return this;
       }
       forward(pos, side) {
           for (let cur of this.heap)
               cur.forward(pos, side);
           for (let i = this.heap.length >> 1; i >= 0; i--)
               heapBubble(this.heap, i);
           if ((this.to - pos || this.value.endSide - side) < 0)
               this.next();
       }
       next() {
           if (this.heap.length == 0) {
               this.from = this.to = 1000000000 /* C.Far */;
               this.value = null;
               this.rank = -1;
           }
           else {
               let top = this.heap[0];
               this.from = top.from;
               this.to = top.to;
               this.value = top.value;
               this.rank = top.rank;
               if (top.value)
                   top.next();
               heapBubble(this.heap, 0);
           }
       }
   }
   function heapBubble(heap, index) {
       for (let cur = heap[index];;) {
           let childIndex = (index << 1) + 1;
           if (childIndex >= heap.length)
               break;
           let child = heap[childIndex];
           if (childIndex + 1 < heap.length && child.compare(heap[childIndex + 1]) >= 0) {
               child = heap[childIndex + 1];
               childIndex++;
           }
           if (cur.compare(child) < 0)
               break;
           heap[childIndex] = cur;
           heap[index] = child;
           index = childIndex;
       }
   }
   class SpanCursor {
       constructor(sets, skip, minPoint) {
           this.minPoint = minPoint;
           this.active = [];
           this.activeTo = [];
           this.activeRank = [];
           this.minActive = -1;
           // A currently active point range, if any
           this.point = null;
           this.pointFrom = 0;
           this.pointRank = 0;
           this.to = -1000000000 /* C.Far */;
           this.endSide = 0;
           // The amount of open active ranges at the start of the iterator.
           // Not including points.
           this.openStart = -1;
           this.cursor = HeapCursor.from(sets, skip, minPoint);
       }
       goto(pos, side = -1000000000 /* C.Far */) {
           this.cursor.goto(pos, side);
           this.active.length = this.activeTo.length = this.activeRank.length = 0;
           this.minActive = -1;
           this.to = pos;
           this.endSide = side;
           this.openStart = -1;
           this.next();
           return this;
       }
       forward(pos, side) {
           while (this.minActive > -1 && (this.activeTo[this.minActive] - pos || this.active[this.minActive].endSide - side) < 0)
               this.removeActive(this.minActive);
           this.cursor.forward(pos, side);
       }
       removeActive(index) {
           remove(this.active, index);
           remove(this.activeTo, index);
           remove(this.activeRank, index);
           this.minActive = findMinIndex(this.active, this.activeTo);
       }
       addActive(trackOpen) {
           let i = 0, { value, to, rank } = this.cursor;
           while (i < this.activeRank.length && this.activeRank[i] <= rank)
               i++;
           insert(this.active, i, value);
           insert(this.activeTo, i, to);
           insert(this.activeRank, i, rank);
           if (trackOpen)
               insert(trackOpen, i, this.cursor.from);
           this.minActive = findMinIndex(this.active, this.activeTo);
       }
       // After calling this, if `this.point` != null, the next range is a
       // point. Otherwise, it's a regular range, covered by `this.active`.
       next() {
           let from = this.to, wasPoint = this.point;
           this.point = null;
           let trackOpen = this.openStart < 0 ? [] : null;
           for (;;) {
               let a = this.minActive;
               if (a > -1 && (this.activeTo[a] - this.cursor.from || this.active[a].endSide - this.cursor.startSide) < 0) {
                   if (this.activeTo[a] > from) {
                       this.to = this.activeTo[a];
                       this.endSide = this.active[a].endSide;
                       break;
                   }
                   this.removeActive(a);
                   if (trackOpen)
                       remove(trackOpen, a);
               }
               else if (!this.cursor.value) {
                   this.to = this.endSide = 1000000000 /* C.Far */;
                   break;
               }
               else if (this.cursor.from > from) {
                   this.to = this.cursor.from;
                   this.endSide = this.cursor.startSide;
                   break;
               }
               else {
                   let nextVal = this.cursor.value;
                   if (!nextVal.point) { // Opening a range
                       this.addActive(trackOpen);
                       this.cursor.next();
                   }
                   else if (wasPoint && this.cursor.to == this.to && this.cursor.from < this.cursor.to) {
                       // Ignore any non-empty points that end precisely at the end of the prev point
                       this.cursor.next();
                   }
                   else { // New point
                       this.point = nextVal;
                       this.pointFrom = this.cursor.from;
                       this.pointRank = this.cursor.rank;
                       this.to = this.cursor.to;
                       this.endSide = nextVal.endSide;
                       this.cursor.next();
                       this.forward(this.to, this.endSide);
                       break;
                   }
               }
           }
           if (trackOpen) {
               this.openStart = 0;
               for (let i = trackOpen.length - 1; i >= 0 && trackOpen[i] < from; i--)
                   this.openStart++;
           }
       }
       activeForPoint(to) {
           if (!this.active.length)
               return this.active;
           let active = [];
           for (let i = this.active.length - 1; i >= 0; i--) {
               if (this.activeRank[i] < this.pointRank)
                   break;
               if (this.activeTo[i] > to || this.activeTo[i] == to && this.active[i].endSide >= this.point.endSide)
                   active.push(this.active[i]);
           }
           return active.reverse();
       }
       openEnd(to) {
           let open = 0;
           for (let i = this.activeTo.length - 1; i >= 0 && this.activeTo[i] > to; i--)
               open++;
           return open;
       }
   }
   function compare(a, startA, b, startB, length, comparator) {
       a.goto(startA);
       b.goto(startB);
       let endB = startB + length;
       let pos = startB, dPos = startB - startA;
       for (;;) {
           let diff = (a.to + dPos) - b.to || a.endSide - b.endSide;
           let end = diff < 0 ? a.to + dPos : b.to, clipEnd = Math.min(end, endB);
           if (a.point || b.point) {
               if (!(a.point && b.point && (a.point == b.point || a.point.eq(b.point)) &&
                   sameValues(a.activeForPoint(a.to), b.activeForPoint(b.to))))
                   comparator.comparePoint(pos, clipEnd, a.point, b.point);
           }
           else {
               if (clipEnd > pos && !sameValues(a.active, b.active))
                   comparator.compareRange(pos, clipEnd, a.active, b.active);
           }
           if (end > endB)
               break;
           pos = end;
           if (diff <= 0)
               a.next();
           if (diff >= 0)
               b.next();
       }
   }
   function sameValues(a, b) {
       if (a.length != b.length)
           return false;
       for (let i = 0; i < a.length; i++)
           if (a[i] != b[i] && !a[i].eq(b[i]))
               return false;
       return true;
   }
   function remove(array, index) {
       for (let i = index, e = array.length - 1; i < e; i++)
           array[i] = array[i + 1];
       array.pop();
   }
   function insert(array, index, value) {
       for (let i = array.length - 1; i >= index; i--)
           array[i + 1] = array[i];
       array[index] = value;
   }
   function findMinIndex(value, array) {
       let found = -1, foundPos = 1000000000 /* C.Far */;
       for (let i = 0; i < array.length; i++)
           if ((array[i] - foundPos || value[i].endSide - value[found].endSide) < 0) {
               found = i;
               foundPos = array[i];
           }
       return found;
   }

   /**
   Count the column position at the given offset into the string,
   taking extending characters and tab size into account.
   */
   function countColumn(string, tabSize, to = string.length) {
       let n = 0;
       for (let i = 0; i < to;) {
           if (string.charCodeAt(i) == 9) {
               n += tabSize - (n % tabSize);
               i++;
           }
           else {
               n++;
               i = findClusterBreak(string, i);
           }
       }
       return n;
   }
   /**
   Find the offset that corresponds to the given column position in a
   string, taking extending characters and tab size into account. By
   default, the string length is returned when it is too short to
   reach the column. Pass `strict` true to make it return -1 in that
   situation.
   */
   function findColumn(string, col, tabSize, strict) {
       for (let i = 0, n = 0;;) {
           if (n >= col)
               return i;
           if (i == string.length)
               break;
           n += string.charCodeAt(i) == 9 ? tabSize - (n % tabSize) : 1;
           i = findClusterBreak(string, i);
       }
       return strict === true ? -1 : string.length;
   }

   const C$1 = "\u037c";
   const COUNT = typeof Symbol == "undefined" ? "__" + C$1 : Symbol.for(C$1);
   const SET = typeof Symbol == "undefined" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet");
   const top$1 = typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : {};

   // :: - Style modules encapsulate a set of CSS rules defined from
   // JavaScript. Their definitions are only available in a given DOM
   // root after it has been _mounted_ there with `StyleModule.mount`.
   //
   // Style modules should be created once and stored somewhere, as
   // opposed to re-creating them every time you need them. The amount of
   // CSS rules generated for a given DOM root is bounded by the amount
   // of style modules that were used. So to avoid leaking rules, don't
   // create these dynamically, but treat them as one-time allocations.
   class StyleModule {
     // :: (Object<Style>, ?{finish: ?(string) → string})
     // Create a style module from the given spec.
     //
     // When `finish` is given, it is called on regular (non-`@`)
     // selectors (after `&` expansion) to compute the final selector.
     constructor(spec, options) {
       this.rules = [];
       let {finish} = options || {};

       function splitSelector(selector) {
         return /^@/.test(selector) ? [selector] : selector.split(/,\s*/)
       }

       function render(selectors, spec, target, isKeyframes) {
         let local = [], isAt = /^@(\w+)\b/.exec(selectors[0]), keyframes = isAt && isAt[1] == "keyframes";
         if (isAt && spec == null) return target.push(selectors[0] + ";")
         for (let prop in spec) {
           let value = spec[prop];
           if (/&/.test(prop)) {
             render(prop.split(/,\s*/).map(part => selectors.map(sel => part.replace(/&/, sel))).reduce((a, b) => a.concat(b)),
                    value, target);
           } else if (value && typeof value == "object") {
             if (!isAt) throw new RangeError("The value of a property (" + prop + ") should be a primitive value.")
             render(splitSelector(prop), value, local, keyframes);
           } else if (value != null) {
             local.push(prop.replace(/_.*/, "").replace(/[A-Z]/g, l => "-" + l.toLowerCase()) + ": " + value + ";");
           }
         }
         if (local.length || keyframes) {
           target.push((finish && !isAt && !isKeyframes ? selectors.map(finish) : selectors).join(", ") +
                       " {" + local.join(" ") + "}");
         }
       }

       for (let prop in spec) render(splitSelector(prop), spec[prop], this.rules);
     }

     // :: () → string
     // Returns a string containing the module's CSS rules.
     getRules() { return this.rules.join("\n") }

     // :: () → string
     // Generate a new unique CSS class name.
     static newName() {
       let id = top$1[COUNT] || 1;
       top$1[COUNT] = id + 1;
       return C$1 + id.toString(36)
     }

     // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>)
     //
     // Mount the given set of modules in the given DOM root, which ensures
     // that the CSS rules defined by the module are available in that
     // context.
     //
     // Rules are only added to the document once per root.
     //
     // Rule order will follow the order of the modules, so that rules from
     // modules later in the array take precedence of those from earlier
     // modules. If you call this function multiple times for the same root
     // in a way that changes the order of already mounted modules, the old
     // order will be changed.
     static mount(root, modules) {
       (root[SET] || new StyleSet(root)).mount(Array.isArray(modules) ? modules : [modules]);
     }
   }

   let adoptedSet = new Map; //<Document, StyleSet>

   class StyleSet {
     constructor(root) {
       let doc = root.ownerDocument || root, win = doc.defaultView;
       if (!root.head && root.adoptedStyleSheets && win.CSSStyleSheet) {
         let adopted = adoptedSet.get(doc);
         if (adopted) {
           root.adoptedStyleSheets = [adopted.sheet, ...root.adoptedStyleSheets];
           return root[SET] = adopted
         }
         this.sheet = new win.CSSStyleSheet;
         root.adoptedStyleSheets = [this.sheet, ...root.adoptedStyleSheets];
         adoptedSet.set(doc, this);
       } else {
         this.styleTag = doc.createElement("style");
         let target = root.head || root;
         target.insertBefore(this.styleTag, target.firstChild);
       }
       this.modules = [];
       root[SET] = this;
     }

     mount(modules) {
       let sheet = this.sheet;
       let pos = 0 /* Current rule offset */, j = 0; /* Index into this.modules */
       for (let i = 0; i < modules.length; i++) {
         let mod = modules[i], index = this.modules.indexOf(mod);
         if (index < j && index > -1) { // Ordering conflict
           this.modules.splice(index, 1);
           j--;
           index = -1;
         }
         if (index == -1) {
           this.modules.splice(j++, 0, mod);
           if (sheet) for (let k = 0; k < mod.rules.length; k++)
             sheet.insertRule(mod.rules[k], pos++);
         } else {
           while (j < index) pos += this.modules[j++].rules.length;
           pos += mod.rules.length;
           j++;
         }
       }

       if (!sheet) {
         let text = "";
         for (let i = 0; i < this.modules.length; i++)
           text += this.modules[i].getRules() + "\n";
         this.styleTag.textContent = text;
       }
     }
   }

   // Style::Object<union<Style,string>>
   //
   // A style is an object that, in the simple case, maps CSS property
   // names to strings holding their values, as in `{color: "red",
   // fontWeight: "bold"}`. The property names can be given in
   // camel-case—the library will insert a dash before capital letters
   // when converting them to CSS.
   //
   // If you include an underscore in a property name, it and everything
   // after it will be removed from the output, which can be useful when
   // providing a property multiple times, for browser compatibility
   // reasons.
   //
   // A property in a style object can also be a sub-selector, which
   // extends the current context to add a pseudo-selector or a child
   // selector. Such a property should contain a `&` character, which
   // will be replaced by the current selector. For example `{"&:before":
   // {content: '"hi"'}}`. Sub-selectors and regular properties can
   // freely be mixed in a given object. Any property containing a `&` is
   // assumed to be a sub-selector.
   //
   // Finally, a property can specify an @-block to be wrapped around the
   // styles defined inside the object that's the property's value. For
   // example to create a media query you can do `{"@media screen and
   // (min-width: 400px)": {...}}`.

   var base$4 = {
     8: "Backspace",
     9: "Tab",
     10: "Enter",
     12: "NumLock",
     13: "Enter",
     16: "Shift",
     17: "Control",
     18: "Alt",
     20: "CapsLock",
     27: "Escape",
     32: " ",
     33: "PageUp",
     34: "PageDown",
     35: "End",
     36: "Home",
     37: "ArrowLeft",
     38: "ArrowUp",
     39: "ArrowRight",
     40: "ArrowDown",
     44: "PrintScreen",
     45: "Insert",
     46: "Delete",
     59: ";",
     61: "=",
     91: "Meta",
     92: "Meta",
     106: "*",
     107: "+",
     108: ",",
     109: "-",
     110: ".",
     111: "/",
     144: "NumLock",
     145: "ScrollLock",
     160: "Shift",
     161: "Shift",
     162: "Control",
     163: "Control",
     164: "Alt",
     165: "Alt",
     173: "-",
     186: ";",
     187: "=",
     188: ",",
     189: "-",
     190: ".",
     191: "/",
     192: "`",
     219: "[",
     220: "\\",
     221: "]",
     222: "'"
   };

   var shift = {
     48: ")",
     49: "!",
     50: "@",
     51: "#",
     52: "$",
     53: "%",
     54: "^",
     55: "&",
     56: "*",
     57: "(",
     59: ":",
     61: "+",
     173: "_",
     186: ":",
     187: "+",
     188: "<",
     189: "_",
     190: ">",
     191: "?",
     192: "~",
     219: "{",
     220: "|",
     221: "}",
     222: "\""
   };

   var chrome$1 = typeof navigator != "undefined" && /Chrome\/(\d+)/.exec(navigator.userAgent);
   var mac = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
   var ie$1 = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
   var brokenModifierNames = mac || chrome$1 && +chrome$1[1] < 57;

   // Fill in the digit keys
   for (var i$1 = 0; i$1 < 10; i$1++) base$4[48 + i$1] = base$4[96 + i$1] = String(i$1);

   // The function keys
   for (var i$1 = 1; i$1 <= 24; i$1++) base$4[i$1 + 111] = "F" + i$1;

   // And the alphabetic keys
   for (var i$1 = 65; i$1 <= 90; i$1++) {
     base$4[i$1] = String.fromCharCode(i$1 + 32);
     shift[i$1] = String.fromCharCode(i$1);
   }

   // For each code that doesn't have a shift-equivalent, copy the base name
   for (var code$3 in base$4) if (!shift.hasOwnProperty(code$3)) shift[code$3] = base$4[code$3];

   function keyName(event) {
     var ignoreKey = brokenModifierNames && (event.ctrlKey || event.altKey || event.metaKey) ||
       ie$1 && event.shiftKey && event.key && event.key.length == 1 ||
       event.key == "Unidentified";
     var name = (!ignoreKey && event.key) ||
       (event.shiftKey ? shift : base$4)[event.keyCode] ||
       event.key || "Unidentified";
     // Edge sometimes produces wrong names (Issue #3)
     if (name == "Esc") name = "Escape";
     if (name == "Del") name = "Delete";
     // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/
     if (name == "Left") name = "ArrowLeft";
     if (name == "Up") name = "ArrowUp";
     if (name == "Right") name = "ArrowRight";
     if (name == "Down") name = "ArrowDown";
     return name
   }

   function getSelection(root) {
       let target;
       // Browsers differ on whether shadow roots have a getSelection
       // method. If it exists, use that, otherwise, call it on the
       // document.
       if (root.nodeType == 11) { // Shadow root
           target = root.getSelection ? root : root.ownerDocument;
       }
       else {
           target = root;
       }
       return target.getSelection();
   }
   function contains$1(dom, node) {
       return node ? dom == node || dom.contains(node.nodeType != 1 ? node.parentNode : node) : false;
   }
   function deepActiveElement(doc) {
       let elt = doc.activeElement;
       while (elt && elt.shadowRoot)
           elt = elt.shadowRoot.activeElement;
       return elt;
   }
   function hasSelection(dom, selection) {
       if (!selection.anchorNode)
           return false;
       try {
           // Firefox will raise 'permission denied' errors when accessing
           // properties of `sel.anchorNode` when it's in a generated CSS
           // element.
           return contains$1(dom, selection.anchorNode);
       }
       catch (_) {
           return false;
       }
   }
   function clientRectsFor(dom) {
       if (dom.nodeType == 3)
           return textRange(dom, 0, dom.nodeValue.length).getClientRects();
       else if (dom.nodeType == 1)
           return dom.getClientRects();
       else
           return [];
   }
   // Scans forward and backward through DOM positions equivalent to the
   // given one to see if the two are in the same place (i.e. after a
   // text node vs at the end of that text node)
   function isEquivalentPosition(node, off, targetNode, targetOff) {
       return targetNode ? (scanFor(node, off, targetNode, targetOff, -1) ||
           scanFor(node, off, targetNode, targetOff, 1)) : false;
   }
   function domIndex(node) {
       for (var index = 0;; index++) {
           node = node.previousSibling;
           if (!node)
               return index;
       }
   }
   function scanFor(node, off, targetNode, targetOff, dir) {
       for (;;) {
           if (node == targetNode && off == targetOff)
               return true;
           if (off == (dir < 0 ? 0 : maxOffset(node))) {
               if (node.nodeName == "DIV")
                   return false;
               let parent = node.parentNode;
               if (!parent || parent.nodeType != 1)
                   return false;
               off = domIndex(node) + (dir < 0 ? 0 : 1);
               node = parent;
           }
           else if (node.nodeType == 1) {
               node = node.childNodes[off + (dir < 0 ? -1 : 0)];
               if (node.nodeType == 1 && node.contentEditable == "false")
                   return false;
               off = dir < 0 ? maxOffset(node) : 0;
           }
           else {
               return false;
           }
       }
   }
   function maxOffset(node) {
       return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
   }
   function flattenRect(rect, left) {
       let x = left ? rect.left : rect.right;
       return { left: x, right: x, top: rect.top, bottom: rect.bottom };
   }
   function windowRect(win) {
       return { left: 0, right: win.innerWidth,
           top: 0, bottom: win.innerHeight };
   }
   function scrollRectIntoView(dom, rect, side, x, y, xMargin, yMargin, ltr) {
       let doc = dom.ownerDocument, win = doc.defaultView || window;
       for (let cur = dom; cur;) {
           if (cur.nodeType == 1) { // Element
               let bounding, top = cur == doc.body;
               if (top) {
                   bounding = windowRect(win);
               }
               else {
                   if (cur.scrollHeight <= cur.clientHeight && cur.scrollWidth <= cur.clientWidth) {
                       cur = cur.assignedSlot || cur.parentNode;
                       continue;
                   }
                   let rect = cur.getBoundingClientRect();
                   // Make sure scrollbar width isn't included in the rectangle
                   bounding = { left: rect.left, right: rect.left + cur.clientWidth,
                       top: rect.top, bottom: rect.top + cur.clientHeight };
               }
               let moveX = 0, moveY = 0;
               if (y == "nearest") {
                   if (rect.top < bounding.top) {
                       moveY = -(bounding.top - rect.top + yMargin);
                       if (side > 0 && rect.bottom > bounding.bottom + moveY)
                           moveY = rect.bottom - bounding.bottom + moveY + yMargin;
                   }
                   else if (rect.bottom > bounding.bottom) {
                       moveY = rect.bottom - bounding.bottom + yMargin;
                       if (side < 0 && (rect.top - moveY) < bounding.top)
                           moveY = -(bounding.top + moveY - rect.top + yMargin);
                   }
               }
               else {
                   let rectHeight = rect.bottom - rect.top, boundingHeight = bounding.bottom - bounding.top;
                   let targetTop = y == "center" && rectHeight <= boundingHeight ? rect.top + rectHeight / 2 - boundingHeight / 2 :
                       y == "start" || y == "center" && side < 0 ? rect.top - yMargin :
                           rect.bottom - boundingHeight + yMargin;
                   moveY = targetTop - bounding.top;
               }
               if (x == "nearest") {
                   if (rect.left < bounding.left) {
                       moveX = -(bounding.left - rect.left + xMargin);
                       if (side > 0 && rect.right > bounding.right + moveX)
                           moveX = rect.right - bounding.right + moveX + xMargin;
                   }
                   else if (rect.right > bounding.right) {
                       moveX = rect.right - bounding.right + xMargin;
                       if (side < 0 && rect.left < bounding.left + moveX)
                           moveX = -(bounding.left + moveX - rect.left + xMargin);
                   }
               }
               else {
                   let targetLeft = x == "center" ? rect.left + (rect.right - rect.left) / 2 - (bounding.right - bounding.left) / 2 :
                       (x == "start") == ltr ? rect.left - xMargin :
                           rect.right - (bounding.right - bounding.left) + xMargin;
                   moveX = targetLeft - bounding.left;
               }
               if (moveX || moveY) {
                   if (top) {
                       win.scrollBy(moveX, moveY);
                   }
                   else {
                       let movedX = 0, movedY = 0;
                       if (moveY) {
                           let start = cur.scrollTop;
                           cur.scrollTop += moveY;
                           movedY = cur.scrollTop - start;
                       }
                       if (moveX) {
                           let start = cur.scrollLeft;
                           cur.scrollLeft += moveX;
                           movedX = cur.scrollLeft - start;
                       }
                       rect = { left: rect.left - movedX, top: rect.top - movedY,
                           right: rect.right - movedX, bottom: rect.bottom - movedY };
                       if (movedX && Math.abs(movedX - moveX) < 1)
                           x = "nearest";
                       if (movedY && Math.abs(movedY - moveY) < 1)
                           y = "nearest";
                   }
               }
               if (top)
                   break;
               cur = cur.assignedSlot || cur.parentNode;
           }
           else if (cur.nodeType == 11) { // A shadow root
               cur = cur.host;
           }
           else {
               break;
           }
       }
   }
   function scrollableParent(dom) {
       let doc = dom.ownerDocument;
       for (let cur = dom.parentNode; cur;) {
           if (cur == doc.body) {
               break;
           }
           else if (cur.nodeType == 1) {
               if (cur.scrollHeight > cur.clientHeight || cur.scrollWidth > cur.clientWidth)
                   return cur;
               cur = cur.assignedSlot || cur.parentNode;
           }
           else if (cur.nodeType == 11) {
               cur = cur.host;
           }
           else {
               break;
           }
       }
       return null;
   }
   class DOMSelectionState {
       constructor() {
           this.anchorNode = null;
           this.anchorOffset = 0;
           this.focusNode = null;
           this.focusOffset = 0;
       }
       eq(domSel) {
           return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset &&
               this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;
       }
       setRange(range) {
           let { anchorNode, focusNode } = range;
           // Clip offsets to node size to avoid crashes when Safari reports bogus offsets (#1152)
           this.set(anchorNode, Math.min(range.anchorOffset, anchorNode ? maxOffset(anchorNode) : 0), focusNode, Math.min(range.focusOffset, focusNode ? maxOffset(focusNode) : 0));
       }
       set(anchorNode, anchorOffset, focusNode, focusOffset) {
           this.anchorNode = anchorNode;
           this.anchorOffset = anchorOffset;
           this.focusNode = focusNode;
           this.focusOffset = focusOffset;
       }
   }
   let preventScrollSupported = null;
   // Feature-detects support for .focus({preventScroll: true}), and uses
   // a fallback kludge when not supported.
   function focusPreventScroll(dom) {
       if (dom.setActive)
           return dom.setActive(); // in IE
       if (preventScrollSupported)
           return dom.focus(preventScrollSupported);
       let stack = [];
       for (let cur = dom; cur; cur = cur.parentNode) {
           stack.push(cur, cur.scrollTop, cur.scrollLeft);
           if (cur == cur.ownerDocument)
               break;
       }
       dom.focus(preventScrollSupported == null ? {
           get preventScroll() {
               preventScrollSupported = { preventScroll: true };
               return true;
           }
       } : undefined);
       if (!preventScrollSupported) {
           preventScrollSupported = false;
           for (let i = 0; i < stack.length;) {
               let elt = stack[i++], top = stack[i++], left = stack[i++];
               if (elt.scrollTop != top)
                   elt.scrollTop = top;
               if (elt.scrollLeft != left)
                   elt.scrollLeft = left;
           }
       }
   }
   let scratchRange;
   function textRange(node, from, to = from) {
       let range = scratchRange || (scratchRange = document.createRange());
       range.setEnd(node, to);
       range.setStart(node, from);
       return range;
   }
   function dispatchKey(elt, name, code) {
       let options = { key: name, code: name, keyCode: code, which: code, cancelable: true };
       let down = new KeyboardEvent("keydown", options);
       down.synthetic = true;
       elt.dispatchEvent(down);
       let up = new KeyboardEvent("keyup", options);
       up.synthetic = true;
       elt.dispatchEvent(up);
       return down.defaultPrevented || up.defaultPrevented;
   }
   function getRoot(node) {
       while (node) {
           if (node && (node.nodeType == 9 || node.nodeType == 11 && node.host))
               return node;
           node = node.assignedSlot || node.parentNode;
       }
       return null;
   }
   function clearAttributes(node) {
       while (node.attributes.length)
           node.removeAttributeNode(node.attributes[0]);
   }
   function atElementStart(doc, selection) {
       let node = selection.focusNode, offset = selection.focusOffset;
       if (!node || selection.anchorNode != node || selection.anchorOffset != offset)
           return false;
       // Safari can report bogus offsets (#1152)
       offset = Math.min(offset, maxOffset(node));
       for (;;) {
           if (offset) {
               if (node.nodeType != 1)
                   return false;
               let prev = node.childNodes[offset - 1];
               if (prev.contentEditable == "false")
                   offset--;
               else {
                   node = prev;
                   offset = maxOffset(node);
               }
           }
           else if (node == doc) {
               return true;
           }
           else {
               offset = domIndex(node);
               node = node.parentNode;
           }
       }
   }

   class DOMPos {
       constructor(node, offset, precise = true) {
           this.node = node;
           this.offset = offset;
           this.precise = precise;
       }
       static before(dom, precise) { return new DOMPos(dom.parentNode, domIndex(dom), precise); }
       static after(dom, precise) { return new DOMPos(dom.parentNode, domIndex(dom) + 1, precise); }
   }
   const noChildren = [];
   class ContentView {
       constructor() {
           this.parent = null;
           this.dom = null;
           this.dirty = 2 /* Dirty.Node */;
       }
       get overrideDOMText() { return null; }
       get posAtStart() {
           return this.parent ? this.parent.posBefore(this) : 0;
       }
       get posAtEnd() {
           return this.posAtStart + this.length;
       }
       posBefore(view) {
           let pos = this.posAtStart;
           for (let child of this.children) {
               if (child == view)
                   return pos;
               pos += child.length + child.breakAfter;
           }
           throw new RangeError("Invalid child in posBefore");
       }
       posAfter(view) {
           return this.posBefore(view) + view.length;
       }
       sync(view, track) {
           if (this.dirty & 2 /* Dirty.Node */) {
               let parent = this.dom;
               let prev = null, next;
               for (let child of this.children) {
                   if (child.dirty) {
                       if (!child.dom && (next = prev ? prev.nextSibling : parent.firstChild)) {
                           let contentView = ContentView.get(next);
                           if (!contentView || !contentView.parent && contentView.canReuseDOM(child))
                               child.reuseDOM(next);
                       }
                       child.sync(view, track);
                       child.dirty = 0 /* Dirty.Not */;
                   }
                   next = prev ? prev.nextSibling : parent.firstChild;
                   if (track && !track.written && track.node == parent && next != child.dom)
                       track.written = true;
                   if (child.dom.parentNode == parent) {
                       while (next && next != child.dom)
                           next = rm$1(next);
                   }
                   else {
                       parent.insertBefore(child.dom, next);
                   }
                   prev = child.dom;
               }
               next = prev ? prev.nextSibling : parent.firstChild;
               if (next && track && track.node == parent)
                   track.written = true;
               while (next)
                   next = rm$1(next);
           }
           else if (this.dirty & 1 /* Dirty.Child */) {
               for (let child of this.children)
                   if (child.dirty) {
                       child.sync(view, track);
                       child.dirty = 0 /* Dirty.Not */;
                   }
           }
       }
       reuseDOM(_dom) { }
       localPosFromDOM(node, offset) {
           let after;
           if (node == this.dom) {
               after = this.dom.childNodes[offset];
           }
           else {
               let bias = maxOffset(node) == 0 ? 0 : offset == 0 ? -1 : 1;
               for (;;) {
                   let parent = node.parentNode;
                   if (parent == this.dom)
                       break;
                   if (bias == 0 && parent.firstChild != parent.lastChild) {
                       if (node == parent.firstChild)
                           bias = -1;
                       else
                           bias = 1;
                   }
                   node = parent;
               }
               if (bias < 0)
                   after = node;
               else
                   after = node.nextSibling;
           }
           if (after == this.dom.firstChild)
               return 0;
           while (after && !ContentView.get(after))
               after = after.nextSibling;
           if (!after)
               return this.length;
           for (let i = 0, pos = 0;; i++) {
               let child = this.children[i];
               if (child.dom == after)
                   return pos;
               pos += child.length + child.breakAfter;
           }
       }
       domBoundsAround(from, to, offset = 0) {
           let fromI = -1, fromStart = -1, toI = -1, toEnd = -1;
           for (let i = 0, pos = offset, prevEnd = offset; i < this.children.length; i++) {
               let child = this.children[i], end = pos + child.length;
               if (pos < from && end > to)
                   return child.domBoundsAround(from, to, pos);
               if (end >= from && fromI == -1) {
                   fromI = i;
                   fromStart = pos;
               }
               if (pos > to && child.dom.parentNode == this.dom) {
                   toI = i;
                   toEnd = prevEnd;
                   break;
               }
               prevEnd = end;
               pos = end + child.breakAfter;
           }
           return { from: fromStart, to: toEnd < 0 ? offset + this.length : toEnd,
               startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild,
               endDOM: toI < this.children.length && toI >= 0 ? this.children[toI].dom : null };
       }
       markDirty(andParent = false) {
           this.dirty |= 2 /* Dirty.Node */;
           this.markParentsDirty(andParent);
       }
       markParentsDirty(childList) {
           for (let parent = this.parent; parent; parent = parent.parent) {
               if (childList)
                   parent.dirty |= 2 /* Dirty.Node */;
               if (parent.dirty & 1 /* Dirty.Child */)
                   return;
               parent.dirty |= 1 /* Dirty.Child */;
               childList = false;
           }
       }
       setParent(parent) {
           if (this.parent != parent) {
               this.parent = parent;
               if (this.dirty)
                   this.markParentsDirty(true);
           }
       }
       setDOM(dom) {
           if (this.dom)
               this.dom.cmView = null;
           this.dom = dom;
           dom.cmView = this;
       }
       get rootView() {
           for (let v = this;;) {
               let parent = v.parent;
               if (!parent)
                   return v;
               v = parent;
           }
       }
       replaceChildren(from, to, children = noChildren) {
           this.markDirty();
           for (let i = from; i < to; i++) {
               let child = this.children[i];
               if (child.parent == this)
                   child.destroy();
           }
           this.children.splice(from, to - from, ...children);
           for (let i = 0; i < children.length; i++)
               children[i].setParent(this);
       }
       ignoreMutation(_rec) { return false; }
       ignoreEvent(_event) { return false; }
       childCursor(pos = this.length) {
           return new ChildCursor(this.children, pos, this.children.length);
       }
       childPos(pos, bias = 1) {
           return this.childCursor().findPos(pos, bias);
       }
       toString() {
           let name = this.constructor.name.replace("View", "");
           return name + (this.children.length ? "(" + this.children.join() + ")" :
               this.length ? "[" + (name == "Text" ? this.text : this.length) + "]" : "") +
               (this.breakAfter ? "#" : "");
       }
       static get(node) { return node.cmView; }
       get isEditable() { return true; }
       get isWidget() { return false; }
       get isHidden() { return false; }
       merge(from, to, source, hasStart, openStart, openEnd) {
           return false;
       }
       become(other) { return false; }
       canReuseDOM(other) { return other.constructor == this.constructor; }
       // When this is a zero-length view with a side, this should return a
       // number <= 0 to indicate it is before its position, or a
       // number > 0 when after its position.
       getSide() { return 0; }
       destroy() {
           this.parent = null;
       }
   }
   ContentView.prototype.breakAfter = 0;
   // Remove a DOM node and return its next sibling.
   function rm$1(dom) {
       let next = dom.nextSibling;
       dom.parentNode.removeChild(dom);
       return next;
   }
   class ChildCursor {
       constructor(children, pos, i) {
           this.children = children;
           this.pos = pos;
           this.i = i;
           this.off = 0;
       }
       findPos(pos, bias = 1) {
           for (;;) {
               if (pos > this.pos || pos == this.pos &&
                   (bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {
                   this.off = pos - this.pos;
                   return this;
               }
               let next = this.children[--this.i];
               this.pos -= next.length + next.breakAfter;
           }
       }
   }
   function replaceRange(parent, fromI, fromOff, toI, toOff, insert, breakAtStart, openStart, openEnd) {
       let { children } = parent;
       let before = children.length ? children[fromI] : null;
       let last = insert.length ? insert[insert.length - 1] : null;
       let breakAtEnd = last ? last.breakAfter : breakAtStart;
       // Change within a single child
       if (fromI == toI && before && !breakAtStart && !breakAtEnd && insert.length < 2 &&
           before.merge(fromOff, toOff, insert.length ? last : null, fromOff == 0, openStart, openEnd))
           return;
       if (toI < children.length) {
           let after = children[toI];
           // Make sure the end of the child after the update is preserved in `after`
           if (after && toOff < after.length) {
               // If we're splitting a child, separate part of it to avoid that
               // being mangled when updating the child before the update.
               if (fromI == toI) {
                   after = after.split(toOff);
                   toOff = 0;
               }
               // If the element after the replacement should be merged with
               // the last replacing element, update `content`
               if (!breakAtEnd && last && after.merge(0, toOff, last, true, 0, openEnd)) {
                   insert[insert.length - 1] = after;
               }
               else {
                   // Remove the start of the after element, if necessary, and
                   // add it to `content`.
                   if (toOff)
                       after.merge(0, toOff, null, false, 0, openEnd);
                   insert.push(after);
               }
           }
           else if (after === null || after === void 0 ? void 0 : after.breakAfter) {
               // The element at `toI` is entirely covered by this range.
               // Preserve its line break, if any.
               if (last)
                   last.breakAfter = 1;
               else
                   breakAtStart = 1;
           }
           // Since we've handled the next element from the current elements
           // now, make sure `toI` points after that.
           toI++;
       }
       if (before) {
           before.breakAfter = breakAtStart;
           if (fromOff > 0) {
               if (!breakAtStart && insert.length && before.merge(fromOff, before.length, insert[0], false, openStart, 0)) {
                   before.breakAfter = insert.shift().breakAfter;
               }
               else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) {
                   before.merge(fromOff, before.length, null, false, openStart, 0);
               }
               fromI++;
           }
       }
       // Try to merge widgets on the boundaries of the replacement
       while (fromI < toI && insert.length) {
           if (children[toI - 1].become(insert[insert.length - 1])) {
               toI--;
               insert.pop();
               openEnd = insert.length ? 0 : openStart;
           }
           else if (children[fromI].become(insert[0])) {
               fromI++;
               insert.shift();
               openStart = insert.length ? 0 : openEnd;
           }
           else {
               break;
           }
       }
       if (!insert.length && fromI && toI < children.length && !children[fromI - 1].breakAfter &&
           children[toI].merge(0, 0, children[fromI - 1], false, openStart, openEnd))
           fromI--;
       if (fromI < toI || insert.length)
           parent.replaceChildren(fromI, toI, insert);
   }
   function mergeChildrenInto(parent, from, to, insert, openStart, openEnd) {
       let cur = parent.childCursor();
       let { i: toI, off: toOff } = cur.findPos(to, 1);
       let { i: fromI, off: fromOff } = cur.findPos(from, -1);
       let dLen = from - to;
       for (let view of insert)
           dLen += view.length;
       parent.length += dLen;
       replaceRange(parent, fromI, fromOff, toI, toOff, insert, 0, openStart, openEnd);
   }

   let nav = typeof navigator != "undefined" ? navigator : { userAgent: "", vendor: "", platform: "" };
   let doc = typeof document != "undefined" ? document : { documentElement: { style: {} } };
   const ie_edge = /*@__PURE__*//Edge\/(\d+)/.exec(nav.userAgent);
   const ie_upto10 = /*@__PURE__*//MSIE \d/.test(nav.userAgent);
   const ie_11up = /*@__PURE__*//Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(nav.userAgent);
   const ie = !!(ie_upto10 || ie_11up || ie_edge);
   const gecko = !ie && /*@__PURE__*//gecko\/(\d+)/i.test(nav.userAgent);
   const chrome = !ie && /*@__PURE__*//Chrome\/(\d+)/.exec(nav.userAgent);
   const webkit = "webkitFontSmoothing" in doc.documentElement.style;
   const safari = !ie && /*@__PURE__*//Apple Computer/.test(nav.vendor);
   const ios = safari && (/*@__PURE__*//Mobile\/\w+/.test(nav.userAgent) || nav.maxTouchPoints > 2);
   var browser = {
       mac: ios || /*@__PURE__*//Mac/.test(nav.platform),
       windows: /*@__PURE__*//Win/.test(nav.platform),
       linux: /*@__PURE__*//Linux|X11/.test(nav.platform),
       ie,
       ie_version: ie_upto10 ? doc.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0,
       gecko,
       gecko_version: gecko ? +(/*@__PURE__*//Firefox\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
       chrome: !!chrome,
       chrome_version: chrome ? +chrome[1] : 0,
       ios,
       android: /*@__PURE__*//Android\b/.test(nav.userAgent),
       webkit,
       safari,
       webkit_version: webkit ? +(/*@__PURE__*//\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0,
       tabSize: doc.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
   };

   const MaxJoinLen = 256;
   class TextView extends ContentView {
       constructor(text) {
           super();
           this.text = text;
       }
       get length() { return this.text.length; }
       createDOM(textDOM) {
           this.setDOM(textDOM || document.createTextNode(this.text));
       }
       sync(view, track) {
           if (!this.dom)
               this.createDOM();
           if (this.dom.nodeValue != this.text) {
               if (track && track.node == this.dom)
                   track.written = true;
               this.dom.nodeValue = this.text;
           }
       }
       reuseDOM(dom) {
           if (dom.nodeType == 3)
               this.createDOM(dom);
       }
       merge(from, to, source) {
           if (source && (!(source instanceof TextView) || this.length - (to - from) + source.length > MaxJoinLen))
               return false;
           this.text = this.text.slice(0, from) + (source ? source.text : "") + this.text.slice(to);
           this.markDirty();
           return true;
       }
       split(from) {
           let result = new TextView(this.text.slice(from));
           this.text = this.text.slice(0, from);
           this.markDirty();
           return result;
       }
       localPosFromDOM(node, offset) {
           return node == this.dom ? offset : offset ? this.text.length : 0;
       }
       domAtPos(pos) { return new DOMPos(this.dom, pos); }
       domBoundsAround(_from, _to, offset) {
           return { from: offset, to: offset + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };
       }
       coordsAt(pos, side) {
           return textCoords(this.dom, pos, side);
       }
   }
   class MarkView extends ContentView {
       constructor(mark, children = [], length = 0) {
           super();
           this.mark = mark;
           this.children = children;
           this.length = length;
           for (let ch of children)
               ch.setParent(this);
       }
       setAttrs(dom) {
           clearAttributes(dom);
           if (this.mark.class)
               dom.className = this.mark.class;
           if (this.mark.attrs)
               for (let name in this.mark.attrs)
                   dom.setAttribute(name, this.mark.attrs[name]);
           return dom;
       }
       reuseDOM(node) {
           if (node.nodeName == this.mark.tagName.toUpperCase()) {
               this.setDOM(node);
               this.dirty |= 4 /* Dirty.Attrs */ | 2 /* Dirty.Node */;
           }
       }
       sync(view, track) {
           if (!this.dom)
               this.setDOM(this.setAttrs(document.createElement(this.mark.tagName)));
           else if (this.dirty & 4 /* Dirty.Attrs */)
               this.setAttrs(this.dom);
           super.sync(view, track);
       }
       merge(from, to, source, _hasStart, openStart, openEnd) {
           if (source && (!(source instanceof MarkView && source.mark.eq(this.mark)) ||
               (from && openStart <= 0) || (to < this.length && openEnd <= 0)))
               return false;
           mergeChildrenInto(this, from, to, source ? source.children : [], openStart - 1, openEnd - 1);
           this.markDirty();
           return true;
       }
       split(from) {
           let result = [], off = 0, detachFrom = -1, i = 0;
           for (let elt of this.children) {
               let end = off + elt.length;
               if (end > from)
                   result.push(off < from ? elt.split(from - off) : elt);
               if (detachFrom < 0 && off >= from)
                   detachFrom = i;
               off = end;
               i++;
           }
           let length = this.length - from;
           this.length = from;
           if (detachFrom > -1) {
               this.children.length = detachFrom;
               this.markDirty();
           }
           return new MarkView(this.mark, result, length);
       }
       domAtPos(pos) {
           return inlineDOMAtPos(this, pos);
       }
       coordsAt(pos, side) {
           return coordsInChildren(this, pos, side);
       }
   }
   function textCoords(text, pos, side) {
       let length = text.nodeValue.length;
       if (pos > length)
           pos = length;
       let from = pos, to = pos, flatten = 0;
       if (pos == 0 && side < 0 || pos == length && side >= 0) {
           if (!(browser.chrome || browser.gecko)) { // These browsers reliably return valid rectangles for empty ranges
               if (pos) {
                   from--;
                   flatten = 1;
               } // FIXME this is wrong in RTL text
               else if (to < length) {
                   to++;
                   flatten = -1;
               }
           }
       }
       else {
           if (side < 0)
               from--;
           else if (to < length)
               to++;
       }
       let rects = textRange(text, from, to).getClientRects();
       if (!rects.length)
           return null;
       let rect = rects[(flatten ? flatten < 0 : side >= 0) ? 0 : rects.length - 1];
       if (browser.safari && !flatten && rect.width == 0)
           rect = Array.prototype.find.call(rects, r => r.width) || rect;
       return flatten ? flattenRect(rect, flatten < 0) : rect || null;
   }
   // Also used for collapsed ranges that don't have a placeholder widget!
   class WidgetView extends ContentView {
       static create(widget, length, side) {
           return new (widget.customView || WidgetView)(widget, length, side);
       }
       constructor(widget, length, side) {
           super();
           this.widget = widget;
           this.length = length;
           this.side = side;
           this.prevWidget = null;
       }
       split(from) {
           let result = WidgetView.create(this.widget, this.length - from, this.side);
           this.length -= from;
           return result;
       }
       sync(view) {
           if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
               if (this.dom && this.prevWidget)
                   this.prevWidget.destroy(this.dom);
               this.prevWidget = null;
               this.setDOM(this.widget.toDOM(view));
               this.dom.contentEditable = "false";
           }
       }
       getSide() { return this.side; }
       merge(from, to, source, hasStart, openStart, openEnd) {
           if (source && (!(source instanceof WidgetView) || !this.widget.compare(source.widget) ||
               from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
               return false;
           this.length = from + (source ? source.length : 0) + (this.length - to);
           return true;
       }
       become(other) {
           if (other instanceof WidgetView && other.side == this.side &&
               this.widget.constructor == other.widget.constructor) {
               if (!this.widget.compare(other.widget))
                   this.markDirty(true);
               if (this.dom && !this.prevWidget)
                   this.prevWidget = this.widget;
               this.widget = other.widget;
               this.length = other.length;
               return true;
           }
           return false;
       }
       ignoreMutation() { return true; }
       ignoreEvent(event) { return this.widget.ignoreEvent(event); }
       get overrideDOMText() {
           if (this.length == 0)
               return Text$1.empty;
           let top = this;
           while (top.parent)
               top = top.parent;
           let { view } = top, text = view && view.state.doc, start = this.posAtStart;
           return text ? text.slice(start, start + this.length) : Text$1.empty;
       }
       domAtPos(pos) {
           return (this.length ? pos == 0 : this.side > 0)
               ? DOMPos.before(this.dom)
               : DOMPos.after(this.dom, pos == this.length);
       }
       domBoundsAround() { return null; }
       coordsAt(pos, side) {
           let custom = this.widget.coordsAt(this.dom, pos, side);
           if (custom)
               return custom;
           let rects = this.dom.getClientRects(), rect = null;
           if (!rects.length)
               return null;
           for (let i = pos > 0 ? rects.length - 1 : 0;; i += (pos > 0 ? -1 : 1)) {
               rect = rects[i];
               if (pos > 0 ? i == 0 : i == rects.length - 1 || rect.top < rect.bottom)
                   break;
           }
           return this.length ? rect : flattenRect(rect, this.side > 0);
       }
       get isEditable() { return false; }
       get isWidget() { return true; }
       get isHidden() { return this.widget.isHidden; }
       destroy() {
           super.destroy();
           if (this.dom)
               this.widget.destroy(this.dom);
       }
   }
   class CompositionView extends WidgetView {
       domAtPos(pos) {
           let { topView, text } = this.widget;
           if (!topView)
               return new DOMPos(text, Math.min(pos, text.nodeValue.length));
           return scanCompositionTree(pos, 0, topView, text, this.length - topView.length, (v, p) => v.domAtPos(p), (text, p) => new DOMPos(text, Math.min(p, text.nodeValue.length)));
       }
       sync() { this.setDOM(this.widget.toDOM()); }
       localPosFromDOM(node, offset) {
           let { topView, text } = this.widget;
           if (!topView)
               return Math.min(offset, this.length);
           return posFromDOMInCompositionTree(node, offset, topView, text, this.length - topView.length);
       }
       ignoreMutation() { return false; }
       get overrideDOMText() { return null; }
       coordsAt(pos, side) {
           let { topView, text } = this.widget;
           if (!topView)
               return textCoords(text, pos, side);
           return scanCompositionTree(pos, side, topView, text, this.length - topView.length, (v, pos, side) => v.coordsAt(pos, side), (text, pos, side) => textCoords(text, pos, side));
       }
       destroy() {
           var _a;
           super.destroy();
           (_a = this.widget.topView) === null || _a === void 0 ? void 0 : _a.destroy();
       }
       get isEditable() { return true; }
       canReuseDOM() { return true; }
   }
   // Uses the old structure of a chunk of content view frozen for
   // composition to try and find a reasonable DOM location for the given
   // offset.
   function scanCompositionTree(pos, side, view, text, dLen, enterView, fromText) {
       if (view instanceof MarkView) {
           for (let child = view.dom.firstChild; child; child = child.nextSibling) {
               let desc = ContentView.get(child);
               if (!desc) {
                   let inner = scanCompositionNode(pos, side, child, fromText);
                   if (typeof inner != "number")
                       return inner;
                   pos = inner;
               }
               else {
                   let hasComp = contains$1(child, text);
                   let len = desc.length + (hasComp ? dLen : 0);
                   if (pos < len || pos == len && desc.getSide() <= 0)
                       return hasComp ? scanCompositionTree(pos, side, desc, text, dLen, enterView, fromText) : enterView(desc, pos, side);
                   pos -= len;
               }
           }
           return enterView(view, view.length, -1);
       }
       else if (view.dom == text) {
           return fromText(text, pos, side);
       }
       else {
           return enterView(view, pos, side);
       }
   }
   function scanCompositionNode(pos, side, node, fromText) {
       if (node.nodeType == 3) {
           let len = node.nodeValue.length;
           if (pos <= len)
               return fromText(node, pos, side);
           pos -= len;
       }
       else if (node.nodeType == 1 && node.contentEditable != "false") {
           for (let child = node.firstChild; child; child = child.nextSibling) {
               let inner = scanCompositionNode(pos, side, child, fromText);
               if (typeof inner != "number")
                   return inner;
               pos = inner;
           }
       }
       return pos;
   }
   function posFromDOMInCompositionTree(node, offset, view, text, dLen) {
       if (view instanceof MarkView) {
           let pos = 0;
           for (let child = view.dom.firstChild; child; child = child.nextSibling) {
               let childView = ContentView.get(child);
               if (childView) {
                   let hasComp = contains$1(child, text);
                   if (contains$1(child, node))
                       return pos + (hasComp ? posFromDOMInCompositionTree(node, offset, childView, text, dLen)
                           : childView.localPosFromDOM(node, offset));
                   pos += childView.length + (hasComp ? dLen : 0);
               }
               else {
                   let inner = posFromDOMInOpaqueNode(node, offset, child);
                   if (inner.result != null)
                       return pos + inner.result;
                   pos += inner.size;
               }
           }
       }
       else if (view.dom == text) {
           return Math.min(offset, text.nodeValue.length);
       }
       return view.localPosFromDOM(node, offset);
   }
   function posFromDOMInOpaqueNode(node, offset, target) {
       if (target.nodeType == 3) {
           return node == target ? { result: offset } : { size: target.nodeValue.length };
       }
       else if (target.nodeType == 1 && target.contentEditable != "false") {
           let pos = 0;
           for (let child = target.firstChild, i = 0;; child = child.nextSibling, i++) {
               if (node == target && i == offset)
                   return { result: pos };
               if (!child)
                   return { size: pos };
               let inner = posFromDOMInOpaqueNode(node, offset, child);
               if (inner.result != null)
                   return { result: offset + inner.result };
               pos += inner.size;
           }
       }
       else {
           return target.contains(node) ? { result: 0 } : { size: 0 };
       }
   }
   // These are drawn around uneditable widgets to avoid a number of
   // browser bugs that show up when the cursor is directly next to
   // uneditable inline content.
   class WidgetBufferView extends ContentView {
       constructor(side) {
           super();
           this.side = side;
       }
       get length() { return 0; }
       merge() { return false; }
       become(other) {
           return other instanceof WidgetBufferView && other.side == this.side;
       }
       split() { return new WidgetBufferView(this.side); }
       sync() {
           if (!this.dom) {
               let dom = document.createElement("img");
               dom.className = "cm-widgetBuffer";
               dom.setAttribute("aria-hidden", "true");
               this.setDOM(dom);
           }
       }
       getSide() { return this.side; }
       domAtPos(pos) { return this.side > 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom); }
       localPosFromDOM() { return 0; }
       domBoundsAround() { return null; }
       coordsAt(pos) {
           return this.dom.getBoundingClientRect();
       }
       get overrideDOMText() {
           return Text$1.empty;
       }
       get isHidden() { return true; }
   }
   TextView.prototype.children = WidgetView.prototype.children = WidgetBufferView.prototype.children = noChildren;
   function inlineDOMAtPos(parent, pos) {
       let dom = parent.dom, { children } = parent, i = 0;
       for (let off = 0; i < children.length; i++) {
           let child = children[i], end = off + child.length;
           if (end == off && child.getSide() <= 0)
               continue;
           if (pos > off && pos < end && child.dom.parentNode == dom)
               return child.domAtPos(pos - off);
           if (pos <= off)
               break;
           off = end;
       }
       for (let j = i; j > 0; j--) {
           let prev = children[j - 1];
           if (prev.dom.parentNode == dom)
               return prev.domAtPos(prev.length);
       }
       for (let j = i; j < children.length; j++) {
           let next = children[j];
           if (next.dom.parentNode == dom)
               return next.domAtPos(0);
       }
       return new DOMPos(dom, 0);
   }
   // Assumes `view`, if a mark view, has precisely 1 child.
   function joinInlineInto(parent, view, open) {
       let last, { children } = parent;
       if (open > 0 && view instanceof MarkView && children.length &&
           (last = children[children.length - 1]) instanceof MarkView && last.mark.eq(view.mark)) {
           joinInlineInto(last, view.children[0], open - 1);
       }
       else {
           children.push(view);
           view.setParent(parent);
       }
       parent.length += view.length;
   }
   function coordsInChildren(view, pos, side) {
       let before = null, beforePos = -1, after = null, afterPos = -1;
       function scan(view, pos) {
           for (let i = 0, off = 0; i < view.children.length && off <= pos; i++) {
               let child = view.children[i], end = off + child.length;
               if (end >= pos) {
                   if (child.children.length) {
                       scan(child, pos - off);
                   }
                   else if ((!after || after.isHidden && side > 0) &&
                       (end > pos || off == end && child.getSide() > 0)) {
                       after = child;
                       afterPos = pos - off;
                   }
                   else if (off < pos || (off == end && child.getSide() < 0) && !child.isHidden) {
                       before = child;
                       beforePos = pos - off;
                   }
               }
               off = end;
           }
       }
       scan(view, pos);
       let target = (side < 0 ? before : after) || before || after;
       if (target)
           return target.coordsAt(Math.max(0, target == before ? beforePos : afterPos), side);
       return fallbackRect(view);
   }
   function fallbackRect(view) {
       let last = view.dom.lastChild;
       if (!last)
           return view.dom.getBoundingClientRect();
       let rects = clientRectsFor(last);
       return rects[rects.length - 1] || null;
   }

   function combineAttrs(source, target) {
       for (let name in source) {
           if (name == "class" && target.class)
               target.class += " " + source.class;
           else if (name == "style" && target.style)
               target.style += ";" + source.style;
           else
               target[name] = source[name];
       }
       return target;
   }
   function attrsEq(a, b) {
       if (a == b)
           return true;
       if (!a || !b)
           return false;
       let keysA = Object.keys(a), keysB = Object.keys(b);
       if (keysA.length != keysB.length)
           return false;
       for (let key of keysA) {
           if (keysB.indexOf(key) == -1 || a[key] !== b[key])
               return false;
       }
       return true;
   }
   function updateAttrs(dom, prev, attrs) {
       let changed = null;
       if (prev)
           for (let name in prev)
               if (!(attrs && name in attrs))
                   dom.removeAttribute(changed = name);
       if (attrs)
           for (let name in attrs)
               if (!(prev && prev[name] == attrs[name]))
                   dom.setAttribute(changed = name, attrs[name]);
       return !!changed;
   }

   /**
   Widgets added to the content are described by subclasses of this
   class. Using a description object like that makes it possible to
   delay creating of the DOM structure for a widget until it is
   needed, and to avoid redrawing widgets even if the decorations
   that define them are recreated.
   */
   class WidgetType {
       /**
       Compare this instance to another instance of the same type.
       (TypeScript can't express this, but only instances of the same
       specific class will be passed to this method.) This is used to
       avoid redrawing widgets when they are replaced by a new
       decoration of the same type. The default implementation just
       returns `false`, which will cause new instances of the widget to
       always be redrawn.
       */
       eq(widget) { return false; }
       /**
       Update a DOM element created by a widget of the same type (but
       different, non-`eq` content) to reflect this widget. May return
       true to indicate that it could update, false to indicate it
       couldn't (in which case the widget will be redrawn). The default
       implementation just returns false.
       */
       updateDOM(dom, view) { return false; }
       /**
       @internal
       */
       compare(other) {
           return this == other || this.constructor == other.constructor && this.eq(other);
       }
       /**
       The estimated height this widget will have, to be used when
       estimating the height of content that hasn't been drawn. May
       return -1 to indicate you don't know. The default implementation
       returns -1.
       */
       get estimatedHeight() { return -1; }
       /**
       Can be used to configure which kinds of events inside the widget
       should be ignored by the editor. The default is to ignore all
       events.
       */
       ignoreEvent(event) { return true; }
       /**
       Override the way screen coordinates for positions at/in the
       widget are found. `pos` will be the offset into the widget, and
       `side` the side of the position that is being queried—less than
       zero for before, greater than zero for after, and zero for
       directly at that position.
       */
       coordsAt(dom, pos, side) { return null; }
       /**
       @internal
       */
       get customView() { return null; }
       /**
       @internal
       */
       get isHidden() { return false; }
       /**
       This is called when the an instance of the widget is removed
       from the editor view.
       */
       destroy(dom) { }
   }
   /**
   The different types of blocks that can occur in an editor view.
   */
   var BlockType = /*@__PURE__*/(function (BlockType) {
       /**
       A line of text.
       */
       BlockType[BlockType["Text"] = 0] = "Text";
       /**
       A block widget associated with the position after it.
       */
       BlockType[BlockType["WidgetBefore"] = 1] = "WidgetBefore";
       /**
       A block widget associated with the position before it.
       */
       BlockType[BlockType["WidgetAfter"] = 2] = "WidgetAfter";
       /**
       A block widget [replacing](https://codemirror.net/6/docs/ref/#view.Decoration^replace) a range of content.
       */
       BlockType[BlockType["WidgetRange"] = 3] = "WidgetRange";
   return BlockType})(BlockType || (BlockType = {}));
   /**
   A decoration provides information on how to draw or style a piece
   of content. You'll usually use it wrapped in a
   [`Range`](https://codemirror.net/6/docs/ref/#state.Range), which adds a start and end position.
   @nonabstract
   */
   class Decoration extends RangeValue {
       constructor(
       /**
       @internal
       */
       startSide, 
       /**
       @internal
       */
       endSide, 
       /**
       @internal
       */
       widget, 
       /**
       The config object used to create this decoration. You can
       include additional properties in there to store metadata about
       your decoration.
       */
       spec) {
           super();
           this.startSide = startSide;
           this.endSide = endSide;
           this.widget = widget;
           this.spec = spec;
       }
       /**
       @internal
       */
       get heightRelevant() { return false; }
       /**
       Create a mark decoration, which influences the styling of the
       content in its range. Nested mark decorations will cause nested
       DOM elements to be created. Nesting order is determined by
       precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with
       the higher-precedence decorations creating the inner DOM nodes.
       Such elements are split on line boundaries and on the boundaries
       of lower-precedence decorations.
       */
       static mark(spec) {
           return new MarkDecoration(spec);
       }
       /**
       Create a widget decoration, which displays a DOM element at the
       given position.
       */
       static widget(spec) {
           let side = spec.side || 0, block = !!spec.block;
           side += block ? (side > 0 ? 300000000 /* Side.BlockAfter */ : -400000000 /* Side.BlockBefore */) : (side > 0 ? 100000000 /* Side.InlineAfter */ : -100000000 /* Side.InlineBefore */);
           return new PointDecoration(spec, side, side, block, spec.widget || null, false);
       }
       /**
       Create a replace decoration which replaces the given range with
       a widget, or simply hides it.
       */
       static replace(spec) {
           let block = !!spec.block, startSide, endSide;
           if (spec.isBlockGap) {
               startSide = -500000000 /* Side.GapStart */;
               endSide = 400000000 /* Side.GapEnd */;
           }
           else {
               let { start, end } = getInclusive(spec, block);
               startSide = (start ? (block ? -300000000 /* Side.BlockIncStart */ : -1 /* Side.InlineIncStart */) : 500000000 /* Side.NonIncStart */) - 1;
               endSide = (end ? (block ? 200000000 /* Side.BlockIncEnd */ : 1 /* Side.InlineIncEnd */) : -600000000 /* Side.NonIncEnd */) + 1;
           }
           return new PointDecoration(spec, startSide, endSide, block, spec.widget || null, true);
       }
       /**
       Create a line decoration, which can add DOM attributes to the
       line starting at the given position.
       */
       static line(spec) {
           return new LineDecoration(spec);
       }
       /**
       Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
       decorated range or ranges. If the ranges aren't already sorted,
       pass `true` for `sort` to make the library sort them for you.
       */
       static set(of, sort = false) {
           return RangeSet.of(of, sort);
       }
       /**
       @internal
       */
       hasHeight() { return this.widget ? this.widget.estimatedHeight > -1 : false; }
   }
   /**
   The empty set of decorations.
   */
   Decoration.none = RangeSet.empty;
   class MarkDecoration extends Decoration {
       constructor(spec) {
           let { start, end } = getInclusive(spec);
           super(start ? -1 /* Side.InlineIncStart */ : 500000000 /* Side.NonIncStart */, end ? 1 /* Side.InlineIncEnd */ : -600000000 /* Side.NonIncEnd */, null, spec);
           this.tagName = spec.tagName || "span";
           this.class = spec.class || "";
           this.attrs = spec.attributes || null;
       }
       eq(other) {
           return this == other ||
               other instanceof MarkDecoration &&
                   this.tagName == other.tagName &&
                   this.class == other.class &&
                   attrsEq(this.attrs, other.attrs);
       }
       range(from, to = from) {
           if (from >= to)
               throw new RangeError("Mark decorations may not be empty");
           return super.range(from, to);
       }
   }
   MarkDecoration.prototype.point = false;
   class LineDecoration extends Decoration {
       constructor(spec) {
           super(-200000000 /* Side.Line */, -200000000 /* Side.Line */, null, spec);
       }
       eq(other) {
           return other instanceof LineDecoration &&
               this.spec.class == other.spec.class &&
               attrsEq(this.spec.attributes, other.spec.attributes);
       }
       range(from, to = from) {
           if (to != from)
               throw new RangeError("Line decoration ranges must be zero-length");
           return super.range(from, to);
       }
   }
   LineDecoration.prototype.mapMode = MapMode.TrackBefore;
   LineDecoration.prototype.point = true;
   class PointDecoration extends Decoration {
       constructor(spec, startSide, endSide, block, widget, isReplace) {
           super(startSide, endSide, widget, spec);
           this.block = block;
           this.isReplace = isReplace;
           this.mapMode = !block ? MapMode.TrackDel : startSide <= 0 ? MapMode.TrackBefore : MapMode.TrackAfter;
       }
       // Only relevant when this.block == true
       get type() {
           return this.startSide < this.endSide ? BlockType.WidgetRange
               : this.startSide <= 0 ? BlockType.WidgetBefore : BlockType.WidgetAfter;
       }
       get heightRelevant() { return this.block || !!this.widget && this.widget.estimatedHeight >= 5; }
       eq(other) {
           return other instanceof PointDecoration &&
               widgetsEq(this.widget, other.widget) &&
               this.block == other.block &&
               this.startSide == other.startSide && this.endSide == other.endSide;
       }
       range(from, to = from) {
           if (this.isReplace && (from > to || (from == to && this.startSide > 0 && this.endSide <= 0)))
               throw new RangeError("Invalid range for replacement decoration");
           if (!this.isReplace && to != from)
               throw new RangeError("Widget decorations can only have zero-length ranges");
           return super.range(from, to);
       }
   }
   PointDecoration.prototype.point = true;
   function getInclusive(spec, block = false) {
       let { inclusiveStart: start, inclusiveEnd: end } = spec;
       if (start == null)
           start = spec.inclusive;
       if (end == null)
           end = spec.inclusive;
       return { start: start !== null && start !== void 0 ? start : block, end: end !== null && end !== void 0 ? end : block };
   }
   function widgetsEq(a, b) {
       return a == b || !!(a && b && a.compare(b));
   }
   function addRange(from, to, ranges, margin = 0) {
       let last = ranges.length - 1;
       if (last >= 0 && ranges[last] + margin >= from)
           ranges[last] = Math.max(ranges[last], to);
       else
           ranges.push(from, to);
   }

   class LineView extends ContentView {
       constructor() {
           super(...arguments);
           this.children = [];
           this.length = 0;
           this.prevAttrs = undefined;
           this.attrs = null;
           this.breakAfter = 0;
       }
       // Consumes source
       merge(from, to, source, hasStart, openStart, openEnd) {
           if (source) {
               if (!(source instanceof LineView))
                   return false;
               if (!this.dom)
                   source.transferDOM(this); // Reuse source.dom when appropriate
           }
           if (hasStart)
               this.setDeco(source ? source.attrs : null);
           mergeChildrenInto(this, from, to, source ? source.children : [], openStart, openEnd);
           return true;
       }
       split(at) {
           let end = new LineView;
           end.breakAfter = this.breakAfter;
           if (this.length == 0)
               return end;
           let { i, off } = this.childPos(at);
           if (off) {
               end.append(this.children[i].split(off), 0);
               this.children[i].merge(off, this.children[i].length, null, false, 0, 0);
               i++;
           }
           for (let j = i; j < this.children.length; j++)
               end.append(this.children[j], 0);
           while (i > 0 && this.children[i - 1].length == 0)
               this.children[--i].destroy();
           this.children.length = i;
           this.markDirty();
           this.length = at;
           return end;
       }
       transferDOM(other) {
           if (!this.dom)
               return;
           this.markDirty();
           other.setDOM(this.dom);
           other.prevAttrs = this.prevAttrs === undefined ? this.attrs : this.prevAttrs;
           this.prevAttrs = undefined;
           this.dom = null;
       }
       setDeco(attrs) {
           if (!attrsEq(this.attrs, attrs)) {
               if (this.dom) {
                   this.prevAttrs = this.attrs;
                   this.markDirty();
               }
               this.attrs = attrs;
           }
       }
       append(child, openStart) {
           joinInlineInto(this, child, openStart);
       }
       // Only called when building a line view in ContentBuilder
       addLineDeco(deco) {
           let attrs = deco.spec.attributes, cls = deco.spec.class;
           if (attrs)
               this.attrs = combineAttrs(attrs, this.attrs || {});
           if (cls)
               this.attrs = combineAttrs({ class: cls }, this.attrs || {});
       }
       domAtPos(pos) {
           return inlineDOMAtPos(this, pos);
       }
       reuseDOM(node) {
           if (node.nodeName == "DIV") {
               this.setDOM(node);
               this.dirty |= 4 /* Dirty.Attrs */ | 2 /* Dirty.Node */;
           }
       }
       sync(view, track) {
           var _a;
           if (!this.dom) {
               this.setDOM(document.createElement("div"));
               this.dom.className = "cm-line";
               this.prevAttrs = this.attrs ? null : undefined;
           }
           else if (this.dirty & 4 /* Dirty.Attrs */) {
               clearAttributes(this.dom);
               this.dom.className = "cm-line";
               this.prevAttrs = this.attrs ? null : undefined;
           }
           if (this.prevAttrs !== undefined) {
               updateAttrs(this.dom, this.prevAttrs, this.attrs);
               this.dom.classList.add("cm-line");
               this.prevAttrs = undefined;
           }
           super.sync(view, track);
           let last = this.dom.lastChild;
           while (last && ContentView.get(last) instanceof MarkView)
               last = last.lastChild;
           if (!last || !this.length ||
               last.nodeName != "BR" && ((_a = ContentView.get(last)) === null || _a === void 0 ? void 0 : _a.isEditable) == false &&
                   (!browser.ios || !this.children.some(ch => ch instanceof TextView))) {
               let hack = document.createElement("BR");
               hack.cmIgnore = true;
               this.dom.appendChild(hack);
           }
       }
       measureTextSize() {
           if (this.children.length == 0 || this.length > 20)
               return null;
           let totalWidth = 0, textHeight;
           for (let child of this.children) {
               if (!(child instanceof TextView) || /[^ -~]/.test(child.text))
                   return null;
               let rects = clientRectsFor(child.dom);
               if (rects.length != 1)
                   return null;
               totalWidth += rects[0].width;
               textHeight = rects[0].height;
           }
           return !totalWidth ? null : {
               lineHeight: this.dom.getBoundingClientRect().height,
               charWidth: totalWidth / this.length,
               textHeight
           };
       }
       coordsAt(pos, side) {
           let rect = coordsInChildren(this, pos, side);
           // Correct rectangle height for empty lines when the returned
           // height is larger than the text height.
           if (!this.children.length && rect && this.parent) {
               let { heightOracle } = this.parent.view.viewState, height = rect.bottom - rect.top;
               if (Math.abs(height - heightOracle.lineHeight) < 2 && heightOracle.textHeight < height) {
                   let dist = (height - heightOracle.textHeight) / 2;
                   return { top: rect.top + dist, bottom: rect.bottom - dist, left: rect.left, right: rect.left };
               }
           }
           return rect;
       }
       become(_other) { return false; }
       get type() { return BlockType.Text; }
       static find(docView, pos) {
           for (let i = 0, off = 0; i < docView.children.length; i++) {
               let block = docView.children[i], end = off + block.length;
               if (end >= pos) {
                   if (block instanceof LineView)
                       return block;
                   if (end > pos)
                       break;
               }
               off = end + block.breakAfter;
           }
           return null;
       }
   }
   class BlockWidgetView extends ContentView {
       constructor(widget, length, type) {
           super();
           this.widget = widget;
           this.length = length;
           this.type = type;
           this.breakAfter = 0;
           this.prevWidget = null;
       }
       merge(from, to, source, _takeDeco, openStart, openEnd) {
           if (source && (!(source instanceof BlockWidgetView) || !this.widget.compare(source.widget) ||
               from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
               return false;
           this.length = from + (source ? source.length : 0) + (this.length - to);
           return true;
       }
       domAtPos(pos) {
           return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
       }
       split(at) {
           let len = this.length - at;
           this.length = at;
           let end = new BlockWidgetView(this.widget, len, this.type);
           end.breakAfter = this.breakAfter;
           return end;
       }
       get children() { return noChildren; }
       sync(view) {
           if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
               if (this.dom && this.prevWidget)
                   this.prevWidget.destroy(this.dom);
               this.prevWidget = null;
               this.setDOM(this.widget.toDOM(view));
               this.dom.contentEditable = "false";
           }
       }
       get overrideDOMText() {
           return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : Text$1.empty;
       }
       domBoundsAround() { return null; }
       become(other) {
           if (other instanceof BlockWidgetView &&
               other.widget.constructor == this.widget.constructor) {
               if (!other.widget.compare(this.widget))
                   this.markDirty(true);
               if (this.dom && !this.prevWidget)
                   this.prevWidget = this.widget;
               this.widget = other.widget;
               this.length = other.length;
               this.type = other.type;
               this.breakAfter = other.breakAfter;
               return true;
           }
           return false;
       }
       ignoreMutation() { return true; }
       ignoreEvent(event) { return this.widget.ignoreEvent(event); }
       get isEditable() { return false; }
       get isWidget() { return true; }
       coordsAt(pos, side) {
           return this.widget.coordsAt(this.dom, pos, side);
       }
       destroy() {
           super.destroy();
           if (this.dom)
               this.widget.destroy(this.dom);
       }
   }

   class ContentBuilder {
       constructor(doc, pos, end, disallowBlockEffectsFor) {
           this.doc = doc;
           this.pos = pos;
           this.end = end;
           this.disallowBlockEffectsFor = disallowBlockEffectsFor;
           this.content = [];
           this.curLine = null;
           this.breakAtStart = 0;
           this.pendingBuffer = 0 /* Buf.No */;
           this.bufferMarks = [];
           // Set to false directly after a widget that covers the position after it
           this.atCursorPos = true;
           this.openStart = -1;
           this.openEnd = -1;
           this.text = "";
           this.textOff = 0;
           this.cursor = doc.iter();
           this.skip = pos;
       }
       posCovered() {
           if (this.content.length == 0)
               return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
           let last = this.content[this.content.length - 1];
           return !last.breakAfter && !(last instanceof BlockWidgetView && last.type == BlockType.WidgetBefore);
       }
       getLine() {
           if (!this.curLine) {
               this.content.push(this.curLine = new LineView);
               this.atCursorPos = true;
           }
           return this.curLine;
       }
       flushBuffer(active = this.bufferMarks) {
           if (this.pendingBuffer) {
               this.curLine.append(wrapMarks(new WidgetBufferView(-1), active), active.length);
               this.pendingBuffer = 0 /* Buf.No */;
           }
       }
       addBlockWidget(view) {
           this.flushBuffer();
           this.curLine = null;
           this.content.push(view);
       }
       finish(openEnd) {
           if (this.pendingBuffer && openEnd <= this.bufferMarks.length)
               this.flushBuffer();
           else
               this.pendingBuffer = 0 /* Buf.No */;
           if (!this.posCovered())
               this.getLine();
       }
       buildText(length, active, openStart) {
           while (length > 0) {
               if (this.textOff == this.text.length) {
                   let { value, lineBreak, done } = this.cursor.next(this.skip);
                   this.skip = 0;
                   if (done)
                       throw new Error("Ran out of text content when drawing inline views");
                   if (lineBreak) {
                       if (!this.posCovered())
                           this.getLine();
                       if (this.content.length)
                           this.content[this.content.length - 1].breakAfter = 1;
                       else
                           this.breakAtStart = 1;
                       this.flushBuffer();
                       this.curLine = null;
                       this.atCursorPos = true;
                       length--;
                       continue;
                   }
                   else {
                       this.text = value;
                       this.textOff = 0;
                   }
               }
               let take = Math.min(this.text.length - this.textOff, length, 512 /* T.Chunk */);
               this.flushBuffer(active.slice(active.length - openStart));
               this.getLine().append(wrapMarks(new TextView(this.text.slice(this.textOff, this.textOff + take)), active), openStart);
               this.atCursorPos = true;
               this.textOff += take;
               length -= take;
               openStart = 0;
           }
       }
       span(from, to, active, openStart) {
           this.buildText(to - from, active, openStart);
           this.pos = to;
           if (this.openStart < 0)
               this.openStart = openStart;
       }
       point(from, to, deco, active, openStart, index) {
           if (this.disallowBlockEffectsFor[index] && deco instanceof PointDecoration) {
               if (deco.block)
                   throw new RangeError("Block decorations may not be specified via plugins");
               if (to > this.doc.lineAt(this.pos).to)
                   throw new RangeError("Decorations that replace line breaks may not be specified via plugins");
           }
           let len = to - from;
           if (deco instanceof PointDecoration) {
               if (deco.block) {
                   let { type } = deco;
                   if (type == BlockType.WidgetAfter && !this.posCovered())
                       this.getLine();
                   this.addBlockWidget(new BlockWidgetView(deco.widget || new NullWidget("div"), len, type));
               }
               else {
                   let view = WidgetView.create(deco.widget || new NullWidget("span"), len, len ? 0 : deco.startSide);
                   let cursorBefore = this.atCursorPos && !view.isEditable && openStart <= active.length &&
                       (from < to || deco.startSide > 0);
                   let cursorAfter = !view.isEditable && (from < to || openStart > active.length || deco.startSide <= 0);
                   let line = this.getLine();
                   if (this.pendingBuffer == 2 /* Buf.IfCursor */ && !cursorBefore && !view.isEditable)
                       this.pendingBuffer = 0 /* Buf.No */;
                   this.flushBuffer(active);
                   if (cursorBefore) {
                       line.append(wrapMarks(new WidgetBufferView(1), active), openStart);
                       openStart = active.length + Math.max(0, openStart - active.length);
                   }
                   line.append(wrapMarks(view, active), openStart);
                   this.atCursorPos = cursorAfter;
                   this.pendingBuffer = !cursorAfter ? 0 /* Buf.No */ : from < to || openStart > active.length ? 1 /* Buf.Yes */ : 2 /* Buf.IfCursor */;
                   if (this.pendingBuffer)
                       this.bufferMarks = active.slice();
               }
           }
           else if (this.doc.lineAt(this.pos).from == this.pos) { // Line decoration
               this.getLine().addLineDeco(deco);
           }
           if (len) {
               // Advance the iterator past the replaced content
               if (this.textOff + len <= this.text.length) {
                   this.textOff += len;
               }
               else {
                   this.skip += len - (this.text.length - this.textOff);
                   this.text = "";
                   this.textOff = 0;
               }
               this.pos = to;
           }
           if (this.openStart < 0)
               this.openStart = openStart;
       }
       static build(text, from, to, decorations, dynamicDecorationMap) {
           let builder = new ContentBuilder(text, from, to, dynamicDecorationMap);
           builder.openEnd = RangeSet.spans(decorations, from, to, builder);
           if (builder.openStart < 0)
               builder.openStart = builder.openEnd;
           builder.finish(builder.openEnd);
           return builder;
       }
   }
   function wrapMarks(view, active) {
       for (let mark of active)
           view = new MarkView(mark, [view], view.length);
       return view;
   }
   class NullWidget extends WidgetType {
       constructor(tag) {
           super();
           this.tag = tag;
       }
       eq(other) { return other.tag == this.tag; }
       toDOM() { return document.createElement(this.tag); }
       updateDOM(elt) { return elt.nodeName.toLowerCase() == this.tag; }
       get isHidden() { return true; }
   }

   const clickAddsSelectionRange = /*@__PURE__*/Facet.define();
   const dragMovesSelection$1 = /*@__PURE__*/Facet.define();
   const mouseSelectionStyle = /*@__PURE__*/Facet.define();
   const exceptionSink = /*@__PURE__*/Facet.define();
   const updateListener = /*@__PURE__*/Facet.define();
   const inputHandler$1 = /*@__PURE__*/Facet.define();
   const focusChangeEffect = /*@__PURE__*/Facet.define();
   const perLineTextDirection = /*@__PURE__*/Facet.define({
       combine: values => values.some(x => x)
   });
   const nativeSelectionHidden = /*@__PURE__*/Facet.define({
       combine: values => values.some(x => x)
   });
   class ScrollTarget {
       constructor(range, y = "nearest", x = "nearest", yMargin = 5, xMargin = 5) {
           this.range = range;
           this.y = y;
           this.x = x;
           this.yMargin = yMargin;
           this.xMargin = xMargin;
       }
       map(changes) {
           return changes.empty ? this : new ScrollTarget(this.range.map(changes), this.y, this.x, this.yMargin, this.xMargin);
       }
   }
   const scrollIntoView$1 = /*@__PURE__*/StateEffect.define({ map: (t, ch) => t.map(ch) });
   /**
   Log or report an unhandled exception in client code. Should
   probably only be used by extension code that allows client code to
   provide functions, and calls those functions in a context where an
   exception can't be propagated to calling code in a reasonable way
   (for example when in an event handler).

   Either calls a handler registered with
   [`EditorView.exceptionSink`](https://codemirror.net/6/docs/ref/#view.EditorView^exceptionSink),
   `window.onerror`, if defined, or `console.error` (in which case
   it'll pass `context`, when given, as first argument).
   */
   function logException(state, exception, context) {
       let handler = state.facet(exceptionSink);
       if (handler.length)
           handler[0](exception);
       else if (window.onerror)
           window.onerror(String(exception), context, undefined, undefined, exception);
       else if (context)
           console.error(context + ":", exception);
       else
           console.error(exception);
   }
   const editable = /*@__PURE__*/Facet.define({ combine: values => values.length ? values[0] : true });
   let nextPluginID = 0;
   const viewPlugin = /*@__PURE__*/Facet.define();
   /**
   View plugins associate stateful values with a view. They can
   influence the way the content is drawn, and are notified of things
   that happen in the view.
   */
   class ViewPlugin {
       constructor(
       /**
       @internal
       */
       id, 
       /**
       @internal
       */
       create, 
       /**
       @internal
       */
       domEventHandlers, buildExtensions) {
           this.id = id;
           this.create = create;
           this.domEventHandlers = domEventHandlers;
           this.extension = buildExtensions(this);
       }
       /**
       Define a plugin from a constructor function that creates the
       plugin's value, given an editor view.
       */
       static define(create, spec) {
           const { eventHandlers, provide, decorations: deco } = spec || {};
           return new ViewPlugin(nextPluginID++, create, eventHandlers, plugin => {
               let ext = [viewPlugin.of(plugin)];
               if (deco)
                   ext.push(decorations.of(view => {
                       let pluginInst = view.plugin(plugin);
                       return pluginInst ? deco(pluginInst) : Decoration.none;
                   }));
               if (provide)
                   ext.push(provide(plugin));
               return ext;
           });
       }
       /**
       Create a plugin for a class whose constructor takes a single
       editor view as argument.
       */
       static fromClass(cls, spec) {
           return ViewPlugin.define(view => new cls(view), spec);
       }
   }
   class PluginInstance {
       constructor(spec) {
           this.spec = spec;
           // When starting an update, all plugins have this field set to the
           // update object, indicating they need to be updated. When finished
           // updating, it is set to `false`. Retrieving a plugin that needs to
           // be updated with `view.plugin` forces an eager update.
           this.mustUpdate = null;
           // This is null when the plugin is initially created, but
           // initialized on the first update.
           this.value = null;
       }
       update(view) {
           if (!this.value) {
               if (this.spec) {
                   try {
                       this.value = this.spec.create(view);
                   }
                   catch (e) {
                       logException(view.state, e, "CodeMirror plugin crashed");
                       this.deactivate();
                   }
               }
           }
           else if (this.mustUpdate) {
               let update = this.mustUpdate;
               this.mustUpdate = null;
               if (this.value.update) {
                   try {
                       this.value.update(update);
                   }
                   catch (e) {
                       logException(update.state, e, "CodeMirror plugin crashed");
                       if (this.value.destroy)
                           try {
                               this.value.destroy();
                           }
                           catch (_) { }
                       this.deactivate();
                   }
               }
           }
           return this;
       }
       destroy(view) {
           var _a;
           if ((_a = this.value) === null || _a === void 0 ? void 0 : _a.destroy) {
               try {
                   this.value.destroy();
               }
               catch (e) {
                   logException(view.state, e, "CodeMirror plugin crashed");
               }
           }
       }
       deactivate() {
           this.spec = this.value = null;
       }
   }
   const editorAttributes = /*@__PURE__*/Facet.define();
   const contentAttributes = /*@__PURE__*/Facet.define();
   // Provide decorations
   const decorations = /*@__PURE__*/Facet.define();
   const atomicRanges = /*@__PURE__*/Facet.define();
   const scrollMargins = /*@__PURE__*/Facet.define();
   function getScrollMargins(view) {
       let left = 0, right = 0, top = 0, bottom = 0;
       for (let source of view.state.facet(scrollMargins)) {
           let m = source(view);
           if (m) {
               if (m.left != null)
                   left = Math.max(left, m.left);
               if (m.right != null)
                   right = Math.max(right, m.right);
               if (m.top != null)
                   top = Math.max(top, m.top);
               if (m.bottom != null)
                   bottom = Math.max(bottom, m.bottom);
           }
       }
       return { left, right, top, bottom };
   }
   const styleModule = /*@__PURE__*/Facet.define();
   class ChangedRange {
       constructor(fromA, toA, fromB, toB) {
           this.fromA = fromA;
           this.toA = toA;
           this.fromB = fromB;
           this.toB = toB;
       }
       join(other) {
           return new ChangedRange(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));
       }
       addToSet(set) {
           let i = set.length, me = this;
           for (; i > 0; i--) {
               let range = set[i - 1];
               if (range.fromA > me.toA)
                   continue;
               if (range.toA < me.fromA)
                   break;
               me = me.join(range);
               set.splice(i - 1, 1);
           }
           set.splice(i, 0, me);
           return set;
       }
       static extendWithRanges(diff, ranges) {
           if (ranges.length == 0)
               return diff;
           let result = [];
           for (let dI = 0, rI = 0, posA = 0, posB = 0;; dI++) {
               let next = dI == diff.length ? null : diff[dI], off = posA - posB;
               let end = next ? next.fromB : 1e9;
               while (rI < ranges.length && ranges[rI] < end) {
                   let from = ranges[rI], to = ranges[rI + 1];
                   let fromB = Math.max(posB, from), toB = Math.min(end, to);
                   if (fromB <= toB)
                       new ChangedRange(fromB + off, toB + off, fromB, toB).addToSet(result);
                   if (to > end)
                       break;
                   else
                       rI += 2;
               }
               if (!next)
                   return result;
               new ChangedRange(next.fromA, next.toA, next.fromB, next.toB).addToSet(result);
               posA = next.toA;
               posB = next.toB;
           }
       }
   }
   /**
   View [plugins](https://codemirror.net/6/docs/ref/#view.ViewPlugin) are given instances of this
   class, which describe what happened, whenever the view is updated.
   */
   class ViewUpdate {
       constructor(
       /**
       The editor view that the update is associated with.
       */
       view, 
       /**
       The new editor state.
       */
       state, 
       /**
       The transactions involved in the update. May be empty.
       */
       transactions) {
           this.view = view;
           this.state = state;
           this.transactions = transactions;
           /**
           @internal
           */
           this.flags = 0;
           this.startState = view.state;
           this.changes = ChangeSet.empty(this.startState.doc.length);
           for (let tr of transactions)
               this.changes = this.changes.compose(tr.changes);
           let changedRanges = [];
           this.changes.iterChangedRanges((fromA, toA, fromB, toB) => changedRanges.push(new ChangedRange(fromA, toA, fromB, toB)));
           this.changedRanges = changedRanges;
       }
       /**
       @internal
       */
       static create(view, state, transactions) {
           return new ViewUpdate(view, state, transactions);
       }
       /**
       Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or
       [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this
       update.
       */
       get viewportChanged() {
           return (this.flags & 4 /* UpdateFlag.Viewport */) > 0;
       }
       /**
       Indicates whether the height of a block element in the editor
       changed in this update.
       */
       get heightChanged() {
           return (this.flags & 2 /* UpdateFlag.Height */) > 0;
       }
       /**
       Returns true when the document was modified or the size of the
       editor, or elements within the editor, changed.
       */
       get geometryChanged() {
           return this.docChanged || (this.flags & (8 /* UpdateFlag.Geometry */ | 2 /* UpdateFlag.Height */)) > 0;
       }
       /**
       True when this update indicates a focus change.
       */
       get focusChanged() {
           return (this.flags & 1 /* UpdateFlag.Focus */) > 0;
       }
       /**
       Whether the document changed in this update.
       */
       get docChanged() {
           return !this.changes.empty;
       }
       /**
       Whether the selection was explicitly set in this update.
       */
       get selectionSet() {
           return this.transactions.some(tr => tr.selection);
       }
       /**
       @internal
       */
       get empty() { return this.flags == 0 && this.transactions.length == 0; }
   }

   /**
   Used to indicate [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
   */
   var Direction = /*@__PURE__*/(function (Direction) {
       // (These are chosen to match the base levels, in bidi algorithm
       // terms, of spans in that direction.)
       /**
       Left-to-right.
       */
       Direction[Direction["LTR"] = 0] = "LTR";
       /**
       Right-to-left.
       */
       Direction[Direction["RTL"] = 1] = "RTL";
   return Direction})(Direction || (Direction = {}));
   const LTR = Direction.LTR, RTL = Direction.RTL;
   // Decode a string with each type encoded as log2(type)
   function dec(str) {
       let result = [];
       for (let i = 0; i < str.length; i++)
           result.push(1 << +str[i]);
       return result;
   }
   // Character types for codepoints 0 to 0xf8
   const LowTypes = /*@__PURE__*/dec("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008");
   // Character types for codepoints 0x600 to 0x6f9
   const ArabicTypes = /*@__PURE__*/dec("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333");
   const Brackets = /*@__PURE__*/Object.create(null), BracketStack = [];
   // There's a lot more in
   // https://www.unicode.org/Public/UCD/latest/ucd/BidiBrackets.txt,
   // which are left out to keep code size down.
   for (let p of ["()", "[]", "{}"]) {
       let l = /*@__PURE__*/p.charCodeAt(0), r = /*@__PURE__*/p.charCodeAt(1);
       Brackets[l] = r;
       Brackets[r] = -l;
   }
   function charType(ch) {
       return ch <= 0xf7 ? LowTypes[ch] :
           0x590 <= ch && ch <= 0x5f4 ? 2 /* T.R */ :
               0x600 <= ch && ch <= 0x6f9 ? ArabicTypes[ch - 0x600] :
                   0x6ee <= ch && ch <= 0x8ac ? 4 /* T.AL */ :
                       0x2000 <= ch && ch <= 0x200b ? 256 /* T.NI */ :
                           0xfb50 <= ch && ch <= 0xfdff ? 4 /* T.AL */ :
                               ch == 0x200c ? 256 /* T.NI */ : 1 /* T.L */;
   }
   const BidiRE = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;
   /**
   Represents a contiguous range of text that has a single direction
   (as in left-to-right or right-to-left).
   */
   class BidiSpan {
       /**
       The direction of this span.
       */
       get dir() { return this.level % 2 ? RTL : LTR; }
       /**
       @internal
       */
       constructor(
       /**
       The start of the span (relative to the start of the line).
       */
       from, 
       /**
       The end of the span.
       */
       to, 
       /**
       The ["bidi
       level"](https://unicode.org/reports/tr9/#Basic_Display_Algorithm)
       of the span (in this context, 0 means
       left-to-right, 1 means right-to-left, 2 means left-to-right
       number inside right-to-left text).
       */
       level) {
           this.from = from;
           this.to = to;
           this.level = level;
       }
       /**
       @internal
       */
       side(end, dir) { return (this.dir == dir) == end ? this.to : this.from; }
       /**
       @internal
       */
       static find(order, index, level, assoc) {
           let maybe = -1;
           for (let i = 0; i < order.length; i++) {
               let span = order[i];
               if (span.from <= index && span.to >= index) {
                   if (span.level == level)
                       return i;
                   // When multiple spans match, if assoc != 0, take the one that
                   // covers that side, otherwise take the one with the minimum
                   // level.
                   if (maybe < 0 || (assoc != 0 ? (assoc < 0 ? span.from < index : span.to > index) : order[maybe].level > span.level))
                       maybe = i;
               }
           }
           if (maybe < 0)
               throw new RangeError("Index out of range");
           return maybe;
       }
   }
   // Reused array of character types
   const types$7 = [];
   function computeOrder(line, direction) {
       let len = line.length, outerType = direction == LTR ? 1 /* T.L */ : 2 /* T.R */, oppositeType = direction == LTR ? 2 /* T.R */ : 1 /* T.L */;
       if (!line || outerType == 1 /* T.L */ && !BidiRE.test(line))
           return trivialOrder(len);
       // W1. Examine each non-spacing mark (NSM) in the level run, and
       // change the type of the NSM to the type of the previous
       // character. If the NSM is at the start of the level run, it will
       // get the type of sor.
       // W2. Search backwards from each instance of a European number
       // until the first strong type (R, L, AL, or sor) is found. If an
       // AL is found, change the type of the European number to Arabic
       // number.
       // W3. Change all ALs to R.
       // (Left after this: L, R, EN, AN, ET, CS, NI)
       for (let i = 0, prev = outerType, prevStrong = outerType; i < len; i++) {
           let type = charType(line.charCodeAt(i));
           if (type == 512 /* T.NSM */)
               type = prev;
           else if (type == 8 /* T.EN */ && prevStrong == 4 /* T.AL */)
               type = 16 /* T.AN */;
           types$7[i] = type == 4 /* T.AL */ ? 2 /* T.R */ : type;
           if (type & 7 /* T.Strong */)
               prevStrong = type;
           prev = type;
       }
       // W5. A sequence of European terminators adjacent to European
       // numbers changes to all European numbers.
       // W6. Otherwise, separators and terminators change to Other
       // Neutral.
       // W7. Search backwards from each instance of a European number
       // until the first strong type (R, L, or sor) is found. If an L is
       // found, then change the type of the European number to L.
       // (Left after this: L, R, EN+AN, NI)
       for (let i = 0, prev = outerType, prevStrong = outerType; i < len; i++) {
           let type = types$7[i];
           if (type == 128 /* T.CS */) {
               if (i < len - 1 && prev == types$7[i + 1] && (prev & 24 /* T.Num */))
                   type = types$7[i] = prev;
               else
                   types$7[i] = 256 /* T.NI */;
           }
           else if (type == 64 /* T.ET */) {
               let end = i + 1;
               while (end < len && types$7[end] == 64 /* T.ET */)
                   end++;
               let replace = (i && prev == 8 /* T.EN */) || (end < len && types$7[end] == 8 /* T.EN */) ? (prevStrong == 1 /* T.L */ ? 1 /* T.L */ : 8 /* T.EN */) : 256 /* T.NI */;
               for (let j = i; j < end; j++)
                   types$7[j] = replace;
               i = end - 1;
           }
           else if (type == 8 /* T.EN */ && prevStrong == 1 /* T.L */) {
               types$7[i] = 1 /* T.L */;
           }
           prev = type;
           if (type & 7 /* T.Strong */)
               prevStrong = type;
       }
       // N0. Process bracket pairs in an isolating run sequence
       // sequentially in the logical order of the text positions of the
       // opening paired brackets using the logic given below. Within this
       // scope, bidirectional types EN and AN are treated as R.
       for (let i = 0, sI = 0, context = 0, ch, br, type; i < len; i++) {
           // Keeps [startIndex, type, strongSeen] triples for each open
           // bracket on BracketStack.
           if (br = Brackets[ch = line.charCodeAt(i)]) {
               if (br < 0) { // Closing bracket
                   for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
                       if (BracketStack[sJ + 1] == -br) {
                           let flags = BracketStack[sJ + 2];
                           let type = (flags & 2 /* Bracketed.EmbedInside */) ? outerType :
                               !(flags & 4 /* Bracketed.OppositeInside */) ? 0 :
                                   (flags & 1 /* Bracketed.OppositeBefore */) ? oppositeType : outerType;
                           if (type)
                               types$7[i] = types$7[BracketStack[sJ]] = type;
                           sI = sJ;
                           break;
                       }
                   }
               }
               else if (BracketStack.length == 189 /* Bracketed.MaxDepth */) {
                   break;
               }
               else {
                   BracketStack[sI++] = i;
                   BracketStack[sI++] = ch;
                   BracketStack[sI++] = context;
               }
           }
           else if ((type = types$7[i]) == 2 /* T.R */ || type == 1 /* T.L */) {
               let embed = type == outerType;
               context = embed ? 0 : 1 /* Bracketed.OppositeBefore */;
               for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
                   let cur = BracketStack[sJ + 2];
                   if (cur & 2 /* Bracketed.EmbedInside */)
                       break;
                   if (embed) {
                       BracketStack[sJ + 2] |= 2 /* Bracketed.EmbedInside */;
                   }
                   else {
                       if (cur & 4 /* Bracketed.OppositeInside */)
                           break;
                       BracketStack[sJ + 2] |= 4 /* Bracketed.OppositeInside */;
                   }
               }
           }
       }
       // N1. A sequence of neutrals takes the direction of the
       // surrounding strong text if the text on both sides has the same
       // direction. European and Arabic numbers act as if they were R in
       // terms of their influence on neutrals. Start-of-level-run (sor)
       // and end-of-level-run (eor) are used at level run boundaries.
       // N2. Any remaining neutrals take the embedding direction.
       // (Left after this: L, R, EN+AN)
       for (let i = 0; i < len; i++) {
           if (types$7[i] == 256 /* T.NI */) {
               let end = i + 1;
               while (end < len && types$7[end] == 256 /* T.NI */)
                   end++;
               let beforeL = (i ? types$7[i - 1] : outerType) == 1 /* T.L */;
               let afterL = (end < len ? types$7[end] : outerType) == 1 /* T.L */;
               let replace = beforeL == afterL ? (beforeL ? 1 /* T.L */ : 2 /* T.R */) : outerType;
               for (let j = i; j < end; j++)
                   types$7[j] = replace;
               i = end - 1;
           }
       }
       // Here we depart from the documented algorithm, in order to avoid
       // building up an actual levels array. Since there are only three
       // levels (0, 1, 2) in an implementation that doesn't take
       // explicit embedding into account, we can build up the order on
       // the fly, without following the level-based algorithm.
       let order = [];
       if (outerType == 1 /* T.L */) {
           for (let i = 0; i < len;) {
               let start = i, rtl = types$7[i++] != 1 /* T.L */;
               while (i < len && rtl == (types$7[i] != 1 /* T.L */))
                   i++;
               if (rtl) {
                   for (let j = i; j > start;) {
                       let end = j, l = types$7[--j] != 2 /* T.R */;
                       while (j > start && l == (types$7[j - 1] != 2 /* T.R */))
                           j--;
                       order.push(new BidiSpan(j, end, l ? 2 : 1));
                   }
               }
               else {
                   order.push(new BidiSpan(start, i, 0));
               }
           }
       }
       else {
           for (let i = 0; i < len;) {
               let start = i, rtl = types$7[i++] == 2 /* T.R */;
               while (i < len && rtl == (types$7[i] == 2 /* T.R */))
                   i++;
               order.push(new BidiSpan(start, i, rtl ? 1 : 2));
           }
       }
       return order;
   }
   function trivialOrder(length) {
       return [new BidiSpan(0, length, 0)];
   }
   let movedOver = "";
   function moveVisually(line, order, dir, start, forward) {
       var _a;
       let startIndex = start.head - line.from, spanI = -1;
       if (startIndex == 0) {
           if (!forward || !line.length)
               return null;
           if (order[0].level != dir) {
               startIndex = order[0].side(false, dir);
               spanI = 0;
           }
       }
       else if (startIndex == line.length) {
           if (forward)
               return null;
           let last = order[order.length - 1];
           if (last.level != dir) {
               startIndex = last.side(true, dir);
               spanI = order.length - 1;
           }
       }
       if (spanI < 0)
           spanI = BidiSpan.find(order, startIndex, (_a = start.bidiLevel) !== null && _a !== void 0 ? _a : -1, start.assoc);
       let span = order[spanI];
       // End of span. (But not end of line--that was checked for above.)
       if (startIndex == span.side(forward, dir)) {
           span = order[spanI += forward ? 1 : -1];
           startIndex = span.side(!forward, dir);
       }
       let indexForward = forward == (span.dir == dir);
       let nextIndex = findClusterBreak(line.text, startIndex, indexForward);
       movedOver = line.text.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));
       if (nextIndex != span.side(forward, dir))
           return EditorSelection.cursor(nextIndex + line.from, indexForward ? -1 : 1, span.level);
       let nextSpan = spanI == (forward ? order.length - 1 : 0) ? null : order[spanI + (forward ? 1 : -1)];
       if (!nextSpan && span.level != dir)
           return EditorSelection.cursor(forward ? line.to : line.from, forward ? -1 : 1, dir);
       if (nextSpan && nextSpan.level < span.level)
           return EditorSelection.cursor(nextSpan.side(!forward, dir) + line.from, forward ? 1 : -1, nextSpan.level);
       return EditorSelection.cursor(nextIndex + line.from, forward ? -1 : 1, span.level);
   }

   const LineBreakPlaceholder = "\uffff";
   class DOMReader {
       constructor(points, state) {
           this.points = points;
           this.text = "";
           this.lineSeparator = state.facet(EditorState.lineSeparator);
       }
       append(text) {
           this.text += text;
       }
       lineBreak() {
           this.text += LineBreakPlaceholder;
       }
       readRange(start, end) {
           if (!start)
               return this;
           let parent = start.parentNode;
           for (let cur = start;;) {
               this.findPointBefore(parent, cur);
               let oldLen = this.text.length;
               this.readNode(cur);
               let next = cur.nextSibling;
               if (next == end)
                   break;
               let view = ContentView.get(cur), nextView = ContentView.get(next);
               if (view && nextView ? view.breakAfter :
                   (view ? view.breakAfter : isBlockElement(cur)) ||
                       (isBlockElement(next) && (cur.nodeName != "BR" || cur.cmIgnore) && this.text.length > oldLen))
                   this.lineBreak();
               cur = next;
           }
           this.findPointBefore(parent, end);
           return this;
       }
       readTextNode(node) {
           let text = node.nodeValue;
           for (let point of this.points)
               if (point.node == node)
                   point.pos = this.text.length + Math.min(point.offset, text.length);
           for (let off = 0, re = this.lineSeparator ? null : /\r\n?|\n/g;;) {
               let nextBreak = -1, breakSize = 1, m;
               if (this.lineSeparator) {
                   nextBreak = text.indexOf(this.lineSeparator, off);
                   breakSize = this.lineSeparator.length;
               }
               else if (m = re.exec(text)) {
                   nextBreak = m.index;
                   breakSize = m[0].length;
               }
               this.append(text.slice(off, nextBreak < 0 ? text.length : nextBreak));
               if (nextBreak < 0)
                   break;
               this.lineBreak();
               if (breakSize > 1)
                   for (let point of this.points)
                       if (point.node == node && point.pos > this.text.length)
                           point.pos -= breakSize - 1;
               off = nextBreak + breakSize;
           }
       }
       readNode(node) {
           if (node.cmIgnore)
               return;
           let view = ContentView.get(node);
           let fromView = view && view.overrideDOMText;
           if (fromView != null) {
               this.findPointInside(node, fromView.length);
               for (let i = fromView.iter(); !i.next().done;) {
                   if (i.lineBreak)
                       this.lineBreak();
                   else
                       this.append(i.value);
               }
           }
           else if (node.nodeType == 3) {
               this.readTextNode(node);
           }
           else if (node.nodeName == "BR") {
               if (node.nextSibling)
                   this.lineBreak();
           }
           else if (node.nodeType == 1) {
               this.readRange(node.firstChild, null);
           }
       }
       findPointBefore(node, next) {
           for (let point of this.points)
               if (point.node == node && node.childNodes[point.offset] == next)
                   point.pos = this.text.length;
       }
       findPointInside(node, maxLen) {
           for (let point of this.points)
               if (node.nodeType == 3 ? point.node == node : node.contains(point.node))
                   point.pos = this.text.length + Math.min(maxLen, point.offset);
       }
   }
   function isBlockElement(node) {
       return node.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(node.nodeName);
   }
   class DOMPoint {
       constructor(node, offset) {
           this.node = node;
           this.offset = offset;
           this.pos = -1;
       }
   }

   class DocView extends ContentView {
       get length() { return this.view.state.doc.length; }
       constructor(view) {
           super();
           this.view = view;
           this.compositionDeco = Decoration.none;
           this.decorations = [];
           this.dynamicDecorationMap = [];
           // Track a minimum width for the editor. When measuring sizes in
           // measureVisibleLineHeights, this is updated to point at the width
           // of a given element and its extent in the document. When a change
           // happens in that range, these are reset. That way, once we've seen
           // a line/element of a given length, we keep the editor wide enough
           // to fit at least that element, until it is changed, at which point
           // we forget it again.
           this.minWidth = 0;
           this.minWidthFrom = 0;
           this.minWidthTo = 0;
           // Track whether the DOM selection was set in a lossy way, so that
           // we don't mess it up when reading it back it
           this.impreciseAnchor = null;
           this.impreciseHead = null;
           this.forceSelection = false;
           // Used by the resize observer to ignore resizes that we caused
           // ourselves
           this.lastUpdate = Date.now();
           this.setDOM(view.contentDOM);
           this.children = [new LineView];
           this.children[0].setParent(this);
           this.updateDeco();
           this.updateInner([new ChangedRange(0, 0, 0, view.state.doc.length)], 0);
       }
       // Update the document view to a given state. scrollIntoView can be
       // used as a hint to compute a new viewport that includes that
       // position, if we know the editor is going to scroll that position
       // into view.
       update(update) {
           let changedRanges = update.changedRanges;
           if (this.minWidth > 0 && changedRanges.length) {
               if (!changedRanges.every(({ fromA, toA }) => toA < this.minWidthFrom || fromA > this.minWidthTo)) {
                   this.minWidth = this.minWidthFrom = this.minWidthTo = 0;
               }
               else {
                   this.minWidthFrom = update.changes.mapPos(this.minWidthFrom, 1);
                   this.minWidthTo = update.changes.mapPos(this.minWidthTo, 1);
               }
           }
           if (this.view.inputState.composing < 0)
               this.compositionDeco = Decoration.none;
           else if (update.transactions.length || this.dirty)
               this.compositionDeco = computeCompositionDeco(this.view, update.changes);
           // When the DOM nodes around the selection are moved to another
           // parent, Chrome sometimes reports a different selection through
           // getSelection than the one that it actually shows to the user.
           // This forces a selection update when lines are joined to work
           // around that. Issue #54
           if ((browser.ie || browser.chrome) && !this.compositionDeco.size && update &&
               update.state.doc.lines != update.startState.doc.lines)
               this.forceSelection = true;
           let prevDeco = this.decorations, deco = this.updateDeco();
           let decoDiff = findChangedDeco(prevDeco, deco, update.changes);
           changedRanges = ChangedRange.extendWithRanges(changedRanges, decoDiff);
           if (this.dirty == 0 /* Dirty.Not */ && changedRanges.length == 0) {
               return false;
           }
           else {
               this.updateInner(changedRanges, update.startState.doc.length);
               if (update.transactions.length)
                   this.lastUpdate = Date.now();
               return true;
           }
       }
       // Used by update and the constructor do perform the actual DOM
       // update
       updateInner(changes, oldLength) {
           this.view.viewState.mustMeasureContent = true;
           this.updateChildren(changes, oldLength);
           let { observer } = this.view;
           observer.ignore(() => {
               // Lock the height during redrawing, since Chrome sometimes
               // messes with the scroll position during DOM mutation (though
               // no relayout is triggered and I cannot imagine how it can
               // recompute the scroll position without a layout)
               this.dom.style.height = this.view.viewState.contentHeight + "px";
               this.dom.style.flexBasis = this.minWidth ? this.minWidth + "px" : "";
               // Chrome will sometimes, when DOM mutations occur directly
               // around the selection, get confused and report a different
               // selection from the one it displays (issue #218). This tries
               // to detect that situation.
               let track = browser.chrome || browser.ios ? { node: observer.selectionRange.focusNode, written: false } : undefined;
               this.sync(this.view, track);
               this.dirty = 0 /* Dirty.Not */;
               if (track && (track.written || observer.selectionRange.focusNode != track.node))
                   this.forceSelection = true;
               this.dom.style.height = "";
           });
           let gaps = [];
           if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length)
               for (let child of this.children)
                   if (child instanceof BlockWidgetView && child.widget instanceof BlockGapWidget)
                       gaps.push(child.dom);
           observer.updateGaps(gaps);
       }
       updateChildren(changes, oldLength) {
           let cursor = this.childCursor(oldLength);
           for (let i = changes.length - 1;; i--) {
               let next = i >= 0 ? changes[i] : null;
               if (!next)
                   break;
               let { fromA, toA, fromB, toB } = next;
               let { content, breakAtStart, openStart, openEnd } = ContentBuilder.build(this.view.state.doc, fromB, toB, this.decorations, this.dynamicDecorationMap);
               let { i: toI, off: toOff } = cursor.findPos(toA, 1);
               let { i: fromI, off: fromOff } = cursor.findPos(fromA, -1);
               replaceRange(this, fromI, fromOff, toI, toOff, content, breakAtStart, openStart, openEnd);
           }
       }
       // Sync the DOM selection to this.state.selection
       updateSelection(mustRead = false, fromPointer = false) {
           if (mustRead || !this.view.observer.selectionRange.focusNode)
               this.view.observer.readSelectionRange();
           let activeElt = this.view.root.activeElement, focused = activeElt == this.dom;
           let selectionNotFocus = !focused &&
               hasSelection(this.dom, this.view.observer.selectionRange) && !(activeElt && this.dom.contains(activeElt));
           if (!(focused || fromPointer || selectionNotFocus))
               return;
           let force = this.forceSelection;
           this.forceSelection = false;
           let main = this.view.state.selection.main;
           // FIXME need to handle the case where the selection falls inside a block range
           let anchor = this.domAtPos(main.anchor);
           let head = main.empty ? anchor : this.domAtPos(main.head);
           // Always reset on Firefox when next to an uneditable node to
           // avoid invisible cursor bugs (#111)
           if (browser.gecko && main.empty && !this.compositionDeco.size && betweenUneditable(anchor)) {
               let dummy = document.createTextNode("");
               this.view.observer.ignore(() => anchor.node.insertBefore(dummy, anchor.node.childNodes[anchor.offset] || null));
               anchor = head = new DOMPos(dummy, 0);
               force = true;
           }
           let domSel = this.view.observer.selectionRange;
           // If the selection is already here, or in an equivalent position, don't touch it
           if (force || !domSel.focusNode ||
               !isEquivalentPosition(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) ||
               !isEquivalentPosition(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) {
               this.view.observer.ignore(() => {
                   // Chrome Android will hide the virtual keyboard when tapping
                   // inside an uneditable node, and not bring it back when we
                   // move the cursor to its proper position. This tries to
                   // restore the keyboard by cycling focus.
                   if (browser.android && browser.chrome && this.dom.contains(domSel.focusNode) &&
                       inUneditable(domSel.focusNode, this.dom)) {
                       this.dom.blur();
                       this.dom.focus({ preventScroll: true });
                   }
                   let rawSel = getSelection(this.view.root);
                   if (!rawSel) ;
                   else if (main.empty) {
                       // Work around https://bugzilla.mozilla.org/show_bug.cgi?id=1612076
                       if (browser.gecko) {
                           let nextTo = nextToUneditable(anchor.node, anchor.offset);
                           if (nextTo && nextTo != (1 /* NextTo.Before */ | 2 /* NextTo.After */)) {
                               let text = nearbyTextNode(anchor.node, anchor.offset, nextTo == 1 /* NextTo.Before */ ? 1 : -1);
                               if (text)
                                   anchor = new DOMPos(text, nextTo == 1 /* NextTo.Before */ ? 0 : text.nodeValue.length);
                           }
                       }
                       rawSel.collapse(anchor.node, anchor.offset);
                       if (main.bidiLevel != null && domSel.cursorBidiLevel != null)
                           domSel.cursorBidiLevel = main.bidiLevel;
                   }
                   else if (rawSel.extend) {
                       // Selection.extend can be used to create an 'inverted' selection
                       // (one where the focus is before the anchor), but not all
                       // browsers support it yet.
                       rawSel.collapse(anchor.node, anchor.offset);
                       // Safari will ignore the call above when the editor is
                       // hidden, and then raise an error on the call to extend
                       // (#940).
                       try {
                           rawSel.extend(head.node, head.offset);
                       }
                       catch (_) { }
                   }
                   else {
                       // Primitive (IE) way
                       let range = document.createRange();
                       if (main.anchor > main.head)
                           [anchor, head] = [head, anchor];
                       range.setEnd(head.node, head.offset);
                       range.setStart(anchor.node, anchor.offset);
                       rawSel.removeAllRanges();
                       rawSel.addRange(range);
                   }
                   if (selectionNotFocus && this.view.root.activeElement == this.dom) {
                       this.dom.blur();
                       if (activeElt)
                           activeElt.focus();
                   }
               });
               this.view.observer.setSelectionRange(anchor, head);
           }
           this.impreciseAnchor = anchor.precise ? null : new DOMPos(domSel.anchorNode, domSel.anchorOffset);
           this.impreciseHead = head.precise ? null : new DOMPos(domSel.focusNode, domSel.focusOffset);
       }
       enforceCursorAssoc() {
           if (this.compositionDeco.size)
               return;
           let { view } = this, cursor = view.state.selection.main;
           let sel = getSelection(view.root);
           let { anchorNode, anchorOffset } = view.observer.selectionRange;
           if (!sel || !cursor.empty || !cursor.assoc || !sel.modify)
               return;
           let line = LineView.find(this, cursor.head);
           if (!line)
               return;
           let lineStart = line.posAtStart;
           if (cursor.head == lineStart || cursor.head == lineStart + line.length)
               return;
           let before = this.coordsAt(cursor.head, -1), after = this.coordsAt(cursor.head, 1);
           if (!before || !after || before.bottom > after.top)
               return;
           let dom = this.domAtPos(cursor.head + cursor.assoc);
           sel.collapse(dom.node, dom.offset);
           sel.modify("move", cursor.assoc < 0 ? "forward" : "backward", "lineboundary");
           // This can go wrong in corner cases like single-character lines,
           // so check and reset if necessary.
           view.observer.readSelectionRange();
           let newRange = view.observer.selectionRange;
           if (view.docView.posFromDOM(newRange.anchorNode, newRange.anchorOffset) != cursor.from)
               sel.collapse(anchorNode, anchorOffset);
       }
       nearest(dom) {
           for (let cur = dom; cur;) {
               let domView = ContentView.get(cur);
               if (domView && domView.rootView == this)
                   return domView;
               cur = cur.parentNode;
           }
           return null;
       }
       posFromDOM(node, offset) {
           let view = this.nearest(node);
           if (!view)
               throw new RangeError("Trying to find position for a DOM position outside of the document");
           return view.localPosFromDOM(node, offset) + view.posAtStart;
       }
       domAtPos(pos) {
           let { i, off } = this.childCursor().findPos(pos, -1);
           for (; i < this.children.length - 1;) {
               let child = this.children[i];
               if (off < child.length || child instanceof LineView)
                   break;
               i++;
               off = 0;
           }
           return this.children[i].domAtPos(off);
       }
       coordsAt(pos, side) {
           for (let off = this.length, i = this.children.length - 1;; i--) {
               let child = this.children[i], start = off - child.breakAfter - child.length;
               if (pos > start ||
                   (pos == start && child.type != BlockType.WidgetBefore && child.type != BlockType.WidgetAfter &&
                       (!i || side == 2 || this.children[i - 1].breakAfter ||
                           (this.children[i - 1].type == BlockType.WidgetBefore && side > -2))))
                   return child.coordsAt(pos - start, side);
               off = start;
           }
       }
       measureVisibleLineHeights(viewport) {
           let result = [], { from, to } = viewport;
           let contentWidth = this.view.contentDOM.clientWidth;
           let isWider = contentWidth > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;
           let widest = -1, ltr = this.view.textDirection == Direction.LTR;
           for (let pos = 0, i = 0; i < this.children.length; i++) {
               let child = this.children[i], end = pos + child.length;
               if (end > to)
                   break;
               if (pos >= from) {
                   let childRect = child.dom.getBoundingClientRect();
                   result.push(childRect.height);
                   if (isWider) {
                       let last = child.dom.lastChild;
                       let rects = last ? clientRectsFor(last) : [];
                       if (rects.length) {
                           let rect = rects[rects.length - 1];
                           let width = ltr ? rect.right - childRect.left : childRect.right - rect.left;
                           if (width > widest) {
                               widest = width;
                               this.minWidth = contentWidth;
                               this.minWidthFrom = pos;
                               this.minWidthTo = end;
                           }
                       }
                   }
               }
               pos = end + child.breakAfter;
           }
           return result;
       }
       textDirectionAt(pos) {
           let { i } = this.childPos(pos, 1);
           return getComputedStyle(this.children[i].dom).direction == "rtl" ? Direction.RTL : Direction.LTR;
       }
       measureTextSize() {
           for (let child of this.children) {
               if (child instanceof LineView) {
                   let measure = child.measureTextSize();
                   if (measure)
                       return measure;
               }
           }
           // If no workable line exists, force a layout of a measurable element
           let dummy = document.createElement("div"), lineHeight, charWidth, textHeight;
           dummy.className = "cm-line";
           dummy.style.width = "99999px";
           dummy.textContent = "abc def ghi jkl mno pqr stu";
           this.view.observer.ignore(() => {
               this.dom.appendChild(dummy);
               let rect = clientRectsFor(dummy.firstChild)[0];
               lineHeight = dummy.getBoundingClientRect().height;
               charWidth = rect ? rect.width / 27 : 7;
               textHeight = rect ? rect.height : lineHeight;
               dummy.remove();
           });
           return { lineHeight, charWidth, textHeight };
       }
       childCursor(pos = this.length) {
           // Move back to start of last element when possible, so that
           // `ChildCursor.findPos` doesn't have to deal with the edge case
           // of being after the last element.
           let i = this.children.length;
           if (i)
               pos -= this.children[--i].length;
           return new ChildCursor(this.children, pos, i);
       }
       computeBlockGapDeco() {
           let deco = [], vs = this.view.viewState;
           for (let pos = 0, i = 0;; i++) {
               let next = i == vs.viewports.length ? null : vs.viewports[i];
               let end = next ? next.from - 1 : this.length;
               if (end > pos) {
                   let height = vs.lineBlockAt(end).bottom - vs.lineBlockAt(pos).top;
                   deco.push(Decoration.replace({
                       widget: new BlockGapWidget(height),
                       block: true,
                       inclusive: true,
                       isBlockGap: true,
                   }).range(pos, end));
               }
               if (!next)
                   break;
               pos = next.to + 1;
           }
           return Decoration.set(deco);
       }
       updateDeco() {
           let allDeco = this.view.state.facet(decorations).map((d, i) => {
               let dynamic = this.dynamicDecorationMap[i] = typeof d == "function";
               return dynamic ? d(this.view) : d;
           });
           for (let i = allDeco.length; i < allDeco.length + 3; i++)
               this.dynamicDecorationMap[i] = false;
           return this.decorations = [
               ...allDeco,
               this.compositionDeco,
               this.computeBlockGapDeco(),
               this.view.viewState.lineGapDeco
           ];
       }
       scrollIntoView(target) {
           let { range } = target;
           let rect = this.coordsAt(range.head, range.empty ? range.assoc : range.head > range.anchor ? -1 : 1), other;
           if (!rect)
               return;
           if (!range.empty && (other = this.coordsAt(range.anchor, range.anchor > range.head ? -1 : 1)))
               rect = { left: Math.min(rect.left, other.left), top: Math.min(rect.top, other.top),
                   right: Math.max(rect.right, other.right), bottom: Math.max(rect.bottom, other.bottom) };
           let margins = getScrollMargins(this.view);
           let targetRect = {
               left: rect.left - margins.left, top: rect.top - margins.top,
               right: rect.right + margins.right, bottom: rect.bottom + margins.bottom
           };
           scrollRectIntoView(this.view.scrollDOM, targetRect, range.head < range.anchor ? -1 : 1, target.x, target.y, target.xMargin, target.yMargin, this.view.textDirection == Direction.LTR);
       }
   }
   function betweenUneditable(pos) {
       return pos.node.nodeType == 1 && pos.node.firstChild &&
           (pos.offset == 0 || pos.node.childNodes[pos.offset - 1].contentEditable == "false") &&
           (pos.offset == pos.node.childNodes.length || pos.node.childNodes[pos.offset].contentEditable == "false");
   }
   class BlockGapWidget extends WidgetType {
       constructor(height) {
           super();
           this.height = height;
       }
       toDOM() {
           let elt = document.createElement("div");
           this.updateDOM(elt);
           return elt;
       }
       eq(other) { return other.height == this.height; }
       updateDOM(elt) {
           elt.style.height = this.height + "px";
           return true;
       }
       get estimatedHeight() { return this.height; }
   }
   function compositionSurroundingNode(view) {
       let sel = view.observer.selectionRange;
       let textNode = sel.focusNode && nearbyTextNode(sel.focusNode, sel.focusOffset, 0);
       if (!textNode)
           return null;
       let cView = view.docView.nearest(textNode);
       if (!cView)
           return null;
       if (cView instanceof LineView) {
           let topNode = textNode;
           while (topNode.parentNode != cView.dom)
               topNode = topNode.parentNode;
           let prev = topNode.previousSibling;
           while (prev && !ContentView.get(prev))
               prev = prev.previousSibling;
           let pos = prev ? ContentView.get(prev).posAtEnd : cView.posAtStart;
           return { from: pos, to: pos, node: topNode, text: textNode };
       }
       else {
           for (;;) {
               let { parent } = cView;
               if (!parent)
                   return null;
               if (parent instanceof LineView)
                   break;
               cView = parent;
           }
           let from = cView.posAtStart;
           return { from, to: from + cView.length, node: cView.dom, text: textNode };
       }
   }
   function computeCompositionDeco(view, changes) {
       let surrounding = compositionSurroundingNode(view);
       if (!surrounding)
           return Decoration.none;
       let { from, to, node, text: textNode } = surrounding;
       let newFrom = changes.mapPos(from, 1), newTo = Math.max(newFrom, changes.mapPos(to, -1));
       let { state } = view, text = node.nodeType == 3 ? node.nodeValue :
           new DOMReader([], state).readRange(node.firstChild, null).text;
       if (text.indexOf(LineBreakPlaceholder) > -1)
           return Decoration.none; // Don't try to preserve multi-line compositions
       if (newTo - newFrom < text.length) {
           if (state.doc.sliceString(newFrom, Math.min(state.doc.length, newFrom + text.length)) == text)
               newTo = newFrom + text.length;
           else if (state.doc.sliceString(Math.max(0, newTo - text.length), newTo) == text)
               newFrom = newTo - text.length;
           else
               return Decoration.none;
       }
       else if (state.doc.sliceString(newFrom, newTo) != text) {
           return Decoration.none;
       }
       let topView = ContentView.get(node);
       if (topView instanceof CompositionView)
           topView = topView.widget.topView;
       else if (topView)
           topView.parent = null;
       return Decoration.set(Decoration.replace({ widget: new CompositionWidget(node, textNode, topView), inclusive: true })
           .range(newFrom, newTo));
   }
   class CompositionWidget extends WidgetType {
       constructor(top, text, topView) {
           super();
           this.top = top;
           this.text = text;
           this.topView = topView;
       }
       eq(other) { return this.top == other.top && this.text == other.text; }
       toDOM() { return this.top; }
       ignoreEvent() { return false; }
       get customView() { return CompositionView; }
   }
   function nearbyTextNode(startNode, startOffset, side) {
       if (side <= 0)
           for (let node = startNode, offset = startOffset;;) {
               if (node.nodeType == 3)
                   return node;
               if (node.nodeType == 1 && offset > 0) {
                   node = node.childNodes[offset - 1];
                   offset = maxOffset(node);
               }
               else {
                   break;
               }
           }
       if (side >= 0)
           for (let node = startNode, offset = startOffset;;) {
               if (node.nodeType == 3)
                   return node;
               if (node.nodeType == 1 && offset < node.childNodes.length && side >= 0) {
                   node = node.childNodes[offset];
                   offset = 0;
               }
               else {
                   break;
               }
           }
       return null;
   }
   function nextToUneditable(node, offset) {
       if (node.nodeType != 1)
           return 0;
       return (offset && node.childNodes[offset - 1].contentEditable == "false" ? 1 /* NextTo.Before */ : 0) |
           (offset < node.childNodes.length && node.childNodes[offset].contentEditable == "false" ? 2 /* NextTo.After */ : 0);
   }
   class DecorationComparator$1 {
       constructor() {
           this.changes = [];
       }
       compareRange(from, to) { addRange(from, to, this.changes); }
       comparePoint(from, to) { addRange(from, to, this.changes); }
   }
   function findChangedDeco(a, b, diff) {
       let comp = new DecorationComparator$1;
       RangeSet.compare(a, b, diff, comp);
       return comp.changes;
   }
   function inUneditable(node, inside) {
       for (let cur = node; cur && cur != inside; cur = cur.assignedSlot || cur.parentNode) {
           if (cur.nodeType == 1 && cur.contentEditable == 'false') {
               return true;
           }
       }
       return false;
   }

   function groupAt(state, pos, bias = 1) {
       let categorize = state.charCategorizer(pos);
       let line = state.doc.lineAt(pos), linePos = pos - line.from;
       if (line.length == 0)
           return EditorSelection.cursor(pos);
       if (linePos == 0)
           bias = 1;
       else if (linePos == line.length)
           bias = -1;
       let from = linePos, to = linePos;
       if (bias < 0)
           from = findClusterBreak(line.text, linePos, false);
       else
           to = findClusterBreak(line.text, linePos);
       let cat = categorize(line.text.slice(from, to));
       while (from > 0) {
           let prev = findClusterBreak(line.text, from, false);
           if (categorize(line.text.slice(prev, from)) != cat)
               break;
           from = prev;
       }
       while (to < line.length) {
           let next = findClusterBreak(line.text, to);
           if (categorize(line.text.slice(to, next)) != cat)
               break;
           to = next;
       }
       return EditorSelection.range(from + line.from, to + line.from);
   }
   // Search the DOM for the {node, offset} position closest to the given
   // coordinates. Very inefficient and crude, but can usually be avoided
   // by calling caret(Position|Range)FromPoint instead.
   function getdx(x, rect) {
       return rect.left > x ? rect.left - x : Math.max(0, x - rect.right);
   }
   function getdy(y, rect) {
       return rect.top > y ? rect.top - y : Math.max(0, y - rect.bottom);
   }
   function yOverlap(a, b) {
       return a.top < b.bottom - 1 && a.bottom > b.top + 1;
   }
   function upTop(rect, top) {
       return top < rect.top ? { top, left: rect.left, right: rect.right, bottom: rect.bottom } : rect;
   }
   function upBot(rect, bottom) {
       return bottom > rect.bottom ? { top: rect.top, left: rect.left, right: rect.right, bottom } : rect;
   }
   function domPosAtCoords(parent, x, y) {
       let closest, closestRect, closestX, closestY, closestOverlap = false;
       let above, below, aboveRect, belowRect;
       for (let child = parent.firstChild; child; child = child.nextSibling) {
           let rects = clientRectsFor(child);
           for (let i = 0; i < rects.length; i++) {
               let rect = rects[i];
               if (closestRect && yOverlap(closestRect, rect))
                   rect = upTop(upBot(rect, closestRect.bottom), closestRect.top);
               let dx = getdx(x, rect), dy = getdy(y, rect);
               if (dx == 0 && dy == 0)
                   return child.nodeType == 3 ? domPosInText(child, x, y) : domPosAtCoords(child, x, y);
               if (!closest || closestY > dy || closestY == dy && closestX > dx) {
                   closest = child;
                   closestRect = rect;
                   closestX = dx;
                   closestY = dy;
                   let side = dy ? (y < rect.top ? -1 : 1) : dx ? (x < rect.left ? -1 : 1) : 0;
                   closestOverlap = !side || (side > 0 ? i < rects.length - 1 : i > 0);
               }
               if (dx == 0) {
                   if (y > rect.bottom && (!aboveRect || aboveRect.bottom < rect.bottom)) {
                       above = child;
                       aboveRect = rect;
                   }
                   else if (y < rect.top && (!belowRect || belowRect.top > rect.top)) {
                       below = child;
                       belowRect = rect;
                   }
               }
               else if (aboveRect && yOverlap(aboveRect, rect)) {
                   aboveRect = upBot(aboveRect, rect.bottom);
               }
               else if (belowRect && yOverlap(belowRect, rect)) {
                   belowRect = upTop(belowRect, rect.top);
               }
           }
       }
       if (aboveRect && aboveRect.bottom >= y) {
           closest = above;
           closestRect = aboveRect;
       }
       else if (belowRect && belowRect.top <= y) {
           closest = below;
           closestRect = belowRect;
       }
       if (!closest)
           return { node: parent, offset: 0 };
       let clipX = Math.max(closestRect.left, Math.min(closestRect.right, x));
       if (closest.nodeType == 3)
           return domPosInText(closest, clipX, y);
       if (closestOverlap && closest.contentEditable != "false")
           return domPosAtCoords(closest, clipX, y);
       let offset = Array.prototype.indexOf.call(parent.childNodes, closest) +
           (x >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);
       return { node: parent, offset };
   }
   function domPosInText(node, x, y) {
       let len = node.nodeValue.length;
       let closestOffset = -1, closestDY = 1e9, generalSide = 0;
       for (let i = 0; i < len; i++) {
           let rects = textRange(node, i, i + 1).getClientRects();
           for (let j = 0; j < rects.length; j++) {
               let rect = rects[j];
               if (rect.top == rect.bottom)
                   continue;
               if (!generalSide)
                   generalSide = x - rect.left;
               let dy = (rect.top > y ? rect.top - y : y - rect.bottom) - 1;
               if (rect.left - 1 <= x && rect.right + 1 >= x && dy < closestDY) {
                   let right = x >= (rect.left + rect.right) / 2, after = right;
                   if (browser.chrome || browser.gecko) {
                       // Check for RTL on browsers that support getting client
                       // rects for empty ranges.
                       let rectBefore = textRange(node, i).getBoundingClientRect();
                       if (rectBefore.left == rect.right)
                           after = !right;
                   }
                   if (dy <= 0)
                       return { node, offset: i + (after ? 1 : 0) };
                   closestOffset = i + (after ? 1 : 0);
                   closestDY = dy;
               }
           }
       }
       return { node, offset: closestOffset > -1 ? closestOffset : generalSide > 0 ? node.nodeValue.length : 0 };
   }
   function posAtCoords(view, coords, precise, bias = -1) {
       var _a, _b;
       let content = view.contentDOM.getBoundingClientRect(), docTop = content.top + view.viewState.paddingTop;
       let block, { docHeight } = view.viewState;
       let { x, y } = coords, yOffset = y - docTop;
       if (yOffset < 0)
           return 0;
       if (yOffset > docHeight)
           return view.state.doc.length;
       // Scan for a text block near the queried y position
       for (let halfLine = view.defaultLineHeight / 2, bounced = false;;) {
           block = view.elementAtHeight(yOffset);
           if (block.type == BlockType.Text)
               break;
           for (;;) {
               // Move the y position out of this block
               yOffset = bias > 0 ? block.bottom + halfLine : block.top - halfLine;
               if (yOffset >= 0 && yOffset <= docHeight)
                   break;
               // If the document consists entirely of replaced widgets, we
               // won't find a text block, so return 0
               if (bounced)
                   return precise ? null : 0;
               bounced = true;
               bias = -bias;
           }
       }
       y = docTop + yOffset;
       let lineStart = block.from;
       // If this is outside of the rendered viewport, we can't determine a position
       if (lineStart < view.viewport.from)
           return view.viewport.from == 0 ? 0 : precise ? null : posAtCoordsImprecise(view, content, block, x, y);
       if (lineStart > view.viewport.to)
           return view.viewport.to == view.state.doc.length ? view.state.doc.length :
               precise ? null : posAtCoordsImprecise(view, content, block, x, y);
       // Prefer ShadowRootOrDocument.elementFromPoint if present, fall back to document if not
       let doc = view.dom.ownerDocument;
       let root = view.root.elementFromPoint ? view.root : doc;
       let element = root.elementFromPoint(x, y);
       if (element && !view.contentDOM.contains(element))
           element = null;
       // If the element is unexpected, clip x at the sides of the content area and try again
       if (!element) {
           x = Math.max(content.left + 1, Math.min(content.right - 1, x));
           element = root.elementFromPoint(x, y);
           if (element && !view.contentDOM.contains(element))
               element = null;
       }
       // There's visible editor content under the point, so we can try
       // using caret(Position|Range)FromPoint as a shortcut
       let node, offset = -1;
       if (element && ((_a = view.docView.nearest(element)) === null || _a === void 0 ? void 0 : _a.isEditable) != false) {
           if (doc.caretPositionFromPoint) {
               let pos = doc.caretPositionFromPoint(x, y);
               if (pos)
                   ({ offsetNode: node, offset } = pos);
           }
           else if (doc.caretRangeFromPoint) {
               let range = doc.caretRangeFromPoint(x, y);
               if (range) {
                   ({ startContainer: node, startOffset: offset } = range);
                   if (!view.contentDOM.contains(node) ||
                       browser.safari && isSuspiciousSafariCaretResult(node, offset, x) ||
                       browser.chrome && isSuspiciousChromeCaretResult(node, offset, x))
                       node = undefined;
               }
           }
       }
       // No luck, do our own (potentially expensive) search
       if (!node || !view.docView.dom.contains(node)) {
           let line = LineView.find(view.docView, lineStart);
           if (!line)
               return yOffset > block.top + block.height / 2 ? block.to : block.from;
           ({ node, offset } = domPosAtCoords(line.dom, x, y));
       }
       let nearest = view.docView.nearest(node);
       if (!nearest)
           return null;
       if (nearest.isWidget && ((_b = nearest.dom) === null || _b === void 0 ? void 0 : _b.nodeType) == 1) {
           let rect = nearest.dom.getBoundingClientRect();
           return coords.y < rect.top || coords.y <= rect.bottom && coords.x <= (rect.left + rect.right) / 2
               ? nearest.posAtStart : nearest.posAtEnd;
       }
       else {
           return nearest.localPosFromDOM(node, offset) + nearest.posAtStart;
       }
   }
   function posAtCoordsImprecise(view, contentRect, block, x, y) {
       let into = Math.round((x - contentRect.left) * view.defaultCharacterWidth);
       if (view.lineWrapping && block.height > view.defaultLineHeight * 1.5) {
           let line = Math.floor((y - block.top) / view.defaultLineHeight);
           into += line * view.viewState.heightOracle.lineLength;
       }
       let content = view.state.sliceDoc(block.from, block.to);
       return block.from + findColumn(content, into, view.state.tabSize);
   }
   // In case of a high line height, Safari's caretRangeFromPoint treats
   // the space between lines as belonging to the last character of the
   // line before. This is used to detect such a result so that it can be
   // ignored (issue #401).
   function isSuspiciousSafariCaretResult(node, offset, x) {
       let len;
       if (node.nodeType != 3 || offset != (len = node.nodeValue.length))
           return false;
       for (let next = node.nextSibling; next; next = next.nextSibling)
           if (next.nodeType != 1 || next.nodeName != "BR")
               return false;
       return textRange(node, len - 1, len).getBoundingClientRect().left > x;
   }
   // Chrome will move positions between lines to the start of the next line
   function isSuspiciousChromeCaretResult(node, offset, x) {
       if (offset != 0)
           return false;
       for (let cur = node;;) {
           let parent = cur.parentNode;
           if (!parent || parent.nodeType != 1 || parent.firstChild != cur)
               return false;
           if (parent.classList.contains("cm-line"))
               break;
           cur = parent;
       }
       let rect = node.nodeType == 1 ? node.getBoundingClientRect()
           : textRange(node, 0, Math.max(node.nodeValue.length, 1)).getBoundingClientRect();
       return x - rect.left > 5;
   }
   function moveToLineBoundary(view, start, forward, includeWrap) {
       let line = view.state.doc.lineAt(start.head);
       let coords = !includeWrap || !view.lineWrapping ? null
           : view.coordsAtPos(start.assoc < 0 && start.head > line.from ? start.head - 1 : start.head);
       if (coords) {
           let editorRect = view.dom.getBoundingClientRect();
           let direction = view.textDirectionAt(line.from);
           let pos = view.posAtCoords({ x: forward == (direction == Direction.LTR) ? editorRect.right - 1 : editorRect.left + 1,
               y: (coords.top + coords.bottom) / 2 });
           if (pos != null)
               return EditorSelection.cursor(pos, forward ? -1 : 1);
       }
       let lineView = LineView.find(view.docView, start.head);
       let end = lineView ? (forward ? lineView.posAtEnd : lineView.posAtStart) : (forward ? line.to : line.from);
       return EditorSelection.cursor(end, forward ? -1 : 1);
   }
   function moveByChar(view, start, forward, by) {
       let line = view.state.doc.lineAt(start.head), spans = view.bidiSpans(line);
       let direction = view.textDirectionAt(line.from);
       for (let cur = start, check = null;;) {
           let next = moveVisually(line, spans, direction, cur, forward), char = movedOver;
           if (!next) {
               if (line.number == (forward ? view.state.doc.lines : 1))
                   return cur;
               char = "\n";
               line = view.state.doc.line(line.number + (forward ? 1 : -1));
               spans = view.bidiSpans(line);
               next = EditorSelection.cursor(forward ? line.from : line.to);
           }
           if (!check) {
               if (!by)
                   return next;
               check = by(char);
           }
           else if (!check(char)) {
               return cur;
           }
           cur = next;
       }
   }
   function byGroup(view, pos, start) {
       let categorize = view.state.charCategorizer(pos);
       let cat = categorize(start);
       return (next) => {
           let nextCat = categorize(next);
           if (cat == CharCategory.Space)
               cat = nextCat;
           return cat == nextCat;
       };
   }
   function moveVertically(view, start, forward, distance) {
       let startPos = start.head, dir = forward ? 1 : -1;
       if (startPos == (forward ? view.state.doc.length : 0))
           return EditorSelection.cursor(startPos, start.assoc);
       let goal = start.goalColumn, startY;
       let rect = view.contentDOM.getBoundingClientRect();
       let startCoords = view.coordsAtPos(startPos), docTop = view.documentTop;
       if (startCoords) {
           if (goal == null)
               goal = startCoords.left - rect.left;
           startY = dir < 0 ? startCoords.top : startCoords.bottom;
       }
       else {
           let line = view.viewState.lineBlockAt(startPos);
           if (goal == null)
               goal = Math.min(rect.right - rect.left, view.defaultCharacterWidth * (startPos - line.from));
           startY = (dir < 0 ? line.top : line.bottom) + docTop;
       }
       let resolvedGoal = rect.left + goal;
       let dist = distance !== null && distance !== void 0 ? distance : (view.defaultLineHeight >> 1);
       for (let extra = 0;; extra += 10) {
           let curY = startY + (dist + extra) * dir;
           let pos = posAtCoords(view, { x: resolvedGoal, y: curY }, false, dir);
           if (curY < rect.top || curY > rect.bottom || (dir < 0 ? pos < startPos : pos > startPos))
               return EditorSelection.cursor(pos, start.assoc, undefined, goal);
       }
   }
   function skipAtomicRanges(atoms, pos, bias) {
       for (;;) {
           let moved = 0;
           for (let set of atoms) {
               set.between(pos - 1, pos + 1, (from, to, value) => {
                   if (pos > from && pos < to) {
                       let side = moved || bias || (pos - from < to - pos ? -1 : 1);
                       pos = side < 0 ? from : to;
                       moved = side;
                   }
               });
           }
           if (!moved)
               return pos;
       }
   }
   function skipAtoms(view, oldPos, pos) {
       let newPos = skipAtomicRanges(view.state.facet(atomicRanges).map(f => f(view)), pos.from, oldPos.head > pos.from ? -1 : 1);
       return newPos == pos.from ? pos : EditorSelection.cursor(newPos, newPos < pos.from ? 1 : -1);
   }

   // This will also be where dragging info and such goes
   class InputState {
       setSelectionOrigin(origin) {
           this.lastSelectionOrigin = origin;
           this.lastSelectionTime = Date.now();
       }
       constructor(view) {
           this.lastKeyCode = 0;
           this.lastKeyTime = 0;
           this.lastTouchTime = 0;
           this.lastFocusTime = 0;
           this.lastScrollTop = 0;
           this.lastScrollLeft = 0;
           this.chromeScrollHack = -1;
           // On iOS, some keys need to have their default behavior happen
           // (after which we retroactively handle them and reset the DOM) to
           // avoid messing up the virtual keyboard state.
           this.pendingIOSKey = undefined;
           this.lastSelectionOrigin = null;
           this.lastSelectionTime = 0;
           this.lastEscPress = 0;
           this.lastContextMenu = 0;
           this.scrollHandlers = [];
           this.registeredEvents = [];
           this.customHandlers = [];
           // -1 means not in a composition. Otherwise, this counts the number
           // of changes made during the composition. The count is used to
           // avoid treating the start state of the composition, before any
           // changes have been made, as part of the composition.
           this.composing = -1;
           // Tracks whether the next change should be marked as starting the
           // composition (null means no composition, true means next is the
           // first, false means first has already been marked for this
           // composition)
           this.compositionFirstChange = null;
           // End time of the previous composition
           this.compositionEndedAt = 0;
           // Used in a kludge to detect when an Enter keypress should be
           // considered part of the composition on Safari, which fires events
           // in the wrong order
           this.compositionPendingKey = false;
           // Used to categorize changes as part of a composition, even when
           // the mutation events fire shortly after the compositionend event
           this.compositionPendingChange = false;
           this.mouseSelection = null;
           let handleEvent = (handler, event) => {
               if (this.ignoreDuringComposition(event))
                   return;
               if (event.type == "keydown" && this.keydown(view, event))
                   return;
               if (this.mustFlushObserver(event))
                   view.observer.forceFlush();
               if (this.runCustomHandlers(event.type, view, event))
                   event.preventDefault();
               else
                   handler(view, event);
           };
           for (let type in handlers$2) {
               let handler = handlers$2[type];
               view.contentDOM.addEventListener(type, event => {
                   if (eventBelongsToEditor(view, event))
                       handleEvent(handler, event);
               }, handlerOptions[type]);
               this.registeredEvents.push(type);
           }
           view.scrollDOM.addEventListener("mousedown", (event) => {
               if (event.target == view.scrollDOM && event.clientY > view.contentDOM.getBoundingClientRect().bottom) {
                   handleEvent(handlers$2.mousedown, event);
                   if (!event.defaultPrevented && event.button == 2) {
                       // Make sure the content covers the entire scroller height, in order
                       // to catch a native context menu click below it
                       let start = view.contentDOM.style.minHeight;
                       view.contentDOM.style.minHeight = "100%";
                       setTimeout(() => view.contentDOM.style.minHeight = start, 200);
                   }
               }
           });
           view.scrollDOM.addEventListener("drop", (event) => {
               if (event.target == view.scrollDOM && event.clientY > view.contentDOM.getBoundingClientRect().bottom)
                   handleEvent(handlers$2.drop, event);
           });
           if (browser.chrome && browser.chrome_version == 102) { // FIXME remove at some point
               // On Chrome 102, viewport updates somehow stop wheel-based
               // scrolling. Turning off pointer events during the scroll seems
               // to avoid the issue.
               view.scrollDOM.addEventListener("wheel", () => {
                   if (this.chromeScrollHack < 0)
                       view.contentDOM.style.pointerEvents = "none";
                   else
                       window.clearTimeout(this.chromeScrollHack);
                   this.chromeScrollHack = setTimeout(() => {
                       this.chromeScrollHack = -1;
                       view.contentDOM.style.pointerEvents = "";
                   }, 100);
               }, { passive: true });
           }
           this.notifiedFocused = view.hasFocus;
           // On Safari adding an input event handler somehow prevents an
           // issue where the composition vanishes when you press enter.
           if (browser.safari)
               view.contentDOM.addEventListener("input", () => null);
       }
       ensureHandlers(view, plugins) {
           var _a;
           let handlers;
           this.customHandlers = [];
           for (let plugin of plugins)
               if (handlers = (_a = plugin.update(view).spec) === null || _a === void 0 ? void 0 : _a.domEventHandlers) {
                   this.customHandlers.push({ plugin: plugin.value, handlers });
                   for (let type in handlers)
                       if (this.registeredEvents.indexOf(type) < 0 && type != "scroll") {
                           this.registeredEvents.push(type);
                           view.contentDOM.addEventListener(type, (event) => {
                               if (!eventBelongsToEditor(view, event))
                                   return;
                               if (this.runCustomHandlers(type, view, event))
                                   event.preventDefault();
                           });
                       }
               }
       }
       runCustomHandlers(type, view, event) {
           for (let set of this.customHandlers) {
               let handler = set.handlers[type];
               if (handler) {
                   try {
                       if (handler.call(set.plugin, event, view) || event.defaultPrevented)
                           return true;
                   }
                   catch (e) {
                       logException(view.state, e);
                   }
               }
           }
           return false;
       }
       runScrollHandlers(view, event) {
           this.lastScrollTop = view.scrollDOM.scrollTop;
           this.lastScrollLeft = view.scrollDOM.scrollLeft;
           for (let set of this.customHandlers) {
               let handler = set.handlers.scroll;
               if (handler) {
                   try {
                       handler.call(set.plugin, event, view);
                   }
                   catch (e) {
                       logException(view.state, e);
                   }
               }
           }
       }
       keydown(view, event) {
           // Must always run, even if a custom handler handled the event
           this.lastKeyCode = event.keyCode;
           this.lastKeyTime = Date.now();
           if (event.keyCode == 9 && Date.now() < this.lastEscPress + 2000)
               return true;
           if (event.keyCode != 27 && modifierCodes.indexOf(event.keyCode) < 0)
               view.inputState.lastEscPress = 0;
           // Chrome for Android usually doesn't fire proper key events, but
           // occasionally does, usually surrounded by a bunch of complicated
           // composition changes. When an enter or backspace key event is
           // seen, hold off on handling DOM events for a bit, and then
           // dispatch it.
           if (browser.android && browser.chrome && !event.synthetic &&
               (event.keyCode == 13 || event.keyCode == 8)) {
               view.observer.delayAndroidKey(event.key, event.keyCode);
               return true;
           }
           // Prevent the default behavior of Enter on iOS makes the
           // virtual keyboard get stuck in the wrong (lowercase)
           // state. So we let it go through, and then, in
           // applyDOMChange, notify key handlers of it and reset to
           // the state they produce.
           let pending;
           if (browser.ios && !event.synthetic && !event.altKey && !event.metaKey &&
               ((pending = PendingKeys.find(key => key.keyCode == event.keyCode)) && !event.ctrlKey ||
                   EmacsyPendingKeys.indexOf(event.key) > -1 && event.ctrlKey && !event.shiftKey)) {
               this.pendingIOSKey = pending || event;
               setTimeout(() => this.flushIOSKey(view), 250);
               return true;
           }
           return false;
       }
       flushIOSKey(view) {
           let key = this.pendingIOSKey;
           if (!key)
               return false;
           this.pendingIOSKey = undefined;
           return dispatchKey(view.contentDOM, key.key, key.keyCode);
       }
       ignoreDuringComposition(event) {
           if (!/^key/.test(event.type))
               return false;
           if (this.composing > 0)
               return true;
           // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.
           // On some input method editors (IMEs), the Enter key is used to
           // confirm character selection. On Safari, when Enter is pressed,
           // compositionend and keydown events are sometimes emitted in the
           // wrong order. The key event should still be ignored, even when
           // it happens after the compositionend event.
           if (browser.safari && !browser.ios && this.compositionPendingKey && Date.now() - this.compositionEndedAt < 100) {
               this.compositionPendingKey = false;
               return true;
           }
           return false;
       }
       mustFlushObserver(event) {
           return event.type == "keydown" && event.keyCode != 229;
       }
       startMouseSelection(mouseSelection) {
           if (this.mouseSelection)
               this.mouseSelection.destroy();
           this.mouseSelection = mouseSelection;
       }
       update(update) {
           if (this.mouseSelection)
               this.mouseSelection.update(update);
           if (update.transactions.length)
               this.lastKeyCode = this.lastSelectionTime = 0;
       }
       destroy() {
           if (this.mouseSelection)
               this.mouseSelection.destroy();
       }
   }
   const PendingKeys = [
       { key: "Backspace", keyCode: 8, inputType: "deleteContentBackward" },
       { key: "Enter", keyCode: 13, inputType: "insertParagraph" },
       { key: "Delete", keyCode: 46, inputType: "deleteContentForward" }
   ];
   const EmacsyPendingKeys = "dthko";
   // Key codes for modifier keys
   const modifierCodes = [16, 17, 18, 20, 91, 92, 224, 225];
   const dragScrollMargin = 6;
   function dragScrollSpeed(dist) {
       return Math.max(0, dist) * 0.7 + 8;
   }
   class MouseSelection {
       constructor(view, startEvent, style, mustSelect) {
           this.view = view;
           this.style = style;
           this.mustSelect = mustSelect;
           this.scrollSpeed = { x: 0, y: 0 };
           this.scrolling = -1;
           this.lastEvent = startEvent;
           this.scrollParent = scrollableParent(view.contentDOM);
           this.atoms = view.state.facet(atomicRanges).map(f => f(view));
           let doc = view.contentDOM.ownerDocument;
           doc.addEventListener("mousemove", this.move = this.move.bind(this));
           doc.addEventListener("mouseup", this.up = this.up.bind(this));
           this.extend = startEvent.shiftKey;
           this.multiple = view.state.facet(EditorState.allowMultipleSelections) && addsSelectionRange(view, startEvent);
           this.dragMove = dragMovesSelection(view, startEvent);
           this.dragging = isInPrimarySelection(view, startEvent) && getClickType(startEvent) == 1 ? null : false;
       }
       start(event) {
           // When clicking outside of the selection, immediately apply the
           // effect of starting the selection
           if (this.dragging === false) {
               event.preventDefault();
               this.select(event);
           }
       }
       move(event) {
           var _a;
           if (event.buttons == 0)
               return this.destroy();
           if (this.dragging !== false)
               return;
           this.select(this.lastEvent = event);
           let sx = 0, sy = 0;
           let rect = ((_a = this.scrollParent) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect())
               || { left: 0, top: 0, right: this.view.win.innerWidth, bottom: this.view.win.innerHeight };
           let margins = getScrollMargins(this.view);
           if (event.clientX - margins.left <= rect.left + dragScrollMargin)
               sx = -dragScrollSpeed(rect.left - event.clientX);
           else if (event.clientX + margins.right >= rect.right - dragScrollMargin)
               sx = dragScrollSpeed(event.clientX - rect.right);
           if (event.clientY - margins.top <= rect.top + dragScrollMargin)
               sy = -dragScrollSpeed(rect.top - event.clientY);
           else if (event.clientY + margins.bottom >= rect.bottom - dragScrollMargin)
               sy = dragScrollSpeed(event.clientY - rect.bottom);
           this.setScrollSpeed(sx, sy);
       }
       up(event) {
           if (this.dragging == null)
               this.select(this.lastEvent);
           if (!this.dragging)
               event.preventDefault();
           this.destroy();
       }
       destroy() {
           this.setScrollSpeed(0, 0);
           let doc = this.view.contentDOM.ownerDocument;
           doc.removeEventListener("mousemove", this.move);
           doc.removeEventListener("mouseup", this.up);
           this.view.inputState.mouseSelection = null;
       }
       setScrollSpeed(sx, sy) {
           this.scrollSpeed = { x: sx, y: sy };
           if (sx || sy) {
               if (this.scrolling < 0)
                   this.scrolling = setInterval(() => this.scroll(), 50);
           }
           else if (this.scrolling > -1) {
               clearInterval(this.scrolling);
               this.scrolling = -1;
           }
       }
       scroll() {
           if (this.scrollParent) {
               this.scrollParent.scrollLeft += this.scrollSpeed.x;
               this.scrollParent.scrollTop += this.scrollSpeed.y;
           }
           else {
               this.view.win.scrollBy(this.scrollSpeed.x, this.scrollSpeed.y);
           }
           if (this.dragging === false)
               this.select(this.lastEvent);
       }
       skipAtoms(sel) {
           let ranges = null;
           for (let i = 0; i < sel.ranges.length; i++) {
               let range = sel.ranges[i], updated = null;
               if (range.empty) {
                   let pos = skipAtomicRanges(this.atoms, range.from, 0);
                   if (pos != range.from)
                       updated = EditorSelection.cursor(pos, -1);
               }
               else {
                   let from = skipAtomicRanges(this.atoms, range.from, -1);
                   let to = skipAtomicRanges(this.atoms, range.to, 1);
                   if (from != range.from || to != range.to)
                       updated = EditorSelection.range(range.from == range.anchor ? from : to, range.from == range.head ? from : to);
               }
               if (updated) {
                   if (!ranges)
                       ranges = sel.ranges.slice();
                   ranges[i] = updated;
               }
           }
           return ranges ? EditorSelection.create(ranges, sel.mainIndex) : sel;
       }
       select(event) {
           let { view } = this, selection = this.skipAtoms(this.style.get(event, this.extend, this.multiple));
           if (this.mustSelect || !selection.eq(view.state.selection) ||
               selection.main.assoc != view.state.selection.main.assoc)
               this.view.dispatch({
                   selection,
                   userEvent: "select.pointer"
               });
           this.mustSelect = false;
       }
       update(update) {
           if (update.docChanged && this.dragging)
               this.dragging = this.dragging.map(update.changes);
           if (this.style.update(update))
               setTimeout(() => this.select(this.lastEvent), 20);
       }
   }
   function addsSelectionRange(view, event) {
       let facet = view.state.facet(clickAddsSelectionRange);
       return facet.length ? facet[0](event) : browser.mac ? event.metaKey : event.ctrlKey;
   }
   function dragMovesSelection(view, event) {
       let facet = view.state.facet(dragMovesSelection$1);
       return facet.length ? facet[0](event) : browser.mac ? !event.altKey : !event.ctrlKey;
   }
   function isInPrimarySelection(view, event) {
       let { main } = view.state.selection;
       if (main.empty)
           return false;
       // On boundary clicks, check whether the coordinates are inside the
       // selection's client rectangles
       let sel = getSelection(view.root);
       if (!sel || sel.rangeCount == 0)
           return true;
       let rects = sel.getRangeAt(0).getClientRects();
       for (let i = 0; i < rects.length; i++) {
           let rect = rects[i];
           if (rect.left <= event.clientX && rect.right >= event.clientX &&
               rect.top <= event.clientY && rect.bottom >= event.clientY)
               return true;
       }
       return false;
   }
   function eventBelongsToEditor(view, event) {
       if (!event.bubbles)
           return true;
       if (event.defaultPrevented)
           return false;
       for (let node = event.target, cView; node != view.contentDOM; node = node.parentNode)
           if (!node || node.nodeType == 11 || ((cView = ContentView.get(node)) && cView.ignoreEvent(event)))
               return false;
       return true;
   }
   const handlers$2 = /*@__PURE__*/Object.create(null);
   const handlerOptions = /*@__PURE__*/Object.create(null);
   // This is very crude, but unfortunately both these browsers _pretend_
   // that they have a clipboard API—all the objects and methods are
   // there, they just don't work, and they are hard to test.
   const brokenClipboardAPI = (browser.ie && browser.ie_version < 15) ||
       (browser.ios && browser.webkit_version < 604);
   function capturePaste(view) {
       let parent = view.dom.parentNode;
       if (!parent)
           return;
       let target = parent.appendChild(document.createElement("textarea"));
       target.style.cssText = "position: fixed; left: -10000px; top: 10px";
       target.focus();
       setTimeout(() => {
           view.focus();
           target.remove();
           doPaste(view, target.value);
       }, 50);
   }
   function doPaste(view, input) {
       let { state } = view, changes, i = 1, text = state.toText(input);
       let byLine = text.lines == state.selection.ranges.length;
       let linewise = lastLinewiseCopy != null && state.selection.ranges.every(r => r.empty) && lastLinewiseCopy == text.toString();
       if (linewise) {
           let lastLine = -1;
           changes = state.changeByRange(range => {
               let line = state.doc.lineAt(range.from);
               if (line.from == lastLine)
                   return { range };
               lastLine = line.from;
               let insert = state.toText((byLine ? text.line(i++).text : input) + state.lineBreak);
               return { changes: { from: line.from, insert },
                   range: EditorSelection.cursor(range.from + insert.length) };
           });
       }
       else if (byLine) {
           changes = state.changeByRange(range => {
               let line = text.line(i++);
               return { changes: { from: range.from, to: range.to, insert: line.text },
                   range: EditorSelection.cursor(range.from + line.length) };
           });
       }
       else {
           changes = state.replaceSelection(text);
       }
       view.dispatch(changes, {
           userEvent: "input.paste",
           scrollIntoView: true
       });
   }
   handlers$2.keydown = (view, event) => {
       view.inputState.setSelectionOrigin("select");
       if (event.keyCode == 27)
           view.inputState.lastEscPress = Date.now();
   };
   handlers$2.touchstart = (view, e) => {
       view.inputState.lastTouchTime = Date.now();
       view.inputState.setSelectionOrigin("select.pointer");
   };
   handlers$2.touchmove = view => {
       view.inputState.setSelectionOrigin("select.pointer");
   };
   handlerOptions.touchstart = handlerOptions.touchmove = { passive: true };
   handlers$2.mousedown = (view, event) => {
       view.observer.flush();
       if (view.inputState.lastTouchTime > Date.now() - 2000)
           return; // Ignore touch interaction
       let style = null;
       for (let makeStyle of view.state.facet(mouseSelectionStyle)) {
           style = makeStyle(view, event);
           if (style)
               break;
       }
       if (!style && event.button == 0)
           style = basicMouseSelection(view, event);
       if (style) {
           let mustFocus = view.root.activeElement != view.contentDOM;
           view.inputState.startMouseSelection(new MouseSelection(view, event, style, mustFocus));
           if (mustFocus)
               view.observer.ignore(() => focusPreventScroll(view.contentDOM));
           if (view.inputState.mouseSelection)
               view.inputState.mouseSelection.start(event);
       }
   };
   function rangeForClick(view, pos, bias, type) {
       if (type == 1) { // Single click
           return EditorSelection.cursor(pos, bias);
       }
       else if (type == 2) { // Double click
           return groupAt(view.state, pos, bias);
       }
       else { // Triple click
           let visual = LineView.find(view.docView, pos), line = view.state.doc.lineAt(visual ? visual.posAtEnd : pos);
           let from = visual ? visual.posAtStart : line.from, to = visual ? visual.posAtEnd : line.to;
           if (to < view.state.doc.length && to == line.to)
               to++;
           return EditorSelection.range(from, to);
       }
   }
   let insideY = (y, rect) => y >= rect.top && y <= rect.bottom;
   let inside = (x, y, rect) => insideY(y, rect) && x >= rect.left && x <= rect.right;
   // Try to determine, for the given coordinates, associated with the
   // given position, whether they are related to the element before or
   // the element after the position.
   function findPositionSide(view, pos, x, y) {
       let line = LineView.find(view.docView, pos);
       if (!line)
           return 1;
       let off = pos - line.posAtStart;
       // Line boundaries point into the line
       if (off == 0)
           return 1;
       if (off == line.length)
           return -1;
       // Positions on top of an element point at that element
       let before = line.coordsAt(off, -1);
       if (before && inside(x, y, before))
           return -1;
       let after = line.coordsAt(off, 1);
       if (after && inside(x, y, after))
           return 1;
       // This is probably a line wrap point. Pick before if the point is
       // beside it.
       return before && insideY(y, before) ? -1 : 1;
   }
   function queryPos(view, event) {
       let pos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
       return { pos, bias: findPositionSide(view, pos, event.clientX, event.clientY) };
   }
   const BadMouseDetail = browser.ie && browser.ie_version <= 11;
   let lastMouseDown = null, lastMouseDownCount = 0, lastMouseDownTime = 0;
   function getClickType(event) {
       if (!BadMouseDetail)
           return event.detail;
       let last = lastMouseDown, lastTime = lastMouseDownTime;
       lastMouseDown = event;
       lastMouseDownTime = Date.now();
       return lastMouseDownCount = !last || (lastTime > Date.now() - 400 && Math.abs(last.clientX - event.clientX) < 2 &&
           Math.abs(last.clientY - event.clientY) < 2) ? (lastMouseDownCount + 1) % 3 : 1;
   }
   function basicMouseSelection(view, event) {
       let start = queryPos(view, event), type = getClickType(event);
       let startSel = view.state.selection;
       return {
           update(update) {
               if (update.docChanged) {
                   start.pos = update.changes.mapPos(start.pos);
                   startSel = startSel.map(update.changes);
               }
           },
           get(event, extend, multiple) {
               let cur = queryPos(view, event), removed;
               let range = rangeForClick(view, cur.pos, cur.bias, type);
               if (start.pos != cur.pos && !extend) {
                   let startRange = rangeForClick(view, start.pos, start.bias, type);
                   let from = Math.min(startRange.from, range.from), to = Math.max(startRange.to, range.to);
                   range = from < range.from ? EditorSelection.range(from, to) : EditorSelection.range(to, from);
               }
               if (extend)
                   return startSel.replaceRange(startSel.main.extend(range.from, range.to));
               else if (multiple && type == 1 && startSel.ranges.length > 1 && (removed = removeRangeAround(startSel, cur.pos)))
                   return removed;
               else if (multiple)
                   return startSel.addRange(range);
               else
                   return EditorSelection.create([range]);
           }
       };
   }
   function removeRangeAround(sel, pos) {
       for (let i = 0; i < sel.ranges.length; i++) {
           let { from, to } = sel.ranges[i];
           if (from <= pos && to >= pos)
               return EditorSelection.create(sel.ranges.slice(0, i).concat(sel.ranges.slice(i + 1)), sel.mainIndex == i ? 0 : sel.mainIndex - (sel.mainIndex > i ? 1 : 0));
       }
       return null;
   }
   handlers$2.dragstart = (view, event) => {
       let { selection: { main } } = view.state;
       let { mouseSelection } = view.inputState;
       if (mouseSelection)
           mouseSelection.dragging = main;
       if (event.dataTransfer) {
           event.dataTransfer.setData("Text", view.state.sliceDoc(main.from, main.to));
           event.dataTransfer.effectAllowed = "copyMove";
       }
   };
   function dropText(view, event, text, direct) {
       if (!text)
           return;
       let dropPos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
       event.preventDefault();
       let { mouseSelection } = view.inputState;
       let del = direct && mouseSelection && mouseSelection.dragging && mouseSelection.dragMove ?
           { from: mouseSelection.dragging.from, to: mouseSelection.dragging.to } : null;
       let ins = { from: dropPos, insert: text };
       let changes = view.state.changes(del ? [del, ins] : ins);
       view.focus();
       view.dispatch({
           changes,
           selection: { anchor: changes.mapPos(dropPos, -1), head: changes.mapPos(dropPos, 1) },
           userEvent: del ? "move.drop" : "input.drop"
       });
   }
   handlers$2.drop = (view, event) => {
       if (!event.dataTransfer)
           return;
       if (view.state.readOnly)
           return event.preventDefault();
       let files = event.dataTransfer.files;
       if (files && files.length) { // For a file drop, read the file's text.
           event.preventDefault();
           let text = Array(files.length), read = 0;
           let finishFile = () => {
               if (++read == files.length)
                   dropText(view, event, text.filter(s => s != null).join(view.state.lineBreak), false);
           };
           for (let i = 0; i < files.length; i++) {
               let reader = new FileReader;
               reader.onerror = finishFile;
               reader.onload = () => {
                   if (!/[\x00-\x08\x0e-\x1f]{2}/.test(reader.result))
                       text[i] = reader.result;
                   finishFile();
               };
               reader.readAsText(files[i]);
           }
       }
       else {
           dropText(view, event, event.dataTransfer.getData("Text"), true);
       }
   };
   handlers$2.paste = (view, event) => {
       if (view.state.readOnly)
           return event.preventDefault();
       view.observer.flush();
       let data = brokenClipboardAPI ? null : event.clipboardData;
       if (data) {
           doPaste(view, data.getData("text/plain") || data.getData("text/uri-text"));
           event.preventDefault();
       }
       else {
           capturePaste(view);
       }
   };
   function captureCopy(view, text) {
       // The extra wrapper is somehow necessary on IE/Edge to prevent the
       // content from being mangled when it is put onto the clipboard
       let parent = view.dom.parentNode;
       if (!parent)
           return;
       let target = parent.appendChild(document.createElement("textarea"));
       target.style.cssText = "position: fixed; left: -10000px; top: 10px";
       target.value = text;
       target.focus();
       target.selectionEnd = text.length;
       target.selectionStart = 0;
       setTimeout(() => {
           target.remove();
           view.focus();
       }, 50);
   }
   function copiedRange(state) {
       let content = [], ranges = [], linewise = false;
       for (let range of state.selection.ranges)
           if (!range.empty) {
               content.push(state.sliceDoc(range.from, range.to));
               ranges.push(range);
           }
       if (!content.length) {
           // Nothing selected, do a line-wise copy
           let upto = -1;
           for (let { from } of state.selection.ranges) {
               let line = state.doc.lineAt(from);
               if (line.number > upto) {
                   content.push(line.text);
                   ranges.push({ from: line.from, to: Math.min(state.doc.length, line.to + 1) });
               }
               upto = line.number;
           }
           linewise = true;
       }
       return { text: content.join(state.lineBreak), ranges, linewise };
   }
   let lastLinewiseCopy = null;
   handlers$2.copy = handlers$2.cut = (view, event) => {
       let { text, ranges, linewise } = copiedRange(view.state);
       if (!text && !linewise)
           return;
       lastLinewiseCopy = linewise ? text : null;
       let data = brokenClipboardAPI ? null : event.clipboardData;
       if (data) {
           event.preventDefault();
           data.clearData();
           data.setData("text/plain", text);
       }
       else {
           captureCopy(view, text);
       }
       if (event.type == "cut" && !view.state.readOnly)
           view.dispatch({
               changes: ranges,
               scrollIntoView: true,
               userEvent: "delete.cut"
           });
   };
   const isFocusChange = /*@__PURE__*/Annotation.define();
   function focusChangeTransaction(state, focus) {
       let effects = [];
       for (let getEffect of state.facet(focusChangeEffect)) {
           let effect = getEffect(state, focus);
           if (effect)
               effects.push(effect);
       }
       return effects ? state.update({ effects, annotations: isFocusChange.of(true) }) : null;
   }
   function updateForFocusChange(view) {
       setTimeout(() => {
           let focus = view.hasFocus;
           if (focus != view.inputState.notifiedFocused) {
               let tr = focusChangeTransaction(view.state, focus);
               if (tr)
                   view.dispatch(tr);
               else
                   view.update([]);
           }
       }, 10);
   }
   handlers$2.focus = view => {
       view.inputState.lastFocusTime = Date.now();
       // When focusing reset the scroll position, move it back to where it was
       if (!view.scrollDOM.scrollTop && (view.inputState.lastScrollTop || view.inputState.lastScrollLeft)) {
           view.scrollDOM.scrollTop = view.inputState.lastScrollTop;
           view.scrollDOM.scrollLeft = view.inputState.lastScrollLeft;
       }
       updateForFocusChange(view);
   };
   handlers$2.blur = view => {
       view.observer.clearSelectionRange();
       updateForFocusChange(view);
   };
   handlers$2.compositionstart = handlers$2.compositionupdate = view => {
       if (view.inputState.compositionFirstChange == null)
           view.inputState.compositionFirstChange = true;
       if (view.inputState.composing < 0) {
           // FIXME possibly set a timeout to clear it again on Android
           view.inputState.composing = 0;
       }
   };
   handlers$2.compositionend = view => {
       view.inputState.composing = -1;
       view.inputState.compositionEndedAt = Date.now();
       view.inputState.compositionPendingKey = true;
       view.inputState.compositionPendingChange = view.observer.pendingRecords().length > 0;
       view.inputState.compositionFirstChange = null;
       if (browser.chrome && browser.android) {
           // Delay flushing for a bit on Android because it'll often fire a
           // bunch of contradictory changes in a row at end of compositon
           view.observer.flushSoon();
       }
       else if (view.inputState.compositionPendingChange) {
           // If we found pending records, schedule a flush.
           Promise.resolve().then(() => view.observer.flush());
       }
       else {
           // Otherwise, make sure that, if no changes come in soon, the
           // composition view is cleared.
           setTimeout(() => {
               if (view.inputState.composing < 0 && view.docView.compositionDeco.size)
                   view.update([]);
           }, 50);
       }
   };
   handlers$2.contextmenu = view => {
       view.inputState.lastContextMenu = Date.now();
   };
   handlers$2.beforeinput = (view, event) => {
       var _a;
       // Because Chrome Android doesn't fire useful key events, use
       // beforeinput to detect backspace (and possibly enter and delete,
       // but those usually don't even seem to fire beforeinput events at
       // the moment) and fake a key event for it.
       //
       // (preventDefault on beforeinput, though supported in the spec,
       // seems to do nothing at all on Chrome).
       let pending;
       if (browser.chrome && browser.android && (pending = PendingKeys.find(key => key.inputType == event.inputType))) {
           view.observer.delayAndroidKey(pending.key, pending.keyCode);
           if (pending.key == "Backspace" || pending.key == "Delete") {
               let startViewHeight = ((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0;
               setTimeout(() => {
                   var _a;
                   // Backspacing near uneditable nodes on Chrome Android sometimes
                   // closes the virtual keyboard. This tries to crudely detect
                   // that and refocus to get it back.
                   if ((((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0) > startViewHeight + 10 && view.hasFocus) {
                       view.contentDOM.blur();
                       view.focus();
                   }
               }, 100);
           }
       }
   };

   const wrappingWhiteSpace = ["pre-wrap", "normal", "pre-line", "break-spaces"];
   class HeightOracle {
       constructor(lineWrapping) {
           this.lineWrapping = lineWrapping;
           this.doc = Text$1.empty;
           this.heightSamples = {};
           this.lineHeight = 14; // The height of an entire line (line-height)
           this.charWidth = 7;
           this.textHeight = 14; // The height of the actual font (font-size)
           this.lineLength = 30;
           // Used to track, during updateHeight, if any actual heights changed
           this.heightChanged = false;
       }
       heightForGap(from, to) {
           let lines = this.doc.lineAt(to).number - this.doc.lineAt(from).number + 1;
           if (this.lineWrapping)
               lines += Math.max(0, Math.ceil(((to - from) - (lines * this.lineLength * 0.5)) / this.lineLength));
           return this.lineHeight * lines;
       }
       heightForLine(length) {
           if (!this.lineWrapping)
               return this.lineHeight;
           let lines = 1 + Math.max(0, Math.ceil((length - this.lineLength) / (this.lineLength - 5)));
           return lines * this.lineHeight;
       }
       setDoc(doc) { this.doc = doc; return this; }
       mustRefreshForWrapping(whiteSpace) {
           return (wrappingWhiteSpace.indexOf(whiteSpace) > -1) != this.lineWrapping;
       }
       mustRefreshForHeights(lineHeights) {
           let newHeight = false;
           for (let i = 0; i < lineHeights.length; i++) {
               let h = lineHeights[i];
               if (h < 0) {
                   i++;
               }
               else if (!this.heightSamples[Math.floor(h * 10)]) { // Round to .1 pixels
                   newHeight = true;
                   this.heightSamples[Math.floor(h * 10)] = true;
               }
           }
           return newHeight;
       }
       refresh(whiteSpace, lineHeight, charWidth, textHeight, lineLength, knownHeights) {
           let lineWrapping = wrappingWhiteSpace.indexOf(whiteSpace) > -1;
           let changed = Math.round(lineHeight) != Math.round(this.lineHeight) || this.lineWrapping != lineWrapping;
           this.lineWrapping = lineWrapping;
           this.lineHeight = lineHeight;
           this.charWidth = charWidth;
           this.textHeight = textHeight;
           this.lineLength = lineLength;
           if (changed) {
               this.heightSamples = {};
               for (let i = 0; i < knownHeights.length; i++) {
                   let h = knownHeights[i];
                   if (h < 0)
                       i++;
                   else
                       this.heightSamples[Math.floor(h * 10)] = true;
               }
           }
           return changed;
       }
   }
   // This object is used by `updateHeight` to make DOM measurements
   // arrive at the right nides. The `heights` array is a sequence of
   // block heights, starting from position `from`.
   class MeasuredHeights {
       constructor(from, heights) {
           this.from = from;
           this.heights = heights;
           this.index = 0;
       }
       get more() { return this.index < this.heights.length; }
   }
   /**
   Record used to represent information about a block-level element
   in the editor view.
   */
   class BlockInfo {
       /**
       @internal
       */
       constructor(
       /**
       The start of the element in the document.
       */
       from, 
       /**
       The length of the element.
       */
       length, 
       /**
       The top position of the element (relative to the top of the
       document).
       */
       top, 
       /**
       Its height.
       */
       height, 
       /**
       @internal
       */
       children, 
       /**
       @internal
       */
       deco) {
           this.from = from;
           this.length = length;
           this.top = top;
           this.height = height;
           this.children = children;
           this.deco = deco;
       }
       /**
       The type of element this is. When querying lines, this may be
       an array of all the blocks that make up the line.
       */
       get type() {
           var _a, _b, _c;
           return (_c = (_a = this.children) !== null && _a !== void 0 ? _a : (_b = this.deco) === null || _b === void 0 ? void 0 : _b.type) !== null && _c !== void 0 ? _c : BlockType.Text;
       }
       /**
       If this is a widget block, this will return the widget
       associated with it.
       */
       get widget() {
           return this.deco && this.deco.widget;
       }
       /**
       The end of the element as a document position.
       */
       get to() { return this.from + this.length; }
       /**
       The bottom position of the element.
       */
       get bottom() { return this.top + this.height; }
       /**
       @internal
       */
       join(other) {
           let children = (this.children || [this]).concat(other.children || [other]);
           return new BlockInfo(this.from, this.length + other.length, this.top, this.height + other.height, children, null);
       }
   }
   var QueryType$1 = /*@__PURE__*/(function (QueryType) {
       QueryType[QueryType["ByPos"] = 0] = "ByPos";
       QueryType[QueryType["ByHeight"] = 1] = "ByHeight";
       QueryType[QueryType["ByPosNoHeight"] = 2] = "ByPosNoHeight";
   return QueryType})(QueryType$1 || (QueryType$1 = {}));
   const Epsilon = 1e-3;
   class HeightMap {
       constructor(length, // The number of characters covered
       height, // Height of this part of the document
       flags = 2 /* Flag.Outdated */) {
           this.length = length;
           this.height = height;
           this.flags = flags;
       }
       get outdated() { return (this.flags & 2 /* Flag.Outdated */) > 0; }
       set outdated(value) { this.flags = (value ? 2 /* Flag.Outdated */ : 0) | (this.flags & ~2 /* Flag.Outdated */); }
       setHeight(oracle, height) {
           if (this.height != height) {
               if (Math.abs(this.height - height) > Epsilon)
                   oracle.heightChanged = true;
               this.height = height;
           }
       }
       // Base case is to replace a leaf node, which simply builds a tree
       // from the new nodes and returns that (HeightMapBranch and
       // HeightMapGap override this to actually use from/to)
       replace(_from, _to, nodes) {
           return HeightMap.of(nodes);
       }
       // Again, these are base cases, and are overridden for branch and gap nodes.
       decomposeLeft(_to, result) { result.push(this); }
       decomposeRight(_from, result) { result.push(this); }
       applyChanges(decorations, oldDoc, oracle, changes) {
           let me = this, doc = oracle.doc;
           for (let i = changes.length - 1; i >= 0; i--) {
               let { fromA, toA, fromB, toB } = changes[i];
               let start = me.lineAt(fromA, QueryType$1.ByPosNoHeight, oracle.setDoc(oldDoc), 0, 0);
               let end = start.to >= toA ? start : me.lineAt(toA, QueryType$1.ByPosNoHeight, oracle, 0, 0);
               toB += end.to - toA;
               toA = end.to;
               while (i > 0 && start.from <= changes[i - 1].toA) {
                   fromA = changes[i - 1].fromA;
                   fromB = changes[i - 1].fromB;
                   i--;
                   if (fromA < start.from)
                       start = me.lineAt(fromA, QueryType$1.ByPosNoHeight, oracle, 0, 0);
               }
               fromB += start.from - fromA;
               fromA = start.from;
               let nodes = NodeBuilder.build(oracle.setDoc(doc), decorations, fromB, toB);
               me = me.replace(fromA, toA, nodes);
           }
           return me.updateHeight(oracle, 0);
       }
       static empty() { return new HeightMapText(0, 0); }
       // nodes uses null values to indicate the position of line breaks.
       // There are never line breaks at the start or end of the array, or
       // two line breaks next to each other, and the array isn't allowed
       // to be empty (same restrictions as return value from the builder).
       static of(nodes) {
           if (nodes.length == 1)
               return nodes[0];
           let i = 0, j = nodes.length, before = 0, after = 0;
           for (;;) {
               if (i == j) {
                   if (before > after * 2) {
                       let split = nodes[i - 1];
                       if (split.break)
                           nodes.splice(--i, 1, split.left, null, split.right);
                       else
                           nodes.splice(--i, 1, split.left, split.right);
                       j += 1 + split.break;
                       before -= split.size;
                   }
                   else if (after > before * 2) {
                       let split = nodes[j];
                       if (split.break)
                           nodes.splice(j, 1, split.left, null, split.right);
                       else
                           nodes.splice(j, 1, split.left, split.right);
                       j += 2 + split.break;
                       after -= split.size;
                   }
                   else {
                       break;
                   }
               }
               else if (before < after) {
                   let next = nodes[i++];
                   if (next)
                       before += next.size;
               }
               else {
                   let next = nodes[--j];
                   if (next)
                       after += next.size;
               }
           }
           let brk = 0;
           if (nodes[i - 1] == null) {
               brk = 1;
               i--;
           }
           else if (nodes[i] == null) {
               brk = 1;
               j++;
           }
           return new HeightMapBranch(HeightMap.of(nodes.slice(0, i)), brk, HeightMap.of(nodes.slice(j)));
       }
   }
   HeightMap.prototype.size = 1;
   class HeightMapBlock extends HeightMap {
       constructor(length, height, deco) {
           super(length, height);
           this.deco = deco;
       }
       blockAt(_height, _oracle, top, offset) {
           return new BlockInfo(offset, this.length, top, this.height, null, this.deco);
       }
       lineAt(_value, _type, oracle, top, offset) {
           return this.blockAt(0, oracle, top, offset);
       }
       forEachLine(from, to, oracle, top, offset, f) {
           if (from <= offset + this.length && to >= offset)
               f(this.blockAt(0, oracle, top, offset));
       }
       updateHeight(oracle, offset = 0, _force = false, measured) {
           if (measured && measured.from <= offset && measured.more)
               this.setHeight(oracle, measured.heights[measured.index++]);
           this.outdated = false;
           return this;
       }
       toString() { return `block(${this.length})`; }
   }
   class HeightMapText extends HeightMapBlock {
       constructor(length, height) {
           super(length, height, null);
           this.collapsed = 0; // Amount of collapsed content in the line
           this.widgetHeight = 0; // Maximum inline widget height
       }
       replace(_from, _to, nodes) {
           let node = nodes[0];
           if (nodes.length == 1 && (node instanceof HeightMapText || node instanceof HeightMapGap && (node.flags & 4 /* Flag.SingleLine */)) &&
               Math.abs(this.length - node.length) < 10) {
               if (node instanceof HeightMapGap)
                   node = new HeightMapText(node.length, this.height);
               else
                   node.height = this.height;
               if (!this.outdated)
                   node.outdated = false;
               return node;
           }
           else {
               return HeightMap.of(nodes);
           }
       }
       updateHeight(oracle, offset = 0, force = false, measured) {
           if (measured && measured.from <= offset && measured.more)
               this.setHeight(oracle, measured.heights[measured.index++]);
           else if (force || this.outdated)
               this.setHeight(oracle, Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)));
           this.outdated = false;
           return this;
       }
       toString() {
           return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
       }
   }
   class HeightMapGap extends HeightMap {
       constructor(length) { super(length, 0); }
       heightMetrics(oracle, offset) {
           let firstLine = oracle.doc.lineAt(offset).number, lastLine = oracle.doc.lineAt(offset + this.length).number;
           let lines = lastLine - firstLine + 1;
           let perLine, perChar = 0;
           if (oracle.lineWrapping) {
               let totalPerLine = Math.min(this.height, oracle.lineHeight * lines);
               perLine = totalPerLine / lines;
               if (this.length > lines + 1)
                   perChar = (this.height - totalPerLine) / (this.length - lines - 1);
           }
           else {
               perLine = this.height / lines;
           }
           return { firstLine, lastLine, perLine, perChar };
       }
       blockAt(height, oracle, top, offset) {
           let { firstLine, lastLine, perLine, perChar } = this.heightMetrics(oracle, offset);
           if (oracle.lineWrapping) {
               let guess = offset + Math.round(Math.max(0, Math.min(1, (height - top) / this.height)) * this.length);
               let line = oracle.doc.lineAt(guess), lineHeight = perLine + line.length * perChar;
               let lineTop = Math.max(top, height - lineHeight / 2);
               return new BlockInfo(line.from, line.length, lineTop, lineHeight, null, null);
           }
           else {
               let line = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top) / perLine)));
               let { from, length } = oracle.doc.line(firstLine + line);
               return new BlockInfo(from, length, top + perLine * line, perLine, null, null);
           }
       }
       lineAt(value, type, oracle, top, offset) {
           if (type == QueryType$1.ByHeight)
               return this.blockAt(value, oracle, top, offset);
           if (type == QueryType$1.ByPosNoHeight) {
               let { from, to } = oracle.doc.lineAt(value);
               return new BlockInfo(from, to - from, 0, 0, null, null);
           }
           let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset);
           let line = oracle.doc.lineAt(value), lineHeight = perLine + line.length * perChar;
           let linesAbove = line.number - firstLine;
           let lineTop = top + perLine * linesAbove + perChar * (line.from - offset - linesAbove);
           return new BlockInfo(line.from, line.length, Math.max(top, Math.min(lineTop, top + this.height - lineHeight)), lineHeight, null, null);
       }
       forEachLine(from, to, oracle, top, offset, f) {
           from = Math.max(from, offset);
           to = Math.min(to, offset + this.length);
           let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset);
           for (let pos = from, lineTop = top; pos <= to;) {
               let line = oracle.doc.lineAt(pos);
               if (pos == from) {
                   let linesAbove = line.number - firstLine;
                   lineTop += perLine * linesAbove + perChar * (from - offset - linesAbove);
               }
               let lineHeight = perLine + perChar * line.length;
               f(new BlockInfo(line.from, line.length, lineTop, lineHeight, null, null));
               lineTop += lineHeight;
               pos = line.to + 1;
           }
       }
       replace(from, to, nodes) {
           let after = this.length - to;
           if (after > 0) {
               let last = nodes[nodes.length - 1];
               if (last instanceof HeightMapGap)
                   nodes[nodes.length - 1] = new HeightMapGap(last.length + after);
               else
                   nodes.push(null, new HeightMapGap(after - 1));
           }
           if (from > 0) {
               let first = nodes[0];
               if (first instanceof HeightMapGap)
                   nodes[0] = new HeightMapGap(from + first.length);
               else
                   nodes.unshift(new HeightMapGap(from - 1), null);
           }
           return HeightMap.of(nodes);
       }
       decomposeLeft(to, result) {
           result.push(new HeightMapGap(to - 1), null);
       }
       decomposeRight(from, result) {
           result.push(null, new HeightMapGap(this.length - from - 1));
       }
       updateHeight(oracle, offset = 0, force = false, measured) {
           let end = offset + this.length;
           if (measured && measured.from <= offset + this.length && measured.more) {
               // Fill in part of this gap with measured lines. We know there
               // can't be widgets or collapsed ranges in those lines, because
               // they would already have been added to the heightmap (gaps
               // only contain plain text).
               let nodes = [], pos = Math.max(offset, measured.from), singleHeight = -1;
               if (measured.from > offset)
                   nodes.push(new HeightMapGap(measured.from - offset - 1).updateHeight(oracle, offset));
               while (pos <= end && measured.more) {
                   let len = oracle.doc.lineAt(pos).length;
                   if (nodes.length)
                       nodes.push(null);
                   let height = measured.heights[measured.index++];
                   if (singleHeight == -1)
                       singleHeight = height;
                   else if (Math.abs(height - singleHeight) >= Epsilon)
                       singleHeight = -2;
                   let line = new HeightMapText(len, height);
                   line.outdated = false;
                   nodes.push(line);
                   pos += len + 1;
               }
               if (pos <= end)
                   nodes.push(null, new HeightMapGap(end - pos).updateHeight(oracle, pos));
               let result = HeightMap.of(nodes);
               if (singleHeight < 0 || Math.abs(result.height - this.height) >= Epsilon ||
                   Math.abs(singleHeight - this.heightMetrics(oracle, offset).perLine) >= Epsilon)
                   oracle.heightChanged = true;
               return result;
           }
           else if (force || this.outdated) {
               this.setHeight(oracle, oracle.heightForGap(offset, offset + this.length));
               this.outdated = false;
           }
           return this;
       }
       toString() { return `gap(${this.length})`; }
   }
   class HeightMapBranch extends HeightMap {
       constructor(left, brk, right) {
           super(left.length + brk + right.length, left.height + right.height, brk | (left.outdated || right.outdated ? 2 /* Flag.Outdated */ : 0));
           this.left = left;
           this.right = right;
           this.size = left.size + right.size;
       }
       get break() { return this.flags & 1 /* Flag.Break */; }
       blockAt(height, oracle, top, offset) {
           let mid = top + this.left.height;
           return height < mid ? this.left.blockAt(height, oracle, top, offset)
               : this.right.blockAt(height, oracle, mid, offset + this.left.length + this.break);
       }
       lineAt(value, type, oracle, top, offset) {
           let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;
           let left = type == QueryType$1.ByHeight ? value < rightTop : value < rightOffset;
           let base = left ? this.left.lineAt(value, type, oracle, top, offset)
               : this.right.lineAt(value, type, oracle, rightTop, rightOffset);
           if (this.break || (left ? base.to < rightOffset : base.from > rightOffset))
               return base;
           let subQuery = type == QueryType$1.ByPosNoHeight ? QueryType$1.ByPosNoHeight : QueryType$1.ByPos;
           if (left)
               return base.join(this.right.lineAt(rightOffset, subQuery, oracle, rightTop, rightOffset));
           else
               return this.left.lineAt(rightOffset, subQuery, oracle, top, offset).join(base);
       }
       forEachLine(from, to, oracle, top, offset, f) {
           let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;
           if (this.break) {
               if (from < rightOffset)
                   this.left.forEachLine(from, to, oracle, top, offset, f);
               if (to >= rightOffset)
                   this.right.forEachLine(from, to, oracle, rightTop, rightOffset, f);
           }
           else {
               let mid = this.lineAt(rightOffset, QueryType$1.ByPos, oracle, top, offset);
               if (from < mid.from)
                   this.left.forEachLine(from, mid.from - 1, oracle, top, offset, f);
               if (mid.to >= from && mid.from <= to)
                   f(mid);
               if (to > mid.to)
                   this.right.forEachLine(mid.to + 1, to, oracle, rightTop, rightOffset, f);
           }
       }
       replace(from, to, nodes) {
           let rightStart = this.left.length + this.break;
           if (to < rightStart)
               return this.balanced(this.left.replace(from, to, nodes), this.right);
           if (from > this.left.length)
               return this.balanced(this.left, this.right.replace(from - rightStart, to - rightStart, nodes));
           let result = [];
           if (from > 0)
               this.decomposeLeft(from, result);
           let left = result.length;
           for (let node of nodes)
               result.push(node);
           if (from > 0)
               mergeGaps(result, left - 1);
           if (to < this.length) {
               let right = result.length;
               this.decomposeRight(to, result);
               mergeGaps(result, right);
           }
           return HeightMap.of(result);
       }
       decomposeLeft(to, result) {
           let left = this.left.length;
           if (to <= left)
               return this.left.decomposeLeft(to, result);
           result.push(this.left);
           if (this.break) {
               left++;
               if (to >= left)
                   result.push(null);
           }
           if (to > left)
               this.right.decomposeLeft(to - left, result);
       }
       decomposeRight(from, result) {
           let left = this.left.length, right = left + this.break;
           if (from >= right)
               return this.right.decomposeRight(from - right, result);
           if (from < left)
               this.left.decomposeRight(from, result);
           if (this.break && from < right)
               result.push(null);
           result.push(this.right);
       }
       balanced(left, right) {
           if (left.size > 2 * right.size || right.size > 2 * left.size)
               return HeightMap.of(this.break ? [left, null, right] : [left, right]);
           this.left = left;
           this.right = right;
           this.height = left.height + right.height;
           this.outdated = left.outdated || right.outdated;
           this.size = left.size + right.size;
           this.length = left.length + this.break + right.length;
           return this;
       }
       updateHeight(oracle, offset = 0, force = false, measured) {
           let { left, right } = this, rightStart = offset + left.length + this.break, rebalance = null;
           if (measured && measured.from <= offset + left.length && measured.more)
               rebalance = left = left.updateHeight(oracle, offset, force, measured);
           else
               left.updateHeight(oracle, offset, force);
           if (measured && measured.from <= rightStart + right.length && measured.more)
               rebalance = right = right.updateHeight(oracle, rightStart, force, measured);
           else
               right.updateHeight(oracle, rightStart, force);
           if (rebalance)
               return this.balanced(left, right);
           this.height = this.left.height + this.right.height;
           this.outdated = false;
           return this;
       }
       toString() { return this.left + (this.break ? " " : "-") + this.right; }
   }
   function mergeGaps(nodes, around) {
       let before, after;
       if (nodes[around] == null &&
           (before = nodes[around - 1]) instanceof HeightMapGap &&
           (after = nodes[around + 1]) instanceof HeightMapGap)
           nodes.splice(around - 1, 3, new HeightMapGap(before.length + 1 + after.length));
   }
   const relevantWidgetHeight = 5;
   class NodeBuilder {
       constructor(pos, oracle) {
           this.pos = pos;
           this.oracle = oracle;
           this.nodes = [];
           this.lineStart = -1;
           this.lineEnd = -1;
           this.covering = null;
           this.writtenTo = pos;
       }
       get isCovered() {
           return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
       }
       span(_from, to) {
           if (this.lineStart > -1) {
               let end = Math.min(to, this.lineEnd), last = this.nodes[this.nodes.length - 1];
               if (last instanceof HeightMapText)
                   last.length += end - this.pos;
               else if (end > this.pos || !this.isCovered)
                   this.nodes.push(new HeightMapText(end - this.pos, -1));
               this.writtenTo = end;
               if (to > end) {
                   this.nodes.push(null);
                   this.writtenTo++;
                   this.lineStart = -1;
               }
           }
           this.pos = to;
       }
       point(from, to, deco) {
           if (from < to || deco.heightRelevant) {
               let height = deco.widget ? deco.widget.estimatedHeight : 0;
               if (height < 0)
                   height = this.oracle.lineHeight;
               let len = to - from;
               if (deco.block) {
                   this.addBlock(new HeightMapBlock(len, height, deco));
               }
               else if (len || height >= relevantWidgetHeight) {
                   this.addLineDeco(height, len);
               }
           }
           else if (to > from) {
               this.span(from, to);
           }
           if (this.lineEnd > -1 && this.lineEnd < this.pos)
               this.lineEnd = this.oracle.doc.lineAt(this.pos).to;
       }
       enterLine() {
           if (this.lineStart > -1)
               return;
           let { from, to } = this.oracle.doc.lineAt(this.pos);
           this.lineStart = from;
           this.lineEnd = to;
           if (this.writtenTo < from) {
               if (this.writtenTo < from - 1 || this.nodes[this.nodes.length - 1] == null)
                   this.nodes.push(this.blankContent(this.writtenTo, from - 1));
               this.nodes.push(null);
           }
           if (this.pos > from)
               this.nodes.push(new HeightMapText(this.pos - from, -1));
           this.writtenTo = this.pos;
       }
       blankContent(from, to) {
           let gap = new HeightMapGap(to - from);
           if (this.oracle.doc.lineAt(from).to == to)
               gap.flags |= 4 /* Flag.SingleLine */;
           return gap;
       }
       ensureLine() {
           this.enterLine();
           let last = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
           if (last instanceof HeightMapText)
               return last;
           let line = new HeightMapText(0, -1);
           this.nodes.push(line);
           return line;
       }
       addBlock(block) {
           var _a;
           this.enterLine();
           let type = (_a = block.deco) === null || _a === void 0 ? void 0 : _a.type;
           if (type == BlockType.WidgetAfter && !this.isCovered)
               this.ensureLine();
           this.nodes.push(block);
           this.writtenTo = this.pos = this.pos + block.length;
           if (type != BlockType.WidgetBefore)
               this.covering = block;
       }
       addLineDeco(height, length) {
           let line = this.ensureLine();
           line.length += length;
           line.collapsed += length;
           line.widgetHeight = Math.max(line.widgetHeight, height);
           this.writtenTo = this.pos = this.pos + length;
       }
       finish(from) {
           let last = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
           if (this.lineStart > -1 && !(last instanceof HeightMapText) && !this.isCovered)
               this.nodes.push(new HeightMapText(0, -1));
           else if (this.writtenTo < this.pos || last == null)
               this.nodes.push(this.blankContent(this.writtenTo, this.pos));
           let pos = from;
           for (let node of this.nodes) {
               if (node instanceof HeightMapText)
                   node.updateHeight(this.oracle, pos);
               pos += node ? node.length : 1;
           }
           return this.nodes;
       }
       // Always called with a region that on both sides either stretches
       // to a line break or the end of the document.
       // The returned array uses null to indicate line breaks, but never
       // starts or ends in a line break, or has multiple line breaks next
       // to each other.
       static build(oracle, decorations, from, to) {
           let builder = new NodeBuilder(from, oracle);
           RangeSet.spans(decorations, from, to, builder, 0);
           return builder.finish(from);
       }
   }
   function heightRelevantDecoChanges(a, b, diff) {
       let comp = new DecorationComparator;
       RangeSet.compare(a, b, diff, comp, 0);
       return comp.changes;
   }
   class DecorationComparator {
       constructor() {
           this.changes = [];
       }
       compareRange() { }
       comparePoint(from, to, a, b) {
           if (from < to || a && a.heightRelevant || b && b.heightRelevant)
               addRange(from, to, this.changes, 5);
       }
   }

   function visiblePixelRange(dom, paddingTop) {
       let rect = dom.getBoundingClientRect();
       let doc = dom.ownerDocument, win = doc.defaultView || window;
       let left = Math.max(0, rect.left), right = Math.min(win.innerWidth, rect.right);
       let top = Math.max(0, rect.top), bottom = Math.min(win.innerHeight, rect.bottom);
       for (let parent = dom.parentNode; parent && parent != doc.body;) {
           if (parent.nodeType == 1) {
               let elt = parent;
               let style = window.getComputedStyle(elt);
               if ((elt.scrollHeight > elt.clientHeight || elt.scrollWidth > elt.clientWidth) &&
                   style.overflow != "visible") {
                   let parentRect = elt.getBoundingClientRect();
                   left = Math.max(left, parentRect.left);
                   right = Math.min(right, parentRect.right);
                   top = Math.max(top, parentRect.top);
                   bottom = parent == dom.parentNode ? parentRect.bottom : Math.min(bottom, parentRect.bottom);
               }
               parent = style.position == "absolute" || style.position == "fixed" ? elt.offsetParent : elt.parentNode;
           }
           else if (parent.nodeType == 11) { // Shadow root
               parent = parent.host;
           }
           else {
               break;
           }
       }
       return { left: left - rect.left, right: Math.max(left, right) - rect.left,
           top: top - (rect.top + paddingTop), bottom: Math.max(top, bottom) - (rect.top + paddingTop) };
   }
   function fullPixelRange(dom, paddingTop) {
       let rect = dom.getBoundingClientRect();
       return { left: 0, right: rect.right - rect.left,
           top: paddingTop, bottom: rect.bottom - (rect.top + paddingTop) };
   }
   // Line gaps are placeholder widgets used to hide pieces of overlong
   // lines within the viewport, as a kludge to keep the editor
   // responsive when a ridiculously long line is loaded into it.
   class LineGap {
       constructor(from, to, size) {
           this.from = from;
           this.to = to;
           this.size = size;
       }
       static same(a, b) {
           if (a.length != b.length)
               return false;
           for (let i = 0; i < a.length; i++) {
               let gA = a[i], gB = b[i];
               if (gA.from != gB.from || gA.to != gB.to || gA.size != gB.size)
                   return false;
           }
           return true;
       }
       draw(wrapping) {
           return Decoration.replace({ widget: new LineGapWidget(this.size, wrapping) }).range(this.from, this.to);
       }
   }
   class LineGapWidget extends WidgetType {
       constructor(size, vertical) {
           super();
           this.size = size;
           this.vertical = vertical;
       }
       eq(other) { return other.size == this.size && other.vertical == this.vertical; }
       toDOM() {
           let elt = document.createElement("div");
           if (this.vertical) {
               elt.style.height = this.size + "px";
           }
           else {
               elt.style.width = this.size + "px";
               elt.style.height = "2px";
               elt.style.display = "inline-block";
           }
           return elt;
       }
       get estimatedHeight() { return this.vertical ? this.size : -1; }
   }
   class ViewState {
       constructor(state) {
           this.state = state;
           // These are contentDOM-local coordinates
           this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 };
           this.inView = true;
           this.paddingTop = 0;
           this.paddingBottom = 0;
           this.contentDOMWidth = 0;
           this.contentDOMHeight = 0;
           this.editorHeight = 0;
           this.editorWidth = 0;
           // See VP.MaxDOMHeight
           this.scaler = IdScaler;
           this.scrollTarget = null;
           // Briefly set to true when printing, to disable viewport limiting
           this.printing = false;
           // Flag set when editor content was redrawn, so that the next
           // measure stage knows it must read DOM layout
           this.mustMeasureContent = true;
           this.defaultTextDirection = Direction.LTR;
           this.visibleRanges = [];
           // Cursor 'assoc' is only significant when the cursor is on a line
           // wrap point, where it must stick to the character that it is
           // associated with. Since browsers don't provide a reasonable
           // interface to set or query this, when a selection is set that
           // might cause this to be significant, this flag is set. The next
           // measure phase will check whether the cursor is on a line-wrapping
           // boundary and, if so, reset it to make sure it is positioned in
           // the right place.
           this.mustEnforceCursorAssoc = false;
           let guessWrapping = state.facet(contentAttributes).some(v => typeof v != "function" && v.class == "cm-lineWrapping");
           this.heightOracle = new HeightOracle(guessWrapping);
           this.stateDeco = state.facet(decorations).filter(d => typeof d != "function");
           this.heightMap = HeightMap.empty().applyChanges(this.stateDeco, Text$1.empty, this.heightOracle.setDoc(state.doc), [new ChangedRange(0, 0, 0, state.doc.length)]);
           this.viewport = this.getViewport(0, null);
           this.updateViewportLines();
           this.updateForViewport();
           this.lineGaps = this.ensureLineGaps([]);
           this.lineGapDeco = Decoration.set(this.lineGaps.map(gap => gap.draw(false)));
           this.computeVisibleRanges();
       }
       updateForViewport() {
           let viewports = [this.viewport], { main } = this.state.selection;
           for (let i = 0; i <= 1; i++) {
               let pos = i ? main.head : main.anchor;
               if (!viewports.some(({ from, to }) => pos >= from && pos <= to)) {
                   let { from, to } = this.lineBlockAt(pos);
                   viewports.push(new Viewport(from, to));
               }
           }
           this.viewports = viewports.sort((a, b) => a.from - b.from);
           this.scaler = this.heightMap.height <= 7000000 /* VP.MaxDOMHeight */ ? IdScaler :
               new BigScaler(this.heightOracle, this.heightMap, this.viewports);
       }
       updateViewportLines() {
           this.viewportLines = [];
           this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.heightOracle.setDoc(this.state.doc), 0, 0, block => {
               this.viewportLines.push(this.scaler.scale == 1 ? block : scaleBlock(block, this.scaler));
           });
       }
       update(update, scrollTarget = null) {
           this.state = update.state;
           let prevDeco = this.stateDeco;
           this.stateDeco = this.state.facet(decorations).filter(d => typeof d != "function");
           let contentChanges = update.changedRanges;
           let heightChanges = ChangedRange.extendWithRanges(contentChanges, heightRelevantDecoChanges(prevDeco, this.stateDeco, update ? update.changes : ChangeSet.empty(this.state.doc.length)));
           let prevHeight = this.heightMap.height;
           this.heightMap = this.heightMap.applyChanges(this.stateDeco, update.startState.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);
           if (this.heightMap.height != prevHeight)
               update.flags |= 2 /* UpdateFlag.Height */;
           let viewport = heightChanges.length ? this.mapViewport(this.viewport, update.changes) : this.viewport;
           if (scrollTarget && (scrollTarget.range.head < viewport.from || scrollTarget.range.head > viewport.to) ||
               !this.viewportIsAppropriate(viewport))
               viewport = this.getViewport(0, scrollTarget);
           let updateLines = !update.changes.empty || (update.flags & 2 /* UpdateFlag.Height */) ||
               viewport.from != this.viewport.from || viewport.to != this.viewport.to;
           this.viewport = viewport;
           this.updateForViewport();
           if (updateLines)
               this.updateViewportLines();
           if (this.lineGaps.length || this.viewport.to - this.viewport.from > (2000 /* LG.Margin */ << 1))
               this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, update.changes)));
           update.flags |= this.computeVisibleRanges();
           if (scrollTarget)
               this.scrollTarget = scrollTarget;
           if (!this.mustEnforceCursorAssoc && update.selectionSet && update.view.lineWrapping &&
               update.state.selection.main.empty && update.state.selection.main.assoc &&
               !update.state.facet(nativeSelectionHidden))
               this.mustEnforceCursorAssoc = true;
       }
       measure(view) {
           let dom = view.contentDOM, style = window.getComputedStyle(dom);
           let oracle = this.heightOracle;
           let whiteSpace = style.whiteSpace;
           this.defaultTextDirection = style.direction == "rtl" ? Direction.RTL : Direction.LTR;
           let refresh = this.heightOracle.mustRefreshForWrapping(whiteSpace);
           let domRect = dom.getBoundingClientRect();
           let measureContent = refresh || this.mustMeasureContent || this.contentDOMHeight != domRect.height;
           this.contentDOMHeight = domRect.height;
           this.mustMeasureContent = false;
           let result = 0, bias = 0;
           // Vertical padding
           let paddingTop = parseInt(style.paddingTop) || 0, paddingBottom = parseInt(style.paddingBottom) || 0;
           if (this.paddingTop != paddingTop || this.paddingBottom != paddingBottom) {
               this.paddingTop = paddingTop;
               this.paddingBottom = paddingBottom;
               result |= 8 /* UpdateFlag.Geometry */ | 2 /* UpdateFlag.Height */;
           }
           if (this.editorWidth != view.scrollDOM.clientWidth) {
               if (oracle.lineWrapping)
                   measureContent = true;
               this.editorWidth = view.scrollDOM.clientWidth;
               result |= 8 /* UpdateFlag.Geometry */;
           }
           // Pixel viewport
           let pixelViewport = (this.printing ? fullPixelRange : visiblePixelRange)(dom, this.paddingTop);
           let dTop = pixelViewport.top - this.pixelViewport.top, dBottom = pixelViewport.bottom - this.pixelViewport.bottom;
           this.pixelViewport = pixelViewport;
           let inView = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
           if (inView != this.inView) {
               this.inView = inView;
               if (inView)
                   measureContent = true;
           }
           if (!this.inView && !this.scrollTarget)
               return 0;
           let contentWidth = domRect.width;
           if (this.contentDOMWidth != contentWidth || this.editorHeight != view.scrollDOM.clientHeight) {
               this.contentDOMWidth = domRect.width;
               this.editorHeight = view.scrollDOM.clientHeight;
               result |= 8 /* UpdateFlag.Geometry */;
           }
           if (measureContent) {
               let lineHeights = view.docView.measureVisibleLineHeights(this.viewport);
               if (oracle.mustRefreshForHeights(lineHeights))
                   refresh = true;
               if (refresh || oracle.lineWrapping && Math.abs(contentWidth - this.contentDOMWidth) > oracle.charWidth) {
                   let { lineHeight, charWidth, textHeight } = view.docView.measureTextSize();
                   refresh = lineHeight > 0 && oracle.refresh(whiteSpace, lineHeight, charWidth, textHeight, contentWidth / charWidth, lineHeights);
                   if (refresh) {
                       view.docView.minWidth = 0;
                       result |= 8 /* UpdateFlag.Geometry */;
                   }
               }
               if (dTop > 0 && dBottom > 0)
                   bias = Math.max(dTop, dBottom);
               else if (dTop < 0 && dBottom < 0)
                   bias = Math.min(dTop, dBottom);
               oracle.heightChanged = false;
               for (let vp of this.viewports) {
                   let heights = vp.from == this.viewport.from ? lineHeights : view.docView.measureVisibleLineHeights(vp);
                   this.heightMap = (refresh ? HeightMap.empty().applyChanges(this.stateDeco, Text$1.empty, this.heightOracle, [new ChangedRange(0, 0, 0, view.state.doc.length)]) : this.heightMap).updateHeight(oracle, 0, refresh, new MeasuredHeights(vp.from, heights));
               }
               if (oracle.heightChanged)
                   result |= 2 /* UpdateFlag.Height */;
           }
           let viewportChange = !this.viewportIsAppropriate(this.viewport, bias) ||
               this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from ||
                   this.scrollTarget.range.head > this.viewport.to);
           if (viewportChange)
               this.viewport = this.getViewport(bias, this.scrollTarget);
           this.updateForViewport();
           if ((result & 2 /* UpdateFlag.Height */) || viewportChange)
               this.updateViewportLines();
           if (this.lineGaps.length || this.viewport.to - this.viewport.from > (2000 /* LG.Margin */ << 1))
               this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps, view));
           result |= this.computeVisibleRanges();
           if (this.mustEnforceCursorAssoc) {
               this.mustEnforceCursorAssoc = false;
               // This is done in the read stage, because moving the selection
               // to a line end is going to trigger a layout anyway, so it
               // can't be a pure write. It should be rare that it does any
               // writing.
               view.docView.enforceCursorAssoc();
           }
           return result;
       }
       get visibleTop() { return this.scaler.fromDOM(this.pixelViewport.top); }
       get visibleBottom() { return this.scaler.fromDOM(this.pixelViewport.bottom); }
       getViewport(bias, scrollTarget) {
           // This will divide VP.Margin between the top and the
           // bottom, depending on the bias (the change in viewport position
           // since the last update). It'll hold a number between 0 and 1
           let marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / 1000 /* VP.Margin */ / 2));
           let map = this.heightMap, oracle = this.heightOracle;
           let { visibleTop, visibleBottom } = this;
           let viewport = new Viewport(map.lineAt(visibleTop - marginTop * 1000 /* VP.Margin */, QueryType$1.ByHeight, oracle, 0, 0).from, map.lineAt(visibleBottom + (1 - marginTop) * 1000 /* VP.Margin */, QueryType$1.ByHeight, oracle, 0, 0).to);
           // If scrollTarget is given, make sure the viewport includes that position
           if (scrollTarget) {
               let { head } = scrollTarget.range;
               if (head < viewport.from || head > viewport.to) {
                   let viewHeight = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top);
                   let block = map.lineAt(head, QueryType$1.ByPos, oracle, 0, 0), topPos;
                   if (scrollTarget.y == "center")
                       topPos = (block.top + block.bottom) / 2 - viewHeight / 2;
                   else if (scrollTarget.y == "start" || scrollTarget.y == "nearest" && head < viewport.from)
                       topPos = block.top;
                   else
                       topPos = block.bottom - viewHeight;
                   viewport = new Viewport(map.lineAt(topPos - 1000 /* VP.Margin */ / 2, QueryType$1.ByHeight, oracle, 0, 0).from, map.lineAt(topPos + viewHeight + 1000 /* VP.Margin */ / 2, QueryType$1.ByHeight, oracle, 0, 0).to);
               }
           }
           return viewport;
       }
       mapViewport(viewport, changes) {
           let from = changes.mapPos(viewport.from, -1), to = changes.mapPos(viewport.to, 1);
           return new Viewport(this.heightMap.lineAt(from, QueryType$1.ByPos, this.heightOracle, 0, 0).from, this.heightMap.lineAt(to, QueryType$1.ByPos, this.heightOracle, 0, 0).to);
       }
       // Checks if a given viewport covers the visible part of the
       // document and not too much beyond that.
       viewportIsAppropriate({ from, to }, bias = 0) {
           if (!this.inView)
               return true;
           let { top } = this.heightMap.lineAt(from, QueryType$1.ByPos, this.heightOracle, 0, 0);
           let { bottom } = this.heightMap.lineAt(to, QueryType$1.ByPos, this.heightOracle, 0, 0);
           let { visibleTop, visibleBottom } = this;
           return (from == 0 || top <= visibleTop - Math.max(10 /* VP.MinCoverMargin */, Math.min(-bias, 250 /* VP.MaxCoverMargin */))) &&
               (to == this.state.doc.length ||
                   bottom >= visibleBottom + Math.max(10 /* VP.MinCoverMargin */, Math.min(bias, 250 /* VP.MaxCoverMargin */))) &&
               (top > visibleTop - 2 * 1000 /* VP.Margin */ && bottom < visibleBottom + 2 * 1000 /* VP.Margin */);
       }
       mapLineGaps(gaps, changes) {
           if (!gaps.length || changes.empty)
               return gaps;
           let mapped = [];
           for (let gap of gaps)
               if (!changes.touchesRange(gap.from, gap.to))
                   mapped.push(new LineGap(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size));
           return mapped;
       }
       // Computes positions in the viewport where the start or end of a
       // line should be hidden, trying to reuse existing line gaps when
       // appropriate to avoid unneccesary redraws.
       // Uses crude character-counting for the positioning and sizing,
       // since actual DOM coordinates aren't always available and
       // predictable. Relies on generous margins (see LG.Margin) to hide
       // the artifacts this might produce from the user.
       ensureLineGaps(current, mayMeasure) {
           let wrapping = this.heightOracle.lineWrapping;
           let margin = wrapping ? 10000 /* LG.MarginWrap */ : 2000 /* LG.Margin */, halfMargin = margin >> 1, doubleMargin = margin << 1;
           // The non-wrapping logic won't work at all in predominantly right-to-left text.
           if (this.defaultTextDirection != Direction.LTR && !wrapping)
               return [];
           let gaps = [];
           let addGap = (from, to, line, structure) => {
               if (to - from < halfMargin)
                   return;
               let sel = this.state.selection.main, avoid = [sel.from];
               if (!sel.empty)
                   avoid.push(sel.to);
               for (let pos of avoid) {
                   if (pos > from && pos < to) {
                       addGap(from, pos - 10 /* LG.SelectionMargin */, line, structure);
                       addGap(pos + 10 /* LG.SelectionMargin */, to, line, structure);
                       return;
                   }
               }
               let gap = find$1(current, gap => gap.from >= line.from && gap.to <= line.to &&
                   Math.abs(gap.from - from) < halfMargin && Math.abs(gap.to - to) < halfMargin &&
                   !avoid.some(pos => gap.from < pos && gap.to > pos));
               if (!gap) {
                   // When scrolling down, snap gap ends to line starts to avoid shifts in wrapping
                   if (to < line.to && mayMeasure && wrapping &&
                       mayMeasure.visibleRanges.some(r => r.from <= to && r.to >= to)) {
                       let lineStart = mayMeasure.moveToLineBoundary(EditorSelection.cursor(to), false, true).head;
                       if (lineStart > from)
                           to = lineStart;
                   }
                   gap = new LineGap(from, to, this.gapSize(line, from, to, structure));
               }
               gaps.push(gap);
           };
           for (let line of this.viewportLines) {
               if (line.length < doubleMargin)
                   continue;
               let structure = lineStructure(line.from, line.to, this.stateDeco);
               if (structure.total < doubleMargin)
                   continue;
               let target = this.scrollTarget ? this.scrollTarget.range.head : null;
               let viewFrom, viewTo;
               if (wrapping) {
                   let marginHeight = (margin / this.heightOracle.lineLength) * this.heightOracle.lineHeight;
                   let top, bot;
                   if (target != null) {
                       let targetFrac = findFraction(structure, target);
                       let spaceFrac = ((this.visibleBottom - this.visibleTop) / 2 + marginHeight) / line.height;
                       top = targetFrac - spaceFrac;
                       bot = targetFrac + spaceFrac;
                   }
                   else {
                       top = (this.visibleTop - line.top - marginHeight) / line.height;
                       bot = (this.visibleBottom - line.top + marginHeight) / line.height;
                   }
                   viewFrom = findPosition(structure, top);
                   viewTo = findPosition(structure, bot);
               }
               else {
                   let totalWidth = structure.total * this.heightOracle.charWidth;
                   let marginWidth = margin * this.heightOracle.charWidth;
                   let left, right;
                   if (target != null) {
                       let targetFrac = findFraction(structure, target);
                       let spaceFrac = ((this.pixelViewport.right - this.pixelViewport.left) / 2 + marginWidth) / totalWidth;
                       left = targetFrac - spaceFrac;
                       right = targetFrac + spaceFrac;
                   }
                   else {
                       left = (this.pixelViewport.left - marginWidth) / totalWidth;
                       right = (this.pixelViewport.right + marginWidth) / totalWidth;
                   }
                   viewFrom = findPosition(structure, left);
                   viewTo = findPosition(structure, right);
               }
               if (viewFrom > line.from)
                   addGap(line.from, viewFrom, line, structure);
               if (viewTo < line.to)
                   addGap(viewTo, line.to, line, structure);
           }
           return gaps;
       }
       gapSize(line, from, to, structure) {
           let fraction = findFraction(structure, to) - findFraction(structure, from);
           if (this.heightOracle.lineWrapping) {
               return line.height * fraction;
           }
           else {
               return structure.total * this.heightOracle.charWidth * fraction;
           }
       }
       updateLineGaps(gaps) {
           if (!LineGap.same(gaps, this.lineGaps)) {
               this.lineGaps = gaps;
               this.lineGapDeco = Decoration.set(gaps.map(gap => gap.draw(this.heightOracle.lineWrapping)));
           }
       }
       computeVisibleRanges() {
           let deco = this.stateDeco;
           if (this.lineGaps.length)
               deco = deco.concat(this.lineGapDeco);
           let ranges = [];
           RangeSet.spans(deco, this.viewport.from, this.viewport.to, {
               span(from, to) { ranges.push({ from, to }); },
               point() { }
           }, 20);
           let changed = ranges.length != this.visibleRanges.length ||
               this.visibleRanges.some((r, i) => r.from != ranges[i].from || r.to != ranges[i].to);
           this.visibleRanges = ranges;
           return changed ? 4 /* UpdateFlag.Viewport */ : 0;
       }
       lineBlockAt(pos) {
           return (pos >= this.viewport.from && pos <= this.viewport.to && this.viewportLines.find(b => b.from <= pos && b.to >= pos)) ||
               scaleBlock(this.heightMap.lineAt(pos, QueryType$1.ByPos, this.heightOracle, 0, 0), this.scaler);
       }
       lineBlockAtHeight(height) {
           return scaleBlock(this.heightMap.lineAt(this.scaler.fromDOM(height), QueryType$1.ByHeight, this.heightOracle, 0, 0), this.scaler);
       }
       elementAtHeight(height) {
           return scaleBlock(this.heightMap.blockAt(this.scaler.fromDOM(height), this.heightOracle, 0, 0), this.scaler);
       }
       get docHeight() {
           return this.scaler.toDOM(this.heightMap.height);
       }
       get contentHeight() {
           return this.docHeight + this.paddingTop + this.paddingBottom;
       }
   }
   class Viewport {
       constructor(from, to) {
           this.from = from;
           this.to = to;
       }
   }
   function lineStructure(from, to, stateDeco) {
       let ranges = [], pos = from, total = 0;
       RangeSet.spans(stateDeco, from, to, {
           span() { },
           point(from, to) {
               if (from > pos) {
                   ranges.push({ from: pos, to: from });
                   total += from - pos;
               }
               pos = to;
           }
       }, 20); // We're only interested in collapsed ranges of a significant size
       if (pos < to) {
           ranges.push({ from: pos, to });
           total += to - pos;
       }
       return { total, ranges };
   }
   function findPosition({ total, ranges }, ratio) {
       if (ratio <= 0)
           return ranges[0].from;
       if (ratio >= 1)
           return ranges[ranges.length - 1].to;
       let dist = Math.floor(total * ratio);
       for (let i = 0;; i++) {
           let { from, to } = ranges[i], size = to - from;
           if (dist <= size)
               return from + dist;
           dist -= size;
       }
   }
   function findFraction(structure, pos) {
       let counted = 0;
       for (let { from, to } of structure.ranges) {
           if (pos <= to) {
               counted += pos - from;
               break;
           }
           counted += to - from;
       }
       return counted / structure.total;
   }
   function find$1(array, f) {
       for (let val of array)
           if (f(val))
               return val;
       return undefined;
   }
   // Don't scale when the document height is within the range of what
   // the DOM can handle.
   const IdScaler = {
       toDOM(n) { return n; },
       fromDOM(n) { return n; },
       scale: 1
   };
   // When the height is too big (> VP.MaxDOMHeight), scale down the
   // regions outside the viewports so that the total height is
   // VP.MaxDOMHeight.
   class BigScaler {
       constructor(oracle, heightMap, viewports) {
           let vpHeight = 0, base = 0, domBase = 0;
           this.viewports = viewports.map(({ from, to }) => {
               let top = heightMap.lineAt(from, QueryType$1.ByPos, oracle, 0, 0).top;
               let bottom = heightMap.lineAt(to, QueryType$1.ByPos, oracle, 0, 0).bottom;
               vpHeight += bottom - top;
               return { from, to, top, bottom, domTop: 0, domBottom: 0 };
           });
           this.scale = (7000000 /* VP.MaxDOMHeight */ - vpHeight) / (heightMap.height - vpHeight);
           for (let obj of this.viewports) {
               obj.domTop = domBase + (obj.top - base) * this.scale;
               domBase = obj.domBottom = obj.domTop + (obj.bottom - obj.top);
               base = obj.bottom;
           }
       }
       toDOM(n) {
           for (let i = 0, base = 0, domBase = 0;; i++) {
               let vp = i < this.viewports.length ? this.viewports[i] : null;
               if (!vp || n < vp.top)
                   return domBase + (n - base) * this.scale;
               if (n <= vp.bottom)
                   return vp.domTop + (n - vp.top);
               base = vp.bottom;
               domBase = vp.domBottom;
           }
       }
       fromDOM(n) {
           for (let i = 0, base = 0, domBase = 0;; i++) {
               let vp = i < this.viewports.length ? this.viewports[i] : null;
               if (!vp || n < vp.domTop)
                   return base + (n - domBase) / this.scale;
               if (n <= vp.domBottom)
                   return vp.top + (n - vp.domTop);
               base = vp.bottom;
               domBase = vp.domBottom;
           }
       }
   }
   function scaleBlock(block, scaler) {
       if (scaler.scale == 1)
           return block;
       let bTop = scaler.toDOM(block.top), bBottom = scaler.toDOM(block.bottom);
       return new BlockInfo(block.from, block.length, bTop, bBottom - bTop, block.children && block.children.map(b => scaleBlock(b, scaler)), block.deco);
   }

   const theme = /*@__PURE__*/Facet.define({ combine: strs => strs.join(" ") });
   const darkTheme = /*@__PURE__*/Facet.define({ combine: values => values.indexOf(true) > -1 });
   const baseThemeID = /*@__PURE__*/StyleModule.newName(), baseLightID = /*@__PURE__*/StyleModule.newName(), baseDarkID = /*@__PURE__*/StyleModule.newName();
   const lightDarkIDs = { "&light": "." + baseLightID, "&dark": "." + baseDarkID };
   function buildTheme(main, spec, scopes) {
       return new StyleModule(spec, {
           finish(sel) {
               return /&/.test(sel) ? sel.replace(/&\w*/, m => {
                   if (m == "&")
                       return main;
                   if (!scopes || !scopes[m])
                       throw new RangeError(`Unsupported selector: ${m}`);
                   return scopes[m];
               }) : main + " " + sel;
           }
       });
   }
   const baseTheme$1$1 = /*@__PURE__*/buildTheme("." + baseThemeID, {
       "&": {
           position: "relative !important",
           boxSizing: "border-box",
           "&.cm-focused": {
               // Provide a simple default outline to make sure a focused
               // editor is visually distinct. Can't leave the default behavior
               // because that will apply to the content element, which is
               // inside the scrollable container and doesn't include the
               // gutters. We also can't use an 'auto' outline, since those
               // are, for some reason, drawn behind the element content, which
               // will cause things like the active line background to cover
               // the outline (#297).
               outline: "1px dotted #212121"
           },
           display: "flex !important",
           flexDirection: "column"
       },
       ".cm-scroller": {
           display: "flex !important",
           alignItems: "flex-start !important",
           fontFamily: "monospace",
           lineHeight: 1.4,
           height: "100%",
           overflowX: "auto",
           position: "relative",
           zIndex: 0
       },
       ".cm-content": {
           margin: 0,
           flexGrow: 2,
           flexShrink: 0,
           display: "block",
           whiteSpace: "pre",
           wordWrap: "normal",
           boxSizing: "border-box",
           padding: "4px 0",
           outline: "none",
           "&[contenteditable=true]": {
               WebkitUserModify: "read-write-plaintext-only",
           }
       },
       ".cm-lineWrapping": {
           whiteSpace_fallback: "pre-wrap",
           whiteSpace: "break-spaces",
           wordBreak: "break-word",
           overflowWrap: "anywhere",
           flexShrink: 1
       },
       "&light .cm-content": { caretColor: "black" },
       "&dark .cm-content": { caretColor: "white" },
       ".cm-line": {
           display: "block",
           padding: "0 2px 0 6px"
       },
       ".cm-layer": {
           position: "absolute",
           left: 0,
           top: 0,
           contain: "size style",
           "& > *": {
               position: "absolute"
           }
       },
       "&light .cm-selectionBackground": {
           background: "#d9d9d9"
       },
       "&dark .cm-selectionBackground": {
           background: "#222"
       },
       "&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
           background: "#d7d4f0"
       },
       "&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
           background: "#233"
       },
       ".cm-cursorLayer": {
           pointerEvents: "none"
       },
       "&.cm-focused > .cm-scroller > .cm-cursorLayer": {
           animation: "steps(1) cm-blink 1.2s infinite"
       },
       // Two animations defined so that we can switch between them to
       // restart the animation without forcing another style
       // recomputation.
       "@keyframes cm-blink": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
       "@keyframes cm-blink2": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
       ".cm-cursor, .cm-dropCursor": {
           borderLeft: "1.2px solid black",
           marginLeft: "-0.6px",
           pointerEvents: "none",
       },
       ".cm-cursor": {
           display: "none"
       },
       "&dark .cm-cursor": {
           borderLeftColor: "#444"
       },
       ".cm-dropCursor": {
           position: "absolute"
       },
       "&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor": {
           display: "block"
       },
       "&light .cm-activeLine": { backgroundColor: "#cceeff44" },
       "&dark .cm-activeLine": { backgroundColor: "#99eeff33" },
       "&light .cm-specialChar": { color: "red" },
       "&dark .cm-specialChar": { color: "#f78" },
       ".cm-gutters": {
           flexShrink: 0,
           display: "flex",
           height: "100%",
           boxSizing: "border-box",
           left: 0,
           zIndex: 200
       },
       "&light .cm-gutters": {
           backgroundColor: "#f5f5f5",
           color: "#6c6c6c",
           borderRight: "1px solid #ddd"
       },
       "&dark .cm-gutters": {
           backgroundColor: "#333338",
           color: "#ccc"
       },
       ".cm-gutter": {
           display: "flex !important",
           flexDirection: "column",
           flexShrink: 0,
           boxSizing: "border-box",
           minHeight: "100%",
           overflow: "hidden"
       },
       ".cm-gutterElement": {
           boxSizing: "border-box"
       },
       ".cm-lineNumbers .cm-gutterElement": {
           padding: "0 3px 0 5px",
           minWidth: "20px",
           textAlign: "right",
           whiteSpace: "nowrap"
       },
       "&light .cm-activeLineGutter": {
           backgroundColor: "#e2f2ff"
       },
       "&dark .cm-activeLineGutter": {
           backgroundColor: "#222227"
       },
       ".cm-panels": {
           boxSizing: "border-box",
           position: "sticky",
           left: 0,
           right: 0
       },
       "&light .cm-panels": {
           backgroundColor: "#f5f5f5",
           color: "black"
       },
       "&light .cm-panels-top": {
           borderBottom: "1px solid #ddd"
       },
       "&light .cm-panels-bottom": {
           borderTop: "1px solid #ddd"
       },
       "&dark .cm-panels": {
           backgroundColor: "#333338",
           color: "white"
       },
       ".cm-tab": {
           display: "inline-block",
           overflow: "hidden",
           verticalAlign: "bottom"
       },
       ".cm-widgetBuffer": {
           verticalAlign: "text-top",
           height: "1em",
           width: 0,
           display: "inline"
       },
       ".cm-placeholder": {
           color: "#888",
           display: "inline-block",
           verticalAlign: "top",
       },
       ".cm-highlightSpace:before": {
           content: "attr(data-display)",
           position: "absolute",
           pointerEvents: "none",
           color: "#888"
       },
       ".cm-highlightTab": {
           backgroundImage: `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20"><path stroke="%23888" stroke-width="1" fill="none" d="M1 10H196L190 5M190 15L196 10M197 4L197 16"/></svg>')`,
           backgroundSize: "auto 100%",
           backgroundPosition: "right 90%",
           backgroundRepeat: "no-repeat"
       },
       ".cm-trailingSpace": {
           backgroundColor: "#ff332255"
       },
       ".cm-button": {
           verticalAlign: "middle",
           color: "inherit",
           fontSize: "70%",
           padding: ".2em 1em",
           borderRadius: "1px"
       },
       "&light .cm-button": {
           backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
           border: "1px solid #888",
           "&:active": {
               backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
           }
       },
       "&dark .cm-button": {
           backgroundImage: "linear-gradient(#393939, #111)",
           border: "1px solid #888",
           "&:active": {
               backgroundImage: "linear-gradient(#111, #333)"
           }
       },
       ".cm-textfield": {
           verticalAlign: "middle",
           color: "inherit",
           fontSize: "70%",
           border: "1px solid silver",
           padding: ".2em .5em"
       },
       "&light .cm-textfield": {
           backgroundColor: "white"
       },
       "&dark .cm-textfield": {
           border: "1px solid #555",
           backgroundColor: "inherit"
       }
   }, lightDarkIDs);

   class DOMChange {
       constructor(view, start, end, typeOver) {
           this.typeOver = typeOver;
           this.bounds = null;
           this.text = "";
           let { impreciseHead: iHead, impreciseAnchor: iAnchor } = view.docView;
           if (view.state.readOnly && start > -1) {
               // Ignore changes when the editor is read-only
               this.newSel = null;
           }
           else if (start > -1 && (this.bounds = view.docView.domBoundsAround(start, end, 0))) {
               let selPoints = iHead || iAnchor ? [] : selectionPoints(view);
               let reader = new DOMReader(selPoints, view.state);
               reader.readRange(this.bounds.startDOM, this.bounds.endDOM);
               this.text = reader.text;
               this.newSel = selectionFromPoints(selPoints, this.bounds.from);
           }
           else {
               let domSel = view.observer.selectionRange;
               let head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset ||
                   !contains$1(view.contentDOM, domSel.focusNode)
                   ? view.state.selection.main.head
                   : view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);
               let anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset ||
                   !contains$1(view.contentDOM, domSel.anchorNode)
                   ? view.state.selection.main.anchor
                   : view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);
               this.newSel = EditorSelection.single(anchor, head);
           }
       }
   }
   function applyDOMChange(view, domChange) {
       let change;
       let { newSel } = domChange, sel = view.state.selection.main;
       let lastKey = view.inputState.lastKeyTime > Date.now() - 100 ? view.inputState.lastKeyCode : -1;
       if (domChange.bounds) {
           let { from, to } = domChange.bounds;
           let preferredPos = sel.from, preferredSide = null;
           // Prefer anchoring to end when Backspace is pressed (or, on
           // Android, when something was deleted)
           if (lastKey === 8 || browser.android && domChange.text.length < to - from) {
               preferredPos = sel.to;
               preferredSide = "end";
           }
           let diff = findDiff(view.state.doc.sliceString(from, to, LineBreakPlaceholder), domChange.text, preferredPos - from, preferredSide);
           if (diff) {
               // Chrome inserts two newlines when pressing shift-enter at the
               // end of a line. DomChange drops one of those.
               if (browser.chrome && lastKey == 13 &&
                   diff.toB == diff.from + 2 && domChange.text.slice(diff.from, diff.toB) == LineBreakPlaceholder + LineBreakPlaceholder)
                   diff.toB--;
               change = { from: from + diff.from, to: from + diff.toA,
                   insert: Text$1.of(domChange.text.slice(diff.from, diff.toB).split(LineBreakPlaceholder)) };
           }
       }
       else if (newSel && (!view.hasFocus && view.state.facet(editable) || newSel.main.eq(sel))) {
           newSel = null;
       }
       if (!change && !newSel)
           return false;
       if (!change && domChange.typeOver && !sel.empty && newSel && newSel.main.empty) {
           // Heuristic to notice typing over a selected character
           change = { from: sel.from, to: sel.to, insert: view.state.doc.slice(sel.from, sel.to) };
       }
       else if (change && change.from >= sel.from && change.to <= sel.to &&
           (change.from != sel.from || change.to != sel.to) &&
           (sel.to - sel.from) - (change.to - change.from) <= 4) {
           // If the change is inside the selection and covers most of it,
           // assume it is a selection replace (with identical characters at
           // the start/end not included in the diff)
           change = {
               from: sel.from, to: sel.to,
               insert: view.state.doc.slice(sel.from, change.from).append(change.insert).append(view.state.doc.slice(change.to, sel.to))
           };
       }
       else if ((browser.mac || browser.android) && change && change.from == change.to && change.from == sel.head - 1 &&
           /^\. ?$/.test(change.insert.toString()) && view.contentDOM.getAttribute("autocorrect") == "off") {
           // Detect insert-period-on-double-space Mac and Android behavior,
           // and transform it into a regular space insert.
           if (newSel && change.insert.length == 2)
               newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
           change = { from: sel.from, to: sel.to, insert: Text$1.of([" "]) };
       }
       else if (browser.chrome && change && change.from == change.to && change.from == sel.head &&
           change.insert.toString() == "\n " && view.lineWrapping) {
           // In Chrome, if you insert a space at the start of a wrapped
           // line, it will actually insert a newline and a space, causing a
           // bogus new line to be created in CodeMirror (#968)
           if (newSel)
               newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
           change = { from: sel.from, to: sel.to, insert: Text$1.of([" "]) };
       }
       if (change) {
           let startState = view.state;
           if (browser.ios && view.inputState.flushIOSKey(view))
               return true;
           // Android browsers don't fire reasonable key events for enter,
           // backspace, or delete. So this detects changes that look like
           // they're caused by those keys, and reinterprets them as key
           // events. (Some of these keys are also handled by beforeinput
           // events and the pendingAndroidKey mechanism, but that's not
           // reliable in all situations.)
           if (browser.android &&
               ((change.from == sel.from && change.to == sel.to &&
                   change.insert.length == 1 && change.insert.lines == 2 &&
                   dispatchKey(view.contentDOM, "Enter", 13)) ||
                   ((change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 ||
                       lastKey == 8 && change.insert.length < change.to - change.from) &&
                       dispatchKey(view.contentDOM, "Backspace", 8)) ||
                   (change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 &&
                       dispatchKey(view.contentDOM, "Delete", 46))))
               return true;
           let text = change.insert.toString();
           if (view.state.facet(inputHandler$1).some(h => h(view, change.from, change.to, text)))
               return true;
           if (view.inputState.composing >= 0)
               view.inputState.composing++;
           let tr;
           if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3 &&
               (!newSel || newSel.main.empty && newSel.main.from == change.from + change.insert.length) &&
               view.inputState.composing < 0) {
               let before = sel.from < change.from ? startState.sliceDoc(sel.from, change.from) : "";
               let after = sel.to > change.to ? startState.sliceDoc(change.to, sel.to) : "";
               tr = startState.replaceSelection(view.state.toText(before + change.insert.sliceString(0, undefined, view.state.lineBreak) + after));
           }
           else {
               let changes = startState.changes(change);
               let mainSel = newSel && newSel.main.to <= changes.newLength ? newSel.main : undefined;
               // Try to apply a composition change to all cursors
               if (startState.selection.ranges.length > 1 && view.inputState.composing >= 0 &&
                   change.to <= sel.to && change.to >= sel.to - 10) {
                   let replaced = view.state.sliceDoc(change.from, change.to);
                   let compositionRange = compositionSurroundingNode(view) || view.state.doc.lineAt(sel.head);
                   let offset = sel.to - change.to, size = sel.to - sel.from;
                   tr = startState.changeByRange(range => {
                       if (range.from == sel.from && range.to == sel.to)
                           return { changes, range: mainSel || range.map(changes) };
                       let to = range.to - offset, from = to - replaced.length;
                       if (range.to - range.from != size || view.state.sliceDoc(from, to) != replaced ||
                           // Unfortunately, there's no way to make multiple
                           // changes in the same node work without aborting
                           // composition, so cursors in the composition range are
                           // ignored.
                           compositionRange && range.to >= compositionRange.from && range.from <= compositionRange.to)
                           return { range };
                       let rangeChanges = startState.changes({ from, to, insert: change.insert }), selOff = range.to - sel.to;
                       return {
                           changes: rangeChanges,
                           range: !mainSel ? range.map(rangeChanges) :
                               EditorSelection.range(Math.max(0, mainSel.anchor + selOff), Math.max(0, mainSel.head + selOff))
                       };
                   });
               }
               else {
                   tr = {
                       changes,
                       selection: mainSel && startState.selection.replaceRange(mainSel)
                   };
               }
           }
           let userEvent = "input.type";
           if (view.composing ||
               view.inputState.compositionPendingChange && view.inputState.compositionEndedAt > Date.now() - 50) {
               view.inputState.compositionPendingChange = false;
               userEvent += ".compose";
               if (view.inputState.compositionFirstChange) {
                   userEvent += ".start";
                   view.inputState.compositionFirstChange = false;
               }
           }
           view.dispatch(tr, { scrollIntoView: true, userEvent });
           return true;
       }
       else if (newSel && !newSel.main.eq(sel)) {
           let scrollIntoView = false, userEvent = "select";
           if (view.inputState.lastSelectionTime > Date.now() - 50) {
               if (view.inputState.lastSelectionOrigin == "select")
                   scrollIntoView = true;
               userEvent = view.inputState.lastSelectionOrigin;
           }
           view.dispatch({ selection: newSel, scrollIntoView, userEvent });
           return true;
       }
       else {
           return false;
       }
   }
   function findDiff(a, b, preferredPos, preferredSide) {
       let minLen = Math.min(a.length, b.length);
       let from = 0;
       while (from < minLen && a.charCodeAt(from) == b.charCodeAt(from))
           from++;
       if (from == minLen && a.length == b.length)
           return null;
       let toA = a.length, toB = b.length;
       while (toA > 0 && toB > 0 && a.charCodeAt(toA - 1) == b.charCodeAt(toB - 1)) {
           toA--;
           toB--;
       }
       if (preferredSide == "end") {
           let adjust = Math.max(0, from - Math.min(toA, toB));
           preferredPos -= toA + adjust - from;
       }
       if (toA < from && a.length < b.length) {
           let move = preferredPos <= from && preferredPos >= toA ? from - preferredPos : 0;
           from -= move;
           toB = from + (toB - toA);
           toA = from;
       }
       else if (toB < from) {
           let move = preferredPos <= from && preferredPos >= toB ? from - preferredPos : 0;
           from -= move;
           toA = from + (toA - toB);
           toB = from;
       }
       return { from, toA, toB };
   }
   function selectionPoints(view) {
       let result = [];
       if (view.root.activeElement != view.contentDOM)
           return result;
       let { anchorNode, anchorOffset, focusNode, focusOffset } = view.observer.selectionRange;
       if (anchorNode) {
           result.push(new DOMPoint(anchorNode, anchorOffset));
           if (focusNode != anchorNode || focusOffset != anchorOffset)
               result.push(new DOMPoint(focusNode, focusOffset));
       }
       return result;
   }
   function selectionFromPoints(points, base) {
       if (points.length == 0)
           return null;
       let anchor = points[0].pos, head = points.length == 2 ? points[1].pos : anchor;
       return anchor > -1 && head > -1 ? EditorSelection.single(anchor + base, head + base) : null;
   }

   const observeOptions = {
       childList: true,
       characterData: true,
       subtree: true,
       attributes: true,
       characterDataOldValue: true
   };
   // IE11 has very broken mutation observers, so we also listen to
   // DOMCharacterDataModified there
   const useCharData = browser.ie && browser.ie_version <= 11;
   class DOMObserver {
       constructor(view) {
           this.view = view;
           this.active = false;
           // The known selection. Kept in our own object, as opposed to just
           // directly accessing the selection because:
           //  - Safari doesn't report the right selection in shadow DOM
           //  - Reading from the selection forces a DOM layout
           //  - This way, we can ignore selectionchange events if we have
           //    already seen the 'new' selection
           this.selectionRange = new DOMSelectionState;
           // Set when a selection change is detected, cleared on flush
           this.selectionChanged = false;
           this.delayedFlush = -1;
           this.resizeTimeout = -1;
           this.queue = [];
           this.delayedAndroidKey = null;
           this.flushingAndroidKey = -1;
           this.lastChange = 0;
           this.scrollTargets = [];
           this.intersection = null;
           this.resizeScroll = null;
           this.resizeContent = null;
           this.intersecting = false;
           this.gapIntersection = null;
           this.gaps = [];
           // Timeout for scheduling check of the parents that need scroll handlers
           this.parentCheck = -1;
           this.dom = view.contentDOM;
           this.observer = new MutationObserver(mutations => {
               for (let mut of mutations)
                   this.queue.push(mut);
               // IE11 will sometimes (on typing over a selection or
               // backspacing out a single character text node) call the
               // observer callback before actually updating the DOM.
               //
               // Unrelatedly, iOS Safari will, when ending a composition,
               // sometimes first clear it, deliver the mutations, and then
               // reinsert the finished text. CodeMirror's handling of the
               // deletion will prevent the reinsertion from happening,
               // breaking composition.
               if ((browser.ie && browser.ie_version <= 11 || browser.ios && view.composing) &&
                   mutations.some(m => m.type == "childList" && m.removedNodes.length ||
                       m.type == "characterData" && m.oldValue.length > m.target.nodeValue.length))
                   this.flushSoon();
               else
                   this.flush();
           });
           if (useCharData)
               this.onCharData = (event) => {
                   this.queue.push({ target: event.target,
                       type: "characterData",
                       oldValue: event.prevValue });
                   this.flushSoon();
               };
           this.onSelectionChange = this.onSelectionChange.bind(this);
           this.onResize = this.onResize.bind(this);
           this.onPrint = this.onPrint.bind(this);
           this.onScroll = this.onScroll.bind(this);
           if (typeof ResizeObserver == "function") {
               this.resizeScroll = new ResizeObserver(() => {
                   var _a;
                   if (((_a = this.view.docView) === null || _a === void 0 ? void 0 : _a.lastUpdate) < Date.now() - 75)
                       this.onResize();
               });
               this.resizeScroll.observe(view.scrollDOM);
               this.resizeContent = new ResizeObserver(() => this.view.requestMeasure());
               this.resizeContent.observe(view.contentDOM);
           }
           this.addWindowListeners(this.win = view.win);
           this.start();
           if (typeof IntersectionObserver == "function") {
               this.intersection = new IntersectionObserver(entries => {
                   if (this.parentCheck < 0)
                       this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1000);
                   if (entries.length > 0 && (entries[entries.length - 1].intersectionRatio > 0) != this.intersecting) {
                       this.intersecting = !this.intersecting;
                       if (this.intersecting != this.view.inView)
                           this.onScrollChanged(document.createEvent("Event"));
                   }
               }, { threshold: [0, .001] });
               this.intersection.observe(this.dom);
               this.gapIntersection = new IntersectionObserver(entries => {
                   if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0)
                       this.onScrollChanged(document.createEvent("Event"));
               }, {});
           }
           this.listenForScroll();
           this.readSelectionRange();
       }
       onScrollChanged(e) {
           this.view.inputState.runScrollHandlers(this.view, e);
           if (this.intersecting)
               this.view.measure();
       }
       onScroll(e) {
           if (this.intersecting)
               this.flush(false);
           this.onScrollChanged(e);
       }
       onResize() {
           if (this.resizeTimeout < 0)
               this.resizeTimeout = setTimeout(() => {
                   this.resizeTimeout = -1;
                   this.view.requestMeasure();
               }, 50);
       }
       onPrint() {
           this.view.viewState.printing = true;
           this.view.measure();
           setTimeout(() => {
               this.view.viewState.printing = false;
               this.view.requestMeasure();
           }, 500);
       }
       updateGaps(gaps) {
           if (this.gapIntersection && (gaps.length != this.gaps.length || this.gaps.some((g, i) => g != gaps[i]))) {
               this.gapIntersection.disconnect();
               for (let gap of gaps)
                   this.gapIntersection.observe(gap);
               this.gaps = gaps;
           }
       }
       onSelectionChange(event) {
           let wasChanged = this.selectionChanged;
           if (!this.readSelectionRange() || this.delayedAndroidKey)
               return;
           let { view } = this, sel = this.selectionRange;
           if (view.state.facet(editable) ? view.root.activeElement != this.dom : !hasSelection(view.dom, sel))
               return;
           let context = sel.anchorNode && view.docView.nearest(sel.anchorNode);
           if (context && context.ignoreEvent(event)) {
               if (!wasChanged)
                   this.selectionChanged = false;
               return;
           }
           // Deletions on IE11 fire their events in the wrong order, giving
           // us a selection change event before the DOM changes are
           // reported.
           // Chrome Android has a similar issue when backspacing out a
           // selection (#645).
           if ((browser.ie && browser.ie_version <= 11 || browser.android && browser.chrome) && !view.state.selection.main.empty &&
               // (Selection.isCollapsed isn't reliable on IE)
               sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))
               this.flushSoon();
           else
               this.flush(false);
       }
       readSelectionRange() {
           let { view } = this;
           // The Selection object is broken in shadow roots in Safari. See
           // https://github.com/codemirror/dev/issues/414
           let range = browser.safari && view.root.nodeType == 11 &&
               deepActiveElement(this.dom.ownerDocument) == this.dom &&
               safariSelectionRangeHack(this.view) || getSelection(view.root);
           if (!range || this.selectionRange.eq(range))
               return false;
           let local = hasSelection(this.dom, range);
           // Detect the situation where the browser has, on focus, moved the
           // selection to the start of the content element. Reset it to the
           // position from the editor state.
           if (local && !this.selectionChanged &&
               view.inputState.lastFocusTime > Date.now() - 200 &&
               view.inputState.lastTouchTime < Date.now() - 300 &&
               atElementStart(this.dom, range)) {
               this.view.inputState.lastFocusTime = 0;
               view.docView.updateSelection();
               return false;
           }
           this.selectionRange.setRange(range);
           if (local)
               this.selectionChanged = true;
           return true;
       }
       setSelectionRange(anchor, head) {
           this.selectionRange.set(anchor.node, anchor.offset, head.node, head.offset);
           this.selectionChanged = false;
       }
       clearSelectionRange() {
           this.selectionRange.set(null, 0, null, 0);
       }
       listenForScroll() {
           this.parentCheck = -1;
           let i = 0, changed = null;
           for (let dom = this.dom; dom;) {
               if (dom.nodeType == 1) {
                   if (!changed && i < this.scrollTargets.length && this.scrollTargets[i] == dom)
                       i++;
                   else if (!changed)
                       changed = this.scrollTargets.slice(0, i);
                   if (changed)
                       changed.push(dom);
                   dom = dom.assignedSlot || dom.parentNode;
               }
               else if (dom.nodeType == 11) { // Shadow root
                   dom = dom.host;
               }
               else {
                   break;
               }
           }
           if (i < this.scrollTargets.length && !changed)
               changed = this.scrollTargets.slice(0, i);
           if (changed) {
               for (let dom of this.scrollTargets)
                   dom.removeEventListener("scroll", this.onScroll);
               for (let dom of this.scrollTargets = changed)
                   dom.addEventListener("scroll", this.onScroll);
           }
       }
       ignore(f) {
           if (!this.active)
               return f();
           try {
               this.stop();
               return f();
           }
           finally {
               this.start();
               this.clear();
           }
       }
       start() {
           if (this.active)
               return;
           this.observer.observe(this.dom, observeOptions);
           if (useCharData)
               this.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
           this.active = true;
       }
       stop() {
           if (!this.active)
               return;
           this.active = false;
           this.observer.disconnect();
           if (useCharData)
               this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
       }
       // Throw away any pending changes
       clear() {
           this.processRecords();
           this.queue.length = 0;
           this.selectionChanged = false;
       }
       // Chrome Android, especially in combination with GBoard, not only
       // doesn't reliably fire regular key events, but also often
       // surrounds the effect of enter or backspace with a bunch of
       // composition events that, when interrupted, cause text duplication
       // or other kinds of corruption. This hack makes the editor back off
       // from handling DOM changes for a moment when such a key is
       // detected (via beforeinput or keydown), and then tries to flush
       // them or, if that has no effect, dispatches the given key.
       delayAndroidKey(key, keyCode) {
           var _a;
           if (!this.delayedAndroidKey) {
               let flush = () => {
                   let key = this.delayedAndroidKey;
                   if (key) {
                       this.clearDelayedAndroidKey();
                       this.view.inputState.lastKeyCode = key.keyCode;
                       this.view.inputState.lastKeyTime = Date.now();
                       let flushed = this.flush();
                       if (!flushed && key.force)
                           dispatchKey(this.dom, key.key, key.keyCode);
                   }
               };
               this.flushingAndroidKey = this.view.win.requestAnimationFrame(flush);
           }
           // Since backspace beforeinput is sometimes signalled spuriously,
           // Enter always takes precedence.
           if (!this.delayedAndroidKey || key == "Enter")
               this.delayedAndroidKey = {
                   key, keyCode,
                   // Only run the key handler when no changes are detected if
                   // this isn't coming right after another change, in which case
                   // it is probably part of a weird chain of updates, and should
                   // be ignored if it returns the DOM to its previous state.
                   force: this.lastChange < Date.now() - 50 || !!((_a = this.delayedAndroidKey) === null || _a === void 0 ? void 0 : _a.force)
               };
       }
       clearDelayedAndroidKey() {
           this.win.cancelAnimationFrame(this.flushingAndroidKey);
           this.delayedAndroidKey = null;
           this.flushingAndroidKey = -1;
       }
       flushSoon() {
           if (this.delayedFlush < 0)
               this.delayedFlush = this.view.win.requestAnimationFrame(() => { this.delayedFlush = -1; this.flush(); });
       }
       forceFlush() {
           if (this.delayedFlush >= 0) {
               this.view.win.cancelAnimationFrame(this.delayedFlush);
               this.delayedFlush = -1;
           }
           this.flush();
       }
       pendingRecords() {
           for (let mut of this.observer.takeRecords())
               this.queue.push(mut);
           return this.queue;
       }
       processRecords() {
           let records = this.pendingRecords();
           if (records.length)
               this.queue = [];
           let from = -1, to = -1, typeOver = false;
           for (let record of records) {
               let range = this.readMutation(record);
               if (!range)
                   continue;
               if (range.typeOver)
                   typeOver = true;
               if (from == -1) {
                   ({ from, to } = range);
               }
               else {
                   from = Math.min(range.from, from);
                   to = Math.max(range.to, to);
               }
           }
           return { from, to, typeOver };
       }
       readChange() {
           let { from, to, typeOver } = this.processRecords();
           let newSel = this.selectionChanged && hasSelection(this.dom, this.selectionRange);
           if (from < 0 && !newSel)
               return null;
           if (from > -1)
               this.lastChange = Date.now();
           this.view.inputState.lastFocusTime = 0;
           this.selectionChanged = false;
           return new DOMChange(this.view, from, to, typeOver);
       }
       // Apply pending changes, if any
       flush(readSelection = true) {
           // Completely hold off flushing when pending keys are set—the code
           // managing those will make sure processRecords is called and the
           // view is resynchronized after
           if (this.delayedFlush >= 0 || this.delayedAndroidKey)
               return false;
           if (readSelection)
               this.readSelectionRange();
           let domChange = this.readChange();
           if (!domChange)
               return false;
           let startState = this.view.state;
           let handled = applyDOMChange(this.view, domChange);
           // The view wasn't updated
           if (this.view.state == startState)
               this.view.update([]);
           return handled;
       }
       readMutation(rec) {
           let cView = this.view.docView.nearest(rec.target);
           if (!cView || cView.ignoreMutation(rec))
               return null;
           cView.markDirty(rec.type == "attributes");
           if (rec.type == "attributes")
               cView.dirty |= 4 /* Dirty.Attrs */;
           if (rec.type == "childList") {
               let childBefore = findChild(cView, rec.previousSibling || rec.target.previousSibling, -1);
               let childAfter = findChild(cView, rec.nextSibling || rec.target.nextSibling, 1);
               return { from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,
                   to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd, typeOver: false };
           }
           else if (rec.type == "characterData") {
               return { from: cView.posAtStart, to: cView.posAtEnd, typeOver: rec.target.nodeValue == rec.oldValue };
           }
           else {
               return null;
           }
       }
       setWindow(win) {
           if (win != this.win) {
               this.removeWindowListeners(this.win);
               this.win = win;
               this.addWindowListeners(this.win);
           }
       }
       addWindowListeners(win) {
           win.addEventListener("resize", this.onResize);
           win.addEventListener("beforeprint", this.onPrint);
           win.addEventListener("scroll", this.onScroll);
           win.document.addEventListener("selectionchange", this.onSelectionChange);
       }
       removeWindowListeners(win) {
           win.removeEventListener("scroll", this.onScroll);
           win.removeEventListener("resize", this.onResize);
           win.removeEventListener("beforeprint", this.onPrint);
           win.document.removeEventListener("selectionchange", this.onSelectionChange);
       }
       destroy() {
           var _a, _b, _c, _d;
           this.stop();
           (_a = this.intersection) === null || _a === void 0 ? void 0 : _a.disconnect();
           (_b = this.gapIntersection) === null || _b === void 0 ? void 0 : _b.disconnect();
           (_c = this.resizeScroll) === null || _c === void 0 ? void 0 : _c.disconnect();
           (_d = this.resizeContent) === null || _d === void 0 ? void 0 : _d.disconnect();
           for (let dom of this.scrollTargets)
               dom.removeEventListener("scroll", this.onScroll);
           this.removeWindowListeners(this.win);
           clearTimeout(this.parentCheck);
           clearTimeout(this.resizeTimeout);
           this.win.cancelAnimationFrame(this.delayedFlush);
           this.win.cancelAnimationFrame(this.flushingAndroidKey);
       }
   }
   function findChild(cView, dom, dir) {
       while (dom) {
           let curView = ContentView.get(dom);
           if (curView && curView.parent == cView)
               return curView;
           let parent = dom.parentNode;
           dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;
       }
       return null;
   }
   // Used to work around a Safari Selection/shadow DOM bug (#414)
   function safariSelectionRangeHack(view) {
       let found = null;
       // Because Safari (at least in 2018-2021) doesn't provide regular
       // access to the selection inside a shadowroot, we have to perform a
       // ridiculous hack to get at it—using `execCommand` to trigger a
       // `beforeInput` event so that we can read the target range from the
       // event.
       function read(event) {
           event.preventDefault();
           event.stopImmediatePropagation();
           found = event.getTargetRanges()[0];
       }
       view.contentDOM.addEventListener("beforeinput", read, true);
       view.dom.ownerDocument.execCommand("indent");
       view.contentDOM.removeEventListener("beforeinput", read, true);
       if (!found)
           return null;
       let anchorNode = found.startContainer, anchorOffset = found.startOffset;
       let focusNode = found.endContainer, focusOffset = found.endOffset;
       let curAnchor = view.docView.domAtPos(view.state.selection.main.anchor);
       // Since such a range doesn't distinguish between anchor and head,
       // use a heuristic that flips it around if its end matches the
       // current anchor.
       if (isEquivalentPosition(curAnchor.node, curAnchor.offset, focusNode, focusOffset))
           [anchorNode, anchorOffset, focusNode, focusOffset] = [focusNode, focusOffset, anchorNode, anchorOffset];
       return { anchorNode, anchorOffset, focusNode, focusOffset };
   }

   // The editor's update state machine looks something like this:
   //
   //     Idle → Updating ⇆ Idle (unchecked) → Measuring → Idle
   //                                         ↑      ↓
   //                                         Updating (measure)
   //
   // The difference between 'Idle' and 'Idle (unchecked)' lies in
   // whether a layout check has been scheduled. A regular update through
   // the `update` method updates the DOM in a write-only fashion, and
   // relies on a check (scheduled with `requestAnimationFrame`) to make
   // sure everything is where it should be and the viewport covers the
   // visible code. That check continues to measure and then optionally
   // update until it reaches a coherent state.
   /**
   An editor view represents the editor's user interface. It holds
   the editable DOM surface, and possibly other elements such as the
   line number gutter. It handles events and dispatches state
   transactions for editing actions.
   */
   class EditorView {
       /**
       The current editor state.
       */
       get state() { return this.viewState.state; }
       /**
       To be able to display large documents without consuming too much
       memory or overloading the browser, CodeMirror only draws the
       code that is visible (plus a margin around it) to the DOM. This
       property tells you the extent of the current drawn viewport, in
       document positions.
       */
       get viewport() { return this.viewState.viewport; }
       /**
       When there are, for example, large collapsed ranges in the
       viewport, its size can be a lot bigger than the actual visible
       content. Thus, if you are doing something like styling the
       content in the viewport, it is preferable to only do so for
       these ranges, which are the subset of the viewport that is
       actually drawn.
       */
       get visibleRanges() { return this.viewState.visibleRanges; }
       /**
       Returns false when the editor is entirely scrolled out of view
       or otherwise hidden.
       */
       get inView() { return this.viewState.inView; }
       /**
       Indicates whether the user is currently composing text via
       [IME](https://en.wikipedia.org/wiki/Input_method), and at least
       one change has been made in the current composition.
       */
       get composing() { return this.inputState.composing > 0; }
       /**
       Indicates whether the user is currently in composing state. Note
       that on some platforms, like Android, this will be the case a
       lot, since just putting the cursor on a word starts a
       composition there.
       */
       get compositionStarted() { return this.inputState.composing >= 0; }
       /**
       The document or shadow root that the view lives in.
       */
       get root() { return this._root; }
       /**
       @internal
       */
       get win() { return this.dom.ownerDocument.defaultView || window; }
       /**
       Construct a new view. You'll want to either provide a `parent`
       option, or put `view.dom` into your document after creating a
       view, so that the user can see the editor.
       */
       constructor(config = {}) {
           this.plugins = [];
           this.pluginMap = new Map;
           this.editorAttrs = {};
           this.contentAttrs = {};
           this.bidiCache = [];
           this.destroyed = false;
           /**
           @internal
           */
           this.updateState = 2 /* UpdateState.Updating */;
           /**
           @internal
           */
           this.measureScheduled = -1;
           /**
           @internal
           */
           this.measureRequests = [];
           this.contentDOM = document.createElement("div");
           this.scrollDOM = document.createElement("div");
           this.scrollDOM.tabIndex = -1;
           this.scrollDOM.className = "cm-scroller";
           this.scrollDOM.appendChild(this.contentDOM);
           this.announceDOM = document.createElement("div");
           this.announceDOM.style.cssText = "position: fixed; top: -10000px";
           this.announceDOM.setAttribute("aria-live", "polite");
           this.dom = document.createElement("div");
           this.dom.appendChild(this.announceDOM);
           this.dom.appendChild(this.scrollDOM);
           this._dispatch = config.dispatch || ((tr) => this.update([tr]));
           this.dispatch = this.dispatch.bind(this);
           this._root = (config.root || getRoot(config.parent) || document);
           this.viewState = new ViewState(config.state || EditorState.create(config));
           this.plugins = this.state.facet(viewPlugin).map(spec => new PluginInstance(spec));
           for (let plugin of this.plugins)
               plugin.update(this);
           this.observer = new DOMObserver(this);
           this.inputState = new InputState(this);
           this.inputState.ensureHandlers(this, this.plugins);
           this.docView = new DocView(this);
           this.mountStyles();
           this.updateAttrs();
           this.updateState = 0 /* UpdateState.Idle */;
           this.requestMeasure();
           if (config.parent)
               config.parent.appendChild(this.dom);
       }
       dispatch(...input) {
           let tr = input.length == 1 && input[0] instanceof Transaction ? input[0]
               : this.state.update(...input);
           this._dispatch(tr, this);
       }
       /**
       Update the view for the given array of transactions. This will
       update the visible document and selection to match the state
       produced by the transactions, and notify view plugins of the
       change. You should usually call
       [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
       as a primitive.
       */
       update(transactions) {
           if (this.updateState != 0 /* UpdateState.Idle */)
               throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
           let redrawn = false, attrsChanged = false, update;
           let state = this.state;
           for (let tr of transactions) {
               if (tr.startState != state)
                   throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
               state = tr.state;
           }
           if (this.destroyed) {
               this.viewState.state = state;
               return;
           }
           let focus = this.hasFocus, focusFlag = 0, dispatchFocus = null;
           if (transactions.some(tr => tr.annotation(isFocusChange))) {
               this.inputState.notifiedFocused = focus;
               // If a focus-change transaction is being dispatched, set this update flag.
               focusFlag = 1 /* UpdateFlag.Focus */;
           }
           else if (focus != this.inputState.notifiedFocused) {
               this.inputState.notifiedFocused = focus;
               // Schedule a separate focus transaction if necessary, otherwise
               // add a flag to this update
               dispatchFocus = focusChangeTransaction(state, focus);
               if (!dispatchFocus)
                   focusFlag = 1 /* UpdateFlag.Focus */;
           }
           // If there was a pending DOM change, eagerly read it and try to
           // apply it after the given transactions.
           let pendingKey = this.observer.delayedAndroidKey, domChange = null;
           if (pendingKey) {
               this.observer.clearDelayedAndroidKey();
               domChange = this.observer.readChange();
               // Only try to apply DOM changes if the transactions didn't
               // change the doc or selection.
               if (domChange && !this.state.doc.eq(state.doc) || !this.state.selection.eq(state.selection))
                   domChange = null;
           }
           else {
               this.observer.clear();
           }
           // When the phrases change, redraw the editor
           if (state.facet(EditorState.phrases) != this.state.facet(EditorState.phrases))
               return this.setState(state);
           update = ViewUpdate.create(this, state, transactions);
           update.flags |= focusFlag;
           let scrollTarget = this.viewState.scrollTarget;
           try {
               this.updateState = 2 /* UpdateState.Updating */;
               for (let tr of transactions) {
                   if (scrollTarget)
                       scrollTarget = scrollTarget.map(tr.changes);
                   if (tr.scrollIntoView) {
                       let { main } = tr.state.selection;
                       scrollTarget = new ScrollTarget(main.empty ? main : EditorSelection.cursor(main.head, main.head > main.anchor ? -1 : 1));
                   }
                   for (let e of tr.effects)
                       if (e.is(scrollIntoView$1))
                           scrollTarget = e.value;
               }
               this.viewState.update(update, scrollTarget);
               this.bidiCache = CachedOrder.update(this.bidiCache, update.changes);
               if (!update.empty) {
                   this.updatePlugins(update);
                   this.inputState.update(update);
               }
               redrawn = this.docView.update(update);
               if (this.state.facet(styleModule) != this.styleModules)
                   this.mountStyles();
               attrsChanged = this.updateAttrs();
               this.showAnnouncements(transactions);
               this.docView.updateSelection(redrawn, transactions.some(tr => tr.isUserEvent("select.pointer")));
           }
           finally {
               this.updateState = 0 /* UpdateState.Idle */;
           }
           if (update.startState.facet(theme) != update.state.facet(theme))
               this.viewState.mustMeasureContent = true;
           if (redrawn || attrsChanged || scrollTarget || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent)
               this.requestMeasure();
           if (!update.empty)
               for (let listener of this.state.facet(updateListener))
                   listener(update);
           if (dispatchFocus || domChange)
               Promise.resolve().then(() => {
                   if (dispatchFocus && this.state == dispatchFocus.startState)
                       this.dispatch(dispatchFocus);
                   if (domChange) {
                       if (!applyDOMChange(this, domChange) && pendingKey.force)
                           dispatchKey(this.contentDOM, pendingKey.key, pendingKey.keyCode);
                   }
               });
       }
       /**
       Reset the view to the given state. (This will cause the entire
       document to be redrawn and all view plugins to be reinitialized,
       so you should probably only use it when the new state isn't
       derived from the old state. Otherwise, use
       [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
       */
       setState(newState) {
           if (this.updateState != 0 /* UpdateState.Idle */)
               throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
           if (this.destroyed) {
               this.viewState.state = newState;
               return;
           }
           this.updateState = 2 /* UpdateState.Updating */;
           let hadFocus = this.hasFocus;
           try {
               for (let plugin of this.plugins)
                   plugin.destroy(this);
               this.viewState = new ViewState(newState);
               this.plugins = newState.facet(viewPlugin).map(spec => new PluginInstance(spec));
               this.pluginMap.clear();
               for (let plugin of this.plugins)
                   plugin.update(this);
               this.docView = new DocView(this);
               this.inputState.ensureHandlers(this, this.plugins);
               this.mountStyles();
               this.updateAttrs();
               this.bidiCache = [];
           }
           finally {
               this.updateState = 0 /* UpdateState.Idle */;
           }
           if (hadFocus)
               this.focus();
           this.requestMeasure();
       }
       updatePlugins(update) {
           let prevSpecs = update.startState.facet(viewPlugin), specs = update.state.facet(viewPlugin);
           if (prevSpecs != specs) {
               let newPlugins = [];
               for (let spec of specs) {
                   let found = prevSpecs.indexOf(spec);
                   if (found < 0) {
                       newPlugins.push(new PluginInstance(spec));
                   }
                   else {
                       let plugin = this.plugins[found];
                       plugin.mustUpdate = update;
                       newPlugins.push(plugin);
                   }
               }
               for (let plugin of this.plugins)
                   if (plugin.mustUpdate != update)
                       plugin.destroy(this);
               this.plugins = newPlugins;
               this.pluginMap.clear();
               this.inputState.ensureHandlers(this, this.plugins);
           }
           else {
               for (let p of this.plugins)
                   p.mustUpdate = update;
           }
           for (let i = 0; i < this.plugins.length; i++)
               this.plugins[i].update(this);
       }
       /**
       @internal
       */
       measure(flush = true) {
           if (this.destroyed)
               return;
           if (this.measureScheduled > -1)
               this.win.cancelAnimationFrame(this.measureScheduled);
           this.measureScheduled = 0; // Prevent requestMeasure calls from scheduling another animation frame
           if (flush)
               this.observer.forceFlush();
           let updated = null;
           let { scrollHeight, scrollTop, clientHeight } = this.scrollDOM;
           let refHeight = scrollTop > scrollHeight - clientHeight - 4 ? scrollHeight : scrollTop;
           try {
               for (let i = 0;; i++) {
                   this.updateState = 1 /* UpdateState.Measuring */;
                   let oldViewport = this.viewport;
                   let refBlock = this.viewState.lineBlockAtHeight(refHeight);
                   let changed = this.viewState.measure(this);
                   if (!changed && !this.measureRequests.length && this.viewState.scrollTarget == null)
                       break;
                   if (i > 5) {
                       console.warn(this.measureRequests.length
                           ? "Measure loop restarted more than 5 times"
                           : "Viewport failed to stabilize");
                       break;
                   }
                   let measuring = [];
                   // Only run measure requests in this cycle when the viewport didn't change
                   if (!(changed & 4 /* UpdateFlag.Viewport */))
                       [this.measureRequests, measuring] = [measuring, this.measureRequests];
                   let measured = measuring.map(m => {
                       try {
                           return m.read(this);
                       }
                       catch (e) {
                           logException(this.state, e);
                           return BadMeasure;
                       }
                   });
                   let update = ViewUpdate.create(this, this.state, []), redrawn = false, scrolled = false;
                   update.flags |= changed;
                   if (!updated)
                       updated = update;
                   else
                       updated.flags |= changed;
                   this.updateState = 2 /* UpdateState.Updating */;
                   if (!update.empty) {
                       this.updatePlugins(update);
                       this.inputState.update(update);
                       this.updateAttrs();
                       redrawn = this.docView.update(update);
                   }
                   for (let i = 0; i < measuring.length; i++)
                       if (measured[i] != BadMeasure) {
                           try {
                               let m = measuring[i];
                               if (m.write)
                                   m.write(measured[i], this);
                           }
                           catch (e) {
                               logException(this.state, e);
                           }
                       }
                   if (this.viewState.editorHeight) {
                       if (this.viewState.scrollTarget) {
                           this.docView.scrollIntoView(this.viewState.scrollTarget);
                           this.viewState.scrollTarget = null;
                           scrolled = true;
                       }
                       else {
                           let diff = this.viewState.lineBlockAt(refBlock.from).top - refBlock.top;
                           if (diff > 1 || diff < -1) {
                               this.scrollDOM.scrollTop += diff;
                               scrolled = true;
                           }
                       }
                   }
                   if (redrawn)
                       this.docView.updateSelection(true);
                   if (this.viewport.from == oldViewport.from && this.viewport.to == oldViewport.to &&
                       !scrolled && this.measureRequests.length == 0)
                       break;
               }
           }
           finally {
               this.updateState = 0 /* UpdateState.Idle */;
               this.measureScheduled = -1;
           }
           if (updated && !updated.empty)
               for (let listener of this.state.facet(updateListener))
                   listener(updated);
       }
       /**
       Get the CSS classes for the currently active editor themes.
       */
       get themeClasses() {
           return baseThemeID + " " +
               (this.state.facet(darkTheme) ? baseDarkID : baseLightID) + " " +
               this.state.facet(theme);
       }
       updateAttrs() {
           let editorAttrs = attrsFromFacet(this, editorAttributes, {
               class: "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
           });
           let contentAttrs = {
               spellcheck: "false",
               autocorrect: "off",
               autocapitalize: "off",
               translate: "no",
               contenteditable: !this.state.facet(editable) ? "false" : "true",
               class: "cm-content",
               style: `${browser.tabSize}: ${this.state.tabSize}`,
               role: "textbox",
               "aria-multiline": "true"
           };
           if (this.state.readOnly)
               contentAttrs["aria-readonly"] = "true";
           attrsFromFacet(this, contentAttributes, contentAttrs);
           let changed = this.observer.ignore(() => {
               let changedContent = updateAttrs(this.contentDOM, this.contentAttrs, contentAttrs);
               let changedEditor = updateAttrs(this.dom, this.editorAttrs, editorAttrs);
               return changedContent || changedEditor;
           });
           this.editorAttrs = editorAttrs;
           this.contentAttrs = contentAttrs;
           return changed;
       }
       showAnnouncements(trs) {
           let first = true;
           for (let tr of trs)
               for (let effect of tr.effects)
                   if (effect.is(EditorView.announce)) {
                       if (first)
                           this.announceDOM.textContent = "";
                       first = false;
                       let div = this.announceDOM.appendChild(document.createElement("div"));
                       div.textContent = effect.value;
                   }
       }
       mountStyles() {
           this.styleModules = this.state.facet(styleModule);
           StyleModule.mount(this.root, this.styleModules.concat(baseTheme$1$1).reverse());
       }
       readMeasured() {
           if (this.updateState == 2 /* UpdateState.Updating */)
               throw new Error("Reading the editor layout isn't allowed during an update");
           if (this.updateState == 0 /* UpdateState.Idle */ && this.measureScheduled > -1)
               this.measure(false);
       }
       /**
       Schedule a layout measurement, optionally providing callbacks to
       do custom DOM measuring followed by a DOM write phase. Using
       this is preferable reading DOM layout directly from, for
       example, an event handler, because it'll make sure measuring and
       drawing done by other components is synchronized, avoiding
       unnecessary DOM layout computations.
       */
       requestMeasure(request) {
           if (this.measureScheduled < 0)
               this.measureScheduled = this.win.requestAnimationFrame(() => this.measure());
           if (request) {
               if (this.measureRequests.indexOf(request) > -1)
                   return;
               if (request.key != null)
                   for (let i = 0; i < this.measureRequests.length; i++) {
                       if (this.measureRequests[i].key === request.key) {
                           this.measureRequests[i] = request;
                           return;
                       }
                   }
               this.measureRequests.push(request);
           }
       }
       /**
       Get the value of a specific plugin, if present. Note that
       plugins that crash can be dropped from a view, so even when you
       know you registered a given plugin, it is recommended to check
       the return value of this method.
       */
       plugin(plugin) {
           let known = this.pluginMap.get(plugin);
           if (known === undefined || known && known.spec != plugin)
               this.pluginMap.set(plugin, known = this.plugins.find(p => p.spec == plugin) || null);
           return known && known.update(this).value;
       }
       /**
       The top position of the document, in screen coordinates. This
       may be negative when the editor is scrolled down. Points
       directly to the top of the first line, not above the padding.
       */
       get documentTop() {
           return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
       }
       /**
       Reports the padding above and below the document.
       */
       get documentPadding() {
           return { top: this.viewState.paddingTop, bottom: this.viewState.paddingBottom };
       }
       /**
       Find the text line or block widget at the given vertical
       position (which is interpreted as relative to the [top of the
       document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)).
       */
       elementAtHeight(height) {
           this.readMeasured();
           return this.viewState.elementAtHeight(height);
       }
       /**
       Find the line block (see
       [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given
       height, again interpreted relative to the [top of the
       document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop).
       */
       lineBlockAtHeight(height) {
           this.readMeasured();
           return this.viewState.lineBlockAtHeight(height);
       }
       /**
       Get the extent and vertical position of all [line
       blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions
       are relative to the [top of the
       document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);
       */
       get viewportLineBlocks() {
           return this.viewState.viewportLines;
       }
       /**
       Find the line block around the given document position. A line
       block is a range delimited on both sides by either a
       non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line breaks, or the
       start/end of the document. It will usually just hold a line of
       text, but may be broken into multiple textblocks by block
       widgets.
       */
       lineBlockAt(pos) {
           return this.viewState.lineBlockAt(pos);
       }
       /**
       The editor's total content height.
       */
       get contentHeight() {
           return this.viewState.contentHeight;
       }
       /**
       Move a cursor position by [grapheme
       cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether
       the motion is away from the line start, or towards it. In
       bidirectional text, the line is traversed in visual order, using
       the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
       When the start position was the last one on the line, the
       returned position will be across the line break. If there is no
       further line, the original position is returned.
       
       By default, this method moves over a single cluster. The
       optional `by` argument can be used to move across more. It will
       be called with the first cluster as argument, and should return
       a predicate that determines, for each subsequent cluster,
       whether it should also be moved over.
       */
       moveByChar(start, forward, by) {
           return skipAtoms(this, start, moveByChar(this, start, forward, by));
       }
       /**
       Move a cursor position across the next group of either
       [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
       non-whitespace characters.
       */
       moveByGroup(start, forward) {
           return skipAtoms(this, start, moveByChar(this, start, forward, initial => byGroup(this, start.head, initial)));
       }
       /**
       Move to the next line boundary in the given direction. If
       `includeWrap` is true, line wrapping is on, and there is a
       further wrap point on the current line, the wrap point will be
       returned. Otherwise this function will return the start or end
       of the line.
       */
       moveToLineBoundary(start, forward, includeWrap = true) {
           return moveToLineBoundary(this, start, forward, includeWrap);
       }
       /**
       Move a cursor position vertically. When `distance` isn't given,
       it defaults to moving to the next line (including wrapped
       lines). Otherwise, `distance` should provide a positive distance
       in pixels.
       
       When `start` has a
       [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
       motion will use that as a target horizontal position. Otherwise,
       the cursor's own horizontal position is used. The returned
       cursor will have its goal column set to whichever column was
       used.
       */
       moveVertically(start, forward, distance) {
           return skipAtoms(this, start, moveVertically(this, start, forward, distance));
       }
       /**
       Find the DOM parent node and offset (child offset if `node` is
       an element, character offset when it is a text node) at the
       given document position.
       
       Note that for positions that aren't currently in
       `visibleRanges`, the resulting DOM position isn't necessarily
       meaningful (it may just point before or after a placeholder
       element).
       */
       domAtPos(pos) {
           return this.docView.domAtPos(pos);
       }
       /**
       Find the document position at the given DOM node. Can be useful
       for associating positions with DOM events. Will raise an error
       when `node` isn't part of the editor content.
       */
       posAtDOM(node, offset = 0) {
           return this.docView.posFromDOM(node, offset);
       }
       posAtCoords(coords, precise = true) {
           this.readMeasured();
           return posAtCoords(this, coords, precise);
       }
       /**
       Get the screen coordinates at the given document position.
       `side` determines whether the coordinates are based on the
       element before (-1) or after (1) the position (if no element is
       available on the given side, the method will transparently use
       another strategy to get reasonable coordinates).
       */
       coordsAtPos(pos, side = 1) {
           this.readMeasured();
           let rect = this.docView.coordsAt(pos, side);
           if (!rect || rect.left == rect.right)
               return rect;
           let line = this.state.doc.lineAt(pos), order = this.bidiSpans(line);
           let span = order[BidiSpan.find(order, pos - line.from, -1, side)];
           return flattenRect(rect, (span.dir == Direction.LTR) == (side > 0));
       }
       /**
       The default width of a character in the editor. May not
       accurately reflect the width of all characters (given variable
       width fonts or styling of invididual ranges).
       */
       get defaultCharacterWidth() { return this.viewState.heightOracle.charWidth; }
       /**
       The default height of a line in the editor. May not be accurate
       for all lines.
       */
       get defaultLineHeight() { return this.viewState.heightOracle.lineHeight; }
       /**
       The text direction
       ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
       CSS property) of the editor's content element.
       */
       get textDirection() { return this.viewState.defaultTextDirection; }
       /**
       Find the text direction of the block at the given position, as
       assigned by CSS. If
       [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)
       isn't enabled, or the given position is outside of the viewport,
       this will always return the same as
       [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that
       this may trigger a DOM layout.
       */
       textDirectionAt(pos) {
           let perLine = this.state.facet(perLineTextDirection);
           if (!perLine || pos < this.viewport.from || pos > this.viewport.to)
               return this.textDirection;
           this.readMeasured();
           return this.docView.textDirectionAt(pos);
       }
       /**
       Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
       (as determined by the
       [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
       CSS property of its content element).
       */
       get lineWrapping() { return this.viewState.heightOracle.lineWrapping; }
       /**
       Returns the bidirectional text structure of the given line
       (which should be in the current document) as an array of span
       objects. The order of these spans matches the [text
       direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
       left-to-right, the leftmost spans come first, otherwise the
       rightmost spans come first.
       */
       bidiSpans(line) {
           if (line.length > MaxBidiLine)
               return trivialOrder(line.length);
           let dir = this.textDirectionAt(line.from);
           for (let entry of this.bidiCache)
               if (entry.from == line.from && entry.dir == dir)
                   return entry.order;
           let order = computeOrder(line.text, dir);
           this.bidiCache.push(new CachedOrder(line.from, line.to, dir, order));
           return order;
       }
       /**
       Check whether the editor has focus.
       */
       get hasFocus() {
           var _a;
           // Safari return false for hasFocus when the context menu is open
           // or closing, which leads us to ignore selection changes from the
           // context menu because it looks like the editor isn't focused.
           // This kludges around that.
           return (this.dom.ownerDocument.hasFocus() || browser.safari && ((_a = this.inputState) === null || _a === void 0 ? void 0 : _a.lastContextMenu) > Date.now() - 3e4) &&
               this.root.activeElement == this.contentDOM;
       }
       /**
       Put focus on the editor.
       */
       focus() {
           this.observer.ignore(() => {
               focusPreventScroll(this.contentDOM);
               this.docView.updateSelection();
           });
       }
       /**
       Update the [root](https://codemirror.net/6/docs/ref/##view.EditorViewConfig.root) in which the editor lives. This is only
       necessary when moving the editor's existing DOM to a new window or shadow root.
       */
       setRoot(root) {
           if (this._root != root) {
               this._root = root;
               this.observer.setWindow((root.nodeType == 9 ? root : root.ownerDocument).defaultView || window);
               this.mountStyles();
           }
       }
       /**
       Clean up this editor view, removing its element from the
       document, unregistering event handlers, and notifying
       plugins. The view instance can no longer be used after
       calling this.
       */
       destroy() {
           for (let plugin of this.plugins)
               plugin.destroy(this);
           this.plugins = [];
           this.inputState.destroy();
           this.dom.remove();
           this.observer.destroy();
           if (this.measureScheduled > -1)
               this.win.cancelAnimationFrame(this.measureScheduled);
           this.destroyed = true;
       }
       /**
       Returns an effect that can be
       [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to
       cause it to scroll the given position or range into view.
       */
       static scrollIntoView(pos, options = {}) {
           return scrollIntoView$1.of(new ScrollTarget(typeof pos == "number" ? EditorSelection.cursor(pos) : pos, options.y, options.x, options.yMargin, options.xMargin));
       }
       /**
       Returns an extension that can be used to add DOM event handlers.
       The value should be an object mapping event names to handler
       functions. For any given event, such functions are ordered by
       extension precedence, and the first handler to return true will
       be assumed to have handled that event, and no other handlers or
       built-in behavior will be activated for it. These are registered
       on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except
       for `scroll` handlers, which will be called any time the
       editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of
       its parent nodes is scrolled.
       */
       static domEventHandlers(handlers) {
           return ViewPlugin.define(() => ({}), { eventHandlers: handlers });
       }
       /**
       Create a theme extension. The first argument can be a
       [`style-mod`](https://github.com/marijnh/style-mod#documentation)
       style spec providing the styles for the theme. These will be
       prefixed with a generated class for the style.
       
       Because the selectors will be prefixed with a scope class, rule
       that directly match the editor's [wrapper
       element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
       added—need to be explicitly differentiated by adding an `&` to
       the selector for that element—for example
       `&.cm-focused`.
       
       When `dark` is set to true, the theme will be marked as dark,
       which will cause the `&dark` rules from [base
       themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
       `&light` when a light theme is active).
       */
       static theme(spec, options) {
           let prefix = StyleModule.newName();
           let result = [theme.of(prefix), styleModule.of(buildTheme(`.${prefix}`, spec))];
           if (options && options.dark)
               result.push(darkTheme.of(true));
           return result;
       }
       /**
       Create an extension that adds styles to the base theme. Like
       with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
       place of the editor wrapper element when directly targeting
       that. You can also use `&dark` or `&light` instead to only
       target editors with a dark or light theme.
       */
       static baseTheme(spec) {
           return Prec.lowest(styleModule.of(buildTheme("." + baseThemeID, spec, lightDarkIDs)));
       }
       /**
       Retrieve an editor view instance from the view's DOM
       representation.
       */
       static findFromDOM(dom) {
           var _a;
           let content = dom.querySelector(".cm-content");
           let cView = content && ContentView.get(content) || ContentView.get(dom);
           return ((_a = cView === null || cView === void 0 ? void 0 : cView.rootView) === null || _a === void 0 ? void 0 : _a.view) || null;
       }
   }
   /**
   Facet to add a [style
   module](https://github.com/marijnh/style-mod#documentation) to
   an editor view. The view will ensure that the module is
   mounted in its [document
   root](https://codemirror.net/6/docs/ref/#view.EditorView.constructor^config.root).
   */
   EditorView.styleModule = styleModule;
   /**
   An input handler can override the way changes to the editable
   DOM content are handled. Handlers are passed the document
   positions between which the change was found, and the new
   content. When one returns true, no further input handlers are
   called and the default behavior is prevented.
   */
   EditorView.inputHandler = inputHandler$1;
   /**
   This facet can be used to provide functions that create effects
   to be dispatched when the editor's focus state changes.
   */
   EditorView.focusChangeEffect = focusChangeEffect;
   /**
   By default, the editor assumes all its content has the same
   [text direction](https://codemirror.net/6/docs/ref/#view.Direction). Configure this with a `true`
   value to make it read the text direction of every (rendered)
   line separately.
   */
   EditorView.perLineTextDirection = perLineTextDirection;
   /**
   Allows you to provide a function that should be called when the
   library catches an exception from an extension (mostly from view
   plugins, but may be used by other extensions to route exceptions
   from user-code-provided callbacks). This is mostly useful for
   debugging and logging. See [`logException`](https://codemirror.net/6/docs/ref/#view.logException).
   */
   EditorView.exceptionSink = exceptionSink;
   /**
   A facet that can be used to register a function to be called
   every time the view updates.
   */
   EditorView.updateListener = updateListener;
   /**
   Facet that controls whether the editor content DOM is editable.
   When its highest-precedence value is `false`, the element will
   not have its `contenteditable` attribute set. (Note that this
   doesn't affect API calls that change the editor content, even
   when those are bound to keys or buttons. See the
   [`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) facet for that.)
   */
   EditorView.editable = editable;
   /**
   Allows you to influence the way mouse selection happens. The
   functions in this facet will be called for a `mousedown` event
   on the editor, and can return an object that overrides the way a
   selection is computed from that mouse click or drag.
   */
   EditorView.mouseSelectionStyle = mouseSelectionStyle;
   /**
   Facet used to configure whether a given selection drag event
   should move or copy the selection. The given predicate will be
   called with the `mousedown` event, and can return `true` when
   the drag should move the content.
   */
   EditorView.dragMovesSelection = dragMovesSelection$1;
   /**
   Facet used to configure whether a given selecting click adds a
   new range to the existing selection or replaces it entirely. The
   default behavior is to check `event.metaKey` on macOS, and
   `event.ctrlKey` elsewhere.
   */
   EditorView.clickAddsSelectionRange = clickAddsSelectionRange;
   /**
   A facet that determines which [decorations](https://codemirror.net/6/docs/ref/#view.Decoration)
   are shown in the view. Decorations can be provided in two
   ways—directly, or via a function that takes an editor view.

   Only decoration sets provided directly are allowed to influence
   the editor's vertical layout structure. The ones provided as
   functions are called _after_ the new viewport has been computed,
   and thus **must not** introduce block widgets or replacing
   decorations that cover line breaks.

   If you want decorated ranges to behave like atomic units for
   cursor motion and deletion purposes, also provide the range set
   containing the decorations to
   [`EditorView.atomicRanges`](https://codemirror.net/6/docs/ref/#view.EditorView^atomicRanges).
   */
   EditorView.decorations = decorations;
   /**
   Used to provide ranges that should be treated as atoms as far as
   cursor motion is concerned. This causes methods like
   [`moveByChar`](https://codemirror.net/6/docs/ref/#view.EditorView.moveByChar) and
   [`moveVertically`](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) (and the
   commands built on top of them) to skip across such regions when
   a selection endpoint would enter them. This does _not_ prevent
   direct programmatic [selection
   updates](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) from moving into such
   regions.
   */
   EditorView.atomicRanges = atomicRanges;
   /**
   Facet that allows extensions to provide additional scroll
   margins (space around the sides of the scrolling element that
   should be considered invisible). This can be useful when the
   plugin introduces elements that cover part of that element (for
   example a horizontally fixed gutter).
   */
   EditorView.scrollMargins = scrollMargins;
   /**
   This facet records whether a dark theme is active. The extension
   returned by [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme) automatically
   includes an instance of this when the `dark` option is set to
   true.
   */
   EditorView.darkTheme = darkTheme;
   /**
   Facet that provides additional DOM attributes for the editor's
   editable DOM element.
   */
   EditorView.contentAttributes = contentAttributes;
   /**
   Facet that provides DOM attributes for the editor's outer
   element.
   */
   EditorView.editorAttributes = editorAttributes;
   /**
   An extension that enables line wrapping in the editor (by
   setting CSS `white-space` to `pre-wrap` in the content).
   */
   EditorView.lineWrapping = /*@__PURE__*/EditorView.contentAttributes.of({ "class": "cm-lineWrapping" });
   /**
   State effect used to include screen reader announcements in a
   transaction. These will be added to the DOM in a visually hidden
   element with `aria-live="polite"` set, and should be used to
   describe effects that are visually obvious but may not be
   noticed by screen reader users (such as moving to the next
   search match).
   */
   EditorView.announce = /*@__PURE__*/StateEffect.define();
   // Maximum line length for which we compute accurate bidi info
   const MaxBidiLine = 4096;
   const BadMeasure = {};
   class CachedOrder {
       constructor(from, to, dir, order) {
           this.from = from;
           this.to = to;
           this.dir = dir;
           this.order = order;
       }
       static update(cache, changes) {
           if (changes.empty)
               return cache;
           let result = [], lastDir = cache.length ? cache[cache.length - 1].dir : Direction.LTR;
           for (let i = Math.max(0, cache.length - 10); i < cache.length; i++) {
               let entry = cache[i];
               if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to))
                   result.push(new CachedOrder(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.order));
           }
           return result;
       }
   }
   function attrsFromFacet(view, facet, base) {
       for (let sources = view.state.facet(facet), i = sources.length - 1; i >= 0; i--) {
           let source = sources[i], value = typeof source == "function" ? source(view) : source;
           if (value)
               combineAttrs(value, base);
       }
       return base;
   }

   const currentPlatform = browser.mac ? "mac" : browser.windows ? "win" : browser.linux ? "linux" : "key";
   function normalizeKeyName(name, platform) {
       const parts = name.split(/-(?!$)/);
       let result = parts[parts.length - 1];
       if (result == "Space")
           result = " ";
       let alt, ctrl, shift, meta;
       for (let i = 0; i < parts.length - 1; ++i) {
           const mod = parts[i];
           if (/^(cmd|meta|m)$/i.test(mod))
               meta = true;
           else if (/^a(lt)?$/i.test(mod))
               alt = true;
           else if (/^(c|ctrl|control)$/i.test(mod))
               ctrl = true;
           else if (/^s(hift)?$/i.test(mod))
               shift = true;
           else if (/^mod$/i.test(mod)) {
               if (platform == "mac")
                   meta = true;
               else
                   ctrl = true;
           }
           else
               throw new Error("Unrecognized modifier name: " + mod);
       }
       if (alt)
           result = "Alt-" + result;
       if (ctrl)
           result = "Ctrl-" + result;
       if (meta)
           result = "Meta-" + result;
       if (shift)
           result = "Shift-" + result;
       return result;
   }
   function modifiers(name, event, shift) {
       if (event.altKey)
           name = "Alt-" + name;
       if (event.ctrlKey)
           name = "Ctrl-" + name;
       if (event.metaKey)
           name = "Meta-" + name;
       if (shift !== false && event.shiftKey)
           name = "Shift-" + name;
       return name;
   }
   const handleKeyEvents = /*@__PURE__*/Prec.default(/*@__PURE__*/EditorView.domEventHandlers({
       keydown(event, view) {
           return runHandlers(getKeymap(view.state), event, view, "editor");
       }
   }));
   /**
   Facet used for registering keymaps.

   You can add multiple keymaps to an editor. Their priorities
   determine their precedence (the ones specified early or with high
   priority get checked first). When a handler has returned `true`
   for a given key, no further handlers are called.
   */
   const keymap = /*@__PURE__*/Facet.define({ enables: handleKeyEvents });
   const Keymaps = /*@__PURE__*/new WeakMap();
   // This is hidden behind an indirection, rather than directly computed
   // by the facet, to keep internal types out of the facet's type.
   function getKeymap(state) {
       let bindings = state.facet(keymap);
       let map = Keymaps.get(bindings);
       if (!map)
           Keymaps.set(bindings, map = buildKeymap(bindings.reduce((a, b) => a.concat(b), [])));
       return map;
   }
   /**
   Run the key handlers registered for a given scope. The event
   object should be a `"keydown"` event. Returns true if any of the
   handlers handled it.
   */
   function runScopeHandlers(view, event, scope) {
       return runHandlers(getKeymap(view.state), event, view, scope);
   }
   let storedPrefix = null;
   const PrefixTimeout = 4000;
   function buildKeymap(bindings, platform = currentPlatform) {
       let bound = Object.create(null);
       let isPrefix = Object.create(null);
       let checkPrefix = (name, is) => {
           let current = isPrefix[name];
           if (current == null)
               isPrefix[name] = is;
           else if (current != is)
               throw new Error("Key binding " + name + " is used both as a regular binding and as a multi-stroke prefix");
       };
       let add = (scope, key, command, preventDefault) => {
           var _a, _b;
           let scopeObj = bound[scope] || (bound[scope] = Object.create(null));
           let parts = key.split(/ (?!$)/).map(k => normalizeKeyName(k, platform));
           for (let i = 1; i < parts.length; i++) {
               let prefix = parts.slice(0, i).join(" ");
               checkPrefix(prefix, true);
               if (!scopeObj[prefix])
                   scopeObj[prefix] = {
                       preventDefault: true,
                       run: [(view) => {
                               let ourObj = storedPrefix = { view, prefix, scope };
                               setTimeout(() => { if (storedPrefix == ourObj)
                                   storedPrefix = null; }, PrefixTimeout);
                               return true;
                           }]
                   };
           }
           let full = parts.join(" ");
           checkPrefix(full, false);
           let binding = scopeObj[full] || (scopeObj[full] = { preventDefault: false, run: ((_b = (_a = scopeObj._any) === null || _a === void 0 ? void 0 : _a.run) === null || _b === void 0 ? void 0 : _b.slice()) || [] });
           if (command)
               binding.run.push(command);
           if (preventDefault)
               binding.preventDefault = true;
       };
       for (let b of bindings) {
           let scopes = b.scope ? b.scope.split(" ") : ["editor"];
           if (b.any)
               for (let scope of scopes) {
                   let scopeObj = bound[scope] || (bound[scope] = Object.create(null));
                   if (!scopeObj._any)
                       scopeObj._any = { preventDefault: false, run: [] };
                   for (let key in scopeObj)
                       scopeObj[key].run.push(b.any);
               }
           let name = b[platform] || b.key;
           if (!name)
               continue;
           for (let scope of scopes) {
               add(scope, name, b.run, b.preventDefault);
               if (b.shift)
                   add(scope, "Shift-" + name, b.shift, b.preventDefault);
           }
       }
       return bound;
   }
   function runHandlers(map, event, view, scope) {
       let name = keyName(event);
       let charCode = codePointAt(name, 0), isChar = codePointSize(charCode) == name.length && name != " ";
       let prefix = "", fallthrough = false;
       if (storedPrefix && storedPrefix.view == view && storedPrefix.scope == scope) {
           prefix = storedPrefix.prefix + " ";
           if (fallthrough = modifierCodes.indexOf(event.keyCode) < 0)
               storedPrefix = null;
       }
       let ran = new Set;
       let runFor = (binding) => {
           if (binding) {
               for (let cmd of binding.run)
                   if (!ran.has(cmd)) {
                       ran.add(cmd);
                       if (cmd(view, event))
                           return true;
                   }
               if (binding.preventDefault)
                   fallthrough = true;
           }
           return false;
       };
       let scopeObj = map[scope], baseName, shiftName;
       if (scopeObj) {
           if (runFor(scopeObj[prefix + modifiers(name, event, !isChar)]))
               return true;
           if (isChar && (event.altKey || event.metaKey || event.ctrlKey) &&
               // Ctrl-Alt may be used for AltGr on Windows
               !(browser.windows && event.ctrlKey && event.altKey) &&
               (baseName = base$4[event.keyCode]) && baseName != name) {
               if (runFor(scopeObj[prefix + modifiers(baseName, event, true)]))
                   return true;
               else if (event.shiftKey && (shiftName = shift[event.keyCode]) != name && shiftName != baseName &&
                   runFor(scopeObj[prefix + modifiers(shiftName, event, false)]))
                   return true;
           }
           else if (isChar && event.shiftKey) {
               if (runFor(scopeObj[prefix + modifiers(name, event, true)]))
                   return true;
           }
           if (runFor(scopeObj._any))
               return true;
       }
       return fallthrough;
   }

   const CanHidePrimary = !browser.ios; // FIXME test IE
   const themeSpec = {
       ".cm-line": {
           "& ::selection": { backgroundColor: "transparent !important" },
           "&::selection": { backgroundColor: "transparent !important" }
       }
   };
   if (CanHidePrimary)
       themeSpec[".cm-line"].caretColor = "transparent !important";

   const setDropCursorPos = /*@__PURE__*/StateEffect.define({
       map(pos, mapping) { return pos == null ? null : mapping.mapPos(pos); }
   });
   const dropCursorPos = /*@__PURE__*/StateField.define({
       create() { return null; },
       update(pos, tr) {
           if (pos != null)
               pos = tr.changes.mapPos(pos);
           return tr.effects.reduce((pos, e) => e.is(setDropCursorPos) ? e.value : pos, pos);
       }
   });
   const drawDropCursor = /*@__PURE__*/ViewPlugin.fromClass(class {
       constructor(view) {
           this.view = view;
           this.cursor = null;
           this.measureReq = { read: this.readPos.bind(this), write: this.drawCursor.bind(this) };
       }
       update(update) {
           var _a;
           let cursorPos = update.state.field(dropCursorPos);
           if (cursorPos == null) {
               if (this.cursor != null) {
                   (_a = this.cursor) === null || _a === void 0 ? void 0 : _a.remove();
                   this.cursor = null;
               }
           }
           else {
               if (!this.cursor) {
                   this.cursor = this.view.scrollDOM.appendChild(document.createElement("div"));
                   this.cursor.className = "cm-dropCursor";
               }
               if (update.startState.field(dropCursorPos) != cursorPos || update.docChanged || update.geometryChanged)
                   this.view.requestMeasure(this.measureReq);
           }
       }
       readPos() {
           let pos = this.view.state.field(dropCursorPos);
           let rect = pos != null && this.view.coordsAtPos(pos);
           if (!rect)
               return null;
           let outer = this.view.scrollDOM.getBoundingClientRect();
           return {
               left: rect.left - outer.left + this.view.scrollDOM.scrollLeft,
               top: rect.top - outer.top + this.view.scrollDOM.scrollTop,
               height: rect.bottom - rect.top
           };
       }
       drawCursor(pos) {
           if (this.cursor) {
               if (pos) {
                   this.cursor.style.left = pos.left + "px";
                   this.cursor.style.top = pos.top + "px";
                   this.cursor.style.height = pos.height + "px";
               }
               else {
                   this.cursor.style.left = "-100000px";
               }
           }
       }
       destroy() {
           if (this.cursor)
               this.cursor.remove();
       }
       setDropPos(pos) {
           if (this.view.state.field(dropCursorPos) != pos)
               this.view.dispatch({ effects: setDropCursorPos.of(pos) });
       }
   }, {
       eventHandlers: {
           dragover(event) {
               this.setDropPos(this.view.posAtCoords({ x: event.clientX, y: event.clientY }));
           },
           dragleave(event) {
               if (event.target == this.view.contentDOM || !this.view.contentDOM.contains(event.relatedTarget))
                   this.setDropPos(null);
           },
           dragend() {
               this.setDropPos(null);
           },
           drop() {
               this.setDropPos(null);
           }
       }
   });
   /**
   Draws a cursor at the current drop position when something is
   dragged over the editor.
   */
   function dropCursor() {
       return [dropCursorPos, drawDropCursor];
   }

   /**
   Mark lines that have a cursor on them with the `"cm-activeLine"`
   DOM class.
   */
   function highlightActiveLine() {
       return activeLineHighlighter;
   }
   const lineDeco = /*@__PURE__*/Decoration.line({ class: "cm-activeLine" });
   const activeLineHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {
       constructor(view) {
           this.decorations = this.getDeco(view);
       }
       update(update) {
           if (update.docChanged || update.selectionSet)
               this.decorations = this.getDeco(update.view);
       }
       getDeco(view) {
           let lastLineStart = -1, deco = [];
           for (let r of view.state.selection.ranges) {
               let line = view.lineBlockAt(r.head);
               if (line.from > lastLineStart) {
                   deco.push(lineDeco.range(line.from));
                   lastLineStart = line.from;
               }
           }
           return Decoration.set(deco);
       }
   }, {
       decorations: v => v.decorations
   });

   // Don't compute precise column positions for line offsets above this
   // (since it could get expensive). Assume offset==column for them.
   const MaxOff = 2000;
   function rectangleFor(state, a, b) {
       let startLine = Math.min(a.line, b.line), endLine = Math.max(a.line, b.line);
       let ranges = [];
       if (a.off > MaxOff || b.off > MaxOff || a.col < 0 || b.col < 0) {
           let startOff = Math.min(a.off, b.off), endOff = Math.max(a.off, b.off);
           for (let i = startLine; i <= endLine; i++) {
               let line = state.doc.line(i);
               if (line.length <= endOff)
                   ranges.push(EditorSelection.range(line.from + startOff, line.to + endOff));
           }
       }
       else {
           let startCol = Math.min(a.col, b.col), endCol = Math.max(a.col, b.col);
           for (let i = startLine; i <= endLine; i++) {
               let line = state.doc.line(i);
               let start = findColumn(line.text, startCol, state.tabSize, true);
               if (start < 0) {
                   ranges.push(EditorSelection.cursor(line.to));
               }
               else {
                   let end = findColumn(line.text, endCol, state.tabSize);
                   ranges.push(EditorSelection.range(line.from + start, line.from + end));
               }
           }
       }
       return ranges;
   }
   function absoluteColumn(view, x) {
       let ref = view.coordsAtPos(view.viewport.from);
       return ref ? Math.round(Math.abs((ref.left - x) / view.defaultCharacterWidth)) : -1;
   }
   function getPos(view, event) {
       let offset = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
       let line = view.state.doc.lineAt(offset), off = offset - line.from;
       let col = off > MaxOff ? -1
           : off == line.length ? absoluteColumn(view, event.clientX)
               : countColumn(line.text, view.state.tabSize, offset - line.from);
       return { line: line.number, col, off };
   }
   function rectangleSelectionStyle(view, event) {
       let start = getPos(view, event), startSel = view.state.selection;
       if (!start)
           return null;
       return {
           update(update) {
               if (update.docChanged) {
                   let newStart = update.changes.mapPos(update.startState.doc.line(start.line).from);
                   let newLine = update.state.doc.lineAt(newStart);
                   start = { line: newLine.number, col: start.col, off: Math.min(start.off, newLine.length) };
                   startSel = startSel.map(update.changes);
               }
           },
           get(event, _extend, multiple) {
               let cur = getPos(view, event);
               if (!cur)
                   return startSel;
               let ranges = rectangleFor(view.state, start, cur);
               if (!ranges.length)
                   return startSel;
               if (multiple)
                   return EditorSelection.create(ranges.concat(startSel.ranges));
               else
                   return EditorSelection.create(ranges);
           }
       };
   }
   /**
   Create an extension that enables rectangular selections. By
   default, it will react to left mouse drag with the Alt key held
   down. When such a selection occurs, the text within the rectangle
   that was dragged over will be selected, as one selection
   [range](https://codemirror.net/6/docs/ref/#state.SelectionRange) per line.
   */
   function rectangularSelection(options) {
       let filter = (options === null || options === void 0 ? void 0 : options.eventFilter) || (e => e.altKey && e.button == 0);
       return EditorView.mouseSelectionStyle.of((view, event) => filter(event) ? rectangleSelectionStyle(view, event) : null);
   }
   const keys = {
       Alt: [18, e => !!e.altKey],
       Control: [17, e => !!e.ctrlKey],
       Shift: [16, e => !!e.shiftKey],
       Meta: [91, e => !!e.metaKey]
   };
   const showCrosshair = { style: "cursor: crosshair" };
   /**
   Returns an extension that turns the pointer cursor into a
   crosshair when a given modifier key, defaulting to Alt, is held
   down. Can serve as a visual hint that rectangular selection is
   going to happen when paired with
   [`rectangularSelection`](https://codemirror.net/6/docs/ref/#view.rectangularSelection).
   */
   function crosshairCursor(options = {}) {
       let [code, getter] = keys[options.key || "Alt"];
       let plugin = ViewPlugin.fromClass(class {
           constructor(view) {
               this.view = view;
               this.isDown = false;
           }
           set(isDown) {
               if (this.isDown != isDown) {
                   this.isDown = isDown;
                   this.view.update([]);
               }
           }
       }, {
           eventHandlers: {
               keydown(e) {
                   this.set(e.keyCode == code || getter(e));
               },
               keyup(e) {
                   if (e.keyCode == code || !getter(e))
                       this.set(false);
               },
               mousemove(e) {
                   this.set(getter(e));
               }
           }
       });
       return [
           plugin,
           EditorView.contentAttributes.of(view => { var _a; return ((_a = view.plugin(plugin)) === null || _a === void 0 ? void 0 : _a.isDown) ? showCrosshair : null; })
       ];
   }

   const Outside = "-10000px";
   class TooltipViewManager {
       constructor(view, facet, createTooltipView) {
           this.facet = facet;
           this.createTooltipView = createTooltipView;
           this.input = view.state.facet(facet);
           this.tooltips = this.input.filter(t => t);
           this.tooltipViews = this.tooltips.map(createTooltipView);
       }
       update(update) {
           var _a;
           let input = update.state.facet(this.facet);
           let tooltips = input.filter(x => x);
           if (input === this.input) {
               for (let t of this.tooltipViews)
                   if (t.update)
                       t.update(update);
               return false;
           }
           let tooltipViews = [];
           for (let i = 0; i < tooltips.length; i++) {
               let tip = tooltips[i], known = -1;
               if (!tip)
                   continue;
               for (let i = 0; i < this.tooltips.length; i++) {
                   let other = this.tooltips[i];
                   if (other && other.create == tip.create)
                       known = i;
               }
               if (known < 0) {
                   tooltipViews[i] = this.createTooltipView(tip);
               }
               else {
                   let tooltipView = tooltipViews[i] = this.tooltipViews[known];
                   if (tooltipView.update)
                       tooltipView.update(update);
               }
           }
           for (let t of this.tooltipViews)
               if (tooltipViews.indexOf(t) < 0) {
                   t.dom.remove();
                   (_a = t.destroy) === null || _a === void 0 ? void 0 : _a.call(t);
               }
           this.input = input;
           this.tooltips = tooltips;
           this.tooltipViews = tooltipViews;
           return true;
       }
   }
   function windowSpace(view) {
       let { win } = view;
       return { top: 0, left: 0, bottom: win.innerHeight, right: win.innerWidth };
   }
   const tooltipConfig = /*@__PURE__*/Facet.define({
       combine: values => {
           var _a, _b, _c;
           return ({
               position: browser.ios ? "absolute" : ((_a = values.find(conf => conf.position)) === null || _a === void 0 ? void 0 : _a.position) || "fixed",
               parent: ((_b = values.find(conf => conf.parent)) === null || _b === void 0 ? void 0 : _b.parent) || null,
               tooltipSpace: ((_c = values.find(conf => conf.tooltipSpace)) === null || _c === void 0 ? void 0 : _c.tooltipSpace) || windowSpace,
           });
       }
   });
   const knownHeight = /*@__PURE__*/new WeakMap();
   const tooltipPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
       constructor(view) {
           this.view = view;
           this.inView = true;
           this.lastTransaction = 0;
           this.measureTimeout = -1;
           let config = view.state.facet(tooltipConfig);
           this.position = config.position;
           this.parent = config.parent;
           this.classes = view.themeClasses;
           this.createContainer();
           this.measureReq = { read: this.readMeasure.bind(this), write: this.writeMeasure.bind(this), key: this };
           this.manager = new TooltipViewManager(view, showTooltip, t => this.createTooltip(t));
           this.intersectionObserver = typeof IntersectionObserver == "function" ? new IntersectionObserver(entries => {
               if (Date.now() > this.lastTransaction - 50 &&
                   entries.length > 0 && entries[entries.length - 1].intersectionRatio < 1)
                   this.measureSoon();
           }, { threshold: [1] }) : null;
           this.observeIntersection();
           view.win.addEventListener("resize", this.measureSoon = this.measureSoon.bind(this));
           this.maybeMeasure();
       }
       createContainer() {
           if (this.parent) {
               this.container = document.createElement("div");
               this.container.style.position = "relative";
               this.container.className = this.view.themeClasses;
               this.parent.appendChild(this.container);
           }
           else {
               this.container = this.view.dom;
           }
       }
       observeIntersection() {
           if (this.intersectionObserver) {
               this.intersectionObserver.disconnect();
               for (let tooltip of this.manager.tooltipViews)
                   this.intersectionObserver.observe(tooltip.dom);
           }
       }
       measureSoon() {
           if (this.measureTimeout < 0)
               this.measureTimeout = setTimeout(() => {
                   this.measureTimeout = -1;
                   this.maybeMeasure();
               }, 50);
       }
       update(update) {
           if (update.transactions.length)
               this.lastTransaction = Date.now();
           let updated = this.manager.update(update);
           if (updated)
               this.observeIntersection();
           let shouldMeasure = updated || update.geometryChanged;
           let newConfig = update.state.facet(tooltipConfig);
           if (newConfig.position != this.position) {
               this.position = newConfig.position;
               for (let t of this.manager.tooltipViews)
                   t.dom.style.position = this.position;
               shouldMeasure = true;
           }
           if (newConfig.parent != this.parent) {
               if (this.parent)
                   this.container.remove();
               this.parent = newConfig.parent;
               this.createContainer();
               for (let t of this.manager.tooltipViews)
                   this.container.appendChild(t.dom);
               shouldMeasure = true;
           }
           else if (this.parent && this.view.themeClasses != this.classes) {
               this.classes = this.container.className = this.view.themeClasses;
           }
           if (shouldMeasure)
               this.maybeMeasure();
       }
       createTooltip(tooltip) {
           let tooltipView = tooltip.create(this.view);
           tooltipView.dom.classList.add("cm-tooltip");
           if (tooltip.arrow && !tooltipView.dom.querySelector(".cm-tooltip > .cm-tooltip-arrow")) {
               let arrow = document.createElement("div");
               arrow.className = "cm-tooltip-arrow";
               tooltipView.dom.appendChild(arrow);
           }
           tooltipView.dom.style.position = this.position;
           tooltipView.dom.style.top = Outside;
           this.container.appendChild(tooltipView.dom);
           if (tooltipView.mount)
               tooltipView.mount(this.view);
           return tooltipView;
       }
       destroy() {
           var _a, _b;
           this.view.win.removeEventListener("resize", this.measureSoon);
           for (let tooltipView of this.manager.tooltipViews) {
               tooltipView.dom.remove();
               (_a = tooltipView.destroy) === null || _a === void 0 ? void 0 : _a.call(tooltipView);
           }
           (_b = this.intersectionObserver) === null || _b === void 0 ? void 0 : _b.disconnect();
           clearTimeout(this.measureTimeout);
       }
       readMeasure() {
           let editor = this.view.dom.getBoundingClientRect();
           return {
               editor,
               parent: this.parent ? this.container.getBoundingClientRect() : editor,
               pos: this.manager.tooltips.map((t, i) => {
                   let tv = this.manager.tooltipViews[i];
                   return tv.getCoords ? tv.getCoords(t.pos) : this.view.coordsAtPos(t.pos);
               }),
               size: this.manager.tooltipViews.map(({ dom }) => dom.getBoundingClientRect()),
               space: this.view.state.facet(tooltipConfig).tooltipSpace(this.view),
           };
       }
       writeMeasure(measured) {
           var _a;
           let { editor, space } = measured;
           let others = [];
           for (let i = 0; i < this.manager.tooltips.length; i++) {
               let tooltip = this.manager.tooltips[i], tView = this.manager.tooltipViews[i], { dom } = tView;
               let pos = measured.pos[i], size = measured.size[i];
               // Hide tooltips that are outside of the editor.
               if (!pos || pos.bottom <= Math.max(editor.top, space.top) ||
                   pos.top >= Math.min(editor.bottom, space.bottom) ||
                   pos.right < Math.max(editor.left, space.left) - .1 ||
                   pos.left > Math.min(editor.right, space.right) + .1) {
                   dom.style.top = Outside;
                   continue;
               }
               let arrow = tooltip.arrow ? tView.dom.querySelector(".cm-tooltip-arrow") : null;
               let arrowHeight = arrow ? 7 /* Arrow.Size */ : 0;
               let width = size.right - size.left, height = (_a = knownHeight.get(tView)) !== null && _a !== void 0 ? _a : size.bottom - size.top;
               let offset = tView.offset || noOffset, ltr = this.view.textDirection == Direction.LTR;
               let left = size.width > space.right - space.left ? (ltr ? space.left : space.right - size.width)
                   : ltr ? Math.min(pos.left - (arrow ? 14 /* Arrow.Offset */ : 0) + offset.x, space.right - width)
                       : Math.max(space.left, pos.left - width + (arrow ? 14 /* Arrow.Offset */ : 0) - offset.x);
               let above = !!tooltip.above;
               if (!tooltip.strictSide && (above
                   ? pos.top - (size.bottom - size.top) - offset.y < space.top
                   : pos.bottom + (size.bottom - size.top) + offset.y > space.bottom) &&
                   above == (space.bottom - pos.bottom > pos.top - space.top))
                   above = !above;
               let spaceVert = (above ? pos.top - space.top : space.bottom - pos.bottom) - arrowHeight;
               if (spaceVert < height && tView.resize !== false) {
                   if (spaceVert < this.view.defaultLineHeight) {
                       dom.style.top = Outside;
                       continue;
                   }
                   knownHeight.set(tView, height);
                   dom.style.height = (height = spaceVert) + "px";
               }
               else if (dom.style.height) {
                   dom.style.height = "";
               }
               let top = above ? pos.top - height - arrowHeight - offset.y : pos.bottom + arrowHeight + offset.y;
               let right = left + width;
               if (tView.overlap !== true)
                   for (let r of others)
                       if (r.left < right && r.right > left && r.top < top + height && r.bottom > top)
                           top = above ? r.top - height - 2 - arrowHeight : r.bottom + arrowHeight + 2;
               if (this.position == "absolute") {
                   dom.style.top = (top - measured.parent.top) + "px";
                   dom.style.left = (left - measured.parent.left) + "px";
               }
               else {
                   dom.style.top = top + "px";
                   dom.style.left = left + "px";
               }
               if (arrow)
                   arrow.style.left = `${pos.left + (ltr ? offset.x : -offset.x) - (left + 14 /* Arrow.Offset */ - 7 /* Arrow.Size */)}px`;
               if (tView.overlap !== true)
                   others.push({ left, top, right, bottom: top + height });
               dom.classList.toggle("cm-tooltip-above", above);
               dom.classList.toggle("cm-tooltip-below", !above);
               if (tView.positioned)
                   tView.positioned(measured.space);
           }
       }
       maybeMeasure() {
           if (this.manager.tooltips.length) {
               if (this.view.inView)
                   this.view.requestMeasure(this.measureReq);
               if (this.inView != this.view.inView) {
                   this.inView = this.view.inView;
                   if (!this.inView)
                       for (let tv of this.manager.tooltipViews)
                           tv.dom.style.top = Outside;
               }
           }
       }
   }, {
       eventHandlers: {
           scroll() { this.maybeMeasure(); }
       }
   });
   const baseTheme$4 = /*@__PURE__*/EditorView.baseTheme({
       ".cm-tooltip": {
           zIndex: 100,
           boxSizing: "border-box"
       },
       "&light .cm-tooltip": {
           border: "1px solid #bbb",
           backgroundColor: "#f5f5f5"
       },
       "&light .cm-tooltip-section:not(:first-child)": {
           borderTop: "1px solid #bbb",
       },
       "&dark .cm-tooltip": {
           backgroundColor: "#333338",
           color: "white"
       },
       ".cm-tooltip-arrow": {
           height: `${7 /* Arrow.Size */}px`,
           width: `${7 /* Arrow.Size */ * 2}px`,
           position: "absolute",
           zIndex: -1,
           overflow: "hidden",
           "&:before, &:after": {
               content: "''",
               position: "absolute",
               width: 0,
               height: 0,
               borderLeft: `${7 /* Arrow.Size */}px solid transparent`,
               borderRight: `${7 /* Arrow.Size */}px solid transparent`,
           },
           ".cm-tooltip-above &": {
               bottom: `-${7 /* Arrow.Size */}px`,
               "&:before": {
                   borderTop: `${7 /* Arrow.Size */}px solid #bbb`,
               },
               "&:after": {
                   borderTop: `${7 /* Arrow.Size */}px solid #f5f5f5`,
                   bottom: "1px"
               }
           },
           ".cm-tooltip-below &": {
               top: `-${7 /* Arrow.Size */}px`,
               "&:before": {
                   borderBottom: `${7 /* Arrow.Size */}px solid #bbb`,
               },
               "&:after": {
                   borderBottom: `${7 /* Arrow.Size */}px solid #f5f5f5`,
                   top: "1px"
               }
           },
       },
       "&dark .cm-tooltip .cm-tooltip-arrow": {
           "&:before": {
               borderTopColor: "#333338",
               borderBottomColor: "#333338"
           },
           "&:after": {
               borderTopColor: "transparent",
               borderBottomColor: "transparent"
           }
       }
   });
   const noOffset = { x: 0, y: 0 };
   /**
   Facet to which an extension can add a value to show a tooltip.
   */
   const showTooltip = /*@__PURE__*/Facet.define({
       enables: [tooltipPlugin, baseTheme$4]
   });
   /**
   Get the active tooltip view for a given tooltip, if available.
   */
   function getTooltip(view, tooltip) {
       let plugin = view.plugin(tooltipPlugin);
       if (!plugin)
           return null;
       let found = plugin.manager.tooltips.indexOf(tooltip);
       return found < 0 ? null : plugin.manager.tooltipViews[found];
   }

   const panelConfig = /*@__PURE__*/Facet.define({
       combine(configs) {
           let topContainer, bottomContainer;
           for (let c of configs) {
               topContainer = topContainer || c.topContainer;
               bottomContainer = bottomContainer || c.bottomContainer;
           }
           return { topContainer, bottomContainer };
       }
   });
   /**
   Get the active panel created by the given constructor, if any.
   This can be useful when you need access to your panels' DOM
   structure.
   */
   function getPanel(view, panel) {
       let plugin = view.plugin(panelPlugin);
       let index = plugin ? plugin.specs.indexOf(panel) : -1;
       return index > -1 ? plugin.panels[index] : null;
   }
   const panelPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
       constructor(view) {
           this.input = view.state.facet(showPanel);
           this.specs = this.input.filter(s => s);
           this.panels = this.specs.map(spec => spec(view));
           let conf = view.state.facet(panelConfig);
           this.top = new PanelGroup(view, true, conf.topContainer);
           this.bottom = new PanelGroup(view, false, conf.bottomContainer);
           this.top.sync(this.panels.filter(p => p.top));
           this.bottom.sync(this.panels.filter(p => !p.top));
           for (let p of this.panels) {
               p.dom.classList.add("cm-panel");
               if (p.mount)
                   p.mount();
           }
       }
       update(update) {
           let conf = update.state.facet(panelConfig);
           if (this.top.container != conf.topContainer) {
               this.top.sync([]);
               this.top = new PanelGroup(update.view, true, conf.topContainer);
           }
           if (this.bottom.container != conf.bottomContainer) {
               this.bottom.sync([]);
               this.bottom = new PanelGroup(update.view, false, conf.bottomContainer);
           }
           this.top.syncClasses();
           this.bottom.syncClasses();
           let input = update.state.facet(showPanel);
           if (input != this.input) {
               let specs = input.filter(x => x);
               let panels = [], top = [], bottom = [], mount = [];
               for (let spec of specs) {
                   let known = this.specs.indexOf(spec), panel;
                   if (known < 0) {
                       panel = spec(update.view);
                       mount.push(panel);
                   }
                   else {
                       panel = this.panels[known];
                       if (panel.update)
                           panel.update(update);
                   }
                   panels.push(panel);
                   (panel.top ? top : bottom).push(panel);
               }
               this.specs = specs;
               this.panels = panels;
               this.top.sync(top);
               this.bottom.sync(bottom);
               for (let p of mount) {
                   p.dom.classList.add("cm-panel");
                   if (p.mount)
                       p.mount();
               }
           }
           else {
               for (let p of this.panels)
                   if (p.update)
                       p.update(update);
           }
       }
       destroy() {
           this.top.sync([]);
           this.bottom.sync([]);
       }
   }, {
       provide: plugin => EditorView.scrollMargins.of(view => {
           let value = view.plugin(plugin);
           return value && { top: value.top.scrollMargin(), bottom: value.bottom.scrollMargin() };
       })
   });
   class PanelGroup {
       constructor(view, top, container) {
           this.view = view;
           this.top = top;
           this.container = container;
           this.dom = undefined;
           this.classes = "";
           this.panels = [];
           this.syncClasses();
       }
       sync(panels) {
           for (let p of this.panels)
               if (p.destroy && panels.indexOf(p) < 0)
                   p.destroy();
           this.panels = panels;
           this.syncDOM();
       }
       syncDOM() {
           if (this.panels.length == 0) {
               if (this.dom) {
                   this.dom.remove();
                   this.dom = undefined;
               }
               return;
           }
           if (!this.dom) {
               this.dom = document.createElement("div");
               this.dom.className = this.top ? "cm-panels cm-panels-top" : "cm-panels cm-panels-bottom";
               this.dom.style[this.top ? "top" : "bottom"] = "0";
               let parent = this.container || this.view.dom;
               parent.insertBefore(this.dom, this.top ? parent.firstChild : null);
           }
           let curDOM = this.dom.firstChild;
           for (let panel of this.panels) {
               if (panel.dom.parentNode == this.dom) {
                   while (curDOM != panel.dom)
                       curDOM = rm(curDOM);
                   curDOM = curDOM.nextSibling;
               }
               else {
                   this.dom.insertBefore(panel.dom, curDOM);
               }
           }
           while (curDOM)
               curDOM = rm(curDOM);
       }
       scrollMargin() {
           return !this.dom || this.container ? 0
               : Math.max(0, this.top ?
                   this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) :
                   Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top);
       }
       syncClasses() {
           if (!this.container || this.classes == this.view.themeClasses)
               return;
           for (let cls of this.classes.split(" "))
               if (cls)
                   this.container.classList.remove(cls);
           for (let cls of (this.classes = this.view.themeClasses).split(" "))
               if (cls)
                   this.container.classList.add(cls);
       }
   }
   function rm(node) {
       let next = node.nextSibling;
       node.remove();
       return next;
   }
   /**
   Opening a panel is done by providing a constructor function for
   the panel through this facet. (The panel is closed again when its
   constructor is no longer provided.) Values of `null` are ignored.
   */
   const showPanel = /*@__PURE__*/Facet.define({
       enables: panelPlugin
   });

   /**
   A gutter marker represents a bit of information attached to a line
   in a specific gutter. Your own custom markers have to extend this
   class.
   */
   class GutterMarker extends RangeValue {
       /**
       @internal
       */
       compare(other) {
           return this == other || this.constructor == other.constructor && this.eq(other);
       }
       /**
       Compare this marker to another marker of the same type.
       */
       eq(other) { return false; }
       /**
       Called if the marker has a `toDOM` method and its representation
       was removed from a gutter.
       */
       destroy(dom) { }
   }
   GutterMarker.prototype.elementClass = "";
   GutterMarker.prototype.toDOM = undefined;
   GutterMarker.prototype.mapMode = MapMode.TrackBefore;
   GutterMarker.prototype.startSide = GutterMarker.prototype.endSide = -1;
   GutterMarker.prototype.point = true;

   // FIXME profile adding a per-Tree TreeNode cache, validating it by
   // parent pointer
   /// The default maximum length of a `TreeBuffer` node.
   const DefaultBufferLength = 1024;
   let nextPropID = 0;
   class Range {
       constructor(from, to) {
           this.from = from;
           this.to = to;
       }
   }
   /// Each [node type](#common.NodeType) or [individual tree](#common.Tree)
   /// can have metadata associated with it in props. Instances of this
   /// class represent prop names.
   class NodeProp {
       /// Create a new node prop type.
       constructor(config = {}) {
           this.id = nextPropID++;
           this.perNode = !!config.perNode;
           this.deserialize = config.deserialize || (() => {
               throw new Error("This node type doesn't define a deserialize function");
           });
       }
       /// This is meant to be used with
       /// [`NodeSet.extend`](#common.NodeSet.extend) or
       /// [`LRParser.configure`](#lr.ParserConfig.props) to compute
       /// prop values for each node type in the set. Takes a [match
       /// object](#common.NodeType^match) or function that returns undefined
       /// if the node type doesn't get this prop, and the prop's value if
       /// it does.
       add(match) {
           if (this.perNode)
               throw new RangeError("Can't add per-node props to node types");
           if (typeof match != "function")
               match = NodeType.match(match);
           return (type) => {
               let result = match(type);
               return result === undefined ? null : [this, result];
           };
       }
   }
   /// Prop that is used to describe matching delimiters. For opening
   /// delimiters, this holds an array of node names (written as a
   /// space-separated string when declaring this prop in a grammar)
   /// for the node types of closing delimiters that match it.
   NodeProp.closedBy = new NodeProp({ deserialize: str => str.split(" ") });
   /// The inverse of [`closedBy`](#common.NodeProp^closedBy). This is
   /// attached to closing delimiters, holding an array of node names
   /// of types of matching opening delimiters.
   NodeProp.openedBy = new NodeProp({ deserialize: str => str.split(" ") });
   /// Used to assign node types to groups (for example, all node
   /// types that represent an expression could be tagged with an
   /// `"Expression"` group).
   NodeProp.group = new NodeProp({ deserialize: str => str.split(" ") });
   /// The hash of the [context](#lr.ContextTracker.constructor)
   /// that the node was parsed in, if any. Used to limit reuse of
   /// contextual nodes.
   NodeProp.contextHash = new NodeProp({ perNode: true });
   /// The distance beyond the end of the node that the tokenizer
   /// looked ahead for any of the tokens inside the node. (The LR
   /// parser only stores this when it is larger than 25, for
   /// efficiency reasons.)
   NodeProp.lookAhead = new NodeProp({ perNode: true });
   /// This per-node prop is used to replace a given node, or part of a
   /// node, with another tree. This is useful to include trees from
   /// different languages in mixed-language parsers.
   NodeProp.mounted = new NodeProp({ perNode: true });
   /// A mounted tree, which can be [stored](#common.NodeProp^mounted) on
   /// a tree node to indicate that parts of its content are
   /// represented by another tree.
   class MountedTree {
       constructor(
       /// The inner tree.
       tree, 
       /// If this is null, this tree replaces the entire node (it will
       /// be included in the regular iteration instead of its host
       /// node). If not, only the given ranges are considered to be
       /// covered by this tree. This is used for trees that are mixed in
       /// a way that isn't strictly hierarchical. Such mounted trees are
       /// only entered by [`resolveInner`](#common.Tree.resolveInner)
       /// and [`enter`](#common.SyntaxNode.enter).
       overlay, 
       /// The parser used to create this subtree.
       parser) {
           this.tree = tree;
           this.overlay = overlay;
           this.parser = parser;
       }
   }
   const noProps = Object.create(null);
   /// Each node in a syntax tree has a node type associated with it.
   class NodeType {
       /// @internal
       constructor(
       /// The name of the node type. Not necessarily unique, but if the
       /// grammar was written properly, different node types with the
       /// same name within a node set should play the same semantic
       /// role.
       name, 
       /// @internal
       props, 
       /// The id of this node in its set. Corresponds to the term ids
       /// used in the parser.
       id, 
       /// @internal
       flags = 0) {
           this.name = name;
           this.props = props;
           this.id = id;
           this.flags = flags;
       }
       /// Define a node type.
       static define(spec) {
           let props = spec.props && spec.props.length ? Object.create(null) : noProps;
           let flags = (spec.top ? 1 /* NodeFlag.Top */ : 0) | (spec.skipped ? 2 /* NodeFlag.Skipped */ : 0) |
               (spec.error ? 4 /* NodeFlag.Error */ : 0) | (spec.name == null ? 8 /* NodeFlag.Anonymous */ : 0);
           let type = new NodeType(spec.name || "", props, spec.id, flags);
           if (spec.props)
               for (let src of spec.props) {
                   if (!Array.isArray(src))
                       src = src(type);
                   if (src) {
                       if (src[0].perNode)
                           throw new RangeError("Can't store a per-node prop on a node type");
                       props[src[0].id] = src[1];
                   }
               }
           return type;
       }
       /// Retrieves a node prop for this type. Will return `undefined` if
       /// the prop isn't present on this node.
       prop(prop) { return this.props[prop.id]; }
       /// True when this is the top node of a grammar.
       get isTop() { return (this.flags & 1 /* NodeFlag.Top */) > 0; }
       /// True when this node is produced by a skip rule.
       get isSkipped() { return (this.flags & 2 /* NodeFlag.Skipped */) > 0; }
       /// Indicates whether this is an error node.
       get isError() { return (this.flags & 4 /* NodeFlag.Error */) > 0; }
       /// When true, this node type doesn't correspond to a user-declared
       /// named node, for example because it is used to cache repetition.
       get isAnonymous() { return (this.flags & 8 /* NodeFlag.Anonymous */) > 0; }
       /// Returns true when this node's name or one of its
       /// [groups](#common.NodeProp^group) matches the given string.
       is(name) {
           if (typeof name == 'string') {
               if (this.name == name)
                   return true;
               let group = this.prop(NodeProp.group);
               return group ? group.indexOf(name) > -1 : false;
           }
           return this.id == name;
       }
       /// Create a function from node types to arbitrary values by
       /// specifying an object whose property names are node or
       /// [group](#common.NodeProp^group) names. Often useful with
       /// [`NodeProp.add`](#common.NodeProp.add). You can put multiple
       /// names, separated by spaces, in a single property name to map
       /// multiple node names to a single value.
       static match(map) {
           let direct = Object.create(null);
           for (let prop in map)
               for (let name of prop.split(" "))
                   direct[name] = map[prop];
           return (node) => {
               for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {
                   let found = direct[i < 0 ? node.name : groups[i]];
                   if (found)
                       return found;
               }
           };
       }
   }
   /// An empty dummy node type to use when no actual type is available.
   NodeType.none = new NodeType("", Object.create(null), 0, 8 /* NodeFlag.Anonymous */);
   /// A node set holds a collection of node types. It is used to
   /// compactly represent trees by storing their type ids, rather than a
   /// full pointer to the type object, in a numeric array. Each parser
   /// [has](#lr.LRParser.nodeSet) a node set, and [tree
   /// buffers](#common.TreeBuffer) can only store collections of nodes
   /// from the same set. A set can have a maximum of 2**16 (65536) node
   /// types in it, so that the ids fit into 16-bit typed array slots.
   class NodeSet {
       /// Create a set with the given types. The `id` property of each
       /// type should correspond to its position within the array.
       constructor(
       /// The node types in this set, by id.
       types) {
           this.types = types;
           for (let i = 0; i < types.length; i++)
               if (types[i].id != i)
                   throw new RangeError("Node type ids should correspond to array positions when creating a node set");
       }
       /// Create a copy of this set with some node properties added. The
       /// arguments to this method can be created with
       /// [`NodeProp.add`](#common.NodeProp.add).
       extend(...props) {
           let newTypes = [];
           for (let type of this.types) {
               let newProps = null;
               for (let source of props) {
                   let add = source(type);
                   if (add) {
                       if (!newProps)
                           newProps = Object.assign({}, type.props);
                       newProps[add[0].id] = add[1];
                   }
               }
               newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);
           }
           return new NodeSet(newTypes);
       }
   }
   const CachedNode = new WeakMap(), CachedInnerNode = new WeakMap();
   /// Options that control iteration. Can be combined with the `|`
   /// operator to enable multiple ones.
   var IterMode;
   (function (IterMode) {
       /// When enabled, iteration will only visit [`Tree`](#common.Tree)
       /// objects, not nodes packed into
       /// [`TreeBuffer`](#common.TreeBuffer)s.
       IterMode[IterMode["ExcludeBuffers"] = 1] = "ExcludeBuffers";
       /// Enable this to make iteration include anonymous nodes (such as
       /// the nodes that wrap repeated grammar constructs into a balanced
       /// tree).
       IterMode[IterMode["IncludeAnonymous"] = 2] = "IncludeAnonymous";
       /// By default, regular [mounted](#common.NodeProp^mounted) nodes
       /// replace their base node in iteration. Enable this to ignore them
       /// instead.
       IterMode[IterMode["IgnoreMounts"] = 4] = "IgnoreMounts";
       /// This option only applies in
       /// [`enter`](#common.SyntaxNode.enter)-style methods. It tells the
       /// library to not enter mounted overlays if one covers the given
       /// position.
       IterMode[IterMode["IgnoreOverlays"] = 8] = "IgnoreOverlays";
   })(IterMode || (IterMode = {}));
   /// A piece of syntax tree. There are two ways to approach these
   /// trees: the way they are actually stored in memory, and the
   /// convenient way.
   ///
   /// Syntax trees are stored as a tree of `Tree` and `TreeBuffer`
   /// objects. By packing detail information into `TreeBuffer` leaf
   /// nodes, the representation is made a lot more memory-efficient.
   ///
   /// However, when you want to actually work with tree nodes, this
   /// representation is very awkward, so most client code will want to
   /// use the [`TreeCursor`](#common.TreeCursor) or
   /// [`SyntaxNode`](#common.SyntaxNode) interface instead, which provides
   /// a view on some part of this data structure, and can be used to
   /// move around to adjacent nodes.
   class Tree {
       /// Construct a new tree. See also [`Tree.build`](#common.Tree^build).
       constructor(
       /// The type of the top node.
       type, 
       /// This node's child nodes.
       children, 
       /// The positions (offsets relative to the start of this tree) of
       /// the children.
       positions, 
       /// The total length of this tree
       length, 
       /// Per-node [node props](#common.NodeProp) to associate with this node.
       props) {
           this.type = type;
           this.children = children;
           this.positions = positions;
           this.length = length;
           /// @internal
           this.props = null;
           if (props && props.length) {
               this.props = Object.create(null);
               for (let [prop, value] of props)
                   this.props[typeof prop == "number" ? prop : prop.id] = value;
           }
       }
       /// @internal
       toString() {
           let mounted = this.prop(NodeProp.mounted);
           if (mounted && !mounted.overlay)
               return mounted.tree.toString();
           let children = "";
           for (let ch of this.children) {
               let str = ch.toString();
               if (str) {
                   if (children)
                       children += ",";
                   children += str;
               }
           }
           return !this.type.name ? children :
               (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) +
                   (children.length ? "(" + children + ")" : "");
       }
       /// Get a [tree cursor](#common.TreeCursor) positioned at the top of
       /// the tree. Mode can be used to [control](#common.IterMode) which
       /// nodes the cursor visits.
       cursor(mode = 0) {
           return new TreeCursor(this.topNode, mode);
       }
       /// Get a [tree cursor](#common.TreeCursor) pointing into this tree
       /// at the given position and side (see
       /// [`moveTo`](#common.TreeCursor.moveTo).
       cursorAt(pos, side = 0, mode = 0) {
           let scope = CachedNode.get(this) || this.topNode;
           let cursor = new TreeCursor(scope);
           cursor.moveTo(pos, side);
           CachedNode.set(this, cursor._tree);
           return cursor;
       }
       /// Get a [syntax node](#common.SyntaxNode) object for the top of the
       /// tree.
       get topNode() {
           return new TreeNode(this, 0, 0, null);
       }
       /// Get the [syntax node](#common.SyntaxNode) at the given position.
       /// If `side` is -1, this will move into nodes that end at the
       /// position. If 1, it'll move into nodes that start at the
       /// position. With 0, it'll only enter nodes that cover the position
       /// from both sides.
       ///
       /// Note that this will not enter
       /// [overlays](#common.MountedTree.overlay), and you often want
       /// [`resolveInner`](#common.Tree.resolveInner) instead.
       resolve(pos, side = 0) {
           let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);
           CachedNode.set(this, node);
           return node;
       }
       /// Like [`resolve`](#common.Tree.resolve), but will enter
       /// [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node
       /// pointing into the innermost overlaid tree at the given position
       /// (with parent links going through all parent structure, including
       /// the host trees).
       resolveInner(pos, side = 0) {
           let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);
           CachedInnerNode.set(this, node);
           return node;
       }
       /// Iterate over the tree and its children, calling `enter` for any
       /// node that touches the `from`/`to` region (if given) before
       /// running over such a node's children, and `leave` (if given) when
       /// leaving the node. When `enter` returns `false`, that node will
       /// not have its children iterated over (or `leave` called).
       iterate(spec) {
           let { enter, leave, from = 0, to = this.length } = spec;
           let mode = spec.mode || 0, anon = (mode & IterMode.IncludeAnonymous) > 0;
           for (let c = this.cursor(mode | IterMode.IncludeAnonymous);;) {
               let entered = false;
               if (c.from <= to && c.to >= from && (!anon && c.type.isAnonymous || enter(c) !== false)) {
                   if (c.firstChild())
                       continue;
                   entered = true;
               }
               for (;;) {
                   if (entered && leave && (anon || !c.type.isAnonymous))
                       leave(c);
                   if (c.nextSibling())
                       break;
                   if (!c.parent())
                       return;
                   entered = true;
               }
           }
       }
       /// Get the value of the given [node prop](#common.NodeProp) for this
       /// node. Works with both per-node and per-type props.
       prop(prop) {
           return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : undefined;
       }
       /// Returns the node's [per-node props](#common.NodeProp.perNode) in a
       /// format that can be passed to the [`Tree`](#common.Tree)
       /// constructor.
       get propValues() {
           let result = [];
           if (this.props)
               for (let id in this.props)
                   result.push([+id, this.props[id]]);
           return result;
       }
       /// Balance the direct children of this tree, producing a copy of
       /// which may have children grouped into subtrees with type
       /// [`NodeType.none`](#common.NodeType^none).
       balance(config = {}) {
           return this.children.length <= 8 /* Balance.BranchFactor */ ? this :
               balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new Tree(this.type, children, positions, length, this.propValues), config.makeTree || ((children, positions, length) => new Tree(NodeType.none, children, positions, length)));
       }
       /// Build a tree from a postfix-ordered buffer of node information,
       /// or a cursor over such a buffer.
       static build(data) { return buildTree(data); }
   }
   /// The empty tree
   Tree.empty = new Tree(NodeType.none, [], [], 0);
   class FlatBufferCursor {
       constructor(buffer, index) {
           this.buffer = buffer;
           this.index = index;
       }
       get id() { return this.buffer[this.index - 4]; }
       get start() { return this.buffer[this.index - 3]; }
       get end() { return this.buffer[this.index - 2]; }
       get size() { return this.buffer[this.index - 1]; }
       get pos() { return this.index; }
       next() { this.index -= 4; }
       fork() { return new FlatBufferCursor(this.buffer, this.index); }
   }
   /// Tree buffers contain (type, start, end, endIndex) quads for each
   /// node. In such a buffer, nodes are stored in prefix order (parents
   /// before children, with the endIndex of the parent indicating which
   /// children belong to it).
   class TreeBuffer {
       /// Create a tree buffer.
       constructor(
       /// The buffer's content.
       buffer, 
       /// The total length of the group of nodes in the buffer.
       length, 
       /// The node set used in this buffer.
       set) {
           this.buffer = buffer;
           this.length = length;
           this.set = set;
       }
       /// @internal
       get type() { return NodeType.none; }
       /// @internal
       toString() {
           let result = [];
           for (let index = 0; index < this.buffer.length;) {
               result.push(this.childString(index));
               index = this.buffer[index + 3];
           }
           return result.join(",");
       }
       /// @internal
       childString(index) {
           let id = this.buffer[index], endIndex = this.buffer[index + 3];
           let type = this.set.types[id], result = type.name;
           if (/\W/.test(result) && !type.isError)
               result = JSON.stringify(result);
           index += 4;
           if (endIndex == index)
               return result;
           let children = [];
           while (index < endIndex) {
               children.push(this.childString(index));
               index = this.buffer[index + 3];
           }
           return result + "(" + children.join(",") + ")";
       }
       /// @internal
       findChild(startIndex, endIndex, dir, pos, side) {
           let { buffer } = this, pick = -1;
           for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {
               if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {
                   pick = i;
                   if (dir > 0)
                       break;
               }
           }
           return pick;
       }
       /// @internal
       slice(startI, endI, from) {
           let b = this.buffer;
           let copy = new Uint16Array(endI - startI), len = 0;
           for (let i = startI, j = 0; i < endI;) {
               copy[j++] = b[i++];
               copy[j++] = b[i++] - from;
               let to = copy[j++] = b[i++] - from;
               copy[j++] = b[i++] - startI;
               len = Math.max(len, to);
           }
           return new TreeBuffer(copy, len, this.set);
       }
   }
   function checkSide(side, pos, from, to) {
       switch (side) {
           case -2 /* Side.Before */: return from < pos;
           case -1 /* Side.AtOrBefore */: return to >= pos && from < pos;
           case 0 /* Side.Around */: return from < pos && to > pos;
           case 1 /* Side.AtOrAfter */: return from <= pos && to > pos;
           case 2 /* Side.After */: return to > pos;
           case 4 /* Side.DontCare */: return true;
       }
   }
   function enterUnfinishedNodesBefore(node, pos) {
       let scan = node.childBefore(pos);
       while (scan) {
           let last = scan.lastChild;
           if (!last || last.to != scan.to)
               break;
           if (last.type.isError && last.from == last.to) {
               node = scan;
               scan = last.prevSibling;
           }
           else {
               scan = last;
           }
       }
       return node;
   }
   function resolveNode(node, pos, side, overlays) {
       var _a;
       // Move up to a node that actually holds the position, if possible
       while (node.from == node.to ||
           (side < 1 ? node.from >= pos : node.from > pos) ||
           (side > -1 ? node.to <= pos : node.to < pos)) {
           let parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;
           if (!parent)
               return node;
           node = parent;
       }
       let mode = overlays ? 0 : IterMode.IgnoreOverlays;
       // Must go up out of overlays when those do not overlap with pos
       if (overlays)
           for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {
               if (scan instanceof TreeNode && scan.index < 0 && ((_a = parent.enter(pos, side, mode)) === null || _a === void 0 ? void 0 : _a.from) != scan.from)
                   node = parent;
           }
       for (;;) {
           let inner = node.enter(pos, side, mode);
           if (!inner)
               return node;
           node = inner;
       }
   }
   class TreeNode {
       constructor(_tree, from, 
       // Index in parent node, set to -1 if the node is not a direct child of _parent.node (overlay)
       index, _parent) {
           this._tree = _tree;
           this.from = from;
           this.index = index;
           this._parent = _parent;
       }
       get type() { return this._tree.type; }
       get name() { return this._tree.type.name; }
       get to() { return this.from + this._tree.length; }
       nextChild(i, dir, pos, side, mode = 0) {
           for (let parent = this;;) {
               for (let { children, positions } = parent._tree, e = dir > 0 ? children.length : -1; i != e; i += dir) {
                   let next = children[i], start = positions[i] + parent.from;
                   if (!checkSide(side, pos, start, start + next.length))
                       continue;
                   if (next instanceof TreeBuffer) {
                       if (mode & IterMode.ExcludeBuffers)
                           continue;
                       let index = next.findChild(0, next.buffer.length, dir, pos - start, side);
                       if (index > -1)
                           return new BufferNode(new BufferContext(parent, next, i, start), null, index);
                   }
                   else if ((mode & IterMode.IncludeAnonymous) || (!next.type.isAnonymous || hasChild(next))) {
                       let mounted;
                       if (!(mode & IterMode.IgnoreMounts) &&
                           next.props && (mounted = next.prop(NodeProp.mounted)) && !mounted.overlay)
                           return new TreeNode(mounted.tree, start, i, parent);
                       let inner = new TreeNode(next, start, i, parent);
                       return (mode & IterMode.IncludeAnonymous) || !inner.type.isAnonymous ? inner
                           : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);
                   }
               }
               if ((mode & IterMode.IncludeAnonymous) || !parent.type.isAnonymous)
                   return null;
               if (parent.index >= 0)
                   i = parent.index + dir;
               else
                   i = dir < 0 ? -1 : parent._parent._tree.children.length;
               parent = parent._parent;
               if (!parent)
                   return null;
           }
       }
       get firstChild() { return this.nextChild(0, 1, 0, 4 /* Side.DontCare */); }
       get lastChild() { return this.nextChild(this._tree.children.length - 1, -1, 0, 4 /* Side.DontCare */); }
       childAfter(pos) { return this.nextChild(0, 1, pos, 2 /* Side.After */); }
       childBefore(pos) { return this.nextChild(this._tree.children.length - 1, -1, pos, -2 /* Side.Before */); }
       enter(pos, side, mode = 0) {
           let mounted;
           if (!(mode & IterMode.IgnoreOverlays) && (mounted = this._tree.prop(NodeProp.mounted)) && mounted.overlay) {
               let rPos = pos - this.from;
               for (let { from, to } of mounted.overlay) {
                   if ((side > 0 ? from <= rPos : from < rPos) &&
                       (side < 0 ? to >= rPos : to > rPos))
                       return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);
               }
           }
           return this.nextChild(0, 1, pos, side, mode);
       }
       nextSignificantParent() {
           let val = this;
           while (val.type.isAnonymous && val._parent)
               val = val._parent;
           return val;
       }
       get parent() {
           return this._parent ? this._parent.nextSignificantParent() : null;
       }
       get nextSibling() {
           return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4 /* Side.DontCare */) : null;
       }
       get prevSibling() {
           return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4 /* Side.DontCare */) : null;
       }
       cursor(mode = 0) { return new TreeCursor(this, mode); }
       get tree() { return this._tree; }
       toTree() { return this._tree; }
       resolve(pos, side = 0) {
           return resolveNode(this, pos, side, false);
       }
       resolveInner(pos, side = 0) {
           return resolveNode(this, pos, side, true);
       }
       enterUnfinishedNodesBefore(pos) { return enterUnfinishedNodesBefore(this, pos); }
       getChild(type, before = null, after = null) {
           let r = getChildren(this, type, before, after);
           return r.length ? r[0] : null;
       }
       getChildren(type, before = null, after = null) {
           return getChildren(this, type, before, after);
       }
       /// @internal
       toString() { return this._tree.toString(); }
       get node() { return this; }
       matchContext(context) { return matchNodeContext(this, context); }
   }
   function getChildren(node, type, before, after) {
       let cur = node.cursor(), result = [];
       if (!cur.firstChild())
           return result;
       if (before != null)
           while (!cur.type.is(before))
               if (!cur.nextSibling())
                   return result;
       for (;;) {
           if (after != null && cur.type.is(after))
               return result;
           if (cur.type.is(type))
               result.push(cur.node);
           if (!cur.nextSibling())
               return after == null ? result : [];
       }
   }
   function matchNodeContext(node, context, i = context.length - 1) {
       for (let p = node.parent; i >= 0; p = p.parent) {
           if (!p)
               return false;
           if (!p.type.isAnonymous) {
               if (context[i] && context[i] != p.name)
                   return false;
               i--;
           }
       }
       return true;
   }
   class BufferContext {
       constructor(parent, buffer, index, start) {
           this.parent = parent;
           this.buffer = buffer;
           this.index = index;
           this.start = start;
       }
   }
   class BufferNode {
       get name() { return this.type.name; }
       get from() { return this.context.start + this.context.buffer.buffer[this.index + 1]; }
       get to() { return this.context.start + this.context.buffer.buffer[this.index + 2]; }
       constructor(context, _parent, index) {
           this.context = context;
           this._parent = _parent;
           this.index = index;
           this.type = context.buffer.set.types[context.buffer.buffer[index]];
       }
       child(dir, pos, side) {
           let { buffer } = this.context;
           let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);
           return index < 0 ? null : new BufferNode(this.context, this, index);
       }
       get firstChild() { return this.child(1, 0, 4 /* Side.DontCare */); }
       get lastChild() { return this.child(-1, 0, 4 /* Side.DontCare */); }
       childAfter(pos) { return this.child(1, pos, 2 /* Side.After */); }
       childBefore(pos) { return this.child(-1, pos, -2 /* Side.Before */); }
       enter(pos, side, mode = 0) {
           if (mode & IterMode.ExcludeBuffers)
               return null;
           let { buffer } = this.context;
           let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);
           return index < 0 ? null : new BufferNode(this.context, this, index);
       }
       get parent() {
           return this._parent || this.context.parent.nextSignificantParent();
       }
       externalSibling(dir) {
           return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, 0, 4 /* Side.DontCare */);
       }
       get nextSibling() {
           let { buffer } = this.context;
           let after = buffer.buffer[this.index + 3];
           if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))
               return new BufferNode(this.context, this._parent, after);
           return this.externalSibling(1);
       }
       get prevSibling() {
           let { buffer } = this.context;
           let parentStart = this._parent ? this._parent.index + 4 : 0;
           if (this.index == parentStart)
               return this.externalSibling(-1);
           return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));
       }
       cursor(mode = 0) { return new TreeCursor(this, mode); }
       get tree() { return null; }
       toTree() {
           let children = [], positions = [];
           let { buffer } = this.context;
           let startI = this.index + 4, endI = buffer.buffer[this.index + 3];
           if (endI > startI) {
               let from = buffer.buffer[this.index + 1];
               children.push(buffer.slice(startI, endI, from));
               positions.push(0);
           }
           return new Tree(this.type, children, positions, this.to - this.from);
       }
       resolve(pos, side = 0) {
           return resolveNode(this, pos, side, false);
       }
       resolveInner(pos, side = 0) {
           return resolveNode(this, pos, side, true);
       }
       enterUnfinishedNodesBefore(pos) { return enterUnfinishedNodesBefore(this, pos); }
       /// @internal
       toString() { return this.context.buffer.childString(this.index); }
       getChild(type, before = null, after = null) {
           let r = getChildren(this, type, before, after);
           return r.length ? r[0] : null;
       }
       getChildren(type, before = null, after = null) {
           return getChildren(this, type, before, after);
       }
       get node() { return this; }
       matchContext(context) { return matchNodeContext(this, context); }
   }
   /// A tree cursor object focuses on a given node in a syntax tree, and
   /// allows you to move to adjacent nodes.
   class TreeCursor {
       /// Shorthand for `.type.name`.
       get name() { return this.type.name; }
       /// @internal
       constructor(node, 
       /// @internal
       mode = 0) {
           this.mode = mode;
           /// @internal
           this.buffer = null;
           this.stack = [];
           /// @internal
           this.index = 0;
           this.bufferNode = null;
           if (node instanceof TreeNode) {
               this.yieldNode(node);
           }
           else {
               this._tree = node.context.parent;
               this.buffer = node.context;
               for (let n = node._parent; n; n = n._parent)
                   this.stack.unshift(n.index);
               this.bufferNode = node;
               this.yieldBuf(node.index);
           }
       }
       yieldNode(node) {
           if (!node)
               return false;
           this._tree = node;
           this.type = node.type;
           this.from = node.from;
           this.to = node.to;
           return true;
       }
       yieldBuf(index, type) {
           this.index = index;
           let { start, buffer } = this.buffer;
           this.type = type || buffer.set.types[buffer.buffer[index]];
           this.from = start + buffer.buffer[index + 1];
           this.to = start + buffer.buffer[index + 2];
           return true;
       }
       yield(node) {
           if (!node)
               return false;
           if (node instanceof TreeNode) {
               this.buffer = null;
               return this.yieldNode(node);
           }
           this.buffer = node.context;
           return this.yieldBuf(node.index, node.type);
       }
       /// @internal
       toString() {
           return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
       }
       /// @internal
       enterChild(dir, pos, side) {
           if (!this.buffer)
               return this.yield(this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));
           let { buffer } = this.buffer;
           let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);
           if (index < 0)
               return false;
           this.stack.push(this.index);
           return this.yieldBuf(index);
       }
       /// Move the cursor to this node's first child. When this returns
       /// false, the node has no child, and the cursor has not been moved.
       firstChild() { return this.enterChild(1, 0, 4 /* Side.DontCare */); }
       /// Move the cursor to this node's last child.
       lastChild() { return this.enterChild(-1, 0, 4 /* Side.DontCare */); }
       /// Move the cursor to the first child that ends after `pos`.
       childAfter(pos) { return this.enterChild(1, pos, 2 /* Side.After */); }
       /// Move to the last child that starts before `pos`.
       childBefore(pos) { return this.enterChild(-1, pos, -2 /* Side.Before */); }
       /// Move the cursor to the child around `pos`. If side is -1 the
       /// child may end at that position, when 1 it may start there. This
       /// will also enter [overlaid](#common.MountedTree.overlay)
       /// [mounted](#common.NodeProp^mounted) trees unless `overlays` is
       /// set to false.
       enter(pos, side, mode = this.mode) {
           if (!this.buffer)
               return this.yield(this._tree.enter(pos, side, mode));
           return mode & IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);
       }
       /// Move to the node's parent node, if this isn't the top node.
       parent() {
           if (!this.buffer)
               return this.yieldNode((this.mode & IterMode.IncludeAnonymous) ? this._tree._parent : this._tree.parent);
           if (this.stack.length)
               return this.yieldBuf(this.stack.pop());
           let parent = (this.mode & IterMode.IncludeAnonymous) ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
           this.buffer = null;
           return this.yieldNode(parent);
       }
       /// @internal
       sibling(dir) {
           if (!this.buffer)
               return !this._tree._parent ? false
                   : this.yield(this._tree.index < 0 ? null
                       : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode));
           let { buffer } = this.buffer, d = this.stack.length - 1;
           if (dir < 0) {
               let parentStart = d < 0 ? 0 : this.stack[d] + 4;
               if (this.index != parentStart)
                   return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));
           }
           else {
               let after = buffer.buffer[this.index + 3];
               if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3]))
                   return this.yieldBuf(after);
           }
           return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode)) : false;
       }
       /// Move to this node's next sibling, if any.
       nextSibling() { return this.sibling(1); }
       /// Move to this node's previous sibling, if any.
       prevSibling() { return this.sibling(-1); }
       atLastNode(dir) {
           let index, parent, { buffer } = this;
           if (buffer) {
               if (dir > 0) {
                   if (this.index < buffer.buffer.buffer.length)
                       return false;
               }
               else {
                   for (let i = 0; i < this.index; i++)
                       if (buffer.buffer.buffer[i + 3] < this.index)
                           return false;
               }
               ({ index, parent } = buffer);
           }
           else {
               ({ index, _parent: parent } = this._tree);
           }
           for (; parent; { index, _parent: parent } = parent) {
               if (index > -1)
                   for (let i = index + dir, e = dir < 0 ? -1 : parent._tree.children.length; i != e; i += dir) {
                       let child = parent._tree.children[i];
                       if ((this.mode & IterMode.IncludeAnonymous) ||
                           child instanceof TreeBuffer ||
                           !child.type.isAnonymous ||
                           hasChild(child))
                           return false;
                   }
           }
           return true;
       }
       move(dir, enter) {
           if (enter && this.enterChild(dir, 0, 4 /* Side.DontCare */))
               return true;
           for (;;) {
               if (this.sibling(dir))
                   return true;
               if (this.atLastNode(dir) || !this.parent())
                   return false;
           }
       }
       /// Move to the next node in a
       /// [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)
       /// traversal, going from a node to its first child or, if the
       /// current node is empty or `enter` is false, its next sibling or
       /// the next sibling of the first parent node that has one.
       next(enter = true) { return this.move(1, enter); }
       /// Move to the next node in a last-to-first pre-order traveral. A
       /// node is followed by its last child or, if it has none, its
       /// previous sibling or the previous sibling of the first parent
       /// node that has one.
       prev(enter = true) { return this.move(-1, enter); }
       /// Move the cursor to the innermost node that covers `pos`. If
       /// `side` is -1, it will enter nodes that end at `pos`. If it is 1,
       /// it will enter nodes that start at `pos`.
       moveTo(pos, side = 0) {
           // Move up to a node that actually holds the position, if possible
           while (this.from == this.to ||
               (side < 1 ? this.from >= pos : this.from > pos) ||
               (side > -1 ? this.to <= pos : this.to < pos))
               if (!this.parent())
                   break;
           // Then scan down into child nodes as far as possible
           while (this.enterChild(1, pos, side)) { }
           return this;
       }
       /// Get a [syntax node](#common.SyntaxNode) at the cursor's current
       /// position.
       get node() {
           if (!this.buffer)
               return this._tree;
           let cache = this.bufferNode, result = null, depth = 0;
           if (cache && cache.context == this.buffer) {
               scan: for (let index = this.index, d = this.stack.length; d >= 0;) {
                   for (let c = cache; c; c = c._parent)
                       if (c.index == index) {
                           if (index == this.index)
                               return c;
                           result = c;
                           depth = d + 1;
                           break scan;
                       }
                   index = this.stack[--d];
               }
           }
           for (let i = depth; i < this.stack.length; i++)
               result = new BufferNode(this.buffer, result, this.stack[i]);
           return this.bufferNode = new BufferNode(this.buffer, result, this.index);
       }
       /// Get the [tree](#common.Tree) that represents the current node, if
       /// any. Will return null when the node is in a [tree
       /// buffer](#common.TreeBuffer).
       get tree() {
           return this.buffer ? null : this._tree._tree;
       }
       /// Iterate over the current node and all its descendants, calling
       /// `enter` when entering a node and `leave`, if given, when leaving
       /// one. When `enter` returns `false`, any children of that node are
       /// skipped, and `leave` isn't called for it.
       iterate(enter, leave) {
           for (let depth = 0;;) {
               let mustLeave = false;
               if (this.type.isAnonymous || enter(this) !== false) {
                   if (this.firstChild()) {
                       depth++;
                       continue;
                   }
                   if (!this.type.isAnonymous)
                       mustLeave = true;
               }
               for (;;) {
                   if (mustLeave && leave)
                       leave(this);
                   mustLeave = this.type.isAnonymous;
                   if (this.nextSibling())
                       break;
                   if (!depth)
                       return;
                   this.parent();
                   depth--;
                   mustLeave = true;
               }
           }
       }
       /// Test whether the current node matches a given context—a sequence
       /// of direct parent node names. Empty strings in the context array
       /// are treated as wildcards.
       matchContext(context) {
           if (!this.buffer)
               return matchNodeContext(this.node, context);
           let { buffer } = this.buffer, { types } = buffer.set;
           for (let i = context.length - 1, d = this.stack.length - 1; i >= 0; d--) {
               if (d < 0)
                   return matchNodeContext(this.node, context, i);
               let type = types[buffer.buffer[this.stack[d]]];
               if (!type.isAnonymous) {
                   if (context[i] && context[i] != type.name)
                       return false;
                   i--;
               }
           }
           return true;
       }
   }
   function hasChild(tree) {
       return tree.children.some(ch => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));
   }
   function buildTree(data) {
       var _a;
       let { buffer, nodeSet, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet.types.length } = data;
       let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;
       let types = nodeSet.types;
       let contextHash = 0, lookAhead = 0;
       function takeNode(parentStart, minPos, children, positions, inRepeat) {
           let { id, start, end, size } = cursor;
           let lookAheadAtStart = lookAhead;
           while (size < 0) {
               cursor.next();
               if (size == -1 /* SpecialRecord.Reuse */) {
                   let node = reused[id];
                   children.push(node);
                   positions.push(start - parentStart);
                   return;
               }
               else if (size == -3 /* SpecialRecord.ContextChange */) { // Context change
                   contextHash = id;
                   return;
               }
               else if (size == -4 /* SpecialRecord.LookAhead */) {
                   lookAhead = id;
                   return;
               }
               else {
                   throw new RangeError(`Unrecognized record size: ${size}`);
               }
           }
           let type = types[id], node, buffer;
           let startPos = start - parentStart;
           if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {
               // Small enough for a buffer, and no reused nodes inside
               let data = new Uint16Array(buffer.size - buffer.skip);
               let endPos = cursor.pos - buffer.size, index = data.length;
               while (cursor.pos > endPos)
                   index = copyToBuffer(buffer.start, data, index);
               node = new TreeBuffer(data, end - buffer.start, nodeSet);
               startPos = buffer.start - parentStart;
           }
           else { // Make it a node
               let endPos = cursor.pos - size;
               cursor.next();
               let localChildren = [], localPositions = [];
               let localInRepeat = id >= minRepeatType ? id : -1;
               let lastGroup = 0, lastEnd = end;
               while (cursor.pos > endPos) {
                   if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {
                       if (cursor.end <= lastEnd - maxBufferLength) {
                           makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart);
                           lastGroup = localChildren.length;
                           lastEnd = cursor.end;
                       }
                       cursor.next();
                   }
                   else {
                       takeNode(start, endPos, localChildren, localPositions, localInRepeat);
                   }
               }
               if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length)
                   makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart);
               localChildren.reverse();
               localPositions.reverse();
               if (localInRepeat > -1 && lastGroup > 0) {
                   let make = makeBalanced(type);
                   node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);
               }
               else {
                   node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end);
               }
           }
           children.push(node);
           positions.push(startPos);
       }
       function makeBalanced(type) {
           return (children, positions, length) => {
               let lookAhead = 0, lastI = children.length - 1, last, lookAheadProp;
               if (lastI >= 0 && (last = children[lastI]) instanceof Tree) {
                   if (!lastI && last.type == type && last.length == length)
                       return last;
                   if (lookAheadProp = last.prop(NodeProp.lookAhead))
                       lookAhead = positions[lastI] + last.length + lookAheadProp;
               }
               return makeTree(type, children, positions, length, lookAhead);
           };
       }
       function makeRepeatLeaf(children, positions, base, i, from, to, type, lookAhead) {
           let localChildren = [], localPositions = [];
           while (children.length > i) {
               localChildren.push(children.pop());
               localPositions.push(positions.pop() + base - from);
           }
           children.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead - to));
           positions.push(from - base);
       }
       function makeTree(type, children, positions, length, lookAhead = 0, props) {
           if (contextHash) {
               let pair = [NodeProp.contextHash, contextHash];
               props = props ? [pair].concat(props) : [pair];
           }
           if (lookAhead > 25) {
               let pair = [NodeProp.lookAhead, lookAhead];
               props = props ? [pair].concat(props) : [pair];
           }
           return new Tree(type, children, positions, length, props);
       }
       function findBufferSize(maxSize, inRepeat) {
           // Scan through the buffer to find previous siblings that fit
           // together in a TreeBuffer, and don't contain any reused nodes
           // (which can't be stored in a buffer).
           // If `inRepeat` is > -1, ignore node boundaries of that type for
           // nesting, but make sure the end falls either at the start
           // (`maxSize`) or before such a node.
           let fork = cursor.fork();
           let size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;
           let result = { size: 0, start: 0, skip: 0 };
           scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos;) {
               let nodeSize = fork.size;
               // Pretend nested repeat nodes of the same type don't exist
               if (fork.id == inRepeat && nodeSize >= 0) {
                   // Except that we store the current state as a valid return
                   // value.
                   result.size = size;
                   result.start = start;
                   result.skip = skip;
                   skip += 4;
                   size += 4;
                   fork.next();
                   continue;
               }
               let startPos = fork.pos - nodeSize;
               if (nodeSize < 0 || startPos < minPos || fork.start < minStart)
                   break;
               let localSkipped = fork.id >= minRepeatType ? 4 : 0;
               let nodeStart = fork.start;
               fork.next();
               while (fork.pos > startPos) {
                   if (fork.size < 0) {
                       if (fork.size == -3 /* SpecialRecord.ContextChange */)
                           localSkipped += 4;
                       else
                           break scan;
                   }
                   else if (fork.id >= minRepeatType) {
                       localSkipped += 4;
                   }
                   fork.next();
               }
               start = nodeStart;
               size += nodeSize;
               skip += localSkipped;
           }
           if (inRepeat < 0 || size == maxSize) {
               result.size = size;
               result.start = start;
               result.skip = skip;
           }
           return result.size > 4 ? result : undefined;
       }
       function copyToBuffer(bufferStart, buffer, index) {
           let { id, start, end, size } = cursor;
           cursor.next();
           if (size >= 0 && id < minRepeatType) {
               let startIndex = index;
               if (size > 4) {
                   let endPos = cursor.pos - (size - 4);
                   while (cursor.pos > endPos)
                       index = copyToBuffer(bufferStart, buffer, index);
               }
               buffer[--index] = startIndex;
               buffer[--index] = end - bufferStart;
               buffer[--index] = start - bufferStart;
               buffer[--index] = id;
           }
           else if (size == -3 /* SpecialRecord.ContextChange */) {
               contextHash = id;
           }
           else if (size == -4 /* SpecialRecord.LookAhead */) {
               lookAhead = id;
           }
           return index;
       }
       let children = [], positions = [];
       while (cursor.pos > 0)
           takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1);
       let length = (_a = data.length) !== null && _a !== void 0 ? _a : (children.length ? positions[0] + children[0].length : 0);
       return new Tree(types[data.topID], children.reverse(), positions.reverse(), length);
   }
   const nodeSizeCache = new WeakMap;
   function nodeSize(balanceType, node) {
       if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType)
           return 1;
       let size = nodeSizeCache.get(node);
       if (size == null) {
           size = 1;
           for (let child of node.children) {
               if (child.type != balanceType || !(child instanceof Tree)) {
                   size = 1;
                   break;
               }
               size += nodeSize(balanceType, child);
           }
           nodeSizeCache.set(node, size);
       }
       return size;
   }
   function balanceRange(
   // The type the balanced tree's inner nodes.
   balanceType, 
   // The direct children and their positions
   children, positions, 
   // The index range in children/positions to use
   from, to, 
   // The start position of the nodes, relative to their parent.
   start, 
   // Length of the outer node
   length, 
   // Function to build the top node of the balanced tree
   mkTop, 
   // Function to build internal nodes for the balanced tree
   mkTree) {
       let total = 0;
       for (let i = from; i < to; i++)
           total += nodeSize(balanceType, children[i]);
       let maxChild = Math.ceil((total * 1.5) / 8 /* Balance.BranchFactor */);
       let localChildren = [], localPositions = [];
       function divide(children, positions, from, to, offset) {
           for (let i = from; i < to;) {
               let groupFrom = i, groupStart = positions[i], groupSize = nodeSize(balanceType, children[i]);
               i++;
               for (; i < to; i++) {
                   let nextSize = nodeSize(balanceType, children[i]);
                   if (groupSize + nextSize >= maxChild)
                       break;
                   groupSize += nextSize;
               }
               if (i == groupFrom + 1) {
                   if (groupSize > maxChild) {
                       let only = children[groupFrom]; // Only trees can have a size > 1
                       divide(only.children, only.positions, 0, only.children.length, positions[groupFrom] + offset);
                       continue;
                   }
                   localChildren.push(children[groupFrom]);
               }
               else {
                   let length = positions[i - 1] + children[i - 1].length - groupStart;
                   localChildren.push(balanceRange(balanceType, children, positions, groupFrom, i, groupStart, length, null, mkTree));
               }
               localPositions.push(groupStart + offset - start);
           }
       }
       divide(children, positions, from, to, 0);
       return (mkTop || mkTree)(localChildren, localPositions, length);
   }
   /// Provides a way to associate values with pieces of trees. As long
   /// as that part of the tree is reused, the associated values can be
   /// retrieved from an updated tree.
   class NodeWeakMap {
       constructor() {
           this.map = new WeakMap();
       }
       setBuffer(buffer, index, value) {
           let inner = this.map.get(buffer);
           if (!inner)
               this.map.set(buffer, inner = new Map);
           inner.set(index, value);
       }
       getBuffer(buffer, index) {
           let inner = this.map.get(buffer);
           return inner && inner.get(index);
       }
       /// Set the value for this syntax node.
       set(node, value) {
           if (node instanceof BufferNode)
               this.setBuffer(node.context.buffer, node.index, value);
           else if (node instanceof TreeNode)
               this.map.set(node.tree, value);
       }
       /// Retrieve value for this syntax node, if it exists in the map.
       get(node) {
           return node instanceof BufferNode ? this.getBuffer(node.context.buffer, node.index)
               : node instanceof TreeNode ? this.map.get(node.tree) : undefined;
       }
       /// Set the value for the node that a cursor currently points to.
       cursorSet(cursor, value) {
           if (cursor.buffer)
               this.setBuffer(cursor.buffer.buffer, cursor.index, value);
           else
               this.map.set(cursor.tree, value);
       }
       /// Retrieve the value for the node that a cursor currently points
       /// to.
       cursorGet(cursor) {
           return cursor.buffer ? this.getBuffer(cursor.buffer.buffer, cursor.index) : this.map.get(cursor.tree);
       }
   }

   /// Tree fragments are used during [incremental
   /// parsing](#common.Parser.startParse) to track parts of old trees
   /// that can be reused in a new parse. An array of fragments is used
   /// to track regions of an old tree whose nodes might be reused in new
   /// parses. Use the static
   /// [`applyChanges`](#common.TreeFragment^applyChanges) method to
   /// update fragments for document changes.
   class TreeFragment {
       /// Construct a tree fragment. You'll usually want to use
       /// [`addTree`](#common.TreeFragment^addTree) and
       /// [`applyChanges`](#common.TreeFragment^applyChanges) instead of
       /// calling this directly.
       constructor(
       /// The start of the unchanged range pointed to by this fragment.
       /// This refers to an offset in the _updated_ document (as opposed
       /// to the original tree).
       from, 
       /// The end of the unchanged range.
       to, 
       /// The tree that this fragment is based on.
       tree, 
       /// The offset between the fragment's tree and the document that
       /// this fragment can be used against. Add this when going from
       /// document to tree positions, subtract it to go from tree to
       /// document positions.
       offset, openStart = false, openEnd = false) {
           this.from = from;
           this.to = to;
           this.tree = tree;
           this.offset = offset;
           this.open = (openStart ? 1 /* Open.Start */ : 0) | (openEnd ? 2 /* Open.End */ : 0);
       }
       /// Whether the start of the fragment represents the start of a
       /// parse, or the end of a change. (In the second case, it may not
       /// be safe to reuse some nodes at the start, depending on the
       /// parsing algorithm.)
       get openStart() { return (this.open & 1 /* Open.Start */) > 0; }
       /// Whether the end of the fragment represents the end of a
       /// full-document parse, or the start of a change.
       get openEnd() { return (this.open & 2 /* Open.End */) > 0; }
       /// Create a set of fragments from a freshly parsed tree, or update
       /// an existing set of fragments by replacing the ones that overlap
       /// with a tree with content from the new tree. When `partial` is
       /// true, the parse is treated as incomplete, and the resulting
       /// fragment has [`openEnd`](#common.TreeFragment.openEnd) set to
       /// true.
       static addTree(tree, fragments = [], partial = false) {
           let result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];
           for (let f of fragments)
               if (f.to > tree.length)
                   result.push(f);
           return result;
       }
       /// Apply a set of edits to an array of fragments, removing or
       /// splitting fragments as necessary to remove edited ranges, and
       /// adjusting offsets for fragments that moved.
       static applyChanges(fragments, changes, minGap = 128) {
           if (!changes.length)
               return fragments;
           let result = [];
           let fI = 1, nextF = fragments.length ? fragments[0] : null;
           for (let cI = 0, pos = 0, off = 0;; cI++) {
               let nextC = cI < changes.length ? changes[cI] : null;
               let nextPos = nextC ? nextC.fromA : 1e9;
               if (nextPos - pos >= minGap)
                   while (nextF && nextF.from < nextPos) {
                       let cut = nextF;
                       if (pos >= cut.from || nextPos <= cut.to || off) {
                           let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;
                           cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);
                       }
                       if (cut)
                           result.push(cut);
                       if (nextF.to > nextPos)
                           break;
                       nextF = fI < fragments.length ? fragments[fI++] : null;
                   }
               if (!nextC)
                   break;
               pos = nextC.toA;
               off = nextC.toA - nextC.toB;
           }
           return result;
       }
   }
   /// A superclass that parsers should extend.
   let Parser$1 = class Parser {
       /// Start a parse, returning a [partial parse](#common.PartialParse)
       /// object. [`fragments`](#common.TreeFragment) can be passed in to
       /// make the parse incremental.
       ///
       /// By default, the entire input is parsed. You can pass `ranges`,
       /// which should be a sorted array of non-empty, non-overlapping
       /// ranges, to parse only those ranges. The tree returned in that
       /// case will start at `ranges[0].from`.
       startParse(input, fragments, ranges) {
           if (typeof input == "string")
               input = new StringInput(input);
           ranges = !ranges ? [new Range(0, input.length)] : ranges.length ? ranges.map(r => new Range(r.from, r.to)) : [new Range(0, 0)];
           return this.createParse(input, fragments || [], ranges);
       }
       /// Run a full parse, returning the resulting tree.
       parse(input, fragments, ranges) {
           let parse = this.startParse(input, fragments, ranges);
           for (;;) {
               let done = parse.advance();
               if (done)
                   return done;
           }
       }
   };
   class StringInput {
       constructor(string) {
           this.string = string;
       }
       get length() { return this.string.length; }
       chunk(from) { return this.string.slice(from); }
       get lineChunks() { return false; }
       read(from, to) { return this.string.slice(from, to); }
   }

   /// Create a parse wrapper that, after the inner parse completes,
   /// scans its tree for mixed language regions with the `nest`
   /// function, runs the resulting [inner parses](#common.NestedParse),
   /// and then [mounts](#common.NodeProp^mounted) their results onto the
   /// tree.
   function parseMixed(nest) {
       return (parse, input, fragments, ranges) => new MixedParse(parse, nest, input, fragments, ranges);
   }
   class InnerParse {
       constructor(parser, parse, overlay, target, ranges) {
           this.parser = parser;
           this.parse = parse;
           this.overlay = overlay;
           this.target = target;
           this.ranges = ranges;
           if (!ranges.length || ranges.some(r => r.from >= r.to))
               throw new RangeError("Invalid inner parse ranges given: " + JSON.stringify(ranges));
       }
   }
   class ActiveOverlay {
       constructor(parser, predicate, mounts, index, start, target, prev) {
           this.parser = parser;
           this.predicate = predicate;
           this.mounts = mounts;
           this.index = index;
           this.start = start;
           this.target = target;
           this.prev = prev;
           this.depth = 0;
           this.ranges = [];
       }
   }
   const stoppedInner = new NodeProp({ perNode: true });
   class MixedParse {
       constructor(base, nest, input, fragments, ranges) {
           this.nest = nest;
           this.input = input;
           this.fragments = fragments;
           this.ranges = ranges;
           this.inner = [];
           this.innerDone = 0;
           this.baseTree = null;
           this.stoppedAt = null;
           this.baseParse = base;
       }
       advance() {
           if (this.baseParse) {
               let done = this.baseParse.advance();
               if (!done)
                   return null;
               this.baseParse = null;
               this.baseTree = done;
               this.startInner();
               if (this.stoppedAt != null)
                   for (let inner of this.inner)
                       inner.parse.stopAt(this.stoppedAt);
           }
           if (this.innerDone == this.inner.length) {
               let result = this.baseTree;
               if (this.stoppedAt != null)
                   result = new Tree(result.type, result.children, result.positions, result.length, result.propValues.concat([[stoppedInner, this.stoppedAt]]));
               return result;
           }
           let inner = this.inner[this.innerDone], done = inner.parse.advance();
           if (done) {
               this.innerDone++;
               // This is a somewhat dodgy but super helpful hack where we
               // patch up nodes created by the inner parse (and thus
               // presumably not aliased anywhere else) to hold the information
               // about the inner parse.
               let props = Object.assign(Object.create(null), inner.target.props);
               props[NodeProp.mounted.id] = new MountedTree(done, inner.overlay, inner.parser);
               inner.target.props = props;
           }
           return null;
       }
       get parsedPos() {
           if (this.baseParse)
               return 0;
           let pos = this.input.length;
           for (let i = this.innerDone; i < this.inner.length; i++) {
               if (this.inner[i].ranges[0].from < pos)
                   pos = Math.min(pos, this.inner[i].parse.parsedPos);
           }
           return pos;
       }
       stopAt(pos) {
           this.stoppedAt = pos;
           if (this.baseParse)
               this.baseParse.stopAt(pos);
           else
               for (let i = this.innerDone; i < this.inner.length; i++)
                   this.inner[i].parse.stopAt(pos);
       }
       startInner() {
           let fragmentCursor = new FragmentCursor$2(this.fragments);
           let overlay = null;
           let covered = null;
           let cursor = new TreeCursor(new TreeNode(this.baseTree, this.ranges[0].from, 0, null), IterMode.IncludeAnonymous | IterMode.IgnoreMounts);
           scan: for (let nest, isCovered; this.stoppedAt == null || cursor.from < this.stoppedAt;) {
               let enter = true, range;
               if (fragmentCursor.hasNode(cursor)) {
                   if (overlay) {
                       let match = overlay.mounts.find(m => m.frag.from <= cursor.from && m.frag.to >= cursor.to && m.mount.overlay);
                       if (match)
                           for (let r of match.mount.overlay) {
                               let from = r.from + match.pos, to = r.to + match.pos;
                               if (from >= cursor.from && to <= cursor.to && !overlay.ranges.some(r => r.from < to && r.to > from))
                                   overlay.ranges.push({ from, to });
                           }
                   }
                   enter = false;
               }
               else if (covered && (isCovered = checkCover(covered.ranges, cursor.from, cursor.to))) {
                   enter = isCovered != 2 /* Cover.Full */;
               }
               else if (!cursor.type.isAnonymous && cursor.from < cursor.to && (nest = this.nest(cursor, this.input))) {
                   if (!cursor.tree)
                       materialize(cursor);
                   let oldMounts = fragmentCursor.findMounts(cursor.from, nest.parser);
                   if (typeof nest.overlay == "function") {
                       overlay = new ActiveOverlay(nest.parser, nest.overlay, oldMounts, this.inner.length, cursor.from, cursor.tree, overlay);
                   }
                   else {
                       let ranges = punchRanges(this.ranges, nest.overlay || [new Range(cursor.from, cursor.to)]);
                       if (ranges.length)
                           this.inner.push(new InnerParse(nest.parser, nest.parser.startParse(this.input, enterFragments(oldMounts, ranges), ranges), nest.overlay ? nest.overlay.map(r => new Range(r.from - cursor.from, r.to - cursor.from)) : null, cursor.tree, ranges));
                       if (!nest.overlay)
                           enter = false;
                       else if (ranges.length)
                           covered = { ranges, depth: 0, prev: covered };
                   }
               }
               else if (overlay && (range = overlay.predicate(cursor))) {
                   if (range === true)
                       range = new Range(cursor.from, cursor.to);
                   if (range.from < range.to)
                       overlay.ranges.push(range);
               }
               if (enter && cursor.firstChild()) {
                   if (overlay)
                       overlay.depth++;
                   if (covered)
                       covered.depth++;
               }
               else {
                   for (;;) {
                       if (cursor.nextSibling())
                           break;
                       if (!cursor.parent())
                           break scan;
                       if (overlay && !--overlay.depth) {
                           let ranges = punchRanges(this.ranges, overlay.ranges);
                           if (ranges.length)
                               this.inner.splice(overlay.index, 0, new InnerParse(overlay.parser, overlay.parser.startParse(this.input, enterFragments(overlay.mounts, ranges), ranges), overlay.ranges.map(r => new Range(r.from - overlay.start, r.to - overlay.start)), overlay.target, ranges));
                           overlay = overlay.prev;
                       }
                       if (covered && !--covered.depth)
                           covered = covered.prev;
                   }
               }
           }
       }
   }
   function checkCover(covered, from, to) {
       for (let range of covered) {
           if (range.from >= to)
               break;
           if (range.to > from)
               return range.from <= from && range.to >= to ? 2 /* Cover.Full */ : 1 /* Cover.Partial */;
       }
       return 0 /* Cover.None */;
   }
   // Take a piece of buffer and convert it into a stand-alone
   // TreeBuffer.
   function sliceBuf(buf, startI, endI, nodes, positions, off) {
       if (startI < endI) {
           let from = buf.buffer[startI + 1];
           nodes.push(buf.slice(startI, endI, from));
           positions.push(from - off);
       }
   }
   // This function takes a node that's in a buffer, and converts it, and
   // its parent buffer nodes, into a Tree. This is again acting on the
   // assumption that the trees and buffers have been constructed by the
   // parse that was ran via the mix parser, and thus aren't shared with
   // any other code, making violations of the immutability safe.
   function materialize(cursor) {
       let { node } = cursor, depth = 0;
       // Scan up to the nearest tree
       do {
           cursor.parent();
           depth++;
       } while (!cursor.tree);
       // Find the index of the buffer in that tree
       let i = 0, base = cursor.tree, off = 0;
       for (;; i++) {
           off = base.positions[i] + cursor.from;
           if (off <= node.from && off + base.children[i].length >= node.to)
               break;
       }
       let buf = base.children[i], b = buf.buffer;
       // Split a level in the buffer, putting the nodes before and after
       // the child that contains `node` into new buffers.
       function split(startI, endI, type, innerOffset, length) {
           let i = startI;
           while (b[i + 2] + off <= node.from)
               i = b[i + 3];
           let children = [], positions = [];
           sliceBuf(buf, startI, i, children, positions, innerOffset);
           let from = b[i + 1], to = b[i + 2];
           let isTarget = from + off == node.from && to + off == node.to && b[i] == node.type.id;
           children.push(isTarget ? node.toTree() : split(i + 4, b[i + 3], buf.set.types[b[i]], from, to - from));
           positions.push(from - innerOffset);
           sliceBuf(buf, b[i + 3], endI, children, positions, innerOffset);
           return new Tree(type, children, positions, length);
       }
       base.children[i] = split(0, b.length, NodeType.none, 0, buf.length);
       // Move the cursor back to the target node
       for (let d = 0; d <= depth; d++)
           cursor.childAfter(node.from);
   }
   class StructureCursor {
       constructor(root, offset) {
           this.offset = offset;
           this.done = false;
           this.cursor = root.cursor(IterMode.IncludeAnonymous | IterMode.IgnoreMounts);
       }
       // Move to the first node (in pre-order) that starts at or after `pos`.
       moveTo(pos) {
           let { cursor } = this, p = pos - this.offset;
           while (!this.done && cursor.from < p) {
               if (cursor.to >= pos && cursor.enter(p, 1, IterMode.IgnoreOverlays | IterMode.ExcludeBuffers)) ;
               else if (!cursor.next(false))
                   this.done = true;
           }
       }
       hasNode(cursor) {
           this.moveTo(cursor.from);
           if (!this.done && this.cursor.from + this.offset == cursor.from && this.cursor.tree) {
               for (let tree = this.cursor.tree;;) {
                   if (tree == cursor.tree)
                       return true;
                   if (tree.children.length && tree.positions[0] == 0 && tree.children[0] instanceof Tree)
                       tree = tree.children[0];
                   else
                       break;
               }
           }
           return false;
       }
   }
   let FragmentCursor$2 = class FragmentCursor {
       constructor(fragments) {
           var _a;
           this.fragments = fragments;
           this.curTo = 0;
           this.fragI = 0;
           if (fragments.length) {
               let first = this.curFrag = fragments[0];
               this.curTo = (_a = first.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : first.to;
               this.inner = new StructureCursor(first.tree, -first.offset);
           }
           else {
               this.curFrag = this.inner = null;
           }
       }
       hasNode(node) {
           while (this.curFrag && node.from >= this.curTo)
               this.nextFrag();
           return this.curFrag && this.curFrag.from <= node.from && this.curTo >= node.to && this.inner.hasNode(node);
       }
       nextFrag() {
           var _a;
           this.fragI++;
           if (this.fragI == this.fragments.length) {
               this.curFrag = this.inner = null;
           }
           else {
               let frag = this.curFrag = this.fragments[this.fragI];
               this.curTo = (_a = frag.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : frag.to;
               this.inner = new StructureCursor(frag.tree, -frag.offset);
           }
       }
       findMounts(pos, parser) {
           var _a;
           let result = [];
           if (this.inner) {
               this.inner.cursor.moveTo(pos, 1);
               for (let pos = this.inner.cursor.node; pos; pos = pos.parent) {
                   let mount = (_a = pos.tree) === null || _a === void 0 ? void 0 : _a.prop(NodeProp.mounted);
                   if (mount && mount.parser == parser) {
                       for (let i = this.fragI; i < this.fragments.length; i++) {
                           let frag = this.fragments[i];
                           if (frag.from >= pos.to)
                               break;
                           if (frag.tree == this.curFrag.tree)
                               result.push({
                                   frag,
                                   pos: pos.from - frag.offset,
                                   mount
                               });
                       }
                   }
               }
           }
           return result;
       }
   };
   function punchRanges(outer, ranges) {
       let copy = null, current = ranges;
       for (let i = 1, j = 0; i < outer.length; i++) {
           let gapFrom = outer[i - 1].to, gapTo = outer[i].from;
           for (; j < current.length; j++) {
               let r = current[j];
               if (r.from >= gapTo)
                   break;
               if (r.to <= gapFrom)
                   continue;
               if (!copy)
                   current = copy = ranges.slice();
               if (r.from < gapFrom) {
                   copy[j] = new Range(r.from, gapFrom);
                   if (r.to > gapTo)
                       copy.splice(j + 1, 0, new Range(gapTo, r.to));
               }
               else if (r.to > gapTo) {
                   copy[j--] = new Range(gapTo, r.to);
               }
               else {
                   copy.splice(j--, 1);
               }
           }
       }
       return current;
   }
   function findCoverChanges(a, b, from, to) {
       let iA = 0, iB = 0, inA = false, inB = false, pos = -1e9;
       let result = [];
       for (;;) {
           let nextA = iA == a.length ? 1e9 : inA ? a[iA].to : a[iA].from;
           let nextB = iB == b.length ? 1e9 : inB ? b[iB].to : b[iB].from;
           if (inA != inB) {
               let start = Math.max(pos, from), end = Math.min(nextA, nextB, to);
               if (start < end)
                   result.push(new Range(start, end));
           }
           pos = Math.min(nextA, nextB);
           if (pos == 1e9)
               break;
           if (nextA == pos) {
               if (!inA)
                   inA = true;
               else {
                   inA = false;
                   iA++;
               }
           }
           if (nextB == pos) {
               if (!inB)
                   inB = true;
               else {
                   inB = false;
                   iB++;
               }
           }
       }
       return result;
   }
   // Given a number of fragments for the outer tree, and a set of ranges
   // to parse, find fragments for inner trees mounted around those
   // ranges, if any.
   function enterFragments(mounts, ranges) {
       let result = [];
       for (let { pos, mount, frag } of mounts) {
           let startPos = pos + (mount.overlay ? mount.overlay[0].from : 0), endPos = startPos + mount.tree.length;
           let from = Math.max(frag.from, startPos), to = Math.min(frag.to, endPos);
           if (mount.overlay) {
               let overlay = mount.overlay.map(r => new Range(r.from + pos, r.to + pos));
               let changes = findCoverChanges(ranges, overlay, from, to);
               for (let i = 0, pos = from;; i++) {
                   let last = i == changes.length, end = last ? to : changes[i].from;
                   if (end > pos)
                       result.push(new TreeFragment(pos, end, mount.tree, -startPos, frag.from >= pos || frag.openStart, frag.to <= end || frag.openEnd));
                   if (last)
                       break;
                   pos = changes[i].to;
               }
           }
           else {
               result.push(new TreeFragment(from, to, mount.tree, -startPos, frag.from >= startPos || frag.openStart, frag.to <= endPos || frag.openEnd));
           }
       }
       return result;
   }

   let nextTagID = 0;
   /**
   Highlighting tags are markers that denote a highlighting category.
   They are [associated](#highlight.styleTags) with parts of a syntax
   tree by a language mode, and then mapped to an actual CSS style by
   a [highlighter](#highlight.Highlighter).

   Because syntax tree node types and highlight styles have to be
   able to talk the same language, CodeMirror uses a mostly _closed_
   [vocabulary](#highlight.tags) of syntax tags (as opposed to
   traditional open string-based systems, which make it hard for
   highlighting themes to cover all the tokens produced by the
   various languages).

   It _is_ possible to [define](#highlight.Tag^define) your own
   highlighting tags for system-internal use (where you control both
   the language package and the highlighter), but such tags will not
   be picked up by regular highlighters (though you can derive them
   from standard tags to allow highlighters to fall back to those).
   */
   class Tag {
       /**
       @internal
       */
       constructor(
       /**
       The set of this tag and all its parent tags, starting with
       this one itself and sorted in order of decreasing specificity.
       */
       set, 
       /**
       The base unmodified tag that this one is based on, if it's
       modified @internal
       */
       base, 
       /**
       The modifiers applied to this.base @internal
       */
       modified) {
           this.set = set;
           this.base = base;
           this.modified = modified;
           /**
           @internal
           */
           this.id = nextTagID++;
       }
       /**
       Define a new tag. If `parent` is given, the tag is treated as a
       sub-tag of that parent, and
       [highlighters](#highlight.tagHighlighter) that don't mention
       this tag will try to fall back to the parent tag (or grandparent
       tag, etc).
       */
       static define(parent) {
           if (parent === null || parent === void 0 ? void 0 : parent.base)
               throw new Error("Can not derive from a modified tag");
           let tag = new Tag([], null, []);
           tag.set.push(tag);
           if (parent)
               for (let t of parent.set)
                   tag.set.push(t);
           return tag;
       }
       /**
       Define a tag _modifier_, which is a function that, given a tag,
       will return a tag that is a subtag of the original. Applying the
       same modifier to a twice tag will return the same value (`m1(t1)
       == m1(t1)`) and applying multiple modifiers will, regardless or
       order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
       
       When multiple modifiers are applied to a given base tag, each
       smaller set of modifiers is registered as a parent, so that for
       example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
       `m1(m3(t1)`, and so on.
       */
       static defineModifier() {
           let mod = new Modifier;
           return (tag) => {
               if (tag.modified.indexOf(mod) > -1)
                   return tag;
               return Modifier.get(tag.base || tag, tag.modified.concat(mod).sort((a, b) => a.id - b.id));
           };
       }
   }
   let nextModifierID = 0;
   class Modifier {
       constructor() {
           this.instances = [];
           this.id = nextModifierID++;
       }
       static get(base, mods) {
           if (!mods.length)
               return base;
           let exists = mods[0].instances.find(t => t.base == base && sameArray(mods, t.modified));
           if (exists)
               return exists;
           let set = [], tag = new Tag(set, base, mods);
           for (let m of mods)
               m.instances.push(tag);
           let configs = powerSet(mods);
           for (let parent of base.set)
               if (!parent.modified.length)
                   for (let config of configs)
                       set.push(Modifier.get(parent, config));
           return tag;
       }
   }
   function sameArray(a, b) {
       return a.length == b.length && a.every((x, i) => x == b[i]);
   }
   function powerSet(array) {
       let sets = [[]];
       for (let i = 0; i < array.length; i++) {
           for (let j = 0, e = sets.length; j < e; j++) {
               sets.push(sets[j].concat(array[i]));
           }
       }
       return sets.sort((a, b) => b.length - a.length);
   }
   /**
   This function is used to add a set of tags to a language syntax
   via [`NodeSet.extend`](#common.NodeSet.extend) or
   [`LRParser.configure`](#lr.LRParser.configure).

   The argument object maps node selectors to [highlighting
   tags](#highlight.Tag) or arrays of tags.

   Node selectors may hold one or more (space-separated) node paths.
   Such a path can be a [node name](#common.NodeType.name), or
   multiple node names (or `*` wildcards) separated by slash
   characters, as in `"Block/Declaration/VariableName"`. Such a path
   matches the final node but only if its direct parent nodes are the
   other nodes mentioned. A `*` in such a path matches any parent,
   but only a single level—wildcards that match multiple parents
   aren't supported, both for efficiency reasons and because Lezer
   trees make it rather hard to reason about what they would match.)

   A path can be ended with `/...` to indicate that the tag assigned
   to the node should also apply to all child nodes, even if they
   match their own style (by default, only the innermost style is
   used).

   When a path ends in `!`, as in `Attribute!`, no further matching
   happens for the node's child nodes, and the entire node gets the
   given style.

   In this notation, node names that contain `/`, `!`, `*`, or `...`
   must be quoted as JSON strings.

   For example:

   ```javascript
   parser.withProps(
     styleTags({
       // Style Number and BigNumber nodes
       "Number BigNumber": tags.number,
       // Style Escape nodes whose parent is String
       "String/Escape": tags.escape,
       // Style anything inside Attributes nodes
       "Attributes!": tags.meta,
       // Add a style to all content inside Italic nodes
       "Italic/...": tags.emphasis,
       // Style InvalidString nodes as both `string` and `invalid`
       "InvalidString": [tags.string, tags.invalid],
       // Style the node named "/" as punctuation
       '"/"': tags.punctuation
     })
   )
   ```
   */
   function styleTags(spec) {
       let byName = Object.create(null);
       for (let prop in spec) {
           let tags = spec[prop];
           if (!Array.isArray(tags))
               tags = [tags];
           for (let part of prop.split(" "))
               if (part) {
                   let pieces = [], mode = 2 /* Normal */, rest = part;
                   for (let pos = 0;;) {
                       if (rest == "..." && pos > 0 && pos + 3 == part.length) {
                           mode = 1 /* Inherit */;
                           break;
                       }
                       let m = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(rest);
                       if (!m)
                           throw new RangeError("Invalid path: " + part);
                       pieces.push(m[0] == "*" ? "" : m[0][0] == '"' ? JSON.parse(m[0]) : m[0]);
                       pos += m[0].length;
                       if (pos == part.length)
                           break;
                       let next = part[pos++];
                       if (pos == part.length && next == "!") {
                           mode = 0 /* Opaque */;
                           break;
                       }
                       if (next != "/")
                           throw new RangeError("Invalid path: " + part);
                       rest = part.slice(pos);
                   }
                   let last = pieces.length - 1, inner = pieces[last];
                   if (!inner)
                       throw new RangeError("Invalid path: " + part);
                   let rule = new Rule$1(tags, mode, last > 0 ? pieces.slice(0, last) : null);
                   byName[inner] = rule.sort(byName[inner]);
               }
       }
       return ruleNodeProp.add(byName);
   }
   const ruleNodeProp = new NodeProp();
   let Rule$1 = class Rule {
       constructor(tags, mode, context, next) {
           this.tags = tags;
           this.mode = mode;
           this.context = context;
           this.next = next;
       }
       get opaque() { return this.mode == 0 /* Opaque */; }
       get inherit() { return this.mode == 1 /* Inherit */; }
       sort(other) {
           if (!other || other.depth < this.depth) {
               this.next = other;
               return this;
           }
           other.next = this.sort(other.next);
           return other;
       }
       get depth() { return this.context ? this.context.length : 0; }
   };
   Rule$1.empty = new Rule$1([], 2 /* Normal */, null);
   /**
   Define a [highlighter](#highlight.Highlighter) from an array of
   tag/class pairs. Classes associated with more specific tags will
   take precedence.
   */
   function tagHighlighter(tags, options) {
       let map = Object.create(null);
       for (let style of tags) {
           if (!Array.isArray(style.tag))
               map[style.tag.id] = style.class;
           else
               for (let tag of style.tag)
                   map[tag.id] = style.class;
       }
       let { scope, all = null } = options || {};
       return {
           style: (tags) => {
               let cls = all;
               for (let tag of tags) {
                   for (let sub of tag.set) {
                       let tagClass = map[sub.id];
                       if (tagClass) {
                           cls = cls ? cls + " " + tagClass : tagClass;
                           break;
                       }
                   }
               }
               return cls;
           },
           scope
       };
   }
   function highlightTags(highlighters, tags) {
       let result = null;
       for (let highlighter of highlighters) {
           let value = highlighter.style(tags);
           if (value)
               result = result ? result + " " + value : value;
       }
       return result;
   }
   /**
   Highlight the given [tree](#common.Tree) with the given
   [highlighter](#highlight.Highlighter).
   */
   function highlightTree(tree, highlighter, 
   /**
   Assign styling to a region of the text. Will be called, in order
   of position, for any ranges where more than zero classes apply.
   `classes` is a space separated string of CSS classes.
   */
   putStyle, 
   /**
   The start of the range to highlight.
   */
   from = 0, 
   /**
   The end of the range.
   */
   to = tree.length) {
       let builder = new HighlightBuilder(from, Array.isArray(highlighter) ? highlighter : [highlighter], putStyle);
       builder.highlightRange(tree.cursor(), from, to, "", builder.highlighters);
       builder.flush(to);
   }
   class HighlightBuilder {
       constructor(at, highlighters, span) {
           this.at = at;
           this.highlighters = highlighters;
           this.span = span;
           this.class = "";
       }
       startSpan(at, cls) {
           if (cls != this.class) {
               this.flush(at);
               if (at > this.at)
                   this.at = at;
               this.class = cls;
           }
       }
       flush(to) {
           if (to > this.at && this.class)
               this.span(this.at, to, this.class);
       }
       highlightRange(cursor, from, to, inheritedClass, highlighters) {
           let { type, from: start, to: end } = cursor;
           if (start >= to || end <= from)
               return;
           if (type.isTop)
               highlighters = this.highlighters.filter(h => !h.scope || h.scope(type));
           let cls = inheritedClass;
           let rule = getStyleTags(cursor) || Rule$1.empty;
           let tagCls = highlightTags(highlighters, rule.tags);
           if (tagCls) {
               if (cls)
                   cls += " ";
               cls += tagCls;
               if (rule.mode == 1 /* Inherit */)
                   inheritedClass += (inheritedClass ? " " : "") + tagCls;
           }
           this.startSpan(Math.max(from, start), cls);
           if (rule.opaque)
               return;
           let mounted = cursor.tree && cursor.tree.prop(NodeProp.mounted);
           if (mounted && mounted.overlay) {
               let inner = cursor.node.enter(mounted.overlay[0].from + start, 1);
               let innerHighlighters = this.highlighters.filter(h => !h.scope || h.scope(mounted.tree.type));
               let hasChild = cursor.firstChild();
               for (let i = 0, pos = start;; i++) {
                   let next = i < mounted.overlay.length ? mounted.overlay[i] : null;
                   let nextPos = next ? next.from + start : end;
                   let rangeFrom = Math.max(from, pos), rangeTo = Math.min(to, nextPos);
                   if (rangeFrom < rangeTo && hasChild) {
                       while (cursor.from < rangeTo) {
                           this.highlightRange(cursor, rangeFrom, rangeTo, inheritedClass, highlighters);
                           this.startSpan(Math.min(rangeTo, cursor.to), cls);
                           if (cursor.to >= nextPos || !cursor.nextSibling())
                               break;
                       }
                   }
                   if (!next || nextPos > to)
                       break;
                   pos = next.to + start;
                   if (pos > from) {
                       this.highlightRange(inner.cursor(), Math.max(from, next.from + start), Math.min(to, pos), "", innerHighlighters);
                       this.startSpan(Math.min(to, pos), cls);
                   }
               }
               if (hasChild)
                   cursor.parent();
           }
           else if (cursor.firstChild()) {
               if (mounted)
                   inheritedClass = "";
               do {
                   if (cursor.to <= from)
                       continue;
                   if (cursor.from >= to)
                       break;
                   this.highlightRange(cursor, from, to, inheritedClass, highlighters);
                   this.startSpan(Math.min(to, cursor.to), cls);
               } while (cursor.nextSibling());
               cursor.parent();
           }
       }
   }
   /**
   Match a syntax node's [highlight rules](#highlight.styleTags). If
   there's a match, return its set of tags, and whether it is
   opaque (uses a `!`) or applies to all child nodes (`/...`).
   */
   function getStyleTags(node) {
       let rule = node.type.prop(ruleNodeProp);
       while (rule && rule.context && !node.matchContext(rule.context))
           rule = rule.next;
       return rule || null;
   }
   const t = Tag.define;
   const comment$2 = t(), name = t(), typeName = t(name), propertyName = t(name), literal = t(), string$3 = t(literal), number$2 = t(literal), content$5 = t(), heading$3 = t(content$5), keyword$1 = t(), operator$2 = t(), punctuation$1 = t(), bracket = t(punctuation$1), meta$1 = t();
   /**
   The default set of highlighting [tags](#highlight.Tag).

   This collection is heavily biased towards programming languages,
   and necessarily incomplete. A full ontology of syntactic
   constructs would fill a stack of books, and be impractical to
   write themes for. So try to make do with this set. If all else
   fails, [open an
   issue](https://github.com/codemirror/codemirror.next) to propose a
   new tag, or [define](#highlight.Tag^define) a local custom tag for
   your use case.

   Note that it is not obligatory to always attach the most specific
   tag possible to an element—if your grammar can't easily
   distinguish a certain type of element (such as a local variable),
   it is okay to style it as its more general variant (a variable).

   For tags that extend some parent tag, the documentation links to
   the parent.
   */
   const tags$1 = {
       /**
       A comment.
       */
       comment: comment$2,
       /**
       A line [comment](#highlight.tags.comment).
       */
       lineComment: t(comment$2),
       /**
       A block [comment](#highlight.tags.comment).
       */
       blockComment: t(comment$2),
       /**
       A documentation [comment](#highlight.tags.comment).
       */
       docComment: t(comment$2),
       /**
       Any kind of identifier.
       */
       name,
       /**
       The [name](#highlight.tags.name) of a variable.
       */
       variableName: t(name),
       /**
       A type [name](#highlight.tags.name).
       */
       typeName: typeName,
       /**
       A tag name (subtag of [`typeName`](#highlight.tags.typeName)).
       */
       tagName: t(typeName),
       /**
       A property or field [name](#highlight.tags.name).
       */
       propertyName: propertyName,
       /**
       An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).
       */
       attributeName: t(propertyName),
       /**
       The [name](#highlight.tags.name) of a class.
       */
       className: t(name),
       /**
       A label [name](#highlight.tags.name).
       */
       labelName: t(name),
       /**
       A namespace [name](#highlight.tags.name).
       */
       namespace: t(name),
       /**
       The [name](#highlight.tags.name) of a macro.
       */
       macroName: t(name),
       /**
       A literal value.
       */
       literal,
       /**
       A string [literal](#highlight.tags.literal).
       */
       string: string$3,
       /**
       A documentation [string](#highlight.tags.string).
       */
       docString: t(string$3),
       /**
       A character literal (subtag of [string](#highlight.tags.string)).
       */
       character: t(string$3),
       /**
       An attribute value (subtag of [string](#highlight.tags.string)).
       */
       attributeValue: t(string$3),
       /**
       A number [literal](#highlight.tags.literal).
       */
       number: number$2,
       /**
       An integer [number](#highlight.tags.number) literal.
       */
       integer: t(number$2),
       /**
       A floating-point [number](#highlight.tags.number) literal.
       */
       float: t(number$2),
       /**
       A boolean [literal](#highlight.tags.literal).
       */
       bool: t(literal),
       /**
       Regular expression [literal](#highlight.tags.literal).
       */
       regexp: t(literal),
       /**
       An escape [literal](#highlight.tags.literal), for example a
       backslash escape in a string.
       */
       escape: t(literal),
       /**
       A color [literal](#highlight.tags.literal).
       */
       color: t(literal),
       /**
       A URL [literal](#highlight.tags.literal).
       */
       url: t(literal),
       /**
       A language keyword.
       */
       keyword: keyword$1,
       /**
       The [keyword](#highlight.tags.keyword) for the self or this
       object.
       */
       self: t(keyword$1),
       /**
       The [keyword](#highlight.tags.keyword) for null.
       */
       null: t(keyword$1),
       /**
       A [keyword](#highlight.tags.keyword) denoting some atomic value.
       */
       atom: t(keyword$1),
       /**
       A [keyword](#highlight.tags.keyword) that represents a unit.
       */
       unit: t(keyword$1),
       /**
       A modifier [keyword](#highlight.tags.keyword).
       */
       modifier: t(keyword$1),
       /**
       A [keyword](#highlight.tags.keyword) that acts as an operator.
       */
       operatorKeyword: t(keyword$1),
       /**
       A control-flow related [keyword](#highlight.tags.keyword).
       */
       controlKeyword: t(keyword$1),
       /**
       A [keyword](#highlight.tags.keyword) that defines something.
       */
       definitionKeyword: t(keyword$1),
       /**
       A [keyword](#highlight.tags.keyword) related to defining or
       interfacing with modules.
       */
       moduleKeyword: t(keyword$1),
       /**
       An operator.
       */
       operator: operator$2,
       /**
       An [operator](#highlight.tags.operator) that dereferences something.
       */
       derefOperator: t(operator$2),
       /**
       Arithmetic-related [operator](#highlight.tags.operator).
       */
       arithmeticOperator: t(operator$2),
       /**
       Logical [operator](#highlight.tags.operator).
       */
       logicOperator: t(operator$2),
       /**
       Bit [operator](#highlight.tags.operator).
       */
       bitwiseOperator: t(operator$2),
       /**
       Comparison [operator](#highlight.tags.operator).
       */
       compareOperator: t(operator$2),
       /**
       [Operator](#highlight.tags.operator) that updates its operand.
       */
       updateOperator: t(operator$2),
       /**
       [Operator](#highlight.tags.operator) that defines something.
       */
       definitionOperator: t(operator$2),
       /**
       Type-related [operator](#highlight.tags.operator).
       */
       typeOperator: t(operator$2),
       /**
       Control-flow [operator](#highlight.tags.operator).
       */
       controlOperator: t(operator$2),
       /**
       Program or markup punctuation.
       */
       punctuation: punctuation$1,
       /**
       [Punctuation](#highlight.tags.punctuation) that separates
       things.
       */
       separator: t(punctuation$1),
       /**
       Bracket-style [punctuation](#highlight.tags.punctuation).
       */
       bracket,
       /**
       Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`
       tokens).
       */
       angleBracket: t(bracket),
       /**
       Square [brackets](#highlight.tags.bracket) (usually `[` and `]`
       tokens).
       */
       squareBracket: t(bracket),
       /**
       Parentheses (usually `(` and `)` tokens). Subtag of
       [bracket](#highlight.tags.bracket).
       */
       paren: t(bracket),
       /**
       Braces (usually `{` and `}` tokens). Subtag of
       [bracket](#highlight.tags.bracket).
       */
       brace: t(bracket),
       /**
       Content, for example plain text in XML or markup documents.
       */
       content: content$5,
       /**
       [Content](#highlight.tags.content) that represents a heading.
       */
       heading: heading$3,
       /**
       A level 1 [heading](#highlight.tags.heading).
       */
       heading1: t(heading$3),
       /**
       A level 2 [heading](#highlight.tags.heading).
       */
       heading2: t(heading$3),
       /**
       A level 3 [heading](#highlight.tags.heading).
       */
       heading3: t(heading$3),
       /**
       A level 4 [heading](#highlight.tags.heading).
       */
       heading4: t(heading$3),
       /**
       A level 5 [heading](#highlight.tags.heading).
       */
       heading5: t(heading$3),
       /**
       A level 6 [heading](#highlight.tags.heading).
       */
       heading6: t(heading$3),
       /**
       A prose separator (such as a horizontal rule).
       */
       contentSeparator: t(content$5),
       /**
       [Content](#highlight.tags.content) that represents a list.
       */
       list: t(content$5),
       /**
       [Content](#highlight.tags.content) that represents a quote.
       */
       quote: t(content$5),
       /**
       [Content](#highlight.tags.content) that is emphasized.
       */
       emphasis: t(content$5),
       /**
       [Content](#highlight.tags.content) that is styled strong.
       */
       strong: t(content$5),
       /**
       [Content](#highlight.tags.content) that is part of a link.
       */
       link: t(content$5),
       /**
       [Content](#highlight.tags.content) that is styled as code or
       monospace.
       */
       monospace: t(content$5),
       /**
       [Content](#highlight.tags.content) that has a strike-through
       style.
       */
       strikethrough: t(content$5),
       /**
       Inserted text in a change-tracking format.
       */
       inserted: t(),
       /**
       Deleted text.
       */
       deleted: t(),
       /**
       Changed text.
       */
       changed: t(),
       /**
       An invalid or unsyntactic element.
       */
       invalid: t(),
       /**
       Metadata or meta-instruction.
       */
       meta: meta$1,
       /**
       [Metadata](#highlight.tags.meta) that applies to the entire
       document.
       */
       documentMeta: t(meta$1),
       /**
       [Metadata](#highlight.tags.meta) that annotates or adds
       attributes to a given syntactic element.
       */
       annotation: t(meta$1),
       /**
       Processing instruction or preprocessor directive. Subtag of
       [meta](#highlight.tags.meta).
       */
       processingInstruction: t(meta$1),
       /**
       [Modifier](#highlight.Tag^defineModifier) that indicates that a
       given element is being defined. Expected to be used with the
       various [name](#highlight.tags.name) tags.
       */
       definition: Tag.defineModifier(),
       /**
       [Modifier](#highlight.Tag^defineModifier) that indicates that
       something is constant. Mostly expected to be used with
       [variable names](#highlight.tags.variableName).
       */
       constant: Tag.defineModifier(),
       /**
       [Modifier](#highlight.Tag^defineModifier) used to indicate that
       a [variable](#highlight.tags.variableName) or [property
       name](#highlight.tags.propertyName) is being called or defined
       as a function.
       */
       function: Tag.defineModifier(),
       /**
       [Modifier](#highlight.Tag^defineModifier) that can be applied to
       [names](#highlight.tags.name) to indicate that they belong to
       the language's standard environment.
       */
       standard: Tag.defineModifier(),
       /**
       [Modifier](#highlight.Tag^defineModifier) that indicates a given
       [names](#highlight.tags.name) is local to some scope.
       */
       local: Tag.defineModifier(),
       /**
       A generic variant [modifier](#highlight.Tag^defineModifier) that
       can be used to tag language-specific alternative variants of
       some common tag. It is recommended for themes to define special
       forms of at least the [string](#highlight.tags.string) and
       [variable name](#highlight.tags.variableName) tags, since those
       come up a lot.
       */
       special: Tag.defineModifier()
   };
   /**
   This is a highlighter that adds stable, predictable classes to
   tokens, for styling with external CSS.

   The following tags are mapped to their name prefixed with `"tok-"`
   (for example `"tok-comment"`):

   * [`link`](#highlight.tags.link)
   * [`heading`](#highlight.tags.heading)
   * [`emphasis`](#highlight.tags.emphasis)
   * [`strong`](#highlight.tags.strong)
   * [`keyword`](#highlight.tags.keyword)
   * [`atom`](#highlight.tags.atom)
   * [`bool`](#highlight.tags.bool)
   * [`url`](#highlight.tags.url)
   * [`labelName`](#highlight.tags.labelName)
   * [`inserted`](#highlight.tags.inserted)
   * [`deleted`](#highlight.tags.deleted)
   * [`literal`](#highlight.tags.literal)
   * [`string`](#highlight.tags.string)
   * [`number`](#highlight.tags.number)
   * [`variableName`](#highlight.tags.variableName)
   * [`typeName`](#highlight.tags.typeName)
   * [`namespace`](#highlight.tags.namespace)
   * [`className`](#highlight.tags.className)
   * [`macroName`](#highlight.tags.macroName)
   * [`propertyName`](#highlight.tags.propertyName)
   * [`operator`](#highlight.tags.operator)
   * [`comment`](#highlight.tags.comment)
   * [`meta`](#highlight.tags.meta)
   * [`punctuation`](#highlight.tags.punctuation)
   * [`invalid`](#highlight.tags.invalid)

   In addition, these mappings are provided:

   * [`regexp`](#highlight.tags.regexp),
     [`escape`](#highlight.tags.escape), and
     [`special`](#highlight.tags.special)[`(string)`](#highlight.tags.string)
     are mapped to `"tok-string2"`
   * [`special`](#highlight.tags.special)[`(variableName)`](#highlight.tags.variableName)
     to `"tok-variableName2"`
   * [`local`](#highlight.tags.local)[`(variableName)`](#highlight.tags.variableName)
     to `"tok-variableName tok-local"`
   * [`definition`](#highlight.tags.definition)[`(variableName)`](#highlight.tags.variableName)
     to `"tok-variableName tok-definition"`
   * [`definition`](#highlight.tags.definition)[`(propertyName)`](#highlight.tags.propertyName)
     to `"tok-propertyName tok-definition"`
   */
   const classHighlighter = tagHighlighter([
       { tag: tags$1.link, class: "tok-link" },
       { tag: tags$1.heading, class: "tok-heading" },
       { tag: tags$1.emphasis, class: "tok-emphasis" },
       { tag: tags$1.strong, class: "tok-strong" },
       { tag: tags$1.keyword, class: "tok-keyword" },
       { tag: tags$1.atom, class: "tok-atom" },
       { tag: tags$1.bool, class: "tok-bool" },
       { tag: tags$1.url, class: "tok-url" },
       { tag: tags$1.labelName, class: "tok-labelName" },
       { tag: tags$1.inserted, class: "tok-inserted" },
       { tag: tags$1.deleted, class: "tok-deleted" },
       { tag: tags$1.literal, class: "tok-literal" },
       { tag: tags$1.string, class: "tok-string" },
       { tag: tags$1.number, class: "tok-number" },
       { tag: [tags$1.regexp, tags$1.escape, tags$1.special(tags$1.string)], class: "tok-string2" },
       { tag: tags$1.variableName, class: "tok-variableName" },
       { tag: tags$1.local(tags$1.variableName), class: "tok-variableName tok-local" },
       { tag: tags$1.definition(tags$1.variableName), class: "tok-variableName tok-definition" },
       { tag: tags$1.special(tags$1.variableName), class: "tok-variableName2" },
       { tag: tags$1.definition(tags$1.propertyName), class: "tok-propertyName tok-definition" },
       { tag: tags$1.typeName, class: "tok-typeName" },
       { tag: tags$1.namespace, class: "tok-namespace" },
       { tag: tags$1.className, class: "tok-className" },
       { tag: tags$1.macroName, class: "tok-macroName" },
       { tag: tags$1.propertyName, class: "tok-propertyName" },
       { tag: tags$1.operator, class: "tok-operator" },
       { tag: tags$1.comment, class: "tok-comment" },
       { tag: tags$1.meta, class: "tok-meta" },
       { tag: tags$1.invalid, class: "tok-invalid" },
       { tag: tags$1.punctuation, class: "tok-punctuation" }
   ]);

   var _a$1;
   /**
   Node prop stored in a parser's top syntax node to provide the
   facet that stores language-specific data for that language.
   */
   const languageDataProp = /*@__PURE__*/new NodeProp();
   /**
   Helper function to define a facet (to be added to the top syntax
   node(s) for a language via
   [`languageDataProp`](https://codemirror.net/6/docs/ref/#language.languageDataProp)), that will be
   used to associate language data with the language. You
   probably only need this when subclassing
   [`Language`](https://codemirror.net/6/docs/ref/#language.Language).
   */
   function defineLanguageFacet(baseData) {
       return Facet.define({
           combine: baseData ? values => values.concat(baseData) : undefined
       });
   }
   /**
   Syntax node prop used to register sublanguages. Should be added to
   the top level node type for the language.
   */
   const sublanguageProp = /*@__PURE__*/new NodeProp();
   /**
   A language object manages parsing and per-language
   [metadata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt). Parse data is
   managed as a [Lezer](https://lezer.codemirror.net) tree. The class
   can be used directly, via the [`LRLanguage`](https://codemirror.net/6/docs/ref/#language.LRLanguage)
   subclass for [Lezer](https://lezer.codemirror.net/) LR parsers, or
   via the [`StreamLanguage`](https://codemirror.net/6/docs/ref/#language.StreamLanguage) subclass
   for stream parsers.
   */
   class Language {
       /**
       Construct a language object. If you need to invoke this
       directly, first define a data facet with
       [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then
       configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it
       to the language's outer syntax node.
       */
       constructor(
       /**
       The [language data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) facet
       used for this language.
       */
       data, parser, extraExtensions = [], 
       /**
       A language name.
       */
       name = "") {
           this.data = data;
           this.name = name;
           // Kludge to define EditorState.tree as a debugging helper,
           // without the EditorState package actually knowing about
           // languages and lezer trees.
           if (!EditorState.prototype.hasOwnProperty("tree"))
               Object.defineProperty(EditorState.prototype, "tree", { get() { return syntaxTree(this); } });
           this.parser = parser;
           this.extension = [
               language.of(this),
               EditorState.languageData.of((state, pos, side) => {
                   let top = topNodeAt(state, pos, side), data = top.type.prop(languageDataProp);
                   if (!data)
                       return [];
                   let base = state.facet(data), sub = top.type.prop(sublanguageProp);
                   if (sub) {
                       let innerNode = top.resolve(pos - top.from, side);
                       for (let sublang of sub)
                           if (sublang.test(innerNode, state)) {
                               let data = state.facet(sublang.facet);
                               return sublang.type == "replace" ? data : data.concat(base);
                           }
                   }
                   return base;
               })
           ].concat(extraExtensions);
       }
       /**
       Query whether this language is active at the given position.
       */
       isActiveAt(state, pos, side = -1) {
           return topNodeAt(state, pos, side).type.prop(languageDataProp) == this.data;
       }
       /**
       Find the document regions that were parsed using this language.
       The returned regions will _include_ any nested languages rooted
       in this language, when those exist.
       */
       findRegions(state) {
           let lang = state.facet(language);
           if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data)
               return [{ from: 0, to: state.doc.length }];
           if (!lang || !lang.allowsNesting)
               return [];
           let result = [];
           let explore = (tree, from) => {
               if (tree.prop(languageDataProp) == this.data) {
                   result.push({ from, to: from + tree.length });
                   return;
               }
               let mount = tree.prop(NodeProp.mounted);
               if (mount) {
                   if (mount.tree.prop(languageDataProp) == this.data) {
                       if (mount.overlay)
                           for (let r of mount.overlay)
                               result.push({ from: r.from + from, to: r.to + from });
                       else
                           result.push({ from: from, to: from + tree.length });
                       return;
                   }
                   else if (mount.overlay) {
                       let size = result.length;
                       explore(mount.tree, mount.overlay[0].from + from);
                       if (result.length > size)
                           return;
                   }
               }
               for (let i = 0; i < tree.children.length; i++) {
                   let ch = tree.children[i];
                   if (ch instanceof Tree)
                       explore(ch, tree.positions[i] + from);
               }
           };
           explore(syntaxTree(state), 0);
           return result;
       }
       /**
       Indicates whether this language allows nested languages. The
       default implementation returns true.
       */
       get allowsNesting() { return true; }
   }
   /**
   @internal
   */
   Language.setState = /*@__PURE__*/StateEffect.define();
   function topNodeAt(state, pos, side) {
       let topLang = state.facet(language), tree = syntaxTree(state).topNode;
       if (!topLang || topLang.allowsNesting) {
           for (let node = tree; node; node = node.enter(pos, side, IterMode.ExcludeBuffers))
               if (node.type.isTop)
                   tree = node;
       }
       return tree;
   }
   /**
   A subclass of [`Language`](https://codemirror.net/6/docs/ref/#language.Language) for use with Lezer
   [LR parsers](https://lezer.codemirror.net/docs/ref#lr.LRParser)
   parsers.
   */
   class LRLanguage extends Language {
       constructor(data, parser, name) {
           super(data, parser, [], name);
           this.parser = parser;
       }
       /**
       Define a language from a parser.
       */
       static define(spec) {
           let data = defineLanguageFacet(spec.languageData);
           return new LRLanguage(data, spec.parser.configure({
               props: [languageDataProp.add(type => type.isTop ? data : undefined)]
           }), spec.name);
       }
       /**
       Create a new instance of this language with a reconfigured
       version of its parser and optionally a new name.
       */
       configure(options, name) {
           return new LRLanguage(this.data, this.parser.configure(options), name || this.name);
       }
       get allowsNesting() { return this.parser.hasWrappers(); }
   }
   /**
   Get the syntax tree for a state, which is the current (possibly
   incomplete) parse tree of the active
   [language](https://codemirror.net/6/docs/ref/#language.Language), or the empty tree if there is no
   language available.
   */
   function syntaxTree(state) {
       let field = state.field(Language.state, false);
       return field ? field.tree : Tree.empty;
   }
   /**
   Lezer-style
   [`Input`](https://lezer.codemirror.net/docs/ref#common.Input)
   object for a [`Text`](https://codemirror.net/6/docs/ref/#state.Text) object.
   */
   class DocInput {
       /**
       Create an input object for the given document.
       */
       constructor(doc) {
           this.doc = doc;
           this.cursorPos = 0;
           this.string = "";
           this.cursor = doc.iter();
       }
       get length() { return this.doc.length; }
       syncTo(pos) {
           this.string = this.cursor.next(pos - this.cursorPos).value;
           this.cursorPos = pos + this.string.length;
           return this.cursorPos - this.string.length;
       }
       chunk(pos) {
           this.syncTo(pos);
           return this.string;
       }
       get lineChunks() { return true; }
       read(from, to) {
           let stringStart = this.cursorPos - this.string.length;
           if (from < stringStart || to >= this.cursorPos)
               return this.doc.sliceString(from, to);
           else
               return this.string.slice(from - stringStart, to - stringStart);
       }
   }
   let currentContext = null;
   /**
   A parse context provided to parsers working on the editor content.
   */
   class ParseContext {
       constructor(parser, 
       /**
       The current editor state.
       */
       state, 
       /**
       Tree fragments that can be reused by incremental re-parses.
       */
       fragments = [], 
       /**
       @internal
       */
       tree, 
       /**
       @internal
       */
       treeLen, 
       /**
       The current editor viewport (or some overapproximation
       thereof). Intended to be used for opportunistically avoiding
       work (in which case
       [`skipUntilInView`](https://codemirror.net/6/docs/ref/#language.ParseContext.skipUntilInView)
       should be called to make sure the parser is restarted when the
       skipped region becomes visible).
       */
       viewport, 
       /**
       @internal
       */
       skipped, 
       /**
       This is where skipping parsers can register a promise that,
       when resolved, will schedule a new parse. It is cleared when
       the parse worker picks up the promise. @internal
       */
       scheduleOn) {
           this.parser = parser;
           this.state = state;
           this.fragments = fragments;
           this.tree = tree;
           this.treeLen = treeLen;
           this.viewport = viewport;
           this.skipped = skipped;
           this.scheduleOn = scheduleOn;
           this.parse = null;
           /**
           @internal
           */
           this.tempSkipped = [];
       }
       /**
       @internal
       */
       static create(parser, state, viewport) {
           return new ParseContext(parser, state, [], Tree.empty, 0, viewport, [], null);
       }
       startParse() {
           return this.parser.startParse(new DocInput(this.state.doc), this.fragments);
       }
       /**
       @internal
       */
       work(until, upto) {
           if (upto != null && upto >= this.state.doc.length)
               upto = undefined;
           if (this.tree != Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {
               this.takeTree();
               return true;
           }
           return this.withContext(() => {
               var _a;
               if (typeof until == "number") {
                   let endTime = Date.now() + until;
                   until = () => Date.now() > endTime;
               }
               if (!this.parse)
                   this.parse = this.startParse();
               if (upto != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > upto) &&
                   upto < this.state.doc.length)
                   this.parse.stopAt(upto);
               for (;;) {
                   let done = this.parse.advance();
                   if (done) {
                       this.fragments = this.withoutTempSkipped(TreeFragment.addTree(done, this.fragments, this.parse.stoppedAt != null));
                       this.treeLen = (_a = this.parse.stoppedAt) !== null && _a !== void 0 ? _a : this.state.doc.length;
                       this.tree = done;
                       this.parse = null;
                       if (this.treeLen < (upto !== null && upto !== void 0 ? upto : this.state.doc.length))
                           this.parse = this.startParse();
                       else
                           return true;
                   }
                   if (until())
                       return false;
               }
           });
       }
       /**
       @internal
       */
       takeTree() {
           let pos, tree;
           if (this.parse && (pos = this.parse.parsedPos) >= this.treeLen) {
               if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos)
                   this.parse.stopAt(pos);
               this.withContext(() => { while (!(tree = this.parse.advance())) { } });
               this.treeLen = pos;
               this.tree = tree;
               this.fragments = this.withoutTempSkipped(TreeFragment.addTree(this.tree, this.fragments, true));
               this.parse = null;
           }
       }
       withContext(f) {
           let prev = currentContext;
           currentContext = this;
           try {
               return f();
           }
           finally {
               currentContext = prev;
           }
       }
       withoutTempSkipped(fragments) {
           for (let r; r = this.tempSkipped.pop();)
               fragments = cutFragments(fragments, r.from, r.to);
           return fragments;
       }
       /**
       @internal
       */
       changes(changes, newState) {
           let { fragments, tree, treeLen, viewport, skipped } = this;
           this.takeTree();
           if (!changes.empty) {
               let ranges = [];
               changes.iterChangedRanges((fromA, toA, fromB, toB) => ranges.push({ fromA, toA, fromB, toB }));
               fragments = TreeFragment.applyChanges(fragments, ranges);
               tree = Tree.empty;
               treeLen = 0;
               viewport = { from: changes.mapPos(viewport.from, -1), to: changes.mapPos(viewport.to, 1) };
               if (this.skipped.length) {
                   skipped = [];
                   for (let r of this.skipped) {
                       let from = changes.mapPos(r.from, 1), to = changes.mapPos(r.to, -1);
                       if (from < to)
                           skipped.push({ from, to });
                   }
               }
           }
           return new ParseContext(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);
       }
       /**
       @internal
       */
       updateViewport(viewport) {
           if (this.viewport.from == viewport.from && this.viewport.to == viewport.to)
               return false;
           this.viewport = viewport;
           let startLen = this.skipped.length;
           for (let i = 0; i < this.skipped.length; i++) {
               let { from, to } = this.skipped[i];
               if (from < viewport.to && to > viewport.from) {
                   this.fragments = cutFragments(this.fragments, from, to);
                   this.skipped.splice(i--, 1);
               }
           }
           if (this.skipped.length >= startLen)
               return false;
           this.reset();
           return true;
       }
       /**
       @internal
       */
       reset() {
           if (this.parse) {
               this.takeTree();
               this.parse = null;
           }
       }
       /**
       Notify the parse scheduler that the given region was skipped
       because it wasn't in view, and the parse should be restarted
       when it comes into view.
       */
       skipUntilInView(from, to) {
           this.skipped.push({ from, to });
       }
       /**
       Returns a parser intended to be used as placeholder when
       asynchronously loading a nested parser. It'll skip its input and
       mark it as not-really-parsed, so that the next update will parse
       it again.
       
       When `until` is given, a reparse will be scheduled when that
       promise resolves.
       */
       static getSkippingParser(until) {
           return new class extends Parser$1 {
               createParse(input, fragments, ranges) {
                   let from = ranges[0].from, to = ranges[ranges.length - 1].to;
                   let parser = {
                       parsedPos: from,
                       advance() {
                           let cx = currentContext;
                           if (cx) {
                               for (let r of ranges)
                                   cx.tempSkipped.push(r);
                               if (until)
                                   cx.scheduleOn = cx.scheduleOn ? Promise.all([cx.scheduleOn, until]) : until;
                           }
                           this.parsedPos = to;
                           return new Tree(NodeType.none, [], [], to - from);
                       },
                       stoppedAt: null,
                       stopAt() { }
                   };
                   return parser;
               }
           };
       }
       /**
       @internal
       */
       isDone(upto) {
           upto = Math.min(upto, this.state.doc.length);
           let frags = this.fragments;
           return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;
       }
       /**
       Get the context for the current parse, or `null` if no editor
       parse is in progress.
       */
       static get() { return currentContext; }
   }
   function cutFragments(fragments, from, to) {
       return TreeFragment.applyChanges(fragments, [{ fromA: from, toA: to, fromB: from, toB: to }]);
   }
   class LanguageState {
       constructor(
       // A mutable parse state that is used to preserve work done during
       // the lifetime of a state when moving to the next state.
       context) {
           this.context = context;
           this.tree = context.tree;
       }
       apply(tr) {
           if (!tr.docChanged && this.tree == this.context.tree)
               return this;
           let newCx = this.context.changes(tr.changes, tr.state);
           // If the previous parse wasn't done, go forward only up to its
           // end position or the end of the viewport, to avoid slowing down
           // state updates with parse work beyond the viewport.
           let upto = this.context.treeLen == tr.startState.doc.length ? undefined
               : Math.max(tr.changes.mapPos(this.context.treeLen), newCx.viewport.to);
           if (!newCx.work(20 /* Work.Apply */, upto))
               newCx.takeTree();
           return new LanguageState(newCx);
       }
       static init(state) {
           let vpTo = Math.min(3000 /* Work.InitViewport */, state.doc.length);
           let parseState = ParseContext.create(state.facet(language).parser, state, { from: 0, to: vpTo });
           if (!parseState.work(20 /* Work.Apply */, vpTo))
               parseState.takeTree();
           return new LanguageState(parseState);
       }
   }
   Language.state = /*@__PURE__*/StateField.define({
       create: LanguageState.init,
       update(value, tr) {
           for (let e of tr.effects)
               if (e.is(Language.setState))
                   return e.value;
           if (tr.startState.facet(language) != tr.state.facet(language))
               return LanguageState.init(tr.state);
           return value.apply(tr);
       }
   });
   let requestIdle = (callback) => {
       let timeout = setTimeout(() => callback(), 500 /* Work.MaxPause */);
       return () => clearTimeout(timeout);
   };
   if (typeof requestIdleCallback != "undefined")
       requestIdle = (callback) => {
           let idle = -1, timeout = setTimeout(() => {
               idle = requestIdleCallback(callback, { timeout: 500 /* Work.MaxPause */ - 100 /* Work.MinPause */ });
           }, 100 /* Work.MinPause */);
           return () => idle < 0 ? clearTimeout(timeout) : cancelIdleCallback(idle);
       };
   const isInputPending = typeof navigator != "undefined" && ((_a$1 = navigator.scheduling) === null || _a$1 === void 0 ? void 0 : _a$1.isInputPending)
       ? () => navigator.scheduling.isInputPending() : null;
   const parseWorker = /*@__PURE__*/ViewPlugin.fromClass(class ParseWorker {
       constructor(view) {
           this.view = view;
           this.working = null;
           this.workScheduled = 0;
           // End of the current time chunk
           this.chunkEnd = -1;
           // Milliseconds of budget left for this chunk
           this.chunkBudget = -1;
           this.work = this.work.bind(this);
           this.scheduleWork();
       }
       update(update) {
           let cx = this.view.state.field(Language.state).context;
           if (cx.updateViewport(update.view.viewport) || this.view.viewport.to > cx.treeLen)
               this.scheduleWork();
           if (update.docChanged) {
               if (this.view.hasFocus)
                   this.chunkBudget += 50 /* Work.ChangeBonus */;
               this.scheduleWork();
           }
           this.checkAsyncSchedule(cx);
       }
       scheduleWork() {
           if (this.working)
               return;
           let { state } = this.view, field = state.field(Language.state);
           if (field.tree != field.context.tree || !field.context.isDone(state.doc.length))
               this.working = requestIdle(this.work);
       }
       work(deadline) {
           this.working = null;
           let now = Date.now();
           if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) { // Start a new chunk
               this.chunkEnd = now + 30000 /* Work.ChunkTime */;
               this.chunkBudget = 3000 /* Work.ChunkBudget */;
           }
           if (this.chunkBudget <= 0)
               return; // No more budget
           let { state, viewport: { to: vpTo } } = this.view, field = state.field(Language.state);
           if (field.tree == field.context.tree && field.context.isDone(vpTo + 100000 /* Work.MaxParseAhead */))
               return;
           let endTime = Date.now() + Math.min(this.chunkBudget, 100 /* Work.Slice */, deadline && !isInputPending ? Math.max(25 /* Work.MinSlice */, deadline.timeRemaining() - 5) : 1e9);
           let viewportFirst = field.context.treeLen < vpTo && state.doc.length > vpTo + 1000;
           let done = field.context.work(() => {
               return isInputPending && isInputPending() || Date.now() > endTime;
           }, vpTo + (viewportFirst ? 0 : 100000 /* Work.MaxParseAhead */));
           this.chunkBudget -= Date.now() - now;
           if (done || this.chunkBudget <= 0) {
               field.context.takeTree();
               this.view.dispatch({ effects: Language.setState.of(new LanguageState(field.context)) });
           }
           if (this.chunkBudget > 0 && !(done && !viewportFirst))
               this.scheduleWork();
           this.checkAsyncSchedule(field.context);
       }
       checkAsyncSchedule(cx) {
           if (cx.scheduleOn) {
               this.workScheduled++;
               cx.scheduleOn
                   .then(() => this.scheduleWork())
                   .catch(err => logException(this.view.state, err))
                   .then(() => this.workScheduled--);
               cx.scheduleOn = null;
           }
       }
       destroy() {
           if (this.working)
               this.working();
       }
       isWorking() {
           return !!(this.working || this.workScheduled > 0);
       }
   }, {
       eventHandlers: { focus() { this.scheduleWork(); } }
   });
   /**
   The facet used to associate a language with an editor state. Used
   by `Language` object's `extension` property (so you don't need to
   manually wrap your languages in this). Can be used to access the
   current language on a state.
   */
   const language = /*@__PURE__*/Facet.define({
       combine(languages) { return languages.length ? languages[0] : null; },
       enables: language => [
           Language.state,
           parseWorker,
           EditorView.contentAttributes.compute([language], state => {
               let lang = state.facet(language);
               return lang && lang.name ? { "data-language": lang.name } : {};
           })
       ]
   });
   /**
   This class bundles a [language](https://codemirror.net/6/docs/ref/#language.Language) with an
   optional set of supporting extensions. Language packages are
   encouraged to export a function that optionally takes a
   configuration object and returns a `LanguageSupport` instance, as
   the main way for client code to use the package.
   */
   class LanguageSupport {
       /**
       Create a language support object.
       */
       constructor(
       /**
       The language object.
       */
       language, 
       /**
       An optional set of supporting extensions. When nesting a
       language in another language, the outer language is encouraged
       to include the supporting extensions for its inner languages
       in its own set of support extensions.
       */
       support = []) {
           this.language = language;
           this.support = support;
           this.extension = [language, support];
       }
   }
   /**
   Language descriptions are used to store metadata about languages
   and to dynamically load them. Their main role is finding the
   appropriate language for a filename or dynamically loading nested
   parsers.
   */
   class LanguageDescription {
       constructor(
       /**
       The name of this language.
       */
       name, 
       /**
       Alternative names for the mode (lowercased, includes `this.name`).
       */
       alias, 
       /**
       File extensions associated with this language.
       */
       extensions, 
       /**
       Optional filename pattern that should be associated with this
       language.
       */
       filename, loadFunc, 
       /**
       If the language has been loaded, this will hold its value.
       */
       support = undefined) {
           this.name = name;
           this.alias = alias;
           this.extensions = extensions;
           this.filename = filename;
           this.loadFunc = loadFunc;
           this.support = support;
           this.loading = null;
       }
       /**
       Start loading the the language. Will return a promise that
       resolves to a [`LanguageSupport`](https://codemirror.net/6/docs/ref/#language.LanguageSupport)
       object when the language successfully loads.
       */
       load() {
           return this.loading || (this.loading = this.loadFunc().then(support => this.support = support, err => { this.loading = null; throw err; }));
       }
       /**
       Create a language description.
       */
       static of(spec) {
           let { load, support } = spec;
           if (!load) {
               if (!support)
                   throw new RangeError("Must pass either 'load' or 'support' to LanguageDescription.of");
               load = () => Promise.resolve(support);
           }
           return new LanguageDescription(spec.name, (spec.alias || []).concat(spec.name).map(s => s.toLowerCase()), spec.extensions || [], spec.filename, load, support);
       }
       /**
       Look for a language in the given array of descriptions that
       matches the filename. Will first match
       [`filename`](https://codemirror.net/6/docs/ref/#language.LanguageDescription.filename) patterns,
       and then [extensions](https://codemirror.net/6/docs/ref/#language.LanguageDescription.extensions),
       and return the first language that matches.
       */
       static matchFilename(descs, filename) {
           for (let d of descs)
               if (d.filename && d.filename.test(filename))
                   return d;
           let ext = /\.([^.]+)$/.exec(filename);
           if (ext)
               for (let d of descs)
                   if (d.extensions.indexOf(ext[1]) > -1)
                       return d;
           return null;
       }
       /**
       Look for a language whose name or alias matches the the given
       name (case-insensitively). If `fuzzy` is true, and no direct
       matchs is found, this'll also search for a language whose name
       or alias occurs in the string (for names shorter than three
       characters, only when surrounded by non-word characters).
       */
       static matchLanguageName(descs, name, fuzzy = true) {
           name = name.toLowerCase();
           for (let d of descs)
               if (d.alias.some(a => a == name))
                   return d;
           if (fuzzy)
               for (let d of descs)
                   for (let a of d.alias) {
                       let found = name.indexOf(a);
                       if (found > -1 && (a.length > 2 || !/\w/.test(name[found - 1]) && !/\w/.test(name[found + a.length])))
                           return d;
                   }
           return null;
       }
   }

   /**
   Facet that defines a way to provide a function that computes the
   appropriate indentation depth, as a column number (see
   [`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)), at the start of a given
   line. A return value of `null` indicates no indentation can be
   determined, and the line should inherit the indentation of the one
   above it. A return value of `undefined` defers to the next indent
   service.
   */
   const indentService = /*@__PURE__*/Facet.define();
   /**
   Facet for overriding the unit by which indentation happens. Should
   be a string consisting either entirely of the same whitespace
   character. When not set, this defaults to 2 spaces.
   */
   const indentUnit = /*@__PURE__*/Facet.define({
       combine: values => {
           if (!values.length)
               return "  ";
           let unit = values[0];
           if (!unit || /\S/.test(unit) || Array.from(unit).some(e => e != unit[0]))
               throw new Error("Invalid indent unit: " + JSON.stringify(values[0]));
           return unit;
       }
   });
   /**
   Return the _column width_ of an indent unit in the state.
   Determined by the [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit)
   facet, and [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) when that
   contains tabs.
   */
   function getIndentUnit(state) {
       let unit = state.facet(indentUnit);
       return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;
   }
   /**
   Create an indentation string that covers columns 0 to `cols`.
   Will use tabs for as much of the columns as possible when the
   [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit) facet contains
   tabs.
   */
   function indentString(state, cols) {
       let result = "", ts = state.tabSize, ch = state.facet(indentUnit)[0];
       if (ch == "\t") {
           while (cols >= ts) {
               result += "\t";
               cols -= ts;
           }
           ch = " ";
       }
       for (let i = 0; i < cols; i++)
           result += ch;
       return result;
   }
   /**
   Get the indentation, as a column number, at the given position.
   Will first consult any [indent services](https://codemirror.net/6/docs/ref/#language.indentService)
   that are registered, and if none of those return an indentation,
   this will check the syntax tree for the [indent node
   prop](https://codemirror.net/6/docs/ref/#language.indentNodeProp) and use that if found. Returns a
   number when an indentation could be determined, and null
   otherwise.
   */
   function getIndentation(context, pos) {
       if (context instanceof EditorState)
           context = new IndentContext(context);
       for (let service of context.state.facet(indentService)) {
           let result = service(context, pos);
           if (result !== undefined)
               return result;
       }
       let tree = syntaxTree(context.state);
       return tree ? syntaxIndentation(context, tree, pos) : null;
   }
   /**
   Indentation contexts are used when calling [indentation
   services](https://codemirror.net/6/docs/ref/#language.indentService). They provide helper utilities
   useful in indentation logic, and can selectively override the
   indentation reported for some lines.
   */
   class IndentContext {
       /**
       Create an indent context.
       */
       constructor(
       /**
       The editor state.
       */
       state, 
       /**
       @internal
       */
       options = {}) {
           this.state = state;
           this.options = options;
           this.unit = getIndentUnit(state);
       }
       /**
       Get a description of the line at the given position, taking
       [simulated line
       breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
       into account. If there is such a break at `pos`, the `bias`
       argument determines whether the part of the line line before or
       after the break is used.
       */
       lineAt(pos, bias = 1) {
           let line = this.state.doc.lineAt(pos);
           let { simulateBreak, simulateDoubleBreak } = this.options;
           if (simulateBreak != null && simulateBreak >= line.from && simulateBreak <= line.to) {
               if (simulateDoubleBreak && simulateBreak == pos)
                   return { text: "", from: pos };
               else if (bias < 0 ? simulateBreak < pos : simulateBreak <= pos)
                   return { text: line.text.slice(simulateBreak - line.from), from: simulateBreak };
               else
                   return { text: line.text.slice(0, simulateBreak - line.from), from: line.from };
           }
           return line;
       }
       /**
       Get the text directly after `pos`, either the entire line
       or the next 100 characters, whichever is shorter.
       */
       textAfterPos(pos, bias = 1) {
           if (this.options.simulateDoubleBreak && pos == this.options.simulateBreak)
               return "";
           let { text, from } = this.lineAt(pos, bias);
           return text.slice(pos - from, Math.min(text.length, pos + 100 - from));
       }
       /**
       Find the column for the given position.
       */
       column(pos, bias = 1) {
           let { text, from } = this.lineAt(pos, bias);
           let result = this.countColumn(text, pos - from);
           let override = this.options.overrideIndentation ? this.options.overrideIndentation(from) : -1;
           if (override > -1)
               result += override - this.countColumn(text, text.search(/\S|$/));
           return result;
       }
       /**
       Find the column position (taking tabs into account) of the given
       position in the given string.
       */
       countColumn(line, pos = line.length) {
           return countColumn(line, this.state.tabSize, pos);
       }
       /**
       Find the indentation column of the line at the given point.
       */
       lineIndent(pos, bias = 1) {
           let { text, from } = this.lineAt(pos, bias);
           let override = this.options.overrideIndentation;
           if (override) {
               let overriden = override(from);
               if (overriden > -1)
                   return overriden;
           }
           return this.countColumn(text, text.search(/\S|$/));
       }
       /**
       Returns the [simulated line
       break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
       for this context, if any.
       */
       get simulatedBreak() {
           return this.options.simulateBreak || null;
       }
   }
   /**
   A syntax tree node prop used to associate indentation strategies
   with node types. Such a strategy is a function from an indentation
   context to a column number (see also
   [`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)) or null, where null
   indicates that no definitive indentation can be determined.
   */
   const indentNodeProp = /*@__PURE__*/new NodeProp();
   // Compute the indentation for a given position from the syntax tree.
   function syntaxIndentation(cx, ast, pos) {
       return indentFrom(ast.resolveInner(pos).enterUnfinishedNodesBefore(pos), pos, cx);
   }
   function ignoreClosed(cx) {
       return cx.pos == cx.options.simulateBreak && cx.options.simulateDoubleBreak;
   }
   function indentStrategy(tree) {
       let strategy = tree.type.prop(indentNodeProp);
       if (strategy)
           return strategy;
       let first = tree.firstChild, close;
       if (first && (close = first.type.prop(NodeProp.closedBy))) {
           let last = tree.lastChild, closed = last && close.indexOf(last.name) > -1;
           return cx => delimitedStrategy(cx, true, 1, undefined, closed && !ignoreClosed(cx) ? last.from : undefined);
       }
       return tree.parent == null ? topIndent$2 : null;
   }
   function indentFrom(node, pos, base) {
       for (; node; node = node.parent) {
           let strategy = indentStrategy(node);
           if (strategy)
               return strategy(TreeIndentContext.create(base, pos, node));
       }
       return null;
   }
   function topIndent$2() { return 0; }
   /**
   Objects of this type provide context information and helper
   methods to indentation functions registered on syntax nodes.
   */
   class TreeIndentContext extends IndentContext {
       constructor(base, 
       /**
       The position at which indentation is being computed.
       */
       pos, 
       /**
       The syntax tree node to which the indentation strategy
       applies.
       */
       node) {
           super(base.state, base.options);
           this.base = base;
           this.pos = pos;
           this.node = node;
       }
       /**
       @internal
       */
       static create(base, pos, node) {
           return new TreeIndentContext(base, pos, node);
       }
       /**
       Get the text directly after `this.pos`, either the entire line
       or the next 100 characters, whichever is shorter.
       */
       get textAfter() {
           return this.textAfterPos(this.pos);
       }
       /**
       Get the indentation at the reference line for `this.node`, which
       is the line on which it starts, unless there is a node that is
       _not_ a parent of this node covering the start of that line. If
       so, the line at the start of that node is tried, again skipping
       on if it is covered by another such node.
       */
       get baseIndent() {
           let line = this.state.doc.lineAt(this.node.from);
           // Skip line starts that are covered by a sibling (or cousin, etc)
           for (;;) {
               let atBreak = this.node.resolve(line.from);
               while (atBreak.parent && atBreak.parent.from == atBreak.from)
                   atBreak = atBreak.parent;
               if (isParent(atBreak, this.node))
                   break;
               line = this.state.doc.lineAt(atBreak.from);
           }
           return this.lineIndent(line.from);
       }
       /**
       Continue looking for indentations in the node's parent nodes,
       and return the result of that.
       */
       continue() {
           let parent = this.node.parent;
           return parent ? indentFrom(parent, this.pos, this.base) : 0;
       }
   }
   function isParent(parent, of) {
       for (let cur = of; cur; cur = cur.parent)
           if (parent == cur)
               return true;
       return false;
   }
   // Check whether a delimited node is aligned (meaning there are
   // non-skipped nodes on the same line as the opening delimiter). And
   // if so, return the opening token.
   function bracketedAligned(context) {
       let tree = context.node;
       let openToken = tree.childAfter(tree.from), last = tree.lastChild;
       if (!openToken)
           return null;
       let sim = context.options.simulateBreak;
       let openLine = context.state.doc.lineAt(openToken.from);
       let lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);
       for (let pos = openToken.to;;) {
           let next = tree.childAfter(pos);
           if (!next || next == last)
               return null;
           if (!next.type.isSkipped)
               return next.from < lineEnd ? openToken : null;
           pos = next.to;
       }
   }
   /**
   An indentation strategy for delimited (usually bracketed) nodes.
   Will, by default, indent one unit more than the parent's base
   indent unless the line starts with a closing token. When `align`
   is true and there are non-skipped nodes on the node's opening
   line, the content of the node will be aligned with the end of the
   opening node, like this:

       foo(bar,
           baz)
   */
   function delimitedIndent({ closing, align = true, units = 1 }) {
       return (context) => delimitedStrategy(context, align, units, closing);
   }
   function delimitedStrategy(context, align, units, closing, closedAt) {
       let after = context.textAfter, space = after.match(/^\s*/)[0].length;
       let closed = closing && after.slice(space, space + closing.length) == closing || closedAt == context.pos + space;
       let aligned = align ? bracketedAligned(context) : null;
       if (aligned)
           return closed ? context.column(aligned.from) : context.column(aligned.to);
       return context.baseIndent + (closed ? 0 : context.unit * units);
   }
   /**
   An indentation strategy that aligns a node's content to its base
   indentation.
   */
   const flatIndent = (context) => context.baseIndent;
   /**
   Creates an indentation strategy that, by default, indents
   continued lines one unit more than the node's base indentation.
   You can provide `except` to prevent indentation of lines that
   match a pattern (for example `/^else\b/` in `if`/`else`
   constructs), and you can change the amount of units used with the
   `units` option.
   */
   function continuedIndent({ except, units = 1 } = {}) {
       return (context) => {
           let matchExcept = except && except.test(context.textAfter);
           return context.baseIndent + (matchExcept ? 0 : units * context.unit);
       };
   }
   const DontIndentBeyond = 200;
   /**
   Enables reindentation on input. When a language defines an
   `indentOnInput` field in its [language
   data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt), which must hold a regular
   expression, the line at the cursor will be reindented whenever new
   text is typed and the input from the start of the line up to the
   cursor matches that regexp.

   To avoid unneccesary reindents, it is recommended to start the
   regexp with `^` (usually followed by `\s*`), and end it with `$`.
   For example, `/^\s*\}$/` will reindent when a closing brace is
   added at the start of a line.
   */
   function indentOnInput() {
       return EditorState.transactionFilter.of(tr => {
           if (!tr.docChanged || !tr.isUserEvent("input.type") && !tr.isUserEvent("input.complete"))
               return tr;
           let rules = tr.startState.languageDataAt("indentOnInput", tr.startState.selection.main.head);
           if (!rules.length)
               return tr;
           let doc = tr.newDoc, { head } = tr.newSelection.main, line = doc.lineAt(head);
           if (head > line.from + DontIndentBeyond)
               return tr;
           let lineStart = doc.sliceString(line.from, head);
           if (!rules.some(r => r.test(lineStart)))
               return tr;
           let { state } = tr, last = -1, changes = [];
           for (let { head } of state.selection.ranges) {
               let line = state.doc.lineAt(head);
               if (line.from == last)
                   continue;
               last = line.from;
               let indent = getIndentation(state, line.from);
               if (indent == null)
                   continue;
               let cur = /^\s*/.exec(line.text)[0];
               let norm = indentString(state, indent);
               if (cur != norm)
                   changes.push({ from: line.from, to: line.from + cur.length, insert: norm });
           }
           return changes.length ? [tr, { changes, sequential: true }] : tr;
       });
   }

   /**
   A facet that registers a code folding service. When called with
   the extent of a line, such a function should return a foldable
   range that starts on that line (but continues beyond it), if one
   can be found.
   */
   const foldService = /*@__PURE__*/Facet.define();
   /**
   This node prop is used to associate folding information with
   syntax node types. Given a syntax node, it should check whether
   that tree is foldable and return the range that can be collapsed
   when it is.
   */
   const foldNodeProp = /*@__PURE__*/new NodeProp();
   /**
   [Fold](https://codemirror.net/6/docs/ref/#language.foldNodeProp) function that folds everything but
   the first and the last child of a syntax node. Useful for nodes
   that start and end with delimiters.
   */
   function foldInside(node) {
       let first = node.firstChild, last = node.lastChild;
       return first && first.to < last.from ? { from: first.to, to: last.type.isError ? node.to : last.from } : null;
   }

   /**
   A highlight style associates CSS styles with higlighting
   [tags](https://lezer.codemirror.net/docs/ref#highlight.Tag).
   */
   class HighlightStyle {
       constructor(
       /**
       The tag styles used to create this highlight style.
       */
       specs, options) {
           this.specs = specs;
           let modSpec;
           function def(spec) {
               let cls = StyleModule.newName();
               (modSpec || (modSpec = Object.create(null)))["." + cls] = spec;
               return cls;
           }
           const all = typeof options.all == "string" ? options.all : options.all ? def(options.all) : undefined;
           const scopeOpt = options.scope;
           this.scope = scopeOpt instanceof Language ? (type) => type.prop(languageDataProp) == scopeOpt.data
               : scopeOpt ? (type) => type == scopeOpt : undefined;
           this.style = tagHighlighter(specs.map(style => ({
               tag: style.tag,
               class: style.class || def(Object.assign({}, style, { tag: null }))
           })), {
               all,
           }).style;
           this.module = modSpec ? new StyleModule(modSpec) : null;
           this.themeType = options.themeType;
       }
       /**
       Create a highlighter style that associates the given styles to
       the given tags. The specs must be objects that hold a style tag
       or array of tags in their `tag` property, and either a single
       `class` property providing a static CSS class (for highlighter
       that rely on external styling), or a
       [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
       set of CSS properties (which define the styling for those tags).
       
       The CSS rules created for a highlighter will be emitted in the
       order of the spec's properties. That means that for elements that
       have multiple tags associated with them, styles defined further
       down in the list will have a higher CSS precedence than styles
       defined earlier.
       */
       static define(specs, options) {
           return new HighlightStyle(specs, options || {});
       }
   }
   const highlighterFacet = /*@__PURE__*/Facet.define();
   const fallbackHighlighter = /*@__PURE__*/Facet.define({
       combine(values) { return values.length ? [values[0]] : null; }
   });
   function getHighlighters(state) {
       let main = state.facet(highlighterFacet);
       return main.length ? main : state.facet(fallbackHighlighter);
   }
   /**
   Wrap a highlighter in an editor extension that uses it to apply
   syntax highlighting to the editor content.

   When multiple (non-fallback) styles are provided, the styling
   applied is the union of the classes they emit.
   */
   function syntaxHighlighting(highlighter, options) {
       let ext = [treeHighlighter], themeType;
       if (highlighter instanceof HighlightStyle) {
           if (highlighter.module)
               ext.push(EditorView.styleModule.of(highlighter.module));
           themeType = highlighter.themeType;
       }
       if (options === null || options === void 0 ? void 0 : options.fallback)
           ext.push(fallbackHighlighter.of(highlighter));
       else if (themeType)
           ext.push(highlighterFacet.computeN([EditorView.darkTheme], state => {
               return state.facet(EditorView.darkTheme) == (themeType == "dark") ? [highlighter] : [];
           }));
       else
           ext.push(highlighterFacet.of(highlighter));
       return ext;
   }
   class TreeHighlighter {
       constructor(view) {
           this.markCache = Object.create(null);
           this.tree = syntaxTree(view.state);
           this.decorations = this.buildDeco(view, getHighlighters(view.state));
       }
       update(update) {
           let tree = syntaxTree(update.state), highlighters = getHighlighters(update.state);
           let styleChange = highlighters != getHighlighters(update.startState);
           if (tree.length < update.view.viewport.to && !styleChange && tree.type == this.tree.type) {
               this.decorations = this.decorations.map(update.changes);
           }
           else if (tree != this.tree || update.viewportChanged || styleChange) {
               this.tree = tree;
               this.decorations = this.buildDeco(update.view, highlighters);
           }
       }
       buildDeco(view, highlighters) {
           if (!highlighters || !this.tree.length)
               return Decoration.none;
           let builder = new RangeSetBuilder();
           for (let { from, to } of view.visibleRanges) {
               highlightTree(this.tree, highlighters, (from, to, style) => {
                   builder.add(from, to, this.markCache[style] || (this.markCache[style] = Decoration.mark({ class: style })));
               }, from, to);
           }
           return builder.finish();
       }
   }
   const treeHighlighter = /*@__PURE__*/Prec.high(/*@__PURE__*/ViewPlugin.fromClass(TreeHighlighter, {
       decorations: v => v.decorations
   }));
   /**
   A default highlight style (works well with light themes).
   */
   /*@__PURE__*/HighlightStyle.define([
       { tag: tags$1.meta,
           color: "#404740" },
       { tag: tags$1.link,
           textDecoration: "underline" },
       { tag: tags$1.heading,
           textDecoration: "underline",
           fontWeight: "bold" },
       { tag: tags$1.emphasis,
           fontStyle: "italic" },
       { tag: tags$1.strong,
           fontWeight: "bold" },
       { tag: tags$1.strikethrough,
           textDecoration: "line-through" },
       { tag: tags$1.keyword,
           color: "#708" },
       { tag: [tags$1.atom, tags$1.bool, tags$1.url, tags$1.contentSeparator, tags$1.labelName],
           color: "#219" },
       { tag: [tags$1.literal, tags$1.inserted],
           color: "#164" },
       { tag: [tags$1.string, tags$1.deleted],
           color: "#a11" },
       { tag: [tags$1.regexp, tags$1.escape, /*@__PURE__*/tags$1.special(tags$1.string)],
           color: "#e40" },
       { tag: /*@__PURE__*/tags$1.definition(tags$1.variableName),
           color: "#00f" },
       { tag: /*@__PURE__*/tags$1.local(tags$1.variableName),
           color: "#30a" },
       { tag: [tags$1.typeName, tags$1.namespace],
           color: "#085" },
       { tag: tags$1.className,
           color: "#167" },
       { tag: [/*@__PURE__*/tags$1.special(tags$1.variableName), tags$1.macroName],
           color: "#256" },
       { tag: /*@__PURE__*/tags$1.definition(tags$1.propertyName),
           color: "#00c" },
       { tag: tags$1.comment,
           color: "#940" },
       { tag: tags$1.invalid,
           color: "#f00" }
   ]);

   const baseTheme$3 = /*@__PURE__*/EditorView.baseTheme({
       "&.cm-focused .cm-matchingBracket": { backgroundColor: "#328c8252" },
       "&.cm-focused .cm-nonmatchingBracket": { backgroundColor: "#bb555544" }
   });
   const DefaultScanDist = 10000, DefaultBrackets = "()[]{}";
   const bracketMatchingConfig = /*@__PURE__*/Facet.define({
       combine(configs) {
           return combineConfig(configs, {
               afterCursor: true,
               brackets: DefaultBrackets,
               maxScanDistance: DefaultScanDist,
               renderMatch: defaultRenderMatch
           });
       }
   });
   const matchingMark = /*@__PURE__*/Decoration.mark({ class: "cm-matchingBracket" }), nonmatchingMark = /*@__PURE__*/Decoration.mark({ class: "cm-nonmatchingBracket" });
   function defaultRenderMatch(match) {
       let decorations = [];
       let mark = match.matched ? matchingMark : nonmatchingMark;
       decorations.push(mark.range(match.start.from, match.start.to));
       if (match.end)
           decorations.push(mark.range(match.end.from, match.end.to));
       return decorations;
   }
   const bracketMatchingState = /*@__PURE__*/StateField.define({
       create() { return Decoration.none; },
       update(deco, tr) {
           if (!tr.docChanged && !tr.selection)
               return deco;
           let decorations = [];
           let config = tr.state.facet(bracketMatchingConfig);
           for (let range of tr.state.selection.ranges) {
               if (!range.empty)
                   continue;
               let match = matchBrackets(tr.state, range.head, -1, config)
                   || (range.head > 0 && matchBrackets(tr.state, range.head - 1, 1, config))
                   || (config.afterCursor &&
                       (matchBrackets(tr.state, range.head, 1, config) ||
                           (range.head < tr.state.doc.length && matchBrackets(tr.state, range.head + 1, -1, config))));
               if (match)
                   decorations = decorations.concat(config.renderMatch(match, tr.state));
           }
           return Decoration.set(decorations, true);
       },
       provide: f => EditorView.decorations.from(f)
   });
   const bracketMatchingUnique = [
       bracketMatchingState,
       baseTheme$3
   ];
   /**
   Create an extension that enables bracket matching. Whenever the
   cursor is next to a bracket, that bracket and the one it matches
   are highlighted. Or, when no matching bracket is found, another
   highlighting style is used to indicate this.
   */
   function bracketMatching(config = {}) {
       return [bracketMatchingConfig.of(config), bracketMatchingUnique];
   }
   /**
   When larger syntax nodes, such as HTML tags, are marked as
   opening/closing, it can be a bit messy to treat the whole node as
   a matchable bracket. This node prop allows you to define, for such
   a node, a ‘handle’—the part of the node that is highlighted, and
   that the cursor must be on to activate highlighting in the first
   place.
   */
   const bracketMatchingHandle = /*@__PURE__*/new NodeProp();
   function matchingNodes(node, dir, brackets) {
       let byProp = node.prop(dir < 0 ? NodeProp.openedBy : NodeProp.closedBy);
       if (byProp)
           return byProp;
       if (node.name.length == 1) {
           let index = brackets.indexOf(node.name);
           if (index > -1 && index % 2 == (dir < 0 ? 1 : 0))
               return [brackets[index + dir]];
       }
       return null;
   }
   function findHandle(node) {
       let hasHandle = node.type.prop(bracketMatchingHandle);
       return hasHandle ? hasHandle(node.node) : node;
   }
   /**
   Find the matching bracket for the token at `pos`, scanning
   direction `dir`. Only the `brackets` and `maxScanDistance`
   properties are used from `config`, if given. Returns null if no
   bracket was found at `pos`, or a match result otherwise.
   */
   function matchBrackets(state, pos, dir, config = {}) {
       let maxScanDistance = config.maxScanDistance || DefaultScanDist, brackets = config.brackets || DefaultBrackets;
       let tree = syntaxTree(state), node = tree.resolveInner(pos, dir);
       for (let cur = node; cur; cur = cur.parent) {
           let matches = matchingNodes(cur.type, dir, brackets);
           if (matches && cur.from < cur.to) {
               let handle = findHandle(cur);
               if (handle && (dir > 0 ? pos >= handle.from && pos < handle.to : pos > handle.from && pos <= handle.to))
                   return matchMarkedBrackets(state, pos, dir, cur, handle, matches, brackets);
           }
       }
       return matchPlainBrackets(state, pos, dir, tree, node.type, maxScanDistance, brackets);
   }
   function matchMarkedBrackets(_state, _pos, dir, token, handle, matching, brackets) {
       let parent = token.parent, firstToken = { from: handle.from, to: handle.to };
       let depth = 0, cursor = parent === null || parent === void 0 ? void 0 : parent.cursor();
       if (cursor && (dir < 0 ? cursor.childBefore(token.from) : cursor.childAfter(token.to)))
           do {
               if (dir < 0 ? cursor.to <= token.from : cursor.from >= token.to) {
                   if (depth == 0 && matching.indexOf(cursor.type.name) > -1 && cursor.from < cursor.to) {
                       let endHandle = findHandle(cursor);
                       return { start: firstToken, end: endHandle ? { from: endHandle.from, to: endHandle.to } : undefined, matched: true };
                   }
                   else if (matchingNodes(cursor.type, dir, brackets)) {
                       depth++;
                   }
                   else if (matchingNodes(cursor.type, -dir, brackets)) {
                       if (depth == 0) {
                           let endHandle = findHandle(cursor);
                           return {
                               start: firstToken,
                               end: endHandle && endHandle.from < endHandle.to ? { from: endHandle.from, to: endHandle.to } : undefined,
                               matched: false
                           };
                       }
                       depth--;
                   }
               }
           } while (dir < 0 ? cursor.prevSibling() : cursor.nextSibling());
       return { start: firstToken, matched: false };
   }
   function matchPlainBrackets(state, pos, dir, tree, tokenType, maxScanDistance, brackets) {
       let startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);
       let bracket = brackets.indexOf(startCh);
       if (bracket < 0 || (bracket % 2 == 0) != (dir > 0))
           return null;
       let startToken = { from: dir < 0 ? pos - 1 : pos, to: dir > 0 ? pos + 1 : pos };
       let iter = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0), depth = 0;
       for (let distance = 0; !(iter.next()).done && distance <= maxScanDistance;) {
           let text = iter.value;
           if (dir < 0)
               distance += text.length;
           let basePos = pos + distance * dir;
           for (let pos = dir > 0 ? 0 : text.length - 1, end = dir > 0 ? text.length : -1; pos != end; pos += dir) {
               let found = brackets.indexOf(text[pos]);
               if (found < 0 || tree.resolveInner(basePos + pos, 1).type != tokenType)
                   continue;
               if ((found % 2 == 0) == (dir > 0)) {
                   depth++;
               }
               else if (depth == 1) { // Closing
                   return { start: startToken, end: { from: basePos + pos, to: basePos + pos + 1 }, matched: (found >> 1) == (bracket >> 1) };
               }
               else {
                   depth--;
               }
           }
           if (dir > 0)
               distance += text.length;
       }
       return iter.done ? { start: startToken, matched: false } : null;
   }

   // Counts the column offset in a string, taking tabs into account.
   // Used mostly to find indentation.
   function countCol(string, end, tabSize, startIndex = 0, startValue = 0) {
       if (end == null) {
           end = string.search(/[^\s\u00a0]/);
           if (end == -1)
               end = string.length;
       }
       let n = startValue;
       for (let i = startIndex; i < end; i++) {
           if (string.charCodeAt(i) == 9)
               n += tabSize - (n % tabSize);
           else
               n++;
       }
       return n;
   }
   /**
   Encapsulates a single line of input. Given to stream syntax code,
   which uses it to tokenize the content.
   */
   class StringStream {
       /**
       Create a stream.
       */
       constructor(
       /**
       The line.
       */
       string, tabSize, 
       /**
       The current indent unit size.
       */
       indentUnit, overrideIndent) {
           this.string = string;
           this.tabSize = tabSize;
           this.indentUnit = indentUnit;
           this.overrideIndent = overrideIndent;
           /**
           The current position on the line.
           */
           this.pos = 0;
           /**
           The start position of the current token.
           */
           this.start = 0;
           this.lastColumnPos = 0;
           this.lastColumnValue = 0;
       }
       /**
       True if we are at the end of the line.
       */
       eol() { return this.pos >= this.string.length; }
       /**
       True if we are at the start of the line.
       */
       sol() { return this.pos == 0; }
       /**
       Get the next code unit after the current position, or undefined
       if we're at the end of the line.
       */
       peek() { return this.string.charAt(this.pos) || undefined; }
       /**
       Read the next code unit and advance `this.pos`.
       */
       next() {
           if (this.pos < this.string.length)
               return this.string.charAt(this.pos++);
       }
       /**
       Match the next character against the given string, regular
       expression, or predicate. Consume and return it if it matches.
       */
       eat(match) {
           let ch = this.string.charAt(this.pos);
           let ok;
           if (typeof match == "string")
               ok = ch == match;
           else
               ok = ch && (match instanceof RegExp ? match.test(ch) : match(ch));
           if (ok) {
               ++this.pos;
               return ch;
           }
       }
       /**
       Continue matching characters that match the given string,
       regular expression, or predicate function. Return true if any
       characters were consumed.
       */
       eatWhile(match) {
           let start = this.pos;
           while (this.eat(match)) { }
           return this.pos > start;
       }
       /**
       Consume whitespace ahead of `this.pos`. Return true if any was
       found.
       */
       eatSpace() {
           let start = this.pos;
           while (/[\s\u00a0]/.test(this.string.charAt(this.pos)))
               ++this.pos;
           return this.pos > start;
       }
       /**
       Move to the end of the line.
       */
       skipToEnd() { this.pos = this.string.length; }
       /**
       Move to directly before the given character, if found on the
       current line.
       */
       skipTo(ch) {
           let found = this.string.indexOf(ch, this.pos);
           if (found > -1) {
               this.pos = found;
               return true;
           }
       }
       /**
       Move back `n` characters.
       */
       backUp(n) { this.pos -= n; }
       /**
       Get the column position at `this.pos`.
       */
       column() {
           if (this.lastColumnPos < this.start) {
               this.lastColumnValue = countCol(this.string, this.start, this.tabSize, this.lastColumnPos, this.lastColumnValue);
               this.lastColumnPos = this.start;
           }
           return this.lastColumnValue;
       }
       /**
       Get the indentation column of the current line.
       */
       indentation() {
           var _a;
           return (_a = this.overrideIndent) !== null && _a !== void 0 ? _a : countCol(this.string, null, this.tabSize);
       }
       /**
       Match the input against the given string or regular expression
       (which should start with a `^`). Return true or the regexp match
       if it matches.
       
       Unless `consume` is set to `false`, this will move `this.pos`
       past the matched text.
       
       When matching a string `caseInsensitive` can be set to true to
       make the match case-insensitive.
       */
       match(pattern, consume, caseInsensitive) {
           if (typeof pattern == "string") {
               let cased = (str) => caseInsensitive ? str.toLowerCase() : str;
               let substr = this.string.substr(this.pos, pattern.length);
               if (cased(substr) == cased(pattern)) {
                   if (consume !== false)
                       this.pos += pattern.length;
                   return true;
               }
               else
                   return null;
           }
           else {
               let match = this.string.slice(this.pos).match(pattern);
               if (match && match.index > 0)
                   return null;
               if (match && consume !== false)
                   this.pos += match[0].length;
               return match;
           }
       }
       /**
       Get the current token.
       */
       current() { return this.string.slice(this.start, this.pos); }
   }

   function fullParser(spec) {
       return {
           name: spec.name || "",
           token: spec.token,
           blankLine: spec.blankLine || (() => { }),
           startState: spec.startState || (() => true),
           copyState: spec.copyState || defaultCopyState,
           indent: spec.indent || (() => null),
           languageData: spec.languageData || {},
           tokenTable: spec.tokenTable || noTokens
       };
   }
   function defaultCopyState(state) {
       if (typeof state != "object")
           return state;
       let newState = {};
       for (let prop in state) {
           let val = state[prop];
           newState[prop] = (val instanceof Array ? val.slice() : val);
       }
       return newState;
   }
   const IndentedFrom = /*@__PURE__*/new WeakMap();
   /**
   A [language](https://codemirror.net/6/docs/ref/#language.Language) class based on a CodeMirror
   5-style [streaming parser](https://codemirror.net/6/docs/ref/#language.StreamParser).
   */
   class StreamLanguage extends Language {
       constructor(parser) {
           let data = defineLanguageFacet(parser.languageData);
           let p = fullParser(parser), self;
           let impl = new class extends Parser$1 {
               createParse(input, fragments, ranges) {
                   return new Parse$1(self, input, fragments, ranges);
               }
           };
           super(data, impl, [indentService.of((cx, pos) => this.getIndent(cx, pos))], parser.name);
           this.topNode = docID(data);
           self = this;
           this.streamParser = p;
           this.stateAfter = new NodeProp({ perNode: true });
           this.tokenTable = parser.tokenTable ? new TokenTable(p.tokenTable) : defaultTokenTable;
       }
       /**
       Define a stream language.
       */
       static define(spec) { return new StreamLanguage(spec); }
       getIndent(cx, pos) {
           let tree = syntaxTree(cx.state), at = tree.resolve(pos);
           while (at && at.type != this.topNode)
               at = at.parent;
           if (!at)
               return null;
           let from = undefined;
           let { overrideIndentation } = cx.options;
           if (overrideIndentation) {
               from = IndentedFrom.get(cx.state);
               if (from != null && from < pos - 1e4)
                   from = undefined;
           }
           let start = findState(this, tree, 0, at.from, from !== null && from !== void 0 ? from : pos), statePos, state;
           if (start) {
               state = start.state;
               statePos = start.pos + 1;
           }
           else {
               state = this.streamParser.startState(cx.unit);
               statePos = 0;
           }
           if (pos - statePos > 10000 /* C.MaxIndentScanDist */)
               return null;
           while (statePos < pos) {
               let line = cx.state.doc.lineAt(statePos), end = Math.min(pos, line.to);
               if (line.length) {
                   let indentation = overrideIndentation ? overrideIndentation(line.from) : -1;
                   let stream = new StringStream(line.text, cx.state.tabSize, cx.unit, indentation < 0 ? undefined : indentation);
                   while (stream.pos < end - line.from)
                       readToken$3(this.streamParser.token, stream, state);
               }
               else {
                   this.streamParser.blankLine(state, cx.unit);
               }
               if (end == pos)
                   break;
               statePos = line.to + 1;
           }
           let line = cx.lineAt(pos);
           if (overrideIndentation && from == null)
               IndentedFrom.set(cx.state, line.from);
           return this.streamParser.indent(state, /^\s*(.*)/.exec(line.text)[1], cx);
       }
       get allowsNesting() { return false; }
   }
   function findState(lang, tree, off, startPos, before) {
       let state = off >= startPos && off + tree.length <= before && tree.prop(lang.stateAfter);
       if (state)
           return { state: lang.streamParser.copyState(state), pos: off + tree.length };
       for (let i = tree.children.length - 1; i >= 0; i--) {
           let child = tree.children[i], pos = off + tree.positions[i];
           let found = child instanceof Tree && pos < before && findState(lang, child, pos, startPos, before);
           if (found)
               return found;
       }
       return null;
   }
   function cutTree(lang, tree, from, to, inside) {
       if (inside && from <= 0 && to >= tree.length)
           return tree;
       if (!inside && tree.type == lang.topNode)
           inside = true;
       for (let i = tree.children.length - 1; i >= 0; i--) {
           let pos = tree.positions[i], child = tree.children[i], inner;
           if (pos < to && child instanceof Tree) {
               if (!(inner = cutTree(lang, child, from - pos, to - pos, inside)))
                   break;
               return !inside ? inner
                   : new Tree(tree.type, tree.children.slice(0, i).concat(inner), tree.positions.slice(0, i + 1), pos + inner.length);
           }
       }
       return null;
   }
   function findStartInFragments(lang, fragments, startPos, editorState) {
       for (let f of fragments) {
           let from = f.from + (f.openStart ? 25 : 0), to = f.to - (f.openEnd ? 25 : 0);
           let found = from <= startPos && to > startPos && findState(lang, f.tree, 0 - f.offset, startPos, to), tree;
           if (found && (tree = cutTree(lang, f.tree, startPos + f.offset, found.pos + f.offset, false)))
               return { state: found.state, tree };
       }
       return { state: lang.streamParser.startState(editorState ? getIndentUnit(editorState) : 4), tree: Tree.empty };
   }
   let Parse$1 = class Parse {
       constructor(lang, input, fragments, ranges) {
           this.lang = lang;
           this.input = input;
           this.fragments = fragments;
           this.ranges = ranges;
           this.stoppedAt = null;
           this.chunks = [];
           this.chunkPos = [];
           this.chunk = [];
           this.chunkReused = undefined;
           this.rangeIndex = 0;
           this.to = ranges[ranges.length - 1].to;
           let context = ParseContext.get(), from = ranges[0].from;
           let { state, tree } = findStartInFragments(lang, fragments, from, context === null || context === void 0 ? void 0 : context.state);
           this.state = state;
           this.parsedPos = this.chunkStart = from + tree.length;
           for (let i = 0; i < tree.children.length; i++) {
               this.chunks.push(tree.children[i]);
               this.chunkPos.push(tree.positions[i]);
           }
           if (context && this.parsedPos < context.viewport.from - 100000 /* C.MaxDistanceBeforeViewport */) {
               this.state = this.lang.streamParser.startState(getIndentUnit(context.state));
               context.skipUntilInView(this.parsedPos, context.viewport.from);
               this.parsedPos = context.viewport.from;
           }
           this.moveRangeIndex();
       }
       advance() {
           let context = ParseContext.get();
           let parseEnd = this.stoppedAt == null ? this.to : Math.min(this.to, this.stoppedAt);
           let end = Math.min(parseEnd, this.chunkStart + 2048 /* C.ChunkSize */);
           if (context)
               end = Math.min(end, context.viewport.to);
           while (this.parsedPos < end)
               this.parseLine(context);
           if (this.chunkStart < this.parsedPos)
               this.finishChunk();
           if (this.parsedPos >= parseEnd)
               return this.finish();
           if (context && this.parsedPos >= context.viewport.to) {
               context.skipUntilInView(this.parsedPos, parseEnd);
               return this.finish();
           }
           return null;
       }
       stopAt(pos) {
           this.stoppedAt = pos;
       }
       lineAfter(pos) {
           let chunk = this.input.chunk(pos);
           if (!this.input.lineChunks) {
               let eol = chunk.indexOf("\n");
               if (eol > -1)
                   chunk = chunk.slice(0, eol);
           }
           else if (chunk == "\n") {
               chunk = "";
           }
           return pos + chunk.length <= this.to ? chunk : chunk.slice(0, this.to - pos);
       }
       nextLine() {
           let from = this.parsedPos, line = this.lineAfter(from), end = from + line.length;
           for (let index = this.rangeIndex;;) {
               let rangeEnd = this.ranges[index].to;
               if (rangeEnd >= end)
                   break;
               line = line.slice(0, rangeEnd - (end - line.length));
               index++;
               if (index == this.ranges.length)
                   break;
               let rangeStart = this.ranges[index].from;
               let after = this.lineAfter(rangeStart);
               line += after;
               end = rangeStart + after.length;
           }
           return { line, end };
       }
       skipGapsTo(pos, offset, side) {
           for (;;) {
               let end = this.ranges[this.rangeIndex].to, offPos = pos + offset;
               if (side > 0 ? end > offPos : end >= offPos)
                   break;
               let start = this.ranges[++this.rangeIndex].from;
               offset += start - end;
           }
           return offset;
       }
       moveRangeIndex() {
           while (this.ranges[this.rangeIndex].to < this.parsedPos)
               this.rangeIndex++;
       }
       emitToken(id, from, to, size, offset) {
           if (this.ranges.length > 1) {
               offset = this.skipGapsTo(from, offset, 1);
               from += offset;
               let len0 = this.chunk.length;
               offset = this.skipGapsTo(to, offset, -1);
               to += offset;
               size += this.chunk.length - len0;
           }
           this.chunk.push(id, from, to, size);
           return offset;
       }
       parseLine(context) {
           let { line, end } = this.nextLine(), offset = 0, { streamParser } = this.lang;
           let stream = new StringStream(line, context ? context.state.tabSize : 4, context ? getIndentUnit(context.state) : 2);
           if (stream.eol()) {
               streamParser.blankLine(this.state, stream.indentUnit);
           }
           else {
               while (!stream.eol()) {
                   let token = readToken$3(streamParser.token, stream, this.state);
                   if (token)
                       offset = this.emitToken(this.lang.tokenTable.resolve(token), this.parsedPos + stream.start, this.parsedPos + stream.pos, 4, offset);
                   if (stream.start > 10000 /* C.MaxLineLength */)
                       break;
               }
           }
           this.parsedPos = end;
           this.moveRangeIndex();
           if (this.parsedPos < this.to)
               this.parsedPos++;
       }
       finishChunk() {
           let tree = Tree.build({
               buffer: this.chunk,
               start: this.chunkStart,
               length: this.parsedPos - this.chunkStart,
               nodeSet,
               topID: 0,
               maxBufferLength: 2048 /* C.ChunkSize */,
               reused: this.chunkReused
           });
           tree = new Tree(tree.type, tree.children, tree.positions, tree.length, [[this.lang.stateAfter, this.lang.streamParser.copyState(this.state)]]);
           this.chunks.push(tree);
           this.chunkPos.push(this.chunkStart - this.ranges[0].from);
           this.chunk = [];
           this.chunkReused = undefined;
           this.chunkStart = this.parsedPos;
       }
       finish() {
           return new Tree(this.lang.topNode, this.chunks, this.chunkPos, this.parsedPos - this.ranges[0].from).balance();
       }
   };
   function readToken$3(token, stream, state) {
       stream.start = stream.pos;
       for (let i = 0; i < 10; i++) {
           let result = token(stream, state);
           if (stream.pos > stream.start)
               return result;
       }
       throw new Error("Stream parser failed to advance stream.");
   }
   const noTokens = /*@__PURE__*/Object.create(null);
   const typeArray$1 = [NodeType.none];
   const nodeSet = /*@__PURE__*/new NodeSet(typeArray$1);
   const warned = [];
   const defaultTable = /*@__PURE__*/Object.create(null);
   for (let [legacyName, name] of [
       ["variable", "variableName"],
       ["variable-2", "variableName.special"],
       ["string-2", "string.special"],
       ["def", "variableName.definition"],
       ["tag", "tagName"],
       ["attribute", "attributeName"],
       ["type", "typeName"],
       ["builtin", "variableName.standard"],
       ["qualifier", "modifier"],
       ["error", "invalid"],
       ["header", "heading"],
       ["property", "propertyName"]
   ])
       defaultTable[legacyName] = /*@__PURE__*/createTokenType(noTokens, name);
   class TokenTable {
       constructor(extra) {
           this.extra = extra;
           this.table = Object.assign(Object.create(null), defaultTable);
       }
       resolve(tag) {
           return !tag ? 0 : this.table[tag] || (this.table[tag] = createTokenType(this.extra, tag));
       }
   }
   const defaultTokenTable = /*@__PURE__*/new TokenTable(noTokens);
   function warnForPart(part, msg) {
       if (warned.indexOf(part) > -1)
           return;
       warned.push(part);
       console.warn(msg);
   }
   function createTokenType(extra, tagStr) {
       let tag = null;
       for (let part of tagStr.split(".")) {
           let value = (extra[part] || tags$1[part]);
           if (!value) {
               warnForPart(part, `Unknown highlighting tag ${part}`);
           }
           else if (typeof value == "function") {
               if (!tag)
                   warnForPart(part, `Modifier ${part} used at start of tag`);
               else
                   tag = value(tag);
           }
           else {
               if (tag)
                   warnForPart(part, `Tag ${part} used as modifier`);
               else
                   tag = value;
           }
       }
       if (!tag)
           return 0;
       let name = tagStr.replace(/ /g, "_"), type = NodeType.define({
           id: typeArray$1.length,
           name,
           props: [styleTags({ [name]: tag })]
       });
       typeArray$1.push(type);
       return type.id;
   }
   function docID(data) {
       let type = NodeType.define({ id: typeArray$1.length, name: "Document", props: [languageDataProp.add(() => data)] });
       typeArray$1.push(type);
       return type;
   }

   function legacy(parser) {
       return new LanguageSupport(StreamLanguage.define(parser));
   }
   function sql$3(dialectName) {
       return Promise.resolve().then(function () { return index$c; }).then(m => m.sql({ dialect: m[dialectName] }));
   }
   /**
   An array of language descriptions for known language packages.
   */
   const languages = [
       // New-style language modes
       /*@__PURE__*/LanguageDescription.of({
           name: "C",
           extensions: ["c", "h", "ino"],
           load() {
               return Promise.resolve().then(function () { return index$b; }).then(m => m.cpp());
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "C++",
           alias: ["cpp"],
           extensions: ["cpp", "c++", "cc", "cxx", "hpp", "h++", "hh", "hxx"],
           load() {
               return Promise.resolve().then(function () { return index$b; }).then(m => m.cpp());
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "CQL",
           alias: ["cassandra"],
           extensions: ["cql"],
           load() { return sql$3("Cassandra"); }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "CSS",
           extensions: ["css"],
           load() {
               return Promise.resolve().then(function () { return index$h; }).then(m => m.css());
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "HTML",
           alias: ["xhtml"],
           extensions: ["html", "htm", "handlebars", "hbs"],
           load() {
               return Promise.resolve().then(function () { return index$f; }).then(m => m.html());
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Java",
           extensions: ["java"],
           load() {
               return Promise.resolve().then(function () { return index$a; }).then(m => m.java());
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "JavaScript",
           alias: ["ecmascript", "js", "node"],
           extensions: ["js", "mjs", "cjs"],
           load() {
               return Promise.resolve().then(function () { return index$g; }).then(m => m.javascript());
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "JSON",
           alias: ["json5"],
           extensions: ["json", "map"],
           load() {
               return Promise.resolve().then(function () { return index$9; }).then(m => m.json());
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "JSX",
           extensions: ["jsx"],
           load() {
               return Promise.resolve().then(function () { return index$g; }).then(m => m.javascript({ jsx: true }));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "LESS",
           extensions: ["less"],
           load() {
               return Promise.resolve().then(function () { return index$8; }).then(m => m.less());
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "MariaDB SQL",
           load() { return sql$3("MariaSQL"); }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Markdown",
           extensions: ["md", "markdown", "mkd"],
           load() {
               return Promise.resolve().then(function () { return index$e; }).then(m => m.markdown());
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "MS SQL",
           load() { return sql$3("MSSQL"); }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "MySQL",
           load() { return sql$3("MySQL"); }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "PHP",
           extensions: ["php", "php3", "php4", "php5", "php7", "phtml"],
           load() {
               return Promise.resolve().then(function () { return index$7; }).then(m => m.php());
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "PLSQL",
           extensions: ["pls"],
           load() { return sql$3("PLSQL"); }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "PostgreSQL",
           load() { return sql$3("PostgreSQL"); }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Python",
           extensions: ["BUILD", "bzl", "py", "pyw"],
           filename: /^(BUCK|BUILD)$/,
           load() {
               return Promise.resolve().then(function () { return index$6; }).then(m => m.python());
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Rust",
           extensions: ["rs"],
           load() {
               return Promise.resolve().then(function () { return index$5; }).then(m => m.rust());
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Sass",
           extensions: ["sass"],
           load() {
               return Promise.resolve().then(function () { return index$4; }).then(m => m.sass({ indented: true }));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "SCSS",
           extensions: ["scss"],
           load() {
               return Promise.resolve().then(function () { return index$4; }).then(m => m.sass());
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "SQL",
           extensions: ["sql"],
           load() { return sql$3("StandardSQL"); }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "SQLite",
           load() { return sql$3("SQLite"); }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "TSX",
           extensions: ["tsx"],
           load() {
               return Promise.resolve().then(function () { return index$g; }).then(m => m.javascript({ jsx: true, typescript: true }));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "TypeScript",
           alias: ["ts"],
           extensions: ["ts"],
           load() {
               return Promise.resolve().then(function () { return index$g; }).then(m => m.javascript({ typescript: true }));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "WebAssembly",
           extensions: ["wat", "wast"],
           load() {
               return Promise.resolve().then(function () { return index$3; }).then(m => m.wast());
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "XML",
           alias: ["rss", "wsdl", "xsd"],
           extensions: ["xml", "xsl", "xsd", "svg"],
           load() {
               return Promise.resolve().then(function () { return index$2; }).then(m => m.xml());
           }
       }),
       // Legacy modes ported from CodeMirror 5
       /*@__PURE__*/LanguageDescription.of({
           name: "APL",
           extensions: ["dyalog", "apl"],
           load() {
               return Promise.resolve().then(function () { return apl$1; }).then(m => legacy(m.apl));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "PGP",
           alias: ["asciiarmor"],
           extensions: ["asc", "pgp", "sig"],
           load() {
               return Promise.resolve().then(function () { return asciiarmor; }).then(m => legacy(m.asciiArmor));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "ASN.1",
           extensions: ["asn", "asn1"],
           load() {
               return Promise.resolve().then(function () { return asn1$1; }).then(m => legacy(m.asn1({})));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Asterisk",
           filename: /^extensions\.conf$/i,
           load() {
               return Promise.resolve().then(function () { return asterisk$1; }).then(m => legacy(m.asterisk));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Brainfuck",
           extensions: ["b", "bf"],
           load() {
               return Promise.resolve().then(function () { return brainfuck$1; }).then(m => legacy(m.brainfuck));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Cobol",
           extensions: ["cob", "cpy"],
           load() {
               return Promise.resolve().then(function () { return cobol$1; }).then(m => legacy(m.cobol));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "C#",
           alias: ["csharp", "cs"],
           extensions: ["cs"],
           load() {
               return Promise.resolve().then(function () { return clike$1; }).then(m => legacy(m.csharp));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Clojure",
           extensions: ["clj", "cljc", "cljx"],
           load() {
               return Promise.resolve().then(function () { return clojure$1; }).then(m => legacy(m.clojure));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "ClojureScript",
           extensions: ["cljs"],
           load() {
               return Promise.resolve().then(function () { return clojure$1; }).then(m => legacy(m.clojure));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Closure Stylesheets (GSS)",
           extensions: ["gss"],
           load() {
               return Promise.resolve().then(function () { return css$1; }).then(m => legacy(m.gss));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "CMake",
           extensions: ["cmake", "cmake.in"],
           filename: /^CMakeLists\.txt$/,
           load() {
               return Promise.resolve().then(function () { return cmake$1; }).then(m => legacy(m.cmake));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "CoffeeScript",
           alias: ["coffee", "coffee-script"],
           extensions: ["coffee"],
           load() {
               return Promise.resolve().then(function () { return coffeescript; }).then(m => legacy(m.coffeeScript));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Common Lisp",
           alias: ["lisp"],
           extensions: ["cl", "lisp", "el"],
           load() {
               return Promise.resolve().then(function () { return commonlisp; }).then(m => legacy(m.commonLisp));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Cypher",
           extensions: ["cyp", "cypher"],
           load() {
               return Promise.resolve().then(function () { return cypher$1; }).then(m => legacy(m.cypher));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Cython",
           extensions: ["pyx", "pxd", "pxi"],
           load() {
               return Promise.resolve().then(function () { return python$1; }).then(m => legacy(m.cython));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Crystal",
           extensions: ["cr"],
           load() {
               return Promise.resolve().then(function () { return crystal$1; }).then(m => legacy(m.crystal));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "D",
           extensions: ["d"],
           load() {
               return Promise.resolve().then(function () { return d$2; }).then(m => legacy(m.d));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Dart",
           extensions: ["dart"],
           load() {
               return Promise.resolve().then(function () { return clike$1; }).then(m => legacy(m.dart));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "diff",
           extensions: ["diff", "patch"],
           load() {
               return Promise.resolve().then(function () { return diff$1; }).then(m => legacy(m.diff));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Dockerfile",
           filename: /^Dockerfile$/,
           load() {
               return Promise.resolve().then(function () { return dockerfile; }).then(m => legacy(m.dockerFile));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "DTD",
           extensions: ["dtd"],
           load() {
               return Promise.resolve().then(function () { return dtd$1; }).then(m => legacy(m.dtd));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Dylan",
           extensions: ["dylan", "dyl", "intr"],
           load() {
               return Promise.resolve().then(function () { return dylan$1; }).then(m => legacy(m.dylan));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "EBNF",
           load() {
               return Promise.resolve().then(function () { return ebnf$1; }).then(m => legacy(m.ebnf));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "ECL",
           extensions: ["ecl"],
           load() {
               return Promise.resolve().then(function () { return ecl$1; }).then(m => legacy(m.ecl));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "edn",
           extensions: ["edn"],
           load() {
               return Promise.resolve().then(function () { return clojure$1; }).then(m => legacy(m.clojure));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Eiffel",
           extensions: ["e"],
           load() {
               return Promise.resolve().then(function () { return eiffel$1; }).then(m => legacy(m.eiffel));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Elm",
           extensions: ["elm"],
           load() {
               return Promise.resolve().then(function () { return elm$1; }).then(m => legacy(m.elm));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Erlang",
           extensions: ["erl"],
           load() {
               return Promise.resolve().then(function () { return erlang$1; }).then(m => legacy(m.erlang));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Esper",
           load() {
               return Promise.resolve().then(function () { return sql$1; }).then(m => legacy(m.esper));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Factor",
           extensions: ["factor"],
           load() {
               return Promise.resolve().then(function () { return factor$1; }).then(m => legacy(m.factor));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "FCL",
           load() {
               return Promise.resolve().then(function () { return fcl$1; }).then(m => legacy(m.fcl));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Forth",
           extensions: ["forth", "fth", "4th"],
           load() {
               return Promise.resolve().then(function () { return forth$1; }).then(m => legacy(m.forth));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Fortran",
           extensions: ["f", "for", "f77", "f90", "f95"],
           load() {
               return Promise.resolve().then(function () { return fortran$1; }).then(m => legacy(m.fortran));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "F#",
           alias: ["fsharp"],
           extensions: ["fs"],
           load() {
               return Promise.resolve().then(function () { return mllike; }).then(m => legacy(m.fSharp));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Gas",
           extensions: ["s"],
           load() {
               return Promise.resolve().then(function () { return gas$1; }).then(m => legacy(m.gas));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Gherkin",
           extensions: ["feature"],
           load() {
               return Promise.resolve().then(function () { return gherkin$1; }).then(m => legacy(m.gherkin));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Go",
           extensions: ["go"],
           load() {
               return Promise.resolve().then(function () { return go$1; }).then(m => legacy(m.go));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Groovy",
           extensions: ["groovy", "gradle"],
           filename: /^Jenkinsfile$/,
           load() {
               return Promise.resolve().then(function () { return groovy$1; }).then(m => legacy(m.groovy));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Haskell",
           extensions: ["hs"],
           load() {
               return Promise.resolve().then(function () { return haskell$1; }).then(m => legacy(m.haskell));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Haxe",
           extensions: ["hx"],
           load() {
               return Promise.resolve().then(function () { return haxe$1; }).then(m => legacy(m.haxe));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "HXML",
           extensions: ["hxml"],
           load() {
               return Promise.resolve().then(function () { return haxe$1; }).then(m => legacy(m.hxml));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "HTTP",
           load() {
               return Promise.resolve().then(function () { return http$1; }).then(m => legacy(m.http));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "IDL",
           extensions: ["pro"],
           load() {
               return Promise.resolve().then(function () { return idl$1; }).then(m => legacy(m.idl));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "JSON-LD",
           alias: ["jsonld"],
           extensions: ["jsonld"],
           load() {
               return Promise.resolve().then(function () { return javascript$1; }).then(m => legacy(m.jsonld));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Jinja2",
           extensions: ["j2", "jinja", "jinja2"],
           load() {
               return Promise.resolve().then(function () { return jinja2$1; }).then(m => legacy(m.jinja2));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Julia",
           extensions: ["jl"],
           load() {
               return Promise.resolve().then(function () { return julia$1; }).then(m => legacy(m.julia));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Kotlin",
           extensions: ["kt"],
           load() {
               return Promise.resolve().then(function () { return clike$1; }).then(m => legacy(m.kotlin));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "LiveScript",
           alias: ["ls"],
           extensions: ["ls"],
           load() {
               return Promise.resolve().then(function () { return livescript; }).then(m => legacy(m.liveScript));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Lua",
           extensions: ["lua"],
           load() {
               return Promise.resolve().then(function () { return lua$1; }).then(m => legacy(m.lua));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "mIRC",
           extensions: ["mrc"],
           load() {
               return Promise.resolve().then(function () { return mirc$1; }).then(m => legacy(m.mirc));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Mathematica",
           extensions: ["m", "nb", "wl", "wls"],
           load() {
               return Promise.resolve().then(function () { return mathematica$1; }).then(m => legacy(m.mathematica));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Modelica",
           extensions: ["mo"],
           load() {
               return Promise.resolve().then(function () { return modelica$1; }).then(m => legacy(m.modelica));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "MUMPS",
           extensions: ["mps"],
           load() {
               return Promise.resolve().then(function () { return mumps$1; }).then(m => legacy(m.mumps));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Mbox",
           extensions: ["mbox"],
           load() {
               return Promise.resolve().then(function () { return mbox$1; }).then(m => legacy(m.mbox));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Nginx",
           filename: /nginx.*\.conf$/i,
           load() {
               return Promise.resolve().then(function () { return nginx$1; }).then(m => legacy(m.nginx));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "NSIS",
           extensions: ["nsh", "nsi"],
           load() {
               return Promise.resolve().then(function () { return nsis$1; }).then(m => legacy(m.nsis));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "NTriples",
           extensions: ["nt", "nq"],
           load() {
               return Promise.resolve().then(function () { return ntriples$1; }).then(m => legacy(m.ntriples));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Objective-C",
           alias: ["objective-c", "objc"],
           extensions: ["m"],
           load() {
               return Promise.resolve().then(function () { return clike$1; }).then(m => legacy(m.objectiveC));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Objective-C++",
           alias: ["objective-c++", "objc++"],
           extensions: ["mm"],
           load() {
               return Promise.resolve().then(function () { return clike$1; }).then(m => legacy(m.objectiveCpp));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "OCaml",
           extensions: ["ml", "mli", "mll", "mly"],
           load() {
               return Promise.resolve().then(function () { return mllike; }).then(m => legacy(m.oCaml));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Octave",
           extensions: ["m"],
           load() {
               return Promise.resolve().then(function () { return octave$1; }).then(m => legacy(m.octave));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Oz",
           extensions: ["oz"],
           load() {
               return Promise.resolve().then(function () { return oz$1; }).then(m => legacy(m.oz));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Pascal",
           extensions: ["p", "pas"],
           load() {
               return Promise.resolve().then(function () { return pascal$1; }).then(m => legacy(m.pascal));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Perl",
           extensions: ["pl", "pm"],
           load() {
               return Promise.resolve().then(function () { return perl$1; }).then(m => legacy(m.perl));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Pig",
           extensions: ["pig"],
           load() {
               return Promise.resolve().then(function () { return pig$1; }).then(m => legacy(m.pig));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "PowerShell",
           extensions: ["ps1", "psd1", "psm1"],
           load() {
               return Promise.resolve().then(function () { return powershell; }).then(m => legacy(m.powerShell));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Properties files",
           alias: ["ini", "properties"],
           extensions: ["properties", "ini", "in"],
           load() {
               return Promise.resolve().then(function () { return properties$1; }).then(m => legacy(m.properties));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "ProtoBuf",
           extensions: ["proto"],
           load() {
               return Promise.resolve().then(function () { return protobuf$1; }).then(m => legacy(m.protobuf));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Puppet",
           extensions: ["pp"],
           load() {
               return Promise.resolve().then(function () { return puppet$1; }).then(m => legacy(m.puppet));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Q",
           extensions: ["q"],
           load() {
               return Promise.resolve().then(function () { return q$1; }).then(m => legacy(m.q));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "R",
           alias: ["rscript"],
           extensions: ["r", "R"],
           load() {
               return Promise.resolve().then(function () { return r$1; }).then(m => legacy(m.r));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "RPM Changes",
           load() {
               return Promise.resolve().then(function () { return rpm; }).then(m => legacy(m.rpmChanges));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "RPM Spec",
           extensions: ["spec"],
           load() {
               return Promise.resolve().then(function () { return rpm; }).then(m => legacy(m.rpmSpec));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Ruby",
           alias: ["jruby", "macruby", "rake", "rb", "rbx"],
           extensions: ["rb"],
           filename: /^(Gemfile|Rakefile)$/,
           load() {
               return Promise.resolve().then(function () { return ruby$1; }).then(m => legacy(m.ruby));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "SAS",
           extensions: ["sas"],
           load() {
               return Promise.resolve().then(function () { return sas$1; }).then(m => legacy(m.sas));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Scala",
           extensions: ["scala"],
           load() {
               return Promise.resolve().then(function () { return clike$1; }).then(m => legacy(m.scala));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Scheme",
           extensions: ["scm", "ss"],
           load() {
               return Promise.resolve().then(function () { return scheme$1; }).then(m => legacy(m.scheme));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Shell",
           alias: ["bash", "sh", "zsh"],
           extensions: ["sh", "ksh", "bash"],
           filename: /^PKGBUILD$/,
           load() {
               return Promise.resolve().then(function () { return shell$1; }).then(m => legacy(m.shell));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Sieve",
           extensions: ["siv", "sieve"],
           load() {
               return Promise.resolve().then(function () { return sieve$1; }).then(m => legacy(m.sieve));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Smalltalk",
           extensions: ["st"],
           load() {
               return Promise.resolve().then(function () { return smalltalk$1; }).then(m => legacy(m.smalltalk));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Solr",
           load() {
               return Promise.resolve().then(function () { return solr$1; }).then(m => legacy(m.solr));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "SML",
           extensions: ["sml", "sig", "fun", "smackspec"],
           load() {
               return Promise.resolve().then(function () { return mllike; }).then(m => legacy(m.sml));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "SPARQL",
           alias: ["sparul"],
           extensions: ["rq", "sparql"],
           load() {
               return Promise.resolve().then(function () { return sparql$1; }).then(m => legacy(m.sparql));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Spreadsheet",
           alias: ["excel", "formula"],
           load() {
               return Promise.resolve().then(function () { return spreadsheet$1; }).then(m => legacy(m.spreadsheet));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Squirrel",
           extensions: ["nut"],
           load() {
               return Promise.resolve().then(function () { return clike$1; }).then(m => legacy(m.squirrel));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Stylus",
           extensions: ["styl"],
           load() {
               return Promise.resolve().then(function () { return stylus$1; }).then(m => legacy(m.stylus));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Swift",
           extensions: ["swift"],
           load() {
               return Promise.resolve().then(function () { return swift$1; }).then(m => legacy(m.swift));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "sTeX",
           load() {
               return Promise.resolve().then(function () { return stex$1; }).then(m => legacy(m.stex));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "LaTeX",
           alias: ["tex"],
           extensions: ["text", "ltx", "tex"],
           load() {
               return Promise.resolve().then(function () { return stex$1; }).then(m => legacy(m.stex));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "SystemVerilog",
           extensions: ["v", "sv", "svh"],
           load() {
               return Promise.resolve().then(function () { return verilog$1; }).then(m => legacy(m.verilog));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Tcl",
           extensions: ["tcl"],
           load() {
               return Promise.resolve().then(function () { return tcl$1; }).then(m => legacy(m.tcl));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Textile",
           extensions: ["textile"],
           load() {
               return Promise.resolve().then(function () { return textile$1; }).then(m => legacy(m.textile));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "TiddlyWiki",
           load() {
               return Promise.resolve().then(function () { return tiddlywiki; }).then(m => legacy(m.tiddlyWiki));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Tiki wiki",
           load() {
               return Promise.resolve().then(function () { return tiki$1; }).then(m => legacy(m.tiki));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "TOML",
           extensions: ["toml"],
           load() {
               return Promise.resolve().then(function () { return toml$1; }).then(m => legacy(m.toml));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Troff",
           extensions: ["1", "2", "3", "4", "5", "6", "7", "8", "9"],
           load() {
               return Promise.resolve().then(function () { return troff$1; }).then(m => legacy(m.troff));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "TTCN",
           extensions: ["ttcn", "ttcn3", "ttcnpp"],
           load() {
               return Promise.resolve().then(function () { return ttcn$1; }).then(m => legacy(m.ttcn));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "TTCN_CFG",
           extensions: ["cfg"],
           load() {
               return Promise.resolve().then(function () { return ttcnCfg$1; }).then(m => legacy(m.ttcnCfg));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Turtle",
           extensions: ["ttl"],
           load() {
               return Promise.resolve().then(function () { return turtle$1; }).then(m => legacy(m.turtle));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Web IDL",
           extensions: ["webidl"],
           load() {
               return Promise.resolve().then(function () { return webidl; }).then(m => legacy(m.webIDL));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "VB.NET",
           extensions: ["vb"],
           load() {
               return Promise.resolve().then(function () { return vb$1; }).then(m => legacy(m.vb));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "VBScript",
           extensions: ["vbs"],
           load() {
               return Promise.resolve().then(function () { return vbscript; }).then(m => legacy(m.vbScript));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Velocity",
           extensions: ["vtl"],
           load() {
               return Promise.resolve().then(function () { return velocity$1; }).then(m => legacy(m.velocity));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Verilog",
           extensions: ["v"],
           load() {
               return Promise.resolve().then(function () { return verilog$1; }).then(m => legacy(m.verilog));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "VHDL",
           extensions: ["vhd", "vhdl"],
           load() {
               return Promise.resolve().then(function () { return vhdl$1; }).then(m => legacy(m.vhdl));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "XQuery",
           extensions: ["xy", "xquery"],
           load() {
               return Promise.resolve().then(function () { return xquery; }).then(m => legacy(m.xQuery));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Yacas",
           extensions: ["ys"],
           load() {
               return Promise.resolve().then(function () { return yacas$1; }).then(m => legacy(m.yacas));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "YAML",
           alias: ["yml"],
           extensions: ["yaml", "yml"],
           load() {
               return Promise.resolve().then(function () { return yaml$1; }).then(m => legacy(m.yaml));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Z80",
           extensions: ["z80"],
           load() {
               return Promise.resolve().then(function () { return z80$1; }).then(m => legacy(m.z80));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "MscGen",
           extensions: ["mscgen", "mscin", "msc"],
           load() {
               return Promise.resolve().then(function () { return mscgen$1; }).then(m => legacy(m.mscgen));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Xù",
           extensions: ["xu"],
           load() {
               return Promise.resolve().then(function () { return mscgen$1; }).then(m => legacy(m.xu));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "MsGenny",
           extensions: ["msgenny"],
           load() {
               return Promise.resolve().then(function () { return mscgen$1; }).then(m => legacy(m.msgenny));
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Vue",
           extensions: ["vue"],
           load() {
               return Promise.resolve().then(function () { return index$1; }).then(m => m.vue());
           }
       }),
       /*@__PURE__*/LanguageDescription.of({
           name: "Angular Template",
           load() {
               return Promise.resolve().then(function () { return index; }).then(m => m.angular());
           }
       })
   ];

   /**
   Comment or uncomment the current selection. Will use line comments
   if available, otherwise falling back to block comments.
   */
   const toggleComment = target => {
       let { state } = target, line = state.doc.lineAt(state.selection.main.from), config = getConfig(target.state, line.from);
       return config.line ? toggleLineComment(target) : config.block ? toggleBlockCommentByLine(target) : false;
   };
   function command$1(f, option) {
       return ({ state, dispatch }) => {
           if (state.readOnly)
               return false;
           let tr = f(option, state);
           if (!tr)
               return false;
           dispatch(state.update(tr));
           return true;
       };
   }
   /**
   Comment or uncomment the current selection using line comments.
   The line comment syntax is taken from the
   [`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language
   data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).
   */
   const toggleLineComment = /*@__PURE__*/command$1(changeLineComment, 0 /* CommentOption.Toggle */);
   /**
   Comment the current selection using line comments.
   */
   const lineComment = /*@__PURE__*/command$1(changeLineComment, 1 /* CommentOption.Comment */);
   /**
   Uncomment the current selection using line comments.
   */
   const lineUncomment = /*@__PURE__*/command$1(changeLineComment, 2 /* CommentOption.Uncomment */);
   /**
   Comment or uncomment the current selection using block comments.
   The block comment syntax is taken from the
   [`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language
   data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).
   */
   const toggleBlockComment = /*@__PURE__*/command$1(changeBlockComment, 0 /* CommentOption.Toggle */);
   /**
   Comment the current selection using block comments.
   */
   const blockComment = /*@__PURE__*/command$1(changeBlockComment, 1 /* CommentOption.Comment */);
   /**
   Uncomment the current selection using block comments.
   */
   const blockUncomment = /*@__PURE__*/command$1(changeBlockComment, 2 /* CommentOption.Uncomment */);
   /**
   Comment or uncomment the lines around the current selection using
   block comments.
   */
   const toggleBlockCommentByLine = /*@__PURE__*/command$1((o, s) => changeBlockComment(o, s, selectedLineRanges(s)), 0 /* CommentOption.Toggle */);
   function getConfig(state, pos) {
       let data = state.languageDataAt("commentTokens", pos);
       return data.length ? data[0] : {};
   }
   const SearchMargin = 50;
   /**
   Determines if the given range is block-commented in the given
   state.
   */
   function findBlockComment(state, { open, close }, from, to) {
       let textBefore = state.sliceDoc(from - SearchMargin, from);
       let textAfter = state.sliceDoc(to, to + SearchMargin);
       let spaceBefore = /\s*$/.exec(textBefore)[0].length, spaceAfter = /^\s*/.exec(textAfter)[0].length;
       let beforeOff = textBefore.length - spaceBefore;
       if (textBefore.slice(beforeOff - open.length, beforeOff) == open &&
           textAfter.slice(spaceAfter, spaceAfter + close.length) == close) {
           return { open: { pos: from - spaceBefore, margin: spaceBefore && 1 },
               close: { pos: to + spaceAfter, margin: spaceAfter && 1 } };
       }
       let startText, endText;
       if (to - from <= 2 * SearchMargin) {
           startText = endText = state.sliceDoc(from, to);
       }
       else {
           startText = state.sliceDoc(from, from + SearchMargin);
           endText = state.sliceDoc(to - SearchMargin, to);
       }
       let startSpace = /^\s*/.exec(startText)[0].length, endSpace = /\s*$/.exec(endText)[0].length;
       let endOff = endText.length - endSpace - close.length;
       if (startText.slice(startSpace, startSpace + open.length) == open &&
           endText.slice(endOff, endOff + close.length) == close) {
           return { open: { pos: from + startSpace + open.length,
                   margin: /\s/.test(startText.charAt(startSpace + open.length)) ? 1 : 0 },
               close: { pos: to - endSpace - close.length,
                   margin: /\s/.test(endText.charAt(endOff - 1)) ? 1 : 0 } };
       }
       return null;
   }
   function selectedLineRanges(state) {
       let ranges = [];
       for (let r of state.selection.ranges) {
           let fromLine = state.doc.lineAt(r.from);
           let toLine = r.to <= fromLine.to ? fromLine : state.doc.lineAt(r.to);
           let last = ranges.length - 1;
           if (last >= 0 && ranges[last].to > fromLine.from)
               ranges[last].to = toLine.to;
           else
               ranges.push({ from: fromLine.from + /^\s*/.exec(fromLine.text)[0].length, to: toLine.to });
       }
       return ranges;
   }
   // Performs toggle, comment and uncomment of block comments in
   // languages that support them.
   function changeBlockComment(option, state, ranges = state.selection.ranges) {
       let tokens = ranges.map(r => getConfig(state, r.from).block);
       if (!tokens.every(c => c))
           return null;
       let comments = ranges.map((r, i) => findBlockComment(state, tokens[i], r.from, r.to));
       if (option != 2 /* CommentOption.Uncomment */ && !comments.every(c => c)) {
           return { changes: state.changes(ranges.map((range, i) => {
                   if (comments[i])
                       return [];
                   return [{ from: range.from, insert: tokens[i].open + " " }, { from: range.to, insert: " " + tokens[i].close }];
               })) };
       }
       else if (option != 1 /* CommentOption.Comment */ && comments.some(c => c)) {
           let changes = [];
           for (let i = 0, comment; i < comments.length; i++)
               if (comment = comments[i]) {
                   let token = tokens[i], { open, close } = comment;
                   changes.push({ from: open.pos - token.open.length, to: open.pos + open.margin }, { from: close.pos - close.margin, to: close.pos + token.close.length });
               }
           return { changes };
       }
       return null;
   }
   // Performs toggle, comment and uncomment of line comments.
   function changeLineComment(option, state, ranges = state.selection.ranges) {
       let lines = [];
       let prevLine = -1;
       for (let { from, to } of ranges) {
           let startI = lines.length, minIndent = 1e9;
           let token = getConfig(state, from).line;
           if (!token)
               continue;
           for (let pos = from; pos <= to;) {
               let line = state.doc.lineAt(pos);
               if (line.from > prevLine && (from == to || to > line.from)) {
                   prevLine = line.from;
                   let indent = /^\s*/.exec(line.text)[0].length;
                   let empty = indent == line.length;
                   let comment = line.text.slice(indent, indent + token.length) == token ? indent : -1;
                   if (indent < line.text.length && indent < minIndent)
                       minIndent = indent;
                   lines.push({ line, comment, token, indent, empty, single: false });
               }
               pos = line.to + 1;
           }
           if (minIndent < 1e9)
               for (let i = startI; i < lines.length; i++)
                   if (lines[i].indent < lines[i].line.text.length)
                       lines[i].indent = minIndent;
           if (lines.length == startI + 1)
               lines[startI].single = true;
       }
       if (option != 2 /* CommentOption.Uncomment */ && lines.some(l => l.comment < 0 && (!l.empty || l.single))) {
           let changes = [];
           for (let { line, token, indent, empty, single } of lines)
               if (single || !empty)
                   changes.push({ from: line.from + indent, insert: token + " " });
           let changeSet = state.changes(changes);
           return { changes: changeSet, selection: state.selection.map(changeSet, 1) };
       }
       else if (option != 1 /* CommentOption.Comment */ && lines.some(l => l.comment >= 0)) {
           let changes = [];
           for (let { line, comment, token } of lines)
               if (comment >= 0) {
                   let from = line.from + comment, to = from + token.length;
                   if (line.text[to - line.from] == " ")
                       to++;
                   changes.push({ from, to });
               }
           return { changes };
       }
       return null;
   }

   const fromHistory = /*@__PURE__*/Annotation.define();
   /**
   Transaction annotation that will prevent that transaction from
   being combined with other transactions in the undo history. Given
   `"before"`, it'll prevent merging with previous transactions. With
   `"after"`, subsequent transactions won't be combined with this
   one. With `"full"`, the transaction is isolated on both sides.
   */
   const isolateHistory = /*@__PURE__*/Annotation.define();
   /**
   This facet provides a way to register functions that, given a
   transaction, provide a set of effects that the history should
   store when inverting the transaction. This can be used to
   integrate some kinds of effects in the history, so that they can
   be undone (and redone again).
   */
   const invertedEffects = /*@__PURE__*/Facet.define();
   const historyConfig = /*@__PURE__*/Facet.define({
       combine(configs) {
           return combineConfig(configs, {
               minDepth: 100,
               newGroupDelay: 500,
               joinToEvent: (_t, isAdjacent) => isAdjacent,
           }, {
               minDepth: Math.max,
               newGroupDelay: Math.min,
               joinToEvent: (a, b) => (tr, adj) => a(tr, adj) || b(tr, adj)
           });
       }
   });
   function changeEnd(changes) {
       let end = 0;
       changes.iterChangedRanges((_, to) => end = to);
       return end;
   }
   const historyField_ = /*@__PURE__*/StateField.define({
       create() {
           return HistoryState.empty;
       },
       update(state, tr) {
           let config = tr.state.facet(historyConfig);
           let fromHist = tr.annotation(fromHistory);
           if (fromHist) {
               let selection = tr.docChanged ? EditorSelection.single(changeEnd(tr.changes)) : undefined;
               let item = HistEvent.fromTransaction(tr, selection), from = fromHist.side;
               let other = from == 0 /* BranchName.Done */ ? state.undone : state.done;
               if (item)
                   other = updateBranch(other, other.length, config.minDepth, item);
               else
                   other = addSelection(other, tr.startState.selection);
               return new HistoryState(from == 0 /* BranchName.Done */ ? fromHist.rest : other, from == 0 /* BranchName.Done */ ? other : fromHist.rest);
           }
           let isolate = tr.annotation(isolateHistory);
           if (isolate == "full" || isolate == "before")
               state = state.isolate();
           if (tr.annotation(Transaction.addToHistory) === false)
               return !tr.changes.empty ? state.addMapping(tr.changes.desc) : state;
           let event = HistEvent.fromTransaction(tr);
           let time = tr.annotation(Transaction.time), userEvent = tr.annotation(Transaction.userEvent);
           if (event)
               state = state.addChanges(event, time, userEvent, config, tr);
           else if (tr.selection)
               state = state.addSelection(tr.startState.selection, time, userEvent, config.newGroupDelay);
           if (isolate == "full" || isolate == "after")
               state = state.isolate();
           return state;
       },
       toJSON(value) {
           return { done: value.done.map(e => e.toJSON()), undone: value.undone.map(e => e.toJSON()) };
       },
       fromJSON(json) {
           return new HistoryState(json.done.map(HistEvent.fromJSON), json.undone.map(HistEvent.fromJSON));
       }
   });
   /**
   Create a history extension with the given configuration.
   */
   function history(config = {}) {
       return [
           historyField_,
           historyConfig.of(config),
           EditorView.domEventHandlers({
               beforeinput(e, view) {
                   let command = e.inputType == "historyUndo" ? undo : e.inputType == "historyRedo" ? redo : null;
                   if (!command)
                       return false;
                   e.preventDefault();
                   return command(view);
               }
           })
       ];
   }
   /**
   The state field used to store the history data. Should probably
   only be used when you want to
   [serialize](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) or
   [deserialize](https://codemirror.net/6/docs/ref/#state.EditorState^fromJSON) state objects in a way
   that preserves history.
   */
   const historyField = historyField_;
   function cmd(side, selection) {
       return function ({ state, dispatch }) {
           if (!selection && state.readOnly)
               return false;
           let historyState = state.field(historyField_, false);
           if (!historyState)
               return false;
           let tr = historyState.pop(side, state, selection);
           if (!tr)
               return false;
           dispatch(tr);
           return true;
       };
   }
   /**
   Undo a single group of history events. Returns false if no group
   was available.
   */
   const undo = /*@__PURE__*/cmd(0 /* BranchName.Done */, false);
   /**
   Redo a group of history events. Returns false if no group was
   available.
   */
   const redo = /*@__PURE__*/cmd(1 /* BranchName.Undone */, false);
   /**
   Undo a change or selection change.
   */
   const undoSelection = /*@__PURE__*/cmd(0 /* BranchName.Done */, true);
   /**
   Redo a change or selection change.
   */
   const redoSelection = /*@__PURE__*/cmd(1 /* BranchName.Undone */, true);
   function depth(side) {
       return function (state) {
           let histState = state.field(historyField_, false);
           if (!histState)
               return 0;
           let branch = side == 0 /* BranchName.Done */ ? histState.done : histState.undone;
           return branch.length - (branch.length && !branch[0].changes ? 1 : 0);
       };
   }
   /**
   The amount of undoable change events available in a given state.
   */
   const undoDepth = /*@__PURE__*/depth(0 /* BranchName.Done */);
   /**
   The amount of redoable change events available in a given state.
   */
   const redoDepth = /*@__PURE__*/depth(1 /* BranchName.Undone */);
   // History events store groups of changes or effects that need to be
   // undone/redone together.
   class HistEvent {
       constructor(
       // The changes in this event. Normal events hold at least one
       // change or effect. But it may be necessary to store selection
       // events before the first change, in which case a special type of
       // instance is created which doesn't hold any changes, with
       // changes == startSelection == undefined
       changes, 
       // The effects associated with this event
       effects, 
       // Accumulated mapping (from addToHistory==false) that should be
       // applied to events below this one.
       mapped, 
       // The selection before this event
       startSelection, 
       // Stores selection changes after this event, to be used for
       // selection undo/redo.
       selectionsAfter) {
           this.changes = changes;
           this.effects = effects;
           this.mapped = mapped;
           this.startSelection = startSelection;
           this.selectionsAfter = selectionsAfter;
       }
       setSelAfter(after) {
           return new HistEvent(this.changes, this.effects, this.mapped, this.startSelection, after);
       }
       toJSON() {
           var _a, _b, _c;
           return {
               changes: (_a = this.changes) === null || _a === void 0 ? void 0 : _a.toJSON(),
               mapped: (_b = this.mapped) === null || _b === void 0 ? void 0 : _b.toJSON(),
               startSelection: (_c = this.startSelection) === null || _c === void 0 ? void 0 : _c.toJSON(),
               selectionsAfter: this.selectionsAfter.map(s => s.toJSON())
           };
       }
       static fromJSON(json) {
           return new HistEvent(json.changes && ChangeSet.fromJSON(json.changes), [], json.mapped && ChangeDesc.fromJSON(json.mapped), json.startSelection && EditorSelection.fromJSON(json.startSelection), json.selectionsAfter.map(EditorSelection.fromJSON));
       }
       // This does not check `addToHistory` and such, it assumes the
       // transaction needs to be converted to an item. Returns null when
       // there are no changes or effects in the transaction.
       static fromTransaction(tr, selection) {
           let effects = none$2;
           for (let invert of tr.startState.facet(invertedEffects)) {
               let result = invert(tr);
               if (result.length)
                   effects = effects.concat(result);
           }
           if (!effects.length && tr.changes.empty)
               return null;
           return new HistEvent(tr.changes.invert(tr.startState.doc), effects, undefined, selection || tr.startState.selection, none$2);
       }
       static selection(selections) {
           return new HistEvent(undefined, none$2, undefined, undefined, selections);
       }
   }
   function updateBranch(branch, to, maxLen, newEvent) {
       let start = to + 1 > maxLen + 20 ? to - maxLen - 1 : 0;
       let newBranch = branch.slice(start, to);
       newBranch.push(newEvent);
       return newBranch;
   }
   function isAdjacent(a, b) {
       let ranges = [], isAdjacent = false;
       a.iterChangedRanges((f, t) => ranges.push(f, t));
       b.iterChangedRanges((_f, _t, f, t) => {
           for (let i = 0; i < ranges.length;) {
               let from = ranges[i++], to = ranges[i++];
               if (t >= from && f <= to)
                   isAdjacent = true;
           }
       });
       return isAdjacent;
   }
   function eqSelectionShape(a, b) {
       return a.ranges.length == b.ranges.length &&
           a.ranges.filter((r, i) => r.empty != b.ranges[i].empty).length === 0;
   }
   function conc(a, b) {
       return !a.length ? b : !b.length ? a : a.concat(b);
   }
   const none$2 = [];
   const MaxSelectionsPerEvent = 200;
   function addSelection(branch, selection) {
       if (!branch.length) {
           return [HistEvent.selection([selection])];
       }
       else {
           let lastEvent = branch[branch.length - 1];
           let sels = lastEvent.selectionsAfter.slice(Math.max(0, lastEvent.selectionsAfter.length - MaxSelectionsPerEvent));
           if (sels.length && sels[sels.length - 1].eq(selection))
               return branch;
           sels.push(selection);
           return updateBranch(branch, branch.length - 1, 1e9, lastEvent.setSelAfter(sels));
       }
   }
   // Assumes the top item has one or more selectionAfter values
   function popSelection(branch) {
       let last = branch[branch.length - 1];
       let newBranch = branch.slice();
       newBranch[branch.length - 1] = last.setSelAfter(last.selectionsAfter.slice(0, last.selectionsAfter.length - 1));
       return newBranch;
   }
   // Add a mapping to the top event in the given branch. If this maps
   // away all the changes and effects in that item, drop it and
   // propagate the mapping to the next item.
   function addMappingToBranch(branch, mapping) {
       if (!branch.length)
           return branch;
       let length = branch.length, selections = none$2;
       while (length) {
           let event = mapEvent(branch[length - 1], mapping, selections);
           if (event.changes && !event.changes.empty || event.effects.length) { // Event survived mapping
               let result = branch.slice(0, length);
               result[length - 1] = event;
               return result;
           }
           else { // Drop this event, since there's no changes or effects left
               mapping = event.mapped;
               length--;
               selections = event.selectionsAfter;
           }
       }
       return selections.length ? [HistEvent.selection(selections)] : none$2;
   }
   function mapEvent(event, mapping, extraSelections) {
       let selections = conc(event.selectionsAfter.length ? event.selectionsAfter.map(s => s.map(mapping)) : none$2, extraSelections);
       // Change-less events don't store mappings (they are always the last event in a branch)
       if (!event.changes)
           return HistEvent.selection(selections);
       let mappedChanges = event.changes.map(mapping), before = mapping.mapDesc(event.changes, true);
       let fullMapping = event.mapped ? event.mapped.composeDesc(before) : before;
       return new HistEvent(mappedChanges, StateEffect.mapEffects(event.effects, mapping), fullMapping, event.startSelection.map(before), selections);
   }
   const joinableUserEvent = /^(input\.type|delete)($|\.)/;
   class HistoryState {
       constructor(done, undone, prevTime = 0, prevUserEvent = undefined) {
           this.done = done;
           this.undone = undone;
           this.prevTime = prevTime;
           this.prevUserEvent = prevUserEvent;
       }
       isolate() {
           return this.prevTime ? new HistoryState(this.done, this.undone) : this;
       }
       addChanges(event, time, userEvent, config, tr) {
           let done = this.done, lastEvent = done[done.length - 1];
           if (lastEvent && lastEvent.changes && !lastEvent.changes.empty && event.changes &&
               (!userEvent || joinableUserEvent.test(userEvent)) &&
               ((!lastEvent.selectionsAfter.length &&
                   time - this.prevTime < config.newGroupDelay &&
                   config.joinToEvent(tr, isAdjacent(lastEvent.changes, event.changes))) ||
                   // For compose (but not compose.start) events, always join with previous event
                   userEvent == "input.type.compose")) {
               done = updateBranch(done, done.length - 1, config.minDepth, new HistEvent(event.changes.compose(lastEvent.changes), conc(event.effects, lastEvent.effects), lastEvent.mapped, lastEvent.startSelection, none$2));
           }
           else {
               done = updateBranch(done, done.length, config.minDepth, event);
           }
           return new HistoryState(done, none$2, time, userEvent);
       }
       addSelection(selection, time, userEvent, newGroupDelay) {
           let last = this.done.length ? this.done[this.done.length - 1].selectionsAfter : none$2;
           if (last.length > 0 &&
               time - this.prevTime < newGroupDelay &&
               userEvent == this.prevUserEvent && userEvent && /^select($|\.)/.test(userEvent) &&
               eqSelectionShape(last[last.length - 1], selection))
               return this;
           return new HistoryState(addSelection(this.done, selection), this.undone, time, userEvent);
       }
       addMapping(mapping) {
           return new HistoryState(addMappingToBranch(this.done, mapping), addMappingToBranch(this.undone, mapping), this.prevTime, this.prevUserEvent);
       }
       pop(side, state, selection) {
           let branch = side == 0 /* BranchName.Done */ ? this.done : this.undone;
           if (branch.length == 0)
               return null;
           let event = branch[branch.length - 1];
           if (selection && event.selectionsAfter.length) {
               return state.update({
                   selection: event.selectionsAfter[event.selectionsAfter.length - 1],
                   annotations: fromHistory.of({ side, rest: popSelection(branch) }),
                   userEvent: side == 0 /* BranchName.Done */ ? "select.undo" : "select.redo",
                   scrollIntoView: true
               });
           }
           else if (!event.changes) {
               return null;
           }
           else {
               let rest = branch.length == 1 ? none$2 : branch.slice(0, branch.length - 1);
               if (event.mapped)
                   rest = addMappingToBranch(rest, event.mapped);
               return state.update({
                   changes: event.changes,
                   selection: event.startSelection,
                   effects: event.effects,
                   annotations: fromHistory.of({ side, rest }),
                   filter: false,
                   userEvent: side == 0 /* BranchName.Done */ ? "undo" : "redo",
                   scrollIntoView: true
               });
           }
       }
   }
   HistoryState.empty = /*@__PURE__*/new HistoryState(none$2, none$2);
   /**
   Default key bindings for the undo history.

   - Mod-z: [`undo`](https://codemirror.net/6/docs/ref/#commands.undo).
   - Mod-y (Mod-Shift-z on macOS) + Ctrl-Shift-z on Linux: [`redo`](https://codemirror.net/6/docs/ref/#commands.redo).
   - Mod-u: [`undoSelection`](https://codemirror.net/6/docs/ref/#commands.undoSelection).
   - Alt-u (Mod-Shift-u on macOS): [`redoSelection`](https://codemirror.net/6/docs/ref/#commands.redoSelection).
   */
   const historyKeymap = [
       { key: "Mod-z", run: undo, preventDefault: true },
       { key: "Mod-y", mac: "Mod-Shift-z", run: redo, preventDefault: true },
       { linux: "Ctrl-Shift-z", run: redo, preventDefault: true },
       { key: "Mod-u", run: undoSelection, preventDefault: true },
       { key: "Alt-u", mac: "Mod-Shift-u", run: redoSelection, preventDefault: true }
   ];

   function updateSel(sel, by) {
       return EditorSelection.create(sel.ranges.map(by), sel.mainIndex);
   }
   function setSel(state, selection) {
       return state.update({ selection, scrollIntoView: true, userEvent: "select" });
   }
   function moveSel({ state, dispatch }, how) {
       let selection = updateSel(state.selection, how);
       if (selection.eq(state.selection))
           return false;
       dispatch(setSel(state, selection));
       return true;
   }
   function rangeEnd(range, forward) {
       return EditorSelection.cursor(forward ? range.to : range.from);
   }
   function cursorByChar(view, forward) {
       return moveSel(view, range => range.empty ? view.moveByChar(range, forward) : rangeEnd(range, forward));
   }
   function ltrAtCursor(view) {
       return view.textDirectionAt(view.state.selection.main.head) == Direction.LTR;
   }
   /**
   Move the selection one character to the left (which is backward in
   left-to-right text, forward in right-to-left text).
   */
   const cursorCharLeft = view => cursorByChar(view, !ltrAtCursor(view));
   /**
   Move the selection one character to the right.
   */
   const cursorCharRight = view => cursorByChar(view, ltrAtCursor(view));
   /**
   Move the selection one character forward.
   */
   const cursorCharForward = view => cursorByChar(view, true);
   /**
   Move the selection one character backward.
   */
   const cursorCharBackward = view => cursorByChar(view, false);
   function cursorByGroup(view, forward) {
       return moveSel(view, range => range.empty ? view.moveByGroup(range, forward) : rangeEnd(range, forward));
   }
   /**
   Move the selection to the left across one group of word or
   non-word (but also non-space) characters.
   */
   const cursorGroupLeft = view => cursorByGroup(view, !ltrAtCursor(view));
   /**
   Move the selection one group to the right.
   */
   const cursorGroupRight = view => cursorByGroup(view, ltrAtCursor(view));
   /**
   Move the selection one group forward.
   */
   const cursorGroupForward = view => cursorByGroup(view, true);
   /**
   Move the selection one group backward.
   */
   const cursorGroupBackward = view => cursorByGroup(view, false);
   function moveBySubword(view, range, forward) {
       let categorize = view.state.charCategorizer(range.from);
       return view.moveByChar(range, forward, start => {
           let cat = CharCategory.Space, pos = range.from;
           let done = false, sawUpper = false, sawLower = false;
           let step = (next) => {
               if (done)
                   return false;
               pos += forward ? next.length : -next.length;
               let nextCat = categorize(next), ahead;
               if (nextCat == CharCategory.Word && next.charCodeAt(0) < 128 && /[\W_]/.test(next))
                   nextCat = -1; // Treat word punctuation specially
               if (cat == CharCategory.Space)
                   cat = nextCat;
               if (cat != nextCat)
                   return false;
               if (cat == CharCategory.Word) {
                   if (next.toLowerCase() == next) {
                       if (!forward && sawUpper)
                           return false;
                       sawLower = true;
                   }
                   else if (sawLower) {
                       if (forward)
                           return false;
                       done = true;
                   }
                   else {
                       if (sawUpper && forward && categorize(ahead = view.state.sliceDoc(pos, pos + 1)) == CharCategory.Word &&
                           ahead.toLowerCase() == ahead)
                           return false;
                       sawUpper = true;
                   }
               }
               return true;
           };
           step(start);
           return step;
       });
   }
   function cursorBySubword(view, forward) {
       return moveSel(view, range => range.empty ? moveBySubword(view, range, forward) : rangeEnd(range, forward));
   }
   /**
   Move the selection one group or camel-case subword forward.
   */
   const cursorSubwordForward = view => cursorBySubword(view, true);
   /**
   Move the selection one group or camel-case subword backward.
   */
   const cursorSubwordBackward = view => cursorBySubword(view, false);
   function interestingNode(state, node, bracketProp) {
       if (node.type.prop(bracketProp))
           return true;
       let len = node.to - node.from;
       return len && (len > 2 || /[^\s,.;:]/.test(state.sliceDoc(node.from, node.to))) || node.firstChild;
   }
   function moveBySyntax(state, start, forward) {
       let pos = syntaxTree(state).resolveInner(start.head);
       let bracketProp = forward ? NodeProp.closedBy : NodeProp.openedBy;
       // Scan forward through child nodes to see if there's an interesting
       // node ahead.
       for (let at = start.head;;) {
           let next = forward ? pos.childAfter(at) : pos.childBefore(at);
           if (!next)
               break;
           if (interestingNode(state, next, bracketProp))
               pos = next;
           else
               at = forward ? next.to : next.from;
       }
       let bracket = pos.type.prop(bracketProp), match, newPos;
       if (bracket && (match = forward ? matchBrackets(state, pos.from, 1) : matchBrackets(state, pos.to, -1)) && match.matched)
           newPos = forward ? match.end.to : match.end.from;
       else
           newPos = forward ? pos.to : pos.from;
       return EditorSelection.cursor(newPos, forward ? -1 : 1);
   }
   /**
   Move the cursor over the next syntactic element to the left.
   */
   const cursorSyntaxLeft = view => moveSel(view, range => moveBySyntax(view.state, range, !ltrAtCursor(view)));
   /**
   Move the cursor over the next syntactic element to the right.
   */
   const cursorSyntaxRight = view => moveSel(view, range => moveBySyntax(view.state, range, ltrAtCursor(view)));
   function cursorByLine(view, forward) {
       return moveSel(view, range => {
           if (!range.empty)
               return rangeEnd(range, forward);
           let moved = view.moveVertically(range, forward);
           return moved.head != range.head ? moved : view.moveToLineBoundary(range, forward);
       });
   }
   /**
   Move the selection one line up.
   */
   const cursorLineUp = view => cursorByLine(view, false);
   /**
   Move the selection one line down.
   */
   const cursorLineDown = view => cursorByLine(view, true);
   function pageInfo(view) {
       let selfScroll = view.scrollDOM.clientHeight < view.scrollDOM.scrollHeight - 2;
       let marginTop = 0, marginBottom = 0, height;
       if (selfScroll) {
           for (let source of view.state.facet(EditorView.scrollMargins)) {
               let margins = source(view);
               if (margins === null || margins === void 0 ? void 0 : margins.top)
                   marginTop = Math.max(margins === null || margins === void 0 ? void 0 : margins.top, marginTop);
               if (margins === null || margins === void 0 ? void 0 : margins.bottom)
                   marginBottom = Math.max(margins === null || margins === void 0 ? void 0 : margins.bottom, marginBottom);
           }
           height = view.scrollDOM.clientHeight - marginTop - marginBottom;
       }
       else {
           height = (view.dom.ownerDocument.defaultView || window).innerHeight;
       }
       return { marginTop, marginBottom, selfScroll,
           height: Math.max(view.defaultLineHeight, height - 5) };
   }
   function cursorByPage(view, forward) {
       let page = pageInfo(view);
       let { state } = view, selection = updateSel(state.selection, range => {
           return range.empty ? view.moveVertically(range, forward, page.height)
               : rangeEnd(range, forward);
       });
       if (selection.eq(state.selection))
           return false;
       let effect;
       if (page.selfScroll) {
           let startPos = view.coordsAtPos(state.selection.main.head);
           let scrollRect = view.scrollDOM.getBoundingClientRect();
           let scrollTop = scrollRect.top + page.marginTop, scrollBottom = scrollRect.bottom - page.marginBottom;
           if (startPos && startPos.top > scrollTop && startPos.bottom < scrollBottom)
               effect = EditorView.scrollIntoView(selection.main.head, { y: "start", yMargin: startPos.top - scrollTop });
       }
       view.dispatch(setSel(state, selection), { effects: effect });
       return true;
   }
   /**
   Move the selection one page up.
   */
   const cursorPageUp = view => cursorByPage(view, false);
   /**
   Move the selection one page down.
   */
   const cursorPageDown = view => cursorByPage(view, true);
   function moveByLineBoundary(view, start, forward) {
       let line = view.lineBlockAt(start.head), moved = view.moveToLineBoundary(start, forward);
       if (moved.head == start.head && moved.head != (forward ? line.to : line.from))
           moved = view.moveToLineBoundary(start, forward, false);
       if (!forward && moved.head == line.from && line.length) {
           let space = /^\s*/.exec(view.state.sliceDoc(line.from, Math.min(line.from + 100, line.to)))[0].length;
           if (space && start.head != line.from + space)
               moved = EditorSelection.cursor(line.from + space);
       }
       return moved;
   }
   /**
   Move the selection to the next line wrap point, or to the end of
   the line if there isn't one left on this line.
   */
   const cursorLineBoundaryForward = view => moveSel(view, range => moveByLineBoundary(view, range, true));
   /**
   Move the selection to previous line wrap point, or failing that to
   the start of the line. If the line is indented, and the cursor
   isn't already at the end of the indentation, this will move to the
   end of the indentation instead of the start of the line.
   */
   const cursorLineBoundaryBackward = view => moveSel(view, range => moveByLineBoundary(view, range, false));
   /**
   Move the selection one line wrap point to the left.
   */
   const cursorLineBoundaryLeft = view => moveSel(view, range => moveByLineBoundary(view, range, !ltrAtCursor(view)));
   /**
   Move the selection one line wrap point to the right.
   */
   const cursorLineBoundaryRight = view => moveSel(view, range => moveByLineBoundary(view, range, ltrAtCursor(view)));
   /**
   Move the selection to the start of the line.
   */
   const cursorLineStart = view => moveSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).from, 1));
   /**
   Move the selection to the end of the line.
   */
   const cursorLineEnd = view => moveSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).to, -1));
   function toMatchingBracket(state, dispatch, extend) {
       let found = false, selection = updateSel(state.selection, range => {
           let matching = matchBrackets(state, range.head, -1)
               || matchBrackets(state, range.head, 1)
               || (range.head > 0 && matchBrackets(state, range.head - 1, 1))
               || (range.head < state.doc.length && matchBrackets(state, range.head + 1, -1));
           if (!matching || !matching.end)
               return range;
           found = true;
           let head = matching.start.from == range.head ? matching.end.to : matching.end.from;
           return extend ? EditorSelection.range(range.anchor, head) : EditorSelection.cursor(head);
       });
       if (!found)
           return false;
       dispatch(setSel(state, selection));
       return true;
   }
   /**
   Move the selection to the bracket matching the one it is currently
   on, if any.
   */
   const cursorMatchingBracket = ({ state, dispatch }) => toMatchingBracket(state, dispatch, false);
   /**
   Extend the selection to the bracket matching the one the selection
   head is currently on, if any.
   */
   const selectMatchingBracket = ({ state, dispatch }) => toMatchingBracket(state, dispatch, true);
   function extendSel(view, how) {
       let selection = updateSel(view.state.selection, range => {
           let head = how(range);
           return EditorSelection.range(range.anchor, head.head, head.goalColumn, head.bidiLevel || undefined);
       });
       if (selection.eq(view.state.selection))
           return false;
       view.dispatch(setSel(view.state, selection));
       return true;
   }
   function selectByChar(view, forward) {
       return extendSel(view, range => view.moveByChar(range, forward));
   }
   /**
   Move the selection head one character to the left, while leaving
   the anchor in place.
   */
   const selectCharLeft = view => selectByChar(view, !ltrAtCursor(view));
   /**
   Move the selection head one character to the right.
   */
   const selectCharRight = view => selectByChar(view, ltrAtCursor(view));
   /**
   Move the selection head one character forward.
   */
   const selectCharForward = view => selectByChar(view, true);
   /**
   Move the selection head one character backward.
   */
   const selectCharBackward = view => selectByChar(view, false);
   function selectByGroup(view, forward) {
       return extendSel(view, range => view.moveByGroup(range, forward));
   }
   /**
   Move the selection head one [group](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) to
   the left.
   */
   const selectGroupLeft = view => selectByGroup(view, !ltrAtCursor(view));
   /**
   Move the selection head one group to the right.
   */
   const selectGroupRight = view => selectByGroup(view, ltrAtCursor(view));
   /**
   Move the selection head one group forward.
   */
   const selectGroupForward = view => selectByGroup(view, true);
   /**
   Move the selection head one group backward.
   */
   const selectGroupBackward = view => selectByGroup(view, false);
   function selectBySubword(view, forward) {
       return extendSel(view, range => moveBySubword(view, range, forward));
   }
   /**
   Move the selection head one group or camel-case subword forward.
   */
   const selectSubwordForward = view => selectBySubword(view, true);
   /**
   Move the selection head one group or subword backward.
   */
   const selectSubwordBackward = view => selectBySubword(view, false);
   /**
   Move the selection head over the next syntactic element to the left.
   */
   const selectSyntaxLeft = view => extendSel(view, range => moveBySyntax(view.state, range, !ltrAtCursor(view)));
   /**
   Move the selection head over the next syntactic element to the right.
   */
   const selectSyntaxRight = view => extendSel(view, range => moveBySyntax(view.state, range, ltrAtCursor(view)));
   function selectByLine(view, forward) {
       return extendSel(view, range => view.moveVertically(range, forward));
   }
   /**
   Move the selection head one line up.
   */
   const selectLineUp = view => selectByLine(view, false);
   /**
   Move the selection head one line down.
   */
   const selectLineDown = view => selectByLine(view, true);
   function selectByPage(view, forward) {
       return extendSel(view, range => view.moveVertically(range, forward, pageInfo(view).height));
   }
   /**
   Move the selection head one page up.
   */
   const selectPageUp = view => selectByPage(view, false);
   /**
   Move the selection head one page down.
   */
   const selectPageDown = view => selectByPage(view, true);
   /**
   Move the selection head to the next line boundary.
   */
   const selectLineBoundaryForward = view => extendSel(view, range => moveByLineBoundary(view, range, true));
   /**
   Move the selection head to the previous line boundary.
   */
   const selectLineBoundaryBackward = view => extendSel(view, range => moveByLineBoundary(view, range, false));
   /**
   Move the selection head one line boundary to the left.
   */
   const selectLineBoundaryLeft = view => extendSel(view, range => moveByLineBoundary(view, range, !ltrAtCursor(view)));
   /**
   Move the selection head one line boundary to the right.
   */
   const selectLineBoundaryRight = view => extendSel(view, range => moveByLineBoundary(view, range, ltrAtCursor(view)));
   /**
   Move the selection head to the start of the line.
   */
   const selectLineStart = view => extendSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).from));
   /**
   Move the selection head to the end of the line.
   */
   const selectLineEnd = view => extendSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).to));
   /**
   Move the selection to the start of the document.
   */
   const cursorDocStart = ({ state, dispatch }) => {
       dispatch(setSel(state, { anchor: 0 }));
       return true;
   };
   /**
   Move the selection to the end of the document.
   */
   const cursorDocEnd = ({ state, dispatch }) => {
       dispatch(setSel(state, { anchor: state.doc.length }));
       return true;
   };
   /**
   Move the selection head to the start of the document.
   */
   const selectDocStart = ({ state, dispatch }) => {
       dispatch(setSel(state, { anchor: state.selection.main.anchor, head: 0 }));
       return true;
   };
   /**
   Move the selection head to the end of the document.
   */
   const selectDocEnd = ({ state, dispatch }) => {
       dispatch(setSel(state, { anchor: state.selection.main.anchor, head: state.doc.length }));
       return true;
   };
   /**
   Select the entire document.
   */
   const selectAll = ({ state, dispatch }) => {
       dispatch(state.update({ selection: { anchor: 0, head: state.doc.length }, userEvent: "select" }));
       return true;
   };
   /**
   Expand the selection to cover entire lines.
   */
   const selectLine = ({ state, dispatch }) => {
       let ranges = selectedLineBlocks(state).map(({ from, to }) => EditorSelection.range(from, Math.min(to + 1, state.doc.length)));
       dispatch(state.update({ selection: EditorSelection.create(ranges), userEvent: "select" }));
       return true;
   };
   /**
   Select the next syntactic construct that is larger than the
   selection. Note that this will only work insofar as the language
   [provider](https://codemirror.net/6/docs/ref/#language.language) you use builds up a full
   syntax tree.
   */
   const selectParentSyntax = ({ state, dispatch }) => {
       let selection = updateSel(state.selection, range => {
           var _a;
           let context = syntaxTree(state).resolveInner(range.head, 1);
           while (!((context.from < range.from && context.to >= range.to) ||
               (context.to > range.to && context.from <= range.from) ||
               !((_a = context.parent) === null || _a === void 0 ? void 0 : _a.parent)))
               context = context.parent;
           return EditorSelection.range(context.to, context.from);
       });
       dispatch(setSel(state, selection));
       return true;
   };
   /**
   Simplify the current selection. When multiple ranges are selected,
   reduce it to its main range. Otherwise, if the selection is
   non-empty, convert it to a cursor selection.
   */
   const simplifySelection = ({ state, dispatch }) => {
       let cur = state.selection, selection = null;
       if (cur.ranges.length > 1)
           selection = EditorSelection.create([cur.main]);
       else if (!cur.main.empty)
           selection = EditorSelection.create([EditorSelection.cursor(cur.main.head)]);
       if (!selection)
           return false;
       dispatch(setSel(state, selection));
       return true;
   };
   function deleteBy(target, by) {
       if (target.state.readOnly)
           return false;
       let event = "delete.selection", { state } = target;
       let changes = state.changeByRange(range => {
           let { from, to } = range;
           if (from == to) {
               let towards = by(from);
               if (towards < from) {
                   event = "delete.backward";
                   towards = skipAtomic(target, towards, false);
               }
               else if (towards > from) {
                   event = "delete.forward";
                   towards = skipAtomic(target, towards, true);
               }
               from = Math.min(from, towards);
               to = Math.max(to, towards);
           }
           else {
               from = skipAtomic(target, from, false);
               to = skipAtomic(target, to, true);
           }
           return from == to ? { range } : { changes: { from, to }, range: EditorSelection.cursor(from) };
       });
       if (changes.changes.empty)
           return false;
       target.dispatch(state.update(changes, {
           scrollIntoView: true,
           userEvent: event,
           effects: event == "delete.selection" ? EditorView.announce.of(state.phrase("Selection deleted")) : undefined
       }));
       return true;
   }
   function skipAtomic(target, pos, forward) {
       if (target instanceof EditorView)
           for (let ranges of target.state.facet(EditorView.atomicRanges).map(f => f(target)))
               ranges.between(pos, pos, (from, to) => {
                   if (from < pos && to > pos)
                       pos = forward ? to : from;
               });
       return pos;
   }
   const deleteByChar = (target, forward) => deleteBy(target, pos => {
       let { state } = target, line = state.doc.lineAt(pos), before, targetPos;
       if (!forward && pos > line.from && pos < line.from + 200 &&
           !/[^ \t]/.test(before = line.text.slice(0, pos - line.from))) {
           if (before[before.length - 1] == "\t")
               return pos - 1;
           let col = countColumn(before, state.tabSize), drop = col % getIndentUnit(state) || getIndentUnit(state);
           for (let i = 0; i < drop && before[before.length - 1 - i] == " "; i++)
               pos--;
           targetPos = pos;
       }
       else {
           targetPos = findClusterBreak(line.text, pos - line.from, forward, forward) + line.from;
           if (targetPos == pos && line.number != (forward ? state.doc.lines : 1))
               targetPos += forward ? 1 : -1;
       }
       return targetPos;
   });
   /**
   Delete the selection, or, for cursor selections, the character
   before the cursor.
   */
   const deleteCharBackward = view => deleteByChar(view, false);
   /**
   Delete the selection or the character after the cursor.
   */
   const deleteCharForward = view => deleteByChar(view, true);
   const deleteByGroup = (target, forward) => deleteBy(target, start => {
       let pos = start, { state } = target, line = state.doc.lineAt(pos);
       let categorize = state.charCategorizer(pos);
       for (let cat = null;;) {
           if (pos == (forward ? line.to : line.from)) {
               if (pos == start && line.number != (forward ? state.doc.lines : 1))
                   pos += forward ? 1 : -1;
               break;
           }
           let next = findClusterBreak(line.text, pos - line.from, forward) + line.from;
           let nextChar = line.text.slice(Math.min(pos, next) - line.from, Math.max(pos, next) - line.from);
           let nextCat = categorize(nextChar);
           if (cat != null && nextCat != cat)
               break;
           if (nextChar != " " || pos != start)
               cat = nextCat;
           pos = next;
       }
       return pos;
   });
   /**
   Delete the selection or backward until the end of the next
   [group](https://codemirror.net/6/docs/ref/#view.EditorView.moveByGroup), only skipping groups of
   whitespace when they consist of a single space.
   */
   const deleteGroupBackward = target => deleteByGroup(target, false);
   /**
   Delete the selection or forward until the end of the next group.
   */
   const deleteGroupForward = target => deleteByGroup(target, true);
   /**
   Delete the selection, or, if it is a cursor selection, delete to
   the end of the line. If the cursor is directly at the end of the
   line, delete the line break after it.
   */
   const deleteToLineEnd = view => deleteBy(view, pos => {
       let lineEnd = view.lineBlockAt(pos).to;
       return pos < lineEnd ? lineEnd : Math.min(view.state.doc.length, pos + 1);
   });
   /**
   Delete the selection, or, if it is a cursor selection, delete to
   the start of the line. If the cursor is directly at the start of the
   line, delete the line break before it.
   */
   const deleteToLineStart = view => deleteBy(view, pos => {
       let lineStart = view.lineBlockAt(pos).from;
       return pos > lineStart ? lineStart : Math.max(0, pos - 1);
   });
   /**
   Delete all whitespace directly before a line end from the
   document.
   */
   const deleteTrailingWhitespace = ({ state, dispatch }) => {
       if (state.readOnly)
           return false;
       let changes = [];
       for (let pos = 0, prev = "", iter = state.doc.iter();;) {
           iter.next();
           if (iter.lineBreak || iter.done) {
               let trailing = prev.search(/\s+$/);
               if (trailing > -1)
                   changes.push({ from: pos - (prev.length - trailing), to: pos });
               if (iter.done)
                   break;
               prev = "";
           }
           else {
               prev = iter.value;
           }
           pos += iter.value.length;
       }
       if (!changes.length)
           return false;
       dispatch(state.update({ changes, userEvent: "delete" }));
       return true;
   };
   /**
   Replace each selection range with a line break, leaving the cursor
   on the line before the break.
   */
   const splitLine = ({ state, dispatch }) => {
       if (state.readOnly)
           return false;
       let changes = state.changeByRange(range => {
           return { changes: { from: range.from, to: range.to, insert: Text$1.of(["", ""]) },
               range: EditorSelection.cursor(range.from) };
       });
       dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
       return true;
   };
   /**
   Flip the characters before and after the cursor(s).
   */
   const transposeChars = ({ state, dispatch }) => {
       if (state.readOnly)
           return false;
       let changes = state.changeByRange(range => {
           if (!range.empty || range.from == 0 || range.from == state.doc.length)
               return { range };
           let pos = range.from, line = state.doc.lineAt(pos);
           let from = pos == line.from ? pos - 1 : findClusterBreak(line.text, pos - line.from, false) + line.from;
           let to = pos == line.to ? pos + 1 : findClusterBreak(line.text, pos - line.from, true) + line.from;
           return { changes: { from, to, insert: state.doc.slice(pos, to).append(state.doc.slice(from, pos)) },
               range: EditorSelection.cursor(to) };
       });
       if (changes.changes.empty)
           return false;
       dispatch(state.update(changes, { scrollIntoView: true, userEvent: "move.character" }));
       return true;
   };
   function selectedLineBlocks(state) {
       let blocks = [], upto = -1;
       for (let range of state.selection.ranges) {
           let startLine = state.doc.lineAt(range.from), endLine = state.doc.lineAt(range.to);
           if (!range.empty && range.to == endLine.from)
               endLine = state.doc.lineAt(range.to - 1);
           if (upto >= startLine.number) {
               let prev = blocks[blocks.length - 1];
               prev.to = endLine.to;
               prev.ranges.push(range);
           }
           else {
               blocks.push({ from: startLine.from, to: endLine.to, ranges: [range] });
           }
           upto = endLine.number + 1;
       }
       return blocks;
   }
   function moveLine(state, dispatch, forward) {
       if (state.readOnly)
           return false;
       let changes = [], ranges = [];
       for (let block of selectedLineBlocks(state)) {
           if (forward ? block.to == state.doc.length : block.from == 0)
               continue;
           let nextLine = state.doc.lineAt(forward ? block.to + 1 : block.from - 1);
           let size = nextLine.length + 1;
           if (forward) {
               changes.push({ from: block.to, to: nextLine.to }, { from: block.from, insert: nextLine.text + state.lineBreak });
               for (let r of block.ranges)
                   ranges.push(EditorSelection.range(Math.min(state.doc.length, r.anchor + size), Math.min(state.doc.length, r.head + size)));
           }
           else {
               changes.push({ from: nextLine.from, to: block.from }, { from: block.to, insert: state.lineBreak + nextLine.text });
               for (let r of block.ranges)
                   ranges.push(EditorSelection.range(r.anchor - size, r.head - size));
           }
       }
       if (!changes.length)
           return false;
       dispatch(state.update({
           changes,
           scrollIntoView: true,
           selection: EditorSelection.create(ranges, state.selection.mainIndex),
           userEvent: "move.line"
       }));
       return true;
   }
   /**
   Move the selected lines up one line.
   */
   const moveLineUp = ({ state, dispatch }) => moveLine(state, dispatch, false);
   /**
   Move the selected lines down one line.
   */
   const moveLineDown = ({ state, dispatch }) => moveLine(state, dispatch, true);
   function copyLine(state, dispatch, forward) {
       if (state.readOnly)
           return false;
       let changes = [];
       for (let block of selectedLineBlocks(state)) {
           if (forward)
               changes.push({ from: block.from, insert: state.doc.slice(block.from, block.to) + state.lineBreak });
           else
               changes.push({ from: block.to, insert: state.lineBreak + state.doc.slice(block.from, block.to) });
       }
       dispatch(state.update({ changes, scrollIntoView: true, userEvent: "input.copyline" }));
       return true;
   }
   /**
   Create a copy of the selected lines. Keep the selection in the top copy.
   */
   const copyLineUp = ({ state, dispatch }) => copyLine(state, dispatch, false);
   /**
   Create a copy of the selected lines. Keep the selection in the bottom copy.
   */
   const copyLineDown = ({ state, dispatch }) => copyLine(state, dispatch, true);
   /**
   Delete selected lines.
   */
   const deleteLine = view => {
       if (view.state.readOnly)
           return false;
       let { state } = view, changes = state.changes(selectedLineBlocks(state).map(({ from, to }) => {
           if (from > 0)
               from--;
           else if (to < state.doc.length)
               to++;
           return { from, to };
       }));
       let selection = updateSel(state.selection, range => view.moveVertically(range, true)).map(changes);
       view.dispatch({ changes, selection, scrollIntoView: true, userEvent: "delete.line" });
       return true;
   };
   /**
   Replace the selection with a newline.
   */
   const insertNewline = ({ state, dispatch }) => {
       dispatch(state.update(state.replaceSelection(state.lineBreak), { scrollIntoView: true, userEvent: "input" }));
       return true;
   };
   function isBetweenBrackets(state, pos) {
       if (/\(\)|\[\]|\{\}/.test(state.sliceDoc(pos - 1, pos + 1)))
           return { from: pos, to: pos };
       let context = syntaxTree(state).resolveInner(pos);
       let before = context.childBefore(pos), after = context.childAfter(pos), closedBy;
       if (before && after && before.to <= pos && after.from >= pos &&
           (closedBy = before.type.prop(NodeProp.closedBy)) && closedBy.indexOf(after.name) > -1 &&
           state.doc.lineAt(before.to).from == state.doc.lineAt(after.from).from)
           return { from: before.to, to: after.from };
       return null;
   }
   /**
   Replace the selection with a newline and indent the newly created
   line(s). If the current line consists only of whitespace, this
   will also delete that whitespace. When the cursor is between
   matching brackets, an additional newline will be inserted after
   the cursor.
   */
   const insertNewlineAndIndent = /*@__PURE__*/newlineAndIndent(false);
   /**
   Create a blank, indented line below the current line.
   */
   const insertBlankLine = /*@__PURE__*/newlineAndIndent(true);
   function newlineAndIndent(atEof) {
       return ({ state, dispatch }) => {
           if (state.readOnly)
               return false;
           let changes = state.changeByRange(range => {
               let { from, to } = range, line = state.doc.lineAt(from);
               let explode = !atEof && from == to && isBetweenBrackets(state, from);
               if (atEof)
                   from = to = (to <= line.to ? line : state.doc.lineAt(to)).to;
               let cx = new IndentContext(state, { simulateBreak: from, simulateDoubleBreak: !!explode });
               let indent = getIndentation(cx, from);
               if (indent == null)
                   indent = /^\s*/.exec(state.doc.lineAt(from).text)[0].length;
               while (to < line.to && /\s/.test(line.text[to - line.from]))
                   to++;
               if (explode)
                   ({ from, to } = explode);
               else if (from > line.from && from < line.from + 100 && !/\S/.test(line.text.slice(0, from)))
                   from = line.from;
               let insert = ["", indentString(state, indent)];
               if (explode)
                   insert.push(indentString(state, cx.lineIndent(line.from, -1)));
               return { changes: { from, to, insert: Text$1.of(insert) },
                   range: EditorSelection.cursor(from + 1 + insert[1].length) };
           });
           dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
           return true;
       };
   }
   function changeBySelectedLine(state, f) {
       let atLine = -1;
       return state.changeByRange(range => {
           let changes = [];
           for (let pos = range.from; pos <= range.to;) {
               let line = state.doc.lineAt(pos);
               if (line.number > atLine && (range.empty || range.to > line.from)) {
                   f(line, changes, range);
                   atLine = line.number;
               }
               pos = line.to + 1;
           }
           let changeSet = state.changes(changes);
           return { changes,
               range: EditorSelection.range(changeSet.mapPos(range.anchor, 1), changeSet.mapPos(range.head, 1)) };
       });
   }
   /**
   Auto-indent the selected lines. This uses the [indentation service
   facet](https://codemirror.net/6/docs/ref/#language.indentService) as source for auto-indent
   information.
   */
   const indentSelection = ({ state, dispatch }) => {
       if (state.readOnly)
           return false;
       let updated = Object.create(null);
       let context = new IndentContext(state, { overrideIndentation: start => {
               let found = updated[start];
               return found == null ? -1 : found;
           } });
       let changes = changeBySelectedLine(state, (line, changes, range) => {
           let indent = getIndentation(context, line.from);
           if (indent == null)
               return;
           if (!/\S/.test(line.text))
               indent = 0;
           let cur = /^\s*/.exec(line.text)[0];
           let norm = indentString(state, indent);
           if (cur != norm || range.from < line.from + cur.length) {
               updated[line.from] = indent;
               changes.push({ from: line.from, to: line.from + cur.length, insert: norm });
           }
       });
       if (!changes.changes.empty)
           dispatch(state.update(changes, { userEvent: "indent" }));
       return true;
   };
   /**
   Add a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation to all selected
   lines.
   */
   const indentMore = ({ state, dispatch }) => {
       if (state.readOnly)
           return false;
       dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
           changes.push({ from: line.from, insert: state.facet(indentUnit) });
       }), { userEvent: "input.indent" }));
       return true;
   };
   /**
   Remove a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation from all
   selected lines.
   */
   const indentLess = ({ state, dispatch }) => {
       if (state.readOnly)
           return false;
       dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
           let space = /^\s*/.exec(line.text)[0];
           if (!space)
               return;
           let col = countColumn(space, state.tabSize), keep = 0;
           let insert = indentString(state, Math.max(0, col - getIndentUnit(state)));
           while (keep < space.length && keep < insert.length && space.charCodeAt(keep) == insert.charCodeAt(keep))
               keep++;
           changes.push({ from: line.from + keep, to: line.from + space.length, insert: insert.slice(keep) });
       }), { userEvent: "delete.dedent" }));
       return true;
   };
   /**
   Insert a tab character at the cursor or, if something is selected,
   use [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore) to indent the entire
   selection.
   */
   const insertTab = ({ state, dispatch }) => {
       if (state.selection.ranges.some(r => !r.empty))
           return indentMore({ state, dispatch });
       dispatch(state.update(state.replaceSelection("\t"), { scrollIntoView: true, userEvent: "input" }));
       return true;
   };
   /**
   Array of key bindings containing the Emacs-style bindings that are
   available on macOS by default.

    - Ctrl-b: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)
    - Ctrl-f: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)
    - Ctrl-p: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)
    - Ctrl-n: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)
    - Ctrl-a: [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)
    - Ctrl-e: [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)
    - Ctrl-d: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)
    - Ctrl-h: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)
    - Ctrl-k: [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd)
    - Ctrl-Alt-h: [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)
    - Ctrl-o: [`splitLine`](https://codemirror.net/6/docs/ref/#commands.splitLine)
    - Ctrl-t: [`transposeChars`](https://codemirror.net/6/docs/ref/#commands.transposeChars)
    - Ctrl-v: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown)
    - Alt-v: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp)
   */
   const emacsStyleKeymap = [
       { key: "Ctrl-b", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
       { key: "Ctrl-f", run: cursorCharRight, shift: selectCharRight },
       { key: "Ctrl-p", run: cursorLineUp, shift: selectLineUp },
       { key: "Ctrl-n", run: cursorLineDown, shift: selectLineDown },
       { key: "Ctrl-a", run: cursorLineStart, shift: selectLineStart },
       { key: "Ctrl-e", run: cursorLineEnd, shift: selectLineEnd },
       { key: "Ctrl-d", run: deleteCharForward },
       { key: "Ctrl-h", run: deleteCharBackward },
       { key: "Ctrl-k", run: deleteToLineEnd },
       { key: "Ctrl-Alt-h", run: deleteGroupBackward },
       { key: "Ctrl-o", run: splitLine },
       { key: "Ctrl-t", run: transposeChars },
       { key: "Ctrl-v", run: cursorPageDown },
   ];
   /**
   An array of key bindings closely sticking to platform-standard or
   widely used bindings. (This includes the bindings from
   [`emacsStyleKeymap`](https://codemirror.net/6/docs/ref/#commands.emacsStyleKeymap), with their `key`
   property changed to `mac`.)

    - ArrowLeft: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)
    - ArrowRight: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)
    - Ctrl-ArrowLeft (Alt-ArrowLeft on macOS): [`cursorGroupLeft`](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) ([`selectGroupLeft`](https://codemirror.net/6/docs/ref/#commands.selectGroupLeft) with Shift)
    - Ctrl-ArrowRight (Alt-ArrowRight on macOS): [`cursorGroupRight`](https://codemirror.net/6/docs/ref/#commands.cursorGroupRight) ([`selectGroupRight`](https://codemirror.net/6/docs/ref/#commands.selectGroupRight) with Shift)
    - Cmd-ArrowLeft (on macOS): [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)
    - Cmd-ArrowRight (on macOS): [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)
    - ArrowUp: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)
    - ArrowDown: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)
    - Cmd-ArrowUp (on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)
    - Cmd-ArrowDown (on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)
    - Ctrl-ArrowUp (on macOS): [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)
    - Ctrl-ArrowDown (on macOS): [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)
    - PageUp: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)
    - PageDown: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)
    - Home: [`cursorLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryBackward) ([`selectLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryBackward) with Shift)
    - End: [`cursorLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryForward) ([`selectLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryForward) with Shift)
    - Ctrl-Home (Cmd-Home on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)
    - Ctrl-End (Cmd-Home on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)
    - Enter: [`insertNewlineAndIndent`](https://codemirror.net/6/docs/ref/#commands.insertNewlineAndIndent)
    - Ctrl-a (Cmd-a on macOS): [`selectAll`](https://codemirror.net/6/docs/ref/#commands.selectAll)
    - Backspace: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)
    - Delete: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)
    - Ctrl-Backspace (Alt-Backspace on macOS): [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)
    - Ctrl-Delete (Alt-Delete on macOS): [`deleteGroupForward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupForward)
    - Cmd-Backspace (macOS): [`deleteToLineStart`](https://codemirror.net/6/docs/ref/#commands.deleteToLineStart).
    - Cmd-Delete (macOS): [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd).
   */
   const standardKeymap = /*@__PURE__*/[
       { key: "ArrowLeft", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
       { key: "Mod-ArrowLeft", mac: "Alt-ArrowLeft", run: cursorGroupLeft, shift: selectGroupLeft, preventDefault: true },
       { mac: "Cmd-ArrowLeft", run: cursorLineBoundaryLeft, shift: selectLineBoundaryLeft, preventDefault: true },
       { key: "ArrowRight", run: cursorCharRight, shift: selectCharRight, preventDefault: true },
       { key: "Mod-ArrowRight", mac: "Alt-ArrowRight", run: cursorGroupRight, shift: selectGroupRight, preventDefault: true },
       { mac: "Cmd-ArrowRight", run: cursorLineBoundaryRight, shift: selectLineBoundaryRight, preventDefault: true },
       { key: "ArrowUp", run: cursorLineUp, shift: selectLineUp, preventDefault: true },
       { mac: "Cmd-ArrowUp", run: cursorDocStart, shift: selectDocStart },
       { mac: "Ctrl-ArrowUp", run: cursorPageUp, shift: selectPageUp },
       { key: "ArrowDown", run: cursorLineDown, shift: selectLineDown, preventDefault: true },
       { mac: "Cmd-ArrowDown", run: cursorDocEnd, shift: selectDocEnd },
       { mac: "Ctrl-ArrowDown", run: cursorPageDown, shift: selectPageDown },
       { key: "PageUp", run: cursorPageUp, shift: selectPageUp },
       { key: "PageDown", run: cursorPageDown, shift: selectPageDown },
       { key: "Home", run: cursorLineBoundaryBackward, shift: selectLineBoundaryBackward, preventDefault: true },
       { key: "Mod-Home", run: cursorDocStart, shift: selectDocStart },
       { key: "End", run: cursorLineBoundaryForward, shift: selectLineBoundaryForward, preventDefault: true },
       { key: "Mod-End", run: cursorDocEnd, shift: selectDocEnd },
       { key: "Enter", run: insertNewlineAndIndent },
       { key: "Mod-a", run: selectAll },
       { key: "Backspace", run: deleteCharBackward, shift: deleteCharBackward },
       { key: "Delete", run: deleteCharForward },
       { key: "Mod-Backspace", mac: "Alt-Backspace", run: deleteGroupBackward },
       { key: "Mod-Delete", mac: "Alt-Delete", run: deleteGroupForward },
       { mac: "Mod-Backspace", run: deleteToLineStart },
       { mac: "Mod-Delete", run: deleteToLineEnd }
   ].concat(/*@__PURE__*/emacsStyleKeymap.map(b => ({ mac: b.key, run: b.run, shift: b.shift })));
   /**
   The default keymap. Includes all bindings from
   [`standardKeymap`](https://codemirror.net/6/docs/ref/#commands.standardKeymap) plus the following:

   - Alt-ArrowLeft (Ctrl-ArrowLeft on macOS): [`cursorSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxLeft) ([`selectSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxLeft) with Shift)
   - Alt-ArrowRight (Ctrl-ArrowRight on macOS): [`cursorSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxRight) ([`selectSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxRight) with Shift)
   - Alt-ArrowUp: [`moveLineUp`](https://codemirror.net/6/docs/ref/#commands.moveLineUp)
   - Alt-ArrowDown: [`moveLineDown`](https://codemirror.net/6/docs/ref/#commands.moveLineDown)
   - Shift-Alt-ArrowUp: [`copyLineUp`](https://codemirror.net/6/docs/ref/#commands.copyLineUp)
   - Shift-Alt-ArrowDown: [`copyLineDown`](https://codemirror.net/6/docs/ref/#commands.copyLineDown)
   - Escape: [`simplifySelection`](https://codemirror.net/6/docs/ref/#commands.simplifySelection)
   - Ctrl-Enter (Cmd-Enter on macOS): [`insertBlankLine`](https://codemirror.net/6/docs/ref/#commands.insertBlankLine)
   - Alt-l (Ctrl-l on macOS): [`selectLine`](https://codemirror.net/6/docs/ref/#commands.selectLine)
   - Ctrl-i (Cmd-i on macOS): [`selectParentSyntax`](https://codemirror.net/6/docs/ref/#commands.selectParentSyntax)
   - Ctrl-[ (Cmd-[ on macOS): [`indentLess`](https://codemirror.net/6/docs/ref/#commands.indentLess)
   - Ctrl-] (Cmd-] on macOS): [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore)
   - Ctrl-Alt-\\ (Cmd-Alt-\\ on macOS): [`indentSelection`](https://codemirror.net/6/docs/ref/#commands.indentSelection)
   - Shift-Ctrl-k (Shift-Cmd-k on macOS): [`deleteLine`](https://codemirror.net/6/docs/ref/#commands.deleteLine)
   - Shift-Ctrl-\\ (Shift-Cmd-\\ on macOS): [`cursorMatchingBracket`](https://codemirror.net/6/docs/ref/#commands.cursorMatchingBracket)
   - Ctrl-/ (Cmd-/ on macOS): [`toggleComment`](https://codemirror.net/6/docs/ref/#commands.toggleComment).
   - Shift-Alt-a: [`toggleBlockComment`](https://codemirror.net/6/docs/ref/#commands.toggleBlockComment).
   */
   const defaultKeymap = /*@__PURE__*/[
       { key: "Alt-ArrowLeft", mac: "Ctrl-ArrowLeft", run: cursorSyntaxLeft, shift: selectSyntaxLeft },
       { key: "Alt-ArrowRight", mac: "Ctrl-ArrowRight", run: cursorSyntaxRight, shift: selectSyntaxRight },
       { key: "Alt-ArrowUp", run: moveLineUp },
       { key: "Shift-Alt-ArrowUp", run: copyLineUp },
       { key: "Alt-ArrowDown", run: moveLineDown },
       { key: "Shift-Alt-ArrowDown", run: copyLineDown },
       { key: "Escape", run: simplifySelection },
       { key: "Mod-Enter", run: insertBlankLine },
       { key: "Alt-l", mac: "Ctrl-l", run: selectLine },
       { key: "Mod-i", run: selectParentSyntax, preventDefault: true },
       { key: "Mod-[", run: indentLess },
       { key: "Mod-]", run: indentMore },
       { key: "Mod-Alt-\\", run: indentSelection },
       { key: "Shift-Mod-k", run: deleteLine },
       { key: "Shift-Mod-\\", run: cursorMatchingBracket },
       { key: "Mod-/", run: toggleComment },
       { key: "Alt-A", run: toggleBlockComment }
   ].concat(standardKeymap);
   /**
   A binding that binds Tab to [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore) and
   Shift-Tab to [`indentLess`](https://codemirror.net/6/docs/ref/#commands.indentLess).
   Please see the [Tab example](../../examples/tab/) before using
   this.
   */
   const indentWithTab = { key: "Tab", run: indentMore, shift: indentLess };

   var commands = /*#__PURE__*/Object.freeze({
      __proto__: null,
      blockComment: blockComment,
      blockUncomment: blockUncomment,
      copyLineDown: copyLineDown,
      copyLineUp: copyLineUp,
      cursorCharBackward: cursorCharBackward,
      cursorCharForward: cursorCharForward,
      cursorCharLeft: cursorCharLeft,
      cursorCharRight: cursorCharRight,
      cursorDocEnd: cursorDocEnd,
      cursorDocStart: cursorDocStart,
      cursorGroupBackward: cursorGroupBackward,
      cursorGroupForward: cursorGroupForward,
      cursorGroupLeft: cursorGroupLeft,
      cursorGroupRight: cursorGroupRight,
      cursorLineBoundaryBackward: cursorLineBoundaryBackward,
      cursorLineBoundaryForward: cursorLineBoundaryForward,
      cursorLineBoundaryLeft: cursorLineBoundaryLeft,
      cursorLineBoundaryRight: cursorLineBoundaryRight,
      cursorLineDown: cursorLineDown,
      cursorLineEnd: cursorLineEnd,
      cursorLineStart: cursorLineStart,
      cursorLineUp: cursorLineUp,
      cursorMatchingBracket: cursorMatchingBracket,
      cursorPageDown: cursorPageDown,
      cursorPageUp: cursorPageUp,
      cursorSubwordBackward: cursorSubwordBackward,
      cursorSubwordForward: cursorSubwordForward,
      cursorSyntaxLeft: cursorSyntaxLeft,
      cursorSyntaxRight: cursorSyntaxRight,
      defaultKeymap: defaultKeymap,
      deleteCharBackward: deleteCharBackward,
      deleteCharForward: deleteCharForward,
      deleteGroupBackward: deleteGroupBackward,
      deleteGroupForward: deleteGroupForward,
      deleteLine: deleteLine,
      deleteToLineEnd: deleteToLineEnd,
      deleteToLineStart: deleteToLineStart,
      deleteTrailingWhitespace: deleteTrailingWhitespace,
      emacsStyleKeymap: emacsStyleKeymap,
      history: history,
      historyField: historyField,
      historyKeymap: historyKeymap,
      indentLess: indentLess,
      indentMore: indentMore,
      indentSelection: indentSelection,
      indentWithTab: indentWithTab,
      insertBlankLine: insertBlankLine,
      insertNewline: insertNewline,
      insertNewlineAndIndent: insertNewlineAndIndent,
      insertTab: insertTab,
      invertedEffects: invertedEffects,
      isolateHistory: isolateHistory,
      lineComment: lineComment,
      lineUncomment: lineUncomment,
      moveLineDown: moveLineDown,
      moveLineUp: moveLineUp,
      redo: redo,
      redoDepth: redoDepth,
      redoSelection: redoSelection,
      selectAll: selectAll,
      selectCharBackward: selectCharBackward,
      selectCharForward: selectCharForward,
      selectCharLeft: selectCharLeft,
      selectCharRight: selectCharRight,
      selectDocEnd: selectDocEnd,
      selectDocStart: selectDocStart,
      selectGroupBackward: selectGroupBackward,
      selectGroupForward: selectGroupForward,
      selectGroupLeft: selectGroupLeft,
      selectGroupRight: selectGroupRight,
      selectLine: selectLine,
      selectLineBoundaryBackward: selectLineBoundaryBackward,
      selectLineBoundaryForward: selectLineBoundaryForward,
      selectLineBoundaryLeft: selectLineBoundaryLeft,
      selectLineBoundaryRight: selectLineBoundaryRight,
      selectLineDown: selectLineDown,
      selectLineEnd: selectLineEnd,
      selectLineStart: selectLineStart,
      selectLineUp: selectLineUp,
      selectMatchingBracket: selectMatchingBracket,
      selectPageDown: selectPageDown,
      selectPageUp: selectPageUp,
      selectParentSyntax: selectParentSyntax,
      selectSubwordBackward: selectSubwordBackward,
      selectSubwordForward: selectSubwordForward,
      selectSyntaxLeft: selectSyntaxLeft,
      selectSyntaxRight: selectSyntaxRight,
      simplifySelection: simplifySelection,
      splitLine: splitLine,
      standardKeymap: standardKeymap,
      toggleBlockComment: toggleBlockComment,
      toggleBlockCommentByLine: toggleBlockCommentByLine,
      toggleComment: toggleComment,
      toggleLineComment: toggleLineComment,
      transposeChars: transposeChars,
      undo: undo,
      undoDepth: undoDepth,
      undoSelection: undoSelection
   });

   /**
   An instance of this is passed to completion source functions.
   */
   class CompletionContext {
       /**
       Create a new completion context. (Mostly useful for testing
       completion sources—in the editor, the extension will create
       these for you.)
       */
       constructor(
       /**
       The editor state that the completion happens in.
       */
       state, 
       /**
       The position at which the completion is happening.
       */
       pos, 
       /**
       Indicates whether completion was activated explicitly, or
       implicitly by typing. The usual way to respond to this is to
       only return completions when either there is part of a
       completable entity before the cursor, or `explicit` is true.
       */
       explicit) {
           this.state = state;
           this.pos = pos;
           this.explicit = explicit;
           /**
           @internal
           */
           this.abortListeners = [];
       }
       /**
       Get the extent, content, and (if there is a token) type of the
       token before `this.pos`.
       */
       tokenBefore(types) {
           let token = syntaxTree(this.state).resolveInner(this.pos, -1);
           while (token && types.indexOf(token.name) < 0)
               token = token.parent;
           return token ? { from: token.from, to: this.pos,
               text: this.state.sliceDoc(token.from, this.pos),
               type: token.type } : null;
       }
       /**
       Get the match of the given expression directly before the
       cursor.
       */
       matchBefore(expr) {
           let line = this.state.doc.lineAt(this.pos);
           let start = Math.max(line.from, this.pos - 250);
           let str = line.text.slice(start - line.from, this.pos - line.from);
           let found = str.search(ensureAnchor(expr, false));
           return found < 0 ? null : { from: start + found, to: this.pos, text: str.slice(found) };
       }
       /**
       Yields true when the query has been aborted. Can be useful in
       asynchronous queries to avoid doing work that will be ignored.
       */
       get aborted() { return this.abortListeners == null; }
       /**
       Allows you to register abort handlers, which will be called when
       the query is
       [aborted](https://codemirror.net/6/docs/ref/#autocomplete.CompletionContext.aborted).
       */
       addEventListener(type, listener) {
           if (type == "abort" && this.abortListeners)
               this.abortListeners.push(listener);
       }
   }
   function toSet(chars) {
       let flat = Object.keys(chars).join("");
       let words = /\w/.test(flat);
       if (words)
           flat = flat.replace(/\w/g, "");
       return `[${words ? "\\w" : ""}${flat.replace(/[^\w\s]/g, "\\$&")}]`;
   }
   function prefixMatch(options) {
       let first = Object.create(null), rest = Object.create(null);
       for (let { label } of options) {
           first[label[0]] = true;
           for (let i = 1; i < label.length; i++)
               rest[label[i]] = true;
       }
       let source = toSet(first) + toSet(rest) + "*$";
       return [new RegExp("^" + source), new RegExp(source)];
   }
   /**
   Given a a fixed array of options, return an autocompleter that
   completes them.
   */
   function completeFromList(list) {
       let options = list.map(o => typeof o == "string" ? { label: o } : o);
       let [validFor, match] = options.every(o => /^\w+$/.test(o.label)) ? [/\w*$/, /\w+$/] : prefixMatch(options);
       return (context) => {
           let token = context.matchBefore(match);
           return token || context.explicit ? { from: token ? token.from : context.pos, options, validFor } : null;
       };
   }
   /**
   Wrap the given completion source so that it will not fire when the
   cursor is in a syntax node with one of the given names.
   */
   function ifNotIn(nodes, source) {
       return (context) => {
           for (let pos = syntaxTree(context.state).resolveInner(context.pos, -1); pos; pos = pos.parent) {
               if (nodes.indexOf(pos.name) > -1)
                   return null;
               if (pos.type.isTop)
                   break;
           }
           return source(context);
       };
   }
   class Option {
       constructor(completion, source, match, score) {
           this.completion = completion;
           this.source = source;
           this.match = match;
           this.score = score;
       }
   }
   function cur(state) { return state.selection.main.from; }
   // Make sure the given regexp has a $ at its end and, if `start` is
   // true, a ^ at its start.
   function ensureAnchor(expr, start) {
       var _a;
       let { source } = expr;
       let addStart = start && source[0] != "^", addEnd = source[source.length - 1] != "$";
       if (!addStart && !addEnd)
           return expr;
       return new RegExp(`${addStart ? "^" : ""}(?:${source})${addEnd ? "$" : ""}`, (_a = expr.flags) !== null && _a !== void 0 ? _a : (expr.ignoreCase ? "i" : ""));
   }
   /**
   This annotation is added to transactions that are produced by
   picking a completion.
   */
   const pickedCompletion = /*@__PURE__*/Annotation.define();
   /**
   Helper function that returns a transaction spec which inserts a
   completion's text in the main selection range, and any other
   selection range that has the same text in front of it.
   */
   function insertCompletionText(state, text, from, to) {
       let { main } = state.selection, fromOff = from - main.from, toOff = to - main.from;
       return Object.assign(Object.assign({}, state.changeByRange(range => {
           if (range != main && from != to &&
               state.sliceDoc(range.from + fromOff, range.from + toOff) != state.sliceDoc(from, to))
               return { range };
           return {
               changes: { from: range.from + fromOff, to: to == main.from ? range.to : range.from + toOff, insert: text },
               range: EditorSelection.cursor(range.from + fromOff + text.length)
           };
       })), { userEvent: "input.complete" });
   }
   const SourceCache = /*@__PURE__*/new WeakMap();
   function asSource(source) {
       if (!Array.isArray(source))
           return source;
       let known = SourceCache.get(source);
       if (!known)
           SourceCache.set(source, known = completeFromList(source));
       return known;
   }
   const startCompletionEffect = /*@__PURE__*/StateEffect.define();
   const closeCompletionEffect = /*@__PURE__*/StateEffect.define();

   // A pattern matcher for fuzzy completion matching. Create an instance
   // once for a pattern, and then use that to match any number of
   // completions.
   class FuzzyMatcher {
       constructor(pattern) {
           this.pattern = pattern;
           this.chars = [];
           this.folded = [];
           // Buffers reused by calls to `match` to track matched character
           // positions.
           this.any = [];
           this.precise = [];
           this.byWord = [];
           for (let p = 0; p < pattern.length;) {
               let char = codePointAt(pattern, p), size = codePointSize(char);
               this.chars.push(char);
               let part = pattern.slice(p, p + size), upper = part.toUpperCase();
               this.folded.push(codePointAt(upper == part ? part.toLowerCase() : upper, 0));
               p += size;
           }
           this.astral = pattern.length != this.chars.length;
       }
       // Matches a given word (completion) against the pattern (input).
       // Will return null for no match, and otherwise an array that starts
       // with the match score, followed by any number of `from, to` pairs
       // indicating the matched parts of `word`.
       //
       // The score is a number that is more negative the worse the match
       // is. See `Penalty` above.
       match(word) {
           if (this.pattern.length == 0)
               return [-100 /* Penalty.NotFull */];
           if (word.length < this.pattern.length)
               return null;
           let { chars, folded, any, precise, byWord } = this;
           // For single-character queries, only match when they occur right
           // at the start
           if (chars.length == 1) {
               let first = codePointAt(word, 0), firstSize = codePointSize(first);
               let score = firstSize == word.length ? 0 : -100 /* Penalty.NotFull */;
               if (first == chars[0]) ;
               else if (first == folded[0])
                   score += -200 /* Penalty.CaseFold */;
               else
                   return null;
               return [score, 0, firstSize];
           }
           let direct = word.indexOf(this.pattern);
           if (direct == 0)
               return [word.length == this.pattern.length ? 0 : -100 /* Penalty.NotFull */, 0, this.pattern.length];
           let len = chars.length, anyTo = 0;
           if (direct < 0) {
               for (let i = 0, e = Math.min(word.length, 200); i < e && anyTo < len;) {
                   let next = codePointAt(word, i);
                   if (next == chars[anyTo] || next == folded[anyTo])
                       any[anyTo++] = i;
                   i += codePointSize(next);
               }
               // No match, exit immediately
               if (anyTo < len)
                   return null;
           }
           // This tracks the extent of the precise (non-folded, not
           // necessarily adjacent) match
           let preciseTo = 0;
           // Tracks whether there is a match that hits only characters that
           // appear to be starting words. `byWordFolded` is set to true when
           // a case folded character is encountered in such a match
           let byWordTo = 0, byWordFolded = false;
           // If we've found a partial adjacent match, these track its state
           let adjacentTo = 0, adjacentStart = -1, adjacentEnd = -1;
           let hasLower = /[a-z]/.test(word), wordAdjacent = true;
           // Go over the option's text, scanning for the various kinds of matches
           for (let i = 0, e = Math.min(word.length, 200), prevType = 0 /* Tp.NonWord */; i < e && byWordTo < len;) {
               let next = codePointAt(word, i);
               if (direct < 0) {
                   if (preciseTo < len && next == chars[preciseTo])
                       precise[preciseTo++] = i;
                   if (adjacentTo < len) {
                       if (next == chars[adjacentTo] || next == folded[adjacentTo]) {
                           if (adjacentTo == 0)
                               adjacentStart = i;
                           adjacentEnd = i + 1;
                           adjacentTo++;
                       }
                       else {
                           adjacentTo = 0;
                       }
                   }
               }
               let ch, type = next < 0xff
                   ? (next >= 48 && next <= 57 || next >= 97 && next <= 122 ? 2 /* Tp.Lower */ : next >= 65 && next <= 90 ? 1 /* Tp.Upper */ : 0 /* Tp.NonWord */)
                   : ((ch = fromCodePoint$1(next)) != ch.toLowerCase() ? 1 /* Tp.Upper */ : ch != ch.toUpperCase() ? 2 /* Tp.Lower */ : 0 /* Tp.NonWord */);
               if (!i || type == 1 /* Tp.Upper */ && hasLower || prevType == 0 /* Tp.NonWord */ && type != 0 /* Tp.NonWord */) {
                   if (chars[byWordTo] == next || (folded[byWordTo] == next && (byWordFolded = true)))
                       byWord[byWordTo++] = i;
                   else if (byWord.length)
                       wordAdjacent = false;
               }
               prevType = type;
               i += codePointSize(next);
           }
           if (byWordTo == len && byWord[0] == 0 && wordAdjacent)
               return this.result(-100 /* Penalty.ByWord */ + (byWordFolded ? -200 /* Penalty.CaseFold */ : 0), byWord, word);
           if (adjacentTo == len && adjacentStart == 0)
               return [-200 /* Penalty.CaseFold */ - word.length + (adjacentEnd == word.length ? 0 : -100 /* Penalty.NotFull */), 0, adjacentEnd];
           if (direct > -1)
               return [-700 /* Penalty.NotStart */ - word.length, direct, direct + this.pattern.length];
           if (adjacentTo == len)
               return [-200 /* Penalty.CaseFold */ + -700 /* Penalty.NotStart */ - word.length, adjacentStart, adjacentEnd];
           if (byWordTo == len)
               return this.result(-100 /* Penalty.ByWord */ + (byWordFolded ? -200 /* Penalty.CaseFold */ : 0) + -700 /* Penalty.NotStart */ +
                   (wordAdjacent ? 0 : -1100 /* Penalty.Gap */), byWord, word);
           return chars.length == 2 ? null : this.result((any[0] ? -700 /* Penalty.NotStart */ : 0) + -200 /* Penalty.CaseFold */ + -1100 /* Penalty.Gap */, any, word);
       }
       result(score, positions, word) {
           let result = [score - word.length], i = 1;
           for (let pos of positions) {
               let to = pos + (this.astral ? codePointSize(codePointAt(word, pos)) : 1);
               if (i > 1 && result[i - 1] == pos)
                   result[i - 1] = to;
               else {
                   result[i++] = pos;
                   result[i++] = to;
               }
           }
           return result;
       }
   }

   const completionConfig = /*@__PURE__*/Facet.define({
       combine(configs) {
           return combineConfig(configs, {
               activateOnTyping: true,
               selectOnOpen: true,
               override: null,
               closeOnBlur: true,
               maxRenderedOptions: 100,
               defaultKeymap: true,
               tooltipClass: () => "",
               optionClass: () => "",
               aboveCursor: false,
               icons: true,
               addToOptions: [],
               positionInfo: defaultPositionInfo,
               compareCompletions: (a, b) => a.label.localeCompare(b.label),
               interactionDelay: 75
           }, {
               defaultKeymap: (a, b) => a && b,
               closeOnBlur: (a, b) => a && b,
               icons: (a, b) => a && b,
               tooltipClass: (a, b) => c => joinClass(a(c), b(c)),
               optionClass: (a, b) => c => joinClass(a(c), b(c)),
               addToOptions: (a, b) => a.concat(b)
           });
       }
   });
   function joinClass(a, b) {
       return a ? b ? a + " " + b : a : b;
   }
   function defaultPositionInfo(view, list, option, info, space) {
       let rtl = view.textDirection == Direction.RTL, left = rtl, narrow = false;
       let side = "top", offset, maxWidth;
       let spaceLeft = list.left - space.left, spaceRight = space.right - list.right;
       let infoWidth = info.right - info.left, infoHeight = info.bottom - info.top;
       if (left && spaceLeft < Math.min(infoWidth, spaceRight))
           left = false;
       else if (!left && spaceRight < Math.min(infoWidth, spaceLeft))
           left = true;
       if (infoWidth <= (left ? spaceLeft : spaceRight)) {
           offset = Math.max(space.top, Math.min(option.top, space.bottom - infoHeight)) - list.top;
           maxWidth = Math.min(400 /* Info.Width */, left ? spaceLeft : spaceRight);
       }
       else {
           narrow = true;
           maxWidth = Math.min(400 /* Info.Width */, (rtl ? list.right : space.right - list.left) - 30 /* Info.Margin */);
           let spaceBelow = space.bottom - list.bottom;
           if (spaceBelow >= infoHeight || spaceBelow > list.top) { // Below the completion
               offset = option.bottom - list.top;
           }
           else { // Above it
               side = "bottom";
               offset = list.bottom - option.top;
           }
       }
       return {
           style: `${side}: ${offset}px; max-width: ${maxWidth}px`,
           class: "cm-completionInfo-" + (narrow ? (rtl ? "left-narrow" : "right-narrow") : left ? "left" : "right")
       };
   }

   /**
   Returns a command that moves the completion selection forward or
   backward by the given amount.
   */
   function moveCompletionSelection(forward, by = "option") {
       return (view) => {
           let cState = view.state.field(completionState, false);
           if (!cState || !cState.open || cState.open.disabled ||
               Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay)
               return false;
           let step = 1, tooltip;
           if (by == "page" && (tooltip = getTooltip(view, cState.open.tooltip)))
               step = Math.max(2, Math.floor(tooltip.dom.offsetHeight /
                   tooltip.dom.querySelector("li").offsetHeight) - 1);
           let { length } = cState.open.options;
           let selected = cState.open.selected > -1 ? cState.open.selected + step * (forward ? 1 : -1) : forward ? 0 : length - 1;
           if (selected < 0)
               selected = by == "page" ? 0 : length - 1;
           else if (selected >= length)
               selected = by == "page" ? length - 1 : 0;
           view.dispatch({ effects: setSelectedEffect.of(selected) });
           return true;
       };
   }
   /**
   Accept the current completion.
   */
   const acceptCompletion = (view) => {
       let cState = view.state.field(completionState, false);
       if (view.state.readOnly || !cState || !cState.open || cState.open.selected < 0 ||
           Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay)
           return false;
       if (!cState.open.disabled)
           return applyCompletion(view, cState.open.options[cState.open.selected]);
       return true;
   };
   /**
   Explicitly start autocompletion.
   */
   const startCompletion = (view) => {
       let cState = view.state.field(completionState, false);
       if (!cState)
           return false;
       view.dispatch({ effects: startCompletionEffect.of(true) });
       return true;
   };
   /**
   Close the currently active completion.
   */
   const closeCompletion = (view) => {
       let cState = view.state.field(completionState, false);
       if (!cState || !cState.active.some(a => a.state != 0 /* State.Inactive */))
           return false;
       view.dispatch({ effects: closeCompletionEffect.of(null) });
       return true;
   };
   class RunningQuery {
       constructor(active, context) {
           this.active = active;
           this.context = context;
           this.time = Date.now();
           this.updates = [];
           // Note that 'undefined' means 'not done yet', whereas 'null' means
           // 'query returned null'.
           this.done = undefined;
       }
   }
   const DebounceTime = 50, MaxUpdateCount = 50, MinAbortTime = 1000;
   const completionPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
       constructor(view) {
           this.view = view;
           this.debounceUpdate = -1;
           this.running = [];
           this.debounceAccept = -1;
           this.composing = 0 /* CompositionState.None */;
           for (let active of view.state.field(completionState).active)
               if (active.state == 1 /* State.Pending */)
                   this.startQuery(active);
       }
       update(update) {
           let cState = update.state.field(completionState);
           if (!update.selectionSet && !update.docChanged && update.startState.field(completionState) == cState)
               return;
           let doesReset = update.transactions.some(tr => {
               return (tr.selection || tr.docChanged) && !getUserEvent(tr);
           });
           for (let i = 0; i < this.running.length; i++) {
               let query = this.running[i];
               if (doesReset ||
                   query.updates.length + update.transactions.length > MaxUpdateCount && Date.now() - query.time > MinAbortTime) {
                   for (let handler of query.context.abortListeners) {
                       try {
                           handler();
                       }
                       catch (e) {
                           logException(this.view.state, e);
                       }
                   }
                   query.context.abortListeners = null;
                   this.running.splice(i--, 1);
               }
               else {
                   query.updates.push(...update.transactions);
               }
           }
           if (this.debounceUpdate > -1)
               clearTimeout(this.debounceUpdate);
           this.debounceUpdate = cState.active.some(a => a.state == 1 /* State.Pending */ && !this.running.some(q => q.active.source == a.source))
               ? setTimeout(() => this.startUpdate(), DebounceTime) : -1;
           if (this.composing != 0 /* CompositionState.None */)
               for (let tr of update.transactions) {
                   if (getUserEvent(tr) == "input")
                       this.composing = 2 /* CompositionState.Changed */;
                   else if (this.composing == 2 /* CompositionState.Changed */ && tr.selection)
                       this.composing = 3 /* CompositionState.ChangedAndMoved */;
               }
       }
       startUpdate() {
           this.debounceUpdate = -1;
           let { state } = this.view, cState = state.field(completionState);
           for (let active of cState.active) {
               if (active.state == 1 /* State.Pending */ && !this.running.some(r => r.active.source == active.source))
                   this.startQuery(active);
           }
       }
       startQuery(active) {
           let { state } = this.view, pos = cur(state);
           let context = new CompletionContext(state, pos, active.explicitPos == pos);
           let pending = new RunningQuery(active, context);
           this.running.push(pending);
           Promise.resolve(active.source(context)).then(result => {
               if (!pending.context.aborted) {
                   pending.done = result || null;
                   this.scheduleAccept();
               }
           }, err => {
               this.view.dispatch({ effects: closeCompletionEffect.of(null) });
               logException(this.view.state, err);
           });
       }
       scheduleAccept() {
           if (this.running.every(q => q.done !== undefined))
               this.accept();
           else if (this.debounceAccept < 0)
               this.debounceAccept = setTimeout(() => this.accept(), DebounceTime);
       }
       // For each finished query in this.running, try to create a result
       // or, if appropriate, restart the query.
       accept() {
           var _a;
           if (this.debounceAccept > -1)
               clearTimeout(this.debounceAccept);
           this.debounceAccept = -1;
           let updated = [];
           let conf = this.view.state.facet(completionConfig);
           for (let i = 0; i < this.running.length; i++) {
               let query = this.running[i];
               if (query.done === undefined)
                   continue;
               this.running.splice(i--, 1);
               if (query.done) {
                   let active = new ActiveResult(query.active.source, query.active.explicitPos, query.done, query.done.from, (_a = query.done.to) !== null && _a !== void 0 ? _a : cur(query.updates.length ? query.updates[0].startState : this.view.state));
                   // Replay the transactions that happened since the start of
                   // the request and see if that preserves the result
                   for (let tr of query.updates)
                       active = active.update(tr, conf);
                   if (active.hasResult()) {
                       updated.push(active);
                       continue;
                   }
               }
               let current = this.view.state.field(completionState).active.find(a => a.source == query.active.source);
               if (current && current.state == 1 /* State.Pending */) {
                   if (query.done == null) {
                       // Explicitly failed. Should clear the pending status if it
                       // hasn't been re-set in the meantime.
                       let active = new ActiveSource(query.active.source, 0 /* State.Inactive */);
                       for (let tr of query.updates)
                           active = active.update(tr, conf);
                       if (active.state != 1 /* State.Pending */)
                           updated.push(active);
                   }
                   else {
                       // Cleared by subsequent transactions. Restart.
                       this.startQuery(current);
                   }
               }
           }
           if (updated.length)
               this.view.dispatch({ effects: setActiveEffect.of(updated) });
       }
   }, {
       eventHandlers: {
           blur(event) {
               let state = this.view.state.field(completionState, false);
               if (state && state.tooltip && this.view.state.facet(completionConfig).closeOnBlur) {
                   let dialog = state.open && getTooltip(this.view, state.open.tooltip);
                   if (!dialog || !dialog.dom.contains(event.relatedTarget))
                       this.view.dispatch({ effects: closeCompletionEffect.of(null) });
               }
           },
           compositionstart() {
               this.composing = 1 /* CompositionState.Started */;
           },
           compositionend() {
               if (this.composing == 3 /* CompositionState.ChangedAndMoved */) {
                   // Safari fires compositionend events synchronously, possibly
                   // from inside an update, so dispatch asynchronously to avoid reentrancy
                   setTimeout(() => this.view.dispatch({ effects: startCompletionEffect.of(false) }), 20);
               }
               this.composing = 0 /* CompositionState.None */;
           }
       }
   });
   function applyCompletion(view, option) {
       const apply = option.completion.apply || option.completion.label;
       let result = view.state.field(completionState).active.find(a => a.source == option.source);
       if (!(result instanceof ActiveResult))
           return false;
       if (typeof apply == "string")
           view.dispatch(Object.assign(Object.assign({}, insertCompletionText(view.state, apply, result.from, result.to)), { annotations: pickedCompletion.of(option.completion) }));
       else
           apply(view, option.completion, result.from, result.to);
       return true;
   }

   function optionContent(config) {
       let content = config.addToOptions.slice();
       if (config.icons)
           content.push({
               render(completion) {
                   let icon = document.createElement("div");
                   icon.classList.add("cm-completionIcon");
                   if (completion.type)
                       icon.classList.add(...completion.type.split(/\s+/g).map(cls => "cm-completionIcon-" + cls));
                   icon.setAttribute("aria-hidden", "true");
                   return icon;
               },
               position: 20
           });
       content.push({
           render(completion, _s, match) {
               let labelElt = document.createElement("span");
               labelElt.className = "cm-completionLabel";
               let { label } = completion, off = 0;
               for (let j = 1; j < match.length;) {
                   let from = match[j++], to = match[j++];
                   if (from > off)
                       labelElt.appendChild(document.createTextNode(label.slice(off, from)));
                   let span = labelElt.appendChild(document.createElement("span"));
                   span.appendChild(document.createTextNode(label.slice(from, to)));
                   span.className = "cm-completionMatchedText";
                   off = to;
               }
               if (off < label.length)
                   labelElt.appendChild(document.createTextNode(label.slice(off)));
               return labelElt;
           },
           position: 50
       }, {
           render(completion) {
               if (!completion.detail)
                   return null;
               let detailElt = document.createElement("span");
               detailElt.className = "cm-completionDetail";
               detailElt.textContent = completion.detail;
               return detailElt;
           },
           position: 80
       });
       return content.sort((a, b) => a.position - b.position).map(a => a.render);
   }
   function rangeAroundSelected(total, selected, max) {
       if (total <= max)
           return { from: 0, to: total };
       if (selected < 0)
           selected = 0;
       if (selected <= (total >> 1)) {
           let off = Math.floor(selected / max);
           return { from: off * max, to: (off + 1) * max };
       }
       let off = Math.floor((total - selected) / max);
       return { from: total - (off + 1) * max, to: total - off * max };
   }
   class CompletionTooltip {
       constructor(view, stateField) {
           this.view = view;
           this.stateField = stateField;
           this.info = null;
           this.placeInfoReq = {
               read: () => this.measureInfo(),
               write: (pos) => this.placeInfo(pos),
               key: this
           };
           this.space = null;
           this.currentClass = "";
           let cState = view.state.field(stateField);
           let { options, selected } = cState.open;
           let config = view.state.facet(completionConfig);
           this.optionContent = optionContent(config);
           this.optionClass = config.optionClass;
           this.tooltipClass = config.tooltipClass;
           this.range = rangeAroundSelected(options.length, selected, config.maxRenderedOptions);
           this.dom = document.createElement("div");
           this.dom.className = "cm-tooltip-autocomplete";
           this.updateTooltipClass(view.state);
           this.dom.addEventListener("mousedown", (e) => {
               for (let dom = e.target, match; dom && dom != this.dom; dom = dom.parentNode) {
                   if (dom.nodeName == "LI" && (match = /-(\d+)$/.exec(dom.id)) && +match[1] < options.length) {
                       applyCompletion(view, options[+match[1]]);
                       e.preventDefault();
                       return;
                   }
               }
           });
           this.dom.addEventListener("focusout", (e) => {
               let state = view.state.field(this.stateField, false);
               if (state && state.tooltip && view.state.facet(completionConfig).closeOnBlur &&
                   e.relatedTarget != view.contentDOM)
                   view.dispatch({ effects: closeCompletionEffect.of(null) });
           });
           this.list = this.dom.appendChild(this.createListBox(options, cState.id, this.range));
           this.list.addEventListener("scroll", () => {
               if (this.info)
                   this.view.requestMeasure(this.placeInfoReq);
           });
       }
       mount() { this.updateSel(); }
       update(update) {
           var _a, _b, _c;
           let cState = update.state.field(this.stateField);
           let prevState = update.startState.field(this.stateField);
           this.updateTooltipClass(update.state);
           if (cState != prevState) {
               this.updateSel();
               if (((_a = cState.open) === null || _a === void 0 ? void 0 : _a.disabled) != ((_b = prevState.open) === null || _b === void 0 ? void 0 : _b.disabled))
                   this.dom.classList.toggle("cm-tooltip-autocomplete-disabled", !!((_c = cState.open) === null || _c === void 0 ? void 0 : _c.disabled));
           }
       }
       updateTooltipClass(state) {
           let cls = this.tooltipClass(state);
           if (cls != this.currentClass) {
               for (let c of this.currentClass.split(" "))
                   if (c)
                       this.dom.classList.remove(c);
               for (let c of cls.split(" "))
                   if (c)
                       this.dom.classList.add(c);
               this.currentClass = cls;
           }
       }
       positioned(space) {
           this.space = space;
           if (this.info)
               this.view.requestMeasure(this.placeInfoReq);
       }
       updateSel() {
           let cState = this.view.state.field(this.stateField), open = cState.open;
           if (open.selected > -1 && open.selected < this.range.from || open.selected >= this.range.to) {
               this.range = rangeAroundSelected(open.options.length, open.selected, this.view.state.facet(completionConfig).maxRenderedOptions);
               this.list.remove();
               this.list = this.dom.appendChild(this.createListBox(open.options, cState.id, this.range));
               this.list.addEventListener("scroll", () => {
                   if (this.info)
                       this.view.requestMeasure(this.placeInfoReq);
               });
           }
           if (this.updateSelectedOption(open.selected)) {
               if (this.info) {
                   this.info.remove();
                   this.info = null;
               }
               let { completion } = open.options[open.selected];
               let { info } = completion;
               if (!info)
                   return;
               let infoResult = typeof info === 'string' ? document.createTextNode(info) : info(completion);
               if (!infoResult)
                   return;
               if ('then' in infoResult) {
                   infoResult.then(node => {
                       if (node && this.view.state.field(this.stateField, false) == cState)
                           this.addInfoPane(node);
                   }).catch(e => logException(this.view.state, e, "completion info"));
               }
               else {
                   this.addInfoPane(infoResult);
               }
           }
       }
       addInfoPane(content) {
           let dom = this.info = document.createElement("div");
           dom.className = "cm-tooltip cm-completionInfo";
           dom.appendChild(content);
           this.dom.appendChild(dom);
           this.view.requestMeasure(this.placeInfoReq);
       }
       updateSelectedOption(selected) {
           let set = null;
           for (let opt = this.list.firstChild, i = this.range.from; opt; opt = opt.nextSibling, i++) {
               if (opt.nodeName != "LI" || !opt.id) {
                   i--; // A section header
               }
               else if (i == selected) {
                   if (!opt.hasAttribute("aria-selected")) {
                       opt.setAttribute("aria-selected", "true");
                       set = opt;
                   }
               }
               else {
                   if (opt.hasAttribute("aria-selected"))
                       opt.removeAttribute("aria-selected");
               }
           }
           if (set)
               scrollIntoView(this.list, set);
           return set;
       }
       measureInfo() {
           let sel = this.dom.querySelector("[aria-selected]");
           if (!sel || !this.info)
               return null;
           let listRect = this.dom.getBoundingClientRect();
           let infoRect = this.info.getBoundingClientRect();
           let selRect = sel.getBoundingClientRect();
           let space = this.space;
           if (!space) {
               let win = this.dom.ownerDocument.defaultView || window;
               space = { left: 0, top: 0, right: win.innerWidth, bottom: win.innerHeight };
           }
           if (selRect.top > Math.min(space.bottom, listRect.bottom) - 10 ||
               selRect.bottom < Math.max(space.top, listRect.top) + 10)
               return null;
           return this.view.state.facet(completionConfig).positionInfo(this.view, listRect, selRect, infoRect, space);
       }
       placeInfo(pos) {
           if (this.info) {
               if (pos) {
                   if (pos.style)
                       this.info.style.cssText = pos.style;
                   this.info.className = "cm-tooltip cm-completionInfo " + (pos.class || "");
               }
               else {
                   this.info.style.cssText = "top: -1e6px";
               }
           }
       }
       createListBox(options, id, range) {
           const ul = document.createElement("ul");
           ul.id = id;
           ul.setAttribute("role", "listbox");
           ul.setAttribute("aria-expanded", "true");
           ul.setAttribute("aria-label", this.view.state.phrase("Completions"));
           let curSection = null;
           for (let i = range.from; i < range.to; i++) {
               let { completion, match } = options[i], { section } = completion;
               if (section) {
                   let name = typeof section == "string" ? section : section.name;
                   if (name != curSection && (i > range.from || range.from == 0)) {
                       curSection = name;
                       if (typeof section != "string" && section.header) {
                           ul.appendChild(section.header(section));
                       }
                       else {
                           let header = ul.appendChild(document.createElement("completion-section"));
                           header.textContent = name;
                       }
                   }
               }
               const li = ul.appendChild(document.createElement("li"));
               li.id = id + "-" + i;
               li.setAttribute("role", "option");
               let cls = this.optionClass(completion);
               if (cls)
                   li.className = cls;
               for (let source of this.optionContent) {
                   let node = source(completion, this.view.state, match);
                   if (node)
                       li.appendChild(node);
               }
           }
           if (range.from)
               ul.classList.add("cm-completionListIncompleteTop");
           if (range.to < options.length)
               ul.classList.add("cm-completionListIncompleteBottom");
           return ul;
       }
   }
   // We allocate a new function instance every time the completion
   // changes to force redrawing/repositioning of the tooltip
   function completionTooltip(stateField) {
       return (view) => new CompletionTooltip(view, stateField);
   }
   function scrollIntoView(container, element) {
       let parent = container.getBoundingClientRect();
       let self = element.getBoundingClientRect();
       if (self.top < parent.top)
           container.scrollTop -= parent.top - self.top;
       else if (self.bottom > parent.bottom)
           container.scrollTop += self.bottom - parent.bottom;
   }

   // Used to pick a preferred option when two options with the same
   // label occur in the result.
   function score(option) {
       return (option.boost || 0) * 100 + (option.apply ? 10 : 0) + (option.info ? 5 : 0) +
           (option.type ? 1 : 0);
   }
   function sortOptions(active, state) {
       let options = [];
       let sections = null;
       let addOption = (option) => {
           options.push(option);
           let { section } = option.completion;
           if (section) {
               if (!sections)
                   sections = [];
               let name = typeof section == "string" ? section : section.name;
               if (!sections.some(s => s.name == name))
                   sections.push(typeof section == "string" ? { name } : section);
           }
       };
       for (let a of active)
           if (a.hasResult()) {
               if (a.result.filter === false) {
                   let getMatch = a.result.getMatch;
                   for (let option of a.result.options) {
                       let match = [1e9 - options.length];
                       if (getMatch)
                           for (let n of getMatch(option))
                               match.push(n);
                       addOption(new Option(option, a.source, match, match[0]));
                   }
               }
               else {
                   let matcher = new FuzzyMatcher(state.sliceDoc(a.from, a.to)), match;
                   for (let option of a.result.options)
                       if (match = matcher.match(option.label)) {
                           addOption(new Option(option, a.source, match, match[0] + (option.boost || 0)));
                       }
               }
           }
       if (sections) {
           let sectionOrder = Object.create(null), pos = 0;
           let cmp = (a, b) => { var _a, _b; return ((_a = a.rank) !== null && _a !== void 0 ? _a : 1e9) - ((_b = b.rank) !== null && _b !== void 0 ? _b : 1e9) || (a.name < b.name ? -1 : 1); };
           for (let s of sections.sort(cmp)) {
               pos -= 1e5;
               sectionOrder[s.name] = pos;
           }
           for (let option of options) {
               let { section } = option.completion;
               if (section)
                   option.score += sectionOrder[typeof section == "string" ? section : section.name];
           }
       }
       let result = [], prev = null;
       let compare = state.facet(completionConfig).compareCompletions;
       for (let opt of options.sort((a, b) => (b.score - a.score) || compare(a.completion, b.completion))) {
           if (!prev || prev.label != opt.completion.label || prev.detail != opt.completion.detail ||
               (prev.type != null && opt.completion.type != null && prev.type != opt.completion.type) ||
               prev.apply != opt.completion.apply)
               result.push(opt);
           else if (score(opt.completion) > score(prev))
               result[result.length - 1] = opt;
           prev = opt.completion;
       }
       return result;
   }
   class CompletionDialog {
       constructor(options, attrs, tooltip, timestamp, selected, disabled) {
           this.options = options;
           this.attrs = attrs;
           this.tooltip = tooltip;
           this.timestamp = timestamp;
           this.selected = selected;
           this.disabled = disabled;
       }
       setSelected(selected, id) {
           return selected == this.selected || selected >= this.options.length ? this
               : new CompletionDialog(this.options, makeAttrs(id, selected), this.tooltip, this.timestamp, selected, this.disabled);
       }
       static build(active, state, id, prev, conf) {
           let options = sortOptions(active, state);
           if (!options.length) {
               return prev && active.some(a => a.state == 1 /* State.Pending */) ?
                   new CompletionDialog(prev.options, prev.attrs, prev.tooltip, prev.timestamp, prev.selected, true) : null;
           }
           let selected = state.facet(completionConfig).selectOnOpen ? 0 : -1;
           if (prev && prev.selected != selected && prev.selected != -1) {
               let selectedValue = prev.options[prev.selected].completion;
               for (let i = 0; i < options.length; i++)
                   if (options[i].completion == selectedValue) {
                       selected = i;
                       break;
                   }
           }
           return new CompletionDialog(options, makeAttrs(id, selected), {
               pos: active.reduce((a, b) => b.hasResult() ? Math.min(a, b.from) : a, 1e8),
               create: completionTooltip(completionState),
               above: conf.aboveCursor,
           }, prev ? prev.timestamp : Date.now(), selected, false);
       }
       map(changes) {
           return new CompletionDialog(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), { pos: changes.mapPos(this.tooltip.pos) }), this.timestamp, this.selected, this.disabled);
       }
   }
   class CompletionState {
       constructor(active, id, open) {
           this.active = active;
           this.id = id;
           this.open = open;
       }
       static start() {
           return new CompletionState(none$1, "cm-ac-" + Math.floor(Math.random() * 2e6).toString(36), null);
       }
       update(tr) {
           let { state } = tr, conf = state.facet(completionConfig);
           let sources = conf.override ||
               state.languageDataAt("autocomplete", cur(state)).map(asSource);
           let active = sources.map(source => {
               let value = this.active.find(s => s.source == source) ||
                   new ActiveSource(source, this.active.some(a => a.state != 0 /* State.Inactive */) ? 1 /* State.Pending */ : 0 /* State.Inactive */);
               return value.update(tr, conf);
           });
           if (active.length == this.active.length && active.every((a, i) => a == this.active[i]))
               active = this.active;
           let open = this.open;
           if (open && tr.docChanged)
               open = open.map(tr.changes);
           if (tr.selection || active.some(a => a.hasResult() && tr.changes.touchesRange(a.from, a.to)) ||
               !sameResults(active, this.active))
               open = CompletionDialog.build(active, state, this.id, open, conf);
           else if (open && open.disabled && !active.some(a => a.state == 1 /* State.Pending */))
               open = null;
           if (!open && active.every(a => a.state != 1 /* State.Pending */) && active.some(a => a.hasResult()))
               active = active.map(a => a.hasResult() ? new ActiveSource(a.source, 0 /* State.Inactive */) : a);
           for (let effect of tr.effects)
               if (effect.is(setSelectedEffect))
                   open = open && open.setSelected(effect.value, this.id);
           return active == this.active && open == this.open ? this : new CompletionState(active, this.id, open);
       }
       get tooltip() { return this.open ? this.open.tooltip : null; }
       get attrs() { return this.open ? this.open.attrs : baseAttrs; }
   }
   function sameResults(a, b) {
       if (a == b)
           return true;
       for (let iA = 0, iB = 0;;) {
           while (iA < a.length && !a[iA].hasResult)
               iA++;
           while (iB < b.length && !b[iB].hasResult)
               iB++;
           let endA = iA == a.length, endB = iB == b.length;
           if (endA || endB)
               return endA == endB;
           if (a[iA++].result != b[iB++].result)
               return false;
       }
   }
   const baseAttrs = {
       "aria-autocomplete": "list"
   };
   function makeAttrs(id, selected) {
       let result = {
           "aria-autocomplete": "list",
           "aria-haspopup": "listbox",
           "aria-controls": id
       };
       if (selected > -1)
           result["aria-activedescendant"] = id + "-" + selected;
       return result;
   }
   const none$1 = [];
   function getUserEvent(tr) {
       return tr.isUserEvent("input.type") ? "input" : tr.isUserEvent("delete.backward") ? "delete" : null;
   }
   class ActiveSource {
       constructor(source, state, explicitPos = -1) {
           this.source = source;
           this.state = state;
           this.explicitPos = explicitPos;
       }
       hasResult() { return false; }
       update(tr, conf) {
           let event = getUserEvent(tr), value = this;
           if (event)
               value = value.handleUserEvent(tr, event, conf);
           else if (tr.docChanged)
               value = value.handleChange(tr);
           else if (tr.selection && value.state != 0 /* State.Inactive */)
               value = new ActiveSource(value.source, 0 /* State.Inactive */);
           for (let effect of tr.effects) {
               if (effect.is(startCompletionEffect))
                   value = new ActiveSource(value.source, 1 /* State.Pending */, effect.value ? cur(tr.state) : -1);
               else if (effect.is(closeCompletionEffect))
                   value = new ActiveSource(value.source, 0 /* State.Inactive */);
               else if (effect.is(setActiveEffect))
                   for (let active of effect.value)
                       if (active.source == value.source)
                           value = active;
           }
           return value;
       }
       handleUserEvent(tr, type, conf) {
           return type == "delete" || !conf.activateOnTyping ? this.map(tr.changes) : new ActiveSource(this.source, 1 /* State.Pending */);
       }
       handleChange(tr) {
           return tr.changes.touchesRange(cur(tr.startState)) ? new ActiveSource(this.source, 0 /* State.Inactive */) : this.map(tr.changes);
       }
       map(changes) {
           return changes.empty || this.explicitPos < 0 ? this : new ActiveSource(this.source, this.state, changes.mapPos(this.explicitPos));
       }
   }
   class ActiveResult extends ActiveSource {
       constructor(source, explicitPos, result, from, to) {
           super(source, 2 /* State.Result */, explicitPos);
           this.result = result;
           this.from = from;
           this.to = to;
       }
       hasResult() { return true; }
       handleUserEvent(tr, type, conf) {
           var _a;
           let from = tr.changes.mapPos(this.from), to = tr.changes.mapPos(this.to, 1);
           let pos = cur(tr.state);
           if ((this.explicitPos < 0 ? pos <= from : pos < this.from) ||
               pos > to ||
               type == "delete" && cur(tr.startState) == this.from)
               return new ActiveSource(this.source, type == "input" && conf.activateOnTyping ? 1 /* State.Pending */ : 0 /* State.Inactive */);
           let explicitPos = this.explicitPos < 0 ? -1 : tr.changes.mapPos(this.explicitPos), updated;
           if (checkValid(this.result.validFor, tr.state, from, to))
               return new ActiveResult(this.source, explicitPos, this.result, from, to);
           if (this.result.update &&
               (updated = this.result.update(this.result, from, to, new CompletionContext(tr.state, pos, explicitPos >= 0))))
               return new ActiveResult(this.source, explicitPos, updated, updated.from, (_a = updated.to) !== null && _a !== void 0 ? _a : cur(tr.state));
           return new ActiveSource(this.source, 1 /* State.Pending */, explicitPos);
       }
       handleChange(tr) {
           return tr.changes.touchesRange(this.from, this.to) ? new ActiveSource(this.source, 0 /* State.Inactive */) : this.map(tr.changes);
       }
       map(mapping) {
           return mapping.empty ? this :
               new ActiveResult(this.source, this.explicitPos < 0 ? -1 : mapping.mapPos(this.explicitPos), this.result, mapping.mapPos(this.from), mapping.mapPos(this.to, 1));
       }
   }
   function checkValid(validFor, state, from, to) {
       if (!validFor)
           return false;
       let text = state.sliceDoc(from, to);
       return typeof validFor == "function" ? validFor(text, from, to, state) : ensureAnchor(validFor, true).test(text);
   }
   const setActiveEffect = /*@__PURE__*/StateEffect.define({
       map(sources, mapping) { return sources.map(s => s.map(mapping)); }
   });
   const setSelectedEffect = /*@__PURE__*/StateEffect.define();
   const completionState = /*@__PURE__*/StateField.define({
       create() { return CompletionState.start(); },
       update(value, tr) { return value.update(tr); },
       provide: f => [
           showTooltip.from(f, val => val.tooltip),
           EditorView.contentAttributes.from(f, state => state.attrs)
       ]
   });

   const baseTheme$2 = /*@__PURE__*/EditorView.baseTheme({
       ".cm-tooltip.cm-tooltip-autocomplete": {
           "& > ul": {
               fontFamily: "monospace",
               whiteSpace: "nowrap",
               overflow: "hidden auto",
               maxWidth_fallback: "700px",
               maxWidth: "min(700px, 95vw)",
               minWidth: "250px",
               maxHeight: "10em",
               height: "100%",
               listStyle: "none",
               margin: 0,
               padding: 0,
               "& > li, & > completion-section": {
                   padding: "1px 3px",
                   lineHeight: 1.2
               },
               "& > li": {
                   overflowX: "hidden",
                   textOverflow: "ellipsis",
                   cursor: "pointer"
               },
               "& > completion-section": {
                   display: "list-item",
                   borderBottom: "1px solid silver",
                   paddingLeft: "0.5em",
                   opacity: 0.7
               }
           }
       },
       "&light .cm-tooltip-autocomplete ul li[aria-selected]": {
           background: "#17c",
           color: "white",
       },
       "&light .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
           background: "#777",
       },
       "&dark .cm-tooltip-autocomplete ul li[aria-selected]": {
           background: "#347",
           color: "white",
       },
       "&dark .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
           background: "#444",
       },
       ".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after": {
           content: '"···"',
           opacity: 0.5,
           display: "block",
           textAlign: "center"
       },
       ".cm-tooltip.cm-completionInfo": {
           position: "absolute",
           padding: "3px 9px",
           width: "max-content",
           maxWidth: `${400 /* Info.Width */}px`,
           boxSizing: "border-box"
       },
       ".cm-completionInfo.cm-completionInfo-left": { right: "100%" },
       ".cm-completionInfo.cm-completionInfo-right": { left: "100%" },
       ".cm-completionInfo.cm-completionInfo-left-narrow": { right: `${30 /* Info.Margin */}px` },
       ".cm-completionInfo.cm-completionInfo-right-narrow": { left: `${30 /* Info.Margin */}px` },
       "&light .cm-snippetField": { backgroundColor: "#00000022" },
       "&dark .cm-snippetField": { backgroundColor: "#ffffff22" },
       ".cm-snippetFieldPosition": {
           verticalAlign: "text-top",
           width: 0,
           height: "1.15em",
           display: "inline-block",
           margin: "0 -0.7px -.7em",
           borderLeft: "1.4px dotted #888"
       },
       ".cm-completionMatchedText": {
           textDecoration: "underline"
       },
       ".cm-completionDetail": {
           marginLeft: "0.5em",
           fontStyle: "italic"
       },
       ".cm-completionIcon": {
           fontSize: "90%",
           width: ".8em",
           display: "inline-block",
           textAlign: "center",
           paddingRight: ".6em",
           opacity: "0.6",
           boxSizing: "content-box"
       },
       ".cm-completionIcon-function, .cm-completionIcon-method": {
           "&:after": { content: "'ƒ'" }
       },
       ".cm-completionIcon-class": {
           "&:after": { content: "'○'" }
       },
       ".cm-completionIcon-interface": {
           "&:after": { content: "'◌'" }
       },
       ".cm-completionIcon-variable": {
           "&:after": { content: "'𝑥'" }
       },
       ".cm-completionIcon-constant": {
           "&:after": { content: "'𝐶'" }
       },
       ".cm-completionIcon-type": {
           "&:after": { content: "'𝑡'" }
       },
       ".cm-completionIcon-enum": {
           "&:after": { content: "'∪'" }
       },
       ".cm-completionIcon-property": {
           "&:after": { content: "'□'" }
       },
       ".cm-completionIcon-keyword": {
           "&:after": { content: "'🔑\uFE0E'" } // Disable emoji rendering
       },
       ".cm-completionIcon-namespace": {
           "&:after": { content: "'▢'" }
       },
       ".cm-completionIcon-text": {
           "&:after": { content: "'abc'", fontSize: "50%", verticalAlign: "middle" }
       }
   });

   class FieldPos {
       constructor(field, line, from, to) {
           this.field = field;
           this.line = line;
           this.from = from;
           this.to = to;
       }
   }
   class FieldRange {
       constructor(field, from, to) {
           this.field = field;
           this.from = from;
           this.to = to;
       }
       map(changes) {
           let from = changes.mapPos(this.from, -1, MapMode.TrackDel);
           let to = changes.mapPos(this.to, 1, MapMode.TrackDel);
           return from == null || to == null ? null : new FieldRange(this.field, from, to);
       }
   }
   class Snippet {
       constructor(lines, fieldPositions) {
           this.lines = lines;
           this.fieldPositions = fieldPositions;
       }
       instantiate(state, pos) {
           let text = [], lineStart = [pos];
           let lineObj = state.doc.lineAt(pos), baseIndent = /^\s*/.exec(lineObj.text)[0];
           for (let line of this.lines) {
               if (text.length) {
                   let indent = baseIndent, tabs = /^\t*/.exec(line)[0].length;
                   for (let i = 0; i < tabs; i++)
                       indent += state.facet(indentUnit);
                   lineStart.push(pos + indent.length - tabs);
                   line = indent + line.slice(tabs);
               }
               text.push(line);
               pos += line.length + 1;
           }
           let ranges = this.fieldPositions.map(pos => new FieldRange(pos.field, lineStart[pos.line] + pos.from, lineStart[pos.line] + pos.to));
           return { text, ranges };
       }
       static parse(template) {
           let fields = [];
           let lines = [], positions = [], m;
           for (let line of template.split(/\r\n?|\n/)) {
               while (m = /[#$]\{(?:(\d+)(?::([^}]*))?|([^}]*))\}/.exec(line)) {
                   let seq = m[1] ? +m[1] : null, name = m[2] || m[3] || "", found = -1;
                   for (let i = 0; i < fields.length; i++) {
                       if (seq != null ? fields[i].seq == seq : name ? fields[i].name == name : false)
                           found = i;
                   }
                   if (found < 0) {
                       let i = 0;
                       while (i < fields.length && (seq == null || (fields[i].seq != null && fields[i].seq < seq)))
                           i++;
                       fields.splice(i, 0, { seq, name });
                       found = i;
                       for (let pos of positions)
                           if (pos.field >= found)
                               pos.field++;
                   }
                   positions.push(new FieldPos(found, lines.length, m.index, m.index + name.length));
                   line = line.slice(0, m.index) + name + line.slice(m.index + m[0].length);
               }
               for (let esc; esc = /\\([{}])/.exec(line);) {
                   line = line.slice(0, esc.index) + esc[1] + line.slice(esc.index + esc[0].length);
                   for (let pos of positions)
                       if (pos.line == lines.length && pos.from > esc.index) {
                           pos.from--;
                           pos.to--;
                       }
               }
               lines.push(line);
           }
           return new Snippet(lines, positions);
       }
   }
   let fieldMarker = /*@__PURE__*/Decoration.widget({ widget: /*@__PURE__*/new class extends WidgetType {
           toDOM() {
               let span = document.createElement("span");
               span.className = "cm-snippetFieldPosition";
               return span;
           }
           ignoreEvent() { return false; }
       } });
   let fieldRange = /*@__PURE__*/Decoration.mark({ class: "cm-snippetField" });
   class ActiveSnippet {
       constructor(ranges, active) {
           this.ranges = ranges;
           this.active = active;
           this.deco = Decoration.set(ranges.map(r => (r.from == r.to ? fieldMarker : fieldRange).range(r.from, r.to)));
       }
       map(changes) {
           let ranges = [];
           for (let r of this.ranges) {
               let mapped = r.map(changes);
               if (!mapped)
                   return null;
               ranges.push(mapped);
           }
           return new ActiveSnippet(ranges, this.active);
       }
       selectionInsideField(sel) {
           return sel.ranges.every(range => this.ranges.some(r => r.field == this.active && r.from <= range.from && r.to >= range.to));
       }
   }
   const setActive = /*@__PURE__*/StateEffect.define({
       map(value, changes) { return value && value.map(changes); }
   });
   const moveToField = /*@__PURE__*/StateEffect.define();
   const snippetState = /*@__PURE__*/StateField.define({
       create() { return null; },
       update(value, tr) {
           for (let effect of tr.effects) {
               if (effect.is(setActive))
                   return effect.value;
               if (effect.is(moveToField) && value)
                   return new ActiveSnippet(value.ranges, effect.value);
           }
           if (value && tr.docChanged)
               value = value.map(tr.changes);
           if (value && tr.selection && !value.selectionInsideField(tr.selection))
               value = null;
           return value;
       },
       provide: f => EditorView.decorations.from(f, val => val ? val.deco : Decoration.none)
   });
   function fieldSelection(ranges, field) {
       return EditorSelection.create(ranges.filter(r => r.field == field).map(r => EditorSelection.range(r.from, r.to)));
   }
   /**
   Convert a snippet template to a function that can
   [apply](https://codemirror.net/6/docs/ref/#autocomplete.Completion.apply) it. Snippets are written
   using syntax like this:

       "for (let ${index} = 0; ${index} < ${end}; ${index}++) {\n\t${}\n}"

   Each `${}` placeholder (you may also use `#{}`) indicates a field
   that the user can fill in. Its name, if any, will be the default
   content for the field.

   When the snippet is activated by calling the returned function,
   the code is inserted at the given position. Newlines in the
   template are indented by the indentation of the start line, plus
   one [indent unit](https://codemirror.net/6/docs/ref/#language.indentUnit) per tab character after
   the newline.

   On activation, (all instances of) the first field are selected.
   The user can move between fields with Tab and Shift-Tab as long as
   the fields are active. Moving to the last field or moving the
   cursor out of the current field deactivates the fields.

   The order of fields defaults to textual order, but you can add
   numbers to placeholders (`${1}` or `${1:defaultText}`) to provide
   a custom order.

   To include a literal `{` or `}` in your template, put a backslash
   in front of it. This will be removed and the brace will not be
   interpreted as indicating a placeholder.
   */
   function snippet(template) {
       let snippet = Snippet.parse(template);
       return (editor, completion, from, to) => {
           let { text, ranges } = snippet.instantiate(editor.state, from);
           let spec = {
               changes: { from, to, insert: Text$1.of(text) },
               scrollIntoView: true,
               annotations: completion ? pickedCompletion.of(completion) : undefined
           };
           if (ranges.length)
               spec.selection = fieldSelection(ranges, 0);
           if (ranges.length > 1) {
               let active = new ActiveSnippet(ranges, 0);
               let effects = spec.effects = [setActive.of(active)];
               if (editor.state.field(snippetState, false) === undefined)
                   effects.push(StateEffect.appendConfig.of([snippetState, addSnippetKeymap, snippetPointerHandler, baseTheme$2]));
           }
           editor.dispatch(editor.state.update(spec));
       };
   }
   function moveField(dir) {
       return ({ state, dispatch }) => {
           let active = state.field(snippetState, false);
           if (!active || dir < 0 && active.active == 0)
               return false;
           let next = active.active + dir, last = dir > 0 && !active.ranges.some(r => r.field == next + dir);
           dispatch(state.update({
               selection: fieldSelection(active.ranges, next),
               effects: setActive.of(last ? null : new ActiveSnippet(active.ranges, next))
           }));
           return true;
       };
   }
   /**
   A command that clears the active snippet, if any.
   */
   const clearSnippet = ({ state, dispatch }) => {
       let active = state.field(snippetState, false);
       if (!active)
           return false;
       dispatch(state.update({ effects: setActive.of(null) }));
       return true;
   };
   /**
   Move to the next snippet field, if available.
   */
   const nextSnippetField = /*@__PURE__*/moveField(1);
   /**
   Move to the previous snippet field, if available.
   */
   const prevSnippetField = /*@__PURE__*/moveField(-1);
   const defaultSnippetKeymap = [
       { key: "Tab", run: nextSnippetField, shift: prevSnippetField },
       { key: "Escape", run: clearSnippet }
   ];
   /**
   A facet that can be used to configure the key bindings used by
   snippets. The default binds Tab to
   [`nextSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.nextSnippetField), Shift-Tab to
   [`prevSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.prevSnippetField), and Escape
   to [`clearSnippet`](https://codemirror.net/6/docs/ref/#autocomplete.clearSnippet).
   */
   const snippetKeymap = /*@__PURE__*/Facet.define({
       combine(maps) { return maps.length ? maps[0] : defaultSnippetKeymap; }
   });
   const addSnippetKeymap = /*@__PURE__*/Prec.highest(/*@__PURE__*/keymap.compute([snippetKeymap], state => state.facet(snippetKeymap)));
   /**
   Create a completion from a snippet. Returns an object with the
   properties from `completion`, plus an `apply` function that
   applies the snippet.
   */
   function snippetCompletion(template, completion) {
       return Object.assign(Object.assign({}, completion), { apply: snippet(template) });
   }
   const snippetPointerHandler = /*@__PURE__*/EditorView.domEventHandlers({
       mousedown(event, view) {
           let active = view.state.field(snippetState, false), pos;
           if (!active || (pos = view.posAtCoords({ x: event.clientX, y: event.clientY })) == null)
               return false;
           let match = active.ranges.find(r => r.from <= pos && r.to >= pos);
           if (!match || match.field == active.active)
               return false;
           view.dispatch({
               selection: fieldSelection(active.ranges, match.field),
               effects: setActive.of(active.ranges.some(r => r.field > match.field) ? new ActiveSnippet(active.ranges, match.field) : null)
           });
           return true;
       }
   });

   const defaults$3 = {
       brackets: ["(", "[", "{", "'", '"'],
       before: ")]}:;>",
       stringPrefixes: []
   };
   const closeBracketEffect = /*@__PURE__*/StateEffect.define({
       map(value, mapping) {
           let mapped = mapping.mapPos(value, -1, MapMode.TrackAfter);
           return mapped == null ? undefined : mapped;
       }
   });
   const closedBracket = /*@__PURE__*/new class extends RangeValue {
   };
   closedBracket.startSide = 1;
   closedBracket.endSide = -1;
   const bracketState = /*@__PURE__*/StateField.define({
       create() { return RangeSet.empty; },
       update(value, tr) {
           if (tr.selection) {
               let lineStart = tr.state.doc.lineAt(tr.selection.main.head).from;
               let prevLineStart = tr.startState.doc.lineAt(tr.startState.selection.main.head).from;
               if (lineStart != tr.changes.mapPos(prevLineStart, -1))
                   value = RangeSet.empty;
           }
           value = value.map(tr.changes);
           for (let effect of tr.effects)
               if (effect.is(closeBracketEffect))
                   value = value.update({ add: [closedBracket.range(effect.value, effect.value + 1)] });
           return value;
       }
   });
   /**
   Extension to enable bracket-closing behavior. When a closeable
   bracket is typed, its closing bracket is immediately inserted
   after the cursor. When closing a bracket directly in front of a
   closing bracket inserted by the extension, the cursor moves over
   that bracket.
   */
   function closeBrackets() {
       return [inputHandler, bracketState];
   }
   const definedClosing = "()[]{}<>";
   function closing$3(ch) {
       for (let i = 0; i < definedClosing.length; i += 2)
           if (definedClosing.charCodeAt(i) == ch)
               return definedClosing.charAt(i + 1);
       return fromCodePoint$1(ch < 128 ? ch : ch + 1);
   }
   function config(state, pos) {
       return state.languageDataAt("closeBrackets", pos)[0] || defaults$3;
   }
   const android$1 = typeof navigator == "object" && /*@__PURE__*//Android\b/.test(navigator.userAgent);
   const inputHandler = /*@__PURE__*/EditorView.inputHandler.of((view, from, to, insert) => {
       if ((android$1 ? view.composing : view.compositionStarted) || view.state.readOnly)
           return false;
       let sel = view.state.selection.main;
       if (insert.length > 2 || insert.length == 2 && codePointSize(codePointAt(insert, 0)) == 1 ||
           from != sel.from || to != sel.to)
           return false;
       let tr = insertBracket(view.state, insert);
       if (!tr)
           return false;
       view.dispatch(tr);
       return true;
   });
   /**
   Command that implements deleting a pair of matching brackets when
   the cursor is between them.
   */
   const deleteBracketPair = ({ state, dispatch }) => {
       if (state.readOnly)
           return false;
       let conf = config(state, state.selection.main.head);
       let tokens = conf.brackets || defaults$3.brackets;
       let dont = null, changes = state.changeByRange(range => {
           if (range.empty) {
               let before = prevChar(state.doc, range.head);
               for (let token of tokens) {
                   if (token == before && nextChar(state.doc, range.head) == closing$3(codePointAt(token, 0)))
                       return { changes: { from: range.head - token.length, to: range.head + token.length },
                           range: EditorSelection.cursor(range.head - token.length) };
               }
           }
           return { range: dont = range };
       });
       if (!dont)
           dispatch(state.update(changes, { scrollIntoView: true, userEvent: "delete.backward" }));
       return !dont;
   };
   /**
   Close-brackets related key bindings. Binds Backspace to
   [`deleteBracketPair`](https://codemirror.net/6/docs/ref/#autocomplete.deleteBracketPair).
   */
   const closeBracketsKeymap = [
       { key: "Backspace", run: deleteBracketPair }
   ];
   /**
   Implements the extension's behavior on text insertion. If the
   given string counts as a bracket in the language around the
   selection, and replacing the selection with it requires custom
   behavior (inserting a closing version or skipping past a
   previously-closed bracket), this function returns a transaction
   representing that custom behavior. (You only need this if you want
   to programmatically insert brackets—the
   [`closeBrackets`](https://codemirror.net/6/docs/ref/#autocomplete.closeBrackets) extension will
   take care of running this for user input.)
   */
   function insertBracket(state, bracket) {
       let conf = config(state, state.selection.main.head);
       let tokens = conf.brackets || defaults$3.brackets;
       for (let tok of tokens) {
           let closed = closing$3(codePointAt(tok, 0));
           if (bracket == tok)
               return closed == tok ? handleSame(state, tok, tokens.indexOf(tok + tok + tok) > -1, conf)
                   : handleOpen(state, tok, closed, conf.before || defaults$3.before);
           if (bracket == closed && closedBracketAt(state, state.selection.main.from))
               return handleClose(state, tok, closed);
       }
       return null;
   }
   function closedBracketAt(state, pos) {
       let found = false;
       state.field(bracketState).between(0, state.doc.length, from => {
           if (from == pos)
               found = true;
       });
       return found;
   }
   function nextChar(doc, pos) {
       let next = doc.sliceString(pos, pos + 2);
       return next.slice(0, codePointSize(codePointAt(next, 0)));
   }
   function prevChar(doc, pos) {
       let prev = doc.sliceString(pos - 2, pos);
       return codePointSize(codePointAt(prev, 0)) == prev.length ? prev : prev.slice(1);
   }
   function handleOpen(state, open, close, closeBefore) {
       let dont = null, changes = state.changeByRange(range => {
           if (!range.empty)
               return { changes: [{ insert: open, from: range.from }, { insert: close, from: range.to }],
                   effects: closeBracketEffect.of(range.to + open.length),
                   range: EditorSelection.range(range.anchor + open.length, range.head + open.length) };
           let next = nextChar(state.doc, range.head);
           if (!next || /\s/.test(next) || closeBefore.indexOf(next) > -1)
               return { changes: { insert: open + close, from: range.head },
                   effects: closeBracketEffect.of(range.head + open.length),
                   range: EditorSelection.cursor(range.head + open.length) };
           return { range: dont = range };
       });
       return dont ? null : state.update(changes, {
           scrollIntoView: true,
           userEvent: "input.type"
       });
   }
   function handleClose(state, _open, close) {
       let dont = null, changes = state.changeByRange(range => {
           if (range.empty && nextChar(state.doc, range.head) == close)
               return { changes: { from: range.head, to: range.head + close.length, insert: close },
                   range: EditorSelection.cursor(range.head + close.length) };
           return dont = { range };
       });
       return dont ? null : state.update(changes, {
           scrollIntoView: true,
           userEvent: "input.type"
       });
   }
   // Handles cases where the open and close token are the same, and
   // possibly triple quotes (as in `"""abc"""`-style quoting).
   function handleSame(state, token, allowTriple, config) {
       let stringPrefixes = config.stringPrefixes || defaults$3.stringPrefixes;
       let dont = null, changes = state.changeByRange(range => {
           if (!range.empty)
               return { changes: [{ insert: token, from: range.from }, { insert: token, from: range.to }],
                   effects: closeBracketEffect.of(range.to + token.length),
                   range: EditorSelection.range(range.anchor + token.length, range.head + token.length) };
           let pos = range.head, next = nextChar(state.doc, pos), start;
           if (next == token) {
               if (nodeStart(state, pos)) {
                   return { changes: { insert: token + token, from: pos },
                       effects: closeBracketEffect.of(pos + token.length),
                       range: EditorSelection.cursor(pos + token.length) };
               }
               else if (closedBracketAt(state, pos)) {
                   let isTriple = allowTriple && state.sliceDoc(pos, pos + token.length * 3) == token + token + token;
                   let content = isTriple ? token + token + token : token;
                   return { changes: { from: pos, to: pos + content.length, insert: content },
                       range: EditorSelection.cursor(pos + content.length) };
               }
           }
           else if (allowTriple && state.sliceDoc(pos - 2 * token.length, pos) == token + token &&
               (start = canStartStringAt(state, pos - 2 * token.length, stringPrefixes)) > -1 &&
               nodeStart(state, start)) {
               return { changes: { insert: token + token + token + token, from: pos },
                   effects: closeBracketEffect.of(pos + token.length),
                   range: EditorSelection.cursor(pos + token.length) };
           }
           else if (state.charCategorizer(pos)(next) != CharCategory.Word) {
               if (canStartStringAt(state, pos, stringPrefixes) > -1 && !probablyInString(state, pos, token, stringPrefixes))
                   return { changes: { insert: token + token, from: pos },
                       effects: closeBracketEffect.of(pos + token.length),
                       range: EditorSelection.cursor(pos + token.length) };
           }
           return { range: dont = range };
       });
       return dont ? null : state.update(changes, {
           scrollIntoView: true,
           userEvent: "input.type"
       });
   }
   function nodeStart(state, pos) {
       let tree = syntaxTree(state).resolveInner(pos + 1);
       return tree.parent && tree.from == pos;
   }
   function probablyInString(state, pos, quoteToken, prefixes) {
       let node = syntaxTree(state).resolveInner(pos, -1);
       let maxPrefix = prefixes.reduce((m, p) => Math.max(m, p.length), 0);
       for (let i = 0; i < 5; i++) {
           let start = state.sliceDoc(node.from, Math.min(node.to, node.from + quoteToken.length + maxPrefix));
           let quotePos = start.indexOf(quoteToken);
           if (!quotePos || quotePos > -1 && prefixes.indexOf(start.slice(0, quotePos)) > -1) {
               let first = node.firstChild;
               while (first && first.from == node.from && first.to - first.from > quoteToken.length + quotePos) {
                   if (state.sliceDoc(first.to - quoteToken.length, first.to) == quoteToken)
                       return false;
                   first = first.firstChild;
               }
               return true;
           }
           let parent = node.to == pos && node.parent;
           if (!parent)
               break;
           node = parent;
       }
       return false;
   }
   function canStartStringAt(state, pos, prefixes) {
       let charCat = state.charCategorizer(pos);
       if (charCat(state.sliceDoc(pos - 1, pos)) != CharCategory.Word)
           return pos;
       for (let prefix of prefixes) {
           let start = pos - prefix.length;
           if (state.sliceDoc(start, pos) == prefix && charCat(state.sliceDoc(start - 1, start)) != CharCategory.Word)
               return start;
       }
       return -1;
   }

   /**
   Returns an extension that enables autocompletion.
   */
   function autocompletion(config = {}) {
       return [
           completionState,
           completionConfig.of(config),
           completionPlugin,
           completionKeymapExt,
           baseTheme$2
       ];
   }
   /**
   Basic keybindings for autocompletion.

    - Ctrl-Space: [`startCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.startCompletion)
    - Escape: [`closeCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.closeCompletion)
    - ArrowDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true)`
    - ArrowUp: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(false)`
    - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, "page")`
    - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, "page")`
    - Enter: [`acceptCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.acceptCompletion)
   */
   const completionKeymap = [
       { key: "Ctrl-Space", run: startCompletion },
       { key: "Escape", run: closeCompletion },
       { key: "ArrowDown", run: /*@__PURE__*/moveCompletionSelection(true) },
       { key: "ArrowUp", run: /*@__PURE__*/moveCompletionSelection(false) },
       { key: "PageDown", run: /*@__PURE__*/moveCompletionSelection(true, "page") },
       { key: "PageUp", run: /*@__PURE__*/moveCompletionSelection(false, "page") },
       { key: "Enter", run: acceptCompletion }
   ];
   const completionKeymapExt = /*@__PURE__*/Prec.highest(/*@__PURE__*/keymap.computeN([completionConfig], state => state.facet(completionConfig).defaultKeymap ? [completionKeymap] : []));

   function crelt() {
     var elt = arguments[0];
     if (typeof elt == "string") elt = document.createElement(elt);
     var i = 1, next = arguments[1];
     if (next && typeof next == "object" && next.nodeType == null && !Array.isArray(next)) {
       for (var name in next) if (Object.prototype.hasOwnProperty.call(next, name)) {
         var value = next[name];
         if (typeof value == "string") elt.setAttribute(name, value);
         else if (value != null) elt[name] = value;
       }
       i++;
     }
     for (; i < arguments.length; i++) add$1(elt, arguments[i]);
     return elt
   }

   function add$1(elt, child) {
     if (typeof child == "string") {
       elt.appendChild(document.createTextNode(child));
     } else if (child == null) ; else if (child.nodeType != null) {
       elt.appendChild(child);
     } else if (Array.isArray(child)) {
       for (var i = 0; i < child.length; i++) add$1(elt, child[i]);
     } else {
       throw new RangeError("Unsupported child node: " + child)
     }
   }

   const basicNormalize = typeof String.prototype.normalize == "function"
       ? x => x.normalize("NFKD") : x => x;
   /// A search cursor provides an iterator over text matches in a
   /// document.
   class SearchCursor {
       /// Create a text cursor. The query is the search string, `from` to
       /// `to` provides the region to search.
       ///
       /// When `normalize` is given, it will be called, on both the query
       /// string and the content it is matched against, before comparing.
       /// You can, for example, create a case-insensitive search by
       /// passing `s => s.toLowerCase()`.
       ///
       /// Text is always normalized with
       /// [`.normalize("NFKD")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)
       /// (when supported).
       constructor(text, query, from = 0, to = text.length, normalize, test) {
           this.test = test;
           /// The current match (only holds a meaningful value after
           /// [`next`](#search.SearchCursor.next) has been called and when
           /// `done` is false).
           this.value = { from: 0, to: 0 };
           /// Whether the end of the iterated region has been reached.
           this.done = false;
           this.matches = [];
           this.buffer = "";
           this.bufferPos = 0;
           this.iter = text.iterRange(from, to);
           this.bufferStart = from;
           this.normalize = normalize ? x => normalize(basicNormalize(x)) : basicNormalize;
           this.query = this.normalize(query);
       }
       peek() {
           if (this.bufferPos == this.buffer.length) {
               this.bufferStart += this.buffer.length;
               this.iter.next();
               if (this.iter.done)
                   return -1;
               this.bufferPos = 0;
               this.buffer = this.iter.value;
           }
           return codePointAt(this.buffer, this.bufferPos);
       }
       /// Look for the next match. Updates the iterator's
       /// [`value`](#search.SearchCursor.value) and
       /// [`done`](#search.SearchCursor.done) properties. Should be called
       /// at least once before using the cursor.
       next() {
           while (this.matches.length)
               this.matches.pop();
           return this.nextOverlapping();
       }
       /// The `next` method will ignore matches that partially overlap a
       /// previous match. This method behaves like `next`, but includes
       /// such matches.
       nextOverlapping() {
           for (;;) {
               let next = this.peek();
               if (next < 0) {
                   this.done = true;
                   return this;
               }
               let str = fromCodePoint$1(next), start = this.bufferStart + this.bufferPos;
               this.bufferPos += codePointSize(next);
               let norm = this.normalize(str);
               for (let i = 0, pos = start;; i++) {
                   let code = norm.charCodeAt(i);
                   let match = this.match(code, pos);
                   if (match) {
                       this.value = match;
                       return this;
                   }
                   if (i == norm.length - 1)
                       break;
                   if (pos == start && i < str.length && str.charCodeAt(i) == code)
                       pos++;
               }
           }
       }
       match(code, pos) {
           let match = null;
           for (let i = 0; i < this.matches.length; i += 2) {
               let index = this.matches[i], keep = false;
               if (this.query.charCodeAt(index) == code) {
                   if (index == this.query.length - 1) {
                       match = { from: this.matches[i + 1], to: pos + 1 };
                   }
                   else {
                       this.matches[i]++;
                       keep = true;
                   }
               }
               if (!keep) {
                   this.matches.splice(i, 2);
                   i -= 2;
               }
           }
           if (this.query.charCodeAt(0) == code) {
               if (this.query.length == 1)
                   match = { from: pos, to: pos + 1 };
               else
                   this.matches.push(1, pos);
           }
           if (match && this.test && !this.test(match.from, match.to, this.buffer, this.bufferPos))
               match = null;
           return match;
       }
   }
   if (typeof Symbol != "undefined")
       SearchCursor.prototype[Symbol.iterator] = function () { return this; };

   const empty = { from: -1, to: -1, match: /*@__PURE__*//.*/.exec("") };
   const baseFlags = "gm" + (/x/.unicode == null ? "" : "u");
   /// This class is similar to [`SearchCursor`](#search.SearchCursor)
   /// but searches for a regular expression pattern instead of a plain
   /// string.
   class RegExpCursor {
       /// Create a cursor that will search the given range in the given
       /// document. `query` should be the raw pattern (as you'd pass it to
       /// `new RegExp`).
       constructor(text, query, options, from = 0, to = text.length) {
           this.text = text;
           this.to = to;
           this.curLine = "";
           /// Set to `true` when the cursor has reached the end of the search
           /// range.
           this.done = false;
           /// Will contain an object with the extent of the match and the
           /// match object when [`next`](#search.RegExpCursor.next)
           /// sucessfully finds a match.
           this.value = empty;
           if (/\\[sWDnr]|\n|\r|\[\^/.test(query))
               return new MultilineRegExpCursor(text, query, options, from, to);
           this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
           this.test = options === null || options === void 0 ? void 0 : options.test;
           this.iter = text.iter();
           let startLine = text.lineAt(from);
           this.curLineStart = startLine.from;
           this.matchPos = toCharEnd(text, from);
           this.getLine(this.curLineStart);
       }
       getLine(skip) {
           this.iter.next(skip);
           if (this.iter.lineBreak) {
               this.curLine = "";
           }
           else {
               this.curLine = this.iter.value;
               if (this.curLineStart + this.curLine.length > this.to)
                   this.curLine = this.curLine.slice(0, this.to - this.curLineStart);
               this.iter.next();
           }
       }
       nextLine() {
           this.curLineStart = this.curLineStart + this.curLine.length + 1;
           if (this.curLineStart > this.to)
               this.curLine = "";
           else
               this.getLine(0);
       }
       /// Move to the next match, if there is one.
       next() {
           for (let off = this.matchPos - this.curLineStart;;) {
               this.re.lastIndex = off;
               let match = this.matchPos <= this.to && this.re.exec(this.curLine);
               if (match) {
                   let from = this.curLineStart + match.index, to = from + match[0].length;
                   this.matchPos = toCharEnd(this.text, to + (from == to ? 1 : 0));
                   if (from == this.curLineStart + this.curLine.length)
                       this.nextLine();
                   if ((from < to || from > this.value.to) && (!this.test || this.test(from, to, match))) {
                       this.value = { from, to, match };
                       return this;
                   }
                   off = this.matchPos - this.curLineStart;
               }
               else if (this.curLineStart + this.curLine.length < this.to) {
                   this.nextLine();
                   off = 0;
               }
               else {
                   this.done = true;
                   return this;
               }
           }
       }
   }
   const flattened = /*@__PURE__*/new WeakMap();
   // Reusable (partially) flattened document strings
   class FlattenedDoc {
       constructor(from, text) {
           this.from = from;
           this.text = text;
       }
       get to() { return this.from + this.text.length; }
       static get(doc, from, to) {
           let cached = flattened.get(doc);
           if (!cached || cached.from >= to || cached.to <= from) {
               let flat = new FlattenedDoc(from, doc.sliceString(from, to));
               flattened.set(doc, flat);
               return flat;
           }
           if (cached.from == from && cached.to == to)
               return cached;
           let { text, from: cachedFrom } = cached;
           if (cachedFrom > from) {
               text = doc.sliceString(from, cachedFrom) + text;
               cachedFrom = from;
           }
           if (cached.to < to)
               text += doc.sliceString(cached.to, to);
           flattened.set(doc, new FlattenedDoc(cachedFrom, text));
           return new FlattenedDoc(from, text.slice(from - cachedFrom, to - cachedFrom));
       }
   }
   class MultilineRegExpCursor {
       constructor(text, query, options, from, to) {
           this.text = text;
           this.to = to;
           this.done = false;
           this.value = empty;
           this.matchPos = toCharEnd(text, from);
           this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
           this.test = options === null || options === void 0 ? void 0 : options.test;
           this.flat = FlattenedDoc.get(text, from, this.chunkEnd(from + 5000 /* Chunk.Base */));
       }
       chunkEnd(pos) {
           return pos >= this.to ? this.to : this.text.lineAt(pos).to;
       }
       next() {
           for (;;) {
               let off = this.re.lastIndex = this.matchPos - this.flat.from;
               let match = this.re.exec(this.flat.text);
               // Skip empty matches directly after the last match
               if (match && !match[0] && match.index == off) {
                   this.re.lastIndex = off + 1;
                   match = this.re.exec(this.flat.text);
               }
               if (match) {
                   let from = this.flat.from + match.index, to = from + match[0].length;
                   // If a match goes almost to the end of a noncomplete chunk, try
                   // again, since it'll likely be able to match more
                   if ((this.flat.to >= this.to || match.index + match[0].length <= this.flat.text.length - 10) &&
                       (!this.test || this.test(from, to, match))) {
                       this.value = { from, to, match };
                       this.matchPos = toCharEnd(this.text, to + (from == to ? 1 : 0));
                       return this;
                   }
               }
               if (this.flat.to == this.to) {
                   this.done = true;
                   return this;
               }
               // Grow the flattened doc
               this.flat = FlattenedDoc.get(this.text, this.flat.from, this.chunkEnd(this.flat.from + this.flat.text.length * 2));
           }
       }
   }
   if (typeof Symbol != "undefined") {
       RegExpCursor.prototype[Symbol.iterator] = MultilineRegExpCursor.prototype[Symbol.iterator] =
           function () { return this; };
   }
   function validRegExp(source) {
       try {
           new RegExp(source, baseFlags);
           return true;
       }
       catch (_a) {
           return false;
       }
   }
   function toCharEnd(text, pos) {
       if (pos >= text.length)
           return pos;
       let line = text.lineAt(pos), next;
       while (pos < line.to && (next = line.text.charCodeAt(pos - line.from)) >= 0xDC00 && next < 0xE000)
           pos++;
       return pos;
   }

   function createLineDialog(view) {
       let input = crelt("input", { class: "cm-textfield", name: "line" });
       let dom = crelt("form", {
           class: "cm-gotoLine",
           onkeydown: (event) => {
               if (event.keyCode == 27) { // Escape
                   event.preventDefault();
                   view.dispatch({ effects: dialogEffect.of(false) });
                   view.focus();
               }
               else if (event.keyCode == 13) { // Enter
                   event.preventDefault();
                   go();
               }
           },
           onsubmit: (event) => {
               event.preventDefault();
               go();
           }
       }, crelt("label", view.state.phrase("Go to line"), ": ", input), " ", crelt("button", { class: "cm-button", type: "submit" }, view.state.phrase("go")));
       function go() {
           let match = /^([+-])?(\d+)?(:\d+)?(%)?$/.exec(input.value);
           if (!match)
               return;
           let { state } = view, startLine = state.doc.lineAt(state.selection.main.head);
           let [, sign, ln, cl, percent] = match;
           let col = cl ? +cl.slice(1) : 0;
           let line = ln ? +ln : startLine.number;
           if (ln && percent) {
               let pc = line / 100;
               if (sign)
                   pc = pc * (sign == "-" ? -1 : 1) + (startLine.number / state.doc.lines);
               line = Math.round(state.doc.lines * pc);
           }
           else if (ln && sign) {
               line = line * (sign == "-" ? -1 : 1) + startLine.number;
           }
           let docLine = state.doc.line(Math.max(1, Math.min(state.doc.lines, line)));
           view.dispatch({
               effects: dialogEffect.of(false),
               selection: EditorSelection.cursor(docLine.from + Math.max(0, Math.min(col, docLine.length))),
               scrollIntoView: true
           });
           view.focus();
       }
       return { dom };
   }
   const dialogEffect = /*@__PURE__*/StateEffect.define();
   const dialogField = /*@__PURE__*/StateField.define({
       create() { return true; },
       update(value, tr) {
           for (let e of tr.effects)
               if (e.is(dialogEffect))
                   value = e.value;
           return value;
       },
       provide: f => showPanel.from(f, val => val ? createLineDialog : null)
   });
   /// Command that shows a dialog asking the user for a line number, and
   /// when a valid position is provided, moves the cursor to that line.
   ///
   /// Supports line numbers, relative line offsets prefixed with `+` or
   /// `-`, document percentages suffixed with `%`, and an optional
   /// column position by adding `:` and a second number after the line
   /// number.
   const gotoLine = view => {
       let panel = getPanel(view, createLineDialog);
       if (!panel) {
           let effects = [dialogEffect.of(true)];
           if (view.state.field(dialogField, false) == null)
               effects.push(StateEffect.appendConfig.of([dialogField, baseTheme$1]));
           view.dispatch({ effects });
           panel = getPanel(view, createLineDialog);
       }
       if (panel)
           panel.dom.querySelector("input").focus();
       return true;
   };
   const baseTheme$1 = /*@__PURE__*/EditorView.baseTheme({
       ".cm-panel.cm-gotoLine": {
           padding: "2px 6px 4px",
           "& label": { fontSize: "80%" }
       }
   });

   const defaultHighlightOptions = {
       highlightWordAroundCursor: false,
       minSelectionLength: 1,
       maxMatches: 100,
       wholeWords: false
   };
   const highlightConfig = /*@__PURE__*/Facet.define({
       combine(options) {
           return combineConfig(options, defaultHighlightOptions, {
               highlightWordAroundCursor: (a, b) => a || b,
               minSelectionLength: Math.min,
               maxMatches: Math.min
           });
       }
   });
   /// This extension highlights text that matches the selection. It uses
   /// the `"cm-selectionMatch"` class for the highlighting. When
   /// `highlightWordAroundCursor` is enabled, the word at the cursor
   /// itself will be highlighted with `"cm-selectionMatch-main"`.
   function highlightSelectionMatches(options) {
       let ext = [defaultTheme, matchHighlighter];
       if (options)
           ext.push(highlightConfig.of(options));
       return ext;
   }
   const matchDeco = /*@__PURE__*/Decoration.mark({ class: "cm-selectionMatch" });
   const mainMatchDeco = /*@__PURE__*/Decoration.mark({ class: "cm-selectionMatch cm-selectionMatch-main" });
   // Whether the characters directly outside the given positions are non-word characters
   function insideWordBoundaries(check, state, from, to) {
       return (from == 0 || check(state.sliceDoc(from - 1, from)) != CharCategory.Word) &&
           (to == state.doc.length || check(state.sliceDoc(to, to + 1)) != CharCategory.Word);
   }
   // Whether the characters directly at the given positions are word characters
   function insideWord(check, state, from, to) {
       return check(state.sliceDoc(from, from + 1)) == CharCategory.Word
           && check(state.sliceDoc(to - 1, to)) == CharCategory.Word;
   }
   const matchHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {
       constructor(view) {
           this.decorations = this.getDeco(view);
       }
       update(update) {
           if (update.selectionSet || update.docChanged || update.viewportChanged)
               this.decorations = this.getDeco(update.view);
       }
       getDeco(view) {
           let conf = view.state.facet(highlightConfig);
           let { state } = view, sel = state.selection;
           if (sel.ranges.length > 1)
               return Decoration.none;
           let range = sel.main, query, check = null;
           if (range.empty) {
               if (!conf.highlightWordAroundCursor)
                   return Decoration.none;
               let word = state.wordAt(range.head);
               if (!word)
                   return Decoration.none;
               check = state.charCategorizer(range.head);
               query = state.sliceDoc(word.from, word.to);
           }
           else {
               let len = range.to - range.from;
               if (len < conf.minSelectionLength || len > 200)
                   return Decoration.none;
               if (conf.wholeWords) {
                   query = state.sliceDoc(range.from, range.to); // TODO: allow and include leading/trailing space?
                   check = state.charCategorizer(range.head);
                   if (!(insideWordBoundaries(check, state, range.from, range.to)
                       && insideWord(check, state, range.from, range.to)))
                       return Decoration.none;
               }
               else {
                   query = state.sliceDoc(range.from, range.to).trim();
                   if (!query)
                       return Decoration.none;
               }
           }
           let deco = [];
           for (let part of view.visibleRanges) {
               let cursor = new SearchCursor(state.doc, query, part.from, part.to);
               while (!cursor.next().done) {
                   let { from, to } = cursor.value;
                   if (!check || insideWordBoundaries(check, state, from, to)) {
                       if (range.empty && from <= range.from && to >= range.to)
                           deco.push(mainMatchDeco.range(from, to));
                       else if (from >= range.to || to <= range.from)
                           deco.push(matchDeco.range(from, to));
                       if (deco.length > conf.maxMatches)
                           return Decoration.none;
                   }
               }
           }
           return Decoration.set(deco);
       }
   }, {
       decorations: v => v.decorations
   });
   const defaultTheme = /*@__PURE__*/EditorView.baseTheme({
       ".cm-selectionMatch": { backgroundColor: "#99ff7780" },
       ".cm-searchMatch .cm-selectionMatch": { backgroundColor: "transparent" }
   });
   // Select the words around the cursors.
   const selectWord = ({ state, dispatch }) => {
       let { selection } = state;
       let newSel = EditorSelection.create(selection.ranges.map(range => state.wordAt(range.head) || EditorSelection.cursor(range.head)), selection.mainIndex);
       if (newSel.eq(selection))
           return false;
       dispatch(state.update({ selection: newSel }));
       return true;
   };
   // Find next occurrence of query relative to last cursor. Wrap around
   // the document if there are no more matches.
   function findNextOccurrence(state, query) {
       let { main, ranges } = state.selection;
       let word = state.wordAt(main.head), fullWord = word && word.from == main.from && word.to == main.to;
       for (let cycled = false, cursor = new SearchCursor(state.doc, query, ranges[ranges.length - 1].to);;) {
           cursor.next();
           if (cursor.done) {
               if (cycled)
                   return null;
               cursor = new SearchCursor(state.doc, query, 0, Math.max(0, ranges[ranges.length - 1].from - 1));
               cycled = true;
           }
           else {
               if (cycled && ranges.some(r => r.from == cursor.value.from))
                   continue;
               if (fullWord) {
                   let word = state.wordAt(cursor.value.from);
                   if (!word || word.from != cursor.value.from || word.to != cursor.value.to)
                       continue;
               }
               return cursor.value;
           }
       }
   }
   /// Select next occurrence of the current selection. Expand selection
   /// to the surrounding word when the selection is empty.
   const selectNextOccurrence = ({ state, dispatch }) => {
       let { ranges } = state.selection;
       if (ranges.some(sel => sel.from === sel.to))
           return selectWord({ state, dispatch });
       let searchedText = state.sliceDoc(ranges[0].from, ranges[0].to);
       if (state.selection.ranges.some(r => state.sliceDoc(r.from, r.to) != searchedText))
           return false;
       let range = findNextOccurrence(state, searchedText);
       if (!range)
           return false;
       dispatch(state.update({
           selection: state.selection.addRange(EditorSelection.range(range.from, range.to), false),
           effects: EditorView.scrollIntoView(range.to)
       }));
       return true;
   };

   const searchConfigFacet = /*@__PURE__*/Facet.define({
       combine(configs) {
           return combineConfig(configs, {
               top: true,
               caseSensitive: false,
               literal: false,
               regexp: false,
               wholeWord: false,
               createPanel: view => new SearchPanel(view),
               scrollToMatch: range => EditorView.scrollIntoView(range)
           });
       }
   });
   /// Add search state to the editor configuration, and optionally
   /// configure the search extension.
   /// ([`openSearchPanel`](#search.openSearchPanel) will automatically
   /// enable this if it isn't already on).
   function search$2(config) {
       return config ? [searchConfigFacet.of(config), searchExtensions] : searchExtensions;
   }
   /// A search query. Part of the editor's search state.
   class SearchQuery {
       /// Create a query object.
       constructor(config) {
           this.search = config.search;
           this.caseSensitive = !!config.caseSensitive;
           this.literal = !!config.literal;
           this.regexp = !!config.regexp;
           this.replace = config.replace || "";
           this.valid = !!this.search && (!this.regexp || validRegExp(this.search));
           this.unquoted = this.unquote(this.search);
           this.wholeWord = !!config.wholeWord;
       }
       /// @internal
       unquote(text) {
           return this.literal ? text :
               text.replace(/\\([nrt\\])/g, (_, ch) => ch == "n" ? "\n" : ch == "r" ? "\r" : ch == "t" ? "\t" : "\\");
       }
       /// Compare this query to another query.
       eq(other) {
           return this.search == other.search && this.replace == other.replace &&
               this.caseSensitive == other.caseSensitive && this.regexp == other.regexp &&
               this.wholeWord == other.wholeWord;
       }
       /// @internal
       create() {
           return this.regexp ? new RegExpQuery(this) : new StringQuery(this);
       }
       /// Get a search cursor for this query, searching through the given
       /// range in the given state.
       getCursor(state, from = 0, to) {
           let st = state.doc ? state : EditorState.create({ doc: state });
           if (to == null)
               to = st.doc.length;
           return this.regexp ? regexpCursor(this, st, from, to) : stringCursor(this, st, from, to);
       }
   }
   class QueryType {
       constructor(spec) {
           this.spec = spec;
       }
   }
   function stringCursor(spec, state, from, to) {
       return new SearchCursor(state.doc, spec.unquoted, from, to, spec.caseSensitive ? undefined : x => x.toLowerCase(), spec.wholeWord ? stringWordTest(state.doc, state.charCategorizer(state.selection.main.head)) : undefined);
   }
   function stringWordTest(doc, categorizer) {
       return (from, to, buf, bufPos) => {
           if (bufPos > from || bufPos + buf.length < to) {
               bufPos = Math.max(0, from - 2);
               buf = doc.sliceString(bufPos, Math.min(doc.length, to + 2));
           }
           return (categorizer(charBefore(buf, from - bufPos)) != CharCategory.Word ||
               categorizer(charAfter(buf, from - bufPos)) != CharCategory.Word) &&
               (categorizer(charAfter(buf, to - bufPos)) != CharCategory.Word ||
                   categorizer(charBefore(buf, to - bufPos)) != CharCategory.Word);
       };
   }
   class StringQuery extends QueryType {
       constructor(spec) {
           super(spec);
       }
       nextMatch(state, curFrom, curTo) {
           let cursor = stringCursor(this.spec, state, curTo, state.doc.length).nextOverlapping();
           if (cursor.done)
               cursor = stringCursor(this.spec, state, 0, curFrom).nextOverlapping();
           return cursor.done ? null : cursor.value;
       }
       // Searching in reverse is, rather than implementing an inverted search
       // cursor, done by scanning chunk after chunk forward.
       prevMatchInRange(state, from, to) {
           for (let pos = to;;) {
               let start = Math.max(from, pos - 10000 /* FindPrev.ChunkSize */ - this.spec.unquoted.length);
               let cursor = stringCursor(this.spec, state, start, pos), range = null;
               while (!cursor.nextOverlapping().done)
                   range = cursor.value;
               if (range)
                   return range;
               if (start == from)
                   return null;
               pos -= 10000 /* FindPrev.ChunkSize */;
           }
       }
       prevMatch(state, curFrom, curTo) {
           return this.prevMatchInRange(state, 0, curFrom) ||
               this.prevMatchInRange(state, curTo, state.doc.length);
       }
       getReplacement(_result) { return this.spec.unquote(this.spec.replace); }
       matchAll(state, limit) {
           let cursor = stringCursor(this.spec, state, 0, state.doc.length), ranges = [];
           while (!cursor.next().done) {
               if (ranges.length >= limit)
                   return null;
               ranges.push(cursor.value);
           }
           return ranges;
       }
       highlight(state, from, to, add) {
           let cursor = stringCursor(this.spec, state, Math.max(0, from - this.spec.unquoted.length), Math.min(to + this.spec.unquoted.length, state.doc.length));
           while (!cursor.next().done)
               add(cursor.value.from, cursor.value.to);
       }
   }
   function regexpCursor(spec, state, from, to) {
       return new RegExpCursor(state.doc, spec.search, {
           ignoreCase: !spec.caseSensitive,
           test: spec.wholeWord ? regexpWordTest(state.charCategorizer(state.selection.main.head)) : undefined
       }, from, to);
   }
   function charBefore(str, index) {
       return str.slice(findClusterBreak(str, index, false), index);
   }
   function charAfter(str, index) {
       return str.slice(index, findClusterBreak(str, index));
   }
   function regexpWordTest(categorizer) {
       return (_from, _to, match) => !match[0].length ||
           (categorizer(charBefore(match.input, match.index)) != CharCategory.Word ||
               categorizer(charAfter(match.input, match.index)) != CharCategory.Word) &&
               (categorizer(charAfter(match.input, match.index + match[0].length)) != CharCategory.Word ||
                   categorizer(charBefore(match.input, match.index + match[0].length)) != CharCategory.Word);
   }
   class RegExpQuery extends QueryType {
       nextMatch(state, curFrom, curTo) {
           let cursor = regexpCursor(this.spec, state, curTo, state.doc.length).next();
           if (cursor.done)
               cursor = regexpCursor(this.spec, state, 0, curFrom).next();
           return cursor.done ? null : cursor.value;
       }
       prevMatchInRange(state, from, to) {
           for (let size = 1;; size++) {
               let start = Math.max(from, to - size * 10000 /* FindPrev.ChunkSize */);
               let cursor = regexpCursor(this.spec, state, start, to), range = null;
               while (!cursor.next().done)
                   range = cursor.value;
               if (range && (start == from || range.from > start + 10))
                   return range;
               if (start == from)
                   return null;
           }
       }
       prevMatch(state, curFrom, curTo) {
           return this.prevMatchInRange(state, 0, curFrom) ||
               this.prevMatchInRange(state, curTo, state.doc.length);
       }
       getReplacement(result) {
           return this.spec.unquote(this.spec.replace.replace(/\$([$&\d+])/g, (m, i) => i == "$" ? "$"
               : i == "&" ? result.match[0]
                   : i != "0" && +i < result.match.length ? result.match[i]
                       : m));
       }
       matchAll(state, limit) {
           let cursor = regexpCursor(this.spec, state, 0, state.doc.length), ranges = [];
           while (!cursor.next().done) {
               if (ranges.length >= limit)
                   return null;
               ranges.push(cursor.value);
           }
           return ranges;
       }
       highlight(state, from, to, add) {
           let cursor = regexpCursor(this.spec, state, Math.max(0, from - 250 /* RegExp.HighlightMargin */), Math.min(to + 250 /* RegExp.HighlightMargin */, state.doc.length));
           while (!cursor.next().done)
               add(cursor.value.from, cursor.value.to);
       }
   }
   /// A state effect that updates the current search query. Note that
   /// this only has an effect if the search state has been initialized
   /// (by including [`search`](#search.search) in your configuration or
   /// by running [`openSearchPanel`](#search.openSearchPanel) at least
   /// once).
   const setSearchQuery = /*@__PURE__*/StateEffect.define();
   const togglePanel = /*@__PURE__*/StateEffect.define();
   const searchState = /*@__PURE__*/StateField.define({
       create(state) {
           return new SearchState(defaultQuery(state).create(), null);
       },
       update(value, tr) {
           for (let effect of tr.effects) {
               if (effect.is(setSearchQuery))
                   value = new SearchState(effect.value.create(), value.panel);
               else if (effect.is(togglePanel))
                   value = new SearchState(value.query, effect.value ? createSearchPanel : null);
           }
           return value;
       },
       provide: f => showPanel.from(f, val => val.panel)
   });
   /// Get the current search query from an editor state.
   function getSearchQuery(state) {
       let curState = state.field(searchState, false);
       return curState ? curState.query.spec : defaultQuery(state);
   }
   /// Query whether the search panel is open in the given editor state.
   function searchPanelOpen(state) {
       var _a;
       return ((_a = state.field(searchState, false)) === null || _a === void 0 ? void 0 : _a.panel) != null;
   }
   class SearchState {
       constructor(query, panel) {
           this.query = query;
           this.panel = panel;
       }
   }
   const matchMark = /*@__PURE__*/Decoration.mark({ class: "cm-searchMatch" }), selectedMatchMark = /*@__PURE__*/Decoration.mark({ class: "cm-searchMatch cm-searchMatch-selected" });
   const searchHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {
       constructor(view) {
           this.view = view;
           this.decorations = this.highlight(view.state.field(searchState));
       }
       update(update) {
           let state = update.state.field(searchState);
           if (state != update.startState.field(searchState) || update.docChanged || update.selectionSet || update.viewportChanged)
               this.decorations = this.highlight(state);
       }
       highlight({ query, panel }) {
           if (!panel || !query.spec.valid)
               return Decoration.none;
           let { view } = this;
           let builder = new RangeSetBuilder();
           for (let i = 0, ranges = view.visibleRanges, l = ranges.length; i < l; i++) {
               let { from, to } = ranges[i];
               while (i < l - 1 && to > ranges[i + 1].from - 2 * 250 /* RegExp.HighlightMargin */)
                   to = ranges[++i].to;
               query.highlight(view.state, from, to, (from, to) => {
                   let selected = view.state.selection.ranges.some(r => r.from == from && r.to == to);
                   builder.add(from, to, selected ? selectedMatchMark : matchMark);
               });
           }
           return builder.finish();
       }
   }, {
       decorations: v => v.decorations
   });
   function searchCommand(f) {
       return view => {
           let state = view.state.field(searchState, false);
           return state && state.query.spec.valid ? f(view, state) : openSearchPanel(view);
       };
   }
   /// Open the search panel if it isn't already open, and move the
   /// selection to the first match after the current main selection.
   /// Will wrap around to the start of the document when it reaches the
   /// end.
   const findNext = /*@__PURE__*/searchCommand((view, { query }) => {
       let { to } = view.state.selection.main;
       let next = query.nextMatch(view.state, to, to);
       if (!next)
           return false;
       let selection = EditorSelection.single(next.from, next.to);
       let config = view.state.facet(searchConfigFacet);
       view.dispatch({
           selection,
           effects: [announceMatch(view, next), config.scrollToMatch(selection.main, view)],
           userEvent: "select.search"
       });
       selectSearchInput(view);
       return true;
   });
   /// Move the selection to the previous instance of the search query,
   /// before the current main selection. Will wrap past the start
   /// of the document to start searching at the end again.
   const findPrevious = /*@__PURE__*/searchCommand((view, { query }) => {
       let { state } = view, { from } = state.selection.main;
       let prev = query.prevMatch(state, from, from);
       if (!prev)
           return false;
       let selection = EditorSelection.single(prev.from, prev.to);
       let config = view.state.facet(searchConfigFacet);
       view.dispatch({
           selection,
           effects: [announceMatch(view, prev), config.scrollToMatch(selection.main, view)],
           userEvent: "select.search"
       });
       selectSearchInput(view);
       return true;
   });
   /// Select all instances of the search query.
   const selectMatches = /*@__PURE__*/searchCommand((view, { query }) => {
       let ranges = query.matchAll(view.state, 1000);
       if (!ranges || !ranges.length)
           return false;
       view.dispatch({
           selection: EditorSelection.create(ranges.map(r => EditorSelection.range(r.from, r.to))),
           userEvent: "select.search.matches"
       });
       return true;
   });
   /// Select all instances of the currently selected text.
   const selectSelectionMatches = ({ state, dispatch }) => {
       let sel = state.selection;
       if (sel.ranges.length > 1 || sel.main.empty)
           return false;
       let { from, to } = sel.main;
       let ranges = [], main = 0;
       for (let cur = new SearchCursor(state.doc, state.sliceDoc(from, to)); !cur.next().done;) {
           if (ranges.length > 1000)
               return false;
           if (cur.value.from == from)
               main = ranges.length;
           ranges.push(EditorSelection.range(cur.value.from, cur.value.to));
       }
       dispatch(state.update({
           selection: EditorSelection.create(ranges, main),
           userEvent: "select.search.matches"
       }));
       return true;
   };
   /// Replace the current match of the search query.
   const replaceNext = /*@__PURE__*/searchCommand((view, { query }) => {
       let { state } = view, { from, to } = state.selection.main;
       if (state.readOnly)
           return false;
       let next = query.nextMatch(state, from, from);
       if (!next)
           return false;
       let changes = [], selection, replacement;
       let effects = [];
       if (next.from == from && next.to == to) {
           replacement = state.toText(query.getReplacement(next));
           changes.push({ from: next.from, to: next.to, insert: replacement });
           next = query.nextMatch(state, next.from, next.to);
           effects.push(EditorView.announce.of(state.phrase("replaced match on line $", state.doc.lineAt(from).number) + "."));
       }
       if (next) {
           let off = changes.length == 0 || changes[0].from >= next.to ? 0 : next.to - next.from - replacement.length;
           selection = EditorSelection.single(next.from - off, next.to - off);
           effects.push(announceMatch(view, next));
           effects.push(state.facet(searchConfigFacet).scrollToMatch(selection.main, view));
       }
       view.dispatch({
           changes, selection, effects,
           userEvent: "input.replace"
       });
       return true;
   });
   /// Replace all instances of the search query with the given
   /// replacement.
   const replaceAll = /*@__PURE__*/searchCommand((view, { query }) => {
       if (view.state.readOnly)
           return false;
       let changes = query.matchAll(view.state, 1e9).map(match => {
           let { from, to } = match;
           return { from, to, insert: query.getReplacement(match) };
       });
       if (!changes.length)
           return false;
       let announceText = view.state.phrase("replaced $ matches", changes.length) + ".";
       view.dispatch({
           changes,
           effects: EditorView.announce.of(announceText),
           userEvent: "input.replace.all"
       });
       return true;
   });
   function createSearchPanel(view) {
       return view.state.facet(searchConfigFacet).createPanel(view);
   }
   function defaultQuery(state, fallback) {
       var _a, _b, _c, _d, _e;
       let sel = state.selection.main;
       let selText = sel.empty || sel.to > sel.from + 100 ? "" : state.sliceDoc(sel.from, sel.to);
       if (fallback && !selText)
           return fallback;
       let config = state.facet(searchConfigFacet);
       return new SearchQuery({
           search: ((_a = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _a !== void 0 ? _a : config.literal) ? selText : selText.replace(/\n/g, "\\n"),
           caseSensitive: (_b = fallback === null || fallback === void 0 ? void 0 : fallback.caseSensitive) !== null && _b !== void 0 ? _b : config.caseSensitive,
           literal: (_c = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _c !== void 0 ? _c : config.literal,
           regexp: (_d = fallback === null || fallback === void 0 ? void 0 : fallback.regexp) !== null && _d !== void 0 ? _d : config.regexp,
           wholeWord: (_e = fallback === null || fallback === void 0 ? void 0 : fallback.wholeWord) !== null && _e !== void 0 ? _e : config.wholeWord
       });
   }
   function getSearchInput(view) {
       let panel = getPanel(view, createSearchPanel);
       return panel && panel.dom.querySelector("[main-field]");
   }
   function selectSearchInput(view) {
       let input = getSearchInput(view);
       if (input && input == view.root.activeElement)
           input.select();
   }
   /// Make sure the search panel is open and focused.
   const openSearchPanel = view => {
       let state = view.state.field(searchState, false);
       if (state && state.panel) {
           let searchInput = getSearchInput(view);
           if (searchInput && searchInput != view.root.activeElement) {
               let query = defaultQuery(view.state, state.query.spec);
               if (query.valid)
                   view.dispatch({ effects: setSearchQuery.of(query) });
               searchInput.focus();
               searchInput.select();
           }
       }
       else {
           view.dispatch({ effects: [
                   togglePanel.of(true),
                   state ? setSearchQuery.of(defaultQuery(view.state, state.query.spec)) : StateEffect.appendConfig.of(searchExtensions)
               ] });
       }
       return true;
   };
   /// Close the search panel.
   const closeSearchPanel = view => {
       let state = view.state.field(searchState, false);
       if (!state || !state.panel)
           return false;
       let panel = getPanel(view, createSearchPanel);
       if (panel && panel.dom.contains(view.root.activeElement))
           view.focus();
       view.dispatch({ effects: togglePanel.of(false) });
       return true;
   };
   /// Default search-related key bindings.
   ///
   ///  - Mod-f: [`openSearchPanel`](#search.openSearchPanel)
   ///  - F3, Mod-g: [`findNext`](#search.findNext)
   ///  - Shift-F3, Shift-Mod-g: [`findPrevious`](#search.findPrevious)
   ///  - Alt-g: [`gotoLine`](#search.gotoLine)
   ///  - Mod-d: [`selectNextOccurrence`](#search.selectNextOccurrence)
   const searchKeymap = [
       { key: "Mod-f", run: openSearchPanel, scope: "editor search-panel" },
       { key: "F3", run: findNext, shift: findPrevious, scope: "editor search-panel", preventDefault: true },
       { key: "Mod-g", run: findNext, shift: findPrevious, scope: "editor search-panel", preventDefault: true },
       { key: "Escape", run: closeSearchPanel, scope: "editor search-panel" },
       { key: "Mod-Shift-l", run: selectSelectionMatches },
       { key: "Alt-g", run: gotoLine },
       { key: "Mod-d", run: selectNextOccurrence, preventDefault: true },
   ];
   class SearchPanel {
       constructor(view) {
           this.view = view;
           let query = this.query = view.state.field(searchState).query.spec;
           this.commit = this.commit.bind(this);
           this.searchField = crelt("input", {
               value: query.search,
               placeholder: phrase(view, "Find"),
               "aria-label": phrase(view, "Find"),
               class: "cm-textfield",
               name: "search",
               form: "",
               "main-field": "true",
               onchange: this.commit,
               onkeyup: this.commit,
               tabindex: "1"
           });
           this.replaceField = crelt("input", {
               value: query.replace,
               placeholder: phrase(view, "Replace"),
               "aria-label": phrase(view, "Replace"),
               class: "cm-textfield",
               name: "replace",
               form: "",
               onchange: this.commit,
               onkeyup: this.commit,
               tabindex: "1"
           });
           this.caseField = crelt("input", {
               type: "checkbox",
               name: "case",
               form: "",
               checked: query.caseSensitive,
               onchange: this.commit
           });
           this.reField = crelt("input", {
               type: "checkbox",
               name: "re",
               form: "",
               checked: query.regexp,
               onchange: this.commit
           });
           this.wordField = crelt("input", {
               type: "checkbox",
               name: "word",
               form: "",
               checked: query.wholeWord,
               onchange: this.commit
           });
           function button(name, onclick, content) {
               return crelt("button", { class: "cm-button", name, onclick, type: "button", "aria-label": phrase(view, name) }, content);
           }
           this.dom = crelt("div", { onkeydown: (e) => this.keydown(e), class: "cm-search" }, [
               this.searchField,
               button("next", () => findNext(view), [document.createRange().createContextualFragment('<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16"><path fill="currentColor" fill-rule="evenodd" d="m3.147 9l5 5h.707l5-5l-.707-.707L9 12.439V2H8v10.44L3.854 8.292L3.147 9z" clip-rule="evenodd"/></svg>')]),
               button("prev", () => findPrevious(view), [document.createRange().createContextualFragment('<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16"><path fill="currentColor" fill-rule="evenodd" d="m13.854 7l-5-5h-.707l-5 5l.707.707L8 3.561V14h1V3.56l4.146 4.147l.708-.707z" clip-rule="evenodd"/></svg>')]),
               button("select", () => selectMatches(view), [document.createRange().createContextualFragment('<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16"><g fill="currentColor"><path d="M9 9H4v1h5V9z"/><path d="M7 12V7H6v5h1z"/><path fill-rule="evenodd" d="m5 3l1-1h7l1 1v7l-1 1h-2v2l-1 1H3l-1-1V6l1-1h2V3zm1 2h4l1 1v4h2V3H6v2zm4 1H3v7h7V6z" clip-rule="evenodd"/></g></svg>')]),
               crelt("label", null, [this.caseField, document.createRange().createContextualFragment('<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16"><path fill="currentColor" d="M8.854 11.702h-1l-.816-2.159H3.772l-.768 2.16H2L4.954 4h.935l2.965 7.702Zm-2.111-2.97L5.534 5.45a3.142 3.142 0 0 1-.118-.515h-.021c-.036.218-.077.39-.124.515L4.073 8.732h2.67Zm7.013 2.97h-.88v-.86h-.022c-.383.66-.947.99-1.692.99c-.548 0-.978-.146-1.29-.436c-.307-.29-.461-.675-.461-1.155c0-1.027.605-1.625 1.815-1.794l1.65-.23c0-.935-.379-1.403-1.134-1.403c-.663 0-1.26.226-1.794.677V6.59c.54-.344 1.164-.516 1.87-.516c1.292 0 1.938.684 1.938 2.052v3.577Zm-.88-2.782l-1.327.183c-.409.057-.717.159-.924.306c-.208.143-.312.399-.312.768c0 .268.095.489.285.66c.193.169.45.253.768.253a1.41 1.41 0 0 0 1.08-.457c.286-.308.43-.696.43-1.165V8.92Z"/></svg>')]),
               ...view.state.readOnly ? [] : [
                   crelt("br"),
                   this.replaceField,
                   button("replace", () => replaceNext(view), [document.createRange().createContextualFragment('<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16"><path fill="currentColor" fill-rule="evenodd" d="m3.221 3.739l2.261 2.269L7.7 3.784l-.7-.7l-1.012 1.007l-.008-1.6a.523.523 0 0 1 .5-.526H8V1H6.48A1.482 1.482 0 0 0 5 2.489V4.1L3.927 3.033l-.706.706zm6.67 1.794h.01c.183.311.451.467.806.467c.393 0 .706-.168.94-.503c.236-.335.353-.78.353-1.333c0-.511-.1-.913-.301-1.207c-.201-.295-.488-.442-.86-.442c-.405 0-.718.194-.938.581h-.01V1H9v4.919h.89v-.386zm-.015-1.061v-.34c0-.248.058-.448.175-.601a.54.54 0 0 1 .445-.23a.49.49 0 0 1 .436.233c.104.154.155.368.155.643c0 .33-.056.587-.169.768a.524.524 0 0 1-.47.27a.495.495 0 0 1-.411-.211a.853.853 0 0 1-.16-.532zM9 12.769c-.256.154-.625.231-1.108.231c-.563 0-1.02-.178-1.369-.533c-.349-.355-.523-.813-.523-1.374c0-.648.186-1.158.56-1.53c.374-.376.875-.563 1.5-.563c.433 0 .746.06.94.179v.998a1.26 1.26 0 0 0-.792-.276c-.325 0-.583.1-.774.298c-.19.196-.283.468-.283.816c0 .338.09.603.272.797c.182.191.431.287.749.287c.282 0 .558-.092.828-.276v.946zM4 7L3 8v6l1 1h7l1-1V8l-1-1H4zm0 1h7v6H4V8z" clip-rule="evenodd"/></svg>')]),
                   button("replaceAll", () => replaceAll(view), [document.createRange().createContextualFragment('<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16"><path fill="currentColor" fill-rule="evenodd" d="M11.6 2.677c.147-.31.356-.465.626-.465c.248 0 .44.118.573.353c.134.236.201.557.201.966c0 .443-.078.798-.235 1.067c-.156.268-.365.402-.627.402c-.237 0-.416-.125-.537-.374h-.008v.31H11V1h.593v1.677h.008zm-.016 1.1a.78.78 0 0 0 .107.426c.071.113.163.169.274.169c.136 0 .24-.072.314-.216c.075-.145.113-.35.113-.615c0-.22-.035-.39-.104-.514c-.067-.124-.164-.187-.29-.187c-.12 0-.219.062-.297.185a.886.886 0 0 0-.117.48v.272zM4.12 7.695L2 5.568l.662-.662l1.006 1v-1.51A1.39 1.39 0 0 1 5.055 3H7.4v.905H5.055a.49.49 0 0 0-.468.493l.007 1.5l.949-.944l.656.656l-2.08 2.085zM9.356 4.93H10V3.22C10 2.408 9.685 2 9.056 2c-.135 0-.285.024-.45.073a1.444 1.444 0 0 0-.388.167v.665c.237-.203.487-.304.75-.304c.261 0 .392.156.392.469l-.6.103c-.506.086-.76.406-.76.961c0 .263.061.473.183.631A.61.61 0 0 0 8.69 5c.29 0 .509-.16.657-.48h.009v.41zm.004-1.355v.193a.75.75 0 0 1-.12.436a.368.368 0 0 1-.313.17a.276.276 0 0 1-.22-.095a.38.38 0 0 1-.08-.248c0-.222.11-.351.332-.389l.4-.067zM7 12.93h-.644v-.41h-.009c-.148.32-.367.48-.657.48a.61.61 0 0 1-.507-.235c-.122-.158-.183-.368-.183-.63c0-.556.254-.876.76-.962l.6-.103c0-.313-.13-.47-.392-.47c-.263 0-.513.102-.75.305v-.665c.095-.063.224-.119.388-.167c.165-.049.315-.073.45-.073c.63 0 .944.407.944 1.22v1.71zm-.64-1.162v-.193l-.4.068c-.222.037-.333.166-.333.388c0 .1.027.183.08.248a.276.276 0 0 0 .22.095a.368.368 0 0 0 .312-.17c.08-.116.12-.26.12-.436zM9.262 13c.321 0 .568-.058.738-.173v-.71a.9.9 0 0 1-.552.207a.619.619 0 0 1-.5-.215c-.12-.145-.181-.345-.181-.598c0-.26.063-.464.189-.612a.644.644 0 0 1 .516-.223c.194 0 .37.069.528.207v-.749c-.129-.09-.338-.134-.626-.134c-.417 0-.751.14-1.001.422c-.249.28-.373.662-.373 1.148c0 .42.116.764.349 1.03c.232.267.537.4.913.4zM2 9l1-1h9l1 1v5l-1 1H3l-1-1V9zm1 0v5h9V9H3zm3-2l1-1h7l1 1v5l-1 1V7H6z" clip-rule="evenodd"/></svg>')]),
                   crelt("label", null, [this.reField, document.createRange().createContextualFragment('<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16"><path fill="currentColor" fill-rule="evenodd" d="M10.012 2h.976v3.113l2.56-1.557l.486.885L11.47 6l2.564 1.559l-.485.885l-2.561-1.557V10h-.976V6.887l-2.56 1.557l-.486-.885L9.53 6L6.966 4.441l.485-.885l2.561 1.557V2zM2 10h4v4H2v-4z" clip-rule="evenodd"/></svg>')]),
               ],
               crelt("label", null, [this.wordField, document.createRange().createContextualFragment('<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16"><g fill="currentColor"><path fill-rule="evenodd" d="M0 11h1v2h14v-2h1v3H0v-3Z" clip-rule="evenodd"/><path d="M6.84 11h-.88v-.86h-.022c-.383.66-.947.989-1.692.989c-.548 0-.977-.145-1.289-.435c-.308-.29-.462-.675-.462-1.155c0-1.028.605-1.626 1.816-1.794l1.649-.23c0-.935-.378-1.403-1.134-1.403c-.662 0-1.26.226-1.794.677v-.902c.541-.344 1.164-.516 1.87-.516c1.292 0 1.938.684 1.938 2.052V11Zm-.88-2.782L4.633 8.4c-.408.058-.716.16-.924.307c-.208.143-.311.399-.311.768c0 .268.095.488.284.66c.194.168.45.253.768.253a1.41 1.41 0 0 0 1.08-.457c.286-.308.43-.696.43-1.165v-.548Zm3.388 1.987h-.022V11h-.88V2.857h.88v3.61h.021c.434-.73 1.068-1.096 1.902-1.096c.705 0 1.257.247 1.654.741c.401.49.602 1.15.602 1.977c0 .92-.224 1.658-.672 2.213c-.447.551-1.06.827-1.837.827c-.726 0-1.276-.308-1.649-.924Zm-.022-2.218v.768c0 .455.147.841.44 1.16c.298.315.674.473 1.128.473c.534 0 .951-.204 1.252-.613c.304-.408.456-.975.456-1.702c0-.613-.141-1.092-.424-1.44c-.283-.347-.666-.52-1.15-.52c-.511 0-.923.178-1.235.536c-.311.355-.467.8-.467 1.338Z"/></g></svg>')]),
               crelt("button", {
                   name: "close",
                   onclick: () => closeSearchPanel(view),
                   "aria-label": phrase(view, "close"),
                   type: "button"
               }, ["×"])
           ]);
       }
       commit() {
           let query = new SearchQuery({
               search: this.searchField.value,
               caseSensitive: this.caseField.checked,
               regexp: this.reField.checked,
               wholeWord: this.wordField.checked,
               replace: this.replaceField.value,
           });
           if (!query.eq(this.query)) {
               this.query = query;
               this.view.dispatch({ effects: setSearchQuery.of(query) });
           }
       }
       keydown(e) {
           if (runScopeHandlers(this.view, e, "search-panel")) {
               e.preventDefault();
           }
           else if (e.keyCode == 13 && e.target == this.searchField) {
               e.preventDefault();
               (e.shiftKey ? findPrevious : findNext)(this.view);
           }
           else if (e.keyCode == 13 && e.target == this.replaceField) {
               e.preventDefault();
               replaceNext(this.view);
           }
       }
       update(update) {
           for (let tr of update.transactions)
               for (let effect of tr.effects) {
                   if (effect.is(setSearchQuery) && !effect.value.eq(this.query))
                       this.setQuery(effect.value);
               }
       }
       setQuery(query) {
           this.query = query;
           this.searchField.value = query.search;
           this.replaceField.value = query.replace;
           this.caseField.checked = query.caseSensitive;
           this.reField.checked = query.regexp;
           this.wordField.checked = query.wholeWord;
       }
       mount() {
           this.searchField.select();
       }
       get pos() { return 80; }
       get top() { return this.view.state.facet(searchConfigFacet).top; }
   }
   function phrase(view, phrase) { return view.state.phrase(phrase); }
   const AnnounceMargin = 30;
   const Break = /[\s\.,:;?!]/;
   function announceMatch(view, { from, to }) {
       let line = view.state.doc.lineAt(from), lineEnd = view.state.doc.lineAt(to).to;
       let start = Math.max(line.from, from - AnnounceMargin), end = Math.min(lineEnd, to + AnnounceMargin);
       let text = view.state.sliceDoc(start, end);
       if (start != line.from) {
           for (let i = 0; i < AnnounceMargin; i++)
               if (!Break.test(text[i + 1]) && Break.test(text[i])) {
                   text = text.slice(i);
                   break;
               }
       }
       if (end != lineEnd) {
           for (let i = text.length - 1; i > text.length - AnnounceMargin; i--)
               if (!Break.test(text[i - 1]) && Break.test(text[i])) {
                   text = text.slice(0, i);
                   break;
               }
       }
       return EditorView.announce.of(`${view.state.phrase("current match")}. ${text} ${view.state.phrase("on line")} ${line.number}.`);
   }
   const baseTheme = /*@__PURE__*/EditorView.baseTheme({
       ".cm-panel.cm-search": {
           padding: "2px 6px 4px",
           position: "relative",
           "& [name=close]": {
               position: "absolute",
               top: "0",
               right: "4px",
               backgroundColor: "inherit",
               border: "none",
               font: "inherit",
               padding: 0,
               margin: 0
           },
           "& input, & button, & label": {
               margin: ".2em .6em .2em 0"
           },
           "& input[type=checkbox]": {
               marginRight: ".2em"
           },
           "& label": {
               fontSize: "80%",
               whiteSpace: "pre"
           }
       },
       "&light .cm-searchMatch": { backgroundColor: "#ffff0054" },
       "&dark .cm-searchMatch": { backgroundColor: "#00ffff8a" },
       "&light .cm-searchMatch-selected": { backgroundColor: "#ff6a0054" },
       "&dark .cm-searchMatch-selected": { backgroundColor: "#ff00ff8a" }
   });
   const searchExtensions = [
       searchState,
       /*@__PURE__*/Prec.lowest(searchHighlighter),
       baseTheme
   ];

   var search$3 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      RegExpCursor: RegExpCursor,
      SearchCursor: SearchCursor,
      SearchQuery: SearchQuery,
      closeSearchPanel: closeSearchPanel,
      findNext: findNext,
      findPrevious: findPrevious,
      getSearchQuery: getSearchQuery,
      gotoLine: gotoLine,
      highlightSelectionMatches: highlightSelectionMatches,
      openSearchPanel: openSearchPanel,
      replaceAll: replaceAll,
      replaceNext: replaceNext,
      search: search$2,
      searchKeymap: searchKeymap,
      searchPanelOpen: searchPanelOpen,
      selectMatches: selectMatches,
      selectNextOccurrence: selectNextOccurrence,
      selectSelectionMatches: selectSelectionMatches,
      setSearchQuery: setSearchQuery
   });

   class CompositeBlock {
       constructor(type, 
       // Used for indentation in list items, markup character in lists
       value, from, hash, end, children, positions) {
           this.type = type;
           this.value = value;
           this.from = from;
           this.hash = hash;
           this.end = end;
           this.children = children;
           this.positions = positions;
           this.hashProp = [[NodeProp.contextHash, hash]];
       }
       static create(type, value, from, parentHash, end) {
           let hash = (parentHash + (parentHash << 8) + type + (value << 4)) | 0;
           return new CompositeBlock(type, value, from, hash, end, [], []);
       }
       addChild(child, pos) {
           if (child.prop(NodeProp.contextHash) != this.hash)
               child = new Tree(child.type, child.children, child.positions, child.length, this.hashProp);
           this.children.push(child);
           this.positions.push(pos);
       }
       toTree(nodeSet, end = this.end) {
           let last = this.children.length - 1;
           if (last >= 0)
               end = Math.max(end, this.positions[last] + this.children[last].length + this.from);
           let tree = new Tree(nodeSet.types[this.type], this.children, this.positions, end - this.from).balance({
               makeTree: (children, positions, length) => new Tree(NodeType.none, children, positions, length, this.hashProp)
           });
           return tree;
       }
   }
   var Type$1;
   (function (Type) {
       Type[Type["Document"] = 1] = "Document";
       Type[Type["CodeBlock"] = 2] = "CodeBlock";
       Type[Type["FencedCode"] = 3] = "FencedCode";
       Type[Type["Blockquote"] = 4] = "Blockquote";
       Type[Type["HorizontalRule"] = 5] = "HorizontalRule";
       Type[Type["BulletList"] = 6] = "BulletList";
       Type[Type["OrderedList"] = 7] = "OrderedList";
       Type[Type["ListItem"] = 8] = "ListItem";
       Type[Type["ATXHeading1"] = 9] = "ATXHeading1";
       Type[Type["ATXHeading2"] = 10] = "ATXHeading2";
       Type[Type["ATXHeading3"] = 11] = "ATXHeading3";
       Type[Type["ATXHeading4"] = 12] = "ATXHeading4";
       Type[Type["ATXHeading5"] = 13] = "ATXHeading5";
       Type[Type["ATXHeading6"] = 14] = "ATXHeading6";
       Type[Type["SetextHeading1"] = 15] = "SetextHeading1";
       Type[Type["SetextHeading2"] = 16] = "SetextHeading2";
       Type[Type["HTMLBlock"] = 17] = "HTMLBlock";
       Type[Type["LinkReference"] = 18] = "LinkReference";
       Type[Type["Paragraph"] = 19] = "Paragraph";
       Type[Type["CommentBlock"] = 20] = "CommentBlock";
       Type[Type["ProcessingInstructionBlock"] = 21] = "ProcessingInstructionBlock";
       // Inline
       Type[Type["Escape"] = 22] = "Escape";
       Type[Type["Entity"] = 23] = "Entity";
       Type[Type["HardBreak"] = 24] = "HardBreak";
       Type[Type["Emphasis"] = 25] = "Emphasis";
       Type[Type["StrongEmphasis"] = 26] = "StrongEmphasis";
       Type[Type["Link"] = 27] = "Link";
       Type[Type["Image"] = 28] = "Image";
       Type[Type["InlineCode"] = 29] = "InlineCode";
       Type[Type["HTMLTag"] = 30] = "HTMLTag";
       Type[Type["Comment"] = 31] = "Comment";
       Type[Type["ProcessingInstruction"] = 32] = "ProcessingInstruction";
       Type[Type["URL"] = 33] = "URL";
       // Smaller tokens
       Type[Type["HeaderMark"] = 34] = "HeaderMark";
       Type[Type["QuoteMark"] = 35] = "QuoteMark";
       Type[Type["ListMark"] = 36] = "ListMark";
       Type[Type["LinkMark"] = 37] = "LinkMark";
       Type[Type["EmphasisMark"] = 38] = "EmphasisMark";
       Type[Type["CodeMark"] = 39] = "CodeMark";
       Type[Type["CodeText"] = 40] = "CodeText";
       Type[Type["CodeInfo"] = 41] = "CodeInfo";
       Type[Type["LinkTitle"] = 42] = "LinkTitle";
       Type[Type["LinkLabel"] = 43] = "LinkLabel";
   })(Type$1 || (Type$1 = {}));
   /// Data structure used to accumulate a block's content during [leaf
   /// block parsing](#BlockParser.leaf).
   class LeafBlock {
       /// @internal
       constructor(
       /// The start position of the block.
       start, 
       /// The block's text content.
       content) {
           this.start = start;
           this.content = content;
           /// @internal
           this.marks = [];
           /// The block parsers active for this block.
           this.parsers = [];
       }
   }
   /// Data structure used during block-level per-line parsing.
   class Line {
       constructor() {
           /// The line's full text.
           this.text = "";
           /// The base indent provided by the composite contexts (that have
           /// been handled so far).
           this.baseIndent = 0;
           /// The string position corresponding to the base indent.
           this.basePos = 0;
           /// The number of contexts handled @internal
           this.depth = 0;
           /// Any markers (i.e. block quote markers) parsed for the contexts. @internal
           this.markers = [];
           /// The position of the next non-whitespace character beyond any
           /// list, blockquote, or other composite block markers.
           this.pos = 0;
           /// The column of the next non-whitespace character.
           this.indent = 0;
           /// The character code of the character after `pos`.
           this.next = -1;
       }
       /// @internal
       forward() {
           if (this.basePos > this.pos)
               this.forwardInner();
       }
       /// @internal
       forwardInner() {
           let newPos = this.skipSpace(this.basePos);
           this.indent = this.countIndent(newPos, this.pos, this.indent);
           this.pos = newPos;
           this.next = newPos == this.text.length ? -1 : this.text.charCodeAt(newPos);
       }
       /// Skip whitespace after the given position, return the position of
       /// the next non-space character or the end of the line if there's
       /// only space after `from`.
       skipSpace(from) { return skipSpace(this.text, from); }
       /// @internal
       reset(text) {
           this.text = text;
           this.baseIndent = this.basePos = this.pos = this.indent = 0;
           this.forwardInner();
           this.depth = 1;
           while (this.markers.length)
               this.markers.pop();
       }
       /// Move the line's base position forward to the given position.
       /// This should only be called by composite [block
       /// parsers](#BlockParser.parse) or [markup skipping
       /// functions](#NodeSpec.composite).
       moveBase(to) {
           this.basePos = to;
           this.baseIndent = this.countIndent(to, this.pos, this.indent);
       }
       /// Move the line's base position forward to the given _column_.
       moveBaseColumn(indent) {
           this.baseIndent = indent;
           this.basePos = this.findColumn(indent);
       }
       /// Store a composite-block-level marker. Should be called from
       /// [markup skipping functions](#NodeSpec.composite) when they
       /// consume any non-whitespace characters.
       addMarker(elt) {
           this.markers.push(elt);
       }
       /// Find the column position at `to`, optionally starting at a given
       /// position and column.
       countIndent(to, from = 0, indent = 0) {
           for (let i = from; i < to; i++)
               indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;
           return indent;
       }
       /// Find the position corresponding to the given column.
       findColumn(goal) {
           let i = 0;
           for (let indent = 0; i < this.text.length && indent < goal; i++)
               indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;
           return i;
       }
       /// @internal
       scrub() {
           if (!this.baseIndent)
               return this.text;
           let result = "";
           for (let i = 0; i < this.basePos; i++)
               result += " ";
           return result + this.text.slice(this.basePos);
       }
   }
   function skipForList(bl, cx, line) {
       if (line.pos == line.text.length ||
           (bl != cx.block && line.indent >= cx.stack[line.depth + 1].value + line.baseIndent))
           return true;
       if (line.indent >= line.baseIndent + 4)
           return false;
       let size = (bl.type == Type$1.OrderedList ? isOrderedList : isBulletList)(line, cx, false);
       return size > 0 &&
           (bl.type != Type$1.BulletList || isHorizontalRule(line, cx, false) < 0) &&
           line.text.charCodeAt(line.pos + size - 1) == bl.value;
   }
   const DefaultSkipMarkup = {
       [Type$1.Blockquote](bl, cx, line) {
           if (line.next != 62 /* '>' */)
               return false;
           line.markers.push(elt(Type$1.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1));
           line.moveBase(line.pos + (space$7(line.text.charCodeAt(line.pos + 1)) ? 2 : 1));
           bl.end = cx.lineStart + line.text.length;
           return true;
       },
       [Type$1.ListItem](bl, _cx, line) {
           if (line.indent < line.baseIndent + bl.value && line.next > -1)
               return false;
           line.moveBaseColumn(line.baseIndent + bl.value);
           return true;
       },
       [Type$1.OrderedList]: skipForList,
       [Type$1.BulletList]: skipForList,
       [Type$1.Document]() { return true; }
   };
   function space$7(ch) { return ch == 32 || ch == 9 || ch == 10 || ch == 13; }
   function skipSpace(line, i = 0) {
       while (i < line.length && space$7(line.charCodeAt(i)))
           i++;
       return i;
   }
   function skipSpaceBack(line, i, to) {
       while (i > to && space$7(line.charCodeAt(i - 1)))
           i--;
       return i;
   }
   function isFencedCode(line) {
       if (line.next != 96 && line.next != 126 /* '`~' */)
           return -1;
       let pos = line.pos + 1;
       while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)
           pos++;
       if (pos < line.pos + 3)
           return -1;
       if (line.next == 96)
           for (let i = pos; i < line.text.length; i++)
               if (line.text.charCodeAt(i) == 96)
                   return -1;
       return pos;
   }
   function isBlockquote(line) {
       return line.next != 62 /* '>' */ ? -1 : line.text.charCodeAt(line.pos + 1) == 32 ? 2 : 1;
   }
   function isHorizontalRule(line, cx, breaking) {
       if (line.next != 42 && line.next != 45 && line.next != 95 /* '_-*' */)
           return -1;
       let count = 1;
       for (let pos = line.pos + 1; pos < line.text.length; pos++) {
           let ch = line.text.charCodeAt(pos);
           if (ch == line.next)
               count++;
           else if (!space$7(ch))
               return -1;
       }
       // Setext headers take precedence
       if (breaking && line.next == 45 && isSetextUnderline(line) > -1 && line.depth == cx.stack.length)
           return -1;
       return count < 3 ? -1 : 1;
   }
   function inList$1(cx, type) {
       for (let i = cx.stack.length - 1; i >= 0; i--)
           if (cx.stack[i].type == type)
               return true;
       return false;
   }
   function isBulletList(line, cx, breaking) {
       return (line.next == 45 || line.next == 43 || line.next == 42 /* '-+*' */) &&
           (line.pos == line.text.length - 1 || space$7(line.text.charCodeAt(line.pos + 1))) &&
           (!breaking || inList$1(cx, Type$1.BulletList) || line.skipSpace(line.pos + 2) < line.text.length) ? 1 : -1;
   }
   function isOrderedList(line, cx, breaking) {
       let pos = line.pos, next = line.next;
       for (;;) {
           if (next >= 48 && next <= 57 /* '0-9' */)
               pos++;
           else
               break;
           if (pos == line.text.length)
               return -1;
           next = line.text.charCodeAt(pos);
       }
       if (pos == line.pos || pos > line.pos + 9 ||
           (next != 46 && next != 41 /* '.)' */) ||
           (pos < line.text.length - 1 && !space$7(line.text.charCodeAt(pos + 1))) ||
           breaking && !inList$1(cx, Type$1.OrderedList) &&
               (line.skipSpace(pos + 1) == line.text.length || pos > line.pos + 1 || line.next != 49 /* '1' */))
           return -1;
       return pos + 1 - line.pos;
   }
   function isAtxHeading(line) {
       if (line.next != 35 /* '#' */)
           return -1;
       let pos = line.pos + 1;
       while (pos < line.text.length && line.text.charCodeAt(pos) == 35)
           pos++;
       if (pos < line.text.length && line.text.charCodeAt(pos) != 32)
           return -1;
       let size = pos - line.pos;
       return size > 6 ? -1 : size;
   }
   function isSetextUnderline(line) {
       if (line.next != 45 && line.next != 61 /* '-=' */ || line.indent >= line.baseIndent + 4)
           return -1;
       let pos = line.pos + 1;
       while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)
           pos++;
       let end = pos;
       while (pos < line.text.length && space$7(line.text.charCodeAt(pos)))
           pos++;
       return pos == line.text.length ? end : -1;
   }
   const EmptyLine = /^[ \t]*$/, CommentEnd = /-->/, ProcessingEnd = /\?>/;
   const HTMLBlockStyle = [
       [/^<(?:script|pre|style)(?:\s|>|$)/i, /<\/(?:script|pre|style)>/i],
       [/^\s*<!--/, CommentEnd],
       [/^\s*<\?/, ProcessingEnd],
       [/^\s*<![A-Z]/, />/],
       [/^\s*<!\[CDATA\[/, /\]\]>/],
       [/^\s*<\/?(?:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?:\s|\/?>|$)/i, EmptyLine],
       [/^\s*(?:<\/[a-z][\w-]*\s*>|<[a-z][\w-]*(\s+[a-z:_][\w-.]*(?:\s*=\s*(?:[^\s"'=<>`]+|'[^']*'|"[^"]*"))?)*\s*>)\s*$/i, EmptyLine]
   ];
   function isHTMLBlock(line, _cx, breaking) {
       if (line.next != 60 /* '<' */)
           return -1;
       let rest = line.text.slice(line.pos);
       for (let i = 0, e = HTMLBlockStyle.length - (breaking ? 1 : 0); i < e; i++)
           if (HTMLBlockStyle[i][0].test(rest))
               return i;
       return -1;
   }
   function getListIndent(line, pos) {
       let indentAfter = line.countIndent(pos, line.pos, line.indent);
       let indented = line.countIndent(line.skipSpace(pos), pos, indentAfter);
       return indented >= indentAfter + 5 ? indentAfter + 1 : indented;
   }
   function addCodeText(marks, from, to) {
       let last = marks.length - 1;
       if (last >= 0 && marks[last].to == from && marks[last].type == Type$1.CodeText)
           marks[last].to = to;
       else
           marks.push(elt(Type$1.CodeText, from, to));
   }
   // Rules for parsing blocks. A return value of false means the rule
   // doesn't apply here, true means it does. When true is returned and
   // `p.line` has been updated, the rule is assumed to have consumed a
   // leaf block. Otherwise, it is assumed to have opened a context.
   const DefaultBlockParsers = {
       LinkReference: undefined,
       IndentedCode(cx, line) {
           let base = line.baseIndent + 4;
           if (line.indent < base)
               return false;
           let start = line.findColumn(base);
           let from = cx.lineStart + start, to = cx.lineStart + line.text.length;
           let marks = [], pendingMarks = [];
           addCodeText(marks, from, to);
           while (cx.nextLine() && line.depth >= cx.stack.length) {
               if (line.pos == line.text.length) { // Empty
                   addCodeText(pendingMarks, cx.lineStart - 1, cx.lineStart);
                   for (let m of line.markers)
                       pendingMarks.push(m);
               }
               else if (line.indent < base) {
                   break;
               }
               else {
                   if (pendingMarks.length) {
                       for (let m of pendingMarks) {
                           if (m.type == Type$1.CodeText)
                               addCodeText(marks, m.from, m.to);
                           else
                               marks.push(m);
                       }
                       pendingMarks = [];
                   }
                   addCodeText(marks, cx.lineStart - 1, cx.lineStart);
                   for (let m of line.markers)
                       marks.push(m);
                   to = cx.lineStart + line.text.length;
                   let codeStart = cx.lineStart + line.findColumn(line.baseIndent + 4);
                   if (codeStart < to)
                       addCodeText(marks, codeStart, to);
               }
           }
           if (pendingMarks.length) {
               pendingMarks = pendingMarks.filter(m => m.type != Type$1.CodeText);
               if (pendingMarks.length)
                   line.markers = pendingMarks.concat(line.markers);
           }
           cx.addNode(cx.buffer.writeElements(marks, -from).finish(Type$1.CodeBlock, to - from), from);
           return true;
       },
       FencedCode(cx, line) {
           let fenceEnd = isFencedCode(line);
           if (fenceEnd < 0)
               return false;
           let from = cx.lineStart + line.pos, ch = line.next, len = fenceEnd - line.pos;
           let infoFrom = line.skipSpace(fenceEnd), infoTo = skipSpaceBack(line.text, line.text.length, infoFrom);
           let marks = [elt(Type$1.CodeMark, from, from + len)];
           if (infoFrom < infoTo)
               marks.push(elt(Type$1.CodeInfo, cx.lineStart + infoFrom, cx.lineStart + infoTo));
           for (let first = true; cx.nextLine() && line.depth >= cx.stack.length; first = false) {
               let i = line.pos;
               if (line.indent - line.baseIndent < 4)
                   while (i < line.text.length && line.text.charCodeAt(i) == ch)
                       i++;
               if (i - line.pos >= len && line.skipSpace(i) == line.text.length) {
                   for (let m of line.markers)
                       marks.push(m);
                   marks.push(elt(Type$1.CodeMark, cx.lineStart + line.pos, cx.lineStart + i));
                   cx.nextLine();
                   break;
               }
               else {
                   if (!first)
                       addCodeText(marks, cx.lineStart - 1, cx.lineStart);
                   for (let m of line.markers)
                       marks.push(m);
                   let textStart = cx.lineStart + line.basePos, textEnd = cx.lineStart + line.text.length;
                   if (textStart < textEnd)
                       addCodeText(marks, textStart, textEnd);
               }
           }
           cx.addNode(cx.buffer.writeElements(marks, -from)
               .finish(Type$1.FencedCode, cx.prevLineEnd() - from), from);
           return true;
       },
       Blockquote(cx, line) {
           let size = isBlockquote(line);
           if (size < 0)
               return false;
           cx.startContext(Type$1.Blockquote, line.pos);
           cx.addNode(Type$1.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1);
           line.moveBase(line.pos + size);
           return null;
       },
       HorizontalRule(cx, line) {
           if (isHorizontalRule(line, cx, false) < 0)
               return false;
           let from = cx.lineStart + line.pos;
           cx.nextLine();
           cx.addNode(Type$1.HorizontalRule, from);
           return true;
       },
       BulletList(cx, line) {
           let size = isBulletList(line, cx, false);
           if (size < 0)
               return false;
           if (cx.block.type != Type$1.BulletList)
               cx.startContext(Type$1.BulletList, line.basePos, line.next);
           let newBase = getListIndent(line, line.pos + 1);
           cx.startContext(Type$1.ListItem, line.basePos, newBase - line.baseIndent);
           cx.addNode(Type$1.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);
           line.moveBaseColumn(newBase);
           return null;
       },
       OrderedList(cx, line) {
           let size = isOrderedList(line, cx, false);
           if (size < 0)
               return false;
           if (cx.block.type != Type$1.OrderedList)
               cx.startContext(Type$1.OrderedList, line.basePos, line.text.charCodeAt(line.pos + size - 1));
           let newBase = getListIndent(line, line.pos + size);
           cx.startContext(Type$1.ListItem, line.basePos, newBase - line.baseIndent);
           cx.addNode(Type$1.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);
           line.moveBaseColumn(newBase);
           return null;
       },
       ATXHeading(cx, line) {
           let size = isAtxHeading(line);
           if (size < 0)
               return false;
           let off = line.pos, from = cx.lineStart + off;
           let endOfSpace = skipSpaceBack(line.text, line.text.length, off), after = endOfSpace;
           while (after > off && line.text.charCodeAt(after - 1) == line.next)
               after--;
           if (after == endOfSpace || after == off || !space$7(line.text.charCodeAt(after - 1)))
               after = line.text.length;
           let buf = cx.buffer
               .write(Type$1.HeaderMark, 0, size)
               .writeElements(cx.parser.parseInline(line.text.slice(off + size + 1, after), from + size + 1), -from);
           if (after < line.text.length)
               buf.write(Type$1.HeaderMark, after - off, endOfSpace - off);
           let node = buf.finish(Type$1.ATXHeading1 - 1 + size, line.text.length - off);
           cx.nextLine();
           cx.addNode(node, from);
           return true;
       },
       HTMLBlock(cx, line) {
           let type = isHTMLBlock(line, cx, false);
           if (type < 0)
               return false;
           let from = cx.lineStart + line.pos, end = HTMLBlockStyle[type][1];
           let marks = [], trailing = end != EmptyLine;
           while (!end.test(line.text) && cx.nextLine()) {
               if (line.depth < cx.stack.length) {
                   trailing = false;
                   break;
               }
               for (let m of line.markers)
                   marks.push(m);
           }
           if (trailing)
               cx.nextLine();
           let nodeType = end == CommentEnd ? Type$1.CommentBlock : end == ProcessingEnd ? Type$1.ProcessingInstructionBlock : Type$1.HTMLBlock;
           let to = cx.prevLineEnd();
           cx.addNode(cx.buffer.writeElements(marks, -from).finish(nodeType, to - from), from);
           return true;
       },
       SetextHeading: undefined // Specifies relative precedence for block-continue function
   };
   // This implements a state machine that incrementally parses link references. At each
   // next line, it looks ahead to see if the line continues the reference or not. If it
   // doesn't and a valid link is available ending before that line, it finishes that.
   // Similarly, on `finish` (when the leaf is terminated by external circumstances), it
   // creates a link reference if there's a valid reference up to the current point.
   class LinkReferenceParser {
       constructor(leaf) {
           this.stage = 0 /* Start */;
           this.elts = [];
           this.pos = 0;
           this.start = leaf.start;
           this.advance(leaf.content);
       }
       nextLine(cx, line, leaf) {
           if (this.stage == -1 /* Failed */)
               return false;
           let content = leaf.content + "\n" + line.scrub();
           let finish = this.advance(content);
           if (finish > -1 && finish < content.length)
               return this.complete(cx, leaf, finish);
           return false;
       }
       finish(cx, leaf) {
           if ((this.stage == 2 /* Link */ || this.stage == 3 /* Title */) && skipSpace(leaf.content, this.pos) == leaf.content.length)
               return this.complete(cx, leaf, leaf.content.length);
           return false;
       }
       complete(cx, leaf, len) {
           cx.addLeafElement(leaf, elt(Type$1.LinkReference, this.start, this.start + len, this.elts));
           return true;
       }
       nextStage(elt) {
           if (elt) {
               this.pos = elt.to - this.start;
               this.elts.push(elt);
               this.stage++;
               return true;
           }
           if (elt === false)
               this.stage = -1 /* Failed */;
           return false;
       }
       advance(content) {
           for (;;) {
               if (this.stage == -1 /* Failed */) {
                   return -1;
               }
               else if (this.stage == 0 /* Start */) {
                   if (!this.nextStage(parseLinkLabel(content, this.pos, this.start, true)))
                       return -1;
                   if (content.charCodeAt(this.pos) != 58 /* ':' */)
                       return this.stage = -1 /* Failed */;
                   this.elts.push(elt(Type$1.LinkMark, this.pos + this.start, this.pos + this.start + 1));
                   this.pos++;
               }
               else if (this.stage == 1 /* Label */) {
                   if (!this.nextStage(parseURL(content, skipSpace(content, this.pos), this.start)))
                       return -1;
               }
               else if (this.stage == 2 /* Link */) {
                   let skip = skipSpace(content, this.pos), end = 0;
                   if (skip > this.pos) {
                       let title = parseLinkTitle(content, skip, this.start);
                       if (title) {
                           let titleEnd = lineEnd(content, title.to - this.start);
                           if (titleEnd > 0) {
                               this.nextStage(title);
                               end = titleEnd;
                           }
                       }
                   }
                   if (!end)
                       end = lineEnd(content, this.pos);
                   return end > 0 && end < content.length ? end : -1;
               }
               else { // RefStage.Title
                   return lineEnd(content, this.pos);
               }
           }
       }
   }
   function lineEnd(text, pos) {
       for (; pos < text.length; pos++) {
           let next = text.charCodeAt(pos);
           if (next == 10)
               break;
           if (!space$7(next))
               return -1;
       }
       return pos;
   }
   class SetextHeadingParser {
       nextLine(cx, line, leaf) {
           let underline = line.depth < cx.stack.length ? -1 : isSetextUnderline(line);
           let next = line.next;
           if (underline < 0)
               return false;
           let underlineMark = elt(Type$1.HeaderMark, cx.lineStart + line.pos, cx.lineStart + underline);
           cx.nextLine();
           cx.addLeafElement(leaf, elt(next == 61 ? Type$1.SetextHeading1 : Type$1.SetextHeading2, leaf.start, cx.prevLineEnd(), [
               ...cx.parser.parseInline(leaf.content, leaf.start),
               underlineMark
           ]));
           return true;
       }
       finish() {
           return false;
       }
   }
   const DefaultLeafBlocks = {
       LinkReference(_, leaf) { return leaf.content.charCodeAt(0) == 91 /* '[' */ ? new LinkReferenceParser(leaf) : null; },
       SetextHeading() { return new SetextHeadingParser; }
   };
   const DefaultEndLeaf = [
       (_, line) => isAtxHeading(line) >= 0,
       (_, line) => isFencedCode(line) >= 0,
       (_, line) => isBlockquote(line) >= 0,
       (p, line) => isBulletList(line, p, true) >= 0,
       (p, line) => isOrderedList(line, p, true) >= 0,
       (p, line) => isHorizontalRule(line, p, true) >= 0,
       (p, line) => isHTMLBlock(line, p, true) >= 0
   ];
   const scanLineResult = { text: "", end: 0 };
   /// Block-level parsing functions get access to this context object.
   class BlockContext {
       /// @internal
       constructor(
       /// The parser configuration used.
       parser, 
       /// @internal
       input, fragments, 
       /// @internal
       ranges) {
           this.parser = parser;
           this.input = input;
           this.ranges = ranges;
           this.line = new Line();
           this.atEnd = false;
           /// @internal
           this.dontInject = new Set;
           this.stoppedAt = null;
           /// The range index that absoluteLineStart points into @internal
           this.rangeI = 0;
           this.to = ranges[ranges.length - 1].to;
           this.lineStart = this.absoluteLineStart = this.absoluteLineEnd = ranges[0].from;
           this.block = CompositeBlock.create(Type$1.Document, 0, this.lineStart, 0, 0);
           this.stack = [this.block];
           this.fragments = fragments.length ? new FragmentCursor$1(fragments, input) : null;
           this.readLine();
       }
       get parsedPos() {
           return this.absoluteLineStart;
       }
       advance() {
           if (this.stoppedAt != null && this.absoluteLineStart > this.stoppedAt)
               return this.finish();
           let { line } = this;
           for (;;) {
               while (line.depth < this.stack.length)
                   this.finishContext();
               for (let mark of line.markers)
                   this.addNode(mark.type, mark.from, mark.to);
               if (line.pos < line.text.length)
                   break;
               // Empty line
               if (!this.nextLine())
                   return this.finish();
           }
           if (this.fragments && this.reuseFragment(line.basePos))
               return null;
           start: for (;;) {
               for (let type of this.parser.blockParsers)
                   if (type) {
                       let result = type(this, line);
                       if (result != false) {
                           if (result == true)
                               return null;
                           line.forward();
                           continue start;
                       }
                   }
               break;
           }
           let leaf = new LeafBlock(this.lineStart + line.pos, line.text.slice(line.pos));
           for (let parse of this.parser.leafBlockParsers)
               if (parse) {
                   let parser = parse(this, leaf);
                   if (parser)
                       leaf.parsers.push(parser);
               }
           lines: while (this.nextLine()) {
               if (line.pos == line.text.length)
                   break;
               if (line.indent < line.baseIndent + 4) {
                   for (let stop of this.parser.endLeafBlock)
                       if (stop(this, line, leaf))
                           break lines;
               }
               for (let parser of leaf.parsers)
                   if (parser.nextLine(this, line, leaf))
                       return null;
               leaf.content += "\n" + line.scrub();
               for (let m of line.markers)
                   leaf.marks.push(m);
           }
           this.finishLeaf(leaf);
           return null;
       }
       stopAt(pos) {
           if (this.stoppedAt != null && this.stoppedAt < pos)
               throw new RangeError("Can't move stoppedAt forward");
           this.stoppedAt = pos;
       }
       reuseFragment(start) {
           if (!this.fragments.moveTo(this.absoluteLineStart + start, this.absoluteLineStart) ||
               !this.fragments.matches(this.block.hash))
               return false;
           let taken = this.fragments.takeNodes(this);
           if (!taken)
               return false;
           let withoutGaps = taken, end = this.absoluteLineStart + taken;
           for (let i = 1; i < this.ranges.length; i++) {
               let gapFrom = this.ranges[i - 1].to, gapTo = this.ranges[i].from;
               if (gapFrom >= this.lineStart && gapTo < end)
                   withoutGaps -= gapTo - gapFrom;
           }
           this.lineStart += withoutGaps;
           this.absoluteLineStart += taken;
           this.moveRangeI();
           if (this.absoluteLineStart < this.to) {
               this.lineStart++;
               this.absoluteLineStart++;
               this.readLine();
           }
           else {
               this.atEnd = true;
               this.readLine();
           }
           return true;
       }
       /// The number of parent blocks surrounding the current block.
       get depth() {
           return this.stack.length;
       }
       /// Get the type of the parent block at the given depth. When no
       /// depth is passed, return the type of the innermost parent.
       parentType(depth = this.depth - 1) {
           return this.parser.nodeSet.types[this.stack[depth].type];
       }
       /// Move to the next input line. This should only be called by
       /// (non-composite) [block parsers](#BlockParser.parse) that consume
       /// the line directly, or leaf block parser
       /// [`nextLine`](#LeafBlockParser.nextLine) methods when they
       /// consume the current line (and return true).
       nextLine() {
           this.lineStart += this.line.text.length;
           if (this.absoluteLineEnd >= this.to) {
               this.absoluteLineStart = this.absoluteLineEnd;
               this.atEnd = true;
               this.readLine();
               return false;
           }
           else {
               this.lineStart++;
               this.absoluteLineStart = this.absoluteLineEnd + 1;
               this.moveRangeI();
               this.readLine();
               return true;
           }
       }
       moveRangeI() {
           while (this.rangeI < this.ranges.length - 1 && this.absoluteLineStart >= this.ranges[this.rangeI].to) {
               this.rangeI++;
               this.absoluteLineStart = Math.max(this.absoluteLineStart, this.ranges[this.rangeI].from);
           }
       }
       /// @internal
       scanLine(start) {
           let r = scanLineResult;
           r.end = start;
           if (start >= this.to) {
               r.text = "";
           }
           else {
               r.text = this.lineChunkAt(start);
               r.end += r.text.length;
               if (this.ranges.length > 1) {
                   let textOffset = this.absoluteLineStart, rangeI = this.rangeI;
                   while (this.ranges[rangeI].to < r.end) {
                       rangeI++;
                       let nextFrom = this.ranges[rangeI].from;
                       let after = this.lineChunkAt(nextFrom);
                       r.end = nextFrom + after.length;
                       r.text = r.text.slice(0, this.ranges[rangeI - 1].to - textOffset) + after;
                       textOffset = r.end - r.text.length;
                   }
               }
           }
           return r;
       }
       /// @internal
       readLine() {
           let { line } = this, { text, end } = this.scanLine(this.absoluteLineStart);
           this.absoluteLineEnd = end;
           line.reset(text);
           for (; line.depth < this.stack.length; line.depth++) {
               let cx = this.stack[line.depth], handler = this.parser.skipContextMarkup[cx.type];
               if (!handler)
                   throw new Error("Unhandled block context " + Type$1[cx.type]);
               if (!handler(cx, this, line))
                   break;
               line.forward();
           }
       }
       lineChunkAt(pos) {
           let next = this.input.chunk(pos), text;
           if (!this.input.lineChunks) {
               let eol = next.indexOf("\n");
               text = eol < 0 ? next : next.slice(0, eol);
           }
           else {
               text = next == "\n" ? "" : next;
           }
           return pos + text.length > this.to ? text.slice(0, this.to - pos) : text;
       }
       /// The end position of the previous line.
       prevLineEnd() { return this.atEnd ? this.lineStart : this.lineStart - 1; }
       /// @internal
       startContext(type, start, value = 0) {
           this.block = CompositeBlock.create(type, value, this.lineStart + start, this.block.hash, this.lineStart + this.line.text.length);
           this.stack.push(this.block);
       }
       /// Start a composite block. Should only be called from [block
       /// parser functions](#BlockParser.parse) that return null.
       startComposite(type, start, value = 0) {
           this.startContext(this.parser.getNodeType(type), start, value);
       }
       /// @internal
       addNode(block, from, to) {
           if (typeof block == "number")
               block = new Tree(this.parser.nodeSet.types[block], none, none, (to !== null && to !== void 0 ? to : this.prevLineEnd()) - from);
           this.block.addChild(block, from - this.block.from);
       }
       /// Add a block element. Can be called by [block
       /// parsers](#BlockParser.parse).
       addElement(elt) {
           this.block.addChild(elt.toTree(this.parser.nodeSet), elt.from - this.block.from);
       }
       /// Add a block element from a [leaf parser](#LeafBlockParser). This
       /// makes sure any extra composite block markup (such as blockquote
       /// markers) inside the block are also added to the syntax tree.
       addLeafElement(leaf, elt) {
           this.addNode(this.buffer
               .writeElements(injectMarks(elt.children, leaf.marks), -elt.from)
               .finish(elt.type, elt.to - elt.from), elt.from);
       }
       /// @internal
       finishContext() {
           let cx = this.stack.pop();
           let top = this.stack[this.stack.length - 1];
           top.addChild(cx.toTree(this.parser.nodeSet), cx.from - top.from);
           this.block = top;
       }
       finish() {
           while (this.stack.length > 1)
               this.finishContext();
           return this.addGaps(this.block.toTree(this.parser.nodeSet, this.lineStart));
       }
       addGaps(tree) {
           return this.ranges.length > 1 ? injectGaps(this.ranges, 0, tree.topNode, this.ranges[0].from, this.dontInject) : tree;
       }
       /// @internal
       finishLeaf(leaf) {
           for (let parser of leaf.parsers)
               if (parser.finish(this, leaf))
                   return;
           let inline = injectMarks(this.parser.parseInline(leaf.content, leaf.start), leaf.marks);
           this.addNode(this.buffer
               .writeElements(inline, -leaf.start)
               .finish(Type$1.Paragraph, leaf.content.length), leaf.start);
       }
       elt(type, from, to, children) {
           if (typeof type == "string")
               return elt(this.parser.getNodeType(type), from, to, children);
           return new TreeElement(type, from);
       }
       /// @internal
       get buffer() { return new Buffer(this.parser.nodeSet); }
   }
   function injectGaps(ranges, rangeI, tree, offset, dont) {
       if (dont.has(tree.tree))
           return tree.tree;
       let rangeEnd = ranges[rangeI].to;
       let children = [], positions = [], start = tree.from + offset;
       function movePastNext(upto, inclusive) {
           while (inclusive ? upto >= rangeEnd : upto > rangeEnd) {
               let size = ranges[rangeI + 1].from - rangeEnd;
               offset += size;
               upto += size;
               rangeI++;
               rangeEnd = ranges[rangeI].to;
           }
       }
       for (let ch = tree.firstChild; ch; ch = ch.nextSibling) {
           movePastNext(ch.from + offset, true);
           let from = ch.from + offset, node;
           if (ch.to + offset > rangeEnd) {
               node = injectGaps(ranges, rangeI, ch, offset, dont);
               movePastNext(ch.to + offset, false);
           }
           else {
               node = ch.toTree();
           }
           children.push(node);
           positions.push(from - start);
       }
       movePastNext(tree.to + offset, false);
       return new Tree(tree.type, children, positions, tree.to + offset - start, tree.tree ? tree.tree.propValues : undefined);
   }
   /// A Markdown parser configuration.
   class MarkdownParser extends Parser$1 {
       /// @internal
       constructor(
       /// The parser's syntax [node
       /// types](https://lezer.codemirror.net/docs/ref/#common.NodeSet).
       nodeSet, 
       /// @internal
       blockParsers, 
       /// @internal
       leafBlockParsers, 
       /// @internal
       blockNames, 
       /// @internal
       endLeafBlock, 
       /// @internal
       skipContextMarkup, 
       /// @internal
       inlineParsers, 
       /// @internal
       inlineNames, 
       /// @internal
       wrappers) {
           super();
           this.nodeSet = nodeSet;
           this.blockParsers = blockParsers;
           this.leafBlockParsers = leafBlockParsers;
           this.blockNames = blockNames;
           this.endLeafBlock = endLeafBlock;
           this.skipContextMarkup = skipContextMarkup;
           this.inlineParsers = inlineParsers;
           this.inlineNames = inlineNames;
           this.wrappers = wrappers;
           /// @internal
           this.nodeTypes = Object.create(null);
           for (let t of nodeSet.types)
               this.nodeTypes[t.name] = t.id;
       }
       createParse(input, fragments, ranges) {
           let parse = new BlockContext(this, input, fragments, ranges);
           for (let w of this.wrappers)
               parse = w(parse, input, fragments, ranges);
           return parse;
       }
       /// Reconfigure the parser.
       configure(spec) {
           let config = resolveConfig(spec);
           if (!config)
               return this;
           let { nodeSet, skipContextMarkup } = this;
           let blockParsers = this.blockParsers.slice(), leafBlockParsers = this.leafBlockParsers.slice(), blockNames = this.blockNames.slice(), inlineParsers = this.inlineParsers.slice(), inlineNames = this.inlineNames.slice(), endLeafBlock = this.endLeafBlock.slice(), wrappers = this.wrappers;
           if (nonEmpty(config.defineNodes)) {
               skipContextMarkup = Object.assign({}, skipContextMarkup);
               let nodeTypes = nodeSet.types.slice(), styles;
               for (let s of config.defineNodes) {
                   let { name, block, composite, style } = typeof s == "string" ? { name: s } : s;
                   if (nodeTypes.some(t => t.name == name))
                       continue;
                   if (composite)
                       skipContextMarkup[nodeTypes.length] =
                           (bl, cx, line) => composite(cx, line, bl.value);
                   let id = nodeTypes.length;
                   let group = composite ? ["Block", "BlockContext"] : !block ? undefined
                       : id >= Type$1.ATXHeading1 && id <= Type$1.SetextHeading2 ? ["Block", "LeafBlock", "Heading"] : ["Block", "LeafBlock"];
                   nodeTypes.push(NodeType.define({
                       id,
                       name,
                       props: group && [[NodeProp.group, group]]
                   }));
                   if (style) {
                       if (!styles)
                           styles = {};
                       if (Array.isArray(style) || style instanceof Tag)
                           styles[name] = style;
                       else
                           Object.assign(styles, style);
                   }
               }
               nodeSet = new NodeSet(nodeTypes);
               if (styles)
                   nodeSet = nodeSet.extend(styleTags(styles));
           }
           if (nonEmpty(config.props))
               nodeSet = nodeSet.extend(...config.props);
           if (nonEmpty(config.remove)) {
               for (let rm of config.remove) {
                   let block = this.blockNames.indexOf(rm), inline = this.inlineNames.indexOf(rm);
                   if (block > -1)
                       blockParsers[block] = leafBlockParsers[block] = undefined;
                   if (inline > -1)
                       inlineParsers[inline] = undefined;
               }
           }
           if (nonEmpty(config.parseBlock)) {
               for (let spec of config.parseBlock) {
                   let found = blockNames.indexOf(spec.name);
                   if (found > -1) {
                       blockParsers[found] = spec.parse;
                       leafBlockParsers[found] = spec.leaf;
                   }
                   else {
                       let pos = spec.before ? findName(blockNames, spec.before)
                           : spec.after ? findName(blockNames, spec.after) + 1 : blockNames.length - 1;
                       blockParsers.splice(pos, 0, spec.parse);
                       leafBlockParsers.splice(pos, 0, spec.leaf);
                       blockNames.splice(pos, 0, spec.name);
                   }
                   if (spec.endLeaf)
                       endLeafBlock.push(spec.endLeaf);
               }
           }
           if (nonEmpty(config.parseInline)) {
               for (let spec of config.parseInline) {
                   let found = inlineNames.indexOf(spec.name);
                   if (found > -1) {
                       inlineParsers[found] = spec.parse;
                   }
                   else {
                       let pos = spec.before ? findName(inlineNames, spec.before)
                           : spec.after ? findName(inlineNames, spec.after) + 1 : inlineNames.length - 1;
                       inlineParsers.splice(pos, 0, spec.parse);
                       inlineNames.splice(pos, 0, spec.name);
                   }
               }
           }
           if (config.wrap)
               wrappers = wrappers.concat(config.wrap);
           return new MarkdownParser(nodeSet, blockParsers, leafBlockParsers, blockNames, endLeafBlock, skipContextMarkup, inlineParsers, inlineNames, wrappers);
       }
       /// @internal
       getNodeType(name) {
           let found = this.nodeTypes[name];
           if (found == null)
               throw new RangeError(`Unknown node type '${name}'`);
           return found;
       }
       /// Parse the given piece of inline text at the given offset,
       /// returning an array of [`Element`](#Element) objects representing
       /// the inline content.
       parseInline(text, offset) {
           let cx = new InlineContext(this, text, offset);
           outer: for (let pos = offset; pos < cx.end;) {
               let next = cx.char(pos);
               for (let token of this.inlineParsers)
                   if (token) {
                       let result = token(cx, next, pos);
                       if (result >= 0) {
                           pos = result;
                           continue outer;
                       }
                   }
               pos++;
           }
           return cx.resolveMarkers(0);
       }
   }
   function nonEmpty(a) {
       return a != null && a.length > 0;
   }
   function resolveConfig(spec) {
       if (!Array.isArray(spec))
           return spec;
       if (spec.length == 0)
           return null;
       let conf = resolveConfig(spec[0]);
       if (spec.length == 1)
           return conf;
       let rest = resolveConfig(spec.slice(1));
       if (!rest || !conf)
           return conf || rest;
       let conc = (a, b) => (a || none).concat(b || none);
       let wrapA = conf.wrap, wrapB = rest.wrap;
       return {
           props: conc(conf.props, rest.props),
           defineNodes: conc(conf.defineNodes, rest.defineNodes),
           parseBlock: conc(conf.parseBlock, rest.parseBlock),
           parseInline: conc(conf.parseInline, rest.parseInline),
           remove: conc(conf.remove, rest.remove),
           wrap: !wrapA ? wrapB : !wrapB ? wrapA :
               (inner, input, fragments, ranges) => wrapA(wrapB(inner, input, fragments, ranges), input, fragments, ranges)
       };
   }
   function findName(names, name) {
       let found = names.indexOf(name);
       if (found < 0)
           throw new RangeError(`Position specified relative to unknown parser ${name}`);
       return found;
   }
   let nodeTypes = [NodeType.none];
   for (let i = 1, name; name = Type$1[i]; i++) {
       nodeTypes[i] = NodeType.define({
           id: i,
           name,
           props: i >= Type$1.Escape ? [] : [[NodeProp.group, i in DefaultSkipMarkup ? ["Block", "BlockContext"] : ["Block", "LeafBlock"]]]
       });
   }
   const none = [];
   class Buffer {
       constructor(nodeSet) {
           this.nodeSet = nodeSet;
           this.content = [];
           this.nodes = [];
       }
       write(type, from, to, children = 0) {
           this.content.push(type, from, to, 4 + children * 4);
           return this;
       }
       writeElements(elts, offset = 0) {
           for (let e of elts)
               e.writeTo(this, offset);
           return this;
       }
       finish(type, length) {
           return Tree.build({
               buffer: this.content,
               nodeSet: this.nodeSet,
               reused: this.nodes,
               topID: type,
               length
           });
       }
   }
   /// Elements are used to compose syntax nodes during parsing.
   let Element$3 = class Element {
       /// @internal
       constructor(
       /// The node's
       /// [id](https://lezer.codemirror.net/docs/ref/#common.NodeType.id).
       type, 
       /// The start of the node, as an offset from the start of the document.
       from, 
       /// The end of the node.
       to, 
       /// The node's child nodes @internal
       children = none) {
           this.type = type;
           this.from = from;
           this.to = to;
           this.children = children;
       }
       /// @internal
       writeTo(buf, offset) {
           let startOff = buf.content.length;
           buf.writeElements(this.children, offset);
           buf.content.push(this.type, this.from + offset, this.to + offset, buf.content.length + 4 - startOff);
       }
       /// @internal
       toTree(nodeSet) {
           return new Buffer(nodeSet).writeElements(this.children, -this.from).finish(this.type, this.to - this.from);
       }
   };
   class TreeElement {
       constructor(tree, from) {
           this.tree = tree;
           this.from = from;
       }
       get to() { return this.from + this.tree.length; }
       get type() { return this.tree.type.id; }
       get children() { return none; }
       writeTo(buf, offset) {
           buf.nodes.push(this.tree);
           buf.content.push(buf.nodes.length - 1, this.from + offset, this.to + offset, -1);
       }
       toTree() { return this.tree; }
   }
   function elt(type, from, to, children) {
       return new Element$3(type, from, to, children);
   }
   const EmphasisUnderscore = { resolve: "Emphasis", mark: "EmphasisMark" };
   const EmphasisAsterisk = { resolve: "Emphasis", mark: "EmphasisMark" };
   const LinkStart = {}, ImageStart = {};
   class InlineDelimiter {
       constructor(type, from, to, side) {
           this.type = type;
           this.from = from;
           this.to = to;
           this.side = side;
       }
   }
   const Escapable = "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~";
   let Punctuation$1 = /[!"#$%&'()*+,\-.\/:;<=>?@\[\\\]^_`{|}~\xA1\u2010-\u2027]/;
   try {
       Punctuation$1 = new RegExp("[\\p{Pc}|\\p{Pd}|\\p{Pe}|\\p{Pf}|\\p{Pi}|\\p{Po}|\\p{Ps}]", "u");
   }
   catch (_) { }
   const DefaultInline = {
       Escape(cx, next, start) {
           if (next != 92 /* '\\' */ || start == cx.end - 1)
               return -1;
           let escaped = cx.char(start + 1);
           for (let i = 0; i < Escapable.length; i++)
               if (Escapable.charCodeAt(i) == escaped)
                   return cx.append(elt(Type$1.Escape, start, start + 2));
           return -1;
       },
       Entity(cx, next, start) {
           if (next != 38 /* '&' */)
               return -1;
           let m = /^(?:#\d+|#x[a-f\d]+|\w+);/i.exec(cx.slice(start + 1, start + 31));
           return m ? cx.append(elt(Type$1.Entity, start, start + 1 + m[0].length)) : -1;
       },
       InlineCode(cx, next, start) {
           if (next != 96 /* '`' */ || start && cx.char(start - 1) == 96)
               return -1;
           let pos = start + 1;
           while (pos < cx.end && cx.char(pos) == 96)
               pos++;
           let size = pos - start, curSize = 0;
           for (; pos < cx.end; pos++) {
               if (cx.char(pos) == 96) {
                   curSize++;
                   if (curSize == size && cx.char(pos + 1) != 96)
                       return cx.append(elt(Type$1.InlineCode, start, pos + 1, [
                           elt(Type$1.CodeMark, start, start + size),
                           elt(Type$1.CodeMark, pos + 1 - size, pos + 1)
                       ]));
               }
               else {
                   curSize = 0;
               }
           }
           return -1;
       },
       HTMLTag(cx, next, start) {
           if (next != 60 /* '<' */ || start == cx.end - 1)
               return -1;
           let after = cx.slice(start + 1, cx.end);
           let url = /^(?:[a-z][-\w+.]+:[^\s>]+|[a-z\d.!#$%&'*+/=?^_`{|}~-]+@[a-z\d](?:[a-z\d-]{0,61}[a-z\d])?(?:\.[a-z\d](?:[a-z\d-]{0,61}[a-z\d])?)*)>/i.exec(after);
           if (url)
               return cx.append(elt(Type$1.URL, start, start + 1 + url[0].length));
           let comment = /^!--[^>](?:-[^-]|[^-])*?-->/i.exec(after);
           if (comment)
               return cx.append(elt(Type$1.Comment, start, start + 1 + comment[0].length));
           let procInst = /^\?[^]*?\?>/.exec(after);
           if (procInst)
               return cx.append(elt(Type$1.ProcessingInstruction, start, start + 1 + procInst[0].length));
           let m = /^(?:![A-Z][^]*?>|!\[CDATA\[[^]*?\]\]>|\/\s*[a-zA-Z][\w-]*\s*>|\s*[a-zA-Z][\w-]*(\s+[a-zA-Z:_][\w-.:]*(?:\s*=\s*(?:[^\s"'=<>`]+|'[^']*'|"[^"]*"))?)*\s*(\/\s*)?>)/.exec(after);
           if (!m)
               return -1;
           return cx.append(elt(Type$1.HTMLTag, start, start + 1 + m[0].length));
       },
       Emphasis(cx, next, start) {
           if (next != 95 && next != 42)
               return -1;
           let pos = start + 1;
           while (cx.char(pos) == next)
               pos++;
           let before = cx.slice(start - 1, start), after = cx.slice(pos, pos + 1);
           let pBefore = Punctuation$1.test(before), pAfter = Punctuation$1.test(after);
           let sBefore = /\s|^$/.test(before), sAfter = /\s|^$/.test(after);
           let leftFlanking = !sAfter && (!pAfter || sBefore || pBefore);
           let rightFlanking = !sBefore && (!pBefore || sAfter || pAfter);
           let canOpen = leftFlanking && (next == 42 || !rightFlanking || pBefore);
           let canClose = rightFlanking && (next == 42 || !leftFlanking || pAfter);
           return cx.append(new InlineDelimiter(next == 95 ? EmphasisUnderscore : EmphasisAsterisk, start, pos, (canOpen ? 1 /* Open */ : 0) | (canClose ? 2 /* Close */ : 0)));
       },
       HardBreak(cx, next, start) {
           if (next == 92 /* '\\' */ && cx.char(start + 1) == 10 /* '\n' */)
               return cx.append(elt(Type$1.HardBreak, start, start + 2));
           if (next == 32) {
               let pos = start + 1;
               while (cx.char(pos) == 32)
                   pos++;
               if (cx.char(pos) == 10 && pos >= start + 2)
                   return cx.append(elt(Type$1.HardBreak, start, pos + 1));
           }
           return -1;
       },
       Link(cx, next, start) {
           return next == 91 /* '[' */ ? cx.append(new InlineDelimiter(LinkStart, start, start + 1, 1 /* Open */)) : -1;
       },
       Image(cx, next, start) {
           return next == 33 /* '!' */ && cx.char(start + 1) == 91 /* '[' */
               ? cx.append(new InlineDelimiter(ImageStart, start, start + 2, 1 /* Open */)) : -1;
       },
       LinkEnd(cx, next, start) {
           if (next != 93 /* ']' */)
               return -1;
           // Scanning back to the next link/image start marker
           for (let i = cx.parts.length - 1; i >= 0; i--) {
               let part = cx.parts[i];
               if (part instanceof InlineDelimiter && (part.type == LinkStart || part.type == ImageStart)) {
                   // If this one has been set invalid (because it would produce
                   // a nested link) or there's no valid link here ignore both.
                   if (!part.side || cx.skipSpace(part.to) == start && !/[(\[]/.test(cx.slice(start + 1, start + 2))) {
                       cx.parts[i] = null;
                       return -1;
                   }
                   // Finish the content and replace the entire range in
                   // this.parts with the link/image node.
                   let content = cx.takeContent(i);
                   let link = cx.parts[i] = finishLink(cx, content, part.type == LinkStart ? Type$1.Link : Type$1.Image, part.from, start + 1);
                   // Set any open-link markers before this link to invalid.
                   if (part.type == LinkStart)
                       for (let j = 0; j < i; j++) {
                           let p = cx.parts[j];
                           if (p instanceof InlineDelimiter && p.type == LinkStart)
                               p.side = 0;
                       }
                   return link.to;
               }
           }
           return -1;
       }
   };
   function finishLink(cx, content, type, start, startPos) {
       let { text } = cx, next = cx.char(startPos), endPos = startPos;
       content.unshift(elt(Type$1.LinkMark, start, start + (type == Type$1.Image ? 2 : 1)));
       content.push(elt(Type$1.LinkMark, startPos - 1, startPos));
       if (next == 40 /* '(' */) {
           let pos = cx.skipSpace(startPos + 1);
           let dest = parseURL(text, pos - cx.offset, cx.offset), title;
           if (dest) {
               pos = cx.skipSpace(dest.to);
               title = parseLinkTitle(text, pos - cx.offset, cx.offset);
               if (title)
                   pos = cx.skipSpace(title.to);
           }
           if (cx.char(pos) == 41 /* ')' */) {
               content.push(elt(Type$1.LinkMark, startPos, startPos + 1));
               endPos = pos + 1;
               if (dest)
                   content.push(dest);
               if (title)
                   content.push(title);
               content.push(elt(Type$1.LinkMark, pos, endPos));
           }
       }
       else if (next == 91 /* '[' */) {
           let label = parseLinkLabel(text, startPos - cx.offset, cx.offset, false);
           if (label) {
               content.push(label);
               endPos = label.to;
           }
       }
       return elt(type, start, endPos, content);
   }
   // These return `null` when falling off the end of the input, `false`
   // when parsing fails otherwise (for use in the incremental link
   // reference parser).
   function parseURL(text, start, offset) {
       let next = text.charCodeAt(start);
       if (next == 60 /* '<' */) {
           for (let pos = start + 1; pos < text.length; pos++) {
               let ch = text.charCodeAt(pos);
               if (ch == 62 /* '>' */)
                   return elt(Type$1.URL, start + offset, pos + 1 + offset);
               if (ch == 60 || ch == 10 /* '<\n' */)
                   return false;
           }
           return null;
       }
       else {
           let depth = 0, pos = start;
           for (let escaped = false; pos < text.length; pos++) {
               let ch = text.charCodeAt(pos);
               if (space$7(ch)) {
                   break;
               }
               else if (escaped) {
                   escaped = false;
               }
               else if (ch == 40 /* '(' */) {
                   depth++;
               }
               else if (ch == 41 /* ')' */) {
                   if (!depth)
                       break;
                   depth--;
               }
               else if (ch == 92 /* '\\' */) {
                   escaped = true;
               }
           }
           return pos > start ? elt(Type$1.URL, start + offset, pos + offset) : pos == text.length ? null : false;
       }
   }
   function parseLinkTitle(text, start, offset) {
       let next = text.charCodeAt(start);
       if (next != 39 && next != 34 && next != 40 /* '"\'(' */)
           return false;
       let end = next == 40 ? 41 : next;
       for (let pos = start + 1, escaped = false; pos < text.length; pos++) {
           let ch = text.charCodeAt(pos);
           if (escaped)
               escaped = false;
           else if (ch == end)
               return elt(Type$1.LinkTitle, start + offset, pos + 1 + offset);
           else if (ch == 92 /* '\\' */)
               escaped = true;
       }
       return null;
   }
   function parseLinkLabel(text, start, offset, requireNonWS) {
       for (let escaped = false, pos = start + 1, end = Math.min(text.length, pos + 999); pos < end; pos++) {
           let ch = text.charCodeAt(pos);
           if (escaped)
               escaped = false;
           else if (ch == 93 /* ']' */)
               return requireNonWS ? false : elt(Type$1.LinkLabel, start + offset, pos + 1 + offset);
           else {
               if (requireNonWS && !space$7(ch))
                   requireNonWS = false;
               if (ch == 91 /* '[' */)
                   return false;
               else if (ch == 92 /* '\\' */)
                   escaped = true;
           }
       }
       return null;
   }
   /// Inline parsing functions get access to this context, and use it to
   /// read the content and emit syntax nodes.
   class InlineContext {
       /// @internal
       constructor(
       /// The parser that is being used.
       parser, 
       /// The text of this inline section.
       text, 
       /// The starting offset of the section in the document.
       offset) {
           this.parser = parser;
           this.text = text;
           this.offset = offset;
           /// @internal
           this.parts = [];
       }
       /// Get the character code at the given (document-relative)
       /// position.
       char(pos) { return pos >= this.end ? -1 : this.text.charCodeAt(pos - this.offset); }
       /// The position of the end of this inline section.
       get end() { return this.offset + this.text.length; }
       /// Get a substring of this inline section. Again uses
       /// document-relative positions.
       slice(from, to) { return this.text.slice(from - this.offset, to - this.offset); }
       /// @internal
       append(elt) {
           this.parts.push(elt);
           return elt.to;
       }
       /// Add a [delimiter](#DelimiterType) at this given position. `open`
       /// and `close` indicate whether this delimiter is opening, closing,
       /// or both. Returns the end of the delimiter, for convenient
       /// returning from [parse functions](#InlineParser.parse).
       addDelimiter(type, from, to, open, close) {
           return this.append(new InlineDelimiter(type, from, to, (open ? 1 /* Open */ : 0) | (close ? 2 /* Close */ : 0)));
       }
       /// Add an inline element. Returns the end of the element.
       addElement(elt) {
           return this.append(elt);
       }
       /// Resolve markers between this.parts.length and from, wrapping matched markers in the
       /// appropriate node and updating the content of this.parts. @internal
       resolveMarkers(from) {
           // Scan forward, looking for closing tokens
           for (let i = from; i < this.parts.length; i++) {
               let close = this.parts[i];
               if (!(close instanceof InlineDelimiter && close.type.resolve && (close.side & 2 /* Close */)))
                   continue;
               let emp = close.type == EmphasisUnderscore || close.type == EmphasisAsterisk;
               let closeSize = close.to - close.from;
               let open, j = i - 1;
               // Continue scanning for a matching opening token
               for (; j >= from; j--) {
                   let part = this.parts[j];
                   if (part instanceof InlineDelimiter && (part.side & 1 /* Open */) && part.type == close.type &&
                       // Ignore emphasis delimiters where the character count doesn't match
                       !(emp && ((close.side & 1 /* Open */) || (part.side & 2 /* Close */)) &&
                           (part.to - part.from + closeSize) % 3 == 0 && ((part.to - part.from) % 3 || closeSize % 3))) {
                       open = part;
                       break;
                   }
               }
               if (!open)
                   continue;
               let type = close.type.resolve, content = [];
               let start = open.from, end = close.to;
               // Emphasis marker effect depends on the character count. Size consumed is minimum of the two
               // markers.
               if (emp) {
                   let size = Math.min(2, open.to - open.from, closeSize);
                   start = open.to - size;
                   end = close.from + size;
                   type = size == 1 ? "Emphasis" : "StrongEmphasis";
               }
               // Move the covered region into content, optionally adding marker nodes
               if (open.type.mark)
                   content.push(this.elt(open.type.mark, start, open.to));
               for (let k = j + 1; k < i; k++) {
                   if (this.parts[k] instanceof Element$3)
                       content.push(this.parts[k]);
                   this.parts[k] = null;
               }
               if (close.type.mark)
                   content.push(this.elt(close.type.mark, close.from, end));
               let element = this.elt(type, start, end, content);
               // If there are leftover emphasis marker characters, shrink the close/open markers. Otherwise, clear them.
               this.parts[j] = emp && open.from != start ? new InlineDelimiter(open.type, open.from, start, open.side) : null;
               let keep = this.parts[i] = emp && close.to != end ? new InlineDelimiter(close.type, end, close.to, close.side) : null;
               // Insert the new element in this.parts
               if (keep)
                   this.parts.splice(i, 0, element);
               else
                   this.parts[i] = element;
           }
           // Collect the elements remaining in this.parts into an array.
           let result = [];
           for (let i = from; i < this.parts.length; i++) {
               let part = this.parts[i];
               if (part instanceof Element$3)
                   result.push(part);
           }
           return result;
       }
       /// Find an opening delimiter of the given type. Returns `null` if
       /// no delimiter is found, or an index that can be passed to
       /// [`takeContent`](#InlineContext.takeContent) otherwise.
       findOpeningDelimiter(type) {
           for (let i = this.parts.length - 1; i >= 0; i--) {
               let part = this.parts[i];
               if (part instanceof InlineDelimiter && part.type == type)
                   return i;
           }
           return null;
       }
       /// Remove all inline elements and delimiters starting from the
       /// given index (which you should get from
       /// [`findOpeningDelimiter`](#InlineContext.findOpeningDelimiter),
       /// resolve delimiters inside of them, and return them as an array
       /// of elements.
       takeContent(startIndex) {
           let content = this.resolveMarkers(startIndex);
           this.parts.length = startIndex;
           return content;
       }
       /// Skip space after the given (document) position, returning either
       /// the position of the next non-space character or the end of the
       /// section.
       skipSpace(from) { return skipSpace(this.text, from - this.offset) + this.offset; }
       elt(type, from, to, children) {
           if (typeof type == "string")
               return elt(this.parser.getNodeType(type), from, to, children);
           return new TreeElement(type, from);
       }
   }
   function injectMarks(elements, marks) {
       if (!marks.length)
           return elements;
       if (!elements.length)
           return marks;
       let elts = elements.slice(), eI = 0;
       for (let mark of marks) {
           while (eI < elts.length && elts[eI].to < mark.to)
               eI++;
           if (eI < elts.length && elts[eI].from < mark.from) {
               let e = elts[eI];
               if (e instanceof Element$3)
                   elts[eI] = new Element$3(e.type, e.from, e.to, injectMarks(e.children, [mark]));
           }
           else {
               elts.splice(eI++, 0, mark);
           }
       }
       return elts;
   }
   // These are blocks that can span blank lines, and should thus only be
   // reused if their next sibling is also being reused.
   const NotLast = [Type$1.CodeBlock, Type$1.ListItem, Type$1.OrderedList, Type$1.BulletList];
   let FragmentCursor$1 = class FragmentCursor {
       constructor(fragments, input) {
           this.fragments = fragments;
           this.input = input;
           // Index into fragment array
           this.i = 0;
           // Active fragment
           this.fragment = null;
           this.fragmentEnd = -1;
           // Cursor into the current fragment, if any. When `moveTo` returns
           // true, this points at the first block after `pos`.
           this.cursor = null;
           if (fragments.length)
               this.fragment = fragments[this.i++];
       }
       nextFragment() {
           this.fragment = this.i < this.fragments.length ? this.fragments[this.i++] : null;
           this.cursor = null;
           this.fragmentEnd = -1;
       }
       moveTo(pos, lineStart) {
           while (this.fragment && this.fragment.to <= pos)
               this.nextFragment();
           if (!this.fragment || this.fragment.from > (pos ? pos - 1 : 0))
               return false;
           if (this.fragmentEnd < 0) {
               let end = this.fragment.to;
               while (end > 0 && this.input.read(end - 1, end) != "\n")
                   end--;
               this.fragmentEnd = end ? end - 1 : 0;
           }
           let c = this.cursor;
           if (!c) {
               c = this.cursor = this.fragment.tree.cursor();
               c.firstChild();
           }
           let rPos = pos + this.fragment.offset;
           while (c.to <= rPos)
               if (!c.parent())
                   return false;
           for (;;) {
               if (c.from >= rPos)
                   return this.fragment.from <= lineStart;
               if (!c.childAfter(rPos))
                   return false;
           }
       }
       matches(hash) {
           let tree = this.cursor.tree;
           return tree && tree.prop(NodeProp.contextHash) == hash;
       }
       takeNodes(cx) {
           let cur = this.cursor, off = this.fragment.offset, fragEnd = this.fragmentEnd - (this.fragment.openEnd ? 1 : 0);
           let start = cx.absoluteLineStart, end = start, blockI = cx.block.children.length;
           let prevEnd = end, prevI = blockI;
           for (;;) {
               if (cur.to - off > fragEnd) {
                   if (cur.type.isAnonymous && cur.firstChild())
                       continue;
                   break;
               }
               cx.dontInject.add(cur.tree);
               cx.addNode(cur.tree, cur.from - off);
               // Taken content must always end in a block, because incremental
               // parsing happens on block boundaries. Never stop directly
               // after an indented code block, since those can continue after
               // any number of blank lines.
               if (cur.type.is("Block")) {
                   if (NotLast.indexOf(cur.type.id) < 0) {
                       end = cur.to - off;
                       blockI = cx.block.children.length;
                   }
                   else {
                       end = prevEnd;
                       blockI = prevI;
                       prevEnd = cur.to - off;
                       prevI = cx.block.children.length;
                   }
               }
               if (!cur.nextSibling())
                   break;
           }
           while (cx.block.children.length > blockI) {
               cx.block.children.pop();
               cx.block.positions.pop();
           }
           return end - start;
       }
   };
   const markdownHighlighting = styleTags({
       "Blockquote/...": tags$1.quote,
       HorizontalRule: tags$1.contentSeparator,
       "ATXHeading1/... SetextHeading1/...": tags$1.heading1,
       "ATXHeading2/... SetextHeading2/...": tags$1.heading2,
       "ATXHeading3/...": tags$1.heading3,
       "ATXHeading4/...": tags$1.heading4,
       "ATXHeading5/...": tags$1.heading5,
       "ATXHeading6/...": tags$1.heading6,
       "Comment CommentBlock": tags$1.comment,
       Escape: tags$1.escape,
       Entity: tags$1.character,
       "Emphasis/...": tags$1.emphasis,
       "StrongEmphasis/...": tags$1.strong,
       "Link/... Image/...": tags$1.link,
       "OrderedList/... BulletList/...": tags$1.list,
       "BlockQuote/...": tags$1.quote,
       "InlineCode CodeText": tags$1.monospace,
       URL: tags$1.url,
       "HeaderMark HardBreak QuoteMark ListMark LinkMark EmphasisMark CodeMark": tags$1.processingInstruction,
       "CodeInfo LinkLabel": tags$1.labelName,
       LinkTitle: tags$1.string,
       Paragraph: tags$1.content
   });
   /// The default CommonMark parser.
   const parser$g = new MarkdownParser(new NodeSet(nodeTypes).extend(markdownHighlighting), Object.keys(DefaultBlockParsers).map(n => DefaultBlockParsers[n]), Object.keys(DefaultBlockParsers).map(n => DefaultLeafBlocks[n]), Object.keys(DefaultBlockParsers), DefaultEndLeaf, DefaultSkipMarkup, Object.keys(DefaultInline).map(n => DefaultInline[n]), Object.keys(DefaultInline), []);

   function leftOverSpace(node, from, to) {
       let ranges = [];
       for (let n = node.firstChild, pos = from;; n = n.nextSibling) {
           let nextPos = n ? n.from : to;
           if (nextPos > pos)
               ranges.push({ from: pos, to: nextPos });
           if (!n)
               break;
           pos = n.to;
       }
       return ranges;
   }
   /// Create a Markdown extension to enable nested parsing on code
   /// blocks and/or embedded HTML.
   function parseCode(config) {
       let { codeParser, htmlParser } = config;
       let wrap = parseMixed((node, input) => {
           let id = node.type.id;
           if (codeParser && (id == Type$1.CodeBlock || id == Type$1.FencedCode)) {
               let info = "";
               if (id == Type$1.FencedCode) {
                   let infoNode = node.node.getChild(Type$1.CodeInfo);
                   if (infoNode)
                       info = input.read(infoNode.from, infoNode.to);
               }
               let parser = codeParser(info);
               if (parser)
                   return { parser, overlay: node => node.type.id == Type$1.CodeText };
           }
           else if (htmlParser && (id == Type$1.HTMLBlock || id == Type$1.HTMLTag)) {
               return { parser: htmlParser, overlay: leftOverSpace(node.node, node.from, node.to) };
           }
           return null;
       });
       return { wrap };
   }

   const StrikethroughDelim = { resolve: "Strikethrough", mark: "StrikethroughMark" };
   /// An extension that implements
   /// [GFM-style](https://github.github.com/gfm/#strikethrough-extension-)
   /// Strikethrough syntax using `~~` delimiters.
   const Strikethrough = {
       defineNodes: [{
               name: "Strikethrough",
               style: { "Strikethrough/...": tags$1.strikethrough }
           }, {
               name: "StrikethroughMark",
               style: tags$1.processingInstruction
           }],
       parseInline: [{
               name: "Strikethrough",
               parse(cx, next, pos) {
                   if (next != 126 /* '~' */ || cx.char(pos + 1) != 126 || cx.char(pos + 2) == 126)
                       return -1;
                   let before = cx.slice(pos - 1, pos), after = cx.slice(pos + 2, pos + 3);
                   let sBefore = /\s|^$/.test(before), sAfter = /\s|^$/.test(after);
                   let pBefore = Punctuation$1.test(before), pAfter = Punctuation$1.test(after);
                   return cx.addDelimiter(StrikethroughDelim, pos, pos + 2, !sAfter && (!pAfter || sBefore || pBefore), !sBefore && (!pBefore || sAfter || pAfter));
               },
               after: "Emphasis"
           }]
   };
   function parseRow(cx, line, startI = 0, elts, offset = 0) {
       let count = 0, first = true, cellStart = -1, cellEnd = -1, esc = false;
       let parseCell = () => {
           elts.push(cx.elt("TableCell", offset + cellStart, offset + cellEnd, cx.parser.parseInline(line.slice(cellStart, cellEnd), offset + cellStart)));
       };
       for (let i = startI; i < line.length; i++) {
           let next = line.charCodeAt(i);
           if (next == 124 /* '|' */ && !esc) {
               if (!first || cellStart > -1)
                   count++;
               first = false;
               if (elts) {
                   if (cellStart > -1)
                       parseCell();
                   elts.push(cx.elt("TableDelimiter", i + offset, i + offset + 1));
               }
               cellStart = cellEnd = -1;
           }
           else if (esc || next != 32 && next != 9) {
               if (cellStart < 0)
                   cellStart = i;
               cellEnd = i + 1;
           }
           esc = !esc && next == 92;
       }
       if (cellStart > -1) {
           count++;
           if (elts)
               parseCell();
       }
       return count;
   }
   function hasPipe(str, start) {
       for (let i = start; i < str.length; i++) {
           let next = str.charCodeAt(i);
           if (next == 124 /* '|' */)
               return true;
           if (next == 92 /* '\\' */)
               i++;
       }
       return false;
   }
   const delimiterLine = /^\|?(\s*:?-+:?\s*\|)+(\s*:?-+:?\s*)?$/;
   class TableParser {
       constructor() {
           // Null means we haven't seen the second line yet, false means this
           // isn't a table, and an array means this is a table and we've
           // parsed the given rows so far.
           this.rows = null;
       }
       nextLine(cx, line, leaf) {
           if (this.rows == null) { // Second line
               this.rows = false;
               let lineText;
               if ((line.next == 45 || line.next == 58 || line.next == 124 /* '-:|' */) &&
                   delimiterLine.test(lineText = line.text.slice(line.pos))) {
                   let firstRow = [], firstCount = parseRow(cx, leaf.content, 0, firstRow, leaf.start);
                   if (firstCount == parseRow(cx, lineText, line.pos))
                       this.rows = [cx.elt("TableHeader", leaf.start, leaf.start + leaf.content.length, firstRow),
                           cx.elt("TableDelimiter", cx.lineStart + line.pos, cx.lineStart + line.text.length)];
               }
           }
           else if (this.rows) { // Line after the second
               let content = [];
               parseRow(cx, line.text, line.pos, content, cx.lineStart);
               this.rows.push(cx.elt("TableRow", cx.lineStart + line.pos, cx.lineStart + line.text.length, content));
           }
           return false;
       }
       finish(cx, leaf) {
           if (!this.rows)
               return false;
           cx.addLeafElement(leaf, cx.elt("Table", leaf.start, leaf.start + leaf.content.length, this.rows));
           return true;
       }
   }
   /// This extension provides
   /// [GFM-style](https://github.github.com/gfm/#tables-extension-)
   /// tables, using syntax like this:
   ///
   /// ```
   /// | head 1 | head 2 |
   /// | ---    | ---    |
   /// | cell 1 | cell 2 |
   /// ```
   const Table = {
       defineNodes: [
           { name: "Table", block: true },
           { name: "TableHeader", style: { "TableHeader/...": tags$1.heading } },
           "TableRow",
           { name: "TableCell", style: tags$1.content },
           { name: "TableDelimiter", style: tags$1.processingInstruction },
       ],
       parseBlock: [{
               name: "Table",
               leaf(_, leaf) { return hasPipe(leaf.content, 0) ? new TableParser : null; },
               endLeaf(cx, line, leaf) {
                   if (leaf.parsers.some(p => p instanceof TableParser) || !hasPipe(line.text, line.basePos))
                       return false;
                   let next = cx.scanLine(cx.absoluteLineEnd + 1).text;
                   return delimiterLine.test(next) && parseRow(cx, line.text, line.basePos) == parseRow(cx, next, line.basePos);
               },
               before: "SetextHeading"
           }]
   };
   class TaskParser {
       nextLine() { return false; }
       finish(cx, leaf) {
           cx.addLeafElement(leaf, cx.elt("Task", leaf.start, leaf.start + leaf.content.length, [
               cx.elt("TaskMarker", leaf.start, leaf.start + 3),
               ...cx.parser.parseInline(leaf.content.slice(3), leaf.start + 3)
           ]));
           return true;
       }
   }
   /// Extension providing
   /// [GFM-style](https://github.github.com/gfm/#task-list-items-extension-)
   /// task list items, where list items can be prefixed with `[ ]` or
   /// `[x]` to add a checkbox.
   const TaskList = {
       defineNodes: [
           { name: "Task", block: true, style: tags$1.list },
           { name: "TaskMarker", style: tags$1.atom }
       ],
       parseBlock: [{
               name: "TaskList",
               leaf(cx, leaf) {
                   return /^\[[ xX]\]/.test(leaf.content) && cx.parentType().name == "ListItem" ? new TaskParser : null;
               },
               after: "SetextHeading"
           }]
   };
   /// Extension bundle containing [`Table`](#Table),
   /// [`TaskList`](#TaskList) and [`Strikethrough`](#Strikethrough).
   const GFM = [Table, TaskList, Strikethrough];
   function parseSubSuper(ch, node, mark) {
       return (cx, next, pos) => {
           if (next != ch || cx.char(pos + 1) == ch)
               return -1;
           let elts = [cx.elt(mark, pos, pos + 1)];
           for (let i = pos + 1; i < cx.end; i++) {
               let next = cx.char(i);
               if (next == ch)
                   return cx.addElement(cx.elt(node, pos, i + 1, elts.concat(cx.elt(mark, i, i + 1))));
               if (next == 92 /* '\\' */)
                   elts.push(cx.elt("Escape", i, i++ + 2));
               if (space$7(next))
                   break;
           }
           return -1;
       };
   }
   /// Extension providing
   /// [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)
   /// superscript using `^` markers.
   const Superscript = {
       defineNodes: [
           { name: "Superscript", style: tags$1.special(tags$1.content) },
           { name: "SuperscriptMark", style: tags$1.processingInstruction }
       ],
       parseInline: [{
               name: "Superscript",
               parse: parseSubSuper(94 /* '^' */, "Superscript", "SuperscriptMark")
           }]
   };
   /// Extension providing
   /// [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)
   /// subscript using `~` markers.
   const Subscript = {
       defineNodes: [
           { name: "Subscript", style: tags$1.special(tags$1.content) },
           { name: "SubscriptMark", style: tags$1.processingInstruction }
       ],
       parseInline: [{
               name: "Subscript",
               parse: parseSubSuper(126 /* '~' */, "Subscript", "SubscriptMark")
           }]
   };
   /// Extension that parses two colons with only letters, underscores,
   /// and numbers between them as `Emoji` nodes.
   const Emoji = {
       defineNodes: [{ name: "Emoji", style: tags$1.character }],
       parseInline: [{
               name: "Emoji",
               parse(cx, next, pos) {
                   let match;
                   if (next != 58 /* ':' */ || !(match = /^[a-zA-Z_0-9]+:/.exec(cx.slice(pos + 1, cx.end))))
                       return -1;
                   return cx.addElement(cx.elt("Emoji", pos, pos + 1 + match[0].length));
               }
           }]
   };

   /// A parse stack. These are used internally by the parser to track
   /// parsing progress. They also provide some properties and methods
   /// that external code such as a tokenizer can use to get information
   /// about the parse state.
   class Stack {
       /// @internal
       constructor(
       /// The parse that this stack is part of @internal
       p, 
       /// Holds state, input pos, buffer index triplets for all but the
       /// top state @internal
       stack, 
       /// The current parse state @internal
       state, 
       // The position at which the next reduce should take place. This
       // can be less than `this.pos` when skipped expressions have been
       // added to the stack (which should be moved outside of the next
       // reduction)
       /// @internal
       reducePos, 
       /// The input position up to which this stack has parsed.
       pos, 
       /// The dynamic score of the stack, including dynamic precedence
       /// and error-recovery penalties
       /// @internal
       score, 
       // The output buffer. Holds (type, start, end, size) quads
       // representing nodes created by the parser, where `size` is
       // amount of buffer array entries covered by this node.
       /// @internal
       buffer, 
       // The base offset of the buffer. When stacks are split, the split
       // instance shared the buffer history with its parent up to
       // `bufferBase`, which is the absolute offset (including the
       // offset of previous splits) into the buffer at which this stack
       // starts writing.
       /// @internal
       bufferBase, 
       /// @internal
       curContext, 
       /// @internal
       lookAhead = 0, 
       // A parent stack from which this was split off, if any. This is
       // set up so that it always points to a stack that has some
       // additional buffer content, never to a stack with an equal
       // `bufferBase`.
       /// @internal
       parent) {
           this.p = p;
           this.stack = stack;
           this.state = state;
           this.reducePos = reducePos;
           this.pos = pos;
           this.score = score;
           this.buffer = buffer;
           this.bufferBase = bufferBase;
           this.curContext = curContext;
           this.lookAhead = lookAhead;
           this.parent = parent;
       }
       /// @internal
       toString() {
           return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? "!" + this.score : ""}`;
       }
       // Start an empty stack
       /// @internal
       static start(p, state, pos = 0) {
           let cx = p.parser.context;
           return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);
       }
       /// The stack's current [context](#lr.ContextTracker) value, if
       /// any. Its type will depend on the context tracker's type
       /// parameter, or it will be `null` if there is no context
       /// tracker.
       get context() { return this.curContext ? this.curContext.context : null; }
       // Push a state onto the stack, tracking its start position as well
       // as the buffer base at that point.
       /// @internal
       pushState(state, start) {
           this.stack.push(this.state, start, this.bufferBase + this.buffer.length);
           this.state = state;
       }
       // Apply a reduce action
       /// @internal
       reduce(action) {
           var _a;
           let depth = action >> 19 /* Action.ReduceDepthShift */, type = action & 65535 /* Action.ValueMask */;
           let { parser } = this.p;
           let dPrec = parser.dynamicPrecedence(type);
           if (dPrec)
               this.score += dPrec;
           if (depth == 0) {
               this.pushState(parser.getGoto(this.state, type, true), this.reducePos);
               // Zero-depth reductions are a special case—they add stuff to
               // the stack without popping anything off.
               if (type < parser.minRepeatTerm)
                   this.storeNode(type, this.reducePos, this.reducePos, 4, true);
               this.reduceContext(type, this.reducePos);
               return;
           }
           // Find the base index into `this.stack`, content after which will
           // be dropped. Note that with `StayFlag` reductions we need to
           // consume two extra frames (the dummy parent node for the skipped
           // expression and the state that we'll be staying in, which should
           // be moved to `this.state`).
           let base = this.stack.length - ((depth - 1) * 3) - (action & 262144 /* Action.StayFlag */ ? 6 : 0);
           let start = base ? this.stack[base - 2] : this.p.ranges[0].from, size = this.reducePos - start;
           // This is a kludge to try and detect overly deep left-associative
           // trees, which will not increase the parse stack depth and thus
           // won't be caught by the regular stack-depth limit check.
           if (size >= 2000 /* Recover.MinBigReduction */ && !((_a = this.p.parser.nodeSet.types[type]) === null || _a === void 0 ? void 0 : _a.isAnonymous)) {
               if (start == this.p.lastBigReductionStart) {
                   this.p.bigReductionCount++;
                   this.p.lastBigReductionSize = size;
               }
               else if (this.p.lastBigReductionSize < size) {
                   this.p.bigReductionCount = 1;
                   this.p.lastBigReductionStart = start;
                   this.p.lastBigReductionSize = size;
               }
           }
           let bufferBase = base ? this.stack[base - 1] : 0, count = this.bufferBase + this.buffer.length - bufferBase;
           // Store normal terms or `R -> R R` repeat reductions
           if (type < parser.minRepeatTerm || (action & 131072 /* Action.RepeatFlag */)) {
               let pos = parser.stateFlag(this.state, 1 /* StateFlag.Skipped */) ? this.pos : this.reducePos;
               this.storeNode(type, start, pos, count + 4, true);
           }
           if (action & 262144 /* Action.StayFlag */) {
               this.state = this.stack[base];
           }
           else {
               let baseStateID = this.stack[base - 3];
               this.state = parser.getGoto(baseStateID, type, true);
           }
           while (this.stack.length > base)
               this.stack.pop();
           this.reduceContext(type, start);
       }
       // Shift a value into the buffer
       /// @internal
       storeNode(term, start, end, size = 4, isReduce = false) {
           if (term == 0 /* Term.Err */ &&
               (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {
               // Try to omit/merge adjacent error nodes
               let cur = this, top = this.buffer.length;
               if (top == 0 && cur.parent) {
                   top = cur.bufferBase - cur.parent.bufferBase;
                   cur = cur.parent;
               }
               if (top > 0 && cur.buffer[top - 4] == 0 /* Term.Err */ && cur.buffer[top - 1] > -1) {
                   if (start == end)
                       return;
                   if (cur.buffer[top - 2] >= start) {
                       cur.buffer[top - 2] = end;
                       return;
                   }
               }
           }
           if (!isReduce || this.pos == end) { // Simple case, just append
               this.buffer.push(term, start, end, size);
           }
           else { // There may be skipped nodes that have to be moved forward
               let index = this.buffer.length;
               if (index > 0 && this.buffer[index - 4] != 0 /* Term.Err */)
                   while (index > 0 && this.buffer[index - 2] > end) {
                       // Move this record forward
                       this.buffer[index] = this.buffer[index - 4];
                       this.buffer[index + 1] = this.buffer[index - 3];
                       this.buffer[index + 2] = this.buffer[index - 2];
                       this.buffer[index + 3] = this.buffer[index - 1];
                       index -= 4;
                       if (size > 4)
                           size -= 4;
                   }
               this.buffer[index] = term;
               this.buffer[index + 1] = start;
               this.buffer[index + 2] = end;
               this.buffer[index + 3] = size;
           }
       }
       // Apply a shift action
       /// @internal
       shift(action, next, nextEnd) {
           let start = this.pos;
           if (action & 131072 /* Action.GotoFlag */) {
               this.pushState(action & 65535 /* Action.ValueMask */, this.pos);
           }
           else if ((action & 262144 /* Action.StayFlag */) == 0) { // Regular shift
               let nextState = action, { parser } = this.p;
               if (nextEnd > this.pos || next <= parser.maxNode) {
                   this.pos = nextEnd;
                   if (!parser.stateFlag(nextState, 1 /* StateFlag.Skipped */))
                       this.reducePos = nextEnd;
               }
               this.pushState(nextState, start);
               this.shiftContext(next, start);
               if (next <= parser.maxNode)
                   this.buffer.push(next, start, nextEnd, 4);
           }
           else { // Shift-and-stay, which means this is a skipped token
               this.pos = nextEnd;
               this.shiftContext(next, start);
               if (next <= this.p.parser.maxNode)
                   this.buffer.push(next, start, nextEnd, 4);
           }
       }
       // Apply an action
       /// @internal
       apply(action, next, nextEnd) {
           if (action & 65536 /* Action.ReduceFlag */)
               this.reduce(action);
           else
               this.shift(action, next, nextEnd);
       }
       // Add a prebuilt (reused) node into the buffer.
       /// @internal
       useNode(value, next) {
           let index = this.p.reused.length - 1;
           if (index < 0 || this.p.reused[index] != value) {
               this.p.reused.push(value);
               index++;
           }
           let start = this.pos;
           this.reducePos = this.pos = start + value.length;
           this.pushState(next, start);
           this.buffer.push(index, start, this.reducePos, -1 /* size == -1 means this is a reused value */);
           if (this.curContext)
               this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));
       }
       // Split the stack. Due to the buffer sharing and the fact
       // that `this.stack` tends to stay quite shallow, this isn't very
       // expensive.
       /// @internal
       split() {
           let parent = this;
           let off = parent.buffer.length;
           // Because the top of the buffer (after this.pos) may be mutated
           // to reorder reductions and skipped tokens, and shared buffers
           // should be immutable, this copies any outstanding skipped tokens
           // to the new buffer, and puts the base pointer before them.
           while (off > 0 && parent.buffer[off - 2] > parent.reducePos)
               off -= 4;
           let buffer = parent.buffer.slice(off), base = parent.bufferBase + off;
           // Make sure parent points to an actual parent with content, if there is such a parent.
           while (parent && base == parent.bufferBase)
               parent = parent.parent;
           return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);
       }
       // Try to recover from an error by 'deleting' (ignoring) one token.
       /// @internal
       recoverByDelete(next, nextEnd) {
           let isNode = next <= this.p.parser.maxNode;
           if (isNode)
               this.storeNode(next, this.pos, nextEnd, 4);
           this.storeNode(0 /* Term.Err */, this.pos, nextEnd, isNode ? 8 : 4);
           this.pos = this.reducePos = nextEnd;
           this.score -= 190 /* Recover.Delete */;
       }
       /// Check if the given term would be able to be shifted (optionally
       /// after some reductions) on this stack. This can be useful for
       /// external tokenizers that want to make sure they only provide a
       /// given token when it applies.
       canShift(term) {
           for (let sim = new SimulatedStack(this);;) {
               let action = this.p.parser.stateSlot(sim.state, 4 /* ParseState.DefaultReduce */) || this.p.parser.hasAction(sim.state, term);
               if (action == 0)
                   return false;
               if ((action & 65536 /* Action.ReduceFlag */) == 0)
                   return true;
               sim.reduce(action);
           }
       }
       // Apply up to Recover.MaxNext recovery actions that conceptually
       // inserts some missing token or rule.
       /// @internal
       recoverByInsert(next) {
           if (this.stack.length >= 300 /* Recover.MaxInsertStackDepth */)
               return [];
           let nextStates = this.p.parser.nextStates(this.state);
           if (nextStates.length > 4 /* Recover.MaxNext */ << 1 || this.stack.length >= 120 /* Recover.DampenInsertStackDepth */) {
               let best = [];
               for (let i = 0, s; i < nextStates.length; i += 2) {
                   if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next))
                       best.push(nextStates[i], s);
               }
               if (this.stack.length < 120 /* Recover.DampenInsertStackDepth */)
                   for (let i = 0; best.length < 4 /* Recover.MaxNext */ << 1 && i < nextStates.length; i += 2) {
                       let s = nextStates[i + 1];
                       if (!best.some((v, i) => (i & 1) && v == s))
                           best.push(nextStates[i], s);
                   }
               nextStates = best;
           }
           let result = [];
           for (let i = 0; i < nextStates.length && result.length < 4 /* Recover.MaxNext */; i += 2) {
               let s = nextStates[i + 1];
               if (s == this.state)
                   continue;
               let stack = this.split();
               stack.pushState(s, this.pos);
               stack.storeNode(0 /* Term.Err */, stack.pos, stack.pos, 4, true);
               stack.shiftContext(nextStates[i], this.pos);
               stack.score -= 200 /* Recover.Insert */;
               result.push(stack);
           }
           return result;
       }
       // Force a reduce, if possible. Return false if that can't
       // be done.
       /// @internal
       forceReduce() {
           let { parser } = this.p;
           let reduce = parser.stateSlot(this.state, 5 /* ParseState.ForcedReduce */);
           if ((reduce & 65536 /* Action.ReduceFlag */) == 0)
               return false;
           if (!parser.validAction(this.state, reduce)) {
               let depth = reduce >> 19 /* Action.ReduceDepthShift */, term = reduce & 65535 /* Action.ValueMask */;
               let target = this.stack.length - depth * 3;
               if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0) {
                   let backup = this.findForcedReduction();
                   if (backup == null)
                       return false;
                   reduce = backup;
               }
               this.storeNode(0 /* Term.Err */, this.reducePos, this.reducePos, 4, true);
               this.score -= 100 /* Recover.Reduce */;
           }
           this.reducePos = this.pos;
           this.reduce(reduce);
           return true;
       }
       /// Try to scan through the automaton to find some kind of reduction
       /// that can be applied. Used when the regular ForcedReduce field
       /// isn't a valid action. @internal
       findForcedReduction() {
           let { parser } = this.p, seen = [];
           let explore = (state, depth) => {
               if (seen.includes(state))
                   return;
               seen.push(state);
               return parser.allActions(state, (action) => {
                   if (action & (262144 /* Action.StayFlag */ | 131072 /* Action.GotoFlag */)) ;
                   else if (action & 65536 /* Action.ReduceFlag */) {
                       let rDepth = (action >> 19 /* Action.ReduceDepthShift */) - depth;
                       if (rDepth > 1) {
                           let term = action & 65535 /* Action.ValueMask */, target = this.stack.length - rDepth * 3;
                           if (target >= 0 && parser.getGoto(this.stack[target], term, false) >= 0)
                               return (rDepth << 19 /* Action.ReduceDepthShift */) | 65536 /* Action.ReduceFlag */ | term;
                       }
                   }
                   else {
                       let found = explore(action, depth + 1);
                       if (found != null)
                           return found;
                   }
               });
           };
           return explore(this.state, 0);
       }
       /// @internal
       forceAll() {
           while (!this.p.parser.stateFlag(this.state, 2 /* StateFlag.Accepting */)) {
               if (!this.forceReduce()) {
                   this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);
                   break;
               }
           }
           return this;
       }
       /// Check whether this state has no further actions (assumed to be a direct descendant of the
       /// top state, since any other states must be able to continue
       /// somehow). @internal
       get deadEnd() {
           if (this.stack.length != 3)
               return false;
           let { parser } = this.p;
           return parser.data[parser.stateSlot(this.state, 1 /* ParseState.Actions */)] == 65535 /* Seq.End */ &&
               !parser.stateSlot(this.state, 4 /* ParseState.DefaultReduce */);
       }
       /// Restart the stack (put it back in its start state). Only safe
       /// when this.stack.length == 3 (state is directly below the top
       /// state). @internal
       restart() {
           this.state = this.stack[0];
           this.stack.length = 0;
       }
       /// @internal
       sameState(other) {
           if (this.state != other.state || this.stack.length != other.stack.length)
               return false;
           for (let i = 0; i < this.stack.length; i += 3)
               if (this.stack[i] != other.stack[i])
                   return false;
           return true;
       }
       /// Get the parser used by this stack.
       get parser() { return this.p.parser; }
       /// Test whether a given dialect (by numeric ID, as exported from
       /// the terms file) is enabled.
       dialectEnabled(dialectID) { return this.p.parser.dialect.flags[dialectID]; }
       shiftContext(term, start) {
           if (this.curContext)
               this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));
       }
       reduceContext(term, start) {
           if (this.curContext)
               this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));
       }
       /// @internal
       emitContext() {
           let last = this.buffer.length - 1;
           if (last < 0 || this.buffer[last] != -3)
               this.buffer.push(this.curContext.hash, this.pos, this.pos, -3);
       }
       /// @internal
       emitLookAhead() {
           let last = this.buffer.length - 1;
           if (last < 0 || this.buffer[last] != -4)
               this.buffer.push(this.lookAhead, this.pos, this.pos, -4);
       }
       updateContext(context) {
           if (context != this.curContext.context) {
               let newCx = new StackContext(this.curContext.tracker, context);
               if (newCx.hash != this.curContext.hash)
                   this.emitContext();
               this.curContext = newCx;
           }
       }
       /// @internal
       setLookAhead(lookAhead) {
           if (lookAhead > this.lookAhead) {
               this.emitLookAhead();
               this.lookAhead = lookAhead;
           }
       }
       /// @internal
       close() {
           if (this.curContext && this.curContext.tracker.strict)
               this.emitContext();
           if (this.lookAhead > 0)
               this.emitLookAhead();
       }
   }
   class StackContext {
       constructor(tracker, context) {
           this.tracker = tracker;
           this.context = context;
           this.hash = tracker.strict ? tracker.hash(context) : 0;
       }
   }
   var Recover;
   (function (Recover) {
       Recover[Recover["Insert"] = 200] = "Insert";
       Recover[Recover["Delete"] = 190] = "Delete";
       Recover[Recover["Reduce"] = 100] = "Reduce";
       Recover[Recover["MaxNext"] = 4] = "MaxNext";
       Recover[Recover["MaxInsertStackDepth"] = 300] = "MaxInsertStackDepth";
       Recover[Recover["DampenInsertStackDepth"] = 120] = "DampenInsertStackDepth";
       Recover[Recover["MinBigReduction"] = 2000] = "MinBigReduction";
   })(Recover || (Recover = {}));
   // Used to cheaply run some reductions to scan ahead without mutating
   // an entire stack
   class SimulatedStack {
       constructor(start) {
           this.start = start;
           this.state = start.state;
           this.stack = start.stack;
           this.base = this.stack.length;
       }
       reduce(action) {
           let term = action & 65535 /* Action.ValueMask */, depth = action >> 19 /* Action.ReduceDepthShift */;
           if (depth == 0) {
               if (this.stack == this.start.stack)
                   this.stack = this.stack.slice();
               this.stack.push(this.state, 0, 0);
               this.base += 3;
           }
           else {
               this.base -= (depth - 1) * 3;
           }
           let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);
           this.state = goto;
       }
   }
   // This is given to `Tree.build` to build a buffer, and encapsulates
   // the parent-stack-walking necessary to read the nodes.
   class StackBufferCursor {
       constructor(stack, pos, index) {
           this.stack = stack;
           this.pos = pos;
           this.index = index;
           this.buffer = stack.buffer;
           if (this.index == 0)
               this.maybeNext();
       }
       static create(stack, pos = stack.bufferBase + stack.buffer.length) {
           return new StackBufferCursor(stack, pos, pos - stack.bufferBase);
       }
       maybeNext() {
           let next = this.stack.parent;
           if (next != null) {
               this.index = this.stack.bufferBase - next.bufferBase;
               this.stack = next;
               this.buffer = next.buffer;
           }
       }
       get id() { return this.buffer[this.index - 4]; }
       get start() { return this.buffer[this.index - 3]; }
       get end() { return this.buffer[this.index - 2]; }
       get size() { return this.buffer[this.index - 1]; }
       next() {
           this.index -= 4;
           this.pos -= 4;
           if (this.index == 0)
               this.maybeNext();
       }
       fork() {
           return new StackBufferCursor(this.stack, this.pos, this.index);
       }
   }

   // See lezer-generator/src/encode.ts for comments about the encoding
   // used here
   function decodeArray(input, Type = Uint16Array) {
       if (typeof input != "string")
           return input;
       let array = null;
       for (let pos = 0, out = 0; pos < input.length;) {
           let value = 0;
           for (;;) {
               let next = input.charCodeAt(pos++), stop = false;
               if (next == 126 /* Encode.BigValCode */) {
                   value = 65535 /* Encode.BigVal */;
                   break;
               }
               if (next >= 92 /* Encode.Gap2 */)
                   next--;
               if (next >= 34 /* Encode.Gap1 */)
                   next--;
               let digit = next - 32 /* Encode.Start */;
               if (digit >= 46 /* Encode.Base */) {
                   digit -= 46 /* Encode.Base */;
                   stop = true;
               }
               value += digit;
               if (stop)
                   break;
               value *= 46 /* Encode.Base */;
           }
           if (array)
               array[out++] = value;
           else
               array = new Type(value);
       }
       return array;
   }

   class CachedToken {
       constructor() {
           this.start = -1;
           this.value = -1;
           this.end = -1;
           this.extended = -1;
           this.lookAhead = 0;
           this.mask = 0;
           this.context = 0;
       }
   }
   const nullToken = new CachedToken;
   /// [Tokenizers](#lr.ExternalTokenizer) interact with the input
   /// through this interface. It presents the input as a stream of
   /// characters, tracking lookahead and hiding the complexity of
   /// [ranges](#common.Parser.parse^ranges) from tokenizer code.
   class InputStream {
       /// @internal
       constructor(
       /// @internal
       input, 
       /// @internal
       ranges) {
           this.input = input;
           this.ranges = ranges;
           /// @internal
           this.chunk = "";
           /// @internal
           this.chunkOff = 0;
           /// Backup chunk
           this.chunk2 = "";
           this.chunk2Pos = 0;
           /// The character code of the next code unit in the input, or -1
           /// when the stream is at the end of the input.
           this.next = -1;
           /// @internal
           this.token = nullToken;
           this.rangeIndex = 0;
           this.pos = this.chunkPos = ranges[0].from;
           this.range = ranges[0];
           this.end = ranges[ranges.length - 1].to;
           this.readNext();
       }
       /// @internal
       resolveOffset(offset, assoc) {
           let range = this.range, index = this.rangeIndex;
           let pos = this.pos + offset;
           while (pos < range.from) {
               if (!index)
                   return null;
               let next = this.ranges[--index];
               pos -= range.from - next.to;
               range = next;
           }
           while (assoc < 0 ? pos > range.to : pos >= range.to) {
               if (index == this.ranges.length - 1)
                   return null;
               let next = this.ranges[++index];
               pos += next.from - range.to;
               range = next;
           }
           return pos;
       }
       /// @internal
       clipPos(pos) {
           if (pos >= this.range.from && pos < this.range.to)
               return pos;
           for (let range of this.ranges)
               if (range.to > pos)
                   return Math.max(pos, range.from);
           return this.end;
       }
       /// Look at a code unit near the stream position. `.peek(0)` equals
       /// `.next`, `.peek(-1)` gives you the previous character, and so
       /// on.
       ///
       /// Note that looking around during tokenizing creates dependencies
       /// on potentially far-away content, which may reduce the
       /// effectiveness incremental parsing—when looking forward—or even
       /// cause invalid reparses when looking backward more than 25 code
       /// units, since the library does not track lookbehind.
       peek(offset) {
           let idx = this.chunkOff + offset, pos, result;
           if (idx >= 0 && idx < this.chunk.length) {
               pos = this.pos + offset;
               result = this.chunk.charCodeAt(idx);
           }
           else {
               let resolved = this.resolveOffset(offset, 1);
               if (resolved == null)
                   return -1;
               pos = resolved;
               if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {
                   result = this.chunk2.charCodeAt(pos - this.chunk2Pos);
               }
               else {
                   let i = this.rangeIndex, range = this.range;
                   while (range.to <= pos)
                       range = this.ranges[++i];
                   this.chunk2 = this.input.chunk(this.chunk2Pos = pos);
                   if (pos + this.chunk2.length > range.to)
                       this.chunk2 = this.chunk2.slice(0, range.to - pos);
                   result = this.chunk2.charCodeAt(0);
               }
           }
           if (pos >= this.token.lookAhead)
               this.token.lookAhead = pos + 1;
           return result;
       }
       /// Accept a token. By default, the end of the token is set to the
       /// current stream position, but you can pass an offset (relative to
       /// the stream position) to change that.
       acceptToken(token, endOffset = 0) {
           let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;
           if (end == null || end < this.token.start)
               throw new RangeError("Token end out of bounds");
           this.token.value = token;
           this.token.end = end;
       }
       getChunk() {
           if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {
               let { chunk, chunkPos } = this;
               this.chunk = this.chunk2;
               this.chunkPos = this.chunk2Pos;
               this.chunk2 = chunk;
               this.chunk2Pos = chunkPos;
               this.chunkOff = this.pos - this.chunkPos;
           }
           else {
               this.chunk2 = this.chunk;
               this.chunk2Pos = this.chunkPos;
               let nextChunk = this.input.chunk(this.pos);
               let end = this.pos + nextChunk.length;
               this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;
               this.chunkPos = this.pos;
               this.chunkOff = 0;
           }
       }
       readNext() {
           if (this.chunkOff >= this.chunk.length) {
               this.getChunk();
               if (this.chunkOff == this.chunk.length)
                   return this.next = -1;
           }
           return this.next = this.chunk.charCodeAt(this.chunkOff);
       }
       /// Move the stream forward N (defaults to 1) code units. Returns
       /// the new value of [`next`](#lr.InputStream.next).
       advance(n = 1) {
           this.chunkOff += n;
           while (this.pos + n >= this.range.to) {
               if (this.rangeIndex == this.ranges.length - 1)
                   return this.setDone();
               n -= this.range.to - this.pos;
               this.range = this.ranges[++this.rangeIndex];
               this.pos = this.range.from;
           }
           this.pos += n;
           if (this.pos >= this.token.lookAhead)
               this.token.lookAhead = this.pos + 1;
           return this.readNext();
       }
       setDone() {
           this.pos = this.chunkPos = this.end;
           this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];
           this.chunk = "";
           return this.next = -1;
       }
       /// @internal
       reset(pos, token) {
           if (token) {
               this.token = token;
               token.start = pos;
               token.lookAhead = pos + 1;
               token.value = token.extended = -1;
           }
           else {
               this.token = nullToken;
           }
           if (this.pos != pos) {
               this.pos = pos;
               if (pos == this.end) {
                   this.setDone();
                   return this;
               }
               while (pos < this.range.from)
                   this.range = this.ranges[--this.rangeIndex];
               while (pos >= this.range.to)
                   this.range = this.ranges[++this.rangeIndex];
               if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {
                   this.chunkOff = pos - this.chunkPos;
               }
               else {
                   this.chunk = "";
                   this.chunkOff = 0;
               }
               this.readNext();
           }
           return this;
       }
       /// @internal
       read(from, to) {
           if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length)
               return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);
           if (from >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length)
               return this.chunk2.slice(from - this.chunk2Pos, to - this.chunk2Pos);
           if (from >= this.range.from && to <= this.range.to)
               return this.input.read(from, to);
           let result = "";
           for (let r of this.ranges) {
               if (r.from >= to)
                   break;
               if (r.to > from)
                   result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));
           }
           return result;
       }
   }
   /// @internal
   class TokenGroup {
       constructor(data, id) {
           this.data = data;
           this.id = id;
       }
       token(input, stack) {
           let { parser } = stack.p;
           readToken$2(this.data, input, stack, this.id, parser.data, parser.tokenPrecTable);
       }
   }
   TokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
   /// @hide
   class LocalTokenGroup {
       constructor(data, precTable, elseToken) {
           this.precTable = precTable;
           this.elseToken = elseToken;
           this.data = typeof data == "string" ? decodeArray(data) : data;
       }
       token(input, stack) {
           let start = input.pos, skipped = 0;
           for (;;) {
               readToken$2(this.data, input, stack, 0, this.data, this.precTable);
               if (input.token.value > -1)
                   break;
               if (this.elseToken == null)
                   return;
               if (input.next < 0)
                   break;
               input.advance();
               input.reset(input.pos, input.token);
               skipped++;
           }
           if (skipped) {
               input.reset(start, input.token);
               input.acceptToken(this.elseToken, skipped);
           }
       }
   }
   LocalTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
   /// `@external tokens` declarations in the grammar should resolve to
   /// an instance of this class.
   class ExternalTokenizer {
       /// Create a tokenizer. The first argument is the function that,
       /// given an input stream, scans for the types of tokens it
       /// recognizes at the stream's position, and calls
       /// [`acceptToken`](#lr.InputStream.acceptToken) when it finds
       /// one.
       constructor(
       /// @internal
       token, options = {}) {
           this.token = token;
           this.contextual = !!options.contextual;
           this.fallback = !!options.fallback;
           this.extend = !!options.extend;
       }
   }
   // Tokenizer data is stored a big uint16 array containing, for each
   // state:
   //
   //  - A group bitmask, indicating what token groups are reachable from
   //    this state, so that paths that can only lead to tokens not in
   //    any of the current groups can be cut off early.
   //
   //  - The position of the end of the state's sequence of accepting
   //    tokens
   //
   //  - The number of outgoing edges for the state
   //
   //  - The accepting tokens, as (token id, group mask) pairs
   //
   //  - The outgoing edges, as (start character, end character, state
   //    index) triples, with end character being exclusive
   //
   // This function interprets that data, running through a stream as
   // long as new states with the a matching group mask can be reached,
   // and updating `input.token` when it matches a token.
   function readToken$2(data, input, stack, group, precTable, precOffset) {
       let state = 0, groupMask = 1 << group, { dialect } = stack.p.parser;
       scan: for (;;) {
           if ((groupMask & data[state]) == 0)
               break;
           let accEnd = data[state + 1];
           // Check whether this state can lead to a token in the current group
           // Accept tokens in this state, possibly overwriting
           // lower-precedence / shorter tokens
           for (let i = state + 3; i < accEnd; i += 2)
               if ((data[i + 1] & groupMask) > 0) {
                   let term = data[i];
                   if (dialect.allows(term) &&
                       (input.token.value == -1 || input.token.value == term ||
                           overrides(term, input.token.value, precTable, precOffset))) {
                       input.acceptToken(term);
                       break;
                   }
               }
           let next = input.next, low = 0, high = data[state + 2];
           // Special case for EOF
           if (input.next < 0 && high > low && data[accEnd + high * 3 - 3] == 65535 /* Seq.End */ && data[accEnd + high * 3 - 3] == 65535 /* Seq.End */) {
               state = data[accEnd + high * 3 - 1];
               continue scan;
           }
           // Do a binary search on the state's edges
           for (; low < high;) {
               let mid = (low + high) >> 1;
               let index = accEnd + mid + (mid << 1);
               let from = data[index], to = data[index + 1] || 0x10000;
               if (next < from)
                   high = mid;
               else if (next >= to)
                   low = mid + 1;
               else {
                   state = data[index + 2];
                   input.advance();
                   continue scan;
               }
           }
           break;
       }
   }
   function findOffset(data, start, term) {
       for (let i = start, next; (next = data[i]) != 65535 /* Seq.End */; i++)
           if (next == term)
               return i - start;
       return -1;
   }
   function overrides(token, prev, tableData, tableOffset) {
       let iPrev = findOffset(tableData, tableOffset, prev);
       return iPrev < 0 || findOffset(tableData, tableOffset, token) < iPrev;
   }

   // Environment variable used to control console output
   const verbose = typeof process != "undefined" && process.env && /\bparse\b/.test(process.env.LOG);
   let stackIDs = null;
   var Safety;
   (function (Safety) {
       Safety[Safety["Margin"] = 25] = "Margin";
   })(Safety || (Safety = {}));
   function cutAt(tree, pos, side) {
       let cursor = tree.cursor(IterMode.IncludeAnonymous);
       cursor.moveTo(pos);
       for (;;) {
           if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))
               for (;;) {
                   if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)
                       return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25 /* Safety.Margin */))
                           : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25 /* Safety.Margin */));
                   if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())
                       break;
                   if (!cursor.parent())
                       return side < 0 ? 0 : tree.length;
               }
       }
   }
   class FragmentCursor {
       constructor(fragments, nodeSet) {
           this.fragments = fragments;
           this.nodeSet = nodeSet;
           this.i = 0;
           this.fragment = null;
           this.safeFrom = -1;
           this.safeTo = -1;
           this.trees = [];
           this.start = [];
           this.index = [];
           this.nextFragment();
       }
       nextFragment() {
           let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];
           if (fr) {
               this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;
               this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;
               while (this.trees.length) {
                   this.trees.pop();
                   this.start.pop();
                   this.index.pop();
               }
               this.trees.push(fr.tree);
               this.start.push(-fr.offset);
               this.index.push(0);
               this.nextStart = this.safeFrom;
           }
           else {
               this.nextStart = 1e9;
           }
       }
       // `pos` must be >= any previously given `pos` for this cursor
       nodeAt(pos) {
           if (pos < this.nextStart)
               return null;
           while (this.fragment && this.safeTo <= pos)
               this.nextFragment();
           if (!this.fragment)
               return null;
           for (;;) {
               let last = this.trees.length - 1;
               if (last < 0) { // End of tree
                   this.nextFragment();
                   return null;
               }
               let top = this.trees[last], index = this.index[last];
               if (index == top.children.length) {
                   this.trees.pop();
                   this.start.pop();
                   this.index.pop();
                   continue;
               }
               let next = top.children[index];
               let start = this.start[last] + top.positions[index];
               if (start > pos) {
                   this.nextStart = start;
                   return null;
               }
               if (next instanceof Tree) {
                   if (start == pos) {
                       if (start < this.safeFrom)
                           return null;
                       let end = start + next.length;
                       if (end <= this.safeTo) {
                           let lookAhead = next.prop(NodeProp.lookAhead);
                           if (!lookAhead || end + lookAhead < this.fragment.to)
                               return next;
                       }
                   }
                   this.index[last]++;
                   if (start + next.length >= Math.max(this.safeFrom, pos)) { // Enter this node
                       this.trees.push(next);
                       this.start.push(start);
                       this.index.push(0);
                   }
               }
               else {
                   this.index[last]++;
                   this.nextStart = start + next.length;
               }
           }
       }
   }
   class TokenCache {
       constructor(parser, stream) {
           this.stream = stream;
           this.tokens = [];
           this.mainToken = null;
           this.actions = [];
           this.tokens = parser.tokenizers.map(_ => new CachedToken);
       }
       getActions(stack) {
           let actionIndex = 0;
           let main = null;
           let { parser } = stack.p, { tokenizers } = parser;
           let mask = parser.stateSlot(stack.state, 3 /* ParseState.TokenizerMask */);
           let context = stack.curContext ? stack.curContext.hash : 0;
           let lookAhead = 0;
           for (let i = 0; i < tokenizers.length; i++) {
               if (((1 << i) & mask) == 0)
                   continue;
               let tokenizer = tokenizers[i], token = this.tokens[i];
               if (main && !tokenizer.fallback)
                   continue;
               if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {
                   this.updateCachedToken(token, tokenizer, stack);
                   token.mask = mask;
                   token.context = context;
               }
               if (token.lookAhead > token.end + 25 /* Safety.Margin */)
                   lookAhead = Math.max(token.lookAhead, lookAhead);
               if (token.value != 0 /* Term.Err */) {
                   let startIndex = actionIndex;
                   if (token.extended > -1)
                       actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);
                   actionIndex = this.addActions(stack, token.value, token.end, actionIndex);
                   if (!tokenizer.extend) {
                       main = token;
                       if (actionIndex > startIndex)
                           break;
                   }
               }
           }
           while (this.actions.length > actionIndex)
               this.actions.pop();
           if (lookAhead)
               stack.setLookAhead(lookAhead);
           if (!main && stack.pos == this.stream.end) {
               main = new CachedToken;
               main.value = stack.p.parser.eofTerm;
               main.start = main.end = stack.pos;
               actionIndex = this.addActions(stack, main.value, main.end, actionIndex);
           }
           this.mainToken = main;
           return this.actions;
       }
       getMainToken(stack) {
           if (this.mainToken)
               return this.mainToken;
           let main = new CachedToken, { pos, p } = stack;
           main.start = pos;
           main.end = Math.min(pos + 1, p.stream.end);
           main.value = pos == p.stream.end ? p.parser.eofTerm : 0 /* Term.Err */;
           return main;
       }
       updateCachedToken(token, tokenizer, stack) {
           let start = this.stream.clipPos(stack.pos);
           tokenizer.token(this.stream.reset(start, token), stack);
           if (token.value > -1) {
               let { parser } = stack.p;
               for (let i = 0; i < parser.specialized.length; i++)
                   if (parser.specialized[i] == token.value) {
                       let result = parser.specializers[i](this.stream.read(token.start, token.end), stack);
                       if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {
                           if ((result & 1) == 0 /* Specialize.Specialize */)
                               token.value = result >> 1;
                           else
                               token.extended = result >> 1;
                           break;
                       }
                   }
           }
           else {
               token.value = 0 /* Term.Err */;
               token.end = this.stream.clipPos(start + 1);
           }
       }
       putAction(action, token, end, index) {
           // Don't add duplicate actions
           for (let i = 0; i < index; i += 3)
               if (this.actions[i] == action)
                   return index;
           this.actions[index++] = action;
           this.actions[index++] = token;
           this.actions[index++] = end;
           return index;
       }
       addActions(stack, token, end, index) {
           let { state } = stack, { parser } = stack.p, { data } = parser;
           for (let set = 0; set < 2; set++) {
               for (let i = parser.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */);; i += 3) {
                   if (data[i] == 65535 /* Seq.End */) {
                       if (data[i + 1] == 1 /* Seq.Next */) {
                           i = pair(data, i + 2);
                       }
                       else {
                           if (index == 0 && data[i + 1] == 2 /* Seq.Other */)
                               index = this.putAction(pair(data, i + 2), token, end, index);
                           break;
                       }
                   }
                   if (data[i] == token)
                       index = this.putAction(pair(data, i + 1), token, end, index);
               }
           }
           return index;
       }
   }
   var Rec;
   (function (Rec) {
       Rec[Rec["Distance"] = 5] = "Distance";
       Rec[Rec["MaxRemainingPerStep"] = 3] = "MaxRemainingPerStep";
       // When two stacks have been running independently long enough to
       // add this many elements to their buffers, prune one.
       Rec[Rec["MinBufferLengthPrune"] = 500] = "MinBufferLengthPrune";
       Rec[Rec["ForceReduceLimit"] = 10] = "ForceReduceLimit";
       // Once a stack reaches this depth (in .stack.length) force-reduce
       // it back to CutTo to avoid creating trees that overflow the stack
       // on recursive traversal.
       Rec[Rec["CutDepth"] = 15000] = "CutDepth";
       Rec[Rec["CutTo"] = 9000] = "CutTo";
       Rec[Rec["MaxLeftAssociativeReductionCount"] = 300] = "MaxLeftAssociativeReductionCount";
       // The maximum number of non-recovering stacks to explore (to avoid
       // getting bogged down with exponentially multiplying stacks in
       // ambiguous content)
       Rec[Rec["MaxStackCount"] = 12] = "MaxStackCount";
   })(Rec || (Rec = {}));
   class Parse {
       constructor(parser, input, fragments, ranges) {
           this.parser = parser;
           this.input = input;
           this.ranges = ranges;
           this.recovering = 0;
           this.nextStackID = 0x2654; // ♔, ♕, ♖, ♗, ♘, ♙, ♠, ♡, ♢, ♣, ♤, ♥, ♦, ♧
           this.minStackPos = 0;
           this.reused = [];
           this.stoppedAt = null;
           this.lastBigReductionStart = -1;
           this.lastBigReductionSize = 0;
           this.bigReductionCount = 0;
           this.stream = new InputStream(input, ranges);
           this.tokens = new TokenCache(parser, this.stream);
           this.topTerm = parser.top[1];
           let { from } = ranges[0];
           this.stacks = [Stack.start(this, parser.top[0], from)];
           this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4
               ? new FragmentCursor(fragments, parser.nodeSet) : null;
       }
       get parsedPos() {
           return this.minStackPos;
       }
       // Move the parser forward. This will process all parse stacks at
       // `this.pos` and try to advance them to a further position. If no
       // stack for such a position is found, it'll start error-recovery.
       //
       // When the parse is finished, this will return a syntax tree. When
       // not, it returns `null`.
       advance() {
           let stacks = this.stacks, pos = this.minStackPos;
           // This will hold stacks beyond `pos`.
           let newStacks = this.stacks = [];
           let stopped, stoppedTokens;
           // If a large amount of reductions happened with the same start
           // position, force the stack out of that production in order to
           // avoid creating a tree too deep to recurse through.
           // (This is an ugly kludge, because unfortunately there is no
           // straightforward, cheap way to check for this happening, due to
           // the history of reductions only being available in an
           // expensive-to-access format in the stack buffers.)
           if (this.bigReductionCount > 300 /* Rec.MaxLeftAssociativeReductionCount */ && stacks.length == 1) {
               let [s] = stacks;
               while (s.forceReduce() && s.stack.length && s.stack[s.stack.length - 2] >= this.lastBigReductionStart) { }
               this.bigReductionCount = this.lastBigReductionSize = 0;
           }
           // Keep advancing any stacks at `pos` until they either move
           // forward or can't be advanced. Gather stacks that can't be
           // advanced further in `stopped`.
           for (let i = 0; i < stacks.length; i++) {
               let stack = stacks[i];
               for (;;) {
                   this.tokens.mainToken = null;
                   if (stack.pos > pos) {
                       newStacks.push(stack);
                   }
                   else if (this.advanceStack(stack, newStacks, stacks)) {
                       continue;
                   }
                   else {
                       if (!stopped) {
                           stopped = [];
                           stoppedTokens = [];
                       }
                       stopped.push(stack);
                       let tok = this.tokens.getMainToken(stack);
                       stoppedTokens.push(tok.value, tok.end);
                   }
                   break;
               }
           }
           if (!newStacks.length) {
               let finished = stopped && findFinished(stopped);
               if (finished)
                   return this.stackToTree(finished);
               if (this.parser.strict) {
                   if (verbose && stopped)
                       console.log("Stuck with token " + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : "none"));
                   throw new SyntaxError("No parse at " + pos);
               }
               if (!this.recovering)
                   this.recovering = 5 /* Rec.Distance */;
           }
           if (this.recovering && stopped) {
               let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0]
                   : this.runRecovery(stopped, stoppedTokens, newStacks);
               if (finished)
                   return this.stackToTree(finished.forceAll());
           }
           if (this.recovering) {
               let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* Rec.MaxRemainingPerStep */;
               if (newStacks.length > maxRemaining) {
                   newStacks.sort((a, b) => b.score - a.score);
                   while (newStacks.length > maxRemaining)
                       newStacks.pop();
               }
               if (newStacks.some(s => s.reducePos > pos))
                   this.recovering--;
           }
           else if (newStacks.length > 1) {
               // Prune stacks that are in the same state, or that have been
               // running without splitting for a while, to avoid getting stuck
               // with multiple successful stacks running endlessly on.
               outer: for (let i = 0; i < newStacks.length - 1; i++) {
                   let stack = newStacks[i];
                   for (let j = i + 1; j < newStacks.length; j++) {
                       let other = newStacks[j];
                       if (stack.sameState(other) ||
                           stack.buffer.length > 500 /* Rec.MinBufferLengthPrune */ && other.buffer.length > 500 /* Rec.MinBufferLengthPrune */) {
                           if (((stack.score - other.score) || (stack.buffer.length - other.buffer.length)) > 0) {
                               newStacks.splice(j--, 1);
                           }
                           else {
                               newStacks.splice(i--, 1);
                               continue outer;
                           }
                       }
                   }
               }
               if (newStacks.length > 12 /* Rec.MaxStackCount */)
                   newStacks.splice(12 /* Rec.MaxStackCount */, newStacks.length - 12 /* Rec.MaxStackCount */);
           }
           this.minStackPos = newStacks[0].pos;
           for (let i = 1; i < newStacks.length; i++)
               if (newStacks[i].pos < this.minStackPos)
                   this.minStackPos = newStacks[i].pos;
           return null;
       }
       stopAt(pos) {
           if (this.stoppedAt != null && this.stoppedAt < pos)
               throw new RangeError("Can't move stoppedAt forward");
           this.stoppedAt = pos;
       }
       // Returns an updated version of the given stack, or null if the
       // stack can't advance normally. When `split` and `stacks` are
       // given, stacks split off by ambiguous operations will be pushed to
       // `split`, or added to `stacks` if they move `pos` forward.
       advanceStack(stack, stacks, split) {
           let start = stack.pos, { parser } = this;
           let base = verbose ? this.stackID(stack) + " -> " : "";
           if (this.stoppedAt != null && start > this.stoppedAt)
               return stack.forceReduce() ? stack : null;
           if (this.fragments) {
               let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;
               for (let cached = this.fragments.nodeAt(start); cached;) {
                   let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;
                   if (match > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {
                       stack.useNode(cached, match);
                       if (verbose)
                           console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);
                       return true;
                   }
                   if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0)
                       break;
                   let inner = cached.children[0];
                   if (inner instanceof Tree && cached.positions[0] == 0)
                       cached = inner;
                   else
                       break;
               }
           }
           let defaultReduce = parser.stateSlot(stack.state, 4 /* ParseState.DefaultReduce */);
           if (defaultReduce > 0) {
               stack.reduce(defaultReduce);
               if (verbose)
                   console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535 /* Action.ValueMask */)})`);
               return true;
           }
           if (stack.stack.length >= 15000 /* Rec.CutDepth */) {
               while (stack.stack.length > 9000 /* Rec.CutTo */ && stack.forceReduce()) { }
           }
           let actions = this.tokens.getActions(stack);
           for (let i = 0; i < actions.length;) {
               let action = actions[i++], term = actions[i++], end = actions[i++];
               let last = i == actions.length || !split;
               let localStack = last ? stack : stack.split();
               localStack.apply(action, term, end);
               if (verbose)
                   console.log(base + this.stackID(localStack) + ` (via ${(action & 65536 /* Action.ReduceFlag */) == 0 ? "shift"
                    : `reduce of ${parser.getName(action & 65535 /* Action.ValueMask */)}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? "" : ", split"})`);
               if (last)
                   return true;
               else if (localStack.pos > start)
                   stacks.push(localStack);
               else
                   split.push(localStack);
           }
           return false;
       }
       // Advance a given stack forward as far as it will go. Returns the
       // (possibly updated) stack if it got stuck, or null if it moved
       // forward and was given to `pushStackDedup`.
       advanceFully(stack, newStacks) {
           let pos = stack.pos;
           for (;;) {
               if (!this.advanceStack(stack, null, null))
                   return false;
               if (stack.pos > pos) {
                   pushStackDedup(stack, newStacks);
                   return true;
               }
           }
       }
       runRecovery(stacks, tokens, newStacks) {
           let finished = null, restarted = false;
           for (let i = 0; i < stacks.length; i++) {
               let stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];
               let base = verbose ? this.stackID(stack) + " -> " : "";
               if (stack.deadEnd) {
                   if (restarted)
                       continue;
                   restarted = true;
                   stack.restart();
                   if (verbose)
                       console.log(base + this.stackID(stack) + " (restarted)");
                   let done = this.advanceFully(stack, newStacks);
                   if (done)
                       continue;
               }
               let force = stack.split(), forceBase = base;
               for (let j = 0; force.forceReduce() && j < 10 /* Rec.ForceReduceLimit */; j++) {
                   if (verbose)
                       console.log(forceBase + this.stackID(force) + " (via force-reduce)");
                   let done = this.advanceFully(force, newStacks);
                   if (done)
                       break;
                   if (verbose)
                       forceBase = this.stackID(force) + " -> ";
               }
               for (let insert of stack.recoverByInsert(token)) {
                   if (verbose)
                       console.log(base + this.stackID(insert) + " (via recover-insert)");
                   this.advanceFully(insert, newStacks);
               }
               if (this.stream.end > stack.pos) {
                   if (tokenEnd == stack.pos) {
                       tokenEnd++;
                       token = 0 /* Term.Err */;
                   }
                   stack.recoverByDelete(token, tokenEnd);
                   if (verbose)
                       console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);
                   pushStackDedup(stack, newStacks);
               }
               else if (!finished || finished.score < stack.score) {
                   finished = stack;
               }
           }
           return finished;
       }
       // Convert the stack's buffer to a syntax tree.
       stackToTree(stack) {
           stack.close();
           return Tree.build({ buffer: StackBufferCursor.create(stack),
               nodeSet: this.parser.nodeSet,
               topID: this.topTerm,
               maxBufferLength: this.parser.bufferLength,
               reused: this.reused,
               start: this.ranges[0].from,
               length: stack.pos - this.ranges[0].from,
               minRepeatType: this.parser.minRepeatTerm });
       }
       stackID(stack) {
           let id = (stackIDs || (stackIDs = new WeakMap)).get(stack);
           if (!id)
               stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));
           return id + stack;
       }
   }
   function pushStackDedup(stack, newStacks) {
       for (let i = 0; i < newStacks.length; i++) {
           let other = newStacks[i];
           if (other.pos == stack.pos && other.sameState(stack)) {
               if (newStacks[i].score < stack.score)
                   newStacks[i] = stack;
               return;
           }
       }
       newStacks.push(stack);
   }
   class Dialect {
       constructor(source, flags, disabled) {
           this.source = source;
           this.flags = flags;
           this.disabled = disabled;
       }
       allows(term) { return !this.disabled || this.disabled[term] == 0; }
   }
   const id = x => x;
   /// Context trackers are used to track stateful context (such as
   /// indentation in the Python grammar, or parent elements in the XML
   /// grammar) needed by external tokenizers. You declare them in a
   /// grammar file as `@context exportName from "module"`.
   ///
   /// Context values should be immutable, and can be updated (replaced)
   /// on shift or reduce actions.
   ///
   /// The export used in a `@context` declaration should be of this
   /// type.
   class ContextTracker {
       /// Define a context tracker.
       constructor(spec) {
           this.start = spec.start;
           this.shift = spec.shift || id;
           this.reduce = spec.reduce || id;
           this.reuse = spec.reuse || id;
           this.hash = spec.hash || (() => 0);
           this.strict = spec.strict !== false;
       }
   }
   /// Holds the parse tables for a given grammar, as generated by
   /// `lezer-generator`, and provides [methods](#common.Parser) to parse
   /// content with.
   class LRParser extends Parser$1 {
       /// @internal
       constructor(spec) {
           super();
           /// @internal
           this.wrappers = [];
           if (spec.version != 14 /* File.Version */)
               throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${14 /* File.Version */})`);
           let nodeNames = spec.nodeNames.split(" ");
           this.minRepeatTerm = nodeNames.length;
           for (let i = 0; i < spec.repeatNodeCount; i++)
               nodeNames.push("");
           let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1]);
           let nodeProps = [];
           for (let i = 0; i < nodeNames.length; i++)
               nodeProps.push([]);
           function setProp(nodeID, prop, value) {
               nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);
           }
           if (spec.nodeProps)
               for (let propSpec of spec.nodeProps) {
                   let prop = propSpec[0];
                   if (typeof prop == "string")
                       prop = NodeProp[prop];
                   for (let i = 1; i < propSpec.length;) {
                       let next = propSpec[i++];
                       if (next >= 0) {
                           setProp(next, prop, propSpec[i++]);
                       }
                       else {
                           let value = propSpec[i + -next];
                           for (let j = -next; j > 0; j--)
                               setProp(propSpec[i++], prop, value);
                           i++;
                       }
                   }
               }
           this.nodeSet = new NodeSet(nodeNames.map((name, i) => NodeType.define({
               name: i >= this.minRepeatTerm ? undefined : name,
               id: i,
               props: nodeProps[i],
               top: topTerms.indexOf(i) > -1,
               error: i == 0,
               skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1
           })));
           if (spec.propSources)
               this.nodeSet = this.nodeSet.extend(...spec.propSources);
           this.strict = false;
           this.bufferLength = DefaultBufferLength;
           let tokenArray = decodeArray(spec.tokenData);
           this.context = spec.context;
           this.specializerSpecs = spec.specialized || [];
           this.specialized = new Uint16Array(this.specializerSpecs.length);
           for (let i = 0; i < this.specializerSpecs.length; i++)
               this.specialized[i] = this.specializerSpecs[i].term;
           this.specializers = this.specializerSpecs.map(getSpecializer);
           this.states = decodeArray(spec.states, Uint32Array);
           this.data = decodeArray(spec.stateData);
           this.goto = decodeArray(spec.goto);
           this.maxTerm = spec.maxTerm;
           this.tokenizers = spec.tokenizers.map(value => typeof value == "number" ? new TokenGroup(tokenArray, value) : value);
           this.topRules = spec.topRules;
           this.dialects = spec.dialects || {};
           this.dynamicPrecedences = spec.dynamicPrecedences || null;
           this.tokenPrecTable = spec.tokenPrec;
           this.termNames = spec.termNames || null;
           this.maxNode = this.nodeSet.types.length - 1;
           this.dialect = this.parseDialect();
           this.top = this.topRules[Object.keys(this.topRules)[0]];
       }
       createParse(input, fragments, ranges) {
           let parse = new Parse(this, input, fragments, ranges);
           for (let w of this.wrappers)
               parse = w(parse, input, fragments, ranges);
           return parse;
       }
       /// Get a goto table entry @internal
       getGoto(state, term, loose = false) {
           let table = this.goto;
           if (term >= table[0])
               return -1;
           for (let pos = table[term + 1];;) {
               let groupTag = table[pos++], last = groupTag & 1;
               let target = table[pos++];
               if (last && loose)
                   return target;
               for (let end = pos + (groupTag >> 1); pos < end; pos++)
                   if (table[pos] == state)
                       return target;
               if (last)
                   return -1;
           }
       }
       /// Check if this state has an action for a given terminal @internal
       hasAction(state, terminal) {
           let data = this.data;
           for (let set = 0; set < 2; set++) {
               for (let i = this.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */), next;; i += 3) {
                   if ((next = data[i]) == 65535 /* Seq.End */) {
                       if (data[i + 1] == 1 /* Seq.Next */)
                           next = data[i = pair(data, i + 2)];
                       else if (data[i + 1] == 2 /* Seq.Other */)
                           return pair(data, i + 2);
                       else
                           break;
                   }
                   if (next == terminal || next == 0 /* Term.Err */)
                       return pair(data, i + 1);
               }
           }
           return 0;
       }
       /// @internal
       stateSlot(state, slot) {
           return this.states[(state * 6 /* ParseState.Size */) + slot];
       }
       /// @internal
       stateFlag(state, flag) {
           return (this.stateSlot(state, 0 /* ParseState.Flags */) & flag) > 0;
       }
       /// @internal
       validAction(state, action) {
           return !!this.allActions(state, a => a == action ? true : null);
       }
       /// @internal
       allActions(state, action) {
           let deflt = this.stateSlot(state, 4 /* ParseState.DefaultReduce */);
           let result = deflt ? action(deflt) : undefined;
           for (let i = this.stateSlot(state, 1 /* ParseState.Actions */); result == null; i += 3) {
               if (this.data[i] == 65535 /* Seq.End */) {
                   if (this.data[i + 1] == 1 /* Seq.Next */)
                       i = pair(this.data, i + 2);
                   else
                       break;
               }
               result = action(pair(this.data, i + 1));
           }
           return result;
       }
       /// Get the states that can follow this one through shift actions or
       /// goto jumps. @internal
       nextStates(state) {
           let result = [];
           for (let i = this.stateSlot(state, 1 /* ParseState.Actions */);; i += 3) {
               if (this.data[i] == 65535 /* Seq.End */) {
                   if (this.data[i + 1] == 1 /* Seq.Next */)
                       i = pair(this.data, i + 2);
                   else
                       break;
               }
               if ((this.data[i + 2] & (65536 /* Action.ReduceFlag */ >> 16)) == 0) {
                   let value = this.data[i + 1];
                   if (!result.some((v, i) => (i & 1) && v == value))
                       result.push(this.data[i], value);
               }
           }
           return result;
       }
       /// Configure the parser. Returns a new parser instance that has the
       /// given settings modified. Settings not provided in `config` are
       /// kept from the original parser.
       configure(config) {
           // Hideous reflection-based kludge to make it easy to create a
           // slightly modified copy of a parser.
           let copy = Object.assign(Object.create(LRParser.prototype), this);
           if (config.props)
               copy.nodeSet = this.nodeSet.extend(...config.props);
           if (config.top) {
               let info = this.topRules[config.top];
               if (!info)
                   throw new RangeError(`Invalid top rule name ${config.top}`);
               copy.top = info;
           }
           if (config.tokenizers)
               copy.tokenizers = this.tokenizers.map(t => {
                   let found = config.tokenizers.find(r => r.from == t);
                   return found ? found.to : t;
               });
           if (config.specializers) {
               copy.specializers = this.specializers.slice();
               copy.specializerSpecs = this.specializerSpecs.map((s, i) => {
                   let found = config.specializers.find(r => r.from == s.external);
                   if (!found)
                       return s;
                   let spec = Object.assign(Object.assign({}, s), { external: found.to });
                   copy.specializers[i] = getSpecializer(spec);
                   return spec;
               });
           }
           if (config.contextTracker)
               copy.context = config.contextTracker;
           if (config.dialect)
               copy.dialect = this.parseDialect(config.dialect);
           if (config.strict != null)
               copy.strict = config.strict;
           if (config.wrap)
               copy.wrappers = copy.wrappers.concat(config.wrap);
           if (config.bufferLength != null)
               copy.bufferLength = config.bufferLength;
           return copy;
       }
       /// Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)
       /// are registered for this parser.
       hasWrappers() {
           return this.wrappers.length > 0;
       }
       /// Returns the name associated with a given term. This will only
       /// work for all terms when the parser was generated with the
       /// `--names` option. By default, only the names of tagged terms are
       /// stored.
       getName(term) {
           return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);
       }
       /// The eof term id is always allocated directly after the node
       /// types. @internal
       get eofTerm() { return this.maxNode + 1; }
       /// The type of top node produced by the parser.
       get topNode() { return this.nodeSet.types[this.top[1]]; }
       /// @internal
       dynamicPrecedence(term) {
           let prec = this.dynamicPrecedences;
           return prec == null ? 0 : prec[term] || 0;
       }
       /// @internal
       parseDialect(dialect) {
           let values = Object.keys(this.dialects), flags = values.map(() => false);
           if (dialect)
               for (let part of dialect.split(" ")) {
                   let id = values.indexOf(part);
                   if (id >= 0)
                       flags[id] = true;
               }
           let disabled = null;
           for (let i = 0; i < values.length; i++)
               if (!flags[i]) {
                   for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != 65535 /* Seq.End */;)
                       (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;
               }
           return new Dialect(dialect, flags, disabled);
       }
       /// Used by the output of the parser generator. Not available to
       /// user code. @hide
       static deserialize(spec) {
           return new LRParser(spec);
       }
   }
   function pair(data, off) { return data[off] | (data[off + 1] << 16); }
   function findFinished(stacks) {
       let best = null;
       for (let stack of stacks) {
           let stopped = stack.p.stoppedAt;
           if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) &&
               stack.p.parser.stateFlag(stack.state, 2 /* StateFlag.Accepting */) &&
               (!best || best.score < stack.score))
               best = stack;
       }
       return best;
   }
   function getSpecializer(spec) {
       if (spec.external) {
           let mask = spec.extend ? 1 /* Specialize.Extend */ : 0 /* Specialize.Specialize */;
           return (value, stack) => (spec.external(value, stack) << 1) | mask;
       }
       return spec.get;
   }

   // This file was generated by lezer-generator. You probably shouldn't edit it.
   const scriptText = 54,
     StartCloseScriptTag = 1,
     styleText = 55,
     StartCloseStyleTag = 2,
     textareaText = 56,
     StartCloseTextareaTag = 3,
     EndTag = 4,
     SelfClosingEndTag = 5,
     StartTag$1 = 6,
     StartScriptTag = 7,
     StartStyleTag = 8,
     StartTextareaTag = 9,
     StartSelfClosingTag = 10,
     StartCloseTag$1 = 11,
     NoMatchStartCloseTag = 12,
     MismatchedStartCloseTag = 13,
     missingCloseTag = 57,
     IncompleteCloseTag = 14,
     commentContent$1$1 = 58,
     Element$2 = 20,
     TagName = 22,
     Attribute = 23,
     AttributeName = 24,
     AttributeValue = 26,
     UnquotedAttributeValue = 27,
     ScriptText = 28,
     StyleText = 31,
     TextareaText = 34,
     OpenTag$1 = 36,
     CloseTag = 37,
     Dialect_noMatch = 0,
     Dialect_selfClosing = 1;

   /* Hand-written tokenizers for HTML. */

   const selfClosers$1 = {
     area: true, base: true, br: true, col: true, command: true,
     embed: true, frame: true, hr: true, img: true, input: true,
     keygen: true, link: true, meta: true, param: true, source: true,
     track: true, wbr: true, menuitem: true
   };

   const implicitlyClosed = {
     dd: true, li: true, optgroup: true, option: true, p: true,
     rp: true, rt: true, tbody: true, td: true, tfoot: true,
     th: true, tr: true
   };

   const closeOnOpen = {
     dd: {dd: true, dt: true},
     dt: {dd: true, dt: true},
     li: {li: true},
     option: {option: true, optgroup: true},
     optgroup: {optgroup: true},
     p: {
       address: true, article: true, aside: true, blockquote: true, dir: true,
       div: true, dl: true, fieldset: true, footer: true, form: true,
       h1: true, h2: true, h3: true, h4: true, h5: true, h6: true,
       header: true, hgroup: true, hr: true, menu: true, nav: true, ol: true,
       p: true, pre: true, section: true, table: true, ul: true
     },
     rp: {rp: true, rt: true},
     rt: {rp: true, rt: true},
     tbody: {tbody: true, tfoot: true},
     td: {td: true, th: true},
     tfoot: {tbody: true},
     th: {td: true, th: true},
     thead: {tbody: true, tfoot: true},
     tr: {tr: true}
   };

   function nameChar$1(ch) {
     return ch == 45 || ch == 46 || ch == 58 || ch >= 65 && ch <= 90 || ch == 95 || ch >= 97 && ch <= 122 || ch >= 161
   }

   function isSpace$2(ch) {
     return ch == 9 || ch == 10 || ch == 13 || ch == 32
   }

   let cachedName$1 = null, cachedInput$1 = null, cachedPos$1 = 0;
   function tagNameAfter$1(input, offset) {
     let pos = input.pos + offset;
     if (cachedPos$1 == pos && cachedInput$1 == input) return cachedName$1
     let next = input.peek(offset);
     while (isSpace$2(next)) next = input.peek(++offset);
     let name = "";
     for (;;) {
       if (!nameChar$1(next)) break
       name += String.fromCharCode(next);
       next = input.peek(++offset);
     }
     // Undefined to signal there's a <? or <!, null for just missing
     cachedInput$1 = input; cachedPos$1 = pos;
     return cachedName$1 = name ? name.toLowerCase() : next == question || next == bang ? undefined : null
   }

   const lessThan = 60, greaterThan = 62, slash$2 = 47, question = 63, bang = 33, dash$3 = 45;

   function ElementContext$1(name, parent) {
     this.name = name;
     this.parent = parent;
     this.hash = parent ? parent.hash : 0;
     for (let i = 0; i < name.length; i++) this.hash += (this.hash << 4) + name.charCodeAt(i) + (name.charCodeAt(i) << 8);
   }

   const startTagTerms = [StartTag$1, StartSelfClosingTag, StartScriptTag, StartStyleTag, StartTextareaTag];

   const elementContext$1 = new ContextTracker({
     start: null,
     shift(context, term, stack, input) {
       return startTagTerms.indexOf(term) > -1 ? new ElementContext$1(tagNameAfter$1(input, 1) || "", context) : context
     },
     reduce(context, term) {
       return term == Element$2 && context ? context.parent : context
     },
     reuse(context, node, stack, input) {
       let type = node.type.id;
       return type == StartTag$1 || type == OpenTag$1
         ? new ElementContext$1(tagNameAfter$1(input, 1) || "", context) : context
     },
     hash(context) { return context ? context.hash : 0 },
     strict: false
   });

   const tagStart = new ExternalTokenizer((input, stack) => {
     if (input.next != lessThan) {
       // End of file, close any open tags
       if (input.next < 0 && stack.context) input.acceptToken(missingCloseTag);
       return
     }
     input.advance();
     let close = input.next == slash$2;
     if (close) input.advance();
     let name = tagNameAfter$1(input, 0);
     if (name === undefined) return
     if (!name) return input.acceptToken(close ? IncompleteCloseTag : StartTag$1)

     let parent = stack.context ? stack.context.name : null;
     if (close) {
       if (name == parent) return input.acceptToken(StartCloseTag$1)
       if (parent && implicitlyClosed[parent]) return input.acceptToken(missingCloseTag, -2)
       if (stack.dialectEnabled(Dialect_noMatch)) return input.acceptToken(NoMatchStartCloseTag)
       for (let cx = stack.context; cx; cx = cx.parent) if (cx.name == name) return
       input.acceptToken(MismatchedStartCloseTag);
     } else {
       if (name == "script") return input.acceptToken(StartScriptTag)
       if (name == "style") return input.acceptToken(StartStyleTag)
       if (name == "textarea") return input.acceptToken(StartTextareaTag)
       if (selfClosers$1.hasOwnProperty(name)) return input.acceptToken(StartSelfClosingTag)
       if (parent && closeOnOpen[parent] && closeOnOpen[parent][name]) input.acceptToken(missingCloseTag, -1);
       else input.acceptToken(StartTag$1);
     }
   }, {contextual: true});

   const commentContent$2 = new ExternalTokenizer(input => {
     for (let dashes = 0, i = 0;; i++) {
       if (input.next < 0) {
         if (i) input.acceptToken(commentContent$1$1);
         break
       }
       if (input.next == dash$3) {
         dashes++;
       } else if (input.next == greaterThan && dashes >= 2) {
         if (i > 3) input.acceptToken(commentContent$1$1, -2);
         break
       } else {
         dashes = 0;
       }
       input.advance();
     }
   });

   function inForeignElement(context) {
     for (; context; context = context.parent)
       if (context.name == "svg" || context.name == "math") return true
     return false
   }

   const endTag = new ExternalTokenizer((input, stack) => {
     if (input.next == slash$2 && input.peek(1) == greaterThan) {
       let selfClosing = stack.dialectEnabled(Dialect_selfClosing) || inForeignElement(stack.context);
       input.acceptToken(selfClosing ? SelfClosingEndTag : EndTag, 2);
     } else if (input.next == greaterThan) {
       input.acceptToken(EndTag, 1);
     }
   });

   function contentTokenizer(tag, textToken, endToken) {
     let lastState = 2 + tag.length;
     return new ExternalTokenizer(input => {
       // state means:
       // - 0 nothing matched
       // - 1 '<' matched
       // - 2 '</' + possibly whitespace matched
       // - 3-(1+tag.length) part of the tag matched
       // - lastState whole tag + possibly whitespace matched
       for (let state = 0, matchedLen = 0, i = 0;; i++) {
         if (input.next < 0) {
           if (i) input.acceptToken(textToken);
           break
         }
         if (state == 0 && input.next == lessThan ||
             state == 1 && input.next == slash$2 ||
             state >= 2 && state < lastState && input.next == tag.charCodeAt(state - 2)) {
           state++;
           matchedLen++;
         } else if ((state == 2 || state == lastState) && isSpace$2(input.next)) {
           matchedLen++;
         } else if (state == lastState && input.next == greaterThan) {
           if (i > matchedLen)
             input.acceptToken(textToken, -matchedLen);
           else
             input.acceptToken(endToken, -(matchedLen - 2));
           break
         } else if ((input.next == 10 /* '\n' */ || input.next == 13 /* '\r' */) && i) {
           input.acceptToken(textToken, 1);
           break
         } else {
           state = matchedLen = 0;
         }
         input.advance();
       }
     })
   }

   const scriptTokens = contentTokenizer("script", scriptText, StartCloseScriptTag);

   const styleTokens = contentTokenizer("style", styleText, StartCloseStyleTag);

   const textareaTokens = contentTokenizer("textarea", textareaText, StartCloseTextareaTag);

   const htmlHighlighting = styleTags({
     "Text RawText": tags$1.content,
     "StartTag StartCloseTag SelfClosingEndTag EndTag": tags$1.angleBracket,
     TagName: tags$1.tagName,
     "MismatchedCloseTag/TagName": [tags$1.tagName,  tags$1.invalid],
     AttributeName: tags$1.attributeName,
     "AttributeValue UnquotedAttributeValue": tags$1.attributeValue,
     Is: tags$1.definitionOperator,
     "EntityReference CharacterReference": tags$1.character,
     Comment: tags$1.blockComment,
     ProcessingInst: tags$1.processingInstruction,
     DoctypeDecl: tags$1.documentMeta
   });

   // This file was generated by lezer-generator. You probably shouldn't edit it.
   const parser$f = LRParser.deserialize({
     version: 14,
     states: ",xOVO!rOOO!WQ#tO'#CqO!]Q#tO'#CzO!bQ#tO'#C}O!gQ#tO'#DQO!lQ#tO'#DSO!qOaO'#CpO!|ObO'#CpO#XOdO'#CpO$eO!rO'#CpOOO`'#Cp'#CpO$lO$fO'#DTO$tQ#tO'#DVO$yQ#tO'#DWOOO`'#Dk'#DkOOO`'#DY'#DYQVO!rOOO%OQ&rO,59]O%WQ&rO,59fO%`Q&rO,59iO%hQ&rO,59lO%sQ&rO,59nOOOa'#D^'#D^O%{OaO'#CxO&WOaO,59[OOOb'#D_'#D_O&`ObO'#C{O&kObO,59[OOOd'#D`'#D`O&sOdO'#DOO'OOdO,59[OOO`'#Da'#DaO'WO!rO,59[O'_Q#tO'#DROOO`,59[,59[OOOp'#Db'#DbO'dO$fO,59oOOO`,59o,59oO'lQ#|O,59qO'qQ#|O,59rOOO`-E7W-E7WO'vQ&rO'#CsOOQW'#DZ'#DZO(UQ&rO1G.wOOOa1G.w1G.wO(^Q&rO1G/QOOOb1G/Q1G/QO(fQ&rO1G/TOOOd1G/T1G/TO(nQ&rO1G/WOOO`1G/W1G/WOOO`1G/Y1G/YO(yQ&rO1G/YOOOa-E7[-E7[O)RQ#tO'#CyOOO`1G.v1G.vOOOb-E7]-E7]O)WQ#tO'#C|OOOd-E7^-E7^O)]Q#tO'#DPOOO`-E7_-E7_O)bQ#|O,59mOOOp-E7`-E7`OOO`1G/Z1G/ZOOO`1G/]1G/]OOO`1G/^1G/^O)gQ,UO,59_OOQW-E7X-E7XOOOa7+$c7+$cOOOb7+$l7+$lOOOd7+$o7+$oOOO`7+$r7+$rOOO`7+$t7+$tO)rQ#|O,59eO)wQ#|O,59hO)|Q#|O,59kOOO`1G/X1G/XO*RO7[O'#CvO*dOMhO'#CvOOQW1G.y1G.yOOO`1G/P1G/POOO`1G/S1G/SOOO`1G/V1G/VOOOO'#D['#D[O*uO7[O,59bOOQW,59b,59bOOOO'#D]'#D]O+WOMhO,59bOOOO-E7Y-E7YOOQW1G.|1G.|OOOO-E7Z-E7Z",
     stateData: "+s~O!^OS~OUSOVPOWQOXROYTO[]O][O^^O`^Oa^Ob^Oc^Ox^O{_O!dZO~OfaO~OfbO~OfcO~OfdO~OfeO~O!WfOPlP!ZlP~O!XiOQoP!ZoP~O!YlORrP!ZrP~OUSOVPOWQOXROYTOZqO[]O][O^^O`^Oa^Ob^Oc^Ox^O!dZO~O!ZrO~P#dO![sO!euO~OfvO~OfwO~OS|OhyO~OS!OOhyO~OS!QOhyO~OS!SOT!TOhyO~OS!TOhyO~O!WfOPlX!ZlX~OP!WO!Z!XO~O!XiOQoX!ZoX~OQ!ZO!Z!XO~O!YlORrX!ZrX~OR!]O!Z!XO~O!Z!XO~P#dOf!_O~O![sO!e!aO~OS!bO~OS!cO~Oi!dOSgXhgXTgX~OS!fOhyO~OS!gOhyO~OS!hOhyO~OS!iOT!jOhyO~OS!jOhyO~Of!kO~Of!lO~Of!mO~OS!nO~Ok!qO!`!oO!b!pO~OS!rO~OS!sO~OS!tO~Oa!uOb!uOc!uO!`!wO!a!uO~Oa!xOb!xOc!xO!b!wO!c!xO~Oa!uOb!uOc!uO!`!{O!a!uO~Oa!xOb!xOc!xO!b!{O!c!xO~OT~bac!dx{!d~",
     goto: "%p!`PPPPPPPPPPPPPPPPPPPP!a!gP!mPP!yP!|#P#S#Y#]#`#f#i#l#r#x!aP!a!aP$O$U$l$r$x%O%U%[%bPPPPPPPP%hX^OX`pXUOX`pezabcde{}!P!R!UR!q!dRhUR!XhXVOX`pRkVR!XkXWOX`pRnWR!XnXXOX`pQrXR!XpXYOX`pQ`ORx`Q{aQ}bQ!PcQ!RdQ!UeZ!e{}!P!R!UQ!v!oR!z!vQ!y!pR!|!yQgUR!VgQjVR!YjQmWR![mQpXR!^pQtZR!`tS_O`ToXp",
     nodeNames: "⚠ StartCloseTag StartCloseTag StartCloseTag EndTag SelfClosingEndTag StartTag StartTag StartTag StartTag StartTag StartCloseTag StartCloseTag StartCloseTag IncompleteCloseTag Document Text EntityReference CharacterReference InvalidEntity Element OpenTag TagName Attribute AttributeName Is AttributeValue UnquotedAttributeValue ScriptText CloseTag OpenTag StyleText CloseTag OpenTag TextareaText CloseTag OpenTag CloseTag SelfClosingTag Comment ProcessingInst MismatchedCloseTag CloseTag DoctypeDecl",
     maxTerm: 67,
     context: elementContext$1,
     nodeProps: [
       ["closedBy", -10,1,2,3,7,8,9,10,11,12,13,"EndTag",6,"EndTag SelfClosingEndTag",-4,21,30,33,36,"CloseTag"],
       ["openedBy", 4,"StartTag StartCloseTag",5,"StartTag",-4,29,32,35,37,"OpenTag"],
       ["group", -9,14,17,18,19,20,39,40,41,42,"Entity",16,"Entity TextContent",-3,28,31,34,"TextContent Entity"]
     ],
     propSources: [htmlHighlighting],
     skippedNodes: [0],
     repeatNodeCount: 9,
     tokenData: "#%g!aR!YOX$qXY,QYZ,QZ[$q[]&X]^,Q^p$qpq,Qqr-_rs4ysv-_vw5iwxJ^x}-_}!OKP!O!P-_!P!Q$q!Q![-_![!]!!O!]!^-_!^!_!&W!_!`#$o!`!a&X!a!c-_!c!}!!O!}#R-_#R#S!!O#S#T3V#T#o!!O#o#s-_#s$f$q$f%W-_%W%o!!O%o%p-_%p&a!!O&a&b-_&b1p!!O1p4U-_4U4d!!O4d4e-_4e$IS!!O$IS$I`-_$I`$Ib!!O$Ib$Kh-_$Kh%#t!!O%#t&/x-_&/x&Et!!O&Et&FV-_&FV;'S!!O;'S;:j!&Q;:j;=`4s<%l?&r-_?&r?Ah!!O?Ah?BY$q?BY?Mn!!O?MnO$q!Z$|c`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr$qrs&}sv$qvw+Pwx(tx!^$q!^!_*V!_!a&X!a#S$q#S#T&X#T;'S$q;'S;=`+z<%lO$q!R&bX`P!a`!cpOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&Xq'UV`P!cpOv&}wx'kx!^&}!^!_(V!_;'S&};'S;=`(n<%lO&}P'pT`POv'kw!^'k!_;'S'k;'S;=`(P<%lO'kP(SP;=`<%l'kp([S!cpOv(Vx;'S(V;'S;=`(h<%lO(Vp(kP;=`<%l(Vq(qP;=`<%l&}a({W`P!a`Or(trs'ksv(tw!^(t!^!_)e!_;'S(t;'S;=`*P<%lO(t`)jT!a`Or)esv)ew;'S)e;'S;=`)y<%lO)e`)|P;=`<%l)ea*SP;=`<%l(t!Q*^V!a`!cpOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!Q*vP;=`<%l*V!R*|P;=`<%l&XW+UYkWOX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+PW+wP;=`<%l+P!Z+}P;=`<%l$q!a,]``P!a`!cp!^^OX&XXY,QYZ,QZ]&X]^,Q^p&Xpq,Qqr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X!_-ljhS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx!P-_!P!Q$q!Q!^-_!^!_1n!_!a&X!a#S-_#S#T3V#T#s-_#s$f$q$f;'S-_;'S;=`4s<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q[/echSkWOX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!^!_0p!a#S/^#S#T0p#T#s/^#s$f+P$f;'S/^;'S;=`1h<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+PS0uXhSqr0psw0px!P0p!Q!_0p!a#s0p$f;'S0p;'S;=`1b<%l?Ah0p?BY?Mn0pS1eP;=`<%l0p[1kP;=`<%l/^!U1wbhS!a`!cpOq*Vqr1nrs(Vsv1nvw0pwx)ex!P1n!P!Q*V!Q!_1n!_!a*V!a#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!U3SP;=`<%l1n!V3bchS`P!a`!cpOq&Xqr3Vrs&}sv3Vvw0pwx(tx!P3V!P!Q&X!Q!^3V!^!_1n!_!a&X!a#s3V#s$f&X$f;'S3V;'S;=`4m<%l?Ah3V?Ah?BY&X?BY?Mn3V?MnO&X!V4pP;=`<%l3V!_4vP;=`<%l-_!Z5SV!`h`P!cpOv&}wx'kx!^&}!^!_(V!_;'S&};'S;=`(n<%lO&}!_5rjhSkWc!ROX7dXZ8qZ[7d[^8q^p7dqr:crs8qst@Ttw:cwx8qx!P:c!P!Q7d!Q!]:c!]!^/^!^!_=p!_!a8q!a#S:c#S#T=p#T#s:c#s$f7d$f;'S:c;'S;=`?}<%l?Ah:c?Ah?BY7d?BY?Mn:c?MnO7d!Z7ibkWOX7dXZ8qZ[7d[^8q^p7dqr7drs8qst+Ptw7dwx8qx!]7d!]!^9f!^!a8q!a#S7d#S#T8q#T;'S7d;'S;=`:]<%lO7d!R8tVOp8qqs8qt!]8q!]!^9Z!^;'S8q;'S;=`9`<%lO8q!R9`Oa!R!R9cP;=`<%l8q!Z9mYkWa!ROX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+P!Z:`P;=`<%l7d!_:jjhSkWOX7dXZ8qZ[7d[^8q^p7dqr:crs8qst/^tw:cwx8qx!P:c!P!Q7d!Q!]:c!]!^<[!^!_=p!_!a8q!a#S:c#S#T=p#T#s:c#s$f7d$f;'S:c;'S;=`?}<%l?Ah:c?Ah?BY7d?BY?Mn:c?MnO7d!_<echSkWa!ROX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!^!_0p!a#S/^#S#T0p#T#s/^#s$f+P$f;'S/^;'S;=`1h<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+P!V=udhSOp8qqr=prs8qst0ptw=pwx8qx!P=p!P!Q8q!Q!]=p!]!^?T!^!_=p!_!a8q!a#s=p#s$f8q$f;'S=p;'S;=`?w<%l?Ah=p?Ah?BY8q?BY?Mn=p?MnO8q!V?[XhSa!Rqr0psw0px!P0p!Q!_0p!a#s0p$f;'S0p;'S;=`1b<%l?Ah0p?BY?Mn0p!V?zP;=`<%l=p!_@QP;=`<%l:c!_@[ihSkWOXAyXZCTZ[Ay[^CT^pAyqrDrrsCTswDrwxCTx!PDr!P!QAy!Q!]Dr!]!^/^!^!_G|!_!aCT!a#SDr#S#TG|#T#sDr#s$fAy$f;'SDr;'S;=`JW<%l?AhDr?Ah?BYAy?BY?MnDr?MnOAy!ZBOakWOXAyXZCTZ[Ay[^CT^pAyqrAyrsCTswAywxCTx!]Ay!]!^Cu!^!aCT!a#SAy#S#TCT#T;'SAy;'S;=`Dl<%lOAy!RCWUOpCTq!]CT!]!^Cj!^;'SCT;'S;=`Co<%lOCT!RCoOb!R!RCrP;=`<%lCT!ZC|YkWb!ROX+PZ[+P^p+Pqr+Psw+Px!^+P!a#S+P#T;'S+P;'S;=`+t<%lO+P!ZDoP;=`<%lAy!_DyihSkWOXAyXZCTZ[Ay[^CT^pAyqrDrrsCTswDrwxCTx!PDr!P!QAy!Q!]Dr!]!^Fh!^!_G|!_!aCT!a#SDr#S#TG|#T#sDr#s$fAy$f;'SDr;'S;=`JW<%l?AhDr?Ah?BYAy?BY?MnDr?MnOAy!_FqchSkWb!ROX+PZ[+P^p+Pqr/^sw/^x!P/^!P!Q+P!Q!^/^!^!_0p!a#S/^#S#T0p#T#s/^#s$f+P$f;'S/^;'S;=`1h<%l?Ah/^?Ah?BY+P?BY?Mn/^?MnO+P!VHRchSOpCTqrG|rsCTswG|wxCTx!PG|!P!QCT!Q!]G|!]!^I^!^!_G|!_!aCT!a#sG|#s$fCT$f;'SG|;'S;=`JQ<%l?AhG|?Ah?BYCT?BY?MnG|?MnOCT!VIeXhSb!Rqr0psw0px!P0p!Q!_0p!a#s0p$f;'S0p;'S;=`1b<%l?Ah0p?BY?Mn0p!VJTP;=`<%lG|!_JZP;=`<%lDr!ZJgW!bx`P!a`Or(trs'ksv(tw!^(t!^!_)e!_;'S(t;'S;=`*P<%lO(t!aK^lhS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx}-_}!OMU!O!P-_!P!Q$q!Q!^-_!^!_1n!_!a&X!a#S-_#S#T3V#T#s-_#s$f$q$f;'S-_;'S;=`4s<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q!aMckhS`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx!P-_!P!Q$q!Q!^-_!^!_1n!_!`&X!`!a! W!a#S-_#S#T3V#T#s-_#s$f$q$f;'S-_;'S;=`4s<%l?Ah-_?Ah?BY$q?BY?Mn-_?MnO$q!T! cX`P!a`!cp!eQOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X!a!!_!ZhSfQ`PkW!a`!cpOX$qXZ&XZ[$q[^&X^p$qpq&Xqr-_rs&}sv-_vw/^wx(tx}-_}!O!!O!O!P!!O!P!Q$q!Q![!!O![!]!!O!]!^-_!^!_1n!_!a&X!a!c-_!c!}!!O!}#R-_#R#S!!O#S#T3V#T#o!!O#o#s-_#s$f$q$f$}-_$}%O!!O%O%W-_%W%o!!O%o%p-_%p&a!!O&a&b-_&b1p!!O1p4U!!O4U4d!!O4d4e-_4e$IS!!O$IS$I`-_$I`$Ib!!O$Ib$Je-_$Je$Jg!!O$Jg$Kh-_$Kh%#t!!O%#t&/x-_&/x&Et!!O&Et&FV-_&FV;'S!!O;'S;:j!&Q;:j;=`4s<%l?&r-_?&r?Ah!!O?Ah?BY$q?BY?Mn!!O?MnO$q!a!&TP;=`<%l!!O!V!&achS!a`!cpOq*Vqr!'lrs(Vsv1nvw0pwx)ex!P1n!P!Q*V!Q!_1n!_!a*V!a!b!Ey!b#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!'uhhS!a`!cpOq*Vqr1nrs(Vsv1nvw0pwx)ex}1n}!O!)a!O!P1n!P!Q*V!Q!_1n!_!a*V!a!f1n!f!g!,]!g#W1n#W#X!<y#X#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!)jdhS!a`!cpOq*Vqr1nrs(Vsv1nvw0pwx)ex}1n}!O!*x!O!P1n!P!Q*V!Q!_1n!_!a*V!a#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!+TbhS!a`!cp!dPOq*Vqr1nrs(Vsv1nvw0pwx)ex!P1n!P!Q*V!Q!_1n!_!a*V!a#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!,fdhS!a`!cpOq*Vqr1nrs(Vsv1nvw0pwx)ex!P1n!P!Q*V!Q!_1n!_!a*V!a!q1n!q!r!-t!r#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!-}dhS!a`!cpOq*Vqr1nrs(Vsv1nvw0pwx)ex!P1n!P!Q*V!Q!_1n!_!a*V!a!e1n!e!f!/]!f#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!/fdhS!a`!cpOq*Vqr1nrs(Vsv1nvw0pwx)ex!P1n!P!Q*V!Q!_1n!_!a*V!a!v1n!v!w!0t!w#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!0}dhS!a`!cpOq*Vqr1nrs(Vsv1nvw0pwx)ex!P1n!P!Q*V!Q!_1n!_!a*V!a!{1n!{!|!2]!|#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!2fdhS!a`!cpOq*Vqr1nrs(Vsv1nvw0pwx)ex!P1n!P!Q*V!Q!_1n!_!a*V!a!r1n!r!s!3t!s#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!3}dhS!a`!cpOq*Vqr1nrs(Vsv1nvw0pwx)ex!P1n!P!Q*V!Q!_1n!_!a*V!a!g1n!g!h!5]!h#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!5fchS!a`!cpOq!6qqr!5]rs!7hsv!5]vw!;`wx!9[x!P!5]!P!Q!6q!Q!_!5]!_!`!6q!`!a!:j!a#s!5]#s$f!6q$f;'S!5];'S;=`!<s<%l?Ah!5]?Ah?BY!6q?BY?Mn!5]?MnO!6q!R!6xY!a`!cpOr!6qrs!7hsv!6qvw!8Swx!9[x!`!6q!`!a!:j!a;'S!6q;'S;=`!;Y<%lO!6qq!7mV!cpOv!7hvx!8Sx!`!7h!`!a!8q!a;'S!7h;'S;=`!9U<%lO!7hP!8VTO!`!8S!`!a!8f!a;'S!8S;'S;=`!8k<%lO!8SP!8kO{PP!8nP;=`<%l!8Sq!8xS!cp{POv(Vx;'S(V;'S;=`(h<%lO(Vq!9XP;=`<%l!7ha!9aX!a`Or!9[rs!8Ssv!9[vw!8Sw!`!9[!`!a!9|!a;'S!9[;'S;=`!:d<%lO!9[a!:TT!a`{POr)esv)ew;'S)e;'S;=`)y<%lO)ea!:gP;=`<%l!9[!R!:sV!a`!cp{POr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!;]P;=`<%l!6qT!;ebhSOq!8Sqr!;`rs!8Ssw!;`wx!8Sx!P!;`!P!Q!8S!Q!_!;`!_!`!8S!`!a!8f!a#s!;`#s$f!8S$f;'S!;`;'S;=`!<m<%l?Ah!;`?Ah?BY!8S?BY?Mn!;`?MnO!8ST!<pP;=`<%l!;`!V!<vP;=`<%l!5]!V!=SdhS!a`!cpOq*Vqr1nrs(Vsv1nvw0pwx)ex!P1n!P!Q*V!Q!_1n!_!a*V!a#c1n#c#d!>b#d#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!>kdhS!a`!cpOq*Vqr1nrs(Vsv1nvw0pwx)ex!P1n!P!Q*V!Q!_1n!_!a*V!a#V1n#V#W!?y#W#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!@SdhS!a`!cpOq*Vqr1nrs(Vsv1nvw0pwx)ex!P1n!P!Q*V!Q!_1n!_!a*V!a#h1n#h#i!Ab#i#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!AkdhS!a`!cpOq*Vqr1nrs(Vsv1nvw0pwx)ex!P1n!P!Q*V!Q!_1n!_!a*V!a#m1n#m#n!By#n#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!CSdhS!a`!cpOq*Vqr1nrs(Vsv1nvw0pwx)ex!P1n!P!Q*V!Q!_1n!_!a*V!a#d1n#d#e!Db#e#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!DkdhS!a`!cpOq*Vqr1nrs(Vsv1nvw0pwx)ex!P1n!P!Q*V!Q!_1n!_!a*V!a#X1n#X#Y!5]#Y#s1n#s$f*V$f;'S1n;'S;=`3P<%l?Ah1n?Ah?BY*V?BY?Mn1n?MnO*V!V!FSchS!a`!cpOq!G_qr!Eyrs!HUsv!Eyvw!Ncwx!Jvx!P!Ey!P!Q!G_!Q!_!Ey!_!a!G_!a!b##T!b#s!Ey#s$f!G_$f;'S!Ey;'S;=`#$i<%l?Ah!Ey?Ah?BY!G_?BY?Mn!Ey?MnO!G_!R!GfY!a`!cpOr!G_rs!HUsv!G_vw!Hpwx!Jvx!a!G_!a!b!Lv!b;'S!G_;'S;=`!N]<%lO!G_q!HZV!cpOv!HUvx!Hpx!a!HU!a!b!Iq!b;'S!HU;'S;=`!Jp<%lO!HUP!HsTO!a!Hp!a!b!IS!b;'S!Hp;'S;=`!Ik<%lO!HpP!IVTO!`!Hp!`!a!If!a;'S!Hp;'S;=`!Ik<%lO!HpP!IkOxPP!InP;=`<%l!Hpq!IvV!cpOv!HUvx!Hpx!`!HU!`!a!J]!a;'S!HU;'S;=`!Jp<%lO!HUq!JdS!cpxPOv(Vx;'S(V;'S;=`(h<%lO(Vq!JsP;=`<%l!HUa!J{X!a`Or!Jvrs!Hpsv!Jvvw!Hpw!a!Jv!a!b!Kh!b;'S!Jv;'S;=`!Lp<%lO!Jva!KmX!a`Or!Jvrs!Hpsv!Jvvw!Hpw!`!Jv!`!a!LY!a;'S!Jv;'S;=`!Lp<%lO!Jva!LaT!a`xPOr)esv)ew;'S)e;'S;=`)y<%lO)ea!LsP;=`<%l!Jv!R!L}Y!a`!cpOr!G_rs!HUsv!G_vw!Hpwx!Jvx!`!G_!`!a!Mm!a;'S!G_;'S;=`!N]<%lO!G_!R!MvV!a`!cpxPOr*Vrs(Vsv*Vwx)ex;'S*V;'S;=`*s<%lO*V!R!N`P;=`<%l!G_T!NhbhSOq!Hpqr!Ncrs!Hpsw!Ncwx!Hpx!P!Nc!P!Q!Hp!Q!_!Nc!_!a!Hp!a!b# p!b#s!Nc#s$f!Hp$f;'S!Nc;'S;=`#!}<%l?Ah!Nc?Ah?BY!Hp?BY?Mn!Nc?MnO!HpT# ubhSOq!Hpqr!Ncrs!Hpsw!Ncwx!Hpx!P!Nc!P!Q!Hp!Q!_!Nc!_!`!Hp!`!a!If!a#s!Nc#s$f!Hp$f;'S!Nc;'S;=`#!}<%l?Ah!Nc?Ah?BY!Hp?BY?Mn!Nc?MnO!HpT##QP;=`<%l!Nc!V##^chS!a`!cpOq!G_qr!Eyrs!HUsv!Eyvw!Ncwx!Jvx!P!Ey!P!Q!G_!Q!_!Ey!_!`!G_!`!a!Mm!a#s!Ey#s$f!G_$f;'S!Ey;'S;=`#$i<%l?Ah!Ey?Ah?BY!G_?BY?Mn!Ey?MnO!G_!V#$lP;=`<%l!Ey!V#$zXiS`P!a`!cpOr&Xrs&}sv&Xwx(tx!^&X!^!_*V!_;'S&X;'S;=`*y<%lO&X",
     tokenizers: [scriptTokens, styleTokens, textareaTokens, endTag, tagStart, commentContent$2, 0, 1, 2, 3, 4, 5],
     topRules: {"Document":[0,15]},
     dialects: {noMatch: 0, selfClosing: 485},
     tokenPrec: 487
   });

   function getAttrs(openTag, input) {
     let attrs = Object.create(null);
     for (let att of openTag.getChildren(Attribute)) {
       let name = att.getChild(AttributeName), value = att.getChild(AttributeValue) || att.getChild(UnquotedAttributeValue);
       if (name) attrs[input.read(name.from, name.to)] =
         !value ? "" : value.type.id == AttributeValue ? input.read(value.from + 1, value.to - 1) : input.read(value.from, value.to);
     }
     return attrs
   }

   function findTagName(openTag, input) {
     let tagNameNode = openTag.getChild(TagName);
     return tagNameNode ? input.read(tagNameNode.from, tagNameNode.to) : " "
   }

   function maybeNest(node, input, tags) {
     let attrs;
     for (let tag of tags) {
       if (!tag.attrs || tag.attrs(attrs || (attrs = getAttrs(node.node.parent.firstChild, input))))
         return {parser: tag.parser}
     }
     return null
   }

   // tags?: {
   //   tag: string,
   //   attrs?: ({[attr: string]: string}) => boolean,
   //   parser: Parser
   // }[]
   // attributes?: {
   //   name: string,
   //   tagName?: string,
   //   parser: Parser
   // }[]
    
   function configureNesting(tags = [], attributes = []) {
     let script = [], style = [], textarea = [], other = [];
     for (let tag of tags) {
       let array = tag.tag == "script" ? script : tag.tag == "style" ? style : tag.tag == "textarea" ? textarea : other;
       array.push(tag);
     }
     let attrs = attributes.length ? Object.create(null) : null;
     for (let attr of attributes) (attrs[attr.name] || (attrs[attr.name] = [])).push(attr);

     return parseMixed((node, input) => {
       let id = node.type.id;
       if (id == ScriptText) return maybeNest(node, input, script)
       if (id == StyleText) return maybeNest(node, input, style)
       if (id == TextareaText) return maybeNest(node, input, textarea)

       if (id == Element$2 && other.length) {
         let n = node.node, open = n.firstChild, tagName = open && findTagName(open, input), attrs;
         if (tagName) for (let tag of other) {
           if (tag.tag == tagName && (!tag.attrs || tag.attrs(attrs || (attrs = getAttrs(n, input))))) {
             let close = n.lastChild;
             return {parser: tag.parser, overlay: [{from: open.to, to: close.type.id == CloseTag ? close.from : n.to}]}
           }
         }
       }

       if (attrs && id == Attribute) {
         let n = node.node, nameNode;
         if (nameNode = n.firstChild) {
           let matches = attrs[input.read(nameNode.from, nameNode.to)];
           if (matches) for (let attr of matches) {
             if (attr.tagName && attr.tagName != findTagName(n.parent, input)) continue
             let value = n.lastChild;
             if (value.type.id == AttributeValue) {
               let from = value.from + 1;
               let last = value.lastChild, to = value.to - (last && last.isError ? 0 : 1);
               if (to > from) return {parser: attr.parser, overlay: [{from, to}]}
             } else if (value.type.id == UnquotedAttributeValue) {
               return {parser: attr.parser, overlay: [{from: value.from, to: value.to}]}
             }
           }
         }
       }
       return null
     })
   }

   // This file was generated by lezer-generator. You probably shouldn't edit it.
   const descendantOp$2 = 95,
     Unit$2 = 1,
     callee$1 = 96,
     identifier$5 = 97,
     VariableName$1 = 2;

   /* Hand-written tokenizers for CSS tokens that can't be
      expressed by Lezer's built-in tokenizer. */

   const space$6 = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8193, 8194, 8195, 8196, 8197,
                  8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288];
   const colon$1 = 58, parenL$1 = 40, underscore$1 = 95, bracketL$1 = 91, dash$2 = 45, period$1 = 46,
         hash$2 = 35, percent$1 = 37;

   function isAlpha$3(ch) { return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122 || ch >= 161 }

   function isDigit$3(ch) { return ch >= 48 && ch <= 57 }

   const identifiers$a = new ExternalTokenizer((input, stack) => {
     for (let inside = false, dashes = 0, i = 0;; i++) {
       let {next} = input;
       if (isAlpha$3(next) || next == dash$2 || next == underscore$1 || (inside && isDigit$3(next))) {
         if (!inside && (next != dash$2 || i > 0)) inside = true;
         if (dashes === i && next == dash$2) dashes++;
         input.advance();
       } else {
         if (inside)
           input.acceptToken(next == parenL$1 ? callee$1 : dashes == 2 && stack.canShift(VariableName$1) ? VariableName$1 : identifier$5);
         break
       }
     }
   });

   const descendant$2 = new ExternalTokenizer(input => {
     if (space$6.includes(input.peek(-1))) {
       let {next} = input;
       if (isAlpha$3(next) || next == underscore$1 || next == hash$2 || next == period$1 ||
           next == bracketL$1 || next == colon$1 || next == dash$2)
         input.acceptToken(descendantOp$2);
     }
   });

   const unitToken$2 = new ExternalTokenizer(input => {
     if (!space$6.includes(input.peek(-1))) {
       let {next} = input;
       if (next == percent$1) { input.advance(); input.acceptToken(Unit$2); }
       if (isAlpha$3(next)) {
         do { input.advance(); } while (isAlpha$3(input.next))
         input.acceptToken(Unit$2);
       }
     }
   });

   const cssHighlighting$1 = styleTags({
     "AtKeyword import charset namespace keyframes media supports": tags$1.definitionKeyword,
     "from to selector": tags$1.keyword,
     NamespaceName: tags$1.namespace,
     KeyframeName: tags$1.labelName,
     KeyframeRangeName: tags$1.operatorKeyword,
     TagName: tags$1.tagName,
     ClassName: tags$1.className,
     PseudoClassName: tags$1.constant(tags$1.className),
     IdName: tags$1.labelName,
     "FeatureName PropertyName": tags$1.propertyName,
     AttributeName: tags$1.attributeName,
     NumberLiteral: tags$1.number,
     KeywordQuery: tags$1.keyword,
     UnaryQueryOp: tags$1.operatorKeyword,
     "CallTag ValueName": tags$1.atom,
     VariableName: tags$1.variableName,
     Callee: tags$1.operatorKeyword,
     Unit: tags$1.unit,
     "UniversalSelector NestingSelector": tags$1.definitionOperator,
     MatchOp: tags$1.compareOperator,
     "ChildOp SiblingOp, LogicOp": tags$1.logicOperator,
     BinOp: tags$1.arithmeticOperator,
     Important: tags$1.modifier,
     Comment: tags$1.blockComment,
     ColorLiteral: tags$1.color,
     "ParenthesizedContent StringLiteral": tags$1.string,
     ":": tags$1.punctuation,
     "PseudoOp #": tags$1.derefOperator,
     "; ,": tags$1.separator,
     "( )": tags$1.paren,
     "[ ]": tags$1.squareBracket,
     "{ }": tags$1.brace
   });

   // This file was generated by lezer-generator. You probably shouldn't edit it.
   const spec_callee$1 = {__proto__:null,lang:32, "nth-child":32, "nth-last-child":32, "nth-of-type":32, "nth-last-of-type":32, dir:32, "host-context":32, url:60, "url-prefix":60, domain:60, regexp:60, selector:134};
   const spec_AtKeyword$2 = {__proto__:null,"@import":114, "@media":138, "@charset":142, "@namespace":146, "@keyframes":152, "@supports":164};
   const spec_identifier$7 = {__proto__:null,not:128, only:128};
   const parser$e = LRParser.deserialize({
     version: 14,
     states: "8`QYQ[OOO#_Q[OOOOQP'#Cd'#CdOOQP'#Cc'#CcO#fQ[O'#CfO$YQXO'#CaO$aQ[O'#ChO$lQ[O'#DPO$qQ[O'#DTOOQP'#Ee'#EeO$vQdO'#DeO%bQ[O'#DrO$vQdO'#DtO%sQ[O'#DvO&OQ[O'#DyO&WQ[O'#EPO&fQ[O'#EROOQS'#Ed'#EdOOQS'#ET'#ETQYQ[OOO&mQXO'#CdO'bQWO'#DaO'gQWO'#EkO'rQ[O'#EkQOQWOOOOQP'#Cg'#CgOOQP,59Q,59QO#fQ[O,59QO'|Q[O'#EWO(hQWO,58{O(pQ[O,59SO$lQ[O,59kO$qQ[O,59oO'|Q[O,59sO'|Q[O,59uO'|Q[O,59vO({Q[O'#D`OOQS,58{,58{OOQP'#Ck'#CkOOQO'#C}'#C}OOQP,59S,59SO)SQWO,59SO)XQWO,59SOOQP'#DR'#DROOQP,59k,59kOOQO'#DV'#DVO)^Q`O,59oOOQS'#Cp'#CpO$vQdO'#CqO)fQvO'#CsO*sQtO,5:POOQO'#Cx'#CxO)XQWO'#CwO+XQWO'#CyOOQS'#Eh'#EhOOQO'#Dh'#DhO+^Q[O'#DoO+lQWO'#ElO&WQ[O'#DmO+zQWO'#DpOOQO'#Em'#EmO(kQWO,5:^O,PQpO,5:`OOQS'#Dx'#DxO,XQWO,5:bO,^Q[O,5:bOOQO'#D{'#D{O,fQWO,5:eO,kQWO,5:kO,sQWO,5:mOOQS-E8R-E8RO$vQdO,59{O,{Q[O'#EYO-YQWO,5;VO-YQWO,5;VOOQP1G.l1G.lO.PQXO,5:rOOQO-E8U-E8UOOQS1G.g1G.gOOQP1G.n1G.nO)SQWO1G.nO)XQWO1G.nOOQP1G/V1G/VO.^Q`O1G/ZO.wQXO1G/_O/_QXO1G/aO/uQXO1G/bO0]QWO,59zO0bQ[O'#DOO0iQdO'#CoOOQP1G/Z1G/ZO$vQdO1G/ZO0pQpO,59]OOQS,59_,59_O$vQdO,59aO0xQWO1G/kOOQS,59c,59cO0}Q!bO,59eO1VQWO'#DhO1bQWO,5:TO1gQWO,5:ZO&WQ[O,5:VO&WQ[O'#EZO1oQWO,5;WO1zQWO,5:XO'|Q[O,5:[OOQS1G/x1G/xOOQS1G/z1G/zOOQS1G/|1G/|O2]QWO1G/|O2bQdO'#D|OOQS1G0P1G0POOQS1G0V1G0VOOQS1G0X1G0XO2mQtO1G/gOOQO,5:t,5:tO3TQ[O,5:tOOQO-E8W-E8WO3bQWO1G0qOOQP7+$Y7+$YOOQP7+$u7+$uO$vQdO7+$uOOQS1G/f1G/fO3mQXO'#EjO3tQWO,59jO3yQtO'#EUO4nQdO'#EgO4xQWO,59ZO4}QpO7+$uOOQS1G.w1G.wOOQS1G.{1G.{OOQS7+%V7+%VO5VQWO1G/PO$vQdO1G/oOOQO1G/u1G/uOOQO1G/q1G/qO5[QWO,5:uOOQO-E8X-E8XO5jQXO1G/vOOQS7+%h7+%hO5qQYO'#CsOOQO'#EO'#EOO5|Q`O'#D}OOQO'#D}'#D}O6XQWO'#E[O6aQdO,5:hOOQS,5:h,5:hO6lQtO'#EXO$vQdO'#EXO7jQdO7+%ROOQO7+%R7+%ROOQO1G0`1G0`O7}QpO<<HaO8VQWO,5;UOOQP1G/U1G/UOOQS-E8S-E8SO$vQdO'#EVO8_QWO,5;ROOQT1G.u1G.uOOQP<<Ha<<HaOOQS7+$k7+$kO8gQdO7+%ZOOQO7+%b7+%bOOQO,5:i,5:iO2eQdO'#E]O6XQWO,5:vOOQS,5:v,5:vOOQS-E8Y-E8YOOQS1G0S1G0SO8nQtO,5:sOOQS-E8V-E8VOOQO<<Hm<<HmOOQPAN={AN={O9lQdO,5:qOOQO-E8T-E8TOOQO<<Hu<<HuOOQO,5:w,5:wOOQO-E8Z-E8ZOOQS1G0b1G0b",
     stateData: ":O~O#VOSROS~OUXOXXO]UO^UOtVOxWO!Y`O!ZYO!gZO!i[O!k]O!n^O!t_O#TQO#YSO~OQeOUXOXXO]UO^UOtVOxWO!Y`O!ZYO!gZO!i[O!k]O!n^O!t_O#TdO#YSO~O#Q#_P~P!ZO#TiO~O]nO^nOplOtoOxpO|qO!PsO#RrO#YkO~O!RtO~P#kO`zO#SwO#TvO~O#T{O~O#T}O~OQ!WOb!QOf!WOh!WOn!VO#S!TO#T!PO#]!RO~Ob!YO!b![O!e!]O#T!XO!R#`P~Oh!bOn!VO#T!aO~Oh!dO#T!dO~Ob!YO!b![O!e!]O#T!XO~O!W#`P~P%bO]WX]!UX^WXpWXtWXxWX|WX!PWX!RWX#RWX#YWX~O]!iO~O!W!jO#Q#_X!Q#_X~O#Q#_X!Q#_X~P!ZOUXOXXO]UO^UOtVOxWO#TQO#YSO~OplO!RtO~O`!sO#SwO#TvO~O!Q#_P~P!ZOb!zO~Ob!{O~Ov!|Oz!}O~OP#PObgXjgX!WgX!bgX!egX#TgXagXQgXfgXhgXngXpgX!VgX#QgX#SgX#]gXvgX!QgX~Ob!YOj#QO!b![O!e!]O#T!XO!W#`P~Ob#TO~Ob!YO!b![O!e!]O#T#UO~Op#YO!`#XO!R#`X!W#`X~Ob#]O~Oj#QO!W#_O~O!W#`O~Oh#aOn!VO~O!R#bO~O!RtO!`#XO~O!RtO!W#eO~O!W!|X#Q!|X!Q!|X~P!ZO!W!jO#Q#_a!Q#_a~O]nO^nOtoOxpO|qO!PsO#RrO#YkO~Op!za!R!zaa!za~P-eOv#lOz#mO~O]nO^nOtoOxpO#YkO~Op{i|{i!P{i!R{i#R{ia{i~P.fOp}i|}i!P}i!R}i#R}ia}i~P.fOp!Oi|!Oi!P!Oi!R!Oi#R!Oia!Oi~P.fO!Q#nO~Oa#^P~P'|Oa#ZP~P$vOa#uOj#QO~O!W#wO~Oh#xOo#xO~O]!^Xa![X!`![X~O]#yO~Oa#zO!`#XO~Op#YO!R#`a!W#`a~O!`#XOp!aa!R!aa!W!aaa!aa~O!W$PO~O!Q$WO#T$RO#]$QO~Oj#QOp$YO!V$[O!W!Ti#Q!Ti!Q!Ti~P$vO!W!|a#Q!|a!Q!|a~P!ZO!W!jO#Q#_i!Q#_i~Oa#^X~P#kOa$`O~Oj#QOQ!xXa!xXb!xXf!xXh!xXn!xXp!xX#S!xX#T!xX#]!xX~Op$bOa#ZX~P$vOa$dO~Oj#QOv$eO~Oa$fO~O!`#XOp!}a!R!}a!W!}a~Oa$hO~P-eOP#POpgX!RgX~O#]$QOp!qX!R!qX~Op$jO!RtO~O!Q$nO#T$RO#]$QO~Oj#QOQ!{Xb!{Xf!{Xh!{Xn!{Xp!{X!V!{X!W!{X#Q!{X#S!{X#T!{X#]!{X!Q!{X~Op$YO!V$qO!W!Tq#Q!Tq!Q!Tq~P$vOj#QOv$rO~OplOa#^a~Op$bOa#Za~Oa$uO~P$vOj#QOQ!{ab!{af!{ah!{an!{ap!{a!V!{a!W!{a#Q!{a#S!{a#T!{a#]!{a!Q!{a~Oa!yap!ya~P$vO#VoR#]j!Pj~",
     goto: ",z#bPPPPP#cP#l#{P#l$[#lPP$bPPP$h$q$qP%TP$qP$q%o&RPPP&k&q#lP&wP#lP&}P#lP#l#lPPP'T'j'wPP#cPP(O(O(Y(OP(OP(O(OP#cP#cP#cP(]#cP(`(c(f(m#cP#cP(r)R)a)g)q)w*R*X*_PPPPPP*e*nP+Z+^P,S,V,],f_aOPcgt!j#hkXOPcglqrst!j!z#]#hkROPcglqrst!j!z#]#hQjSR!mkQxUR!qnQ!qzQ#S!UR#k!sq!WY[!Q!i!{!}#Q#f#m#r#y$Y$Z$b$g$sp!WY[!Q!i!{!}#Q#f#m#r#y$Y$Z$b$g$sU$T#b$V$jR$i$Sq!UY[!Q!i!{!}#Q#f#m#r#y$Y$Z$b$g$sp!WY[!Q!i!{!}#Q#f#m#r#y$Y$Z$b$g$sQ!b]R#a!cQyUR!rnQ!qyR#k!rQ|VR!toQ!OWR!upQuTQ!pmQ#^!_Q#d!fQ#e!gQ$l$UR$x$kSfPtQ!lgQ#g!jR$]#hZePgt!j#ha!^Z_`!S!Y![#X#YR#V!YR!c]R!e^R#c!eS$U#b$VR$v$jV$S#b$V$jQcOSgPtU!hcg#hR#h!jQ#r!{U$a#r$g$sQ$g#yR$s$bQ$c#rR$t$cQmTS!om$_R$_#oQ$Z#fR$p$ZQ!kfS#i!k#jR#j!lQ#Z!ZR#}#ZQ$V#bR$m$VQ$k$UR$w$k_bOPcgt!j#h^TOPcgt!j#hQ!nlQ!vqQ!wrQ!xsQ#o!zR$O#]R#s!{Q!SYQ!`[Q#O!QQ#f!i[#q!{#r#y$b$g$sQ#t!}Q#v#QS$X#f$ZQ$^#mR$o$YR#p!zQhPR!ytQ!_ZQ!g`R#R!SU!ZZ`!SQ!f_Q#W!YQ#[![Q#{#XR#|#Y",
     nodeNames: "⚠ Unit VariableName Comment StyleSheet RuleSet UniversalSelector TagSelector TagName NestingSelector ClassSelector ClassName PseudoClassSelector : :: PseudoClassName PseudoClassName ) ( ArgList ValueName ParenthesizedValue ColorLiteral NumberLiteral StringLiteral BinaryExpression BinOp CallExpression Callee CallLiteral CallTag ParenthesizedContent , PseudoClassName ArgList IdSelector # IdName ] AttributeSelector [ AttributeName MatchOp ChildSelector ChildOp DescendantSelector SiblingSelector SiblingOp } { Block Declaration PropertyName Important ; ImportStatement AtKeyword import KeywordQuery FeatureQuery FeatureName BinaryQuery LogicOp UnaryQuery UnaryQueryOp ParenthesizedQuery SelectorQuery selector MediaStatement media CharsetStatement charset NamespaceStatement namespace NamespaceName KeyframesStatement keyframes KeyframeName KeyframeList KeyframeSelector KeyframeRangeName SupportsStatement supports AtRule Styles",
     maxTerm: 109,
     nodeProps: [
       ["openedBy", 17,"(",48,"{"],
       ["closedBy", 18,")",49,"}"]
     ],
     propSources: [cssHighlighting$1],
     skippedNodes: [0,3],
     repeatNodeCount: 9,
     tokenData: "Lq~R!^OX$}X^%u^p$}pq%uqr)Xrs.Rst/utu6duv$}vw7^wx7oxy9^yz9oz{9t{|:_|}?Q}!O?c!O!P@Q!P!Q@i!Q![Cu![!]Dp!]!^El!^!_$}!_!`E}!`!aF`!a!b$}!b!cG[!c!}$}!}#OHt#O#P$}#P#QIV#Q#R6d#R#T$}#T#UIh#U#c$}#c#dJy#d#o$}#o#pK`#p#q6d#q#rKq#r#sLS#s#y$}#y#z%u#z$f$}$f$g%u$g#BY$}#BY#BZ%u#BZ$IS$}$IS$I_%u$I_$I|$}$I|$JO%u$JO$JT$}$JT$JU%u$JU$KV$}$KV$KW%u$KW&FU$}&FU&FV%u&FV;'S$};'S;=`Lk<%lO$}W%QSOy%^z;'S%^;'S;=`%o<%lO%^W%cSoWOy%^z;'S%^;'S;=`%o<%lO%^W%rP;=`<%l%^~%zh#V~OX%^X^'f^p%^pq'fqy%^z#y%^#y#z'f#z$f%^$f$g'f$g#BY%^#BY#BZ'f#BZ$IS%^$IS$I_'f$I_$I|%^$I|$JO'f$JO$JT%^$JT$JU'f$JU$KV%^$KV$KW'f$KW&FU%^&FU&FV'f&FV;'S%^;'S;=`%o<%lO%^~'mh#V~oWOX%^X^'f^p%^pq'fqy%^z#y%^#y#z'f#z$f%^$f$g'f$g#BY%^#BY#BZ'f#BZ$IS%^$IS$I_'f$I_$I|%^$I|$JO'f$JO$JT%^$JT$JU'f$JU$KV%^$KV$KW'f$KW&FU%^&FU&FV'f&FV;'S%^;'S;=`%o<%lO%^^)[UOy%^z#]%^#]#^)n#^;'S%^;'S;=`%o<%lO%^^)sUoWOy%^z#a%^#a#b*V#b;'S%^;'S;=`%o<%lO%^^*[UoWOy%^z#d%^#d#e*n#e;'S%^;'S;=`%o<%lO%^^*sUoWOy%^z#c%^#c#d+V#d;'S%^;'S;=`%o<%lO%^^+[UoWOy%^z#f%^#f#g+n#g;'S%^;'S;=`%o<%lO%^^+sUoWOy%^z#h%^#h#i,V#i;'S%^;'S;=`%o<%lO%^^,[UoWOy%^z#T%^#T#U,n#U;'S%^;'S;=`%o<%lO%^^,sUoWOy%^z#b%^#b#c-V#c;'S%^;'S;=`%o<%lO%^^-[UoWOy%^z#h%^#h#i-n#i;'S%^;'S;=`%o<%lO%^^-uS!VUoWOy%^z;'S%^;'S;=`%o<%lO%^~.UWOY.RZr.Rrs.ns#O.R#O#P.s#P;'S.R;'S;=`/o<%lO.R~.sOh~~.vRO;'S.R;'S;=`/P;=`O.R~/SXOY.RZr.Rrs.ns#O.R#O#P.s#P;'S.R;'S;=`/o;=`<%l.R<%lO.R~/rP;=`<%l.R_/zYtPOy%^z!Q%^!Q![0j![!c%^!c!i0j!i#T%^#T#Z0j#Z;'S%^;'S;=`%o<%lO%^^0oYoWOy%^z!Q%^!Q![1_![!c%^!c!i1_!i#T%^#T#Z1_#Z;'S%^;'S;=`%o<%lO%^^1dYoWOy%^z!Q%^!Q![2S![!c%^!c!i2S!i#T%^#T#Z2S#Z;'S%^;'S;=`%o<%lO%^^2ZYfUoWOy%^z!Q%^!Q![2y![!c%^!c!i2y!i#T%^#T#Z2y#Z;'S%^;'S;=`%o<%lO%^^3QYfUoWOy%^z!Q%^!Q![3p![!c%^!c!i3p!i#T%^#T#Z3p#Z;'S%^;'S;=`%o<%lO%^^3uYoWOy%^z!Q%^!Q![4e![!c%^!c!i4e!i#T%^#T#Z4e#Z;'S%^;'S;=`%o<%lO%^^4lYfUoWOy%^z!Q%^!Q![5[![!c%^!c!i5[!i#T%^#T#Z5[#Z;'S%^;'S;=`%o<%lO%^^5aYoWOy%^z!Q%^!Q![6P![!c%^!c!i6P!i#T%^#T#Z6P#Z;'S%^;'S;=`%o<%lO%^^6WSfUoWOy%^z;'S%^;'S;=`%o<%lO%^Y6gUOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^Y7QSzQoWOy%^z;'S%^;'S;=`%o<%lO%^X7cSXPOy%^z;'S%^;'S;=`%o<%lO%^~7rWOY7oZw7owx.nx#O7o#O#P8[#P;'S7o;'S;=`9W<%lO7o~8_RO;'S7o;'S;=`8h;=`O7o~8kXOY7oZw7owx.nx#O7o#O#P8[#P;'S7o;'S;=`9W;=`<%l7o<%lO7o~9ZP;=`<%l7o_9cSbVOy%^z;'S%^;'S;=`%o<%lO%^~9tOa~_9{UUPjSOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^_:fWjS!PPOy%^z!O%^!O!P;O!P!Q%^!Q![>T![;'S%^;'S;=`%o<%lO%^^;TUoWOy%^z!Q%^!Q![;g![;'S%^;'S;=`%o<%lO%^^;nYoW#]UOy%^z!Q%^!Q![;g![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^^<cYoWOy%^z{%^{|=R|}%^}!O=R!O!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^^=WUoWOy%^z!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^^=qUoW#]UOy%^z!Q%^!Q![=j![;'S%^;'S;=`%o<%lO%^^>[[oW#]UOy%^z!O%^!O!P;g!P!Q%^!Q![>T![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^_?VSpVOy%^z;'S%^;'S;=`%o<%lO%^^?hWjSOy%^z!O%^!O!P;O!P!Q%^!Q![>T![;'S%^;'S;=`%o<%lO%^_@VU#YPOy%^z!Q%^!Q![;g![;'S%^;'S;=`%o<%lO%^~@nTjSOy%^z{@}{;'S%^;'S;=`%o<%lO%^~ASUoWOy@}yzAfz{Bm{;'S@};'S;=`Co<%lO@}~AiTOzAfz{Ax{;'SAf;'S;=`Bg<%lOAf~A{VOzAfz{Ax{!PAf!P!QBb!Q;'SAf;'S;=`Bg<%lOAf~BgOR~~BjP;=`<%lAf~BrWoWOy@}yzAfz{Bm{!P@}!P!QC[!Q;'S@};'S;=`Co<%lO@}~CcSoWR~Oy%^z;'S%^;'S;=`%o<%lO%^~CrP;=`<%l@}^Cz[#]UOy%^z!O%^!O!P;g!P!Q%^!Q![>T![!g%^!g!h<^!h#X%^#X#Y<^#Y;'S%^;'S;=`%o<%lO%^XDuU]POy%^z![%^![!]EX!];'S%^;'S;=`%o<%lO%^XE`S^PoWOy%^z;'S%^;'S;=`%o<%lO%^_EqS!WVOy%^z;'S%^;'S;=`%o<%lO%^YFSSzQOy%^z;'S%^;'S;=`%o<%lO%^XFeU|POy%^z!`%^!`!aFw!a;'S%^;'S;=`%o<%lO%^XGOS|PoWOy%^z;'S%^;'S;=`%o<%lO%^XG_WOy%^z!c%^!c!}Gw!}#T%^#T#oGw#o;'S%^;'S;=`%o<%lO%^XHO[!YPoWOy%^z}%^}!OGw!O!Q%^!Q![Gw![!c%^!c!}Gw!}#T%^#T#oGw#o;'S%^;'S;=`%o<%lO%^XHySxPOy%^z;'S%^;'S;=`%o<%lO%^^I[SvUOy%^z;'S%^;'S;=`%o<%lO%^XIkUOy%^z#b%^#b#cI}#c;'S%^;'S;=`%o<%lO%^XJSUoWOy%^z#W%^#W#XJf#X;'S%^;'S;=`%o<%lO%^XJmS!`PoWOy%^z;'S%^;'S;=`%o<%lO%^XJ|UOy%^z#f%^#f#gJf#g;'S%^;'S;=`%o<%lO%^ZKeS!RROy%^z;'S%^;'S;=`%o<%lO%^_KvS!QVOy%^z;'S%^;'S;=`%o<%lO%^ZLXU!PPOy%^z!_%^!_!`6y!`;'S%^;'S;=`%o<%lO%^WLnP;=`<%l$}",
     tokenizers: [descendant$2, unitToken$2, identifiers$a, 0, 1, 2, 3],
     topRules: {"StyleSheet":[0,4],"Styles":[1,84]},
     specialized: [{term: 96, get: value => spec_callee$1[value] || -1},{term: 56, get: value => spec_AtKeyword$2[value] || -1},{term: 97, get: value => spec_identifier$7[value] || -1}],
     tokenPrec: 1142
   });

   let _properties = null;
   function properties$2() {
       if (!_properties && typeof document == "object" && document.body) {
           let { style } = document.body, names = [], seen = new Set;
           for (let prop in style)
               if (prop != "cssText" && prop != "cssFloat") {
                   if (typeof style[prop] == "string") {
                       if (/[A-Z]/.test(prop))
                           prop = prop.replace(/[A-Z]/g, ch => "-" + ch.toLowerCase());
                       if (!seen.has(prop)) {
                           names.push(prop);
                           seen.add(prop);
                       }
                   }
               }
           _properties = names.sort().map(name => ({ type: "property", label: name }));
       }
       return _properties || [];
   }
   const pseudoClasses = /*@__PURE__*/[
       "active", "after", "any-link", "autofill", "backdrop", "before",
       "checked", "cue", "default", "defined", "disabled", "empty",
       "enabled", "file-selector-button", "first", "first-child",
       "first-letter", "first-line", "first-of-type", "focus",
       "focus-visible", "focus-within", "fullscreen", "has", "host",
       "host-context", "hover", "in-range", "indeterminate", "invalid",
       "is", "lang", "last-child", "last-of-type", "left", "link", "marker",
       "modal", "not", "nth-child", "nth-last-child", "nth-last-of-type",
       "nth-of-type", "only-child", "only-of-type", "optional", "out-of-range",
       "part", "placeholder", "placeholder-shown", "read-only", "read-write",
       "required", "right", "root", "scope", "selection", "slotted", "target",
       "target-text", "valid", "visited", "where"
   ].map(name => ({ type: "class", label: name }));
   const values = /*@__PURE__*/[
       "above", "absolute", "activeborder", "additive", "activecaption", "after-white-space",
       "ahead", "alias", "all", "all-scroll", "alphabetic", "alternate", "always",
       "antialiased", "appworkspace", "asterisks", "attr", "auto", "auto-flow", "avoid", "avoid-column",
       "avoid-page", "avoid-region", "axis-pan", "background", "backwards", "baseline", "below",
       "bidi-override", "blink", "block", "block-axis", "bold", "bolder", "border", "border-box",
       "both", "bottom", "break", "break-all", "break-word", "bullets", "button", "button-bevel",
       "buttonface", "buttonhighlight", "buttonshadow", "buttontext", "calc", "capitalize",
       "caps-lock-indicator", "caption", "captiontext", "caret", "cell", "center", "checkbox", "circle",
       "cjk-decimal", "clear", "clip", "close-quote", "col-resize", "collapse", "color", "color-burn",
       "color-dodge", "column", "column-reverse", "compact", "condensed", "contain", "content",
       "contents", "content-box", "context-menu", "continuous", "copy", "counter", "counters", "cover",
       "crop", "cross", "crosshair", "currentcolor", "cursive", "cyclic", "darken", "dashed", "decimal",
       "decimal-leading-zero", "default", "default-button", "dense", "destination-atop", "destination-in",
       "destination-out", "destination-over", "difference", "disc", "discard", "disclosure-closed",
       "disclosure-open", "document", "dot-dash", "dot-dot-dash", "dotted", "double", "down", "e-resize",
       "ease", "ease-in", "ease-in-out", "ease-out", "element", "ellipse", "ellipsis", "embed", "end",
       "ethiopic-abegede-gez", "ethiopic-halehame-aa-er", "ethiopic-halehame-gez", "ew-resize", "exclusion",
       "expanded", "extends", "extra-condensed", "extra-expanded", "fantasy", "fast", "fill", "fill-box",
       "fixed", "flat", "flex", "flex-end", "flex-start", "footnotes", "forwards", "from",
       "geometricPrecision", "graytext", "grid", "groove", "hand", "hard-light", "help", "hidden", "hide",
       "higher", "highlight", "highlighttext", "horizontal", "hsl", "hsla", "hue", "icon", "ignore",
       "inactiveborder", "inactivecaption", "inactivecaptiontext", "infinite", "infobackground", "infotext",
       "inherit", "initial", "inline", "inline-axis", "inline-block", "inline-flex", "inline-grid",
       "inline-table", "inset", "inside", "intrinsic", "invert", "italic", "justify", "keep-all",
       "landscape", "large", "larger", "left", "level", "lighter", "lighten", "line-through", "linear",
       "linear-gradient", "lines", "list-item", "listbox", "listitem", "local", "logical", "loud", "lower",
       "lower-hexadecimal", "lower-latin", "lower-norwegian", "lowercase", "ltr", "luminosity", "manipulation",
       "match", "matrix", "matrix3d", "medium", "menu", "menutext", "message-box", "middle", "min-intrinsic",
       "mix", "monospace", "move", "multiple", "multiple_mask_images", "multiply", "n-resize", "narrower",
       "ne-resize", "nesw-resize", "no-close-quote", "no-drop", "no-open-quote", "no-repeat", "none",
       "normal", "not-allowed", "nowrap", "ns-resize", "numbers", "numeric", "nw-resize", "nwse-resize",
       "oblique", "opacity", "open-quote", "optimizeLegibility", "optimizeSpeed", "outset", "outside",
       "outside-shape", "overlay", "overline", "padding", "padding-box", "painted", "page", "paused",
       "perspective", "pinch-zoom", "plus-darker", "plus-lighter", "pointer", "polygon", "portrait",
       "pre", "pre-line", "pre-wrap", "preserve-3d", "progress", "push-button", "radial-gradient", "radio",
       "read-only", "read-write", "read-write-plaintext-only", "rectangle", "region", "relative", "repeat",
       "repeating-linear-gradient", "repeating-radial-gradient", "repeat-x", "repeat-y", "reset", "reverse",
       "rgb", "rgba", "ridge", "right", "rotate", "rotate3d", "rotateX", "rotateY", "rotateZ", "round",
       "row", "row-resize", "row-reverse", "rtl", "run-in", "running", "s-resize", "sans-serif", "saturation",
       "scale", "scale3d", "scaleX", "scaleY", "scaleZ", "screen", "scroll", "scrollbar", "scroll-position",
       "se-resize", "self-start", "self-end", "semi-condensed", "semi-expanded", "separate", "serif", "show",
       "single", "skew", "skewX", "skewY", "skip-white-space", "slide", "slider-horizontal",
       "slider-vertical", "sliderthumb-horizontal", "sliderthumb-vertical", "slow", "small", "small-caps",
       "small-caption", "smaller", "soft-light", "solid", "source-atop", "source-in", "source-out",
       "source-over", "space", "space-around", "space-between", "space-evenly", "spell-out", "square", "start",
       "static", "status-bar", "stretch", "stroke", "stroke-box", "sub", "subpixel-antialiased", "svg_masks",
       "super", "sw-resize", "symbolic", "symbols", "system-ui", "table", "table-caption", "table-cell",
       "table-column", "table-column-group", "table-footer-group", "table-header-group", "table-row",
       "table-row-group", "text", "text-bottom", "text-top", "textarea", "textfield", "thick", "thin",
       "threeddarkshadow", "threedface", "threedhighlight", "threedlightshadow", "threedshadow", "to", "top",
       "transform", "translate", "translate3d", "translateX", "translateY", "translateZ", "transparent",
       "ultra-condensed", "ultra-expanded", "underline", "unidirectional-pan", "unset", "up", "upper-latin",
       "uppercase", "url", "var", "vertical", "vertical-text", "view-box", "visible", "visibleFill",
       "visiblePainted", "visibleStroke", "visual", "w-resize", "wait", "wave", "wider", "window", "windowframe",
       "windowtext", "words", "wrap", "wrap-reverse", "x-large", "x-small", "xor", "xx-large", "xx-small"
   ].map(name => ({ type: "keyword", label: name })).concat(/*@__PURE__*/[
       "aliceblue", "antiquewhite", "aqua", "aquamarine", "azure", "beige",
       "bisque", "black", "blanchedalmond", "blue", "blueviolet", "brown",
       "burlywood", "cadetblue", "chartreuse", "chocolate", "coral", "cornflowerblue",
       "cornsilk", "crimson", "cyan", "darkblue", "darkcyan", "darkgoldenrod",
       "darkgray", "darkgreen", "darkkhaki", "darkmagenta", "darkolivegreen",
       "darkorange", "darkorchid", "darkred", "darksalmon", "darkseagreen",
       "darkslateblue", "darkslategray", "darkturquoise", "darkviolet",
       "deeppink", "deepskyblue", "dimgray", "dodgerblue", "firebrick",
       "floralwhite", "forestgreen", "fuchsia", "gainsboro", "ghostwhite",
       "gold", "goldenrod", "gray", "grey", "green", "greenyellow", "honeydew",
       "hotpink", "indianred", "indigo", "ivory", "khaki", "lavender",
       "lavenderblush", "lawngreen", "lemonchiffon", "lightblue", "lightcoral",
       "lightcyan", "lightgoldenrodyellow", "lightgray", "lightgreen", "lightpink",
       "lightsalmon", "lightseagreen", "lightskyblue", "lightslategray",
       "lightsteelblue", "lightyellow", "lime", "limegreen", "linen", "magenta",
       "maroon", "mediumaquamarine", "mediumblue", "mediumorchid", "mediumpurple",
       "mediumseagreen", "mediumslateblue", "mediumspringgreen", "mediumturquoise",
       "mediumvioletred", "midnightblue", "mintcream", "mistyrose", "moccasin",
       "navajowhite", "navy", "oldlace", "olive", "olivedrab", "orange", "orangered",
       "orchid", "palegoldenrod", "palegreen", "paleturquoise", "palevioletred",
       "papayawhip", "peachpuff", "peru", "pink", "plum", "powderblue",
       "purple", "rebeccapurple", "red", "rosybrown", "royalblue", "saddlebrown",
       "salmon", "sandybrown", "seagreen", "seashell", "sienna", "silver", "skyblue",
       "slateblue", "slategray", "snow", "springgreen", "steelblue", "tan",
       "teal", "thistle", "tomato", "turquoise", "violet", "wheat", "white",
       "whitesmoke", "yellow", "yellowgreen"
   ].map(name => ({ type: "constant", label: name })));
   const tags = /*@__PURE__*/[
       "a", "abbr", "address", "article", "aside", "b", "bdi", "bdo", "blockquote", "body",
       "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "dd", "del",
       "details", "dfn", "dialog", "div", "dl", "dt", "em", "figcaption", "figure", "footer",
       "form", "header", "hgroup", "h1", "h2", "h3", "h4", "h5", "h6", "hr", "html", "i", "iframe",
       "img", "input", "ins", "kbd", "label", "legend", "li", "main", "meter", "nav", "ol", "output",
       "p", "pre", "ruby", "section", "select", "small", "source", "span", "strong", "sub", "summary",
       "sup", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "tr", "u", "ul"
   ].map(name => ({ type: "type", label: name }));
   const identifier$4 = /^(\w[\w-]*|-\w[\w-]*|)$/, variable$1 = /^-(-[\w-]*)?$/;
   function isVarArg(node, doc) {
       var _a;
       if (node.name == "(" || node.type.isError)
           node = node.parent || node;
       if (node.name != "ArgList")
           return false;
       let callee = (_a = node.parent) === null || _a === void 0 ? void 0 : _a.firstChild;
       if ((callee === null || callee === void 0 ? void 0 : callee.name) != "Callee")
           return false;
       return doc.sliceString(callee.from, callee.to) == "var";
   }
   const VariablesByNode = /*@__PURE__*/new NodeWeakMap();
   const declSelector = ["Declaration"];
   function astTop(node) {
       for (let cur = node;;) {
           if (cur.type.isTop)
               return cur;
           if (!(cur = cur.parent))
               return node;
       }
   }
   function variableNames(doc, node, isVariable) {
       if (node.to - node.from > 4096) {
           let known = VariablesByNode.get(node);
           if (known)
               return known;
           let result = [], seen = new Set, cursor = node.cursor(IterMode.IncludeAnonymous);
           if (cursor.firstChild())
               do {
                   for (let option of variableNames(doc, cursor.node, isVariable))
                       if (!seen.has(option.label)) {
                           seen.add(option.label);
                           result.push(option);
                       }
               } while (cursor.nextSibling());
           VariablesByNode.set(node, result);
           return result;
       }
       else {
           let result = [], seen = new Set;
           node.cursor().iterate(node => {
               var _a;
               if (isVariable(node) && node.matchContext(declSelector) && ((_a = node.node.nextSibling) === null || _a === void 0 ? void 0 : _a.name) == ":") {
                   let name = doc.sliceString(node.from, node.to);
                   if (!seen.has(name)) {
                       seen.add(name);
                       result.push({ label: name, type: "variable" });
                   }
               }
           });
           return result;
       }
   }
   /**
   Create a completion source for a CSS dialect, providing a
   predicate for determining what kind of syntax node can act as a
   completable variable. This is used by language modes like Sass and
   Less to reuse this package's completion logic.
   */
   const defineCSSCompletionSource = (isVariable) => context => {
       let { state, pos } = context, node = syntaxTree(state).resolveInner(pos, -1);
       let isDash = node.type.isError && node.from == node.to - 1 && state.doc.sliceString(node.from, node.to) == "-";
       if (node.name == "PropertyName" ||
           (isDash || node.name == "TagName") && /^(Block|Styles)$/.test(node.resolve(node.to).name))
           return { from: node.from, options: properties$2(), validFor: identifier$4 };
       if (node.name == "ValueName")
           return { from: node.from, options: values, validFor: identifier$4 };
       if (node.name == "PseudoClassName")
           return { from: node.from, options: pseudoClasses, validFor: identifier$4 };
       if (isVariable(node) || (context.explicit || isDash) && isVarArg(node, state.doc))
           return { from: isVariable(node) || isDash ? node.from : pos,
               options: variableNames(state.doc, astTop(node), isVariable),
               validFor: variable$1 };
       if (node.name == "TagName") {
           for (let { parent } = node; parent; parent = parent.parent)
               if (parent.name == "Block")
                   return { from: node.from, options: properties$2(), validFor: identifier$4 };
           return { from: node.from, options: tags, validFor: identifier$4 };
       }
       if (!context.explicit)
           return null;
       let above = node.resolve(pos), before = above.childBefore(pos);
       if (before && before.name == ":" && above.name == "PseudoClassSelector")
           return { from: pos, options: pseudoClasses, validFor: identifier$4 };
       if (before && before.name == ":" && above.name == "Declaration" || above.name == "ArgList")
           return { from: pos, options: values, validFor: identifier$4 };
       if (above.name == "Block" || above.name == "Styles")
           return { from: pos, options: properties$2(), validFor: identifier$4 };
       return null;
   };
   /**
   CSS property, variable, and value keyword completion source.
   */
   const cssCompletionSource = /*@__PURE__*/defineCSSCompletionSource(n => n.name == "VariableName");

   /**
   A language provider based on the [Lezer CSS
   parser](https://github.com/lezer-parser/css), extended with
   highlighting and indentation information.
   */
   const cssLanguage = /*@__PURE__*/LRLanguage.define({
       name: "css",
       parser: /*@__PURE__*/parser$e.configure({
           props: [
               /*@__PURE__*/indentNodeProp.add({
                   Declaration: /*@__PURE__*/continuedIndent()
               }),
               /*@__PURE__*/foldNodeProp.add({
                   Block: foldInside
               })
           ]
       }),
       languageData: {
           commentTokens: { block: { open: "/*", close: "*/" } },
           indentOnInput: /^\s*\}$/,
           wordChars: "-"
       }
   });
   /**
   Language support for CSS.
   */
   function css$2() {
       return new LanguageSupport(cssLanguage, cssLanguage.data.of({ autocomplete: cssCompletionSource }));
   }

   var index$h = /*#__PURE__*/Object.freeze({
      __proto__: null,
      css: css$2,
      cssCompletionSource: cssCompletionSource,
      cssLanguage: cssLanguage,
      defineCSSCompletionSource: defineCSSCompletionSource
   });

   // This file was generated by lezer-generator. You probably shouldn't edit it.
   const noSemi = 302,
     incdec = 1,
     incdecPrefix = 2,
     insertSemi = 303,
     spaces$1 = 305,
     newline$3 = 306,
     LineComment$2 = 3,
     BlockComment$1 = 4;

   /* Hand-written tokenizers for JavaScript tokens that can't be
      expressed by lezer's built-in tokenizer. */

   const space$5 = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8199, 8200,
                  8201, 8202, 8232, 8233, 8239, 8287, 12288];

   const braceR$1 = 125, semicolon$1 = 59, slash$1 = 47, star = 42,
         plus$1 = 43, minus = 45;

   const trackNewline = new ContextTracker({
     start: false,
     shift(context, term) {
       return term == LineComment$2 || term == BlockComment$1 || term == spaces$1 ? context : term == newline$3
     },
     strict: false
   });

   const insertSemicolon = new ExternalTokenizer((input, stack) => {
     let {next} = input;
     if ((next == braceR$1 || next == -1 || stack.context) && stack.canShift(insertSemi))
       input.acceptToken(insertSemi);
   }, {contextual: true, fallback: true});

   const noSemicolon = new ExternalTokenizer((input, stack) => {
     let {next} = input, after;
     if (space$5.indexOf(next) > -1) return
     if (next == slash$1 && ((after = input.peek(1)) == slash$1 || after == star)) return
     if (next != braceR$1 && next != semicolon$1 && next != -1 && !stack.context && stack.canShift(noSemi))
       input.acceptToken(noSemi);
   }, {contextual: true});

   const incdecToken = new ExternalTokenizer((input, stack) => {
     let {next} = input;
     if (next == plus$1 || next == minus) {
       input.advance();
       if (next == input.next) {
         input.advance();
         let mayPostfix = !stack.context && stack.canShift(incdec);
         input.acceptToken(mayPostfix ? incdec : incdecPrefix);
       }
     }
   }, {contextual: true});

   const jsHighlight = styleTags({
     "get set async static": tags$1.modifier,
     "for while do if else switch try catch finally return throw break continue default case": tags$1.controlKeyword,
     "in of await yield void typeof delete instanceof": tags$1.operatorKeyword,
     "let var const function class extends": tags$1.definitionKeyword,
     "import export from": tags$1.moduleKeyword,
     "with debugger as new": tags$1.keyword,
     TemplateString: tags$1.special(tags$1.string),
     super: tags$1.atom,
     BooleanLiteral: tags$1.bool,
     this: tags$1.self,
     null: tags$1.null,
     Star: tags$1.modifier,
     VariableName: tags$1.variableName,
     "CallExpression/VariableName TaggedTemplateExpression/VariableName": tags$1.function(tags$1.variableName),
     VariableDefinition: tags$1.definition(tags$1.variableName),
     Label: tags$1.labelName,
     PropertyName: tags$1.propertyName,
     PrivatePropertyName: tags$1.special(tags$1.propertyName),
     "CallExpression/MemberExpression/PropertyName": tags$1.function(tags$1.propertyName),
     "FunctionDeclaration/VariableDefinition": tags$1.function(tags$1.definition(tags$1.variableName)),
     "ClassDeclaration/VariableDefinition": tags$1.definition(tags$1.className),
     PropertyDefinition: tags$1.definition(tags$1.propertyName),
     PrivatePropertyDefinition: tags$1.definition(tags$1.special(tags$1.propertyName)),
     UpdateOp: tags$1.updateOperator,
     LineComment: tags$1.lineComment,
     BlockComment: tags$1.blockComment,
     Number: tags$1.number,
     String: tags$1.string,
     Escape: tags$1.escape,
     ArithOp: tags$1.arithmeticOperator,
     LogicOp: tags$1.logicOperator,
     BitOp: tags$1.bitwiseOperator,
     CompareOp: tags$1.compareOperator,
     RegExp: tags$1.regexp,
     Equals: tags$1.definitionOperator,
     Arrow: tags$1.function(tags$1.punctuation),
     ": Spread": tags$1.punctuation,
     "( )": tags$1.paren,
     "[ ]": tags$1.squareBracket,
     "{ }": tags$1.brace,
     "InterpolationStart InterpolationEnd": tags$1.special(tags$1.brace),
     ".": tags$1.derefOperator,
     ", ;": tags$1.separator,
     "@": tags$1.meta,

     TypeName: tags$1.typeName,
     TypeDefinition: tags$1.definition(tags$1.typeName),
     "type enum interface implements namespace module declare": tags$1.definitionKeyword,
     "abstract global Privacy readonly override": tags$1.modifier,
     "is keyof unique infer": tags$1.operatorKeyword,

     JSXAttributeValue: tags$1.attributeValue,
     JSXText: tags$1.content,
     "JSXStartTag JSXStartCloseTag JSXSelfCloseEndTag JSXEndTag": tags$1.angleBracket,
     "JSXIdentifier JSXNameSpacedName": tags$1.tagName,
     "JSXAttribute/JSXIdentifier JSXAttribute/JSXNameSpacedName": tags$1.attributeName,
     "JSXBuiltin/JSXIdentifier": tags$1.standard(tags$1.tagName)
   });

   // This file was generated by lezer-generator. You probably shouldn't edit it.
   const spec_identifier$6 = {__proto__:null,export:14, as:19, from:27, default:30, async:35, function:36, extends:46, this:50, true:58, false:58, null:70, void:74, typeof:78, super:96, new:130, delete:146, yield:155, await:159, class:164, public:221, private:221, protected:221, readonly:223, instanceof:242, satisfies:245, in:246, const:248, import:280, keyof:335, unique:339, infer:345, is:381, abstract:401, implements:403, type:405, let:408, var:410, interface:417, enum:421, namespace:427, module:429, declare:433, global:437, for:456, of:465, while:468, with:472, do:476, if:480, else:482, switch:486, case:492, try:498, catch:502, finally:506, return:510, throw:514, break:518, continue:522, debugger:526};
   const spec_word = {__proto__:null,async:117, get:119, set:121, declare:181, public:183, private:183, protected:183, static:185, abstract:187, override:189, readonly:195, accessor:197, new:385};
   const spec_LessThan = {__proto__:null,"<":137};
   const parser$d = LRParser.deserialize({
     version: 14,
     states: "$6[O`QUOOO%QQUOOO'TQWOOP(bOSOOO*pQ(CjO'#CfO*wOpO'#CgO+VO!bO'#CgO+eO07`O'#DZO-vQUO'#DaO.WQUO'#DlO%QQUO'#DvO0[QUO'#EOOOQ(CY'#EW'#EWO0uQSO'#ETOOQO'#Ei'#EiOOQO'#Ib'#IbO0}QSO'#GkO1YQSO'#EhO1_QSO'#EhO3aQ(CjO'#JcO6QQ(CjO'#JdO6nQSO'#FWO6sQ#tO'#FoOOQ(CY'#F`'#F`O7OO&jO'#F`O7^Q,UO'#FvO8tQSO'#FuOOQ(CY'#Jd'#JdOOQ(CW'#Jc'#JcOOQQ'#KO'#KOO8yQSO'#IOO9OQ(C[O'#IPOOQQ'#JP'#JPOOQQ'#IT'#ITQ`QUOOO%QQUO'#DnO9WQUO'#DzO%QQUO'#D|O9_QSO'#GkO9dQ,UO'#ClO9rQSO'#EgO9}QSO'#ErO:SQ,UO'#F_O:qQSO'#GkO:vQSO'#GoO;RQSO'#GoO;aQSO'#GrO;aQSO'#GsO;aQSO'#GuO9_QSO'#GxO<QQSO'#G{O=cQSO'#CbO=sQSO'#HXO={QSO'#H_O={QSO'#HaO`QUO'#HcO={QSO'#HeO={QSO'#HhO>QQSO'#HnO>VQ(C]O'#HtO%QQUO'#HvO>bQ(C]O'#HxO>mQ(C]O'#HzO9OQ(C[O'#H|O>xQ(CjO'#CfO?zQWO'#DfQOQSOOO@bQSO'#EPO9dQ,UO'#EgO@mQSO'#EgO@xQ`O'#F_OOQQ'#Cd'#CdOOQ(CW'#Dk'#DkOOQ(CW'#Jg'#JgO%QQUO'#JgOOQO'#Jk'#JkOOQO'#I_'#I_OAxQWO'#E`OOQ(CW'#E_'#E_OBtQ(C`O'#E`OCOQWO'#ESOOQO'#Jj'#JjOCdQWO'#JkODqQWO'#ESOCOQWO'#E`PEOO?MpO'#C`POOO)CDn)CDnOOOO'#IU'#IUOEZOpO,59ROOQ(CY,59R,59ROOOO'#IV'#IVOEiO!bO,59RO%QQUO'#D]OOOO'#IX'#IXOEwO07`O,59uOOQ(CY,59u,59uOFVQUO'#IYOFjQSO'#JeOHlQbO'#JeO+sQUO'#JeOHsQSO,59{OIZQSO'#EiOIhQSO'#JsOIsQSO'#JrOIsQSO'#JrOI{QSO,5;VOJQQSO'#JqOOQ(CY,5:W,5:WOJXQUO,5:WOLYQ(CjO,5:bOLyQSO,5:jOMdQ(C[O'#JpOMkQSO'#JoO:vQSO'#JoONPQSO'#JoONXQSO,5;UON^QSO'#JoO!!fQbO'#JdOOQ(CY'#Cf'#CfO%QQUO'#EOO!#UQ`O,5:oOOQO'#Jl'#JlOOQO-E<`-E<`O9_QSO,5=VO!#lQSO,5=VO!#qQUO,5;SO!%tQ,UO'#EdO!'XQSO,5;SO!(qQ,UO'#DpO!(xQUO'#DuO!)SQWO,5;]O!)[QWO,5;]O%QQUO,5;]OOQQ'#FO'#FOOOQQ'#FQ'#FQO%QQUO,5;^O%QQUO,5;^O%QQUO,5;^O%QQUO,5;^O%QQUO,5;^O%QQUO,5;^O%QQUO,5;^O%QQUO,5;^O%QQUO,5;^O%QQUO,5;^O%QQUO,5;^OOQQ'#FU'#FUO!)jQUO,5;oOOQ(CY,5;t,5;tOOQ(CY,5;u,5;uO!+mQSO,5;uOOQ(CY,5;v,5;vO%QQUO'#IfO!+uQ(C[O,5<cO!%tQ,UO,5;^O!,dQ,UO,5;^O%QQUO,5;rO!,kQ#tO'#FeO!-hQ#tO'#JwO!-SQ#tO'#JwO!-oQ#tO'#JwOOQO'#Jw'#JwO!.TQ#tO,5;}OOOO,5<Z,5<ZO!.fQUO'#FqOOOO'#Ie'#IeO7OO&jO,5;zO!.mQ#tO'#FsOOQ(CY,5;z,5;zO!/^Q7[O'#CrOOQ(CY'#Cv'#CvO!/qQSO'#CvO!/vO07`O'#CzO!0dQ,UO,5<`O!0kQSO,5<bO!2QQMhO'#GQO!2_QSO'#GRO!2dQSO'#GRO!2iQMhO'#GVO!3hQWO'#GZO!4ZQ7[O'#J^OOQ(CY'#J^'#J^O!4eQSO'#J]O!4sQSO'#J[O!4{QSO'#CqOOQ(CY'#Ct'#CtOOQ(CY'#DO'#DOOOQ(CY'#DQ'#DQO0xQSO'#DSO!'^Q,UO'#FxO!'^Q,UO'#FzO!5TQSO'#F|O!5YQSO'#F}O!2dQSO'#GTO!'^Q,UO'#GYO!5_QSO'#EjO!5|QSO,5<aO`QUO,5>jOOQQ'#JX'#JXOOQQ,5>k,5>kOOQQ-E<R-E<RO!7{Q(CjO,5:YO!:iQ(CjO,5:fO%QQUO,5:fO!=SQ(CjO,5:hOOQ(CW'#Co'#CoO!=sQ,UO,5=VO!>RQ(C[O'#JYO8tQSO'#JYO!>dQ(C[O,59WO!>oQWO,59WO!>wQ,UO,59WO9dQ,UO,59WO!?SQSO,5;SO!?[QSO'#HWO!?mQSO'#KSO%QQUO,5;wO!?uQWO,5;yO!?zQSO,5=qO!@PQSO,5=qO!@UQSO,5=qO9OQ(C[O,5=qO!@dQSO'#EkO!A^QWO'#ElOOQ(CW'#Jq'#JqO!AeQ(C[O'#KPO9OQ(C[O,5=ZO;aQSO,5=aOOQO'#Cr'#CrO!ApQWO,5=^O!AxQ,UO,5=_O!BTQSO,5=aO!BYQ`O,5=dO>QQSO'#G}O9_QSO'#HPO!BbQSO'#HPO9dQ,UO'#HRO!BgQSO'#HROOQQ,5=g,5=gO!BlQSO'#HSO!BtQSO'#ClO!ByQSO,58|O!CTQSO,58|O!E]QUO,58|OOQQ,58|,58|O!EjQ(C[O,58|O%QQUO,58|O!EuQUO'#HZOOQQ'#H['#H[OOQQ'#H]'#H]O`QUO,5=sO!FVQSO,5=sO`QUO,5=yO`QUO,5={O!F[QSO,5=}O`QUO,5>PO!FaQSO,5>SO!FfQUO,5>YOOQQ,5>`,5>`O%QQUO,5>`O9OQ(C[O,5>bOOQQ,5>d,5>dO!JmQSO,5>dOOQQ,5>f,5>fO!JmQSO,5>fOOQQ,5>h,5>hO!JrQWO'#DXO%QQUO'#JgO!KaQWO'#JgO!LOQWO'#DgO!LaQWO'#DgO!NrQUO'#DgO!NyQSO'#JfO# RQSO,5:QO# WQSO'#EmO# fQSO'#JtO# nQSO,5;WO# sQWO'#DgO#!QQWO'#EROOQ(CY,5:k,5:kO%QQUO,5:kO#!XQSO,5:kO>QQSO,5;RO!>oQWO,5;RO!>wQ,UO,5;RO9dQ,UO,5;RO#!aQSO,5@RO#!fQ!LQO,5:oOOQO-E<]-E<]O##lQ(C`O,5:zOCOQWO,5:nO##vQWO,5:nOCOQWO,5:zO!>dQ(C[O,5:nOOQ(CW'#Ec'#EcOOQO,5:z,5:zO%QQUO,5:zO#$TQ(C[O,5:zO#$`Q(C[O,5:zO!>oQWO,5:nOOQO,5;Q,5;QO#$nQ(C[O,5:zPOOO'#IS'#ISP#%SO?MpO,58zPOOO,58z,58zOOOO-E<S-E<SOOQ(CY1G.m1G.mOOOO-E<T-E<TO#%_Q`O,59wOOOO-E<V-E<VOOQ(CY1G/a1G/aO#%dQbO,5>tO+sQUO,5>tOOQO,5>z,5>zO#%nQUO'#IYOOQO-E<W-E<WO#%{QSO,5@PO#&TQbO,5@PO#&[QSO,5@^OOQ(CY1G/g1G/gO%QQUO,5@_O#&dQSO'#I`OOQO-E<^-E<^O#&[QSO,5@^OOQ(CW1G0q1G0qOOQ(CY1G/r1G/rOOQ(CY1G0U1G0UO%QQUO,5@[O#&xQ(C[O,5@[O#'ZQ(C[O,5@[O#'bQSO,5@ZO:vQSO,5@ZO#'jQSO,5@ZO#'xQSO'#IcO#'bQSO,5@ZOOQ(CW1G0p1G0pO!)SQWO,5:qO!)_QWO,5:qOOQO,5:s,5:sO#(jQSO,5:sO#(rQ,UO1G2qO9_QSO1G2qOOQ(CY1G0n1G0nO#)QQ(CjO1G0nO#*VQ(ChO,5;OOOQ(CY'#GP'#GPO#*sQ(CjO'#J^O!#qQUO1G0nO#,{Q,UO'#JhO#-VQSO,5:[O#-[QbO'#JiO%QQUO'#JiO#-fQSO,5:aOOQ(CY'#DX'#DXOOQ(CY1G0w1G0wO%QQUO1G0wOOQ(CY1G1a1G1aO#-kQSO1G0wO#0SQ(CjO1G0xO#0ZQ(CjO1G0xO#2tQ(CjO1G0xO#2{Q(CjO1G0xO#5VQ(CjO1G0xO#5mQ(CjO1G0xO#8gQ(CjO1G0xO#8nQ(CjO1G0xO#;XQ(CjO1G0xO#;`Q(CjO1G0xO#=WQ(CjO1G0xO#@WQ$IUO'#CfO#BUQ$IUO1G1ZO#B]Q$IUO'#JdO!+pQSO1G1aO#BmQ(CjO,5?QOOQ(CW-E<d-E<dO#CaQ(CjO1G0xOOQ(CY1G0x1G0xO#ElQ(CjO1G1^O#F`Q#tO,5<RO#FhQ#tO,5<SO#FpQ#tO'#FjO#GXQSO'#FiOOQO'#Jx'#JxOOQO'#Id'#IdO#G^Q#tO1G1iOOQ(CY1G1i1G1iOOOO1G1t1G1tO#GoQ$IUO'#JcO#GyQSO,5<]O!)jQUO,5<]OOOO-E<c-E<cOOQ(CY1G1f1G1fO#HOQWO'#JwOOQ(CY,5<_,5<_O#HWQWO,5<_OOQ(CY,59b,59bO!%tQ,UO'#C|OOOO'#IW'#IWO#H]O07`O,59fOOQ(CY,59f,59fO%QQUO1G1zO!5YQSO'#IhO#HhQSO,5<sOOQ(CY,5<p,5<pOOQO'#Gf'#GfO!'^Q,UO,5=POOQO'#Gh'#GhO!'^Q,UO,5=RO!%tQ,UO,5=TOOQO1G1|1G1|O#HvQ`O'#CoO#IZQ`O,5<lO#IbQSO'#J{O9_QSO'#J{O#IpQSO,5<nO!'^Q,UO,5<mO#IuQSO'#GSO#JQQSO,5<mO#JVQ`O'#GPO#JdQ`O'#J|O#JnQSO'#J|O!%tQ,UO'#J|O#JsQSO,5<qO#JxQWO'#G[O!3cQWO'#G[O#KZQSO'#G^O#K`QSO'#G`O!2dQSO'#GcO#KeQ(C[O'#IjO#KpQWO,5<uOOQ(CY,5<u,5<uO#KwQWO'#G[O#LVQWO'#G]O#L_QWO'#G]OOQ(CY,5=U,5=UO!'^Q,UO,5?wO!'^Q,UO,5?wO#LdQSO'#IkO#LoQSO,5?vO#LwQSO,59]O#MhQ,UO,59nOOQ(CY,59n,59nO#NZQ,UO,5<dO#N|Q,UO,5<fO?rQSO,5<hOOQ(CY,5<i,5<iO$ WQSO,5<oO$ ]Q,UO,5<tO$ mQSO'#JoO!#qQUO1G1{O$ rQSO1G1{OOQQ1G4U1G4UOOQ(CY1G/t1G/tO!+mQSO1G/tO$#qQ(CjO1G0QOOQQ1G2q1G2qO!%tQ,UO1G2qO%QQUO1G2qO$$bQSO1G2qO$$mQ,UO'#EdOOQ(CW,5?t,5?tO$$wQ(C[O,5?tOOQQ1G.r1G.rO!>dQ(C[O1G.rO!>oQWO1G.rO!>wQ,UO1G.rO$%YQSO1G0nO$%_QSO'#CfO$%jQSO'#KTO$%rQSO,5=rO$%wQSO'#KTO$%|QSO'#KTO$&XQSO'#IsO$&gQSO,5@nO$&oQbO1G1cOOQ(CY1G1e1G1eO9_QSO1G3]O?rQSO1G3]O$&vQSO1G3]O$&{QSO1G3]OOQQ1G3]1G3]O:vQSO'#JrO:vQSO'#EmO%QQUO'#EmO:vQSO'#ImO$'QQ(C[O,5@kOOQQ1G2u1G2uO!BTQSO1G2{O!%tQ,UO1G2xO$']QSO1G2xOOQQ1G2y1G2yO!%tQ,UO1G2yO$'bQSO1G2yO$'jQWO'#GwOOQQ1G2{1G2{O!3cQWO'#IoO!BYQ`O1G3OOOQQ1G3O1G3OOOQQ,5=i,5=iO$'rQ,UO,5=kO9_QSO,5=kO#K`QSO,5=mO8tQSO,5=mO!>oQWO,5=mO!>wQ,UO,5=mO9dQ,UO,5=mO$(QQSO'#KRO$(]QSO,5=nOOQQ1G.h1G.hO$(bQ(C[O1G.hO?rQSO1G.hO$(mQSO1G.hO9OQ(C[O1G.hO$*rQbO,5@pO$+SQSO,5@pO$+_QUO,5=uO$+fQSO,5=uO:vQSO,5@pOOQQ1G3_1G3_O`QUO1G3_OOQQ1G3e1G3eOOQQ1G3g1G3gO={QSO1G3iO$+kQUO1G3kO$/lQUO'#HjOOQQ1G3n1G3nO$/yQSO'#HpO>QQSO'#HrOOQQ1G3t1G3tO$0RQUO1G3tO9OQ(C[O1G3zOOQQ1G3|1G3|OOQ(CW'#GW'#GWO9OQ(C[O1G4OO9OQ(C[O1G4QO$4VQSO,5@RO!)jQUO,5;XO:vQSO,5;XO>QQSO,5:RO!)jQUO,5:RO!>oQWO,5:RO$4[Q$IUO,5:ROOQO,5;X,5;XO$4fQWO'#IZO$4|QSO,5@QOOQ(CY1G/l1G/lO$5UQWO'#IaO$5`QSO,5@`OOQ(CW1G0r1G0rO!LaQWO,5:ROOQO'#I^'#I^O$5hQWO,5:mOOQ(CY,5:m,5:mO#![QSO1G0VOOQ(CY1G0V1G0VO%QQUO1G0VOOQ(CY1G0m1G0mO>QQSO1G0mO!>oQWO1G0mO!>wQ,UO1G0mOOQ(CW1G5m1G5mO!>dQ(C[O1G0YOOQO1G0f1G0fO%QQUO1G0fO$5oQ(C[O1G0fO$5zQ(C[O1G0fO!>oQWO1G0YOCOQWO1G0YO$6YQ(C[O1G0fOOQO1G0Y1G0YO$6nQ(CjO1G0fPOOO-E<Q-E<QPOOO1G.f1G.fOOOO1G/c1G/cO$6xQ`O,5<cO$7QQbO1G4`OOQO1G4f1G4fO%QQUO,5>tO$7[QSO1G5kO$7dQSO1G5xO$7lQbO1G5yO:vQSO,5>zO$7vQ(CjO1G5vO%QQUO1G5vO$8WQ(C[O1G5vO$8iQSO1G5uO$8iQSO1G5uO:vQSO1G5uO$8qQSO,5>}O:vQSO,5>}OOQO,5>},5>}O$9VQSO,5>}O$ mQSO,5>}OOQO-E<a-E<aOOQO1G0]1G0]OOQO1G0_1G0_O!+pQSO1G0_OOQQ7+(]7+(]O!%tQ,UO7+(]O%QQUO7+(]O$9eQSO7+(]O$9pQ,UO7+(]O$:OQ(CjO,59nO$<WQ(CjO,5<dO$>cQ(CjO,5<fO$@nQ(CjO,5<tOOQ(CY7+&Y7+&YO$CPQ(CjO7+&YO$CsQ,UO'#I[O$C}QSO,5@SOOQ(CY1G/v1G/vO$DVQUO'#I]O$DdQSO,5@TO$DlQbO,5@TOOQ(CY1G/{1G/{O$DvQSO7+&cOOQ(CY7+&c7+&cO$D{Q$IUO,5:bO%QQUO7+&uO$EVQ$IUO,5:YO$EdQ$IUO,5:fO$EnQ$IUO,5:hOOQ(CY7+&{7+&{OOQO1G1m1G1mOOQO1G1n1G1nO$ExQ#tO,5<UO!)jQUO,5<TOOQO-E<b-E<bOOQ(CY7+'T7+'TOOOO7+'`7+'`OOOO1G1w1G1wO$FTQSO1G1wOOQ(CY1G1y1G1yO$FYQ`O,59hOOOO-E<U-E<UOOQ(CY1G/Q1G/QO$FaQ(CjO7+'fOOQ(CY,5?S,5?SO$GTQSO,5?SOOQ(CY1G2_1G2_P$GYQSO'#IhPOQ(CY-E<f-E<fO$G|Q,UO1G2kO$HoQ,UO1G2mO$HyQ`O1G2oOOQ(CY1G2W1G2WO$IQQSO'#IgO$I`QSO,5@gO$I`QSO,5@gO$IhQSO,5@gO$IsQSO,5@gOOQO1G2Y1G2YO$JRQ,UO1G2XO!'^Q,UO1G2XO$JcQMhO'#IiO$JsQSO,5@hO!%tQ,UO,5@hO$J{Q`O,5@hOOQ(CY1G2]1G2]OOQ(CW,5<v,5<vOOQ(CW,5<w,5<wO$ mQSO,5<wOBoQSO,5<wO!>oQWO,5<vOOQO'#G_'#G_O$KVQSO,5<xOOQ(CW,5<z,5<zO$ mQSO,5<}OOQO,5?U,5?UOOQO-E<h-E<hOOQ(CY1G2a1G2aO!3cQWO,5<vO$K_QSO,5<wO#KZQSO,5<xO!3cQWO,5<wO$KjQ,UO1G5cO$KtQ,UO1G5cOOQO,5?V,5?VOOQO-E<i-E<iOOQO1G.w1G.wO!?uQWO,59pO%QQUO,59pO$LRQSO1G2SO!'^Q,UO1G2ZO$LWQ(CjO7+'gOOQ(CY7+'g7+'gO!#qQUO7+'gOOQ(CY7+%`7+%`O$LzQ`O'#J}O#![QSO7+(]O$MUQbO7+(]O$9hQSO7+(]O$M]Q(ChO'#CfO$MpQ(ChO,5<{O$NbQSO,5<{OOQ(CW1G5`1G5`OOQQ7+$^7+$^O!>dQ(C[O7+$^O!>oQWO7+$^O!#qQUO7+&YO$NgQSO'#IrO$N{QSO,5@oOOQO1G3^1G3^O9_QSO,5@oO$N{QSO,5@oO% TQSO,5@oOOQO,5?_,5?_OOQO-E<q-E<qOOQ(CY7+&}7+&}O% YQSO7+(wO9OQ(C[O7+(wO9_QSO7+(wO?rQSO7+(wO% _QSO,5;XOOQ(CW,5?X,5?XOOQ(CW-E<k-E<kOOQQ7+(g7+(gO% dQ(ChO7+(dO!%tQ,UO7+(dO% nQ`O7+(eOOQQ7+(e7+(eO!%tQ,UO7+(eO% uQSO'#KQO%!QQSO,5=cOOQO,5?Z,5?ZOOQO-E<m-E<mOOQQ7+(j7+(jO%#aQWO'#HQOOQQ1G3V1G3VO!%tQ,UO1G3VO%QQUO1G3VO%#hQSO1G3VO%#sQ,UO1G3VO9OQ(C[O1G3XO#K`QSO1G3XO8tQSO1G3XO!>oQWO1G3XO!>wQ,UO1G3XO%$RQSO'#IqO%$^QSO,5@mO%$fQWO,5@mOOQ(CW1G3Y1G3YOOQQ7+$S7+$SO?rQSO7+$SO9OQ(C[O7+$SO%$qQSO7+$SO%QQUO1G6[O%QQUO1G6]O%$vQUO1G3aO%$}QSO1G3aO%%SQUO1G3aO%%ZQ(C[O1G6[OOQQ7+(y7+(yO9OQ(C[O7+)TO`QUO7+)VOOQQ'#KW'#KWOOQQ'#It'#ItO%%eQUO,5>UOOQQ,5>U,5>UO%QQUO'#HkO%%rQSO'#HmOOQQ,5>[,5>[O:vQSO,5>[OOQQ,5>^,5>^OOQQ7+)`7+)`OOQQ7+)f7+)fOOQQ7+)j7+)jOOQQ7+)l7+)lO%%wQWO1G5mO%&]Q$IUO1G0sO%&gQSO1G0sOOQO1G/m1G/mO%&rQ$IUO1G/mO>QQSO1G/mO!)jQUO'#DgOOQO,5>u,5>uOOQO-E<X-E<XOOQO,5>{,5>{OOQO-E<_-E<_O!>oQWO1G/mOOQO-E<[-E<[OOQ(CY1G0X1G0XOOQ(CY7+%q7+%qO#![QSO7+%qOOQ(CY7+&X7+&XO>QQSO7+&XO!>oQWO7+&XOOQO7+%t7+%tO$6nQ(CjO7+&QOOQO7+&Q7+&QO%QQUO7+&QO%&|Q(C[O7+&QO!>dQ(C[O7+%tO!>oQWO7+%tO%'XQ(C[O7+&QO%'gQ(CjO7++bO%QQUO7++bO%'wQSO7++aO%'wQSO7++aOOQO1G4i1G4iO:vQSO1G4iO%(PQSO1G4iOOQO7+%y7+%yO#![QSO<<KwO$MUQbO<<KwO%(_QSO<<KwOOQQ<<Kw<<KwO!%tQ,UO<<KwO%QQUO<<KwO%(gQSO<<KwO%(rQ(CjO1G2kO%*}Q(CjO1G2mO%-YQ(CjO1G2XO%/kQ,UO,5>vOOQO-E<Y-E<YO%/uQbO,5>wO%QQUO,5>wOOQO-E<Z-E<ZO%0PQSO1G5oOOQ(CY<<I}<<I}O%0XQ$IUO1G0nO%2cQ$IUO1G0xO%2jQ$IUO1G0xO%4nQ$IUO1G0xO%4uQ$IUO1G0xO%6jQ$IUO1G0xO%7QQ$IUO1G0xO%9eQ$IUO1G0xO%9lQ$IUO1G0xO%;pQ$IUO1G0xO%;wQ$IUO1G0xO%=oQ$IUO1G0xO%>SQ(CjO<<JaO%?XQ$IUO1G0xO%@}Q$IUO'#J^O%CQQ$IUO1G1^O%C_Q$IUO1G0QO!)jQUO'#FlOOQO'#Jy'#JyOOQO1G1p1G1pO%CiQSO1G1oO%CnQ$IUO,5?QOOOO7+'c7+'cOOOO1G/S1G/SOOQ(CY1G4n1G4nO!'^Q,UO7+(ZO%CxQSO,5?RO9_QSO,5?ROOQO-E<e-E<eO%DWQSO1G6RO%DWQSO1G6RO%D`QSO1G6RO%DkQ,UO7+'sO%D{Q`O,5?TO%EVQSO,5?TO!%tQ,UO,5?TOOQO-E<g-E<gO%E[Q`O1G6SO%EfQSO1G6SOOQ(CW1G2c1G2cO$ mQSO1G2cOOQ(CW1G2b1G2bO%EnQSO1G2dO!%tQ,UO1G2dOOQ(CW1G2i1G2iO!>oQWO1G2bOBoQSO1G2cO%EsQSO1G2dO%E{QSO1G2cO!'^Q,UO7+*}OOQ(CY1G/[1G/[O%FWQSO1G/[OOQ(CY7+'n7+'nO%F]Q,UO7+'uO%FmQ(CjO<<KROOQ(CY<<KR<<KRO!%tQ,UO'#IlO%GaQSO,5@iO!%tQ,UO1G2gOOQQ<<Gx<<GxO!>dQ(C[O<<GxO%GiQ(CjO<<ItOOQ(CY<<It<<ItOOQO,5?^,5?^O%H]QSO,5?^O$%|QSO,5?^OOQO-E<p-E<pO%HbQSO1G6ZO%HbQSO1G6ZO9_QSO1G6ZO?rQSO<<LcOOQQ<<Lc<<LcO%HjQSO<<LcO9OQ(C[O<<LcO%HoQSO1G0sOOQQ<<LO<<LOO% dQ(ChO<<LOOOQQ<<LP<<LPO% nQ`O<<LPO%HtQWO'#InO%IPQSO,5@lO!)jQUO,5@lOOQQ1G2}1G2}O%IXQUO'#JgOOQO'#Ip'#IpO9OQ(C[O'#IpO%IcQWO,5=lOOQQ,5=l,5=lO%IjQWO'#E`O%JOQSO7+(qO%JTQSO7+(qOOQQ7+(q7+(qO!%tQ,UO7+(qO%QQUO7+(qO%J]QSO7+(qOOQQ7+(s7+(sO9OQ(C[O7+(sO#K`QSO7+(sO8tQSO7+(sO!>oQWO7+(sO%JhQSO,5?]OOQO-E<o-E<oOOQO'#HT'#HTO%JsQSO1G6XO9OQ(C[O<<GnOOQQ<<Gn<<GnO?rQSO<<GnO%J{QSO7++vO%KQQSO7++wOOQQ7+({7+({O%KVQSO7+({O%K[QUO7+({O%KcQSO7+({O%QQUO7++vO%QQUO7++wOOQQ<<Lo<<LoOOQQ<<Lq<<LqOOQQ-E<r-E<rOOQQ1G3p1G3pO%KhQSO,5>VOOQQ,5>X,5>XO%KmQSO1G3vO:vQSO7+&_O!)jQUO7+&_OOQO7+%X7+%XO%KrQ$IUO1G5yO>QQSO7+%XOOQ(CY<<I]<<I]OOQ(CY<<Is<<IsO>QQSO<<IsOOQO<<Il<<IlO$6nQ(CjO<<IlO%QQUO<<IlOOQO<<I`<<I`O!>dQ(C[O<<I`O%K|Q(C[O<<IlO%LXQ(CjO<<N|O%LiQSO<<N{OOQO7+*T7+*TO:vQSO7+*TOOQQANAcANAcO%LqQSOANAcO!%tQ,UOANAcO#![QSOANAcO$MUQbOANAcO%QQUOANAcO%LyQ(CjO7+'sO& [Q(CjO7+'uO&#mQbO1G4cO&#wQ$IUO7+&YO&$UQ$IUO,59nO&&XQ$IUO,5<dO&([Q$IUO,5<fO&*_Q$IUO,5<tO&,TQ$IUO7+'fO&,bQ$IUO7+'gO&,oQSO,5<WOOQO7+'Z7+'ZO&,tQ,UO<<KuOOQO1G4m1G4mO&,{QSO1G4mO&-WQSO1G4mO&-fQSO7++mO&-fQSO7++mO!%tQ,UO1G4oO&-nQ`O1G4oO&-xQSO7++nOOQ(CW7+'}7+'}O$ mQSO7+(OO&.QQ`O7+(OOOQ(CW7+'|7+'|O$ mQSO7+'}O&.XQSO7+(OO!%tQ,UO7+(OOBoQSO7+'}O&.^Q,UO<<NiOOQ(CY7+$v7+$vO&.hQ`O,5?WOOQO-E<j-E<jO&.rQ(ChO7+(ROOQQAN=dAN=dO9_QSO1G4xOOQO1G4x1G4xO&/SQSO1G4xO&/XQSO7++uO&/XQSO7++uO9OQ(C[OANA}O?rQSOANA}OOQQANA}ANA}OOQQANAjANAjOOQQANAkANAkO&/aQSO,5?YOOQO-E<l-E<lO&/lQ$IUO1G6WO&1|QbO'#CfOOQO,5?[,5?[OOQO-E<n-E<nOOQQ1G3W1G3WO%IXQUO,5<xOOQQ<<L]<<L]O!%tQ,UO<<L]O%JOQSO<<L]O&2WQSO<<L]O%QQUO<<L]OOQQ<<L_<<L_O9OQ(C[O<<L_O#K`QSO<<L_O8tQSO<<L_O&2`QWO1G4wO&2kQSO7++sOOQQAN=YAN=YO9OQ(C[OAN=YOOQQ<= b<= bOOQQ<= c<= cOOQQ<<Lg<<LgO&2sQSO<<LgO&2xQUO<<LgO&3PQSO<= bO&3UQSO<= cOOQQ1G3q1G3qO>QQSO7+)bO&3ZQSO<<IyO&3fQ$IUO<<IyOOQO<<Hs<<HsOOQ(CYAN?_AN?_OOQOAN?WAN?WO$6nQ(CjOAN?WOOQOAN>zAN>zO%QQUOAN?WOOQO<<Mo<<MoOOQQG26}G26}O!%tQ,UOG26}O#![QSOG26}O&3pQSOG26}O$MUQbOG26}O&3xQ$IUO<<JaO&4VQ$IUO1G2XO&5{Q$IUO1G2kO&8OQ$IUO1G2mO&:RQ$IUO<<KRO&:`Q$IUO<<ItOOQO1G1r1G1rO!'^Q,UOANAaOOQO7+*X7+*XO&:mQSO7+*XO&:xQSO<= XO&;QQ`O7+*ZOOQ(CW<<Kj<<KjO$ mQSO<<KjOOQ(CW<<Ki<<KiO&;[Q`O<<KjO$ mQSO<<KiOOQO7+*d7+*dO9_QSO7+*dO&;cQSO<= aOOQQG27iG27iO9OQ(C[OG27iO!)jQUO1G4tO&;kQSO7++rO%JOQSOANAwOOQQANAwANAwO!%tQ,UOANAwO&;sQSOANAwOOQQANAyANAyO9OQ(C[OANAyO#K`QSOANAyOOQO'#HU'#HUOOQO7+*c7+*cOOQQG22tG22tOOQQANBRANBRO&;{QSOANBROOQQAND|AND|OOQQAND}AND}OOQQ<<L|<<L|O!)jQUOAN?eOOQOG24rG24rO$6nQ(CjOG24rO#![QSOLD,iOOQQLD,iLD,iO!%tQ,UOLD,iO&<QQSOLD,iO&<YQ$IUO7+'sO&>OQ$IUO7+'uO&?tQ,UOG26{OOQO<<Ms<<MsOOQ(CWANAUANAUO$ mQSOANAUOOQ(CWANATANATOOQO<<NO<<NOOOQQLD-TLD-TO&@UQ$IUO7+*`OOQQG27cG27cO%JOQSOG27cO!%tQ,UOG27cOOQQG27eG27eO9OQ(C[OG27eOOQQG27mG27mO&@`Q$IUOG25POOQOLD*^LD*^OOQQ!$(!T!$(!TO#![QSO!$(!TO!%tQ,UO!$(!TO&@jQ(CjOG26{OOQ(CWG26pG26pOOQQLD,}LD,}O%JOQSOLD,}OOQQLD-PLD-POOQQ!)9Eo!)9EoO#![QSO!)9EoOOQQ!$(!i!$(!iOOQQ!.K;Z!.K;ZO&B{Q$IUOG26{O!)jQUO'#DvO0uQSO'#ETO&DqQbO'#JcO!)jQUO'#DnO&DxQUO'#DzO!)jQUO'#D|O&EPQbO'#CfO&GgQbO'#CfO&GwQUO,5;SO!)jQUO,5;^O!)jQUO,5;^O!)jQUO,5;^O!)jQUO,5;^O!)jQUO,5;^O!)jQUO,5;^O!)jQUO,5;^O!)jQUO,5;^O!)jQUO,5;^O!)jQUO,5;^O!)jQUO,5;^O!)jQUO'#IfO&IzQSO,5<cO&JSQ,UO,5;^O&KgQ,UO,5;^O!)jQUO,5;rO0xQSO'#DSO0xQSO'#DSO!%tQ,UO'#FxO&JSQ,UO'#FxO!%tQ,UO'#FzO&JSQ,UO'#FzO!%tQ,UO'#GYO&JSQ,UO'#GYO!)jQUO,5:fO!)jQUO,5@_O&GwQUO1G0nO&KnQ$IUO'#CfO!)jQUO1G1zO!%tQ,UO,5=PO&JSQ,UO,5=PO!%tQ,UO,5=RO&JSQ,UO,5=RO!%tQ,UO,5<mO&JSQ,UO,5<mO&GwQUO1G1{O!)jQUO7+&uO!%tQ,UO1G2XO&JSQ,UO1G2XO!%tQ,UO1G2ZO&JSQ,UO1G2ZO&GwQUO7+'gO&GwQUO7+&YO!%tQ,UOANAaO&JSQ,UOANAaO&KxQSO'#EhO&K}QSO'#EhO&LVQSO'#FWO&L[QSO'#ErO&LaQSO'#JsO&LlQSO'#JqO&LwQSO,5;SO&L|Q,UO,5<`O&MTQSO'#GRO&MYQSO'#GRO&M_QSO,5<aO&MgQSO,5;SO&MoQ$IUO1G1ZO&MvQSO,5<mO&M{QSO,5<mO&NQQSO,5<oO&NVQSO,5<oO&N[QSO1G1{O&NaQSO1G0nO&NfQ,UO<<KuO&NmQ,UO<<KuO7^Q,UO'#FvO8tQSO'#FuO@mQSO'#EgO!)jQUO,5;oO!2dQSO'#GRO!2dQSO'#GRO!2dQSO'#GTO!2dQSO'#GTO!'^Q,UO7+(ZO!'^Q,UO7+(ZO$HyQ`O1G2oO$HyQ`O1G2oO!%tQ,UO,5=TO!%tQ,UO,5=T",
     stateData: "' v~O'mOS'nOSROS'oRQ~OPYOQYOV!TO^pOaxObwOikOkYOlkOmkOskOuYOwYO|WO!QkO!RkO!XXO!csO!hZO!kYO!lYO!mYO!otO!quO!tvO!x]O#p}O$QzO$UfO%`{O%b!OO%d|O%e|O%h!PO%j!QO%m!RO%n!RO%p!SO%|!UO&S!VO&U!WO&W!XO&Y!YO&]!ZO&c![O&i!]O&k!^O&m!_O&o!`O&q!aO'tSO'vTO'yUO(RVO(a[O(niO~OPYOQYOa!gOb!fOikOkYOlkOmkOskOuYOwYO|WO!QkO!RkO!X!cO!csO!hZO!kYO!lYO!mYO!otO!quO!t!eO$Q!hO$UfO't!bO'vTO'yUO(RVO(a[O(niO~O^!sOl!kO|!lO![!uO!]!rO!^!rO!x9mO!|!mO!}!mO#O!tO#P!mO#Q!mO#T!vO#U!vO'u!iO'vTO'yUO(U!jO(a!pO~O'o!wO~OPYXXYX^YXkYXyYXzYX|YX!VYX!eYX!fYX!hYX!lYX#XYX#dcX#gYX#hYX#iYX#jYX#kYX#lYX#mYX#nYX#oYX#qYX#sYX#uYX#vYX#{YX'kYX(RYX(bYX(iYX(jYX~O!a$zX~P(gO[!yO'v!{O'w!yO'x!{O~O[!|O'x!{O'y!{O'z!|O~Oq#OO!O#PO(S#PO(T#RO~OPYOQYOa!gOb!fOikOkYOlkOmkOskOuYOwYO|WO!QkO!RkO!X!cO!csO!hZO!kYO!lYO!mYO!otO!quO!t!eO$Q!hO$UfO't9rO'vTO'yUO(RVO(a[O(niO~O!U#VO!V#SO!S(XP!S(fP~P+sO!W#_O~P`OPYOQYOa!gOb!fOkYOlkOmkOskOuYOwYO|WO!QkO!RkO!X!cO!csO!hZO!kYO!lYO!mYO!otO!quO!t!eO$Q!hO$UfO'vTO'yUO(RVO(a[O(niO~Oi#iO!U#eO!x]O#b#hO#c#eO't9sO!g(cP~P._O!h#kO't#jO~O!t#oO!x]O%`#pO~O#d#qO~O!a#rO#d#qO~OP$YOX$aOk#}Oy#vOz#wO|#xO!V$^O!e$PO!f#tO!h#uO!l$YO#g#{O#h#|O#i#|O#j#|O#k$OO#l$PO#m$PO#n$`O#o$PO#q$QO#s$SO#u$UO#v$VO(RVO(b$WO(i#yO(j#zO~O^(VX'k(VX'i(VX!g(VX!S(VX!X(VX%a(VX!a(VX~P1gO#X$bO#{$bOP(WXX(WXk(WXy(WXz(WX|(WX!V(WX!e(WX!h(WX!l(WX#g(WX#h(WX#i(WX#j(WX#k(WX#l(WX#m(WX#n(WX#o(WX#q(WX#s(WX#u(WX#v(WX(R(WX(b(WX(i(WX(j(WX!X(WX%a(WX~O^(WX!f(WX'k(WX'i(WX!S(WX!g(WXo(WX!a(WX~P3}O#X$bO~O$W$dO$Y$cO$a$iO~O!X$jO$UfO$d$kO$f$mO~Oi%POk$qOl$pOm$pOs%QOu%ROw%SO|$xO!X$yO!c%XO!h$uO#c%YO$Q%VO$m%TO$o%UO$r%WO't$oO'vTO'yUO'}%OO(R$rOd(OP~O!h%ZO~O!a%]O~O^%^O'k%^O~O'u!iO~P%QO't%eO~O!h%ZO't%eO'u!iO'}%OO~Ob%lO!h%ZO't%eO~O#o$PO~Oy%qO!X%nO!h%pO%b%tO't%eO'u!iO'vTO'yUO](vP~O!t#oO~O|%vO!X%wO't%eO~O|%vO!X%wO%j%{O't%eO~O't%|O~O#p}O%b!OO%d|O%e|O%h!PO%j!QO%m!RO%n!RO~Oa&VOb&UO!t&SO%`&TO%r&RO~P;fOa&YObwO!X&XO!tvO!x]O#p}O%`{O%d|O%e|O%h!PO%j!QO%m!RO%n!RO%p!SO~O_&]O#X&`O%b&ZO'u!iO~P<eO!h&aO!q&eO~O!h#kO~O!XXO~O^%^O'j&mO'k%^O~O^%^O'j&pO'k%^O~O^%^O'j&rO'k%^O~O'iYX!SYXoYX!gYX&QYX!XYX%aYX!aYX~P(gO!['PO!]&xO!^&xO'u!iO'vTO'yUO~Ol&vO|&uO!U&yO(U&tO!W(YP!W(hP~P?fOg'SO!X'QO't%eO~Ob'XO!h%ZO't%eO~Oy%qO!h%pO~Ol!kO|!lO!x9mO!|!mO!}!mO#P!mO#Q!mO'u!iO'vTO'yUO(U!jO(a!pO~O!['_O!]'^O!^'^O#O!mO#T'`O#U'`O~PAQO^%^O!a#rO!h%ZO'k%^O'}%OO(b'bO~O!l'fO#X'dO~PB`Ol!kO|!lO'vTO'yUO(U!jO(a!pO~O!XXOl(_X|(_X![(_X!](_X!^(_X!x(_X!|(_X!}(_X#O(_X#P(_X#Q(_X#T(_X#U(_X'u(_X'v(_X'y(_X(U(_X(a(_X~O!]'^O!^'^O'u!iO~PCOO'p'jO'q'jO'r'lO~O[!yO'v'nO'w!yO'x'nO~O[!|O'x'nO'y'nO'z!|O~Oq#OO!O#PO(S#PO(T'rO~O!U'tO!S&|X!S'SX!V&|X!V'SX~P+sO!V'vO!S(XX~OP$YOX$aOk#}Oy#vOz#wO|#xO!V'vO!e$PO!f#tO!h#uO!l$YO#g#{O#h#|O#i#|O#j#|O#k$OO#l$PO#m$PO#n$`O#o$PO#q$QO#s$SO#u$UO#v$VO(RVO(b$WO(i#yO(j#zO~O!S(XX~PFrO!S'{O~O!S(eX!V(eX!a(eX!g(eX(b(eX~O#X(eX#d#]X!W(eX~PHxO#X'|O!S(gX!V(gX~O!V'}O!S(fX~O!S(QO~O#X$bO~PHxO!W(RO~P`Oy#vOz#wO|#xO!f#tO!h#uO(RVOP!jaX!jak!ja!V!ja!e!ja!l!ja#g!ja#h!ja#i!ja#j!ja#k!ja#l!ja#m!ja#n!ja#o!ja#q!ja#s!ja#u!ja#v!ja(b!ja(i!ja(j!ja~O^!ja'k!ja'i!ja!S!ja!g!jao!ja!X!ja%a!ja!a!ja~PJ`O!g(SO~O!a#rO#X(TO(b'bO!V(dX^(dX'k(dX~O!g(dX~PMOO|%vO!X%wO!x]O#b(YO#c(XO't%eO~O!V(ZO!g(cX~O!g(]O~O|%vO!X%wO#c(XO't%eO~OP(WXX(WXk(WXy(WXz(WX|(WX!V(WX!e(WX!f(WX!h(WX!l(WX#g(WX#h(WX#i(WX#j(WX#k(WX#l(WX#m(WX#n(WX#o(WX#q(WX#s(WX#u(WX#v(WX(R(WX(b(WX(i(WX(j(WX~O!a#rO!g(WX~PNlOy(^Oz(_O!f#tO!h#uO!x!wa|!wa~O!t!wa%`!wa!X!wa#b!wa#c!wa't!wa~P!!pO!t(cO~OPYOQYOa!gOb!fOikOkYOlkOmkOskOuYOwYO|WO!QkO!RkO!XXO!csO!hZO!kYO!lYO!mYO!otO!quO!t!eO$Q!hO$UfO't!bO'vTO'yUO(RVO(a[O(niO~Oi%POk$qOl$pOm$pOs%QOu%ROw:VO|$xO!X$yO!c;aO!h$uO#c:]O$Q%VO$m:XO$o:ZO$r%WO't(gO'vTO'yUO'}%OO(R$rO~O#d(iO~Oi%POk$qOl$pOm$pOs%QOu%ROw%SO|$xO!X$yO!c%XO!h$uO#c%YO$Q%VO$m%TO$o%UO$r%WO't(gO'vTO'yUO'}%OO(R$rO~Od([P~P!'^O!U(mO!g(]P~P%QO(U(oO(a[O~O|(qO!h#uO(U(oO(a[O~OP9lOQ9lOa;]Ob!fOikOk9lOlkOmkOskOu9lOw9lO|WO!QkO!RkO!X!cO!c9oO!hZO!k9lO!l9lO!m9lO!o9pO!q9qO!t!eO$Q!hO$UfO't)PO'vTO'yUO(RVO(a[O(n;ZO~Oz)SO!h#uO~O!V$^O^$ka'k$ka'i$ka!g$ka!S$ka!X$ka%a$ka!a$ka~O#p)WO~P!%tOy)ZO!a)YO!X$XX$T$XX$W$XX$Y$XX$a$XX~O!a)YO!X(kX$T(kX$W(kX$Y(kX$a(kX~Oy)ZO~P!-SOy)ZO!X(kX$T(kX$W(kX$Y(kX$a(kX~O!X)]O$T)aO$W)[O$Y)[O$a)bO~O!U)eO~P!)jO$W$dO$Y$cO$a)iO~Og$sXy$sX|$sX!f$sX(i$sX(j$sX~OdfXd$sXgfX!VfX#XfX~P!.xOl)kO~Oq)lO(S)mO(T)oO~Og)xOy)qO|)rO(i)tO(j)vO~Od)pO~P!0ROd)yO~Oi%POk$qOl$pOm$pOs%QOu%ROw:VO|$xO!X$yO!c;aO!h$uO#c:]O$Q%VO$m:XO$o:ZO$r%WO'vTO'yUO'}%OO(R$rO~O!U)}O't)zO!g(oP~P!0pO#d*PO~O!h*QO~O!U*VO't*SO!S(pP~P!0pOk*cO|*ZO![*aO!]*YO!^*YO!h*QO#T*bO%W*]O'u!iO(U!jO~O!W*`O~P!2vO!f#tOg(QXy(QX|(QX(i(QX(j(QX!V(QX#X(QX~Od(QX#y(QX~P!3oOg*fO#X*eOd(PX!V(PX~O!V*gOd(OX~O't%|Od(OP~O!h*nO~O't(gO~Oi*rO|%vO!U#eO!X%wO!x]O#b#hO#c#eO't%eO!g(cP~O!a#rO#d*sO~OP$YOX$aOk#}Oy#vOz#wO|#xO!e$PO!f#tO!h#uO!l$YO#g#{O#h#|O#i#|O#j#|O#k$OO#l$PO#m$PO#n$`O#o$PO#q$QO#s$SO#u$UO#v$VO(RVO(b$WO(i#yO(j#zO~O^!ba!V!ba'k!ba'i!ba!S!ba!g!bao!ba!X!ba%a!ba!a!ba~P!6UOy#vOz#wO|#xO!f#tO!h#uO(RVOP!naX!nak!na!V!na!e!na!l!na#g!na#h!na#i!na#j!na#k!na#l!na#m!na#n!na#o!na#q!na#s!na#u!na#v!na(b!na(i!na(j!na~O^!na'k!na'i!na!S!na!g!nao!na!X!na%a!na!a!na~P!8oOy#vOz#wO|#xO!f#tO!h#uO(RVOP!paX!pak!pa!V!pa!e!pa!l!pa#g!pa#h!pa#i!pa#j!pa#k!pa#l!pa#m!pa#n!pa#o!pa#q!pa#s!pa#u!pa#v!pa(b!pa(i!pa(j!pa~O^!pa'k!pa'i!pa!S!pa!g!pao!pa!X!pa%a!pa!a!pa~P!;YOg*{O!X'QO%a*zO'}%OO~O!a*}O^'|X!X'|X'k'|X!V'|X~O^%^O!XXO'k%^O~O!h%ZO'}%OO~O!h%ZO't%eO'}%OO~O!a#rO#d(iO~O%b+ZO't+VO'vTO'yUO!W(wP~O!V+[O](vX~O(U(oO~OX+`O~O]+aO~O!X%nO't%eO'u!iO](vP~O|%vO!U+eO!V'}O!X%wO't%eO!S(fP~Ol&|O|+gO!U+fO'vTO'yUO(U(oO~O!W(hP~P!@xO!V+hO^(sX'k(sX~O#X+lO'}%OO~Og+oO!X$yO'}%OO~O!X+qO~Oy+sO!XXO~O!t+xO~Ob+}O~O't#jO!W(uP~Ob%lO~O%b!OO't%|O~P<eOX,TO],SO~OPYOQYOaxObwOikOkYOlkOmkOskOuYOwYO|WO!QkO!RkO!csO!hZO!kYO!lYO!mYO!otO!quO!tvO!x]O$UfO%`{O'vTO'yUO(RVO(a[O(niO~O!X!cO$Q!hO't!bO~P!C]O],SO^%^O'k%^O~O^,XO#p,ZO%d,ZO%e,ZO~P%QO!h&aO~O&S,`O~O!X,bO~O&e,dO&g,eOP&baQ&baV&ba^&baa&bab&bai&bak&bal&bam&bas&bau&baw&ba|&ba!Q&ba!R&ba!X&ba!c&ba!h&ba!k&ba!l&ba!m&ba!o&ba!q&ba!t&ba!x&ba#p&ba$Q&ba$U&ba%`&ba%b&ba%d&ba%e&ba%h&ba%j&ba%m&ba%n&ba%p&ba%|&ba&S&ba&U&ba&W&ba&Y&ba&]&ba&c&ba&i&ba&k&ba&m&ba&o&ba&q&ba'i&ba't&ba'v&ba'y&ba(R&ba(a&ba(n&ba!W&ba&Z&ba_&ba&`&ba~O't,jO~O!V{X!V!_X!W{X!W!_X!a{X!a!_X!h!_X#X{X'}!_X~O!a,oO#X,nO!V#aX!V(ZX!W#aX!W(ZX!a(ZX!h(ZX'}(ZX~O!a,qO!h%ZO'}%OO!V!ZX!W!ZX~Ol!kO|!lO'vTO'yUO(U!jO~OP9lOQ9lOa;]Ob!fOikOk9lOlkOmkOskOu9lOw9lO|WO!QkO!RkO!X!cO!c9oO!hZO!k9lO!l9lO!m9lO!o9pO!q9qO!t!eO$Q!hO$UfO'vTO'yUO(RVO(a[O(n;ZO~O't:bO~P!LrO!V,uO!W(YX~O!W,wO~O!a,oO#X,nO!V#aX!W#aX~O!V,xO!W(hX~O!W,zO~O!],{O!^,{O'u!iO~P!LaO!W-OO~P'TOg-RO!X'QO~O!S-WO~Ol!wa![!wa!]!wa!^!wa!|!wa!}!wa#O!wa#P!wa#Q!wa#T!wa#U!wa'u!wa'v!wa'y!wa(U!wa(a!wa~P!!pO!l-]O#X-ZO~PB`O!]-_O!^-_O'u!iO~PCOO^%^O#X-ZO'k%^O~O^%^O!a#rO#X-ZO'k%^O~O^%^O!a#rO!l-]O#X-ZO'k%^O(b'bO~O'p'jO'q'jO'r-dO~Oo-eO~O!S&|a!V&|a~P!6UO!U-iO!S&|X!V&|X~P%QO!V'vO!S(Xa~O!S(Xa~PFrO!V'}O!S(fa~O|%vO!U-mO!X%wO't%eO!S'SX!V'SX~O#X-oO!V(da!g(da^(da'k(da~O!a#rO~P#&xO!V(ZO!g(ca~O|%vO!X%wO#c-sO't%eO~Oi-xO|%vO!U-uO!X%wO!x]O#b-wO#c-uO't%eO!V'VX!g'VX~Oz-|O!h#uO~Og.PO!X'QO%a.OO'}%OO~O^#[i!V#[i'k#[i'i#[i!S#[i!g#[io#[i!X#[i%a#[i!a#[i~P!6UOg;gOy)qO|)rO(i)tO(j)vO~O#d#Wa^#Wa#X#Wa'k#Wa!V#Wa!g#Wa!X#Wa!S#Wa~P#)tO#d(QXP(QXX(QX^(QXk(QXz(QX!e(QX!h(QX!l(QX#g(QX#h(QX#i(QX#j(QX#k(QX#l(QX#m(QX#n(QX#o(QX#q(QX#s(QX#u(QX#v(QX'k(QX(R(QX(b(QX!g(QX!S(QX'i(QXo(QX!X(QX%a(QX!a(QX~P!3oO!V.YOd([X~P!0ROd.[O~O!V.]O!g(]X~P!6UO!g.`O~O!S.bO~OP$YOy#vOz#wO|#xO!f#tO!h#uO!l$YO(RVOX#fi^#fik#fi!V#fi!e#fi#h#fi#i#fi#j#fi#k#fi#l#fi#m#fi#n#fi#o#fi#q#fi#s#fi#u#fi#v#fi'k#fi(b#fi(i#fi(j#fi'i#fi!S#fi!g#fio#fi!X#fi%a#fi!a#fi~O#g#fi~P#-pO#g#{O~P#-pOP$YOy#vOz#wO|#xO!f#tO!h#uO!l$YO#g#{O#h#|O#i#|O#j#|O(RVOX#fi^#fi!V#fi!e#fi#k#fi#l#fi#m#fi#n#fi#o#fi#q#fi#s#fi#u#fi#v#fi'k#fi(b#fi(i#fi(j#fi'i#fi!S#fi!g#fio#fi!X#fi%a#fi!a#fi~Ok#fi~P#0bOk#}O~P#0bOP$YOk#}Oy#vOz#wO|#xO!f#tO!h#uO!l$YO#g#{O#h#|O#i#|O#j#|O#k$OO(RVO^#fi!V#fi#q#fi#s#fi#u#fi#v#fi'k#fi(b#fi(i#fi(j#fi'i#fi!S#fi!g#fio#fi!X#fi%a#fi!a#fi~OX#fi!e#fi#l#fi#m#fi#n#fi#o#fi~P#3SOX$aO!e$PO#l$PO#m$PO#n$`O#o$PO~P#3SOP$YOX$aOk#}Oy#vOz#wO|#xO!e$PO!f#tO!h#uO!l$YO#g#{O#h#|O#i#|O#j#|O#k$OO#l$PO#m$PO#n$`O#o$PO#q$QO(RVO^#fi!V#fi#s#fi#u#fi#v#fi'k#fi(b#fi(j#fi'i#fi!S#fi!g#fio#fi!X#fi%a#fi!a#fi~O(i#fi~P#6TO(i#yO~P#6TOP$YOX$aOk#}Oy#vOz#wO|#xO!e$PO!f#tO!h#uO!l$YO#g#{O#h#|O#i#|O#j#|O#k$OO#l$PO#m$PO#n$`O#o$PO#q$QO#s$SO(RVO(i#yO^#fi!V#fi#u#fi#v#fi'k#fi(b#fi'i#fi!S#fi!g#fio#fi!X#fi%a#fi!a#fi~O(j#fi~P#8uO(j#zO~P#8uOP$YOX$aOk#}Oy#vOz#wO|#xO!e$PO!f#tO!h#uO!l$YO#g#{O#h#|O#i#|O#j#|O#k$OO#l$PO#m$PO#n$`O#o$PO#q$QO#s$SO#u$UO(RVO(i#yO(j#zO~O^#fi!V#fi#v#fi'k#fi(b#fi'i#fi!S#fi!g#fio#fi!X#fi%a#fi!a#fi~P#;gOPYXXYXkYXyYXzYX|YX!eYX!fYX!hYX!lYX#XYX#dcX#gYX#hYX#iYX#jYX#kYX#lYX#mYX#nYX#oYX#qYX#sYX#uYX#vYX#{YX(RYX(bYX(iYX(jYX!VYX!WYX~O#yYX~P#>QOP$YOX:TOk9wOy#vOz#wO|#xO!e9yO!f#tO!h#uO!l$YO#g9uO#h9vO#i9vO#j9vO#k9xO#l9yO#m9yO#n:SO#o9yO#q9zO#s9|O#u:OO#v:PO(RVO(b$WO(i#yO(j#zO~O#y.dO~P#@_O#X:UO#{:UO#y(WX!W(WX~PNlO^'Ya!V'Ya'k'Ya'i'Ya!g'Ya!S'Yao'Ya!X'Ya%a'Ya!a'Ya~P!6UOP#fiX#fi^#fik#fiz#fi!V#fi!e#fi!f#fi!h#fi!l#fi#g#fi#h#fi#i#fi#j#fi#k#fi#l#fi#m#fi#n#fi#o#fi#q#fi#s#fi#u#fi#v#fi'k#fi(R#fi(b#fi'i#fi!S#fi!g#fio#fi!X#fi%a#fi!a#fi~P#)tO^#zi!V#zi'k#zi'i#zi!S#zi!g#zio#zi!X#zi%a#zi!a#zi~P!6UO$W.iO$Y.iO~O$W.jO$Y.jO~O!a)YO#X.kO!X$^X$T$^X$W$^X$Y$^X$a$^X~O!U.lO~O!X)]O$T.nO$W)[O$Y)[O$a.oO~O!V:QO!W(VX~P#@_O!W.pO~O!a)YO$a(kX~O$a.rO~Oq)lO(S)mO(T.uO~Ol.xO!S.yO'vTO'yUO~O!VcX!acX!gcX!g$sX(bcX~P!.xO!g/PO~P#)tO!V/QO!a#rO(b'bO!g(oX~O!g/VO~O!U)}O't%eO!g(oP~O#d/XO~O!S$sX!V$sX!a$zX~P!.xO!V/YO!S(pX~P#)tO!a/[O~O!S/^O~Ok/bO!a#rO!h%ZO'}%OO(b'bO~O't/dO~O!a*}O~O^%^O!V/hO'k%^O~O!W/jO~P!2vO!]/kO!^/kO'u!iO(U!jO~O|/mO(U!jO~O#T/nO~O't%|Od'_X!V'_X~O!V*gOd(Oa~Od/sO~Oy/tOz/tO|/uOgva(iva(jva!Vva#Xva~Odva#yva~P#L|Oy)qO|)rOg$la(i$la(j$la!V$la#X$la~Od$la#y$la~P#MrOy)qO|)rOg$na(i$na(j$na!V$na#X$na~Od$na#y$na~P#NeO#d/wO~Od$|a!V$|a#X$|a#y$|a~P!0RO!a#rO~O#d/zO~Oy#vOz#wO|#xO!f#tO!h#uO(RVOP!niX!nik!ni!V!ni!e!ni!l!ni#g!ni#h!ni#i!ni#j!ni#k!ni#l!ni#m!ni#n!ni#o!ni#q!ni#s!ni#u!ni#v!ni(b!ni(i!ni(j!ni~O^!ni'k!ni'i!ni!S!ni!g!nio!ni!X!ni%a!ni!a!ni~P$ wOg.PO!X'QO%a.OO~Oi0RO't0QO~P!0sO!a*}O^'|a!X'|a'k'|a!V'|a~O#d0XO~OXYX!VcX!WcX~O!V0YO!W(wX~O!W0[O~OX0]O~O't+VO'vTO'yUO~O!X%nO't%eO]'gX!V'gX~O!V+[O](va~O!g0bO~P!6UOX0eO~O]0fO~O!V+hO^(sa'k(sa~O#X0lO~Og0oO!X$yO~O(U(oO!W(tP~Og0xO!X0uO%a0wO'}%OO~OX1SO!V1QO!W(uX~O!W1TO~O]1VO^%^O'k%^O~O't#jO'vTO'yUO~O#X$bO#{$bOP(WXX(WXk(WXy(WXz(WX|(WX!V(WX!e(WX!h(WX!l(WX#g(WX#h(WX#i(WX#j(WX#k(WX#l(WX#m(WX#n(WX#q(WX#s(WX#u(WX#v(WX(R(WX(b(WX(i(WX(j(WX~O#o1YO&Q1ZO^(WX!f(WX~P$(xO#X$bO#o1YO&Q1ZO~O^1[O~P%QO^1^O~O&Z1bOP&XiQ&XiV&Xi^&Xia&Xib&Xii&Xik&Xil&Xim&Xis&Xiu&Xiw&Xi|&Xi!Q&Xi!R&Xi!X&Xi!c&Xi!h&Xi!k&Xi!l&Xi!m&Xi!o&Xi!q&Xi!t&Xi!x&Xi#p&Xi$Q&Xi$U&Xi%`&Xi%b&Xi%d&Xi%e&Xi%h&Xi%j&Xi%m&Xi%n&Xi%p&Xi%|&Xi&S&Xi&U&Xi&W&Xi&Y&Xi&]&Xi&c&Xi&i&Xi&k&Xi&m&Xi&o&Xi&q&Xi'i&Xi't&Xi'v&Xi'y&Xi(R&Xi(a&Xi(n&Xi!W&Xi_&Xi&`&Xi~O_1hO!W1fO&`1gO~P`O!XXO!h1jO~O&g,eOP&biQ&biV&bi^&bia&bib&bii&bik&bil&bim&bis&biu&biw&bi|&bi!Q&bi!R&bi!X&bi!c&bi!h&bi!k&bi!l&bi!m&bi!o&bi!q&bi!t&bi!x&bi#p&bi$Q&bi$U&bi%`&bi%b&bi%d&bi%e&bi%h&bi%j&bi%m&bi%n&bi%p&bi%|&bi&S&bi&U&bi&W&bi&Y&bi&]&bi&c&bi&i&bi&k&bi&m&bi&o&bi&q&bi'i&bi't&bi'v&bi'y&bi(R&bi(a&bi(n&bi!W&bi&Z&bi_&bi&`&bi~O!S1pO~O!V!Za!W!Za~P#@_Ol!kO|!lO!U1vO(U!jO!V&}X!W&}X~P?fO!V,uO!W(Ya~O!V'TX!W'TX~P!@xO!V,xO!W(ha~O!W1}O~P'TO^%^O#X2WO'k%^O~O^%^O!a#rO#X2WO'k%^O~O^%^O!a#rO!l2[O#X2WO'k%^O(b'bO~O^%^O'k%^O~P!6UO!V$^Oo$ka~O!S&|i!V&|i~P!6UO!V'vO!S(Xi~O!V'}O!S(fi~O!S(gi!V(gi~P!6UO!V(di!g(di^(di'k(di~P!6UO#X2^O!V(di!g(di^(di'k(di~O!V(ZO!g(ci~O|%vO!X%wO!x]O#b2cO#c2bO't%eO~O|%vO!X%wO#c2bO't%eO~Og2jO!X'QO%a2iO~Og2jO!X'QO%a2iO'}%OO~O#dvaPvaXva^vakva!eva!fva!hva!lva#gva#hva#iva#jva#kva#lva#mva#nva#ova#qva#sva#uva#vva'kva(Rva(bva!gva!Sva'ivaova!Xva%ava!ava~P#L|O#d$laP$laX$la^$lak$laz$la!e$la!f$la!h$la!l$la#g$la#h$la#i$la#j$la#k$la#l$la#m$la#n$la#o$la#q$la#s$la#u$la#v$la'k$la(R$la(b$la!g$la!S$la'i$lao$la!X$la%a$la!a$la~P#MrO#d$naP$naX$na^$nak$naz$na!e$na!f$na!h$na!l$na#g$na#h$na#i$na#j$na#k$na#l$na#m$na#n$na#o$na#q$na#s$na#u$na#v$na'k$na(R$na(b$na!g$na!S$na'i$nao$na!X$na%a$na!a$na~P#NeO#d$|aP$|aX$|a^$|ak$|az$|a!V$|a!e$|a!f$|a!h$|a!l$|a#g$|a#h$|a#i$|a#j$|a#k$|a#l$|a#m$|a#n$|a#o$|a#q$|a#s$|a#u$|a#v$|a'k$|a(R$|a(b$|a!g$|a!S$|a'i$|a#X$|ao$|a!X$|a%a$|a!a$|a~P#)tO^#[q!V#[q'k#[q'i#[q!S#[q!g#[qo#[q!X#[q%a#[q!a#[q~P!6UOd'OX!V'OX~P!'^O!V.YOd([a~O!U2rO!V'PX!g'PX~P%QO!V.]O!g(]a~O!V.]O!g(]a~P!6UO!S2uO~O#y!ja!W!ja~PJ`O#y!ba!V!ba!W!ba~P#@_O#y!na!W!na~P!8oO#y!pa!W!pa~P!;YO!X3XO$UfO$_3YO~O!W3^O~Oo3_O~P#)tO^$hq!V$hq'k$hq'i$hq!S$hq!g$hqo$hq!X$hq%a$hq!a$hq~P!6UO!S3`O~Ol.xO'vTO'yUO~Oy)qO|)rO(j)vOg%Xi(i%Xi!V%Xi#X%Xi~Od%Xi#y%Xi~P$GeOy)qO|)rOg%Zi(i%Zi(j%Zi!V%Zi#X%Zi~Od%Zi#y%Zi~P$HWO(b$WO~P#)tO!U3cO't%eO!V'ZX!g'ZX~O!V/QO!g(oa~O!V/QO!a#rO!g(oa~O!V/QO!a#rO(b'bO!g(oa~Od$ui!V$ui#X$ui#y$ui~P!0RO!U3kO't*SO!S']X!V']X~P!0pO!V/YO!S(pa~O!V/YO!S(pa~P#)tO!a#rO#o3sO~Ok3vO!a#rO(b'bO~Od(Pi!V(Pi~P!0RO#X3yOd(Pi!V(Pi~P!0RO!g3|O~O^$iq!V$iq'k$iq'i$iq!S$iq!g$iqo$iq!X$iq%a$iq!a$iq~P!6UO!V4QO!X(qX~P#)tO!f#tO~P3}O^$sX!X$sX%UYX'k$sX!V$sX~P!.xO%U4SO^hXghXyhX|hX!XhX'khX(ihX(jhX!VhX~O%U4SO~O%b4ZO't+VO'vTO'yUO!V'fX!W'fX~O!V0YO!W(wa~OX4_O~O]4`O~O!S4dO~O^%^O'k%^O~P#)tO!X$yO~P#)tO!V4iO#X4kO!W(tX~O!W4lO~Ol!kO|4mO![!uO!]!rO!^!rO!x9mO!|!mO!}!mO#O!mO#P!mO#Q!mO#T4rO#U!vO'u!iO'vTO'yUO(U!jO(a!pO~O!W4qO~P%!VOg4wO!X0uO%a4vO~Og4wO!X0uO%a4vO'}%OO~O't#jO!V'eX!W'eX~O!V1QO!W(ua~O'vTO'yUO(U5QO~O]5UO~O!g5XO~P%QO^5ZO~O^5ZO~P%QO#o5]O&Q5^O~PMOO_1hO!W5bO&`1gO~P`O!a5dO~O!a5fO!V(Zi!W(Zi!a(Zi!h(Zi'}(Zi~O!V#ai!W#ai~P#@_O#X5gO!V#ai!W#ai~O!V!Zi!W!Zi~P#@_O^%^O#X5pO'k%^O~O^%^O!a#rO#X5pO'k%^O~O!V(dq!g(dq^(dq'k(dq~P!6UO!V(ZO!g(cq~O|%vO!X%wO#c5wO't%eO~O!X'QO%a5zO~Og5}O!X'QO%a5zO~O#d%XiP%XiX%Xi^%Xik%Xiz%Xi!e%Xi!f%Xi!h%Xi!l%Xi#g%Xi#h%Xi#i%Xi#j%Xi#k%Xi#l%Xi#m%Xi#n%Xi#o%Xi#q%Xi#s%Xi#u%Xi#v%Xi'k%Xi(R%Xi(b%Xi!g%Xi!S%Xi'i%Xio%Xi!X%Xi%a%Xi!a%Xi~P$GeO#d%ZiP%ZiX%Zi^%Zik%Ziz%Zi!e%Zi!f%Zi!h%Zi!l%Zi#g%Zi#h%Zi#i%Zi#j%Zi#k%Zi#l%Zi#m%Zi#n%Zi#o%Zi#q%Zi#s%Zi#u%Zi#v%Zi'k%Zi(R%Zi(b%Zi!g%Zi!S%Zi'i%Zio%Zi!X%Zi%a%Zi!a%Zi~P$HWO#d$uiP$uiX$ui^$uik$uiz$ui!V$ui!e$ui!f$ui!h$ui!l$ui#g$ui#h$ui#i$ui#j$ui#k$ui#l$ui#m$ui#n$ui#o$ui#q$ui#s$ui#u$ui#v$ui'k$ui(R$ui(b$ui!g$ui!S$ui'i$ui#X$uio$ui!X$ui%a$ui!a$ui~P#)tOd'Oa!V'Oa~P!0RO!V'Pa!g'Pa~P!6UO!V.]O!g(]i~O#y#[i!V#[i!W#[i~P#@_OP$YOy#vOz#wO|#xO!f#tO!h#uO!l$YO(RVOX#fik#fi!e#fi#h#fi#i#fi#j#fi#k#fi#l#fi#m#fi#n#fi#o#fi#q#fi#s#fi#u#fi#v#fi#y#fi(b#fi(i#fi(j#fi!V#fi!W#fi~O#g#fi~P%0fO#g9uO~P%0fOP$YOy#vOz#wO|#xO!f#tO!h#uO!l$YO#g9uO#h9vO#i9vO#j9vO(RVOX#fi!e#fi#k#fi#l#fi#m#fi#n#fi#o#fi#q#fi#s#fi#u#fi#v#fi#y#fi(b#fi(i#fi(j#fi!V#fi!W#fi~Ok#fi~P%2qOk9wO~P%2qOP$YOk9wOy#vOz#wO|#xO!f#tO!h#uO!l$YO#g9uO#h9vO#i9vO#j9vO#k9xO(RVO#q#fi#s#fi#u#fi#v#fi#y#fi(b#fi(i#fi(j#fi!V#fi!W#fi~OX#fi!e#fi#l#fi#m#fi#n#fi#o#fi~P%4|OX:TO!e9yO#l9yO#m9yO#n:SO#o9yO~P%4|OP$YOX:TOk9wOy#vOz#wO|#xO!e9yO!f#tO!h#uO!l$YO#g9uO#h9vO#i9vO#j9vO#k9xO#l9yO#m9yO#n:SO#o9yO#q9zO(RVO#s#fi#u#fi#v#fi#y#fi(b#fi(j#fi!V#fi!W#fi~O(i#fi~P%7hO(i#yO~P%7hOP$YOX:TOk9wOy#vOz#wO|#xO!e9yO!f#tO!h#uO!l$YO#g9uO#h9vO#i9vO#j9vO#k9xO#l9yO#m9yO#n:SO#o9yO#q9zO#s9|O(RVO(i#yO#u#fi#v#fi#y#fi(b#fi!V#fi!W#fi~O(j#fi~P%9sO(j#zO~P%9sOP$YOX:TOk9wOy#vOz#wO|#xO!e9yO!f#tO!h#uO!l$YO#g9uO#h9vO#i9vO#j9vO#k9xO#l9yO#m9yO#n:SO#o9yO#q9zO#s9|O#u:OO(RVO(i#yO(j#zO~O#v#fi#y#fi(b#fi!V#fi!W#fi~P%<OO^#wy!V#wy'k#wy'i#wy!S#wy!g#wyo#wy!X#wy%a#wy!a#wy~P!6UOg;hOy)qO|)rO(i)tO(j)vO~OP#fiX#fik#fiz#fi!e#fi!f#fi!h#fi!l#fi#g#fi#h#fi#i#fi#j#fi#k#fi#l#fi#m#fi#n#fi#o#fi#q#fi#s#fi#u#fi#v#fi#y#fi(R#fi(b#fi!V#fi!W#fi~P%>vO!f#tOP(QXX(QXg(QXk(QXy(QXz(QX|(QX!e(QX!h(QX!l(QX#g(QX#h(QX#i(QX#j(QX#k(QX#l(QX#m(QX#n(QX#o(QX#q(QX#s(QX#u(QX#v(QX#y(QX(R(QX(b(QX(i(QX(j(QX!V(QX!W(QX~O#y#zi!V#zi!W#zi~P#@_O#y!ni!W!ni~P$ wO!W6ZO~O!V'Ya!W'Ya~P#@_O!a#rO(b'bO!V'Za!g'Za~O!V/QO!g(oi~O!V/QO!a#rO!g(oi~Od$uq!V$uq#X$uq#y$uq~P!0RO!S']a!V']a~P#)tO!a6bO~O!V/YO!S(pi~P#)tO!V/YO!S(pi~O!S6fO~O!a#rO#o6kO~Ok6lO!a#rO(b'bO~O!S6nO~Od$wq!V$wq#X$wq#y$wq~P!0RO^$iy!V$iy'k$iy'i$iy!S$iy!g$iyo$iy!X$iy%a$iy!a$iy~P!6UO!V4QO!X(qa~O^#[y!V#[y'k#[y'i#[y!S#[y!g#[yo#[y!X#[y%a#[y!a#[y~P!6UOX6sO~O!V0YO!W(wi~O]6yO~O!a5fO~O(U(oO!V'bX!W'bX~O!V4iO!W(ta~OikO't7QO~P._O!W7TO~P%!VOl!kO|7UO'vTO'yUO(U!jO(a!pO~O!X0uO~O!X0uO%a7WO~Og7ZO!X0uO%a7WO~OX7`O!V'ea!W'ea~O!V1QO!W(ui~O!g7dO~O!g7eO~O!g7fO~O!g7fO~P%QO^7hO~O!a7kO~O!g7lO~O!V(gi!W(gi~P#@_O^%^O#X7tO'k%^O~O!V(dy!g(dy^(dy'k(dy~P!6UO!V(ZO!g(cy~O!X'QO%a7wO~O#d$uqP$uqX$uq^$uqk$uqz$uq!V$uq!e$uq!f$uq!h$uq!l$uq#g$uq#h$uq#i$uq#j$uq#k$uq#l$uq#m$uq#n$uq#o$uq#q$uq#s$uq#u$uq#v$uq'k$uq(R$uq(b$uq!g$uq!S$uq'i$uq#X$uqo$uq!X$uq%a$uq!a$uq~P#)tO#d$wqP$wqX$wq^$wqk$wqz$wq!V$wq!e$wq!f$wq!h$wq!l$wq#g$wq#h$wq#i$wq#j$wq#k$wq#l$wq#m$wq#n$wq#o$wq#q$wq#s$wq#u$wq#v$wq'k$wq(R$wq(b$wq!g$wq!S$wq'i$wq#X$wqo$wq!X$wq%a$wq!a$wq~P#)tO!V'Pi!g'Pi~P!6UO#y#[q!V#[q!W#[q~P#@_Oy/tOz/tO|/uOPvaXvagvakva!eva!fva!hva!lva#gva#hva#iva#jva#kva#lva#mva#nva#ova#qva#sva#uva#vva#yva(Rva(bva(iva(jva!Vva!Wva~Oy)qO|)rOP$laX$lag$lak$laz$la!e$la!f$la!h$la!l$la#g$la#h$la#i$la#j$la#k$la#l$la#m$la#n$la#o$la#q$la#s$la#u$la#v$la#y$la(R$la(b$la(i$la(j$la!V$la!W$la~Oy)qO|)rOP$naX$nag$nak$naz$na!e$na!f$na!h$na!l$na#g$na#h$na#i$na#j$na#k$na#l$na#m$na#n$na#o$na#q$na#s$na#u$na#v$na#y$na(R$na(b$na(i$na(j$na!V$na!W$na~OP$|aX$|ak$|az$|a!e$|a!f$|a!h$|a!l$|a#g$|a#h$|a#i$|a#j$|a#k$|a#l$|a#m$|a#n$|a#o$|a#q$|a#s$|a#u$|a#v$|a#y$|a(R$|a(b$|a!V$|a!W$|a~P%>vO#y$hq!V$hq!W$hq~P#@_O#y$iq!V$iq!W$iq~P#@_O!W8RO~O#y8SO~P!0RO!a#rO!V'Zi!g'Zi~O!a#rO(b'bO!V'Zi!g'Zi~O!V/QO!g(oq~O!S']i!V']i~P#)tO!V/YO!S(pq~O!S8YO~P#)tO!S8YO~Od(Py!V(Py~P!0RO!V'`a!X'`a~P#)tO^%Tq!X%Tq'k%Tq!V%Tq~P#)tOX8_O~O!V0YO!W(wq~O#X8cO!V'ba!W'ba~O!V4iO!W(ti~P#@_OPYXXYXkYXyYXzYX|YX!SYX!VYX!eYX!fYX!hYX!lYX#XYX#dcX#gYX#hYX#iYX#jYX#kYX#lYX#mYX#nYX#oYX#qYX#sYX#uYX#vYX#{YX(RYX(bYX(iYX(jYX~O!a%RX#o%RX~P&/vO!X0uO%a8gO~O'vTO'yUO(U8lO~O!V1QO!W(uq~O!g8oO~O!g8oO~P%QO!g8qO~O!g8rO~O#X8tO!V#ay!W#ay~O!V#ay!W#ay~P#@_O!X'QO%a8yO~O#y#wy!V#wy!W#wy~P#@_OP$uiX$uik$uiz$ui!e$ui!f$ui!h$ui!l$ui#g$ui#h$ui#i$ui#j$ui#k$ui#l$ui#m$ui#n$ui#o$ui#q$ui#s$ui#u$ui#v$ui#y$ui(R$ui(b$ui!V$ui!W$ui~P%>vOy)qO|)rO(j)vOP%XiX%Xig%Xik%Xiz%Xi!e%Xi!f%Xi!h%Xi!l%Xi#g%Xi#h%Xi#i%Xi#j%Xi#k%Xi#l%Xi#m%Xi#n%Xi#o%Xi#q%Xi#s%Xi#u%Xi#v%Xi#y%Xi(R%Xi(b%Xi(i%Xi!V%Xi!W%Xi~Oy)qO|)rOP%ZiX%Zig%Zik%Ziz%Zi!e%Zi!f%Zi!h%Zi!l%Zi#g%Zi#h%Zi#i%Zi#j%Zi#k%Zi#l%Zi#m%Zi#n%Zi#o%Zi#q%Zi#s%Zi#u%Zi#v%Zi#y%Zi(R%Zi(b%Zi(i%Zi(j%Zi!V%Zi!W%Zi~O#y$iy!V$iy!W$iy~P#@_O#y#[y!V#[y!W#[y~P#@_O!a#rO!V'Zq!g'Zq~O!V/QO!g(oy~O!S']q!V']q~P#)tO!S9QO~P#)tO!V0YO!W(wy~O!V4iO!W(tq~O!X0uO%a9XO~O!g9[O~O!X'QO%a9aO~OP$uqX$uqk$uqz$uq!e$uq!f$uq!h$uq!l$uq#g$uq#h$uq#i$uq#j$uq#k$uq#l$uq#m$uq#n$uq#o$uq#q$uq#s$uq#u$uq#v$uq#y$uq(R$uq(b$uq!V$uq!W$uq~P%>vOP$wqX$wqk$wqz$wq!e$wq!f$wq!h$wq!l$wq#g$wq#h$wq#i$wq#j$wq#k$wq#l$wq#m$wq#n$wq#o$wq#q$wq#s$wq#u$wq#v$wq#y$wq(R$wq(b$wq!V$wq!W$wq~P%>vOd%]!Z!V%]!Z#X%]!Z#y%]!Z~P!0RO!V'bq!W'bq~P#@_O!V#a!Z!W#a!Z~P#@_O#d%]!ZP%]!ZX%]!Z^%]!Zk%]!Zz%]!Z!V%]!Z!e%]!Z!f%]!Z!h%]!Z!l%]!Z#g%]!Z#h%]!Z#i%]!Z#j%]!Z#k%]!Z#l%]!Z#m%]!Z#n%]!Z#o%]!Z#q%]!Z#s%]!Z#u%]!Z#v%]!Z'k%]!Z(R%]!Z(b%]!Z!g%]!Z!S%]!Z'i%]!Z#X%]!Zo%]!Z!X%]!Z%a%]!Z!a%]!Z~P#)tOP%]!ZX%]!Zk%]!Zz%]!Z!e%]!Z!f%]!Z!h%]!Z!l%]!Z#g%]!Z#h%]!Z#i%]!Z#j%]!Z#k%]!Z#l%]!Z#m%]!Z#n%]!Z#o%]!Z#q%]!Z#s%]!Z#u%]!Z#v%]!Z#y%]!Z(R%]!Z(b%]!Z!V%]!Z!W%]!Z~P%>vOo(VX~P1gO'u!iO~P!)jO!ScX!VcX#XcX~P&/vOPYXXYXkYXyYXzYX|YX!VYX!VcX!eYX!fYX!hYX!lYX#XYX#XcX#dcX#gYX#hYX#iYX#jYX#kYX#lYX#mYX#nYX#oYX#qYX#sYX#uYX#vYX#{YX(RYX(bYX(iYX(jYX~O!acX!gYX!gcX(bcX~P&E^OP9lOQ9lOa;]Ob!fOikOk9lOlkOmkOskOu9lOw9lO|WO!QkO!RkO!XXO!c9oO!hZO!k9lO!l9lO!m9lO!o9pO!q9qO!t!eO$Q!hO$UfO't)PO'vTO'yUO(RVO(a[O(n;ZO~O!V:QO!W$ka~Oi%POk$qOl$pOm$pOs%QOu%ROw:WO|$xO!X$yO!c;bO!h$uO#c:^O$Q%VO$m:YO$o:[O$r%WO't(gO'vTO'yUO'}%OO(R$rO~O#p)WO~P&JSO!WYX!WcX~P&E^O#d9tO~O!a#rO#d9tO~O#X:UO~O#o9yO~O#X:`O!V(gX!W(gX~O#X:UO!V(eX!W(eX~O#d:aO~Od:cO~P!0RO#d:hO~O#d:iO~O!a#rO#d:jO~O!a#rO#d:aO~O#y:kO~P#@_O#d:lO~O#d:mO~O#d:nO~O#d:oO~O#d:pO~O#d:qO~O#y:rO~P!0RO#y:sO~P!0RO$U~!f!|!}#P#Q#T#b#c#n(n$m$o$r%U%`%a%b%h%j%m%n%p%r~'oR$U(n#h!R'm'u#il#g#jky'n(U'n't$W$Y$W~",
     goto: "$%Z({PPPP(|P)PP)aP*p.rPPPP5SPP5iP;d>iP>|P>|PPP>|P@lP>|P>|P>|P@pPP@uPA`PFUPPPFYPPPPFYIXPPPI_JYPFYPLgPPPPNuFYPPPFYPFYP!#TFYP!&g!'i!'rP!(e!(i!(ePPPPP!+r!'iPP!,`!-YP!/|FYFY!0R!3Z!7n!7n!;cPPP!;jFYPPPPPPPPPPP!>uP!@WPPFY!AePFYPFYFYFYFYPFY!BwPP!E}P!IPP!IT!I_!Ic!IcP!EzP!Ig!IgP!LiP!LmFYFY!Ls# t>|P>|P>|>|P##O>|>|#$x>|#'V>|#(y>|>|#)g#+c#+c#+g#+o#+c#+wP#+cP>|#,a>|#-i>|>|5SPPP#.tPP#/^#/^P#/^P#/s#/^PP#/yP#/pP#/p#0]#/p#0w#0}5P)P#1Q)PP#1X#1X#1XP)PP)PP)PP)PPP)PP#1_#1bP#1b)PP#1fP#1iP)PP)PP)PP)PP)PP)P)PPP#1o#1u#2P#2V#2]#2c#2i#2w#2}#3T#3_#3e#3o#4O#4U#4u#5X#5_#5e#5s#6Y#7j#7x#8O#8U#8[#8b#8l#8r#8x#9S#9f#9lPPPPPPPPPP#9rPPPPPPP#:f#=mP#>|#?T#?]PPPP#Cg#F]#Lr#Lu#Lx#Mq#Mt#Mw#NO#NWPP#N^#Nb$ Z$!Z$!_$!sPP$!w$!}$#RP$#U$#Y$#]$$R$$i$$n$$q$$t$$z$$}$%R$%VR!xRmpOXr!X#`%]&d&f&g&i,],b1b1eY!rQ'Q,}0u4pQ%ctQ%kwQ%rzQ&[!TS&x!c,uQ'W!fS'^!o!uS*Y$y*_Q+T%lQ+b%tQ+|&UQ,{'PQ-V'XQ-_'_Q/k*aQ1P+}R:_9p$zdOPWXYZrstu!X!^!l#O#S#V#`#k#q#u#x#{#|#}$O$P$Q$R$S$T$U$V$^$b%]%c%p&]&`&d&f&g&i&m&u'S'd't'v'|(T(i(m(q)p*s+g,X,],b-R-Z-i-o.].d/u/z0X0x1Y1Z1[1^1b1e1g2W2^2r4m4w5Z5]5^5p7U7Z7h7tS#m]9m!r)R$X$j&y)e,n,q.l1v3X4k5g8c8t9l9o9p9q9t9u9v9w9x9y9z9{9|9}:O:P:Q:U:_:`:a:c:j:k:p:q;^Q*j%SQ+Y%nQ,O&XQ,V&aQ.S:VQ0O*{Q0S*}Q0_+ZQ1X,TQ2f.PQ4Y0YQ5O1QQ5|2jQ6S:WQ6u4ZR7z5}&xkOPWXYZrstu!X!^!l#O#S#V#`#k#q#u#x#{#|#}$O$P$Q$R$S$T$U$V$X$^$b$j%]%c%p&]&`&a&d&f&g&i&m&u&y'S'd't'v'|(T(i(m(q)e)p*s*{+g,X,],b,n,q-R-Z-i-o.P.].d.l/u/z0X0x1Y1Z1[1^1b1e1g1v2W2^2j2r3X4k4m4w5Z5]5^5g5p5}7U7Z7h7t8c8t9l9o9p9q9t9u9v9w9x9y9z9{9|9}:O:P:Q:U:_:`:a:c:j:k:p:q;^t!kQ!o!r!u!v&x'P'Q'^'_'`,u,{,}-_0u4p4r$Y$pi#r#t$`$a$u$x%T%U%Y)l)u)w)x*P*V*e*f*z*}+l+o.O.Y/X/Y/[/w0l0o0w2i3a3k3s3y4Q4S4v5z6b6k7W7w8S8g8y9X9a:S:T:X:Y:Z:[:]:^:d:e:f:g:h:i:l:m:n:o:r:s;Z;c;d;g;hQ%uzQ&v!cS&|%w,xQ+Y%nS.x)r.zQ/v*nQ0_+ZQ0d+aQ1W,SQ1X,TQ4Y0YQ4c0fQ5R1SQ5S1VQ6u4ZQ6x4`Q7c5UQ8b6yR8m7`pmOXr!T!X#`%]&Z&d&f&g&i,],b1b1eR,Q&]&r^OPXYrstux!X!^!g!l#O#`#k#q#u#x#{#|#}$O$P$Q$R$S$T$U$V$X$^$b$j%]%c%p&]&`&a&d&f&g&i&m&u'S'd'v'|(T(i(m(q)e)p*s*{+g,X,],b,n,q-R-Z-i-o.P.].d.l/u/z0X0x1Y1Z1[1^1b1e1g1v2W2^2j2r3X4k4m4w5Z5]5^5g5p5}7U7Z7h7t8c8t9l9o9p9q9t9u9v9w9x9y9z9{9|9}:O:P:Q:U:_:`:a:c:j:k:p:q;];^[#XWZ#S#V&y'tQ%fvQ%jwS%oz%t!U%x|}#d#e#h%Z%v'}(X(Y(Z+e+f+h,Z,o-m-s-t-u-w1j2b2c5f5wQ&Q!RQ'T!eQ'V!fQ(b#oS)|$u*QS+S%k%lQ+W%nQ+w&SQ+{&US-U'W'XQ.R(cQ/U)}Q0W+TQ0^+ZQ0`+[Q0c+`Q0z+xS1O+|+}Q2S-VQ3b/QQ4X0YQ4]0]Q4b0eQ4}1PQ6_3cQ6t4ZQ6w4_Q8^6sR9S8_v$wi#t%T%U%Y)u)w*P*e*f.Y/X/w3a3y8S;Z;c;d!S%hw!f!q%j%k%l&w'V'W'X']'g*X+S+T,r-U-V-^/c0W1{2S2Z3uQ*|%fQ+m%}Q+p&OQ+z&UQ.Q(bQ0y+wU0}+{+|+}Q2k.RQ4x0zS4|1O1PQ7_4}!z;_#r$`$a$u$x)l)x*V*z*}+l+o.O/Y/[0l0o0w2i3k3s4Q4S4v5z6b6k7W7w8g8y9X9a:X:Z:]:d:f:h:l:n:r;g;hg;`:S:T:Y:[:^:e:g:i:m:o:sW$|i%O*g;ZS%}!O&ZQ&O!PQ&P!QR+k%{$Z${i#r#t$`$a$u$x%T%U%Y)l)u)w)x*P*V*e*f*z*}+l+o.O.Y/X/Y/[/w0l0o0w2i3a3k3s3y4Q4S4v5z6b6k7W7w8S8g8y9X9a:S:T:X:Y:Z:[:]:^:d:e:f:g:h:i:l:m:n:o:r:s;Z;c;d;g;hT)m$r)nV*k%S:V:WU&|!c%w,xS(p#v#wQ+_%qS-z(^(_Q0p+qQ3z/tR6}4i&xkOPWXYZrstu!X!^!l#O#S#V#`#k#q#u#x#{#|#}$O$P$Q$R$S$T$U$V$X$^$b$j%]%c%p&]&`&a&d&f&g&i&m&u&y'S'd't'v'|(T(i(m(q)e)p*s*{+g,X,],b,n,q-R-Z-i-o.P.].d.l/u/z0X0x1Y1Z1[1^1b1e1g1v2W2^2j2r3X4k4m4w5Z5]5^5g5p5}7U7Z7h7t8c8t9l9o9p9q9t9u9v9w9x9y9z9{9|9}:O:P:Q:U:_:`:a:c:j:k:p:q;^$i$]c#U#a%a%b%d's'y(e(l(t(u(v(w(x(y(z({(|(})O)Q)T)X)c*x+^,s-b-g-l-n.X._.c.e.f.g.v/x1q1t2U2]2q2v2w2x2y2z2{2|2}3O3P3Q3R3S3V3W3]4O4V5i5o5t6Q6R6W6X7P7n7r7{8P8Q8v9U9]9n;QT#PV#Q&ykOPWXYZrstu!X!^!l#O#S#V#`#k#q#u#x#{#|#}$O$P$Q$R$S$T$U$V$X$^$b$j%]%c%p&]&`&a&d&f&g&i&m&u&y'S'd't'v'|(T(i(m(q)e)p*s*{+g,X,],b,n,q-R-Z-i-o.P.].d.l/u/z0X0x1Y1Z1[1^1b1e1g1v2W2^2j2r3X4k4m4w5Z5]5^5g5p5}7U7Z7h7t8c8t9l9o9p9q9t9u9v9w9x9y9z9{9|9}:O:P:Q:U:_:`:a:c:j:k:p:q;^Q&z!cR1w,uv!kQ!c!o!r!u!v&x'P'Q'^'_'`,u,{,}-_0u4p4rS*X$y*_S/c*Y*aQ/l*bQ0r+sQ3u/kR3x/nlpOXr!X#`%]&d&f&g&i,],b1b1eQ&k![Q'h!tS(d#q9tQ+Q%iQ+u&QQ+v&RQ-S'UQ-a'aS.W(i:aS/y*s:jQ0U+RQ0t+tQ1i,dQ1k,eQ1s,pQ2Q-TQ2T-XS4P/z:pQ4T0VS4W0X:qQ5h1uQ5l2RQ5q2YQ6r4UQ7o5jQ7p5mQ7s5rR8s7l$d$[c#U#a%b%d's'y(e(l(t(u(v(w(x(y(z({(|(})O)Q)T)X)c*x+^,s-b-g-l-n.X._.c.f.g.v/x1q1t2U2]2q2v2w2x2y2z2{2|2}3O3P3Q3R3S3V3W3]4O4V5i5o5t6Q6R6W6X7P7n7r7{8P8Q8v9U9]9n;QS(a#l'ZU*d$z(h3US*w%a.eQ2g0OQ5y2fQ7y5|R8z7z$d$Zc#U#a%b%d's'y(e(l(t(u(v(w(x(y(z({(|(})O)Q)T)X)c*x+^,s-b-g-l-n.X._.c.f.g.v/x1q1t2U2]2q2v2w2x2y2z2{2|2}3O3P3Q3R3S3V3W3]4O4V5i5o5t6Q6R6W6X7P7n7r7{8P8Q8v9U9]9n;QS(`#l'ZS(r#w$[S*v%a.eS-{(_(aQ.h)SQ/{*wR2d-|&xkOPWXYZrstu!X!^!l#O#S#V#`#k#q#u#x#{#|#}$O$P$Q$R$S$T$U$V$X$^$b$j%]%c%p&]&`&a&d&f&g&i&m&u&y'S'd't'v'|(T(i(m(q)e)p*s*{+g,X,],b,n,q-R-Z-i-o.P.].d.l/u/z0X0x1Y1Z1[1^1b1e1g1v2W2^2j2r3X4k4m4w5Z5]5^5g5p5}7U7Z7h7t8c8t9l9o9p9q9t9u9v9w9x9y9z9{9|9}:O:P:Q:U:_:`:a:c:j:k:p:q;^S#m]9mQ&f!VQ&g!WQ&i!YQ&j!ZR1a,`Q'R!eQ*y%fQ-Q'TS-}(b*|Q2O-PW2h.Q.R/}0PQ5k2PU5x2e2g2kS7v5y5{S8x7x7yS9_8w8zQ9g9`R9j9hU!sQ'Q,}T4n0u4p!O_OXZ`r!T!X#`#d%Z%]&Z&]&d&f&g&i(Z,],b-t1b1e]!mQ!o'Q,}0u4pT#m]9m%UyOPWXYZrstu!X!^!l#O#S#V#`#k#q#u#x#{#|#}$O$P$Q$R$S$T$U$V$^$b%]%c%p&]&`&a&d&f&g&i&m&u'S'd't'v'|(T(i(m(q)p*s*{+g,X,],b-R-Z-i-o.P.].d/u/z0X0x1Y1Z1[1^1b1e1g2W2^2j2r4m4w5Z5]5^5p5}7U7Z7h7tS(p#v#wS-z(^(_!s:w$X$j&y)e,n,q.l1v3X4k5g8c8t9l9o9p9q9t9u9v9w9x9y9z9{9|9}:O:P:Q:U:_:`:a:c:j:k:p:q;^Y!qQ'Q,}0u4pQ']!oS'g!r!uS'i!v4rS-^'^'_Q-`'`R2Z-_Q'f!qS(V#c1_S-]']'iQ/T)|Q/a*XQ2[-`Q3g/US3p/b/lQ6^3bS6i3v3xQ8U6_R8]6lQ#sbQ'e!qS(U#c1_S(W#i*rQ*t%[Q+O%gQ+U%mU-[']'f'iQ-p(VQ/S)|Q/`*XQ/f*[Q0T+PQ0{+yS2X-]-`Q2a-xS3f/T/US3o/a/lQ3r/eQ3t/gQ4z0|Q5s2[Q6]3bQ6a3gS6e3p3xQ6j3wQ7]4{S8T6^6_Q8X6fQ8Z6iQ8j7^Q9O8UQ9P8YQ9R8]Q9Z8kQ9c9QQ:z:uQ;V;OR;W;PV!sQ'Q,}%UaOPWXYZrstu!X!^!l#O#S#V#`#k#q#u#x#{#|#}$O$P$Q$R$S$T$U$V$^$b%]%c%p&]&`&a&d&f&g&i&m&u'S'd't'v'|(T(i(m(q)p*s*{+g,X,],b-R-Z-i-o.P.].d/u/z0X0x1Y1Z1[1^1b1e1g2W2^2j2r4m4w5Z5]5^5p5}7U7Z7h7tS#sx!g!r:t$X$j&y)e,n,q.l1v3X4k5g8c8t9l9o9p9q9t9u9v9w9x9y9z9{9|9}:O:P:Q:U:_:`:a:c:j:k:p:q;^R:z;]%UbOPWXYZrstu!X!^!l#O#S#V#`#k#q#u#x#{#|#}$O$P$Q$R$S$T$U$V$^$b%]%c%p&]&`&a&d&f&g&i&m&u'S'd't'v'|(T(i(m(q)p*s*{+g,X,],b-R-Z-i-o.P.].d/u/z0X0x1Y1Z1[1^1b1e1g2W2^2j2r4m4w5Z5]5^5p5}7U7Z7h7tQ%[j!S%gw!f!q%j%k%l&w'V'W'X']'g*X+S+T,r-U-V-^/c0W1{2S2Z3uS%mx!gQ+P%hQ+y&UW0|+z+{+|+}U4{0}1O1PS7^4|4}Q8k7_!r:u$X$j&y)e,n,q.l1v3X4k5g8c8t9l9o9p9q9t9u9v9w9x9y9z9{9|9}:O:P:Q:U:_:`:a:c:j:k:p:q;^Q;O;[R;P;]$xeOPXYrstu!X!^!l#O#`#k#q#u#x#{#|#}$O$P$Q$R$S$T$U$V$^$b%]%c%p&]&`&d&f&g&i&m&u'S'd'v'|(T(i(m(q)p*s*{+g,X,],b-R-Z-i-o.P.].d/u/z0X0x1Y1Z1[1^1b1e1g2W2^2j2r4m4w5Z5]5^5p5}7U7Z7h7tY#^WZ#S#V't!U%x|}#d#e#h%Z%v'}(X(Y(Z+e+f+h,Z,o-m-s-t-u-w1j2b2c5f5wQ,W&a!p:v$X$j)e,n,q.l1v3X4k5g8c8t9l9o9p9q9t9u9v9w9x9y9z9{9|9}:O:P:Q:U:_:`:a:c:j:k:p:q;^R:y&yS&}!c%wR1y,x$zdOPWXYZrstu!X!^!l#O#S#V#`#k#q#u#x#{#|#}$O$P$Q$R$S$T$U$V$^$b%]%c%p&]&`&d&f&g&i&m&u'S'd't'v'|(T(i(m(q)p*s+g,X,],b-R-Z-i-o.].d/u/z0X0x1Y1Z1[1^1b1e1g2W2^2r4m4w5Z5]5^5p7U7Z7h7t!r)R$X$j&y)e,n,q.l1v3X4k5g8c8t9l9o9p9q9t9u9v9w9x9y9z9{9|9}:O:P:Q:U:_:`:a:c:j:k:p:q;^Q,V&aQ0O*{Q2f.PQ5|2jR7z5}!f$Rc#U%a's'y(e(l({(|(})O)T)X+^-b-g-l-n.X._.v/x2U2]2q3S4O4V5o5t6Q7r8v9n!T9{)Q)c,s.e1q1t2v3O3P3Q3R3V3]5i6R6W6X7P7n7{8P8Q9U9];Q!b$Tc#U%a's'y(e(l(})O)T)X+^-b-g-l-n.X._.v/x2U2]2q3S4O4V5o5t6Q7r8v9n!P9})Q)c,s.e1q1t2v3Q3R3V3]5i6R6W6X7P7n7{8P8Q9U9];Q!^$Xc#U%a's'y(e(l)T)X+^-b-g-l-n.X._.v/x2U2]2q3S4O4V5o5t6Q7r8v9nQ3a/Oz;^)Q)c,s.e1q1t2v3V3]5i6R6W6X7P7n7{8P8Q9U9];QQ;c;eR;d;f&xkOPWXYZrstu!X!^!l#O#S#V#`#k#q#u#x#{#|#}$O$P$Q$R$S$T$U$V$X$^$b$j%]%c%p&]&`&a&d&f&g&i&m&u&y'S'd't'v'|(T(i(m(q)e)p*s*{+g,X,],b,n,q-R-Z-i-o.P.].d.l/u/z0X0x1Y1Z1[1^1b1e1g1v2W2^2j2r3X4k4m4w5Z5]5^5g5p5}7U7Z7h7t8c8t9l9o9p9q9t9u9v9w9x9y9z9{9|9}:O:P:Q:U:_:`:a:c:j:k:p:q;^S$kh$lR3Y.k'PgOPWXYZhrstu!X!^!l#O#S#V#`#k#q#u#x#{#|#}$O$P$Q$R$S$T$U$V$X$^$b$j$l%]%c%p&]&`&a&d&f&g&i&m&u&y'S'd't'v'|(T(i(m(q)e)p*s*{+g,X,],b,n,q-R-Z-i-o.P.].d.k.l/u/z0X0x1Y1Z1[1^1b1e1g1v2W2^2j2r3X4k4m4w5Z5]5^5g5p5}7U7Z7h7t8c8t9l9o9p9q9t9u9v9w9x9y9z9{9|9}:O:P:Q:U:_:`:a:c:j:k:p:q;^T$gf$mQ$efS)[$h)`R)h$mT$ff$mT)^$h)`'PhOPWXYZhrstu!X!^!l#O#S#V#`#k#q#u#x#{#|#}$O$P$Q$R$S$T$U$V$X$^$b$j$l%]%c%p&]&`&a&d&f&g&i&m&u&y'S'd't'v'|(T(i(m(q)e)p*s*{+g,X,],b,n,q-R-Z-i-o.P.].d.k.l/u/z0X0x1Y1Z1[1^1b1e1g1v2W2^2j2r3X4k4m4w5Z5]5^5g5p5}7U7Z7h7t8c8t9l9o9p9q9t9u9v9w9x9y9z9{9|9}:O:P:Q:U:_:`:a:c:j:k:p:q;^T$kh$lQ$nhR)g$l%UjOPWXYZrstu!X!^!l#O#S#V#`#k#q#u#x#{#|#}$O$P$Q$R$S$T$U$V$^$b%]%c%p&]&`&a&d&f&g&i&m&u'S'd't'v'|(T(i(m(q)p*s*{+g,X,],b-R-Z-i-o.P.].d/u/z0X0x1Y1Z1[1^1b1e1g2W2^2j2r4m4w5Z5]5^5p5}7U7Z7h7t!s;[$X$j&y)e,n,q.l1v3X4k5g8c8t9l9o9p9q9t9u9v9w9x9y9z9{9|9}:O:P:Q:U:_:`:a:c:j:k:p:q;^#alOPXZr!X!^!l#O#`#k#x$j%]&]&`&a&d&f&g&i&m&u'S(q)e*{+g,X,],b-R.P.l/u0x1Y1Z1[1^1b1e1g2j3X4m4w5Z5]5^5}7U7Z7hv$zi#t%T%U%Y)u)w*P*e*f.Y/X/w3a3y8S;Z;c;d!z(h#r$`$a$u$x)l)x*V*z*}+l+o.O/Y/[0l0o0w2i3k3s4Q4S4v5z6b6k7W7w8g8y9X9a:X:Z:]:d:f:h:l:n:r;g;hQ*o%WQ.w)qg3U:S:T:Y:[:^:e:g:i:m:o:sv$vi#t%T%U%Y)u)w*P*e*f.Y/X/w3a3y8S;Z;c;dQ*R$wS*[$y*_Q*p%XQ/g*]!z:|#r$`$a$u$x)l)x*V*z*}+l+o.O/Y/[0l0o0w2i3k3s4Q4S4v5z6b6k7W7w8g8y9X9a:X:Z:]:d:f:h:l:n:r;g;hf:}:S:T:Y:[:^:e:g:i:m:o:sQ;R;_Q;S;`Q;T;aR;U;bv$zi#t%T%U%Y)u)w*P*e*f.Y/X/w3a3y8S;Z;c;d!z(h#r$`$a$u$x)l)x*V*z*}+l+o.O/Y/[0l0o0w2i3k3s4Q4S4v5z6b6k7W7w8g8y9X9a:X:Z:]:d:f:h:l:n:r;g;hg3U:S:T:Y:[:^:e:g:i:m:o:slnOXr!X#`%]&d&f&g&i,],b1b1eQ*U$xQ,k&pQ,l&rR3j/Y$Y${i#r#t$`$a$u$x%T%U%Y)l)u)w)x*P*V*e*f*z*}+l+o.O.Y/X/Y/[/w0l0o0w2i3a3k3s3y4Q4S4v5z6b6k7W7w8S8g8y9X9a:S:T:X:Y:Z:[:]:^:d:e:f:g:h:i:l:m:n:o:r:s;Z;c;d;g;hQ+n&OQ0n+pQ4g0mR6|4hT*^$y*_S*^$y*_T4o0u4pS/e*Z4mT3w/m7UQ+O%gQ/f*[Q0T+PQ0{+yQ4z0|Q7]4{Q8j7^R9Z8kn)u$s(j*q/W/o/p2o3h3}6[6m8}:{;X;Y!W:d(f)V){*T.V.s/O/]/|0k0m2n3i3m4f4h6O6P6c6g6o6q8W8[9b;e;f]:e3T6V7|8{8|9kp)w$s(j*q.|/W/o/p2o3h3}6[6m8}:{;X;Y!Y:f(f)V){*T.V.s/O/]/|0k0m2l2n3i3m4f4h6O6P6c6g6o6q8W8[9b;e;f_:g3T6V7|7}8{8|9kpmOXr!T!X#`%]&Z&d&f&g&i,],b1b1eQ&W!SR,X&apmOXr!T!X#`%]&Z&d&f&g&i,],b1b1eR&W!SQ+r&PR0j+kqmOXr!T!X#`%]&Z&d&f&g&i,],b1b1eQ0v+wS4u0y0zU7V4s4t4xS8f7X7YS9V8e8hQ9d9WR9i9eQ&_!TR,R&ZR5R1SS%oz%tR0`+[Q&d!UR,]&eR,c&jT1c,b1eR,g&kQ,f&kR1l,gQ'k!wR-c'kQrOQ#`XT%`r#`Q!zTR'm!zQ!}UR'o!}Q)n$rR.t)nQ#QVR'q#QQ#TWU'w#T'x-jQ'x#UR-j'yQ,v&zR1x,vQ.Z(jR2p.ZQ.^(lS2s.^2tR2t._Q,}'QR1|,}Y!oQ'Q,}0u4pR'[!oS#ZW%vU(O#Z(P-kQ(P#[R-k'zQ,y&}R1z,yr`OXr!T!X#`%]&Z&]&d&f&g&i,],b1b1eS#dZ%ZU#n`#d-tR-t(ZQ([#fQ-q(WW-y([-q2_5uQ2_-rR5u2`Q)`$hR.m)`Q$lhR)f$lQ$_cU)U$_-f:RQ-f9nR:R)cQ/R)|W3d/R3e6`8VU3e/S/T/US6`3f3gR8V6a#m)s$s(f(j)V){*T*l*m*q.T.U.V.s.|.}/O/W/]/o/p/|0k0m2l2m2n2o3T3h3i3m3}4f4h6O6P6T6U6V6[6c6g6m6o6q7|7}8O8W8[8{8|8}9b9k:{;X;Y;e;fQ/Z*TU3l/Z3n6dQ3n/]R6d3mQ*_$yR/i*_Q*h$}R/r*hQ4R/|R6p4RQ+i%yR0i+iQ4j0pS7O4j8dR8d7PQ+t&QR0s+tQ4p0uR7S4pQ1R,OS5P1R7aR7a5RQ0Z+WW4[0Z4^6v8`Q4^0^Q6v4]R8`6wQ+]%oR0a+]Q1e,bR5a1eWqOXr#`Q&h!XQ*u%]Q,[&dQ,^&fQ,_&gQ,a&iQ1`,]S1c,b1eR5`1bQ%_oQ&l!]Q&o!_Q&q!`Q&s!aQ'c!qQ+Q%iQ+d%uQ+j%zQ,Q&_Q,i&nW-Y']'e'f'iQ-a'aQ/h*^Q0U+RS1U,R,UQ1m,hQ1n,kQ1o,lQ2T-XW2V-[-]-`-bQ4T0VQ4a0dQ4e0kQ4y0{Q5T1WQ5_1aU5n2U2X2[Q5q2YQ6r4UQ6z4cQ6{4fQ7R4oQ7[4zQ7b5SS7q5o5sQ7s5rQ8a6xQ8i7]Q8n7cQ8u7rQ9T8bQ9Y8jQ9^8vR9f9ZQ%iwQ'U!fQ'a!qU+R%j%k%lQ,p&wU-T'V'W'XS-X']'gQ/_*XS0V+S+TQ1u,rS2R-U-VQ2Y-^Q3q/cQ4U0WQ5j1{Q5m2SQ5r2ZR6h3uS$ti;ZR*i%OU$}i%O;ZR/q*gQ$siS(f#r*}Q(j#tS)V$`$aQ){$uQ*T$xQ*l%TQ*m%UQ*q%YQ.T:XQ.U:ZQ.V:]Q.s)lQ.|)uQ.})wQ/O)xQ/W*PQ/]*VQ/o*eQ/p*fh/|*z.O0w2i4v5z7W7w8g8y9X9aQ0k+lQ0m+oQ2l:dQ2m:fQ2n:hQ2o.YS3T:S:TQ3h/XQ3i/YQ3m/[Q3}/wQ4f0lQ4h0oQ6O:lQ6P:nQ6T:YQ6U:[Q6V:^Q6[3aQ6c3kQ6g3sQ6m3yQ6o4QQ6q4SQ7|:iQ7}:eQ8O:gQ8W6bQ8[6kQ8{:mQ8|:oQ8}8SQ9b:rQ9k:sQ:{;ZQ;X;cQ;Y;dQ;e;gR;f;hloOXr!X#`%]&d&f&g&i,],b1b1eQ!dPS#bZ#kQ&n!^U'Y!l4m7UQ'p#OQ(s#xQ)d$jS,U&]&`Q,Y&aQ,h&mQ,m&uQ-P'SQ.a(qQ.q)eQ0P*{Q0g+gQ1],XQ2P-RQ2g.PQ3[.lQ3{/uQ4t0xQ5V1YQ5W1ZQ5Y1[Q5[1^Q5c1gQ5y2jQ6Y3XQ7Y4wQ7g5ZQ7i5]Q7j5^Q7y5}Q8h7ZR8p7h#UcOPXZr!X!^!l#`#k#x%]&]&`&a&d&f&g&i&m&u'S(q*{+g,X,],b-R.P/u0x1Y1Z1[1^1b1e1g2j4m4w5Z5]5^5}7U7Z7hQ#UWQ#aYQ%asQ%btQ%duS's#S'vQ'y#VQ(e#qQ(l#uQ(t#{Q(u#|Q(v#}Q(w$OQ(x$PQ(y$QQ(z$RQ({$SQ(|$TQ(}$UQ)O$VQ)Q$XQ)T$^Q)X$bW)c$j)e.l3XQ*x%cQ+^%pS,s&y1vQ-b'dS-g't-iQ-l'|Q-n(TQ.X(iQ._(mQ.c9lQ.e9oQ.f9pQ.g9qQ.v)pQ/x*sQ1q,nQ1t,qQ2U-ZQ2]-oQ2q.]Q2v9tQ2w9uQ2x9vQ2y9wQ2z9xQ2{9yQ2|9zQ2}9{Q3O9|Q3P9}Q3Q:OQ3R:PQ3S.dQ3V:UQ3W:_Q3]:QQ4O/zQ4V0XQ5i:`Q5o2WQ5t2^Q6Q2rQ6R:aQ6W:cQ6X:jQ7P4kQ7n5gQ7r5pQ7{:kQ8P:pQ8Q:qQ8v7tQ9U8cQ9]8tQ9n#OR;Q;^R#WWR&{!cY!qQ'Q,}0u4pS&w!c,uQ']!oS'g!r!uS'i!v4rS,r&x'PS-^'^'_Q-`'`Q1{,{R2Z-_R(k#tR(n#uQ!dQT,|'Q,}]!nQ!o'Q,}0u4pQ#l]R'Z9mT#gZ%ZS#fZ%ZU%y|},ZU(W#d#e#hS-r(X(YQ-v(ZQ0h+hQ2`-sU2a-t-u-wS5v2b2cR7u5w`#YW#S#V%v't'}+e-mt#cZ|}#d#e#h%Z(X(Y(Z+h-s-t-u-w2b2c5wQ1_,ZQ1r,oQ5e1jQ7m5fT:x&y+fT#]W%vS#[W%vS'u#S'}S'z#V+eS,t&y+fT-h't-mT'O!c%wQ$hfR)j$mT)_$h)`R3Z.kT*O$u*QR*W$xQ/}*zQ2e.OQ4s0wQ5{2iQ7X4vQ7x5zQ8e7WQ8w7wQ9W8gQ9`8yQ9e9XR9h9alpOXr!X#`%]&d&f&g&i,],b1b1eQ&^!TR,Q&ZV%z|},ZR0q+qR,P&XQ%szR+c%tR+X%nT&b!U&eT&c!U&eT1d,b1e",
     nodeNames: "⚠ ArithOp ArithOp LineComment BlockComment Script ExportDeclaration export Star as VariableName String Escape from ; default FunctionDeclaration async function VariableDefinition > TypeParamList TypeDefinition extends ThisType this LiteralType ArithOp Number BooleanLiteral TemplateType InterpolationEnd Interpolation InterpolationStart NullType null VoidType void TypeofType typeof MemberExpression . ?. PropertyName [ TemplateString Escape Interpolation super RegExp ] ArrayExpression Spread , } { ObjectExpression Property async get set PropertyDefinition Block : NewExpression new TypeArgList CompareOp < ) ( ArgList UnaryExpression delete LogicOp BitOp YieldExpression yield AwaitExpression await ParenthesizedExpression ClassExpression class ClassBody MethodDeclaration Decorator @ MemberExpression PrivatePropertyName CallExpression declare Privacy static abstract override PrivatePropertyDefinition PropertyDeclaration readonly accessor Optional TypeAnnotation Equals StaticBlock FunctionExpression ArrowFunction ParamList ParamList ArrayPattern ObjectPattern PatternProperty Privacy readonly Arrow MemberExpression BinaryExpression ArithOp ArithOp ArithOp ArithOp BitOp CompareOp instanceof satisfies in const CompareOp BitOp BitOp BitOp LogicOp LogicOp ConditionalExpression LogicOp LogicOp AssignmentExpression UpdateOp PostfixExpression CallExpression TaggedTemplateExpression DynamicImport import ImportMeta JSXElement JSXSelfCloseEndTag JSXStartTag JSXSelfClosingTag JSXIdentifier JSXBuiltin JSXIdentifier JSXNamespacedName JSXMemberExpression JSXSpreadAttribute JSXAttribute JSXAttributeValue JSXEscape JSXEndTag JSXOpenTag JSXFragmentTag JSXText JSXEscape JSXStartCloseTag JSXCloseTag PrefixCast ArrowFunction TypeParamList SequenceExpression KeyofType keyof UniqueType unique ImportType InferredType infer TypeName ParenthesizedType FunctionSignature ParamList NewSignature IndexedType TupleType Label ArrayType ReadonlyType ObjectType MethodType PropertyType IndexSignature PropertyDefinition CallSignature TypePredicate is NewSignature new UnionType LogicOp IntersectionType LogicOp ConditionalType ParameterizedType ClassDeclaration abstract implements type VariableDeclaration let var TypeAliasDeclaration InterfaceDeclaration interface EnumDeclaration enum EnumBody NamespaceDeclaration namespace module AmbientDeclaration declare GlobalDeclaration global ClassDeclaration ClassBody AmbientFunctionDeclaration ExportGroup VariableName VariableName ImportDeclaration ImportGroup ForStatement for ForSpec ForInSpec ForOfSpec of WhileStatement while WithStatement with DoStatement do IfStatement if else SwitchStatement switch SwitchBody CaseLabel case DefaultLabel TryStatement try CatchClause catch FinallyClause finally ReturnStatement return ThrowStatement throw BreakStatement break ContinueStatement continue DebuggerStatement debugger LabeledStatement ExpressionStatement SingleExpression SingleClassItem",
     maxTerm: 364,
     context: trackNewline,
     nodeProps: [
       ["group", -26,6,14,16,62,199,203,206,207,209,212,215,225,227,233,235,237,239,242,248,254,256,258,260,262,264,265,"Statement",-32,10,11,25,28,29,35,45,48,49,51,56,64,72,76,78,80,81,103,104,113,114,131,134,136,137,138,139,141,142,162,163,165,"Expression",-23,24,26,30,34,36,38,166,168,170,171,173,174,175,177,178,179,181,182,183,193,195,197,198,"Type",-3,84,96,102,"ClassItem"],
       ["openedBy", 31,"InterpolationStart",50,"[",54,"{",69,"(",143,"JSXStartTag",155,"JSXStartTag JSXStartCloseTag"],
       ["closedBy", 33,"InterpolationEnd",44,"]",55,"}",70,")",144,"JSXSelfCloseEndTag JSXEndTag",160,"JSXEndTag"]
     ],
     propSources: [jsHighlight],
     skippedNodes: [0,3,4,268],
     repeatNodeCount: 33,
     tokenData: "$>y(CSR!bOX%ZXY+gYZ-yZ[+g[]%Z]^.c^p%Zpq+gqr/mrs3cst:_tu>PuvBavwDxwxGgxyMvyz! Qz{!![{|!%O|}!&]}!O!%O!O!P!'g!P!Q!1w!Q!R#0t!R![#3T![!]#@T!]!^#Aa!^!_#Bk!_!`#GS!`!a#In!a!b#N{!b!c$$z!c!}>P!}#O$&U#O#P$'`#P#Q$,w#Q#R$.R#R#S>P#S#T$/`#T#o$0j#o#p$4z#p#q$5p#q#r$7Q#r#s$8^#s$f%Z$f$g+g$g#BY>P#BY#BZ$9h#BZ$IS>P$IS$I_$9h$I_$I|>P$I|$I}$<s$I}$JO$<s$JO$JT>P$JT$JU$9h$JU$KV>P$KV$KW$9h$KW&FU>P&FU&FV$9h&FV;'S>P;'S;=`BZ<%l?HT>P?HT?HU$9h?HUO>P(n%d_$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&j&hT$d&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c&j&zP;=`<%l&c'|'U]$d&j'z!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!b(SU'z!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}!b(iP;=`<%l'}'|(oP;=`<%l&}'[(y]$d&j'wpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(rp)wU'wpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)rp*^P;=`<%l)r'[*dP;=`<%l(r#S*nX'wp'z!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g#S+^P;=`<%l*g(n+dP;=`<%l%Z(CS+rq$d&j'wp'z!b'm(;dOX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p$f%Z$f$g+g$g#BY%Z#BY#BZ+g#BZ$IS%Z$IS$I_+g$I_$JT%Z$JT$JU+g$JU$KV%Z$KV$KW+g$KW&FU%Z&FU&FV+g&FV;'S%Z;'S;=`+a<%l?HT%Z?HT?HU+g?HUO%Z(CS.ST'x#S$d&j'n(;dO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c(CS.n_$d&j'wp'z!b'n(;dOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#`/x`$d&j!l$Ip'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S1V`#q$Id$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`2X!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S2d_#q$Id$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$2b3l_'v$(n$d&j'z!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k*r4r_$d&j'z!bOY4kYZ5qZr4krs7nsw4kwx5qx!^4k!^!_8p!_#O4k#O#P5q#P#o4k#o#p8p#p;'S4k;'S;=`:X<%lO4k)`5vX$d&jOr5qrs6cs!^5q!^!_6y!_#o5q#o#p6y#p;'S5q;'S;=`7h<%lO5q)`6jT$_#t$d&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c#t6|TOr6yrs7]s;'S6y;'S;=`7b<%lO6y#t7bO$_#t#t7eP;=`<%l6y)`7kP;=`<%l5q*r7w]$_#t$d&j'z!bOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}%W8uZ'z!bOY8pYZ6yZr8prs9hsw8pwx6yx#O8p#O#P6y#P;'S8p;'S;=`:R<%lO8p%W9oU$_#t'z!bOY'}Zw'}x#O'}#P;'S'};'S;=`(f<%lO'}%W:UP;=`<%l8p*r:[P;=`<%l4k#%|:hg$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}st%Ztu<Puw%Zwx(rx!^%Z!^!_*g!_!c%Z!c!}<P!}#O%Z#O#P&c#P#R%Z#R#S<P#S#T%Z#T#o<P#o#p*g#p$g%Z$g;'S<P;'S;=`=y<%lO<P#%|<[i$d&j(a!L^'wp'z!bOY%ZYZ&cZr%Zrs&}st%Ztu<Puw%Zwx(rx!Q%Z!Q![<P![!^%Z!^!_*g!_!c%Z!c!}<P!}#O%Z#O#P&c#P#R%Z#R#S<P#S#T%Z#T#o<P#o#p*g#p$g%Z$g;'S<P;'S;=`=y<%lO<P#%|=|P;=`<%l<P(CS>`k$d&j'wp'z!b(U!LY't&;d$W#tOY%ZYZ&cZr%Zrs&}st%Ztu>Puw%Zwx(rx}%Z}!O@T!O!Q%Z!Q![>P![!^%Z!^!_*g!_!c%Z!c!}>P!}#O%Z#O#P&c#P#R%Z#R#S>P#S#T%Z#T#o>P#o#p*g#p$g%Z$g;'S>P;'S;=`BZ<%lO>P+d@`k$d&j'wp'z!b$W#tOY%ZYZ&cZr%Zrs&}st%Ztu@Tuw%Zwx(rx}%Z}!O@T!O!Q%Z!Q![@T![!^%Z!^!_*g!_!c%Z!c!}@T!}#O%Z#O#P&c#P#R%Z#R#S@T#S#T%Z#T#o@T#o#p*g#p$g%Z$g;'S@T;'S;=`BT<%lO@T+dBWP;=`<%l@T(CSB^P;=`<%l>P%#SBl`$d&j'wp'z!b#i$IdOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Cn!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#SCy_$d&j#{$Id'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%DfETa(j%<v$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sv%ZvwFYwx(rx!^%Z!^!_*g!_!`Cn!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#SFe`$d&j#u$Id'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Cn!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$2bGp_'y$)`$d&j'wpOYHoYZIuZrHorsIuswHowxKVx!^Ho!^!_LX!_#OHo#O#PIu#P#oHo#o#pLX#p;'SHo;'S;=`Mp<%lOHo*QHv_$d&j'wpOYHoYZIuZrHorsIuswHowxKVx!^Ho!^!_LX!_#OHo#O#PIu#P#oHo#o#pLX#p;'SHo;'S;=`Mp<%lOHo)`IzX$d&jOwIuwx6cx!^Iu!^!_Jg!_#oIu#o#pJg#p;'SIu;'S;=`KP<%lOIu#tJjTOwJgwx7]x;'SJg;'S;=`Jy<%lOJg#tJ|P;=`<%lJg)`KSP;=`<%lIu*QK`]$_#t$d&j'wpOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(r$fL^Z'wpOYLXYZJgZrLXrsJgswLXwxMPx#OLX#O#PJg#P;'SLX;'S;=`Mj<%lOLX$fMWU$_#t'wpOY)rZr)rs#O)r#P;'S)r;'S;=`*Z<%lO)r$fMmP;=`<%lLX*QMsP;=`<%lHo(*QNR_!h(!b$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z!'l! ]_!gM|$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'+h!!ib$d&j'wp'z!b'u#)d#j$IdOY%ZYZ&cZr%Zrs&}sw%Zwx(rxz%Zz{!#q{!^%Z!^!_*g!_!`Cn!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S!#|`$d&j'wp'z!b#g$IdOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Cn!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&-O!%Z`$d&j'wp'z!bk&%`OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Cn!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&C[!&h_!V&;l$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(CS!'rc$d&j'wp'z!by'<nOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!(}!P!Q%Z!Q![!+g![!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z!'d!)Wa$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!*]!P!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z!'d!*h_!UMt$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l!+rg$d&j'wp'z!bl$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!+g![!^%Z!^!_*g!_!g%Z!g!h!-Z!h#O%Z#O#P&c#P#R%Z#R#S!+g#S#X%Z#X#Y!-Z#Y#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l!-dg$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx{%Z{|!.{|}%Z}!O!.{!O!Q%Z!Q![!0a![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!0a#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l!/Uc$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!0a![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!0a#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l!0lc$d&j'wp'z!bl$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![!0a![!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S!0a#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(CS!2Sf$d&j'wp'z!b#h$IdOY!3hYZ&cZr!3hrs!4{sw!3hwx!C}xz!3hz{#$s{!P!3h!P!Q#&Y!Q!^!3h!^!_!Mh!_!`#-x!`!a#/_!a!}!3h!}#O##[#O#P!<w#P#o!3h#o#p!Mh#p;'S!3h;'S;=`#$m<%lO!3h(r!3sb$d&j'wp'z!b!RSOY!3hYZ&cZr!3hrs!4{sw!3hwx!C}x!P!3h!P!Q!Kh!Q!^!3h!^!_!Mh!_!}!3h!}#O##[#O#P!<w#P#o!3h#o#p!Mh#p;'S!3h;'S;=`#$m<%lO!3h(Q!5U`$d&j'z!b!RSOY!4{YZ&cZw!4{wx!6Wx!P!4{!P!Q!=o!Q!^!4{!^!_!?g!_!}!4{!}#O!Bn#O#P!<w#P#o!4{#o#p!?g#p;'S!4{;'S;=`!Cw<%lO!4{&n!6_^$d&j!RSOY!6WYZ&cZ!P!6W!P!Q!7Z!Q!^!6W!^!_!8g!_!}!6W!}#O!;U#O#P!<w#P#o!6W#o#p!8g#p;'S!6W;'S;=`!=i<%lO!6W&n!7ba$d&j!RSO!^&c!_#Z&c#Z#[!7Z#[#]&c#]#^!7Z#^#a&c#a#b!7Z#b#g&c#g#h!7Z#h#i&c#i#j!7Z#j#m&c#m#n!7Z#n#o&c#p;'S&c;'S;=`&w<%lO&cS!8lX!RSOY!8gZ!P!8g!P!Q!9X!Q!}!8g!}#O!9p#O#P!:o#P;'S!8g;'S;=`!;O<%lO!8gS!9^U!RS#Z#[!9X#]#^!9X#a#b!9X#g#h!9X#i#j!9X#m#n!9XS!9sVOY!9pZ#O!9p#O#P!:Y#P#Q!8g#Q;'S!9p;'S;=`!:i<%lO!9pS!:]SOY!9pZ;'S!9p;'S;=`!:i<%lO!9pS!:lP;=`<%l!9pS!:rSOY!8gZ;'S!8g;'S;=`!;O<%lO!8gS!;RP;=`<%l!8g&n!;Z[$d&jOY!;UYZ&cZ!^!;U!^!_!9p!_#O!;U#O#P!<P#P#Q!6W#Q#o!;U#o#p!9p#p;'S!;U;'S;=`!<q<%lO!;U&n!<UX$d&jOY!;UYZ&cZ!^!;U!^!_!9p!_#o!;U#o#p!9p#p;'S!;U;'S;=`!<q<%lO!;U&n!<tP;=`<%l!;U&n!<|X$d&jOY!6WYZ&cZ!^!6W!^!_!8g!_#o!6W#o#p!8g#p;'S!6W;'S;=`!=i<%lO!6W&n!=lP;=`<%l!6W(Q!=xi$d&j'z!b!RSOY&}YZ&cZw&}wx&cx!^&}!^!_'}!_#O&}#O#P&c#P#Z&}#Z#[!=o#[#]&}#]#^!=o#^#a&}#a#b!=o#b#g&}#g#h!=o#h#i&}#i#j!=o#j#m&}#m#n!=o#n#o&}#o#p'}#p;'S&};'S;=`(l<%lO&}!f!?nZ'z!b!RSOY!?gZw!?gwx!8gx!P!?g!P!Q!@a!Q!}!?g!}#O!Ap#O#P!:o#P;'S!?g;'S;=`!Bh<%lO!?g!f!@hb'z!b!RSOY'}Zw'}x#O'}#P#Z'}#Z#[!@a#[#]'}#]#^!@a#^#a'}#a#b!@a#b#g'}#g#h!@a#h#i'}#i#j!@a#j#m'}#m#n!@a#n;'S'};'S;=`(f<%lO'}!f!AuX'z!bOY!ApZw!Apwx!9px#O!Ap#O#P!:Y#P#Q!?g#Q;'S!Ap;'S;=`!Bb<%lO!Ap!f!BeP;=`<%l!Ap!f!BkP;=`<%l!?g(Q!Bu^$d&j'z!bOY!BnYZ&cZw!Bnwx!;Ux!^!Bn!^!_!Ap!_#O!Bn#O#P!<P#P#Q!4{#Q#o!Bn#o#p!Ap#p;'S!Bn;'S;=`!Cq<%lO!Bn(Q!CtP;=`<%l!Bn(Q!CzP;=`<%l!4{'`!DW`$d&j'wp!RSOY!C}YZ&cZr!C}rs!6Ws!P!C}!P!Q!EY!Q!^!C}!^!_!GQ!_!}!C}!}#O!JX#O#P!<w#P#o!C}#o#p!GQ#p;'S!C};'S;=`!Kb<%lO!C}'`!Eci$d&j'wp!RSOY(rYZ&cZr(rrs&cs!^(r!^!_)r!_#O(r#O#P&c#P#Z(r#Z#[!EY#[#](r#]#^!EY#^#a(r#a#b!EY#b#g(r#g#h!EY#h#i(r#i#j!EY#j#m(r#m#n!EY#n#o(r#o#p)r#p;'S(r;'S;=`*a<%lO(rt!GXZ'wp!RSOY!GQZr!GQrs!8gs!P!GQ!P!Q!Gz!Q!}!GQ!}#O!IZ#O#P!:o#P;'S!GQ;'S;=`!JR<%lO!GQt!HRb'wp!RSOY)rZr)rs#O)r#P#Z)r#Z#[!Gz#[#])r#]#^!Gz#^#a)r#a#b!Gz#b#g)r#g#h!Gz#h#i)r#i#j!Gz#j#m)r#m#n!Gz#n;'S)r;'S;=`*Z<%lO)rt!I`X'wpOY!IZZr!IZrs!9ps#O!IZ#O#P!:Y#P#Q!GQ#Q;'S!IZ;'S;=`!I{<%lO!IZt!JOP;=`<%l!IZt!JUP;=`<%l!GQ'`!J`^$d&j'wpOY!JXYZ&cZr!JXrs!;Us!^!JX!^!_!IZ!_#O!JX#O#P!<P#P#Q!C}#Q#o!JX#o#p!IZ#p;'S!JX;'S;=`!K[<%lO!JX'`!K_P;=`<%l!JX'`!KeP;=`<%l!C}(r!Ksk$d&j'wp'z!b!RSOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#Z%Z#Z#[!Kh#[#]%Z#]#^!Kh#^#a%Z#a#b!Kh#b#g%Z#g#h!Kh#h#i%Z#i#j!Kh#j#m%Z#m#n!Kh#n#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#W!Mq]'wp'z!b!RSOY!MhZr!Mhrs!?gsw!Mhwx!GQx!P!Mh!P!Q!Nj!Q!}!Mh!}#O#!U#O#P!:o#P;'S!Mh;'S;=`##U<%lO!Mh#W!Nse'wp'z!b!RSOY*gZr*grs'}sw*gwx)rx#O*g#P#Z*g#Z#[!Nj#[#]*g#]#^!Nj#^#a*g#a#b!Nj#b#g*g#g#h!Nj#h#i*g#i#j!Nj#j#m*g#m#n!Nj#n;'S*g;'S;=`+Z<%lO*g#W#!]Z'wp'z!bOY#!UZr#!Urs!Apsw#!Uwx!IZx#O#!U#O#P!:Y#P#Q!Mh#Q;'S#!U;'S;=`##O<%lO#!U#W##RP;=`<%l#!U#W##XP;=`<%l!Mh(r##e`$d&j'wp'z!bOY##[YZ&cZr##[rs!Bnsw##[wx!JXx!^##[!^!_#!U!_#O##[#O#P!<P#P#Q!3h#Q#o##[#o#p#!U#p;'S##[;'S;=`#$g<%lO##[(r#$jP;=`<%l##[(r#$pP;=`<%l!3h(CS#%Qb$d&j'wp'z!b'o(;d!RSOY!3hYZ&cZr!3hrs!4{sw!3hwx!C}x!P!3h!P!Q!Kh!Q!^!3h!^!_!Mh!_!}!3h!}#O##[#O#P!<w#P#o!3h#o#p!Mh#p;'S!3h;'S;=`#$m<%lO!3h(CS#&e_$d&j'wp'z!bR(;dOY#&YYZ&cZr#&Yrs#'dsw#&Ywx#*tx!^#&Y!^!_#,s!_#O#&Y#O#P#(f#P#o#&Y#o#p#,s#p;'S#&Y;'S;=`#-r<%lO#&Y(Bb#'m]$d&j'z!bR(;dOY#'dYZ&cZw#'dwx#(fx!^#'d!^!_#)w!_#O#'d#O#P#(f#P#o#'d#o#p#)w#p;'S#'d;'S;=`#*n<%lO#'d(AO#(mX$d&jR(;dOY#(fYZ&cZ!^#(f!^!_#)Y!_#o#(f#o#p#)Y#p;'S#(f;'S;=`#)q<%lO#(f(;d#)_SR(;dOY#)YZ;'S#)Y;'S;=`#)k<%lO#)Y(;d#)nP;=`<%l#)Y(AO#)tP;=`<%l#(f(<v#*OW'z!bR(;dOY#)wZw#)wwx#)Yx#O#)w#O#P#)Y#P;'S#)w;'S;=`#*h<%lO#)w(<v#*kP;=`<%l#)w(Bb#*qP;=`<%l#'d(Ap#*}]$d&j'wpR(;dOY#*tYZ&cZr#*trs#(fs!^#*t!^!_#+v!_#O#*t#O#P#(f#P#o#*t#o#p#+v#p;'S#*t;'S;=`#,m<%lO#*t(<U#+}W'wpR(;dOY#+vZr#+vrs#)Ys#O#+v#O#P#)Y#P;'S#+v;'S;=`#,g<%lO#+v(<U#,jP;=`<%l#+v(Ap#,pP;=`<%l#*t(=h#,|Y'wp'z!bR(;dOY#,sZr#,srs#)wsw#,swx#+vx#O#,s#O#P#)Y#P;'S#,s;'S;=`#-l<%lO#,s(=h#-oP;=`<%l#,s(CS#-uP;=`<%l#&Y%#W#.Vb$d&j#{$Id'wp'z!b!RSOY!3hYZ&cZr!3hrs!4{sw!3hwx!C}x!P!3h!P!Q!Kh!Q!^!3h!^!_!Mh!_!}!3h!}#O##[#O#P!<w#P#o!3h#o#p!Mh#p;'S!3h;'S;=`#$m<%lO!3h+h#/lb$T#t$d&j'wp'z!b!RSOY!3hYZ&cZr!3hrs!4{sw!3hwx!C}x!P!3h!P!Q!Kh!Q!^!3h!^!_!Mh!_!}!3h!}#O##[#O#P!<w#P#o!3h#o#p!Mh#p;'S!3h;'S;=`#$m<%lO!3h$/l#1Pp$d&j'wp'z!bl$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!+g!P!Q%Z!Q![#3T![!^%Z!^!_*g!_!g%Z!g!h!-Z!h#O%Z#O#P&c#P#R%Z#R#S#3T#S#U%Z#U#V#6_#V#X%Z#X#Y!-Z#Y#b%Z#b#c#5T#c#d#9g#d#l%Z#l#m#<i#m#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#3`k$d&j'wp'z!bl$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P!+g!P!Q%Z!Q![#3T![!^%Z!^!_*g!_!g%Z!g!h!-Z!h#O%Z#O#P&c#P#R%Z#R#S#3T#S#X%Z#X#Y!-Z#Y#b%Z#b#c#5T#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#5`_$d&j'wp'z!bl$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#6hd$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#7v!R!S#7v!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#7v#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#8Rf$d&j'wp'z!bl$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!R#7v!R!S#7v!S!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#7v#S#b%Z#b#c#5T#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#9pc$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#:{!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#:{#S#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#;We$d&j'wp'z!bl$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q!Y#:{!Y!^%Z!^!_*g!_#O%Z#O#P&c#P#R%Z#R#S#:{#S#b%Z#b#c#5T#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#<rg$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#>Z![!^%Z!^!_*g!_!c%Z!c!i#>Z!i#O%Z#O#P&c#P#R%Z#R#S#>Z#S#T%Z#T#Z#>Z#Z#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z$/l#>fi$d&j'wp'z!bl$'|OY%ZYZ&cZr%Zrs&}sw%Zwx(rx!Q%Z!Q![#>Z![!^%Z!^!_*g!_!c%Z!c!i#>Z!i#O%Z#O#P&c#P#R%Z#R#S#>Z#S#T%Z#T#Z#>Z#Z#b%Z#b#c#5T#c#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%Gh#@b_!a$b$d&j#y%<f'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z)[#Al_^l$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(CS#Bz^'}!*v!e'.r'wp'z!b$U)d(nSOY*gZr*grs'}sw*gwx)rx!P*g!P!Q#Cv!Q!^*g!^!_#Dl!_!`#F^!`#O*g#P;'S*g;'S;=`+Z<%lO*g(n#DPX$f&j'wp'z!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g$Kh#DuZ#k$Id'wp'z!bOY*gZr*grs'}sw*gwx)rx!_*g!_!`#Eh!`#O*g#P;'S*g;'S;=`+Z<%lO*g$Kh#EqX#{$Id'wp'z!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g$Kh#FgX#l$Id'wp'z!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g%Gh#G_a#X%?x$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`0z!`!a#Hd!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#W#Ho_#d$Ih$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%Gh#I}adBf#l$Id$a#|$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`#KS!`!a#L^!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S#K__#l$Id$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S#Lia#k$Id$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Cn!`!a#Mn!a#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S#My`#k$Id$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Cn!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'+h$ Wc(b$Ip$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!O%Z!O!P$!c!P!^%Z!^!_*g!_!a%Z!a!b$#m!b#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z'+`$!n_z'#p$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S$#x`$d&j#v$Id'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Cn!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z#&^$%V_!x!Ln$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(@^$&a_|(8n$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(n$'eZ$d&jO!^$(W!^!_$(n!_#i$(W#i#j$(s#j#l$(W#l#m$*f#m#o$(W#o#p$(n#p;'S$(W;'S;=`$,q<%lO$(W(n$(_T[#S$d&jO!^&c!_#o&c#p;'S&c;'S;=`&w<%lO&c#S$(sO[#S(n$(x[$d&jO!Q&c!Q![$)n![!^&c!_!c&c!c!i$)n!i#T&c#T#Z$)n#Z#o&c#o#p$,U#p;'S&c;'S;=`&w<%lO&c(n$)sZ$d&jO!Q&c!Q![$*f![!^&c!_!c&c!c!i$*f!i#T&c#T#Z$*f#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$*kZ$d&jO!Q&c!Q![$+^![!^&c!_!c&c!c!i$+^!i#T&c#T#Z$+^#Z#o&c#p;'S&c;'S;=`&w<%lO&c(n$+cZ$d&jO!Q&c!Q![$(W![!^&c!_!c&c!c!i$(W!i#T&c#T#Z$(W#Z#o&c#p;'S&c;'S;=`&w<%lO&c#S$,XR!Q![$,b!c!i$,b#T#Z$,b#S$,eS!Q![$,b!c!i$,b#T#Z$,b#q#r$(n(n$,tP;=`<%l$(W!'l$-S_!SM|$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z%#S$.^`#s$Id$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Cn!`#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z&,v$/k_$d&j'wp'z!b(R&%WOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(CS$0yk$d&j'wp'z!b(U!LY't&;d$Y#tOY%ZYZ&cZr%Zrs&}st%Ztu$0juw%Zwx(rx}%Z}!O$2n!O!Q%Z!Q![$0j![!^%Z!^!_*g!_!c%Z!c!}$0j!}#O%Z#O#P&c#P#R%Z#R#S$0j#S#T%Z#T#o$0j#o#p*g#p$g%Z$g;'S$0j;'S;=`$4t<%lO$0j+d$2yk$d&j'wp'z!b$Y#tOY%ZYZ&cZr%Zrs&}st%Ztu$2nuw%Zwx(rx}%Z}!O$2n!O!Q%Z!Q![$2n![!^%Z!^!_*g!_!c%Z!c!}$2n!}#O%Z#O#P&c#P#R%Z#R#S$2n#S#T%Z#T#o$2n#o#p*g#p$g%Z$g;'S$2n;'S;=`$4n<%lO$2n+d$4qP;=`<%l$2n(CS$4wP;=`<%l$0j!5p$5TX!X!3l'wp'z!bOY*gZr*grs'}sw*gwx)rx#O*g#P;'S*g;'S;=`+Z<%lO*g%Df$5{a(i%<v$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_!`Cn!`#O%Z#O#P&c#P#o%Z#o#p*g#p#q$#m#q;'S%Z;'S;=`+a<%lO%Z%#`$7__!W$I`o`$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(r$8i_!mS$d&j'wp'z!bOY%ZYZ&cZr%Zrs&}sw%Zwx(rx!^%Z!^!_*g!_#O%Z#O#P&c#P#o%Z#o#p*g#p;'S%Z;'S;=`+a<%lO%Z(CS$9y|$d&j'wp'z!b'm(;d(U!LY't&;d$W#tOX%ZXY+gYZ&cZ[+g[p%Zpq+gqr%Zrs&}st%Ztu>Puw%Zwx(rx}%Z}!O@T!O!Q%Z!Q![>P![!^%Z!^!_*g!_!c%Z!c!}>P!}#O%Z#O#P&c#P#R%Z#R#S>P#S#T%Z#T#o>P#o#p*g#p$f%Z$f$g+g$g#BY>P#BY#BZ$9h#BZ$IS>P$IS$I_$9h$I_$JT>P$JT$JU$9h$JU$KV>P$KV$KW$9h$KW&FU>P&FU&FV$9h&FV;'S>P;'S;=`BZ<%l?HT>P?HT?HU$9h?HUO>P(CS$=Uk$d&j'wp'z!b'n(;d(U!LY't&;d$W#tOY%ZYZ&cZr%Zrs&}st%Ztu>Puw%Zwx(rx}%Z}!O@T!O!Q%Z!Q![>P![!^%Z!^!_*g!_!c%Z!c!}>P!}#O%Z#O#P&c#P#R%Z#R#S>P#S#T%Z#T#o>P#o#p*g#p$g%Z$g;'S>P;'S;=`BZ<%lO>P",
     tokenizers: [noSemicolon, incdecToken, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, insertSemicolon, new LocalTokenGroup("$S~RRtu[#O#Pg#S#T#|~_P#o#pb~gOq~~jVO#i!P#i#j!U#j#l!P#l#m!q#m;'S!P;'S;=`#v<%lO!P~!UO!O~~!XS!Q![!e!c!i!e#T#Z!e#o#p#Z~!hR!Q![!q!c!i!q#T#Z!q~!tR!Q![!}!c!i!}#T#Z!}~#QR!Q![!P!c!i!P#T#Z!P~#^R!Q![#g!c!i#g#T#Z#g~#jS!Q![#g!c!i#g#T#Z#g#q#r!P~#yP;=`<%l!P~$RO(T~~", 141, 326), new LocalTokenGroup("j~RQYZXz{^~^O'q~~aP!P!Qd~iO'r~~", 25, 308)],
     topRules: {"Script":[0,5],"SingleExpression":[1,266],"SingleClassItem":[2,267]},
     dialects: {jsx: 12686, ts: 12688},
     dynamicPrecedences: {"76":1,"78":1,"163":1,"191":1},
     specialized: [{term: 312, get: value => spec_identifier$6[value] || -1},{term: 328, get: value => spec_word[value] || -1},{term: 67, get: value => spec_LessThan[value] || -1}],
     tokenPrec: 12712
   });

   /**
   A collection of JavaScript-related
   [snippets](https://codemirror.net/6/docs/ref/#autocomplete.snippet).
   */
   const snippets$1 = [
       /*@__PURE__*/snippetCompletion("function ${name}(${params}) {\n\t${}\n}", {
           label: "function",
           detail: "definition",
           type: "keyword"
       }),
       /*@__PURE__*/snippetCompletion("for (let ${index} = 0; ${index} < ${bound}; ${index}++) {\n\t${}\n}", {
           label: "for",
           detail: "loop",
           type: "keyword"
       }),
       /*@__PURE__*/snippetCompletion("for (let ${name} of ${collection}) {\n\t${}\n}", {
           label: "for",
           detail: "of loop",
           type: "keyword"
       }),
       /*@__PURE__*/snippetCompletion("do {\n\t${}\n} while (${})", {
           label: "do",
           detail: "loop",
           type: "keyword"
       }),
       /*@__PURE__*/snippetCompletion("while (${}) {\n\t${}\n}", {
           label: "while",
           detail: "loop",
           type: "keyword"
       }),
       /*@__PURE__*/snippetCompletion("try {\n\t${}\n} catch (${error}) {\n\t${}\n}", {
           label: "try",
           detail: "/ catch block",
           type: "keyword"
       }),
       /*@__PURE__*/snippetCompletion("if (${}) {\n\t${}\n}", {
           label: "if",
           detail: "block",
           type: "keyword"
       }),
       /*@__PURE__*/snippetCompletion("if (${}) {\n\t${}\n} else {\n\t${}\n}", {
           label: "if",
           detail: "/ else block",
           type: "keyword"
       }),
       /*@__PURE__*/snippetCompletion("class ${name} {\n\tconstructor(${params}) {\n\t\t${}\n\t}\n}", {
           label: "class",
           detail: "definition",
           type: "keyword"
       }),
       /*@__PURE__*/snippetCompletion("import {${names}} from \"${module}\"\n${}", {
           label: "import",
           detail: "named",
           type: "keyword"
       }),
       /*@__PURE__*/snippetCompletion("import ${name} from \"${module}\"\n${}", {
           label: "import",
           detail: "default",
           type: "keyword"
       })
   ];

   const cache$1 = /*@__PURE__*/new NodeWeakMap();
   const ScopeNodes$1 = /*@__PURE__*/new Set([
       "Script", "Block",
       "FunctionExpression", "FunctionDeclaration", "ArrowFunction", "MethodDeclaration",
       "ForStatement"
   ]);
   function defID$1(type) {
       return (node, def) => {
           let id = node.node.getChild("VariableDefinition");
           if (id)
               def(id, type);
           return true;
       };
   }
   const functionContext = ["FunctionDeclaration"];
   const gatherCompletions$1 = {
       FunctionDeclaration: /*@__PURE__*/defID$1("function"),
       ClassDeclaration: /*@__PURE__*/defID$1("class"),
       ClassExpression: () => true,
       EnumDeclaration: /*@__PURE__*/defID$1("constant"),
       TypeAliasDeclaration: /*@__PURE__*/defID$1("type"),
       NamespaceDeclaration: /*@__PURE__*/defID$1("namespace"),
       VariableDefinition(node, def) { if (!node.matchContext(functionContext))
           def(node, "variable"); },
       TypeDefinition(node, def) { def(node, "type"); },
       __proto__: null
   };
   function getScope$1(doc, node) {
       let cached = cache$1.get(node);
       if (cached)
           return cached;
       let completions = [], top = true;
       function def(node, type) {
           let name = doc.sliceString(node.from, node.to);
           completions.push({ label: name, type });
       }
       node.cursor(IterMode.IncludeAnonymous).iterate(node => {
           if (top) {
               top = false;
           }
           else if (node.name) {
               let gather = gatherCompletions$1[node.name];
               if (gather && gather(node, def) || ScopeNodes$1.has(node.name))
                   return false;
           }
           else if (node.to - node.from > 8192) {
               // Allow caching for bigger internal nodes
               for (let c of getScope$1(doc, node.node))
                   completions.push(c);
               return false;
           }
       });
       cache$1.set(node, completions);
       return completions;
   }
   const Identifier$4 = /^[\w$\xa1-\uffff][\w$\d\xa1-\uffff]*$/;
   const dontComplete$1 = [
       "TemplateString", "String", "RegExp",
       "LineComment", "BlockComment",
       "VariableDefinition", "TypeDefinition", "Label",
       "PropertyDefinition", "PropertyName",
       "PrivatePropertyDefinition", "PrivatePropertyName",
       ".", "?."
   ];
   /**
   Completion source that looks up locally defined names in
   JavaScript code.
   */
   function localCompletionSource$1(context) {
       let inner = syntaxTree(context.state).resolveInner(context.pos, -1);
       if (dontComplete$1.indexOf(inner.name) > -1)
           return null;
       let isWord = inner.name == "VariableName" ||
           inner.to - inner.from < 20 && Identifier$4.test(context.state.sliceDoc(inner.from, inner.to));
       if (!isWord && !context.explicit)
           return null;
       let options = [];
       for (let pos = inner; pos; pos = pos.parent) {
           if (ScopeNodes$1.has(pos.name))
               options = options.concat(getScope$1(context.state.doc, pos));
       }
       return {
           options,
           from: isWord ? inner.from : context.pos,
           validFor: Identifier$4
       };
   }
   function pathFor$1(read, member, name) {
       var _a;
       let path = [];
       for (;;) {
           let obj = member.firstChild, prop;
           if ((obj === null || obj === void 0 ? void 0 : obj.name) == "VariableName") {
               path.push(read(obj));
               return { path: path.reverse(), name };
           }
           else if ((obj === null || obj === void 0 ? void 0 : obj.name) == "MemberExpression" && ((_a = (prop = obj.lastChild)) === null || _a === void 0 ? void 0 : _a.name) == "PropertyName") {
               path.push(read(prop));
               member = obj;
           }
           else {
               return null;
           }
       }
   }
   /**
   Helper function for defining JavaScript completion sources. It
   returns the completable name and object path for a completion
   context, or null if no name/property completion should happen at
   that position. For example, when completing after `a.b.c` it will
   return `{path: ["a", "b"], name: "c"}`. When completing after `x`
   it will return `{path: [], name: "x"}`. When not in a property or
   name, it will return null if `context.explicit` is false, and
   `{path: [], name: ""}` otherwise.
   */
   function completionPath(context) {
       let read = (node) => context.state.doc.sliceString(node.from, node.to);
       let inner = syntaxTree(context.state).resolveInner(context.pos, -1);
       if (inner.name == "PropertyName") {
           return pathFor$1(read, inner.parent, read(inner));
       }
       else if ((inner.name == "." || inner.name == "?.") && inner.parent.name == "MemberExpression") {
           return pathFor$1(read, inner.parent, "");
       }
       else if (dontComplete$1.indexOf(inner.name) > -1) {
           return null;
       }
       else if (inner.name == "VariableName" || inner.to - inner.from < 20 && Identifier$4.test(read(inner))) {
           return { path: [], name: read(inner) };
       }
       else if (inner.name == "MemberExpression") {
           return pathFor$1(read, inner, "");
       }
       else {
           return context.explicit ? { path: [], name: "" } : null;
       }
   }
   function enumeratePropertyCompletions(obj, top) {
       let options = [], seen = new Set;
       for (let depth = 0;; depth++) {
           for (let name of (Object.getOwnPropertyNames || Object.keys)(obj)) {
               if (!/^[a-zA-Z_$][\w$]*$/.test(name) || seen.has(name))
                   continue;
               seen.add(name);
               let value;
               try {
                   value = obj[name];
               }
               catch (_) {
                   continue;
               }
               options.push({
                   label: name,
                   type: typeof value == "function" ? (/^[A-Z]/.test(name) ? "class" : top ? "function" : "method")
                       : top ? "variable" : "property",
                   boost: -depth
               });
           }
           let next = Object.getPrototypeOf(obj);
           if (!next)
               return options;
           obj = next;
       }
   }
   /**
   Defines a [completion source](https://codemirror.net/6/docs/ref/#autocomplete.CompletionSource) that
   completes from the given scope object (for example `globalThis`).
   Will enter properties of the object when completing properties on
   a directly-named path.
   */
   function scopeCompletionSource(scope) {
       let cache = new Map;
       return (context) => {
           let path = completionPath(context);
           if (!path)
               return null;
           let target = scope;
           for (let step of path.path) {
               target = target[step];
               if (!target)
                   return null;
           }
           let options = cache.get(target);
           if (!options)
               cache.set(target, options = enumeratePropertyCompletions(target, !path.path.length));
           return {
               from: context.pos - path.name.length,
               options,
               validFor: Identifier$4
           };
       };
   }

   /**
   A language provider based on the [Lezer JavaScript
   parser](https://github.com/lezer-parser/javascript), extended with
   highlighting and indentation information.
   */
   const javascriptLanguage = /*@__PURE__*/LRLanguage.define({
       name: "javascript",
       parser: /*@__PURE__*/parser$d.configure({
           props: [
               /*@__PURE__*/indentNodeProp.add({
                   IfStatement: /*@__PURE__*/continuedIndent({ except: /^\s*({|else\b)/ }),
                   TryStatement: /*@__PURE__*/continuedIndent({ except: /^\s*({|catch\b|finally\b)/ }),
                   LabeledStatement: flatIndent,
                   SwitchBody: context => {
                       let after = context.textAfter, closed = /^\s*\}/.test(after), isCase = /^\s*(case|default)\b/.test(after);
                       return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;
                   },
                   Block: /*@__PURE__*/delimitedIndent({ closing: "}" }),
                   ArrowFunction: cx => cx.baseIndent + cx.unit,
                   "TemplateString BlockComment": () => null,
                   "Statement Property": /*@__PURE__*/continuedIndent({ except: /^{/ }),
                   JSXElement(context) {
                       let closed = /^\s*<\//.test(context.textAfter);
                       return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);
                   },
                   JSXEscape(context) {
                       let closed = /\s*\}/.test(context.textAfter);
                       return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);
                   },
                   "JSXOpenTag JSXSelfClosingTag"(context) {
                       return context.column(context.node.from) + context.unit;
                   }
               }),
               /*@__PURE__*/foldNodeProp.add({
                   "Block ClassBody SwitchBody EnumBody ObjectExpression ArrayExpression ObjectType": foldInside,
                   BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; }
               })
           ]
       }),
       languageData: {
           closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] },
           commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
           indentOnInput: /^\s*(?:case |default:|\{|\}|<\/)$/,
           wordChars: "$"
       }
   });
   const jsxSublanguage = {
       test: node => /^JSX/.test(node.name),
       facet: /*@__PURE__*/defineLanguageFacet({ commentTokens: { block: { open: "{/*", close: "*/}" } } })
   };
   /**
   A language provider for TypeScript.
   */
   const typescriptLanguage = /*@__PURE__*/javascriptLanguage.configure({ dialect: "ts" }, "typescript");
   /**
   Language provider for JSX.
   */
   const jsxLanguage = /*@__PURE__*/javascriptLanguage.configure({
       dialect: "jsx",
       props: [/*@__PURE__*/sublanguageProp.add(n => n.isTop ? [jsxSublanguage] : undefined)]
   });
   /**
   Language provider for JSX + TypeScript.
   */
   const tsxLanguage = /*@__PURE__*/javascriptLanguage.configure({
       dialect: "jsx ts",
       props: [/*@__PURE__*/sublanguageProp.add(n => n.isTop ? [jsxSublanguage] : undefined)]
   }, "typescript");
   const keywords$I = /*@__PURE__*/"break case const continue default delete export extends false finally in instanceof let new return static super switch this throw true typeof var yield".split(" ").map(kw => ({ label: kw, type: "keyword" }));
   /**
   JavaScript support. Includes [snippet](https://codemirror.net/6/docs/ref/#lang-javascript.snippets)
   completion.
   */
   function javascript$2(config = {}) {
       let lang = config.jsx ? (config.typescript ? tsxLanguage : jsxLanguage)
           : config.typescript ? typescriptLanguage : javascriptLanguage;
       return new LanguageSupport(lang, [
           javascriptLanguage.data.of({
               autocomplete: ifNotIn(dontComplete$1, completeFromList(snippets$1.concat(keywords$I)))
           }),
           javascriptLanguage.data.of({
               autocomplete: localCompletionSource$1
           }),
           config.jsx ? autoCloseTags$1 : [],
       ]);
   }
   function findOpenTag(node) {
       for (;;) {
           if (node.name == "JSXOpenTag" || node.name == "JSXSelfClosingTag" || node.name == "JSXFragmentTag")
               return node;
           if (node.name == "JSXEscape" || !node.parent)
               return null;
           node = node.parent;
       }
   }
   function elementName$2(doc, tree, max = doc.length) {
       for (let ch = tree === null || tree === void 0 ? void 0 : tree.firstChild; ch; ch = ch.nextSibling) {
           if (ch.name == "JSXIdentifier" || ch.name == "JSXBuiltin" || ch.name == "JSXNamespacedName" ||
               ch.name == "JSXMemberExpression")
               return doc.sliceString(ch.from, Math.min(ch.to, max));
       }
       return "";
   }
   function isEndTag(node) {
       return node && (node.name == "JSXEndTag" || node.name == "JSXSelfCloseEndTag");
   }
   const android = typeof navigator == "object" && /*@__PURE__*//Android\b/.test(navigator.userAgent);
   /**
   Extension that will automatically insert JSX close tags when a `>` or
   `/` is typed.
   */
   const autoCloseTags$1 = /*@__PURE__*/EditorView.inputHandler.of((view, from, to, text) => {
       if ((android ? view.composing : view.compositionStarted) || view.state.readOnly ||
           from != to || (text != ">" && text != "/") ||
           !javascriptLanguage.isActiveAt(view.state, from, -1))
           return false;
       let { state } = view;
       let changes = state.changeByRange(range => {
           var _a;
           let { head } = range, around = syntaxTree(state).resolveInner(head, -1), name;
           if (around.name == "JSXStartTag")
               around = around.parent;
           if (around.name == "JSXAttributeValue" && around.to > head) ;
           else if (text == ">" && around.name == "JSXFragmentTag") {
               return { range: EditorSelection.cursor(head + 1), changes: { from: head, insert: `></>` } };
           }
           else if (text == "/" && around.name == "JSXFragmentTag") {
               let empty = around.parent, base = empty === null || empty === void 0 ? void 0 : empty.parent;
               if (empty.from == head - 1 && ((_a = base.lastChild) === null || _a === void 0 ? void 0 : _a.name) != "JSXEndTag" &&
                   (name = elementName$2(state.doc, base === null || base === void 0 ? void 0 : base.firstChild, head))) {
                   let insert = `/${name}>`;
                   return { range: EditorSelection.cursor(head + insert.length), changes: { from: head, insert } };
               }
           }
           else if (text == ">") {
               let openTag = findOpenTag(around);
               if (openTag && !isEndTag(openTag.lastChild) &&
                   state.sliceDoc(head, head + 2) != "</" &&
                   (name = elementName$2(state.doc, openTag, head)))
                   return { range: EditorSelection.cursor(head + 1), changes: { from: head, insert: `></${name}>` } };
           }
           return { range };
       });
       if (changes.changes.empty)
           return false;
       view.dispatch(changes, { userEvent: "input.type", scrollIntoView: true });
       return true;
   });

   /**
   Connects an [ESLint](https://eslint.org/) linter to CodeMirror's
   [lint](https://codemirror.net/6/docs/ref/#lint) integration. `eslint` should be an instance of the
   [`Linter`](https://eslint.org/docs/developer-guide/nodejs-api#linter)
   class, and `config` an optional ESLint configuration. The return
   value of this function can be passed to [`linter`](https://codemirror.net/6/docs/ref/#lint.linter)
   to create a JavaScript linting extension.

   Note that ESLint targets node, and is tricky to run in the
   browser. The
   [eslint-linter-browserify](https://github.com/UziTech/eslint-linter-browserify)
   package may help with that (see
   [example](https://github.com/UziTech/eslint-linter-browserify/blob/master/example/script.js)).
   */
   function esLint(eslint, config) {
       if (!config) {
           config = {
               parserOptions: { ecmaVersion: 2019, sourceType: "module" },
               env: { browser: true, node: true, es6: true, es2015: true, es2017: true, es2020: true },
               rules: {}
           };
           eslint.getRules().forEach((desc, name) => {
               if (desc.meta.docs.recommended)
                   config.rules[name] = 2;
           });
       }
       return (view) => {
           let { state } = view, found = [];
           for (let { from, to } of javascriptLanguage.findRegions(state)) {
               let fromLine = state.doc.lineAt(from), offset = { line: fromLine.number - 1, col: from - fromLine.from, pos: from };
               for (let d of eslint.verify(state.sliceDoc(from, to), config))
                   found.push(translateDiagnostic(d, state.doc, offset));
           }
           return found;
       };
   }
   function mapPos(line, col, doc, offset) {
       return doc.line(line + offset.line).from + col + (line == 1 ? offset.col - 1 : -1);
   }
   function translateDiagnostic(input, doc, offset) {
       let start = mapPos(input.line, input.column, doc, offset);
       let result = {
           from: start,
           to: input.endLine != null && input.endColumn != 1 ? mapPos(input.endLine, input.endColumn, doc, offset) : start,
           message: input.message,
           source: input.ruleId ? "eslint:" + input.ruleId : "eslint",
           severity: input.severity == 1 ? "warning" : "error",
       };
       if (input.fix) {
           let { range, text } = input.fix, from = range[0] + offset.pos - start, to = range[1] + offset.pos - start;
           result.actions = [{
                   name: "fix",
                   apply(view, start) {
                       view.dispatch({ changes: { from: start + from, to: start + to, insert: text }, scrollIntoView: true });
                   }
               }];
       }
       return result;
   }

   var index$g = /*#__PURE__*/Object.freeze({
      __proto__: null,
      autoCloseTags: autoCloseTags$1,
      completionPath: completionPath,
      esLint: esLint,
      javascript: javascript$2,
      javascriptLanguage: javascriptLanguage,
      jsxLanguage: jsxLanguage,
      localCompletionSource: localCompletionSource$1,
      scopeCompletionSource: scopeCompletionSource,
      snippets: snippets$1,
      tsxLanguage: tsxLanguage,
      typescriptLanguage: typescriptLanguage
   });

   const Targets = ["_blank", "_self", "_top", "_parent"];
   const Charsets = ["ascii", "utf-8", "utf-16", "latin1", "latin1"];
   const Methods = ["get", "post", "put", "delete"];
   const Encs = ["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"];
   const Bool$1 = ["true", "false"];
   const S = {}; // Empty tag spec
   const Tags = {
       a: {
           attrs: {
               href: null, ping: null, type: null,
               media: null,
               target: Targets,
               hreflang: null
           }
       },
       abbr: S,
       address: S,
       area: {
           attrs: {
               alt: null, coords: null, href: null, target: null, ping: null,
               media: null, hreflang: null, type: null,
               shape: ["default", "rect", "circle", "poly"]
           }
       },
       article: S,
       aside: S,
       audio: {
           attrs: {
               src: null, mediagroup: null,
               crossorigin: ["anonymous", "use-credentials"],
               preload: ["none", "metadata", "auto"],
               autoplay: ["autoplay"],
               loop: ["loop"],
               controls: ["controls"]
           }
       },
       b: S,
       base: { attrs: { href: null, target: Targets } },
       bdi: S,
       bdo: S,
       blockquote: { attrs: { cite: null } },
       body: S,
       br: S,
       button: {
           attrs: {
               form: null, formaction: null, name: null, value: null,
               autofocus: ["autofocus"],
               disabled: ["autofocus"],
               formenctype: Encs,
               formmethod: Methods,
               formnovalidate: ["novalidate"],
               formtarget: Targets,
               type: ["submit", "reset", "button"]
           }
       },
       canvas: { attrs: { width: null, height: null } },
       caption: S,
       center: S,
       cite: S,
       code: S,
       col: { attrs: { span: null } },
       colgroup: { attrs: { span: null } },
       command: {
           attrs: {
               type: ["command", "checkbox", "radio"],
               label: null, icon: null, radiogroup: null, command: null, title: null,
               disabled: ["disabled"],
               checked: ["checked"]
           }
       },
       data: { attrs: { value: null } },
       datagrid: { attrs: { disabled: ["disabled"], multiple: ["multiple"] } },
       datalist: { attrs: { data: null } },
       dd: S,
       del: { attrs: { cite: null, datetime: null } },
       details: { attrs: { open: ["open"] } },
       dfn: S,
       div: S,
       dl: S,
       dt: S,
       em: S,
       embed: { attrs: { src: null, type: null, width: null, height: null } },
       eventsource: { attrs: { src: null } },
       fieldset: { attrs: { disabled: ["disabled"], form: null, name: null } },
       figcaption: S,
       figure: S,
       footer: S,
       form: {
           attrs: {
               action: null, name: null,
               "accept-charset": Charsets,
               autocomplete: ["on", "off"],
               enctype: Encs,
               method: Methods,
               novalidate: ["novalidate"],
               target: Targets
           }
       },
       h1: S, h2: S, h3: S, h4: S, h5: S, h6: S,
       head: {
           children: ["title", "base", "link", "style", "meta", "script", "noscript", "command"]
       },
       header: S,
       hgroup: S,
       hr: S,
       html: {
           attrs: { manifest: null }
       },
       i: S,
       iframe: {
           attrs: {
               src: null, srcdoc: null, name: null, width: null, height: null,
               sandbox: ["allow-top-navigation", "allow-same-origin", "allow-forms", "allow-scripts"],
               seamless: ["seamless"]
           }
       },
       img: {
           attrs: {
               alt: null, src: null, ismap: null, usemap: null, width: null, height: null,
               crossorigin: ["anonymous", "use-credentials"]
           }
       },
       input: {
           attrs: {
               alt: null, dirname: null, form: null, formaction: null,
               height: null, list: null, max: null, maxlength: null, min: null,
               name: null, pattern: null, placeholder: null, size: null, src: null,
               step: null, value: null, width: null,
               accept: ["audio/*", "video/*", "image/*"],
               autocomplete: ["on", "off"],
               autofocus: ["autofocus"],
               checked: ["checked"],
               disabled: ["disabled"],
               formenctype: Encs,
               formmethod: Methods,
               formnovalidate: ["novalidate"],
               formtarget: Targets,
               multiple: ["multiple"],
               readonly: ["readonly"],
               required: ["required"],
               type: ["hidden", "text", "search", "tel", "url", "email", "password", "datetime", "date", "month",
                   "week", "time", "datetime-local", "number", "range", "color", "checkbox", "radio",
                   "file", "submit", "image", "reset", "button"]
           }
       },
       ins: { attrs: { cite: null, datetime: null } },
       kbd: S,
       keygen: {
           attrs: {
               challenge: null, form: null, name: null,
               autofocus: ["autofocus"],
               disabled: ["disabled"],
               keytype: ["RSA"]
           }
       },
       label: { attrs: { for: null, form: null } },
       legend: S,
       li: { attrs: { value: null } },
       link: {
           attrs: {
               href: null, type: null,
               hreflang: null,
               media: null,
               sizes: ["all", "16x16", "16x16 32x32", "16x16 32x32 64x64"]
           }
       },
       map: { attrs: { name: null } },
       mark: S,
       menu: { attrs: { label: null, type: ["list", "context", "toolbar"] } },
       meta: {
           attrs: {
               content: null,
               charset: Charsets,
               name: ["viewport", "application-name", "author", "description", "generator", "keywords"],
               "http-equiv": ["content-language", "content-type", "default-style", "refresh"]
           }
       },
       meter: { attrs: { value: null, min: null, low: null, high: null, max: null, optimum: null } },
       nav: S,
       noscript: S,
       object: {
           attrs: {
               data: null, type: null, name: null, usemap: null, form: null, width: null, height: null,
               typemustmatch: ["typemustmatch"]
           }
       },
       ol: { attrs: { reversed: ["reversed"], start: null, type: ["1", "a", "A", "i", "I"] },
           children: ["li", "script", "template", "ul", "ol"] },
       optgroup: { attrs: { disabled: ["disabled"], label: null } },
       option: { attrs: { disabled: ["disabled"], label: null, selected: ["selected"], value: null } },
       output: { attrs: { for: null, form: null, name: null } },
       p: S,
       param: { attrs: { name: null, value: null } },
       pre: S,
       progress: { attrs: { value: null, max: null } },
       q: { attrs: { cite: null } },
       rp: S,
       rt: S,
       ruby: S,
       samp: S,
       script: {
           attrs: {
               type: ["text/javascript"],
               src: null,
               async: ["async"],
               defer: ["defer"],
               charset: Charsets
           }
       },
       section: S,
       select: {
           attrs: {
               form: null, name: null, size: null,
               autofocus: ["autofocus"],
               disabled: ["disabled"],
               multiple: ["multiple"]
           }
       },
       slot: { attrs: { name: null } },
       small: S,
       source: { attrs: { src: null, type: null, media: null } },
       span: S,
       strong: S,
       style: {
           attrs: {
               type: ["text/css"],
               media: null,
               scoped: null
           }
       },
       sub: S,
       summary: S,
       sup: S,
       table: S,
       tbody: S,
       td: { attrs: { colspan: null, rowspan: null, headers: null } },
       template: S,
       textarea: {
           attrs: {
               dirname: null, form: null, maxlength: null, name: null, placeholder: null,
               rows: null, cols: null,
               autofocus: ["autofocus"],
               disabled: ["disabled"],
               readonly: ["readonly"],
               required: ["required"],
               wrap: ["soft", "hard"]
           }
       },
       tfoot: S,
       th: { attrs: { colspan: null, rowspan: null, headers: null, scope: ["row", "col", "rowgroup", "colgroup"] } },
       thead: S,
       time: { attrs: { datetime: null } },
       title: S,
       tr: S,
       track: {
           attrs: {
               src: null, label: null, default: null,
               kind: ["subtitles", "captions", "descriptions", "chapters", "metadata"],
               srclang: null
           }
       },
       ul: { children: ["li", "script", "template", "ul", "ol"] },
       var: S,
       video: {
           attrs: {
               src: null, poster: null, width: null, height: null,
               crossorigin: ["anonymous", "use-credentials"],
               preload: ["auto", "metadata", "none"],
               autoplay: ["autoplay"],
               mediagroup: ["movie"],
               muted: ["muted"],
               controls: ["controls"]
           }
       },
       wbr: S
   };
   const GlobalAttrs = {
       accesskey: null,
       class: null,
       contenteditable: Bool$1,
       contextmenu: null,
       dir: ["ltr", "rtl", "auto"],
       draggable: ["true", "false", "auto"],
       dropzone: ["copy", "move", "link", "string:", "file:"],
       hidden: ["hidden"],
       id: null,
       inert: ["inert"],
       itemid: null,
       itemprop: null,
       itemref: null,
       itemscope: ["itemscope"],
       itemtype: null,
       lang: ["ar", "bn", "de", "en-GB", "en-US", "es", "fr", "hi", "id", "ja", "pa", "pt", "ru", "tr", "zh"],
       spellcheck: Bool$1,
       autocorrect: Bool$1,
       autocapitalize: Bool$1,
       style: null,
       tabindex: null,
       title: null,
       translate: ["yes", "no"],
       rel: ["stylesheet", "alternate", "author", "bookmark", "help", "license", "next", "nofollow", "noreferrer", "prefetch", "prev", "search", "tag"],
       role: /*@__PURE__*/"alert application article banner button cell checkbox complementary contentinfo dialog document feed figure form grid gridcell heading img list listbox listitem main navigation region row rowgroup search switch tab table tabpanel textbox timer".split(" "),
       "aria-activedescendant": null,
       "aria-atomic": Bool$1,
       "aria-autocomplete": ["inline", "list", "both", "none"],
       "aria-busy": Bool$1,
       "aria-checked": ["true", "false", "mixed", "undefined"],
       "aria-controls": null,
       "aria-describedby": null,
       "aria-disabled": Bool$1,
       "aria-dropeffect": null,
       "aria-expanded": ["true", "false", "undefined"],
       "aria-flowto": null,
       "aria-grabbed": ["true", "false", "undefined"],
       "aria-haspopup": Bool$1,
       "aria-hidden": Bool$1,
       "aria-invalid": ["true", "false", "grammar", "spelling"],
       "aria-label": null,
       "aria-labelledby": null,
       "aria-level": null,
       "aria-live": ["off", "polite", "assertive"],
       "aria-multiline": Bool$1,
       "aria-multiselectable": Bool$1,
       "aria-owns": null,
       "aria-posinset": null,
       "aria-pressed": ["true", "false", "mixed", "undefined"],
       "aria-readonly": Bool$1,
       "aria-relevant": null,
       "aria-required": Bool$1,
       "aria-selected": ["true", "false", "undefined"],
       "aria-setsize": null,
       "aria-sort": ["ascending", "descending", "none", "other"],
       "aria-valuemax": null,
       "aria-valuemin": null,
       "aria-valuenow": null,
       "aria-valuetext": null
   };
   const eventAttributes = /*@__PURE__*/("beforeunload copy cut dragstart dragover dragleave dragenter dragend " +
       "drag paste focus blur change click load mousedown mouseenter mouseleave " +
       "mouseup keydown keyup resize scroll unload").split(" ").map(n => "on" + n);
   for (let a of eventAttributes)
       GlobalAttrs[a] = null;
   let Schema$1 = class Schema {
       constructor(extraTags, extraAttrs) {
           this.tags = Object.assign(Object.assign({}, Tags), extraTags);
           this.globalAttrs = Object.assign(Object.assign({}, GlobalAttrs), extraAttrs);
           this.allTags = Object.keys(this.tags);
           this.globalAttrNames = Object.keys(this.globalAttrs);
       }
   };
   Schema$1.default = /*@__PURE__*/new Schema$1;
   function elementName$1(doc, tree, max = doc.length) {
       if (!tree)
           return "";
       let tag = tree.firstChild;
       let name = tag && tag.getChild("TagName");
       return name ? doc.sliceString(name.from, Math.min(name.to, max)) : "";
   }
   function findParentElement$1(tree, skip = false) {
       for (let cur = tree.parent; cur; cur = cur.parent)
           if (cur.name == "Element") {
               if (skip)
                   skip = false;
               else
                   return cur;
           }
       return null;
   }
   function allowedChildren(doc, tree, schema) {
       let parentInfo = schema.tags[elementName$1(doc, findParentElement$1(tree, true))];
       return (parentInfo === null || parentInfo === void 0 ? void 0 : parentInfo.children) || schema.allTags;
   }
   function openTags(doc, tree) {
       let open = [];
       for (let parent = tree; parent = findParentElement$1(parent);) {
           let tagName = elementName$1(doc, parent);
           if (tagName && parent.lastChild.name == "CloseTag")
               break;
           if (tagName && open.indexOf(tagName) < 0 && (tree.name == "EndTag" || tree.from >= parent.firstChild.to))
               open.push(tagName);
       }
       return open;
   }
   const identifier$3 = /^[:\-\.\w\u00b7-\uffff]*$/;
   function completeTag(state, schema, tree, from, to) {
       let end = /\s*>/.test(state.sliceDoc(to, to + 5)) ? "" : ">";
       return { from, to,
           options: allowedChildren(state.doc, tree, schema).map(tagName => ({ label: tagName, type: "type" })).concat(openTags(state.doc, tree).map((tag, i) => ({ label: "/" + tag, apply: "/" + tag + end,
               type: "type", boost: 99 - i }))),
           validFor: /^\/?[:\-\.\w\u00b7-\uffff]*$/ };
   }
   function completeCloseTag(state, tree, from, to) {
       let end = /\s*>/.test(state.sliceDoc(to, to + 5)) ? "" : ">";
       return { from, to,
           options: openTags(state.doc, tree).map((tag, i) => ({ label: tag, apply: tag + end, type: "type", boost: 99 - i })),
           validFor: identifier$3 };
   }
   function completeStartTag(state, schema, tree, pos) {
       let options = [], level = 0;
       for (let tagName of allowedChildren(state.doc, tree, schema))
           options.push({ label: "<" + tagName, type: "type" });
       for (let open of openTags(state.doc, tree))
           options.push({ label: "</" + open + ">", type: "type", boost: 99 - level++ });
       return { from: pos, to: pos, options, validFor: /^<\/?[:\-\.\w\u00b7-\uffff]*$/ };
   }
   function completeAttrName(state, schema, tree, from, to) {
       let elt = findParentElement$1(tree), info = elt ? schema.tags[elementName$1(state.doc, elt)] : null;
       let localAttrs = info && info.attrs ? Object.keys(info.attrs) : [];
       let names = info && info.globalAttrs === false ? localAttrs
           : localAttrs.length ? localAttrs.concat(schema.globalAttrNames) : schema.globalAttrNames;
       return { from, to,
           options: names.map(attrName => ({ label: attrName, type: "property" })),
           validFor: identifier$3 };
   }
   function completeAttrValue(state, schema, tree, from, to) {
       var _a;
       let nameNode = (_a = tree.parent) === null || _a === void 0 ? void 0 : _a.getChild("AttributeName");
       let options = [], token = undefined;
       if (nameNode) {
           let attrName = state.sliceDoc(nameNode.from, nameNode.to);
           let attrs = schema.globalAttrs[attrName];
           if (!attrs) {
               let elt = findParentElement$1(tree), info = elt ? schema.tags[elementName$1(state.doc, elt)] : null;
               attrs = (info === null || info === void 0 ? void 0 : info.attrs) && info.attrs[attrName];
           }
           if (attrs) {
               let base = state.sliceDoc(from, to).toLowerCase(), quoteStart = '"', quoteEnd = '"';
               if (/^['"]/.test(base)) {
                   token = base[0] == '"' ? /^[^"]*$/ : /^[^']*$/;
                   quoteStart = "";
                   quoteEnd = state.sliceDoc(to, to + 1) == base[0] ? "" : base[0];
                   base = base.slice(1);
                   from++;
               }
               else {
                   token = /^[^\s<>='"]*$/;
               }
               for (let value of attrs)
                   options.push({ label: value, apply: quoteStart + value + quoteEnd, type: "constant" });
           }
       }
       return { from, to, options, validFor: token };
   }
   function htmlCompletionFor(schema, context) {
       let { state, pos } = context, around = syntaxTree(state).resolveInner(pos), tree = around.resolve(pos, -1);
       for (let scan = pos, before; around == tree && (before = tree.childBefore(scan));) {
           let last = before.lastChild;
           if (!last || !last.type.isError || last.from < last.to)
               break;
           around = tree = before;
           scan = last.from;
       }
       if (tree.name == "TagName") {
           return tree.parent && /CloseTag$/.test(tree.parent.name) ? completeCloseTag(state, tree, tree.from, pos)
               : completeTag(state, schema, tree, tree.from, pos);
       }
       else if (tree.name == "StartTag") {
           return completeTag(state, schema, tree, pos, pos);
       }
       else if (tree.name == "StartCloseTag" || tree.name == "IncompleteCloseTag") {
           return completeCloseTag(state, tree, pos, pos);
       }
       else if (context.explicit && (tree.name == "OpenTag" || tree.name == "SelfClosingTag") || tree.name == "AttributeName") {
           return completeAttrName(state, schema, tree, tree.name == "AttributeName" ? tree.from : pos, pos);
       }
       else if (tree.name == "Is" || tree.name == "AttributeValue" || tree.name == "UnquotedAttributeValue") {
           return completeAttrValue(state, schema, tree, tree.name == "Is" ? pos : tree.from, pos);
       }
       else if (context.explicit && (around.name == "Element" || around.name == "Text" || around.name == "Document")) {
           return completeStartTag(state, schema, tree, pos);
       }
       else {
           return null;
       }
   }
   /**
   HTML tag completion. Opens and closes tags and attributes in a
   context-aware way.
   */
   function htmlCompletionSource(context) {
       return htmlCompletionFor(Schema$1.default, context);
   }
   /**
   Create a completion source for HTML extended with additional tags
   or attributes.
   */
   function htmlCompletionSourceWith(config) {
       let { extraTags, extraGlobalAttributes: extraAttrs } = config;
       let schema = extraAttrs || extraTags ? new Schema$1(extraTags, extraAttrs) : Schema$1.default;
       return (context) => htmlCompletionFor(schema, context);
   }

   const defaultNesting = [
       { tag: "script",
           attrs: attrs => attrs.type == "text/typescript" || attrs.lang == "ts",
           parser: typescriptLanguage.parser },
       { tag: "script",
           attrs: attrs => attrs.type == "text/babel" || attrs.type == "text/jsx",
           parser: jsxLanguage.parser },
       { tag: "script",
           attrs: attrs => attrs.type == "text/typescript-jsx",
           parser: tsxLanguage.parser },
       { tag: "script",
           attrs(attrs) {
               return !attrs.type || /^(?:text|application)\/(?:x-)?(?:java|ecma)script$|^module$|^$/i.test(attrs.type);
           },
           parser: javascriptLanguage.parser },
       { tag: "style",
           attrs(attrs) {
               return (!attrs.lang || attrs.lang == "css") && (!attrs.type || /^(text\/)?(x-)?(stylesheet|css)$/i.test(attrs.type));
           },
           parser: cssLanguage.parser }
   ];
   const defaultAttrs = /*@__PURE__*/[
       { name: "style",
           parser: /*@__PURE__*/cssLanguage.parser.configure({ top: "Styles" }) }
   ].concat(/*@__PURE__*/eventAttributes.map(name => ({ name, parser: javascriptLanguage.parser })));
   /**
   A language provider based on the [Lezer HTML
   parser](https://github.com/lezer-parser/html), extended with the
   JavaScript and CSS parsers to parse the content of `<script>` and
   `<style>` tags.
   */
   const htmlPlain = /*@__PURE__*/LRLanguage.define({
       name: "html",
       parser: /*@__PURE__*/parser$f.configure({
           props: [
               /*@__PURE__*/indentNodeProp.add({
                   Element(context) {
                       let after = /^(\s*)(<\/)?/.exec(context.textAfter);
                       if (context.node.to <= context.pos + after[0].length)
                           return context.continue();
                       return context.lineIndent(context.node.from) + (after[2] ? 0 : context.unit);
                   },
                   "OpenTag CloseTag SelfClosingTag"(context) {
                       return context.column(context.node.from) + context.unit;
                   },
                   Document(context) {
                       if (context.pos + /\s*/.exec(context.textAfter)[0].length < context.node.to)
                           return context.continue();
                       let endElt = null, close;
                       for (let cur = context.node;;) {
                           let last = cur.lastChild;
                           if (!last || last.name != "Element" || last.to != cur.to)
                               break;
                           endElt = cur = last;
                       }
                       if (endElt && !((close = endElt.lastChild) && (close.name == "CloseTag" || close.name == "SelfClosingTag")))
                           return context.lineIndent(endElt.from) + context.unit;
                       return null;
                   }
               }),
               /*@__PURE__*/foldNodeProp.add({
                   Element(node) {
                       let first = node.firstChild, last = node.lastChild;
                       if (!first || first.name != "OpenTag")
                           return null;
                       return { from: first.to, to: last.name == "CloseTag" ? last.from : node.to };
                   }
               }),
               /*@__PURE__*/bracketMatchingHandle.add({
                   "OpenTag CloseTag": node => node.getChild("TagName")
               })
           ]
       }),
       languageData: {
           commentTokens: { block: { open: "<!--", close: "-->" } },
           indentOnInput: /^\s*<\/\w+\W$/,
           wordChars: "-._"
       }
   });
   /**
   A language provider based on the [Lezer HTML
   parser](https://github.com/lezer-parser/html), extended with the
   JavaScript and CSS parsers to parse the content of `<script>` and
   `<style>` tags.
   */
   const htmlLanguage = /*@__PURE__*/htmlPlain.configure({
       wrap: /*@__PURE__*/configureNesting(defaultNesting, defaultAttrs)
   });
   /**
   Language support for HTML, including
   [`htmlCompletion`](https://codemirror.net/6/docs/ref/#lang-html.htmlCompletion) and JavaScript and
   CSS support extensions.
   */
   function html$6(config = {}) {
       let dialect = "", wrap;
       if (config.matchClosingTags === false)
           dialect = "noMatch";
       if (config.selfClosingTags === true)
           dialect = (dialect ? dialect + " " : "") + "selfClosing";
       if (config.nestedLanguages && config.nestedLanguages.length ||
           config.nestedAttributes && config.nestedAttributes.length)
           wrap = configureNesting((config.nestedLanguages || []).concat(defaultNesting), (config.nestedAttributes || []).concat(defaultAttrs));
       let lang = wrap ? htmlPlain.configure({ wrap, dialect }) : dialect ? htmlLanguage.configure({ dialect }) : htmlLanguage;
       return new LanguageSupport(lang, [
           htmlLanguage.data.of({ autocomplete: htmlCompletionSourceWith(config) }),
           config.autoCloseTags !== false ? autoCloseTags : [],
           javascript$2().support,
           css$2().support
       ]);
   }
   const selfClosers = /*@__PURE__*/new Set(/*@__PURE__*/"area base br col command embed frame hr img input keygen link meta param source track wbr menuitem".split(" "));
   /**
   Extension that will automatically insert close tags when a `>` or
   `/` is typed.
   */
   const autoCloseTags = /*@__PURE__*/EditorView.inputHandler.of((view, from, to, text) => {
       if (view.composing || view.state.readOnly || from != to || (text != ">" && text != "/") ||
           !htmlLanguage.isActiveAt(view.state, from, -1))
           return false;
       let { state } = view;
       let changes = state.changeByRange(range => {
           var _a, _b, _c;
           let { head } = range, around = syntaxTree(state).resolveInner(head, -1), name;
           if (around.name == "TagName" || around.name == "StartTag")
               around = around.parent;
           if (text == ">" && around.name == "OpenTag") {
               if (((_b = (_a = around.parent) === null || _a === void 0 ? void 0 : _a.lastChild) === null || _b === void 0 ? void 0 : _b.name) != "CloseTag" &&
                   (name = elementName$1(state.doc, around.parent, head)) &&
                   !selfClosers.has(name)) {
                   let hasRightBracket = view.state.doc.sliceString(head, head + 1) === ">";
                   let insert = `${hasRightBracket ? "" : ">"}</${name}>`;
                   return { range: EditorSelection.cursor(head + 1), changes: { from: head + (hasRightBracket ? 1 : 0), insert } };
               }
           }
           else if (text == "/" && around.name == "OpenTag") {
               let empty = around.parent, base = empty === null || empty === void 0 ? void 0 : empty.parent;
               if (empty.from == head - 1 && ((_c = base.lastChild) === null || _c === void 0 ? void 0 : _c.name) != "CloseTag" &&
                   (name = elementName$1(state.doc, base, head)) &&
                   !selfClosers.has(name)) {
                   let hasRightBracket = view.state.doc.sliceString(head, head + 1) === ">";
                   let insert = `/${name}${hasRightBracket ? "" : ">"}`;
                   let pos = head + insert.length + (hasRightBracket ? 1 : 0);
                   return { range: EditorSelection.cursor(pos), changes: { from: head, insert } };
               }
           }
           return { range };
       });
       if (changes.changes.empty)
           return false;
       view.dispatch(changes, { userEvent: "input.type", scrollIntoView: true });
       return true;
   });

   var index$f = /*#__PURE__*/Object.freeze({
      __proto__: null,
      autoCloseTags: autoCloseTags,
      html: html$6,
      htmlCompletionSource: htmlCompletionSource,
      htmlCompletionSourceWith: htmlCompletionSourceWith,
      htmlLanguage: htmlLanguage,
      htmlPlain: htmlPlain
   });

   const data = /*@__PURE__*/defineLanguageFacet({ commentTokens: { block: { open: "<!--", close: "-->" } } });
   const headingProp = /*@__PURE__*/new NodeProp();
   const commonmark = /*@__PURE__*/parser$g.configure({
       props: [
           /*@__PURE__*/foldNodeProp.add(type => {
               return !type.is("Block") || type.is("Document") || isHeading(type) != null ? undefined
                   : (tree, state) => ({ from: state.doc.lineAt(tree.from).to, to: tree.to });
           }),
           /*@__PURE__*/headingProp.add(isHeading),
           /*@__PURE__*/indentNodeProp.add({
               Document: () => null
           }),
           /*@__PURE__*/languageDataProp.add({
               Document: data
           })
       ]
   });
   function isHeading(type) {
       let match = /^(?:ATX|Setext)Heading(\d)$/.exec(type.name);
       return match ? +match[1] : undefined;
   }
   function findSectionEnd(headerNode, level) {
       let last = headerNode;
       for (;;) {
           let next = last.nextSibling, heading;
           if (!next || (heading = isHeading(next.type)) != null && heading <= level)
               break;
           last = next;
       }
       return last.to;
   }
   const headerIndent = /*@__PURE__*/foldService.of((state, start, end) => {
       for (let node = syntaxTree(state).resolveInner(end, -1); node; node = node.parent) {
           if (node.from < start)
               break;
           let heading = node.type.prop(headingProp);
           if (heading == null)
               continue;
           let upto = findSectionEnd(node, heading);
           if (upto > end)
               return { from: end, to: upto };
       }
       return null;
   });
   function mkLang(parser) {
       return new Language(data, parser, [headerIndent], "markdown");
   }
   /**
   Language support for strict CommonMark.
   */
   const commonmarkLanguage = /*@__PURE__*/mkLang(commonmark);
   const extended = /*@__PURE__*/commonmark.configure([GFM, Subscript, Superscript, Emoji]);
   /**
   Language support for [GFM](https://github.github.com/gfm/) plus
   subscript, superscript, and emoji syntax.
   */
   const markdownLanguage = /*@__PURE__*/mkLang(extended);
   function getCodeParser(languages, defaultLanguage) {
       return (info) => {
           if (info && languages) {
               let found = null;
               // Strip anything after whitespace
               info = /\S*/.exec(info)[0];
               if (typeof languages == "function")
                   found = languages(info);
               else
                   found = LanguageDescription.matchLanguageName(languages, info, true);
               if (found instanceof LanguageDescription)
                   return found.support ? found.support.language.parser : ParseContext.getSkippingParser(found.load());
               else if (found)
                   return found.parser;
           }
           return defaultLanguage ? defaultLanguage.parser : null;
       };
   }

   let Context$c = class Context {
       constructor(node, from, to, spaceBefore, spaceAfter, type, item) {
           this.node = node;
           this.from = from;
           this.to = to;
           this.spaceBefore = spaceBefore;
           this.spaceAfter = spaceAfter;
           this.type = type;
           this.item = item;
       }
       blank(maxWidth, trailing = true) {
           let result = this.spaceBefore + (this.node.name == "Blockquote" ? ">" : "");
           if (maxWidth != null) {
               while (result.length < maxWidth)
                   result += " ";
               return result;
           }
           else {
               for (let i = this.to - this.from - result.length - this.spaceAfter.length; i > 0; i--)
                   result += " ";
               return result + (trailing ? this.spaceAfter : "");
           }
       }
       marker(doc, add) {
           let number = this.node.name == "OrderedList" ? String((+itemNumber(this.item, doc)[2] + add)) : "";
           return this.spaceBefore + number + this.type + this.spaceAfter;
       }
   };
   function getContext(node, doc) {
       let nodes = [];
       for (let cur = node; cur && cur.name != "Document"; cur = cur.parent) {
           if (cur.name == "ListItem" || cur.name == "Blockquote" || cur.name == "FencedCode")
               nodes.push(cur);
       }
       let context = [];
       for (let i = nodes.length - 1; i >= 0; i--) {
           let node = nodes[i], match;
           let line = doc.lineAt(node.from), startPos = node.from - line.from;
           if (node.name == "FencedCode") {
               context.push(new Context$c(node, startPos, startPos, "", "", "", null));
           }
           else if (node.name == "Blockquote" && (match = /^[ \t]*>( ?)/.exec(line.text.slice(startPos)))) {
               context.push(new Context$c(node, startPos, startPos + match[0].length, "", match[1], ">", null));
           }
           else if (node.name == "ListItem" && node.parent.name == "OrderedList" &&
               (match = /^([ \t]*)\d+([.)])([ \t]*)/.exec(line.text.slice(startPos)))) {
               let after = match[3], len = match[0].length;
               if (after.length >= 4) {
                   after = after.slice(0, after.length - 4);
                   len -= 4;
               }
               context.push(new Context$c(node.parent, startPos, startPos + len, match[1], after, match[2], node));
           }
           else if (node.name == "ListItem" && node.parent.name == "BulletList" &&
               (match = /^([ \t]*)([-+*])([ \t]{1,4}\[[ xX]\])?([ \t]+)/.exec(line.text.slice(startPos)))) {
               let after = match[4], len = match[0].length;
               if (after.length > 4) {
                   after = after.slice(0, after.length - 4);
                   len -= 4;
               }
               let type = match[2];
               if (match[3])
                   type += match[3].replace(/[xX]/, ' ');
               context.push(new Context$c(node.parent, startPos, startPos + len, match[1], after, type, node));
           }
       }
       return context;
   }
   function itemNumber(item, doc) {
       return /^(\s*)(\d+)(?=[.)])/.exec(doc.sliceString(item.from, item.from + 10));
   }
   function renumberList(after, doc, changes, offset = 0) {
       for (let prev = -1, node = after;;) {
           if (node.name == "ListItem") {
               let m = itemNumber(node, doc);
               let number = +m[2];
               if (prev >= 0) {
                   if (number != prev + 1)
                       return;
                   changes.push({ from: node.from + m[1].length, to: node.from + m[0].length, insert: String(prev + 2 + offset) });
               }
               prev = number;
           }
           let next = node.nextSibling;
           if (!next)
               break;
           node = next;
       }
   }
   /**
   This command, when invoked in Markdown context with cursor
   selection(s), will create a new line with the markup for
   blockquotes and lists that were active on the old line. If the
   cursor was directly after the end of the markup for the old line,
   trailing whitespace and list markers are removed from that line.

   The command does nothing in non-Markdown context, so it should
   not be used as the only binding for Enter (even in a Markdown
   document, HTML and code regions might use a different language).
   */
   const insertNewlineContinueMarkup = ({ state, dispatch }) => {
       let tree = syntaxTree(state), { doc } = state;
       let dont = null, changes = state.changeByRange(range => {
           if (!range.empty || !markdownLanguage.isActiveAt(state, range.from))
               return dont = { range };
           let pos = range.from, line = doc.lineAt(pos);
           let context = getContext(tree.resolveInner(pos, -1), doc);
           while (context.length && context[context.length - 1].from > pos - line.from)
               context.pop();
           if (!context.length)
               return dont = { range };
           let inner = context[context.length - 1];
           if (inner.to - inner.spaceAfter.length > pos - line.from)
               return dont = { range };
           let emptyLine = pos >= (inner.to - inner.spaceAfter.length) && !/\S/.test(line.text.slice(inner.to));
           // Empty line in list
           if (inner.item && emptyLine) {
               // First list item or blank line before: delete a level of markup
               if (inner.node.firstChild.to >= pos ||
                   line.from > 0 && !/[^\s>]/.test(doc.lineAt(line.from - 1).text)) {
                   let next = context.length > 1 ? context[context.length - 2] : null;
                   let delTo, insert = "";
                   if (next && next.item) { // Re-add marker for the list at the next level
                       delTo = line.from + next.from;
                       insert = next.marker(doc, 1);
                   }
                   else {
                       delTo = line.from + (next ? next.to : 0);
                   }
                   let changes = [{ from: delTo, to: pos, insert }];
                   if (inner.node.name == "OrderedList")
                       renumberList(inner.item, doc, changes, -2);
                   if (next && next.node.name == "OrderedList")
                       renumberList(next.item, doc, changes);
                   return { range: EditorSelection.cursor(delTo + insert.length), changes };
               }
               else { // Move this line down
                   let insert = "";
                   for (let i = 0, e = context.length - 2; i <= e; i++) {
                       insert += context[i].blank(i < e ? context[i + 1].from - insert.length : null, i < e);
                   }
                   insert += state.lineBreak;
                   return { range: EditorSelection.cursor(pos + insert.length), changes: { from: line.from, insert } };
               }
           }
           if (inner.node.name == "Blockquote" && emptyLine && line.from) {
               let prevLine = doc.lineAt(line.from - 1), quoted = />\s*$/.exec(prevLine.text);
               // Two aligned empty quoted lines in a row
               if (quoted && quoted.index == inner.from) {
                   let changes = state.changes([{ from: prevLine.from + quoted.index, to: prevLine.to },
                       { from: line.from + inner.from, to: line.to }]);
                   return { range: range.map(changes), changes };
               }
           }
           let changes = [];
           if (inner.node.name == "OrderedList")
               renumberList(inner.item, doc, changes);
           let continued = inner.item && inner.item.from < line.from;
           let insert = "";
           // If not dedented
           if (!continued || /^[\s\d.)\-+*>]*/.exec(line.text)[0].length >= inner.to) {
               for (let i = 0, e = context.length - 1; i <= e; i++) {
                   insert += i == e && !continued ? context[i].marker(doc, 1)
                       : context[i].blank(i < e ? context[i + 1].from - insert.length : null);
               }
           }
           let from = pos;
           while (from > line.from && /\s/.test(line.text.charAt(from - line.from - 1)))
               from--;
           insert = state.lineBreak + insert;
           changes.push({ from, to: pos, insert });
           return { range: EditorSelection.cursor(from + insert.length), changes };
       });
       if (dont)
           return false;
       dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
       return true;
   };
   function isMark(node) {
       return node.name == "QuoteMark" || node.name == "ListMark";
   }
   function contextNodeForDelete(tree, pos) {
       let node = tree.resolveInner(pos, -1), scan = pos;
       if (isMark(node)) {
           scan = node.from;
           node = node.parent;
       }
       for (let prev; prev = node.childBefore(scan);) {
           if (isMark(prev)) {
               scan = prev.from;
           }
           else if (prev.name == "OrderedList" || prev.name == "BulletList") {
               node = prev.lastChild;
               scan = node.to;
           }
           else {
               break;
           }
       }
       return node;
   }
   /**
   This command will, when invoked in a Markdown context with the
   cursor directly after list or blockquote markup, delete one level
   of markup. When the markup is for a list, it will be replaced by
   spaces on the first invocation (a further invocation will delete
   the spaces), to make it easy to continue a list.

   When not after Markdown block markup, this command will return
   false, so it is intended to be bound alongside other deletion
   commands, with a higher precedence than the more generic commands.
   */
   const deleteMarkupBackward = ({ state, dispatch }) => {
       let tree = syntaxTree(state);
       let dont = null, changes = state.changeByRange(range => {
           let pos = range.from, { doc } = state;
           if (range.empty && markdownLanguage.isActiveAt(state, range.from)) {
               let line = doc.lineAt(pos);
               let context = getContext(contextNodeForDelete(tree, pos), doc);
               if (context.length) {
                   let inner = context[context.length - 1];
                   let spaceEnd = inner.to - inner.spaceAfter.length + (inner.spaceAfter ? 1 : 0);
                   // Delete extra trailing space after markup
                   if (pos - line.from > spaceEnd && !/\S/.test(line.text.slice(spaceEnd, pos - line.from)))
                       return { range: EditorSelection.cursor(line.from + spaceEnd),
                           changes: { from: line.from + spaceEnd, to: pos } };
                   if (pos - line.from == spaceEnd &&
                       // Only apply this if we're on the line that has the
                       // construct's syntax, or there's only indentation in the
                       // target range
                       (!inner.item || line.from <= inner.item.from || !/\S/.test(line.text.slice(0, inner.to)))) {
                       let start = line.from + inner.from;
                       // Replace a list item marker with blank space
                       if (inner.item && inner.node.from < inner.item.from && /\S/.test(line.text.slice(inner.from, inner.to)))
                           return { range, changes: { from: start, to: line.from + inner.to, insert: inner.blank(inner.to - inner.from) } };
                       // Delete one level of indentation
                       if (start < pos)
                           return { range: EditorSelection.cursor(start), changes: { from: start, to: pos } };
                   }
               }
           }
           return dont = { range };
       });
       if (dont)
           return false;
       dispatch(state.update(changes, { scrollIntoView: true, userEvent: "delete" }));
       return true;
   };

   /**
   A small keymap with Markdown-specific bindings. Binds Enter to
   [`insertNewlineContinueMarkup`](https://codemirror.net/6/docs/ref/#lang-markdown.insertNewlineContinueMarkup)
   and Backspace to
   [`deleteMarkupBackward`](https://codemirror.net/6/docs/ref/#lang-markdown.deleteMarkupBackward).
   */
   const markdownKeymap = [
       { key: "Enter", run: insertNewlineContinueMarkup },
       { key: "Backspace", run: deleteMarkupBackward }
   ];
   const htmlNoMatch = /*@__PURE__*/html$6({ matchClosingTags: false });
   /**
   Markdown language support.
   */
   function markdown(config = {}) {
       let { codeLanguages, defaultCodeLanguage, addKeymap = true, base: { parser } = commonmarkLanguage } = config;
       if (!(parser instanceof MarkdownParser))
           throw new RangeError("Base parser provided to `markdown` should be a Markdown parser");
       let extensions = config.extensions ? [config.extensions] : [];
       let support = [htmlNoMatch.support], defaultCode;
       if (defaultCodeLanguage instanceof LanguageSupport) {
           support.push(defaultCodeLanguage.support);
           defaultCode = defaultCodeLanguage.language;
       }
       else if (defaultCodeLanguage) {
           defaultCode = defaultCodeLanguage;
       }
       let codeParser = codeLanguages || defaultCode ? getCodeParser(codeLanguages, defaultCode) : undefined;
       extensions.push(parseCode({ codeParser, htmlParser: htmlNoMatch.language.parser }));
       if (addKeymap)
           support.push(Prec.high(keymap.of(markdownKeymap)));
       return new LanguageSupport(mkLang(parser.configure(extensions)), support);
   }

   var index$e = /*#__PURE__*/Object.freeze({
      __proto__: null,
      commonmarkLanguage: commonmarkLanguage,
      deleteMarkupBackward: deleteMarkupBackward,
      insertNewlineContinueMarkup: insertNewlineContinueMarkup,
      markdown: markdown,
      markdownKeymap: markdownKeymap,
      markdownLanguage: markdownLanguage
   });

   function ankiImagePaste(options = {}) {
       return EditorView.domEventHandlers({
           paste(event, view) {
               bridgeCommand("clipboard_image_to_markdown", (txt) => {
                   if (txt) {
                       const selection = view.state.selection;
                       const trs = [];
                       selection.ranges.forEach((rng, n) => {
                           trs.push({
                               changes: {
                                   from: rng.from, to: rng.to,
                                   insert: txt
                               }
                           });
                       });
                       view.dispatch(...trs);
                       view.dispatch({
                           selection: {
                               anchor: view.state.selection.main.from + 2
                           }
                       });
                       return true;
                   }
               });
               return false;
           }
       });
   }

   const CLOZE_ORD_RE = new RegExp(String.raw `{{c(\d+)::`, 'g');
   const clozeSelections = (inc) => (view) => {
       const selection = view.state.selection;
       let i = 0;
       let itr = view.state.doc.iter();
       while (!itr.done) {
           if (!itr.lineBreak) {
               let match;
               while ((match = CLOZE_ORD_RE.exec(itr.value)) !== null) {
                   const n = parseInt(match[1]);
                   if (n > i)
                       i = n;
               }
           }
           itr.next();
       }
       const trs = [];
       selection.ranges.forEach((rng, n) => {
           if (inc)
               i++;
           if (rng.empty) {
               trs.push({
                   changes: {
                       from: rng.from, to: rng.from,
                       insert: `{{c${i || 1}::}}`
                   }
               });
           }
           else {
               trs.push({
                   changes: {
                       from: rng.from, to: rng.from,
                       insert: `{{c${i || 1}::`
                   }
               }, {
                   changes: {
                       from: rng.to, to: rng.to,
                       insert: '}}'
                   }
               });
           }
       });
       view.dispatch(...trs);
       const mrng = view.state.selection.main;
       const startl = `\{\{c${i}::`.length;
       view.dispatch({
           selection: {
               anchor: mrng.empty
                   ? mrng.from + startl
                   : mrng.head > mrng.anchor
                       ? mrng.head + 2
                       : mrng.head - startl
           }
       });
       return true;
   };
   const clozeNext = clozeSelections(true);
   const clozeCurrent = clozeSelections(false);
   const joinLines = (view) => {
       const selection = view.state.selection;
       const text = view.state.doc.toString();
       let dispatched = false;
       selection.ranges.forEach((rng, n) => {
           const to = rng.empty ? text.length : rng.to;
           const cursor = rng.empty ? rng.from : -1;
           const from = rng.empty
               ? text.slice(0, rng.from).lastIndexOf('\n') + 1
               : rng.from;
           const tin = text.slice(from, to);
           const tout = rng.empty
               ? tin.replace(/\s*\n[\n\s]*/, ' ')
               : tin.replace(/\s*\n[\n\s]*/g, ' ');
           if (tout !== tin) {
               dispatched = true;
               view.dispatch({
                   changes: {
                       from: from, to: to,
                       insert: tout
                   }
               });
               if (cursor !== -1)
                   view.dispatch({ selection: { anchor: cursor } });
           }
       });
       return dispatched;
   };

   var mdi_commands = /*#__PURE__*/Object.freeze({
      __proto__: null,
      clozeCurrent: clozeCurrent,
      clozeNext: clozeNext,
      joinLines: joinLines
   });

   const _fns = [];
   function to_function(name) {
       if (!_fns.length)
           _init([commands, search$3, mdi_commands]);
       return _fns[name];
       function _init(namespaces) {
           for (const namespace of namespaces)
               for (const [k, v] of Object.entries(namespace))
                   _fns[k] = v;
       }
   }

   function space$4(ch) { return ch == 32 || ch == 9 || ch == 10 || ch == 13; }
   function parseUnderline(ch, node, mark) {
       return (cx, next, pos) => {
           if (next != ch || cx.char(pos + 1) == ch)
               return -1;
           let elts = [cx.elt(mark, pos, pos + 1)];
           for (let i = pos + 1; i < cx.end; i++) {
               let next = cx.char(i);
               if (next == ch)
                   return cx.addElement(cx.elt(node, pos, i + 1, elts.concat(cx.elt(mark, i, i + 1))));
               if (next == 92)
                   elts.push(cx.elt("Escape", i, i++ + 2));
               if (space$4(next))
                   break;
           }
           return -1;
       };
   }
   const Underline = {
       defineNodes: [
           { name: "Underline", style: tags$1.special(tags$1.content) },
           { name: "UnderlineMark", style: tags$1.processingInstruction }
       ],
       parseInline: [{
               name: "Underline",
               parse: parseUnderline(95, "Underline", "UnderlineMark")
           }]
   };

   const CLOZE = Decoration.mark({
       attributes: { class: "cm-cloze" }
   });
   const CLOZE_RE = new RegExp(String.raw `(?:{{c\d+::|}})`, 'g');
   function _deco(view) {
       let builder = new RangeSetBuilder();
       for (let { from, to } of view.visibleRanges) {
           for (let pos = from; pos <= to;) {
               let line = view.state.doc.lineAt(pos);
               for (const match of line.text.matchAll(CLOZE_RE)) {
                   builder.add(line.from + match.index, line.from + match.index + match[0].length, CLOZE);
               }
               pos = line.to + 1;
           }
       }
       return builder.finish();
   }
   const cloze_decorator = ViewPlugin.fromClass(class {
       constructor(view) {
           this.decorations = _deco(view);
       }
       update(update) {
           if (update.docChanged || update.viewportChanged)
               this.decorations = _deco(update.view);
       }
   }, {
       decorations: v => v.decorations
   });

   const lezer_exts = [
       Subscript,
       Superscript,
       Strikethrough,
       Table,
       Underline
   ];
   class Editor {
       constructor(cfg) {
           const km = [];
           for (const sc of cfg.keymap) {
               const tmp = { key: sc.key };
               if ('shift' in sc)
                   tmp.shift = to_function(sc.shift);
               if ('run' in sc)
                   tmp.run = to_function(sc.run);
               if ('scope' in sc)
                   tmp.scope = sc.scope;
               if ('preventDefault' in sc)
                   tmp.preventDefault = sc.preventDefault;
               km.push(tmp);
           }
           this.extensions = [
               history(),
               dropCursor(),
               EditorState.allowMultipleSelections.of(true),
               indentOnInput(),
               bracketMatching(),
               closeBrackets(),
               autocompletion(),
               rectangularSelection(),
               search$2({ top: true, ...cfg["search"] }),
               crosshairCursor(),
               highlightActiveLine(),
               highlightSelectionMatches(),
               syntaxHighlighting(classHighlighter, { fallback: false }),
               cloze_decorator,
               indentUnit.of("    "),
               Prec.highest(keymap.of([
                   ...km,
                   ...closeBracketsKeymap,
                   ...markdownKeymap,
                   ...defaultKeymap,
                   indentWithTab,
                   ...historyKeymap,
                   ...completionKeymap
               ])),
               EditorView.lineWrapping,
               markdown({ base: markdownLanguage, extensions: lezer_exts, codeLanguages: languages }),
               ankiImagePaste()
           ];
           if (cfg.events)
               this.extensions.push(EditorView.domEventHandlers(cfg.events));
           new EditorView({
               state: EditorState.create({
                   doc: '',
                   extensions: []
               })
           });
           const editor_view = {
               state: EditorState.create({ extensions: this.extensions }),
               parent: cfg.parent
           };
           if (cfg.oninput) {
               editor_view['dispatch'] = function (tr) {
                   const res = this.update([tr]);
                   if (!tr.changes.empty)
                       cfg.oninput(this.state.doc.toString());
                   return res;
               };
           }
           this.cm = new EditorView(editor_view);
       }
       set_doc(doc, ord, pos) {
           this.cm.setState(EditorState.create({
               doc: doc,
               extensions: this.extensions,
               selection: { anchor: pos === 'start' ? 0 : doc.length }
           }));
       }
       get_selections() {
           return this.cm.state.selection.ranges;
       }
       set_selections(ranges) {
           this.cm.dispatch({ selection: EditorSelection.create(ranges) });
       }
   }

   const UNDEFINED_CODE_POINTS = new Set([
       65534, 65535, 131070, 131071, 196606, 196607, 262142, 262143, 327678, 327679, 393214,
       393215, 458750, 458751, 524286, 524287, 589822, 589823, 655358, 655359, 720894,
       720895, 786430, 786431, 851966, 851967, 917502, 917503, 983038, 983039, 1048574,
       1048575, 1114110, 1114111,
   ]);
   const REPLACEMENT_CHARACTER = '\uFFFD';
   var CODE_POINTS;
   (function (CODE_POINTS) {
       CODE_POINTS[CODE_POINTS["EOF"] = -1] = "EOF";
       CODE_POINTS[CODE_POINTS["NULL"] = 0] = "NULL";
       CODE_POINTS[CODE_POINTS["TABULATION"] = 9] = "TABULATION";
       CODE_POINTS[CODE_POINTS["CARRIAGE_RETURN"] = 13] = "CARRIAGE_RETURN";
       CODE_POINTS[CODE_POINTS["LINE_FEED"] = 10] = "LINE_FEED";
       CODE_POINTS[CODE_POINTS["FORM_FEED"] = 12] = "FORM_FEED";
       CODE_POINTS[CODE_POINTS["SPACE"] = 32] = "SPACE";
       CODE_POINTS[CODE_POINTS["EXCLAMATION_MARK"] = 33] = "EXCLAMATION_MARK";
       CODE_POINTS[CODE_POINTS["QUOTATION_MARK"] = 34] = "QUOTATION_MARK";
       CODE_POINTS[CODE_POINTS["NUMBER_SIGN"] = 35] = "NUMBER_SIGN";
       CODE_POINTS[CODE_POINTS["AMPERSAND"] = 38] = "AMPERSAND";
       CODE_POINTS[CODE_POINTS["APOSTROPHE"] = 39] = "APOSTROPHE";
       CODE_POINTS[CODE_POINTS["HYPHEN_MINUS"] = 45] = "HYPHEN_MINUS";
       CODE_POINTS[CODE_POINTS["SOLIDUS"] = 47] = "SOLIDUS";
       CODE_POINTS[CODE_POINTS["DIGIT_0"] = 48] = "DIGIT_0";
       CODE_POINTS[CODE_POINTS["DIGIT_9"] = 57] = "DIGIT_9";
       CODE_POINTS[CODE_POINTS["SEMICOLON"] = 59] = "SEMICOLON";
       CODE_POINTS[CODE_POINTS["LESS_THAN_SIGN"] = 60] = "LESS_THAN_SIGN";
       CODE_POINTS[CODE_POINTS["EQUALS_SIGN"] = 61] = "EQUALS_SIGN";
       CODE_POINTS[CODE_POINTS["GREATER_THAN_SIGN"] = 62] = "GREATER_THAN_SIGN";
       CODE_POINTS[CODE_POINTS["QUESTION_MARK"] = 63] = "QUESTION_MARK";
       CODE_POINTS[CODE_POINTS["LATIN_CAPITAL_A"] = 65] = "LATIN_CAPITAL_A";
       CODE_POINTS[CODE_POINTS["LATIN_CAPITAL_F"] = 70] = "LATIN_CAPITAL_F";
       CODE_POINTS[CODE_POINTS["LATIN_CAPITAL_X"] = 88] = "LATIN_CAPITAL_X";
       CODE_POINTS[CODE_POINTS["LATIN_CAPITAL_Z"] = 90] = "LATIN_CAPITAL_Z";
       CODE_POINTS[CODE_POINTS["RIGHT_SQUARE_BRACKET"] = 93] = "RIGHT_SQUARE_BRACKET";
       CODE_POINTS[CODE_POINTS["GRAVE_ACCENT"] = 96] = "GRAVE_ACCENT";
       CODE_POINTS[CODE_POINTS["LATIN_SMALL_A"] = 97] = "LATIN_SMALL_A";
       CODE_POINTS[CODE_POINTS["LATIN_SMALL_F"] = 102] = "LATIN_SMALL_F";
       CODE_POINTS[CODE_POINTS["LATIN_SMALL_X"] = 120] = "LATIN_SMALL_X";
       CODE_POINTS[CODE_POINTS["LATIN_SMALL_Z"] = 122] = "LATIN_SMALL_Z";
       CODE_POINTS[CODE_POINTS["REPLACEMENT_CHARACTER"] = 65533] = "REPLACEMENT_CHARACTER";
   })(CODE_POINTS = CODE_POINTS || (CODE_POINTS = {}));
   const SEQUENCES = {
       DASH_DASH: '--',
       CDATA_START: '[CDATA[',
       DOCTYPE: 'doctype',
       SCRIPT: 'script',
       PUBLIC: 'public',
       SYSTEM: 'system',
   };
   //Surrogates
   function isSurrogate(cp) {
       return cp >= 55296 && cp <= 57343;
   }
   function isSurrogatePair(cp) {
       return cp >= 56320 && cp <= 57343;
   }
   function getSurrogatePairCodePoint(cp1, cp2) {
       return (cp1 - 55296) * 1024 + 9216 + cp2;
   }
   //NOTE: excluding NULL and ASCII whitespace
   function isControlCodePoint(cp) {
       return ((cp !== 0x20 && cp !== 0x0a && cp !== 0x0d && cp !== 0x09 && cp !== 0x0c && cp >= 0x01 && cp <= 0x1f) ||
           (cp >= 0x7f && cp <= 0x9f));
   }
   function isUndefinedCodePoint(cp) {
       return (cp >= 64976 && cp <= 65007) || UNDEFINED_CODE_POINTS.has(cp);
   }

   var ERR;
   (function (ERR) {
       ERR["controlCharacterInInputStream"] = "control-character-in-input-stream";
       ERR["noncharacterInInputStream"] = "noncharacter-in-input-stream";
       ERR["surrogateInInputStream"] = "surrogate-in-input-stream";
       ERR["nonVoidHtmlElementStartTagWithTrailingSolidus"] = "non-void-html-element-start-tag-with-trailing-solidus";
       ERR["endTagWithAttributes"] = "end-tag-with-attributes";
       ERR["endTagWithTrailingSolidus"] = "end-tag-with-trailing-solidus";
       ERR["unexpectedSolidusInTag"] = "unexpected-solidus-in-tag";
       ERR["unexpectedNullCharacter"] = "unexpected-null-character";
       ERR["unexpectedQuestionMarkInsteadOfTagName"] = "unexpected-question-mark-instead-of-tag-name";
       ERR["invalidFirstCharacterOfTagName"] = "invalid-first-character-of-tag-name";
       ERR["unexpectedEqualsSignBeforeAttributeName"] = "unexpected-equals-sign-before-attribute-name";
       ERR["missingEndTagName"] = "missing-end-tag-name";
       ERR["unexpectedCharacterInAttributeName"] = "unexpected-character-in-attribute-name";
       ERR["unknownNamedCharacterReference"] = "unknown-named-character-reference";
       ERR["missingSemicolonAfterCharacterReference"] = "missing-semicolon-after-character-reference";
       ERR["unexpectedCharacterAfterDoctypeSystemIdentifier"] = "unexpected-character-after-doctype-system-identifier";
       ERR["unexpectedCharacterInUnquotedAttributeValue"] = "unexpected-character-in-unquoted-attribute-value";
       ERR["eofBeforeTagName"] = "eof-before-tag-name";
       ERR["eofInTag"] = "eof-in-tag";
       ERR["missingAttributeValue"] = "missing-attribute-value";
       ERR["missingWhitespaceBetweenAttributes"] = "missing-whitespace-between-attributes";
       ERR["missingWhitespaceAfterDoctypePublicKeyword"] = "missing-whitespace-after-doctype-public-keyword";
       ERR["missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers"] = "missing-whitespace-between-doctype-public-and-system-identifiers";
       ERR["missingWhitespaceAfterDoctypeSystemKeyword"] = "missing-whitespace-after-doctype-system-keyword";
       ERR["missingQuoteBeforeDoctypePublicIdentifier"] = "missing-quote-before-doctype-public-identifier";
       ERR["missingQuoteBeforeDoctypeSystemIdentifier"] = "missing-quote-before-doctype-system-identifier";
       ERR["missingDoctypePublicIdentifier"] = "missing-doctype-public-identifier";
       ERR["missingDoctypeSystemIdentifier"] = "missing-doctype-system-identifier";
       ERR["abruptDoctypePublicIdentifier"] = "abrupt-doctype-public-identifier";
       ERR["abruptDoctypeSystemIdentifier"] = "abrupt-doctype-system-identifier";
       ERR["cdataInHtmlContent"] = "cdata-in-html-content";
       ERR["incorrectlyOpenedComment"] = "incorrectly-opened-comment";
       ERR["eofInScriptHtmlCommentLikeText"] = "eof-in-script-html-comment-like-text";
       ERR["eofInDoctype"] = "eof-in-doctype";
       ERR["nestedComment"] = "nested-comment";
       ERR["abruptClosingOfEmptyComment"] = "abrupt-closing-of-empty-comment";
       ERR["eofInComment"] = "eof-in-comment";
       ERR["incorrectlyClosedComment"] = "incorrectly-closed-comment";
       ERR["eofInCdata"] = "eof-in-cdata";
       ERR["absenceOfDigitsInNumericCharacterReference"] = "absence-of-digits-in-numeric-character-reference";
       ERR["nullCharacterReference"] = "null-character-reference";
       ERR["surrogateCharacterReference"] = "surrogate-character-reference";
       ERR["characterReferenceOutsideUnicodeRange"] = "character-reference-outside-unicode-range";
       ERR["controlCharacterReference"] = "control-character-reference";
       ERR["noncharacterCharacterReference"] = "noncharacter-character-reference";
       ERR["missingWhitespaceBeforeDoctypeName"] = "missing-whitespace-before-doctype-name";
       ERR["missingDoctypeName"] = "missing-doctype-name";
       ERR["invalidCharacterSequenceAfterDoctypeName"] = "invalid-character-sequence-after-doctype-name";
       ERR["duplicateAttribute"] = "duplicate-attribute";
       ERR["nonConformingDoctype"] = "non-conforming-doctype";
       ERR["missingDoctype"] = "missing-doctype";
       ERR["misplacedDoctype"] = "misplaced-doctype";
       ERR["endTagWithoutMatchingOpenElement"] = "end-tag-without-matching-open-element";
       ERR["closingOfElementWithOpenChildElements"] = "closing-of-element-with-open-child-elements";
       ERR["disallowedContentInNoscriptInHead"] = "disallowed-content-in-noscript-in-head";
       ERR["openElementsLeftAfterEof"] = "open-elements-left-after-eof";
       ERR["abandonedHeadElementChild"] = "abandoned-head-element-child";
       ERR["misplacedStartTagForHeadElement"] = "misplaced-start-tag-for-head-element";
       ERR["nestedNoscriptInHead"] = "nested-noscript-in-head";
       ERR["eofInElementThatCanContainOnlyText"] = "eof-in-element-that-can-contain-only-text";
   })(ERR = ERR || (ERR = {}));

   //Const
   const DEFAULT_BUFFER_WATERLINE = 1 << 16;
   //Preprocessor
   //NOTE: HTML input preprocessing
   //(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#preprocessing-the-input-stream)
   class Preprocessor {
       constructor(handler) {
           this.handler = handler;
           this.html = '';
           this.pos = -1;
           // NOTE: Initial `lastGapPos` is -2, to ensure `col` on initialisation is 0
           this.lastGapPos = -2;
           this.gapStack = [];
           this.skipNextNewLine = false;
           this.lastChunkWritten = false;
           this.endOfChunkHit = false;
           this.bufferWaterline = DEFAULT_BUFFER_WATERLINE;
           this.isEol = false;
           this.lineStartPos = 0;
           this.droppedBufferSize = 0;
           this.line = 1;
           //NOTE: avoid reporting errors twice on advance/retreat
           this.lastErrOffset = -1;
       }
       /** The column on the current line. If we just saw a gap (eg. a surrogate pair), return the index before. */
       get col() {
           return this.pos - this.lineStartPos + Number(this.lastGapPos !== this.pos);
       }
       get offset() {
           return this.droppedBufferSize + this.pos;
       }
       getError(code) {
           const { line, col, offset } = this;
           return {
               code,
               startLine: line,
               endLine: line,
               startCol: col,
               endCol: col,
               startOffset: offset,
               endOffset: offset,
           };
       }
       _err(code) {
           if (this.handler.onParseError && this.lastErrOffset !== this.offset) {
               this.lastErrOffset = this.offset;
               this.handler.onParseError(this.getError(code));
           }
       }
       _addGap() {
           this.gapStack.push(this.lastGapPos);
           this.lastGapPos = this.pos;
       }
       _processSurrogate(cp) {
           //NOTE: try to peek a surrogate pair
           if (this.pos !== this.html.length - 1) {
               const nextCp = this.html.charCodeAt(this.pos + 1);
               if (isSurrogatePair(nextCp)) {
                   //NOTE: we have a surrogate pair. Peek pair character and recalculate code point.
                   this.pos++;
                   //NOTE: add a gap that should be avoided during retreat
                   this._addGap();
                   return getSurrogatePairCodePoint(cp, nextCp);
               }
           }
           //NOTE: we are at the end of a chunk, therefore we can't infer the surrogate pair yet.
           else if (!this.lastChunkWritten) {
               this.endOfChunkHit = true;
               return CODE_POINTS.EOF;
           }
           //NOTE: isolated surrogate
           this._err(ERR.surrogateInInputStream);
           return cp;
       }
       willDropParsedChunk() {
           return this.pos > this.bufferWaterline;
       }
       dropParsedChunk() {
           if (this.willDropParsedChunk()) {
               this.html = this.html.substring(this.pos);
               this.lineStartPos -= this.pos;
               this.droppedBufferSize += this.pos;
               this.pos = 0;
               this.lastGapPos = -2;
               this.gapStack.length = 0;
           }
       }
       write(chunk, isLastChunk) {
           if (this.html.length > 0) {
               this.html += chunk;
           }
           else {
               this.html = chunk;
           }
           this.endOfChunkHit = false;
           this.lastChunkWritten = isLastChunk;
       }
       insertHtmlAtCurrentPos(chunk) {
           this.html = this.html.substring(0, this.pos + 1) + chunk + this.html.substring(this.pos + 1);
           this.endOfChunkHit = false;
       }
       startsWith(pattern, caseSensitive) {
           // Check if our buffer has enough characters
           if (this.pos + pattern.length > this.html.length) {
               this.endOfChunkHit = !this.lastChunkWritten;
               return false;
           }
           if (caseSensitive) {
               return this.html.startsWith(pattern, this.pos);
           }
           for (let i = 0; i < pattern.length; i++) {
               const cp = this.html.charCodeAt(this.pos + i) | 0x20;
               if (cp !== pattern.charCodeAt(i)) {
                   return false;
               }
           }
           return true;
       }
       peek(offset) {
           const pos = this.pos + offset;
           if (pos >= this.html.length) {
               this.endOfChunkHit = !this.lastChunkWritten;
               return CODE_POINTS.EOF;
           }
           const code = this.html.charCodeAt(pos);
           return code === CODE_POINTS.CARRIAGE_RETURN ? CODE_POINTS.LINE_FEED : code;
       }
       advance() {
           this.pos++;
           //NOTE: LF should be in the last column of the line
           if (this.isEol) {
               this.isEol = false;
               this.line++;
               this.lineStartPos = this.pos;
           }
           if (this.pos >= this.html.length) {
               this.endOfChunkHit = !this.lastChunkWritten;
               return CODE_POINTS.EOF;
           }
           let cp = this.html.charCodeAt(this.pos);
           //NOTE: all U+000D CARRIAGE RETURN (CR) characters must be converted to U+000A LINE FEED (LF) characters
           if (cp === CODE_POINTS.CARRIAGE_RETURN) {
               this.isEol = true;
               this.skipNextNewLine = true;
               return CODE_POINTS.LINE_FEED;
           }
           //NOTE: any U+000A LINE FEED (LF) characters that immediately follow a U+000D CARRIAGE RETURN (CR) character
           //must be ignored.
           if (cp === CODE_POINTS.LINE_FEED) {
               this.isEol = true;
               if (this.skipNextNewLine) {
                   // `line` will be bumped again in the recursive call.
                   this.line--;
                   this.skipNextNewLine = false;
                   this._addGap();
                   return this.advance();
               }
           }
           this.skipNextNewLine = false;
           if (isSurrogate(cp)) {
               cp = this._processSurrogate(cp);
           }
           //OPTIMIZATION: first check if code point is in the common allowed
           //range (ASCII alphanumeric, whitespaces, big chunk of BMP)
           //before going into detailed performance cost validation.
           const isCommonValidRange = this.handler.onParseError === null ||
               (cp > 0x1f && cp < 0x7f) ||
               cp === CODE_POINTS.LINE_FEED ||
               cp === CODE_POINTS.CARRIAGE_RETURN ||
               (cp > 0x9f && cp < 64976);
           if (!isCommonValidRange) {
               this._checkForProblematicCharacters(cp);
           }
           return cp;
       }
       _checkForProblematicCharacters(cp) {
           if (isControlCodePoint(cp)) {
               this._err(ERR.controlCharacterInInputStream);
           }
           else if (isUndefinedCodePoint(cp)) {
               this._err(ERR.noncharacterInInputStream);
           }
       }
       retreat(count) {
           this.pos -= count;
           while (this.pos < this.lastGapPos) {
               this.lastGapPos = this.gapStack.pop();
               this.pos--;
           }
           this.isEol = false;
       }
   }

   var TokenType;
   (function (TokenType) {
       TokenType[TokenType["CHARACTER"] = 0] = "CHARACTER";
       TokenType[TokenType["NULL_CHARACTER"] = 1] = "NULL_CHARACTER";
       TokenType[TokenType["WHITESPACE_CHARACTER"] = 2] = "WHITESPACE_CHARACTER";
       TokenType[TokenType["START_TAG"] = 3] = "START_TAG";
       TokenType[TokenType["END_TAG"] = 4] = "END_TAG";
       TokenType[TokenType["COMMENT"] = 5] = "COMMENT";
       TokenType[TokenType["DOCTYPE"] = 6] = "DOCTYPE";
       TokenType[TokenType["EOF"] = 7] = "EOF";
       TokenType[TokenType["HIBERNATION"] = 8] = "HIBERNATION";
   })(TokenType = TokenType || (TokenType = {}));
   function getTokenAttr(token, attrName) {
       for (let i = token.attrs.length - 1; i >= 0; i--) {
           if (token.attrs[i].name === attrName) {
               return token.attrs[i].value;
           }
       }
       return null;
   }

   // Generated using scripts/write-decode-map.ts
   var htmlDecodeTree = new Uint16Array(
   // prettier-ignore
   "\u1d41<\xd5\u0131\u028a\u049d\u057b\u05d0\u0675\u06de\u07a2\u07d6\u080f\u0a4a\u0a91\u0da1\u0e6d\u0f09\u0f26\u10ca\u1228\u12e1\u1415\u149d\u14c3\u14df\u1525\0\0\0\0\0\0\u156b\u16cd\u198d\u1c12\u1ddd\u1f7e\u2060\u21b0\u228d\u23c0\u23fb\u2442\u2824\u2912\u2d08\u2e48\u2fce\u3016\u32ba\u3639\u37ac\u38fe\u3a28\u3a71\u3ae0\u3b2e\u0800EMabcfglmnoprstu\\bfms\x7f\x84\x8b\x90\x95\x98\xa6\xb3\xb9\xc8\xcflig\u803b\xc6\u40c6P\u803b&\u4026cute\u803b\xc1\u40c1reve;\u4102\u0100iyx}rc\u803b\xc2\u40c2;\u4410r;\uc000\ud835\udd04rave\u803b\xc0\u40c0pha;\u4391acr;\u4100d;\u6a53\u0100gp\x9d\xa1on;\u4104f;\uc000\ud835\udd38plyFunction;\u6061ing\u803b\xc5\u40c5\u0100cs\xbe\xc3r;\uc000\ud835\udc9cign;\u6254ilde\u803b\xc3\u40c3ml\u803b\xc4\u40c4\u0400aceforsu\xe5\xfb\xfe\u0117\u011c\u0122\u0127\u012a\u0100cr\xea\xf2kslash;\u6216\u0176\xf6\xf8;\u6ae7ed;\u6306y;\u4411\u0180crt\u0105\u010b\u0114ause;\u6235noullis;\u612ca;\u4392r;\uc000\ud835\udd05pf;\uc000\ud835\udd39eve;\u42d8c\xf2\u0113mpeq;\u624e\u0700HOacdefhilorsu\u014d\u0151\u0156\u0180\u019e\u01a2\u01b5\u01b7\u01ba\u01dc\u0215\u0273\u0278\u027ecy;\u4427PY\u803b\xa9\u40a9\u0180cpy\u015d\u0162\u017aute;\u4106\u0100;i\u0167\u0168\u62d2talDifferentialD;\u6145leys;\u612d\u0200aeio\u0189\u018e\u0194\u0198ron;\u410cdil\u803b\xc7\u40c7rc;\u4108nint;\u6230ot;\u410a\u0100dn\u01a7\u01adilla;\u40b8terDot;\u40b7\xf2\u017fi;\u43a7rcle\u0200DMPT\u01c7\u01cb\u01d1\u01d6ot;\u6299inus;\u6296lus;\u6295imes;\u6297o\u0100cs\u01e2\u01f8kwiseContourIntegral;\u6232eCurly\u0100DQ\u0203\u020foubleQuote;\u601duote;\u6019\u0200lnpu\u021e\u0228\u0247\u0255on\u0100;e\u0225\u0226\u6237;\u6a74\u0180git\u022f\u0236\u023aruent;\u6261nt;\u622fourIntegral;\u622e\u0100fr\u024c\u024e;\u6102oduct;\u6210nterClockwiseContourIntegral;\u6233oss;\u6a2fcr;\uc000\ud835\udc9ep\u0100;C\u0284\u0285\u62d3ap;\u624d\u0580DJSZacefios\u02a0\u02ac\u02b0\u02b4\u02b8\u02cb\u02d7\u02e1\u02e6\u0333\u048d\u0100;o\u0179\u02a5trahd;\u6911cy;\u4402cy;\u4405cy;\u440f\u0180grs\u02bf\u02c4\u02c7ger;\u6021r;\u61a1hv;\u6ae4\u0100ay\u02d0\u02d5ron;\u410e;\u4414l\u0100;t\u02dd\u02de\u6207a;\u4394r;\uc000\ud835\udd07\u0100af\u02eb\u0327\u0100cm\u02f0\u0322ritical\u0200ADGT\u0300\u0306\u0316\u031ccute;\u40b4o\u0174\u030b\u030d;\u42d9bleAcute;\u42ddrave;\u4060ilde;\u42dcond;\u62c4ferentialD;\u6146\u0470\u033d\0\0\0\u0342\u0354\0\u0405f;\uc000\ud835\udd3b\u0180;DE\u0348\u0349\u034d\u40a8ot;\u60dcqual;\u6250ble\u0300CDLRUV\u0363\u0372\u0382\u03cf\u03e2\u03f8ontourIntegra\xec\u0239o\u0274\u0379\0\0\u037b\xbb\u0349nArrow;\u61d3\u0100eo\u0387\u03a4ft\u0180ART\u0390\u0396\u03a1rrow;\u61d0ightArrow;\u61d4e\xe5\u02cang\u0100LR\u03ab\u03c4eft\u0100AR\u03b3\u03b9rrow;\u67f8ightArrow;\u67faightArrow;\u67f9ight\u0100AT\u03d8\u03derrow;\u61d2ee;\u62a8p\u0241\u03e9\0\0\u03efrrow;\u61d1ownArrow;\u61d5erticalBar;\u6225n\u0300ABLRTa\u0412\u042a\u0430\u045e\u047f\u037crrow\u0180;BU\u041d\u041e\u0422\u6193ar;\u6913pArrow;\u61f5reve;\u4311eft\u02d2\u043a\0\u0446\0\u0450ightVector;\u6950eeVector;\u695eector\u0100;B\u0459\u045a\u61bdar;\u6956ight\u01d4\u0467\0\u0471eeVector;\u695fector\u0100;B\u047a\u047b\u61c1ar;\u6957ee\u0100;A\u0486\u0487\u62a4rrow;\u61a7\u0100ct\u0492\u0497r;\uc000\ud835\udc9frok;\u4110\u0800NTacdfglmopqstux\u04bd\u04c0\u04c4\u04cb\u04de\u04e2\u04e7\u04ee\u04f5\u0521\u052f\u0536\u0552\u055d\u0560\u0565G;\u414aH\u803b\xd0\u40d0cute\u803b\xc9\u40c9\u0180aiy\u04d2\u04d7\u04dcron;\u411arc\u803b\xca\u40ca;\u442dot;\u4116r;\uc000\ud835\udd08rave\u803b\xc8\u40c8ement;\u6208\u0100ap\u04fa\u04fecr;\u4112ty\u0253\u0506\0\0\u0512mallSquare;\u65fberySmallSquare;\u65ab\u0100gp\u0526\u052aon;\u4118f;\uc000\ud835\udd3csilon;\u4395u\u0100ai\u053c\u0549l\u0100;T\u0542\u0543\u6a75ilde;\u6242librium;\u61cc\u0100ci\u0557\u055ar;\u6130m;\u6a73a;\u4397ml\u803b\xcb\u40cb\u0100ip\u056a\u056fsts;\u6203onentialE;\u6147\u0280cfios\u0585\u0588\u058d\u05b2\u05ccy;\u4424r;\uc000\ud835\udd09lled\u0253\u0597\0\0\u05a3mallSquare;\u65fcerySmallSquare;\u65aa\u0370\u05ba\0\u05bf\0\0\u05c4f;\uc000\ud835\udd3dAll;\u6200riertrf;\u6131c\xf2\u05cb\u0600JTabcdfgorst\u05e8\u05ec\u05ef\u05fa\u0600\u0612\u0616\u061b\u061d\u0623\u066c\u0672cy;\u4403\u803b>\u403emma\u0100;d\u05f7\u05f8\u4393;\u43dcreve;\u411e\u0180eiy\u0607\u060c\u0610dil;\u4122rc;\u411c;\u4413ot;\u4120r;\uc000\ud835\udd0a;\u62d9pf;\uc000\ud835\udd3eeater\u0300EFGLST\u0635\u0644\u064e\u0656\u065b\u0666qual\u0100;L\u063e\u063f\u6265ess;\u62dbullEqual;\u6267reater;\u6aa2ess;\u6277lantEqual;\u6a7eilde;\u6273cr;\uc000\ud835\udca2;\u626b\u0400Aacfiosu\u0685\u068b\u0696\u069b\u069e\u06aa\u06be\u06caRDcy;\u442a\u0100ct\u0690\u0694ek;\u42c7;\u405eirc;\u4124r;\u610clbertSpace;\u610b\u01f0\u06af\0\u06b2f;\u610dizontalLine;\u6500\u0100ct\u06c3\u06c5\xf2\u06a9rok;\u4126mp\u0144\u06d0\u06d8ownHum\xf0\u012fqual;\u624f\u0700EJOacdfgmnostu\u06fa\u06fe\u0703\u0707\u070e\u071a\u071e\u0721\u0728\u0744\u0778\u078b\u078f\u0795cy;\u4415lig;\u4132cy;\u4401cute\u803b\xcd\u40cd\u0100iy\u0713\u0718rc\u803b\xce\u40ce;\u4418ot;\u4130r;\u6111rave\u803b\xcc\u40cc\u0180;ap\u0720\u072f\u073f\u0100cg\u0734\u0737r;\u412ainaryI;\u6148lie\xf3\u03dd\u01f4\u0749\0\u0762\u0100;e\u074d\u074e\u622c\u0100gr\u0753\u0758ral;\u622bsection;\u62c2isible\u0100CT\u076c\u0772omma;\u6063imes;\u6062\u0180gpt\u077f\u0783\u0788on;\u412ef;\uc000\ud835\udd40a;\u4399cr;\u6110ilde;\u4128\u01eb\u079a\0\u079ecy;\u4406l\u803b\xcf\u40cf\u0280cfosu\u07ac\u07b7\u07bc\u07c2\u07d0\u0100iy\u07b1\u07b5rc;\u4134;\u4419r;\uc000\ud835\udd0dpf;\uc000\ud835\udd41\u01e3\u07c7\0\u07ccr;\uc000\ud835\udca5rcy;\u4408kcy;\u4404\u0380HJacfos\u07e4\u07e8\u07ec\u07f1\u07fd\u0802\u0808cy;\u4425cy;\u440cppa;\u439a\u0100ey\u07f6\u07fbdil;\u4136;\u441ar;\uc000\ud835\udd0epf;\uc000\ud835\udd42cr;\uc000\ud835\udca6\u0580JTaceflmost\u0825\u0829\u082c\u0850\u0863\u09b3\u09b8\u09c7\u09cd\u0a37\u0a47cy;\u4409\u803b<\u403c\u0280cmnpr\u0837\u083c\u0841\u0844\u084dute;\u4139bda;\u439bg;\u67ealacetrf;\u6112r;\u619e\u0180aey\u0857\u085c\u0861ron;\u413ddil;\u413b;\u441b\u0100fs\u0868\u0970t\u0500ACDFRTUVar\u087e\u08a9\u08b1\u08e0\u08e6\u08fc\u092f\u095b\u0390\u096a\u0100nr\u0883\u088fgleBracket;\u67e8row\u0180;BR\u0899\u089a\u089e\u6190ar;\u61e4ightArrow;\u61c6eiling;\u6308o\u01f5\u08b7\0\u08c3bleBracket;\u67e6n\u01d4\u08c8\0\u08d2eeVector;\u6961ector\u0100;B\u08db\u08dc\u61c3ar;\u6959loor;\u630aight\u0100AV\u08ef\u08f5rrow;\u6194ector;\u694e\u0100er\u0901\u0917e\u0180;AV\u0909\u090a\u0910\u62a3rrow;\u61a4ector;\u695aiangle\u0180;BE\u0924\u0925\u0929\u62b2ar;\u69cfqual;\u62b4p\u0180DTV\u0937\u0942\u094cownVector;\u6951eeVector;\u6960ector\u0100;B\u0956\u0957\u61bfar;\u6958ector\u0100;B\u0965\u0966\u61bcar;\u6952ight\xe1\u039cs\u0300EFGLST\u097e\u098b\u0995\u099d\u09a2\u09adqualGreater;\u62daullEqual;\u6266reater;\u6276ess;\u6aa1lantEqual;\u6a7dilde;\u6272r;\uc000\ud835\udd0f\u0100;e\u09bd\u09be\u62d8ftarrow;\u61daidot;\u413f\u0180npw\u09d4\u0a16\u0a1bg\u0200LRlr\u09de\u09f7\u0a02\u0a10eft\u0100AR\u09e6\u09ecrrow;\u67f5ightArrow;\u67f7ightArrow;\u67f6eft\u0100ar\u03b3\u0a0aight\xe1\u03bfight\xe1\u03caf;\uc000\ud835\udd43er\u0100LR\u0a22\u0a2ceftArrow;\u6199ightArrow;\u6198\u0180cht\u0a3e\u0a40\u0a42\xf2\u084c;\u61b0rok;\u4141;\u626a\u0400acefiosu\u0a5a\u0a5d\u0a60\u0a77\u0a7c\u0a85\u0a8b\u0a8ep;\u6905y;\u441c\u0100dl\u0a65\u0a6fiumSpace;\u605flintrf;\u6133r;\uc000\ud835\udd10nusPlus;\u6213pf;\uc000\ud835\udd44c\xf2\u0a76;\u439c\u0480Jacefostu\u0aa3\u0aa7\u0aad\u0ac0\u0b14\u0b19\u0d91\u0d97\u0d9ecy;\u440acute;\u4143\u0180aey\u0ab4\u0ab9\u0aberon;\u4147dil;\u4145;\u441d\u0180gsw\u0ac7\u0af0\u0b0eative\u0180MTV\u0ad3\u0adf\u0ae8ediumSpace;\u600bhi\u0100cn\u0ae6\u0ad8\xeb\u0ad9eryThi\xee\u0ad9ted\u0100GL\u0af8\u0b06reaterGreate\xf2\u0673essLes\xf3\u0a48Line;\u400ar;\uc000\ud835\udd11\u0200Bnpt\u0b22\u0b28\u0b37\u0b3areak;\u6060BreakingSpace;\u40a0f;\u6115\u0680;CDEGHLNPRSTV\u0b55\u0b56\u0b6a\u0b7c\u0ba1\u0beb\u0c04\u0c5e\u0c84\u0ca6\u0cd8\u0d61\u0d85\u6aec\u0100ou\u0b5b\u0b64ngruent;\u6262pCap;\u626doubleVerticalBar;\u6226\u0180lqx\u0b83\u0b8a\u0b9bement;\u6209ual\u0100;T\u0b92\u0b93\u6260ilde;\uc000\u2242\u0338ists;\u6204reater\u0380;EFGLST\u0bb6\u0bb7\u0bbd\u0bc9\u0bd3\u0bd8\u0be5\u626fqual;\u6271ullEqual;\uc000\u2267\u0338reater;\uc000\u226b\u0338ess;\u6279lantEqual;\uc000\u2a7e\u0338ilde;\u6275ump\u0144\u0bf2\u0bfdownHump;\uc000\u224e\u0338qual;\uc000\u224f\u0338e\u0100fs\u0c0a\u0c27tTriangle\u0180;BE\u0c1a\u0c1b\u0c21\u62eaar;\uc000\u29cf\u0338qual;\u62ecs\u0300;EGLST\u0c35\u0c36\u0c3c\u0c44\u0c4b\u0c58\u626equal;\u6270reater;\u6278ess;\uc000\u226a\u0338lantEqual;\uc000\u2a7d\u0338ilde;\u6274ested\u0100GL\u0c68\u0c79reaterGreater;\uc000\u2aa2\u0338essLess;\uc000\u2aa1\u0338recedes\u0180;ES\u0c92\u0c93\u0c9b\u6280qual;\uc000\u2aaf\u0338lantEqual;\u62e0\u0100ei\u0cab\u0cb9verseElement;\u620cghtTriangle\u0180;BE\u0ccb\u0ccc\u0cd2\u62ebar;\uc000\u29d0\u0338qual;\u62ed\u0100qu\u0cdd\u0d0cuareSu\u0100bp\u0ce8\u0cf9set\u0100;E\u0cf0\u0cf3\uc000\u228f\u0338qual;\u62e2erset\u0100;E\u0d03\u0d06\uc000\u2290\u0338qual;\u62e3\u0180bcp\u0d13\u0d24\u0d4eset\u0100;E\u0d1b\u0d1e\uc000\u2282\u20d2qual;\u6288ceeds\u0200;EST\u0d32\u0d33\u0d3b\u0d46\u6281qual;\uc000\u2ab0\u0338lantEqual;\u62e1ilde;\uc000\u227f\u0338erset\u0100;E\u0d58\u0d5b\uc000\u2283\u20d2qual;\u6289ilde\u0200;EFT\u0d6e\u0d6f\u0d75\u0d7f\u6241qual;\u6244ullEqual;\u6247ilde;\u6249erticalBar;\u6224cr;\uc000\ud835\udca9ilde\u803b\xd1\u40d1;\u439d\u0700Eacdfgmoprstuv\u0dbd\u0dc2\u0dc9\u0dd5\u0ddb\u0de0\u0de7\u0dfc\u0e02\u0e20\u0e22\u0e32\u0e3f\u0e44lig;\u4152cute\u803b\xd3\u40d3\u0100iy\u0dce\u0dd3rc\u803b\xd4\u40d4;\u441eblac;\u4150r;\uc000\ud835\udd12rave\u803b\xd2\u40d2\u0180aei\u0dee\u0df2\u0df6cr;\u414cga;\u43a9cron;\u439fpf;\uc000\ud835\udd46enCurly\u0100DQ\u0e0e\u0e1aoubleQuote;\u601cuote;\u6018;\u6a54\u0100cl\u0e27\u0e2cr;\uc000\ud835\udcaaash\u803b\xd8\u40d8i\u016c\u0e37\u0e3cde\u803b\xd5\u40d5es;\u6a37ml\u803b\xd6\u40d6er\u0100BP\u0e4b\u0e60\u0100ar\u0e50\u0e53r;\u603eac\u0100ek\u0e5a\u0e5c;\u63deet;\u63b4arenthesis;\u63dc\u0480acfhilors\u0e7f\u0e87\u0e8a\u0e8f\u0e92\u0e94\u0e9d\u0eb0\u0efcrtialD;\u6202y;\u441fr;\uc000\ud835\udd13i;\u43a6;\u43a0usMinus;\u40b1\u0100ip\u0ea2\u0eadncareplan\xe5\u069df;\u6119\u0200;eio\u0eb9\u0eba\u0ee0\u0ee4\u6abbcedes\u0200;EST\u0ec8\u0ec9\u0ecf\u0eda\u627aqual;\u6aaflantEqual;\u627cilde;\u627eme;\u6033\u0100dp\u0ee9\u0eeeuct;\u620fortion\u0100;a\u0225\u0ef9l;\u621d\u0100ci\u0f01\u0f06r;\uc000\ud835\udcab;\u43a8\u0200Ufos\u0f11\u0f16\u0f1b\u0f1fOT\u803b\"\u4022r;\uc000\ud835\udd14pf;\u611acr;\uc000\ud835\udcac\u0600BEacefhiorsu\u0f3e\u0f43\u0f47\u0f60\u0f73\u0fa7\u0faa\u0fad\u1096\u10a9\u10b4\u10bearr;\u6910G\u803b\xae\u40ae\u0180cnr\u0f4e\u0f53\u0f56ute;\u4154g;\u67ebr\u0100;t\u0f5c\u0f5d\u61a0l;\u6916\u0180aey\u0f67\u0f6c\u0f71ron;\u4158dil;\u4156;\u4420\u0100;v\u0f78\u0f79\u611cerse\u0100EU\u0f82\u0f99\u0100lq\u0f87\u0f8eement;\u620builibrium;\u61cbpEquilibrium;\u696fr\xbb\u0f79o;\u43a1ght\u0400ACDFTUVa\u0fc1\u0feb\u0ff3\u1022\u1028\u105b\u1087\u03d8\u0100nr\u0fc6\u0fd2gleBracket;\u67e9row\u0180;BL\u0fdc\u0fdd\u0fe1\u6192ar;\u61e5eftArrow;\u61c4eiling;\u6309o\u01f5\u0ff9\0\u1005bleBracket;\u67e7n\u01d4\u100a\0\u1014eeVector;\u695dector\u0100;B\u101d\u101e\u61c2ar;\u6955loor;\u630b\u0100er\u102d\u1043e\u0180;AV\u1035\u1036\u103c\u62a2rrow;\u61a6ector;\u695biangle\u0180;BE\u1050\u1051\u1055\u62b3ar;\u69d0qual;\u62b5p\u0180DTV\u1063\u106e\u1078ownVector;\u694feeVector;\u695cector\u0100;B\u1082\u1083\u61bear;\u6954ector\u0100;B\u1091\u1092\u61c0ar;\u6953\u0100pu\u109b\u109ef;\u611dndImplies;\u6970ightarrow;\u61db\u0100ch\u10b9\u10bcr;\u611b;\u61b1leDelayed;\u69f4\u0680HOacfhimoqstu\u10e4\u10f1\u10f7\u10fd\u1119\u111e\u1151\u1156\u1161\u1167\u11b5\u11bb\u11bf\u0100Cc\u10e9\u10eeHcy;\u4429y;\u4428FTcy;\u442ccute;\u415a\u0280;aeiy\u1108\u1109\u110e\u1113\u1117\u6abcron;\u4160dil;\u415erc;\u415c;\u4421r;\uc000\ud835\udd16ort\u0200DLRU\u112a\u1134\u113e\u1149ownArrow\xbb\u041eeftArrow\xbb\u089aightArrow\xbb\u0fddpArrow;\u6191gma;\u43a3allCircle;\u6218pf;\uc000\ud835\udd4a\u0272\u116d\0\0\u1170t;\u621aare\u0200;ISU\u117b\u117c\u1189\u11af\u65a1ntersection;\u6293u\u0100bp\u118f\u119eset\u0100;E\u1197\u1198\u628fqual;\u6291erset\u0100;E\u11a8\u11a9\u6290qual;\u6292nion;\u6294cr;\uc000\ud835\udcaear;\u62c6\u0200bcmp\u11c8\u11db\u1209\u120b\u0100;s\u11cd\u11ce\u62d0et\u0100;E\u11cd\u11d5qual;\u6286\u0100ch\u11e0\u1205eeds\u0200;EST\u11ed\u11ee\u11f4\u11ff\u627bqual;\u6ab0lantEqual;\u627dilde;\u627fTh\xe1\u0f8c;\u6211\u0180;es\u1212\u1213\u1223\u62d1rset\u0100;E\u121c\u121d\u6283qual;\u6287et\xbb\u1213\u0580HRSacfhiors\u123e\u1244\u1249\u1255\u125e\u1271\u1276\u129f\u12c2\u12c8\u12d1ORN\u803b\xde\u40deADE;\u6122\u0100Hc\u124e\u1252cy;\u440by;\u4426\u0100bu\u125a\u125c;\u4009;\u43a4\u0180aey\u1265\u126a\u126fron;\u4164dil;\u4162;\u4422r;\uc000\ud835\udd17\u0100ei\u127b\u1289\u01f2\u1280\0\u1287efore;\u6234a;\u4398\u0100cn\u128e\u1298kSpace;\uc000\u205f\u200aSpace;\u6009lde\u0200;EFT\u12ab\u12ac\u12b2\u12bc\u623cqual;\u6243ullEqual;\u6245ilde;\u6248pf;\uc000\ud835\udd4bipleDot;\u60db\u0100ct\u12d6\u12dbr;\uc000\ud835\udcafrok;\u4166\u0ae1\u12f7\u130e\u131a\u1326\0\u132c\u1331\0\0\0\0\0\u1338\u133d\u1377\u1385\0\u13ff\u1404\u140a\u1410\u0100cr\u12fb\u1301ute\u803b\xda\u40dar\u0100;o\u1307\u1308\u619fcir;\u6949r\u01e3\u1313\0\u1316y;\u440eve;\u416c\u0100iy\u131e\u1323rc\u803b\xdb\u40db;\u4423blac;\u4170r;\uc000\ud835\udd18rave\u803b\xd9\u40d9acr;\u416a\u0100di\u1341\u1369er\u0100BP\u1348\u135d\u0100ar\u134d\u1350r;\u405fac\u0100ek\u1357\u1359;\u63dfet;\u63b5arenthesis;\u63ddon\u0100;P\u1370\u1371\u62c3lus;\u628e\u0100gp\u137b\u137fon;\u4172f;\uc000\ud835\udd4c\u0400ADETadps\u1395\u13ae\u13b8\u13c4\u03e8\u13d2\u13d7\u13f3rrow\u0180;BD\u1150\u13a0\u13a4ar;\u6912ownArrow;\u61c5ownArrow;\u6195quilibrium;\u696eee\u0100;A\u13cb\u13cc\u62a5rrow;\u61a5own\xe1\u03f3er\u0100LR\u13de\u13e8eftArrow;\u6196ightArrow;\u6197i\u0100;l\u13f9\u13fa\u43d2on;\u43a5ing;\u416ecr;\uc000\ud835\udcb0ilde;\u4168ml\u803b\xdc\u40dc\u0480Dbcdefosv\u1427\u142c\u1430\u1433\u143e\u1485\u148a\u1490\u1496ash;\u62abar;\u6aeby;\u4412ash\u0100;l\u143b\u143c\u62a9;\u6ae6\u0100er\u1443\u1445;\u62c1\u0180bty\u144c\u1450\u147aar;\u6016\u0100;i\u144f\u1455cal\u0200BLST\u1461\u1465\u146a\u1474ar;\u6223ine;\u407ceparator;\u6758ilde;\u6240ThinSpace;\u600ar;\uc000\ud835\udd19pf;\uc000\ud835\udd4dcr;\uc000\ud835\udcb1dash;\u62aa\u0280cefos\u14a7\u14ac\u14b1\u14b6\u14bcirc;\u4174dge;\u62c0r;\uc000\ud835\udd1apf;\uc000\ud835\udd4ecr;\uc000\ud835\udcb2\u0200fios\u14cb\u14d0\u14d2\u14d8r;\uc000\ud835\udd1b;\u439epf;\uc000\ud835\udd4fcr;\uc000\ud835\udcb3\u0480AIUacfosu\u14f1\u14f5\u14f9\u14fd\u1504\u150f\u1514\u151a\u1520cy;\u442fcy;\u4407cy;\u442ecute\u803b\xdd\u40dd\u0100iy\u1509\u150drc;\u4176;\u442br;\uc000\ud835\udd1cpf;\uc000\ud835\udd50cr;\uc000\ud835\udcb4ml;\u4178\u0400Hacdefos\u1535\u1539\u153f\u154b\u154f\u155d\u1560\u1564cy;\u4416cute;\u4179\u0100ay\u1544\u1549ron;\u417d;\u4417ot;\u417b\u01f2\u1554\0\u155boWidt\xe8\u0ad9a;\u4396r;\u6128pf;\u6124cr;\uc000\ud835\udcb5\u0be1\u1583\u158a\u1590\0\u15b0\u15b6\u15bf\0\0\0\0\u15c6\u15db\u15eb\u165f\u166d\0\u1695\u169b\u16b2\u16b9\0\u16becute\u803b\xe1\u40e1reve;\u4103\u0300;Ediuy\u159c\u159d\u15a1\u15a3\u15a8\u15ad\u623e;\uc000\u223e\u0333;\u623frc\u803b\xe2\u40e2te\u80bb\xb4\u0306;\u4430lig\u803b\xe6\u40e6\u0100;r\xb2\u15ba;\uc000\ud835\udd1erave\u803b\xe0\u40e0\u0100ep\u15ca\u15d6\u0100fp\u15cf\u15d4sym;\u6135\xe8\u15d3ha;\u43b1\u0100ap\u15dfc\u0100cl\u15e4\u15e7r;\u4101g;\u6a3f\u0264\u15f0\0\0\u160a\u0280;adsv\u15fa\u15fb\u15ff\u1601\u1607\u6227nd;\u6a55;\u6a5clope;\u6a58;\u6a5a\u0380;elmrsz\u1618\u1619\u161b\u161e\u163f\u164f\u1659\u6220;\u69a4e\xbb\u1619sd\u0100;a\u1625\u1626\u6221\u0461\u1630\u1632\u1634\u1636\u1638\u163a\u163c\u163e;\u69a8;\u69a9;\u69aa;\u69ab;\u69ac;\u69ad;\u69ae;\u69aft\u0100;v\u1645\u1646\u621fb\u0100;d\u164c\u164d\u62be;\u699d\u0100pt\u1654\u1657h;\u6222\xbb\xb9arr;\u637c\u0100gp\u1663\u1667on;\u4105f;\uc000\ud835\udd52\u0380;Eaeiop\u12c1\u167b\u167d\u1682\u1684\u1687\u168a;\u6a70cir;\u6a6f;\u624ad;\u624bs;\u4027rox\u0100;e\u12c1\u1692\xf1\u1683ing\u803b\xe5\u40e5\u0180cty\u16a1\u16a6\u16a8r;\uc000\ud835\udcb6;\u402amp\u0100;e\u12c1\u16af\xf1\u0288ilde\u803b\xe3\u40e3ml\u803b\xe4\u40e4\u0100ci\u16c2\u16c8onin\xf4\u0272nt;\u6a11\u0800Nabcdefiklnoprsu\u16ed\u16f1\u1730\u173c\u1743\u1748\u1778\u177d\u17e0\u17e6\u1839\u1850\u170d\u193d\u1948\u1970ot;\u6aed\u0100cr\u16f6\u171ek\u0200ceps\u1700\u1705\u170d\u1713ong;\u624cpsilon;\u43f6rime;\u6035im\u0100;e\u171a\u171b\u623dq;\u62cd\u0176\u1722\u1726ee;\u62bded\u0100;g\u172c\u172d\u6305e\xbb\u172drk\u0100;t\u135c\u1737brk;\u63b6\u0100oy\u1701\u1741;\u4431quo;\u601e\u0280cmprt\u1753\u175b\u1761\u1764\u1768aus\u0100;e\u010a\u0109ptyv;\u69b0s\xe9\u170cno\xf5\u0113\u0180ahw\u176f\u1771\u1773;\u43b2;\u6136een;\u626cr;\uc000\ud835\udd1fg\u0380costuvw\u178d\u179d\u17b3\u17c1\u17d5\u17db\u17de\u0180aiu\u1794\u1796\u179a\xf0\u0760rc;\u65efp\xbb\u1371\u0180dpt\u17a4\u17a8\u17adot;\u6a00lus;\u6a01imes;\u6a02\u0271\u17b9\0\0\u17becup;\u6a06ar;\u6605riangle\u0100du\u17cd\u17d2own;\u65bdp;\u65b3plus;\u6a04e\xe5\u1444\xe5\u14adarow;\u690d\u0180ako\u17ed\u1826\u1835\u0100cn\u17f2\u1823k\u0180lst\u17fa\u05ab\u1802ozenge;\u69ebriangle\u0200;dlr\u1812\u1813\u1818\u181d\u65b4own;\u65beeft;\u65c2ight;\u65b8k;\u6423\u01b1\u182b\0\u1833\u01b2\u182f\0\u1831;\u6592;\u65914;\u6593ck;\u6588\u0100eo\u183e\u184d\u0100;q\u1843\u1846\uc000=\u20e5uiv;\uc000\u2261\u20e5t;\u6310\u0200ptwx\u1859\u185e\u1867\u186cf;\uc000\ud835\udd53\u0100;t\u13cb\u1863om\xbb\u13cctie;\u62c8\u0600DHUVbdhmptuv\u1885\u1896\u18aa\u18bb\u18d7\u18db\u18ec\u18ff\u1905\u190a\u1910\u1921\u0200LRlr\u188e\u1890\u1892\u1894;\u6557;\u6554;\u6556;\u6553\u0280;DUdu\u18a1\u18a2\u18a4\u18a6\u18a8\u6550;\u6566;\u6569;\u6564;\u6567\u0200LRlr\u18b3\u18b5\u18b7\u18b9;\u655d;\u655a;\u655c;\u6559\u0380;HLRhlr\u18ca\u18cb\u18cd\u18cf\u18d1\u18d3\u18d5\u6551;\u656c;\u6563;\u6560;\u656b;\u6562;\u655fox;\u69c9\u0200LRlr\u18e4\u18e6\u18e8\u18ea;\u6555;\u6552;\u6510;\u650c\u0280;DUdu\u06bd\u18f7\u18f9\u18fb\u18fd;\u6565;\u6568;\u652c;\u6534inus;\u629flus;\u629eimes;\u62a0\u0200LRlr\u1919\u191b\u191d\u191f;\u655b;\u6558;\u6518;\u6514\u0380;HLRhlr\u1930\u1931\u1933\u1935\u1937\u1939\u193b\u6502;\u656a;\u6561;\u655e;\u653c;\u6524;\u651c\u0100ev\u0123\u1942bar\u803b\xa6\u40a6\u0200ceio\u1951\u1956\u195a\u1960r;\uc000\ud835\udcb7mi;\u604fm\u0100;e\u171a\u171cl\u0180;bh\u1968\u1969\u196b\u405c;\u69c5sub;\u67c8\u016c\u1974\u197el\u0100;e\u1979\u197a\u6022t\xbb\u197ap\u0180;Ee\u012f\u1985\u1987;\u6aae\u0100;q\u06dc\u06db\u0ce1\u19a7\0\u19e8\u1a11\u1a15\u1a32\0\u1a37\u1a50\0\0\u1ab4\0\0\u1ac1\0\0\u1b21\u1b2e\u1b4d\u1b52\0\u1bfd\0\u1c0c\u0180cpr\u19ad\u19b2\u19ddute;\u4107\u0300;abcds\u19bf\u19c0\u19c4\u19ca\u19d5\u19d9\u6229nd;\u6a44rcup;\u6a49\u0100au\u19cf\u19d2p;\u6a4bp;\u6a47ot;\u6a40;\uc000\u2229\ufe00\u0100eo\u19e2\u19e5t;\u6041\xee\u0693\u0200aeiu\u19f0\u19fb\u1a01\u1a05\u01f0\u19f5\0\u19f8s;\u6a4don;\u410ddil\u803b\xe7\u40e7rc;\u4109ps\u0100;s\u1a0c\u1a0d\u6a4cm;\u6a50ot;\u410b\u0180dmn\u1a1b\u1a20\u1a26il\u80bb\xb8\u01adptyv;\u69b2t\u8100\xa2;e\u1a2d\u1a2e\u40a2r\xe4\u01b2r;\uc000\ud835\udd20\u0180cei\u1a3d\u1a40\u1a4dy;\u4447ck\u0100;m\u1a47\u1a48\u6713ark\xbb\u1a48;\u43c7r\u0380;Ecefms\u1a5f\u1a60\u1a62\u1a6b\u1aa4\u1aaa\u1aae\u65cb;\u69c3\u0180;el\u1a69\u1a6a\u1a6d\u42c6q;\u6257e\u0261\u1a74\0\0\u1a88rrow\u0100lr\u1a7c\u1a81eft;\u61baight;\u61bb\u0280RSacd\u1a92\u1a94\u1a96\u1a9a\u1a9f\xbb\u0f47;\u64c8st;\u629birc;\u629aash;\u629dnint;\u6a10id;\u6aefcir;\u69c2ubs\u0100;u\u1abb\u1abc\u6663it\xbb\u1abc\u02ec\u1ac7\u1ad4\u1afa\0\u1b0aon\u0100;e\u1acd\u1ace\u403a\u0100;q\xc7\xc6\u026d\u1ad9\0\0\u1ae2a\u0100;t\u1ade\u1adf\u402c;\u4040\u0180;fl\u1ae8\u1ae9\u1aeb\u6201\xee\u1160e\u0100mx\u1af1\u1af6ent\xbb\u1ae9e\xf3\u024d\u01e7\u1afe\0\u1b07\u0100;d\u12bb\u1b02ot;\u6a6dn\xf4\u0246\u0180fry\u1b10\u1b14\u1b17;\uc000\ud835\udd54o\xe4\u0254\u8100\xa9;s\u0155\u1b1dr;\u6117\u0100ao\u1b25\u1b29rr;\u61b5ss;\u6717\u0100cu\u1b32\u1b37r;\uc000\ud835\udcb8\u0100bp\u1b3c\u1b44\u0100;e\u1b41\u1b42\u6acf;\u6ad1\u0100;e\u1b49\u1b4a\u6ad0;\u6ad2dot;\u62ef\u0380delprvw\u1b60\u1b6c\u1b77\u1b82\u1bac\u1bd4\u1bf9arr\u0100lr\u1b68\u1b6a;\u6938;\u6935\u0270\u1b72\0\0\u1b75r;\u62dec;\u62dfarr\u0100;p\u1b7f\u1b80\u61b6;\u693d\u0300;bcdos\u1b8f\u1b90\u1b96\u1ba1\u1ba5\u1ba8\u622arcap;\u6a48\u0100au\u1b9b\u1b9ep;\u6a46p;\u6a4aot;\u628dr;\u6a45;\uc000\u222a\ufe00\u0200alrv\u1bb5\u1bbf\u1bde\u1be3rr\u0100;m\u1bbc\u1bbd\u61b7;\u693cy\u0180evw\u1bc7\u1bd4\u1bd8q\u0270\u1bce\0\0\u1bd2re\xe3\u1b73u\xe3\u1b75ee;\u62ceedge;\u62cfen\u803b\xa4\u40a4earrow\u0100lr\u1bee\u1bf3eft\xbb\u1b80ight\xbb\u1bbde\xe4\u1bdd\u0100ci\u1c01\u1c07onin\xf4\u01f7nt;\u6231lcty;\u632d\u0980AHabcdefhijlorstuwz\u1c38\u1c3b\u1c3f\u1c5d\u1c69\u1c75\u1c8a\u1c9e\u1cac\u1cb7\u1cfb\u1cff\u1d0d\u1d7b\u1d91\u1dab\u1dbb\u1dc6\u1dcdr\xf2\u0381ar;\u6965\u0200glrs\u1c48\u1c4d\u1c52\u1c54ger;\u6020eth;\u6138\xf2\u1133h\u0100;v\u1c5a\u1c5b\u6010\xbb\u090a\u016b\u1c61\u1c67arow;\u690fa\xe3\u0315\u0100ay\u1c6e\u1c73ron;\u410f;\u4434\u0180;ao\u0332\u1c7c\u1c84\u0100gr\u02bf\u1c81r;\u61catseq;\u6a77\u0180glm\u1c91\u1c94\u1c98\u803b\xb0\u40b0ta;\u43b4ptyv;\u69b1\u0100ir\u1ca3\u1ca8sht;\u697f;\uc000\ud835\udd21ar\u0100lr\u1cb3\u1cb5\xbb\u08dc\xbb\u101e\u0280aegsv\u1cc2\u0378\u1cd6\u1cdc\u1ce0m\u0180;os\u0326\u1cca\u1cd4nd\u0100;s\u0326\u1cd1uit;\u6666amma;\u43ddin;\u62f2\u0180;io\u1ce7\u1ce8\u1cf8\u40f7de\u8100\xf7;o\u1ce7\u1cf0ntimes;\u62c7n\xf8\u1cf7cy;\u4452c\u026f\u1d06\0\0\u1d0arn;\u631eop;\u630d\u0280lptuw\u1d18\u1d1d\u1d22\u1d49\u1d55lar;\u4024f;\uc000\ud835\udd55\u0280;emps\u030b\u1d2d\u1d37\u1d3d\u1d42q\u0100;d\u0352\u1d33ot;\u6251inus;\u6238lus;\u6214quare;\u62a1blebarwedg\xe5\xfan\u0180adh\u112e\u1d5d\u1d67ownarrow\xf3\u1c83arpoon\u0100lr\u1d72\u1d76ef\xf4\u1cb4igh\xf4\u1cb6\u0162\u1d7f\u1d85karo\xf7\u0f42\u026f\u1d8a\0\0\u1d8ern;\u631fop;\u630c\u0180cot\u1d98\u1da3\u1da6\u0100ry\u1d9d\u1da1;\uc000\ud835\udcb9;\u4455l;\u69f6rok;\u4111\u0100dr\u1db0\u1db4ot;\u62f1i\u0100;f\u1dba\u1816\u65bf\u0100ah\u1dc0\u1dc3r\xf2\u0429a\xf2\u0fa6angle;\u69a6\u0100ci\u1dd2\u1dd5y;\u445fgrarr;\u67ff\u0900Dacdefglmnopqrstux\u1e01\u1e09\u1e19\u1e38\u0578\u1e3c\u1e49\u1e61\u1e7e\u1ea5\u1eaf\u1ebd\u1ee1\u1f2a\u1f37\u1f44\u1f4e\u1f5a\u0100Do\u1e06\u1d34o\xf4\u1c89\u0100cs\u1e0e\u1e14ute\u803b\xe9\u40e9ter;\u6a6e\u0200aioy\u1e22\u1e27\u1e31\u1e36ron;\u411br\u0100;c\u1e2d\u1e2e\u6256\u803b\xea\u40ealon;\u6255;\u444dot;\u4117\u0100Dr\u1e41\u1e45ot;\u6252;\uc000\ud835\udd22\u0180;rs\u1e50\u1e51\u1e57\u6a9aave\u803b\xe8\u40e8\u0100;d\u1e5c\u1e5d\u6a96ot;\u6a98\u0200;ils\u1e6a\u1e6b\u1e72\u1e74\u6a99nters;\u63e7;\u6113\u0100;d\u1e79\u1e7a\u6a95ot;\u6a97\u0180aps\u1e85\u1e89\u1e97cr;\u4113ty\u0180;sv\u1e92\u1e93\u1e95\u6205et\xbb\u1e93p\u01001;\u1e9d\u1ea4\u0133\u1ea1\u1ea3;\u6004;\u6005\u6003\u0100gs\u1eaa\u1eac;\u414bp;\u6002\u0100gp\u1eb4\u1eb8on;\u4119f;\uc000\ud835\udd56\u0180als\u1ec4\u1ece\u1ed2r\u0100;s\u1eca\u1ecb\u62d5l;\u69e3us;\u6a71i\u0180;lv\u1eda\u1edb\u1edf\u43b5on\xbb\u1edb;\u43f5\u0200csuv\u1eea\u1ef3\u1f0b\u1f23\u0100io\u1eef\u1e31rc\xbb\u1e2e\u0269\u1ef9\0\0\u1efb\xed\u0548ant\u0100gl\u1f02\u1f06tr\xbb\u1e5dess\xbb\u1e7a\u0180aei\u1f12\u1f16\u1f1als;\u403dst;\u625fv\u0100;D\u0235\u1f20D;\u6a78parsl;\u69e5\u0100Da\u1f2f\u1f33ot;\u6253rr;\u6971\u0180cdi\u1f3e\u1f41\u1ef8r;\u612fo\xf4\u0352\u0100ah\u1f49\u1f4b;\u43b7\u803b\xf0\u40f0\u0100mr\u1f53\u1f57l\u803b\xeb\u40ebo;\u60ac\u0180cip\u1f61\u1f64\u1f67l;\u4021s\xf4\u056e\u0100eo\u1f6c\u1f74ctatio\xee\u0559nential\xe5\u0579\u09e1\u1f92\0\u1f9e\0\u1fa1\u1fa7\0\0\u1fc6\u1fcc\0\u1fd3\0\u1fe6\u1fea\u2000\0\u2008\u205allingdotse\xf1\u1e44y;\u4444male;\u6640\u0180ilr\u1fad\u1fb3\u1fc1lig;\u8000\ufb03\u0269\u1fb9\0\0\u1fbdg;\u8000\ufb00ig;\u8000\ufb04;\uc000\ud835\udd23lig;\u8000\ufb01lig;\uc000fj\u0180alt\u1fd9\u1fdc\u1fe1t;\u666dig;\u8000\ufb02ns;\u65b1of;\u4192\u01f0\u1fee\0\u1ff3f;\uc000\ud835\udd57\u0100ak\u05bf\u1ff7\u0100;v\u1ffc\u1ffd\u62d4;\u6ad9artint;\u6a0d\u0100ao\u200c\u2055\u0100cs\u2011\u2052\u03b1\u201a\u2030\u2038\u2045\u2048\0\u2050\u03b2\u2022\u2025\u2027\u202a\u202c\0\u202e\u803b\xbd\u40bd;\u6153\u803b\xbc\u40bc;\u6155;\u6159;\u615b\u01b3\u2034\0\u2036;\u6154;\u6156\u02b4\u203e\u2041\0\0\u2043\u803b\xbe\u40be;\u6157;\u615c5;\u6158\u01b6\u204c\0\u204e;\u615a;\u615d8;\u615el;\u6044wn;\u6322cr;\uc000\ud835\udcbb\u0880Eabcdefgijlnorstv\u2082\u2089\u209f\u20a5\u20b0\u20b4\u20f0\u20f5\u20fa\u20ff\u2103\u2112\u2138\u0317\u213e\u2152\u219e\u0100;l\u064d\u2087;\u6a8c\u0180cmp\u2090\u2095\u209dute;\u41f5ma\u0100;d\u209c\u1cda\u43b3;\u6a86reve;\u411f\u0100iy\u20aa\u20aerc;\u411d;\u4433ot;\u4121\u0200;lqs\u063e\u0642\u20bd\u20c9\u0180;qs\u063e\u064c\u20c4lan\xf4\u0665\u0200;cdl\u0665\u20d2\u20d5\u20e5c;\u6aa9ot\u0100;o\u20dc\u20dd\u6a80\u0100;l\u20e2\u20e3\u6a82;\u6a84\u0100;e\u20ea\u20ed\uc000\u22db\ufe00s;\u6a94r;\uc000\ud835\udd24\u0100;g\u0673\u061bmel;\u6137cy;\u4453\u0200;Eaj\u065a\u210c\u210e\u2110;\u6a92;\u6aa5;\u6aa4\u0200Eaes\u211b\u211d\u2129\u2134;\u6269p\u0100;p\u2123\u2124\u6a8arox\xbb\u2124\u0100;q\u212e\u212f\u6a88\u0100;q\u212e\u211bim;\u62e7pf;\uc000\ud835\udd58\u0100ci\u2143\u2146r;\u610am\u0180;el\u066b\u214e\u2150;\u6a8e;\u6a90\u8300>;cdlqr\u05ee\u2160\u216a\u216e\u2173\u2179\u0100ci\u2165\u2167;\u6aa7r;\u6a7aot;\u62d7Par;\u6995uest;\u6a7c\u0280adels\u2184\u216a\u2190\u0656\u219b\u01f0\u2189\0\u218epro\xf8\u209er;\u6978q\u0100lq\u063f\u2196les\xf3\u2088i\xed\u066b\u0100en\u21a3\u21adrtneqq;\uc000\u2269\ufe00\xc5\u21aa\u0500Aabcefkosy\u21c4\u21c7\u21f1\u21f5\u21fa\u2218\u221d\u222f\u2268\u227dr\xf2\u03a0\u0200ilmr\u21d0\u21d4\u21d7\u21dbrs\xf0\u1484f\xbb\u2024il\xf4\u06a9\u0100dr\u21e0\u21e4cy;\u444a\u0180;cw\u08f4\u21eb\u21efir;\u6948;\u61adar;\u610firc;\u4125\u0180alr\u2201\u220e\u2213rts\u0100;u\u2209\u220a\u6665it\xbb\u220alip;\u6026con;\u62b9r;\uc000\ud835\udd25s\u0100ew\u2223\u2229arow;\u6925arow;\u6926\u0280amopr\u223a\u223e\u2243\u225e\u2263rr;\u61fftht;\u623bk\u0100lr\u2249\u2253eftarrow;\u61a9ightarrow;\u61aaf;\uc000\ud835\udd59bar;\u6015\u0180clt\u226f\u2274\u2278r;\uc000\ud835\udcbdas\xe8\u21f4rok;\u4127\u0100bp\u2282\u2287ull;\u6043hen\xbb\u1c5b\u0ae1\u22a3\0\u22aa\0\u22b8\u22c5\u22ce\0\u22d5\u22f3\0\0\u22f8\u2322\u2367\u2362\u237f\0\u2386\u23aa\u23b4cute\u803b\xed\u40ed\u0180;iy\u0771\u22b0\u22b5rc\u803b\xee\u40ee;\u4438\u0100cx\u22bc\u22bfy;\u4435cl\u803b\xa1\u40a1\u0100fr\u039f\u22c9;\uc000\ud835\udd26rave\u803b\xec\u40ec\u0200;ino\u073e\u22dd\u22e9\u22ee\u0100in\u22e2\u22e6nt;\u6a0ct;\u622dfin;\u69dcta;\u6129lig;\u4133\u0180aop\u22fe\u231a\u231d\u0180cgt\u2305\u2308\u2317r;\u412b\u0180elp\u071f\u230f\u2313in\xe5\u078ear\xf4\u0720h;\u4131f;\u62b7ed;\u41b5\u0280;cfot\u04f4\u232c\u2331\u233d\u2341are;\u6105in\u0100;t\u2338\u2339\u621eie;\u69dddo\xf4\u2319\u0280;celp\u0757\u234c\u2350\u235b\u2361al;\u62ba\u0100gr\u2355\u2359er\xf3\u1563\xe3\u234darhk;\u6a17rod;\u6a3c\u0200cgpt\u236f\u2372\u2376\u237by;\u4451on;\u412ff;\uc000\ud835\udd5aa;\u43b9uest\u803b\xbf\u40bf\u0100ci\u238a\u238fr;\uc000\ud835\udcben\u0280;Edsv\u04f4\u239b\u239d\u23a1\u04f3;\u62f9ot;\u62f5\u0100;v\u23a6\u23a7\u62f4;\u62f3\u0100;i\u0777\u23aelde;\u4129\u01eb\u23b8\0\u23bccy;\u4456l\u803b\xef\u40ef\u0300cfmosu\u23cc\u23d7\u23dc\u23e1\u23e7\u23f5\u0100iy\u23d1\u23d5rc;\u4135;\u4439r;\uc000\ud835\udd27ath;\u4237pf;\uc000\ud835\udd5b\u01e3\u23ec\0\u23f1r;\uc000\ud835\udcbfrcy;\u4458kcy;\u4454\u0400acfghjos\u240b\u2416\u2422\u2427\u242d\u2431\u2435\u243bppa\u0100;v\u2413\u2414\u43ba;\u43f0\u0100ey\u241b\u2420dil;\u4137;\u443ar;\uc000\ud835\udd28reen;\u4138cy;\u4445cy;\u445cpf;\uc000\ud835\udd5ccr;\uc000\ud835\udcc0\u0b80ABEHabcdefghjlmnoprstuv\u2470\u2481\u2486\u248d\u2491\u250e\u253d\u255a\u2580\u264e\u265e\u2665\u2679\u267d\u269a\u26b2\u26d8\u275d\u2768\u278b\u27c0\u2801\u2812\u0180art\u2477\u247a\u247cr\xf2\u09c6\xf2\u0395ail;\u691barr;\u690e\u0100;g\u0994\u248b;\u6a8bar;\u6962\u0963\u24a5\0\u24aa\0\u24b1\0\0\0\0\0\u24b5\u24ba\0\u24c6\u24c8\u24cd\0\u24f9ute;\u413amptyv;\u69b4ra\xee\u084cbda;\u43bbg\u0180;dl\u088e\u24c1\u24c3;\u6991\xe5\u088e;\u6a85uo\u803b\xab\u40abr\u0400;bfhlpst\u0899\u24de\u24e6\u24e9\u24eb\u24ee\u24f1\u24f5\u0100;f\u089d\u24e3s;\u691fs;\u691d\xeb\u2252p;\u61abl;\u6939im;\u6973l;\u61a2\u0180;ae\u24ff\u2500\u2504\u6aabil;\u6919\u0100;s\u2509\u250a\u6aad;\uc000\u2aad\ufe00\u0180abr\u2515\u2519\u251drr;\u690crk;\u6772\u0100ak\u2522\u252cc\u0100ek\u2528\u252a;\u407b;\u405b\u0100es\u2531\u2533;\u698bl\u0100du\u2539\u253b;\u698f;\u698d\u0200aeuy\u2546\u254b\u2556\u2558ron;\u413e\u0100di\u2550\u2554il;\u413c\xec\u08b0\xe2\u2529;\u443b\u0200cqrs\u2563\u2566\u256d\u257da;\u6936uo\u0100;r\u0e19\u1746\u0100du\u2572\u2577har;\u6967shar;\u694bh;\u61b2\u0280;fgqs\u258b\u258c\u0989\u25f3\u25ff\u6264t\u0280ahlrt\u2598\u25a4\u25b7\u25c2\u25e8rrow\u0100;t\u0899\u25a1a\xe9\u24f6arpoon\u0100du\u25af\u25b4own\xbb\u045ap\xbb\u0966eftarrows;\u61c7ight\u0180ahs\u25cd\u25d6\u25derrow\u0100;s\u08f4\u08a7arpoon\xf3\u0f98quigarro\xf7\u21f0hreetimes;\u62cb\u0180;qs\u258b\u0993\u25falan\xf4\u09ac\u0280;cdgs\u09ac\u260a\u260d\u261d\u2628c;\u6aa8ot\u0100;o\u2614\u2615\u6a7f\u0100;r\u261a\u261b\u6a81;\u6a83\u0100;e\u2622\u2625\uc000\u22da\ufe00s;\u6a93\u0280adegs\u2633\u2639\u263d\u2649\u264bppro\xf8\u24c6ot;\u62d6q\u0100gq\u2643\u2645\xf4\u0989gt\xf2\u248c\xf4\u099bi\xed\u09b2\u0180ilr\u2655\u08e1\u265asht;\u697c;\uc000\ud835\udd29\u0100;E\u099c\u2663;\u6a91\u0161\u2669\u2676r\u0100du\u25b2\u266e\u0100;l\u0965\u2673;\u696alk;\u6584cy;\u4459\u0280;acht\u0a48\u2688\u268b\u2691\u2696r\xf2\u25c1orne\xf2\u1d08ard;\u696bri;\u65fa\u0100io\u269f\u26a4dot;\u4140ust\u0100;a\u26ac\u26ad\u63b0che\xbb\u26ad\u0200Eaes\u26bb\u26bd\u26c9\u26d4;\u6268p\u0100;p\u26c3\u26c4\u6a89rox\xbb\u26c4\u0100;q\u26ce\u26cf\u6a87\u0100;q\u26ce\u26bbim;\u62e6\u0400abnoptwz\u26e9\u26f4\u26f7\u271a\u272f\u2741\u2747\u2750\u0100nr\u26ee\u26f1g;\u67ecr;\u61fdr\xeb\u08c1g\u0180lmr\u26ff\u270d\u2714eft\u0100ar\u09e6\u2707ight\xe1\u09f2apsto;\u67fcight\xe1\u09fdparrow\u0100lr\u2725\u2729ef\xf4\u24edight;\u61ac\u0180afl\u2736\u2739\u273dr;\u6985;\uc000\ud835\udd5dus;\u6a2dimes;\u6a34\u0161\u274b\u274fst;\u6217\xe1\u134e\u0180;ef\u2757\u2758\u1800\u65cange\xbb\u2758ar\u0100;l\u2764\u2765\u4028t;\u6993\u0280achmt\u2773\u2776\u277c\u2785\u2787r\xf2\u08a8orne\xf2\u1d8car\u0100;d\u0f98\u2783;\u696d;\u600eri;\u62bf\u0300achiqt\u2798\u279d\u0a40\u27a2\u27ae\u27bbquo;\u6039r;\uc000\ud835\udcc1m\u0180;eg\u09b2\u27aa\u27ac;\u6a8d;\u6a8f\u0100bu\u252a\u27b3o\u0100;r\u0e1f\u27b9;\u601arok;\u4142\u8400<;cdhilqr\u082b\u27d2\u2639\u27dc\u27e0\u27e5\u27ea\u27f0\u0100ci\u27d7\u27d9;\u6aa6r;\u6a79re\xe5\u25f2mes;\u62c9arr;\u6976uest;\u6a7b\u0100Pi\u27f5\u27f9ar;\u6996\u0180;ef\u2800\u092d\u181b\u65c3r\u0100du\u2807\u280dshar;\u694ahar;\u6966\u0100en\u2817\u2821rtneqq;\uc000\u2268\ufe00\xc5\u281e\u0700Dacdefhilnopsu\u2840\u2845\u2882\u288e\u2893\u28a0\u28a5\u28a8\u28da\u28e2\u28e4\u0a83\u28f3\u2902Dot;\u623a\u0200clpr\u284e\u2852\u2863\u287dr\u803b\xaf\u40af\u0100et\u2857\u2859;\u6642\u0100;e\u285e\u285f\u6720se\xbb\u285f\u0100;s\u103b\u2868to\u0200;dlu\u103b\u2873\u2877\u287bow\xee\u048cef\xf4\u090f\xf0\u13d1ker;\u65ae\u0100oy\u2887\u288cmma;\u6a29;\u443cash;\u6014asuredangle\xbb\u1626r;\uc000\ud835\udd2ao;\u6127\u0180cdn\u28af\u28b4\u28c9ro\u803b\xb5\u40b5\u0200;acd\u1464\u28bd\u28c0\u28c4s\xf4\u16a7ir;\u6af0ot\u80bb\xb7\u01b5us\u0180;bd\u28d2\u1903\u28d3\u6212\u0100;u\u1d3c\u28d8;\u6a2a\u0163\u28de\u28e1p;\u6adb\xf2\u2212\xf0\u0a81\u0100dp\u28e9\u28eeels;\u62a7f;\uc000\ud835\udd5e\u0100ct\u28f8\u28fdr;\uc000\ud835\udcc2pos\xbb\u159d\u0180;lm\u2909\u290a\u290d\u43bctimap;\u62b8\u0c00GLRVabcdefghijlmoprstuvw\u2942\u2953\u297e\u2989\u2998\u29da\u29e9\u2a15\u2a1a\u2a58\u2a5d\u2a83\u2a95\u2aa4\u2aa8\u2b04\u2b07\u2b44\u2b7f\u2bae\u2c34\u2c67\u2c7c\u2ce9\u0100gt\u2947\u294b;\uc000\u22d9\u0338\u0100;v\u2950\u0bcf\uc000\u226b\u20d2\u0180elt\u295a\u2972\u2976ft\u0100ar\u2961\u2967rrow;\u61cdightarrow;\u61ce;\uc000\u22d8\u0338\u0100;v\u297b\u0c47\uc000\u226a\u20d2ightarrow;\u61cf\u0100Dd\u298e\u2993ash;\u62afash;\u62ae\u0280bcnpt\u29a3\u29a7\u29ac\u29b1\u29ccla\xbb\u02deute;\u4144g;\uc000\u2220\u20d2\u0280;Eiop\u0d84\u29bc\u29c0\u29c5\u29c8;\uc000\u2a70\u0338d;\uc000\u224b\u0338s;\u4149ro\xf8\u0d84ur\u0100;a\u29d3\u29d4\u666el\u0100;s\u29d3\u0b38\u01f3\u29df\0\u29e3p\u80bb\xa0\u0b37mp\u0100;e\u0bf9\u0c00\u0280aeouy\u29f4\u29fe\u2a03\u2a10\u2a13\u01f0\u29f9\0\u29fb;\u6a43on;\u4148dil;\u4146ng\u0100;d\u0d7e\u2a0aot;\uc000\u2a6d\u0338p;\u6a42;\u443dash;\u6013\u0380;Aadqsx\u0b92\u2a29\u2a2d\u2a3b\u2a41\u2a45\u2a50rr;\u61d7r\u0100hr\u2a33\u2a36k;\u6924\u0100;o\u13f2\u13f0ot;\uc000\u2250\u0338ui\xf6\u0b63\u0100ei\u2a4a\u2a4ear;\u6928\xed\u0b98ist\u0100;s\u0ba0\u0b9fr;\uc000\ud835\udd2b\u0200Eest\u0bc5\u2a66\u2a79\u2a7c\u0180;qs\u0bbc\u2a6d\u0be1\u0180;qs\u0bbc\u0bc5\u2a74lan\xf4\u0be2i\xed\u0bea\u0100;r\u0bb6\u2a81\xbb\u0bb7\u0180Aap\u2a8a\u2a8d\u2a91r\xf2\u2971rr;\u61aear;\u6af2\u0180;sv\u0f8d\u2a9c\u0f8c\u0100;d\u2aa1\u2aa2\u62fc;\u62facy;\u445a\u0380AEadest\u2ab7\u2aba\u2abe\u2ac2\u2ac5\u2af6\u2af9r\xf2\u2966;\uc000\u2266\u0338rr;\u619ar;\u6025\u0200;fqs\u0c3b\u2ace\u2ae3\u2aeft\u0100ar\u2ad4\u2ad9rro\xf7\u2ac1ightarro\xf7\u2a90\u0180;qs\u0c3b\u2aba\u2aealan\xf4\u0c55\u0100;s\u0c55\u2af4\xbb\u0c36i\xed\u0c5d\u0100;r\u0c35\u2afei\u0100;e\u0c1a\u0c25i\xe4\u0d90\u0100pt\u2b0c\u2b11f;\uc000\ud835\udd5f\u8180\xac;in\u2b19\u2b1a\u2b36\u40acn\u0200;Edv\u0b89\u2b24\u2b28\u2b2e;\uc000\u22f9\u0338ot;\uc000\u22f5\u0338\u01e1\u0b89\u2b33\u2b35;\u62f7;\u62f6i\u0100;v\u0cb8\u2b3c\u01e1\u0cb8\u2b41\u2b43;\u62fe;\u62fd\u0180aor\u2b4b\u2b63\u2b69r\u0200;ast\u0b7b\u2b55\u2b5a\u2b5flle\xec\u0b7bl;\uc000\u2afd\u20e5;\uc000\u2202\u0338lint;\u6a14\u0180;ce\u0c92\u2b70\u2b73u\xe5\u0ca5\u0100;c\u0c98\u2b78\u0100;e\u0c92\u2b7d\xf1\u0c98\u0200Aait\u2b88\u2b8b\u2b9d\u2ba7r\xf2\u2988rr\u0180;cw\u2b94\u2b95\u2b99\u619b;\uc000\u2933\u0338;\uc000\u219d\u0338ghtarrow\xbb\u2b95ri\u0100;e\u0ccb\u0cd6\u0380chimpqu\u2bbd\u2bcd\u2bd9\u2b04\u0b78\u2be4\u2bef\u0200;cer\u0d32\u2bc6\u0d37\u2bc9u\xe5\u0d45;\uc000\ud835\udcc3ort\u026d\u2b05\0\0\u2bd6ar\xe1\u2b56m\u0100;e\u0d6e\u2bdf\u0100;q\u0d74\u0d73su\u0100bp\u2beb\u2bed\xe5\u0cf8\xe5\u0d0b\u0180bcp\u2bf6\u2c11\u2c19\u0200;Ees\u2bff\u2c00\u0d22\u2c04\u6284;\uc000\u2ac5\u0338et\u0100;e\u0d1b\u2c0bq\u0100;q\u0d23\u2c00c\u0100;e\u0d32\u2c17\xf1\u0d38\u0200;Ees\u2c22\u2c23\u0d5f\u2c27\u6285;\uc000\u2ac6\u0338et\u0100;e\u0d58\u2c2eq\u0100;q\u0d60\u2c23\u0200gilr\u2c3d\u2c3f\u2c45\u2c47\xec\u0bd7lde\u803b\xf1\u40f1\xe7\u0c43iangle\u0100lr\u2c52\u2c5ceft\u0100;e\u0c1a\u2c5a\xf1\u0c26ight\u0100;e\u0ccb\u2c65\xf1\u0cd7\u0100;m\u2c6c\u2c6d\u43bd\u0180;es\u2c74\u2c75\u2c79\u4023ro;\u6116p;\u6007\u0480DHadgilrs\u2c8f\u2c94\u2c99\u2c9e\u2ca3\u2cb0\u2cb6\u2cd3\u2ce3ash;\u62adarr;\u6904p;\uc000\u224d\u20d2ash;\u62ac\u0100et\u2ca8\u2cac;\uc000\u2265\u20d2;\uc000>\u20d2nfin;\u69de\u0180Aet\u2cbd\u2cc1\u2cc5rr;\u6902;\uc000\u2264\u20d2\u0100;r\u2cca\u2ccd\uc000<\u20d2ie;\uc000\u22b4\u20d2\u0100At\u2cd8\u2cdcrr;\u6903rie;\uc000\u22b5\u20d2im;\uc000\u223c\u20d2\u0180Aan\u2cf0\u2cf4\u2d02rr;\u61d6r\u0100hr\u2cfa\u2cfdk;\u6923\u0100;o\u13e7\u13e5ear;\u6927\u1253\u1a95\0\0\0\0\0\0\0\0\0\0\0\0\0\u2d2d\0\u2d38\u2d48\u2d60\u2d65\u2d72\u2d84\u1b07\0\0\u2d8d\u2dab\0\u2dc8\u2dce\0\u2ddc\u2e19\u2e2b\u2e3e\u2e43\u0100cs\u2d31\u1a97ute\u803b\xf3\u40f3\u0100iy\u2d3c\u2d45r\u0100;c\u1a9e\u2d42\u803b\xf4\u40f4;\u443e\u0280abios\u1aa0\u2d52\u2d57\u01c8\u2d5alac;\u4151v;\u6a38old;\u69bclig;\u4153\u0100cr\u2d69\u2d6dir;\u69bf;\uc000\ud835\udd2c\u036f\u2d79\0\0\u2d7c\0\u2d82n;\u42dbave\u803b\xf2\u40f2;\u69c1\u0100bm\u2d88\u0df4ar;\u69b5\u0200acit\u2d95\u2d98\u2da5\u2da8r\xf2\u1a80\u0100ir\u2d9d\u2da0r;\u69beoss;\u69bbn\xe5\u0e52;\u69c0\u0180aei\u2db1\u2db5\u2db9cr;\u414dga;\u43c9\u0180cdn\u2dc0\u2dc5\u01cdron;\u43bf;\u69b6pf;\uc000\ud835\udd60\u0180ael\u2dd4\u2dd7\u01d2r;\u69b7rp;\u69b9\u0380;adiosv\u2dea\u2deb\u2dee\u2e08\u2e0d\u2e10\u2e16\u6228r\xf2\u1a86\u0200;efm\u2df7\u2df8\u2e02\u2e05\u6a5dr\u0100;o\u2dfe\u2dff\u6134f\xbb\u2dff\u803b\xaa\u40aa\u803b\xba\u40bagof;\u62b6r;\u6a56lope;\u6a57;\u6a5b\u0180clo\u2e1f\u2e21\u2e27\xf2\u2e01ash\u803b\xf8\u40f8l;\u6298i\u016c\u2e2f\u2e34de\u803b\xf5\u40f5es\u0100;a\u01db\u2e3as;\u6a36ml\u803b\xf6\u40f6bar;\u633d\u0ae1\u2e5e\0\u2e7d\0\u2e80\u2e9d\0\u2ea2\u2eb9\0\0\u2ecb\u0e9c\0\u2f13\0\0\u2f2b\u2fbc\0\u2fc8r\u0200;ast\u0403\u2e67\u2e72\u0e85\u8100\xb6;l\u2e6d\u2e6e\u40b6le\xec\u0403\u0269\u2e78\0\0\u2e7bm;\u6af3;\u6afdy;\u443fr\u0280cimpt\u2e8b\u2e8f\u2e93\u1865\u2e97nt;\u4025od;\u402eil;\u6030enk;\u6031r;\uc000\ud835\udd2d\u0180imo\u2ea8\u2eb0\u2eb4\u0100;v\u2ead\u2eae\u43c6;\u43d5ma\xf4\u0a76ne;\u660e\u0180;tv\u2ebf\u2ec0\u2ec8\u43c0chfork\xbb\u1ffd;\u43d6\u0100au\u2ecf\u2edfn\u0100ck\u2ed5\u2eddk\u0100;h\u21f4\u2edb;\u610e\xf6\u21f4s\u0480;abcdemst\u2ef3\u2ef4\u1908\u2ef9\u2efd\u2f04\u2f06\u2f0a\u2f0e\u402bcir;\u6a23ir;\u6a22\u0100ou\u1d40\u2f02;\u6a25;\u6a72n\u80bb\xb1\u0e9dim;\u6a26wo;\u6a27\u0180ipu\u2f19\u2f20\u2f25ntint;\u6a15f;\uc000\ud835\udd61nd\u803b\xa3\u40a3\u0500;Eaceinosu\u0ec8\u2f3f\u2f41\u2f44\u2f47\u2f81\u2f89\u2f92\u2f7e\u2fb6;\u6ab3p;\u6ab7u\xe5\u0ed9\u0100;c\u0ece\u2f4c\u0300;acens\u0ec8\u2f59\u2f5f\u2f66\u2f68\u2f7eppro\xf8\u2f43urlye\xf1\u0ed9\xf1\u0ece\u0180aes\u2f6f\u2f76\u2f7approx;\u6ab9qq;\u6ab5im;\u62e8i\xed\u0edfme\u0100;s\u2f88\u0eae\u6032\u0180Eas\u2f78\u2f90\u2f7a\xf0\u2f75\u0180dfp\u0eec\u2f99\u2faf\u0180als\u2fa0\u2fa5\u2faalar;\u632eine;\u6312urf;\u6313\u0100;t\u0efb\u2fb4\xef\u0efbrel;\u62b0\u0100ci\u2fc0\u2fc5r;\uc000\ud835\udcc5;\u43c8ncsp;\u6008\u0300fiopsu\u2fda\u22e2\u2fdf\u2fe5\u2feb\u2ff1r;\uc000\ud835\udd2epf;\uc000\ud835\udd62rime;\u6057cr;\uc000\ud835\udcc6\u0180aeo\u2ff8\u3009\u3013t\u0100ei\u2ffe\u3005rnion\xf3\u06b0nt;\u6a16st\u0100;e\u3010\u3011\u403f\xf1\u1f19\xf4\u0f14\u0a80ABHabcdefhilmnoprstux\u3040\u3051\u3055\u3059\u30e0\u310e\u312b\u3147\u3162\u3172\u318e\u3206\u3215\u3224\u3229\u3258\u326e\u3272\u3290\u32b0\u32b7\u0180art\u3047\u304a\u304cr\xf2\u10b3\xf2\u03ddail;\u691car\xf2\u1c65ar;\u6964\u0380cdenqrt\u3068\u3075\u3078\u307f\u308f\u3094\u30cc\u0100eu\u306d\u3071;\uc000\u223d\u0331te;\u4155i\xe3\u116emptyv;\u69b3g\u0200;del\u0fd1\u3089\u308b\u308d;\u6992;\u69a5\xe5\u0fd1uo\u803b\xbb\u40bbr\u0580;abcfhlpstw\u0fdc\u30ac\u30af\u30b7\u30b9\u30bc\u30be\u30c0\u30c3\u30c7\u30cap;\u6975\u0100;f\u0fe0\u30b4s;\u6920;\u6933s;\u691e\xeb\u225d\xf0\u272el;\u6945im;\u6974l;\u61a3;\u619d\u0100ai\u30d1\u30d5il;\u691ao\u0100;n\u30db\u30dc\u6236al\xf3\u0f1e\u0180abr\u30e7\u30ea\u30eer\xf2\u17e5rk;\u6773\u0100ak\u30f3\u30fdc\u0100ek\u30f9\u30fb;\u407d;\u405d\u0100es\u3102\u3104;\u698cl\u0100du\u310a\u310c;\u698e;\u6990\u0200aeuy\u3117\u311c\u3127\u3129ron;\u4159\u0100di\u3121\u3125il;\u4157\xec\u0ff2\xe2\u30fa;\u4440\u0200clqs\u3134\u3137\u313d\u3144a;\u6937dhar;\u6969uo\u0100;r\u020e\u020dh;\u61b3\u0180acg\u314e\u315f\u0f44l\u0200;ips\u0f78\u3158\u315b\u109cn\xe5\u10bbar\xf4\u0fa9t;\u65ad\u0180ilr\u3169\u1023\u316esht;\u697d;\uc000\ud835\udd2f\u0100ao\u3177\u3186r\u0100du\u317d\u317f\xbb\u047b\u0100;l\u1091\u3184;\u696c\u0100;v\u318b\u318c\u43c1;\u43f1\u0180gns\u3195\u31f9\u31fcht\u0300ahlrst\u31a4\u31b0\u31c2\u31d8\u31e4\u31eerrow\u0100;t\u0fdc\u31ada\xe9\u30c8arpoon\u0100du\u31bb\u31bfow\xee\u317ep\xbb\u1092eft\u0100ah\u31ca\u31d0rrow\xf3\u0feaarpoon\xf3\u0551ightarrows;\u61c9quigarro\xf7\u30cbhreetimes;\u62ccg;\u42daingdotse\xf1\u1f32\u0180ahm\u320d\u3210\u3213r\xf2\u0feaa\xf2\u0551;\u600foust\u0100;a\u321e\u321f\u63b1che\xbb\u321fmid;\u6aee\u0200abpt\u3232\u323d\u3240\u3252\u0100nr\u3237\u323ag;\u67edr;\u61fer\xeb\u1003\u0180afl\u3247\u324a\u324er;\u6986;\uc000\ud835\udd63us;\u6a2eimes;\u6a35\u0100ap\u325d\u3267r\u0100;g\u3263\u3264\u4029t;\u6994olint;\u6a12ar\xf2\u31e3\u0200achq\u327b\u3280\u10bc\u3285quo;\u603ar;\uc000\ud835\udcc7\u0100bu\u30fb\u328ao\u0100;r\u0214\u0213\u0180hir\u3297\u329b\u32a0re\xe5\u31f8mes;\u62cai\u0200;efl\u32aa\u1059\u1821\u32ab\u65b9tri;\u69celuhar;\u6968;\u611e\u0d61\u32d5\u32db\u32df\u332c\u3338\u3371\0\u337a\u33a4\0\0\u33ec\u33f0\0\u3428\u3448\u345a\u34ad\u34b1\u34ca\u34f1\0\u3616\0\0\u3633cute;\u415bqu\xef\u27ba\u0500;Eaceinpsy\u11ed\u32f3\u32f5\u32ff\u3302\u330b\u330f\u331f\u3326\u3329;\u6ab4\u01f0\u32fa\0\u32fc;\u6ab8on;\u4161u\xe5\u11fe\u0100;d\u11f3\u3307il;\u415frc;\u415d\u0180Eas\u3316\u3318\u331b;\u6ab6p;\u6abaim;\u62e9olint;\u6a13i\xed\u1204;\u4441ot\u0180;be\u3334\u1d47\u3335\u62c5;\u6a66\u0380Aacmstx\u3346\u334a\u3357\u335b\u335e\u3363\u336drr;\u61d8r\u0100hr\u3350\u3352\xeb\u2228\u0100;o\u0a36\u0a34t\u803b\xa7\u40a7i;\u403bwar;\u6929m\u0100in\u3369\xf0nu\xf3\xf1t;\u6736r\u0100;o\u3376\u2055\uc000\ud835\udd30\u0200acoy\u3382\u3386\u3391\u33a0rp;\u666f\u0100hy\u338b\u338fcy;\u4449;\u4448rt\u026d\u3399\0\0\u339ci\xe4\u1464ara\xec\u2e6f\u803b\xad\u40ad\u0100gm\u33a8\u33b4ma\u0180;fv\u33b1\u33b2\u33b2\u43c3;\u43c2\u0400;deglnpr\u12ab\u33c5\u33c9\u33ce\u33d6\u33de\u33e1\u33e6ot;\u6a6a\u0100;q\u12b1\u12b0\u0100;E\u33d3\u33d4\u6a9e;\u6aa0\u0100;E\u33db\u33dc\u6a9d;\u6a9fe;\u6246lus;\u6a24arr;\u6972ar\xf2\u113d\u0200aeit\u33f8\u3408\u340f\u3417\u0100ls\u33fd\u3404lsetm\xe9\u336ahp;\u6a33parsl;\u69e4\u0100dl\u1463\u3414e;\u6323\u0100;e\u341c\u341d\u6aaa\u0100;s\u3422\u3423\u6aac;\uc000\u2aac\ufe00\u0180flp\u342e\u3433\u3442tcy;\u444c\u0100;b\u3438\u3439\u402f\u0100;a\u343e\u343f\u69c4r;\u633ff;\uc000\ud835\udd64a\u0100dr\u344d\u0402es\u0100;u\u3454\u3455\u6660it\xbb\u3455\u0180csu\u3460\u3479\u349f\u0100au\u3465\u346fp\u0100;s\u1188\u346b;\uc000\u2293\ufe00p\u0100;s\u11b4\u3475;\uc000\u2294\ufe00u\u0100bp\u347f\u348f\u0180;es\u1197\u119c\u3486et\u0100;e\u1197\u348d\xf1\u119d\u0180;es\u11a8\u11ad\u3496et\u0100;e\u11a8\u349d\xf1\u11ae\u0180;af\u117b\u34a6\u05b0r\u0165\u34ab\u05b1\xbb\u117car\xf2\u1148\u0200cemt\u34b9\u34be\u34c2\u34c5r;\uc000\ud835\udcc8tm\xee\xf1i\xec\u3415ar\xe6\u11be\u0100ar\u34ce\u34d5r\u0100;f\u34d4\u17bf\u6606\u0100an\u34da\u34edight\u0100ep\u34e3\u34eapsilo\xee\u1ee0h\xe9\u2eafs\xbb\u2852\u0280bcmnp\u34fb\u355e\u1209\u358b\u358e\u0480;Edemnprs\u350e\u350f\u3511\u3515\u351e\u3523\u352c\u3531\u3536\u6282;\u6ac5ot;\u6abd\u0100;d\u11da\u351aot;\u6ac3ult;\u6ac1\u0100Ee\u3528\u352a;\u6acb;\u628alus;\u6abfarr;\u6979\u0180eiu\u353d\u3552\u3555t\u0180;en\u350e\u3545\u354bq\u0100;q\u11da\u350feq\u0100;q\u352b\u3528m;\u6ac7\u0100bp\u355a\u355c;\u6ad5;\u6ad3c\u0300;acens\u11ed\u356c\u3572\u3579\u357b\u3326ppro\xf8\u32faurlye\xf1\u11fe\xf1\u11f3\u0180aes\u3582\u3588\u331bppro\xf8\u331aq\xf1\u3317g;\u666a\u0680123;Edehlmnps\u35a9\u35ac\u35af\u121c\u35b2\u35b4\u35c0\u35c9\u35d5\u35da\u35df\u35e8\u35ed\u803b\xb9\u40b9\u803b\xb2\u40b2\u803b\xb3\u40b3;\u6ac6\u0100os\u35b9\u35bct;\u6abeub;\u6ad8\u0100;d\u1222\u35c5ot;\u6ac4s\u0100ou\u35cf\u35d2l;\u67c9b;\u6ad7arr;\u697bult;\u6ac2\u0100Ee\u35e4\u35e6;\u6acc;\u628blus;\u6ac0\u0180eiu\u35f4\u3609\u360ct\u0180;en\u121c\u35fc\u3602q\u0100;q\u1222\u35b2eq\u0100;q\u35e7\u35e4m;\u6ac8\u0100bp\u3611\u3613;\u6ad4;\u6ad6\u0180Aan\u361c\u3620\u362drr;\u61d9r\u0100hr\u3626\u3628\xeb\u222e\u0100;o\u0a2b\u0a29war;\u692alig\u803b\xdf\u40df\u0be1\u3651\u365d\u3660\u12ce\u3673\u3679\0\u367e\u36c2\0\0\0\0\0\u36db\u3703\0\u3709\u376c\0\0\0\u3787\u0272\u3656\0\0\u365bget;\u6316;\u43c4r\xeb\u0e5f\u0180aey\u3666\u366b\u3670ron;\u4165dil;\u4163;\u4442lrec;\u6315r;\uc000\ud835\udd31\u0200eiko\u3686\u369d\u36b5\u36bc\u01f2\u368b\0\u3691e\u01004f\u1284\u1281a\u0180;sv\u3698\u3699\u369b\u43b8ym;\u43d1\u0100cn\u36a2\u36b2k\u0100as\u36a8\u36aeppro\xf8\u12c1im\xbb\u12acs\xf0\u129e\u0100as\u36ba\u36ae\xf0\u12c1rn\u803b\xfe\u40fe\u01ec\u031f\u36c6\u22e7es\u8180\xd7;bd\u36cf\u36d0\u36d8\u40d7\u0100;a\u190f\u36d5r;\u6a31;\u6a30\u0180eps\u36e1\u36e3\u3700\xe1\u2a4d\u0200;bcf\u0486\u36ec\u36f0\u36f4ot;\u6336ir;\u6af1\u0100;o\u36f9\u36fc\uc000\ud835\udd65rk;\u6ada\xe1\u3362rime;\u6034\u0180aip\u370f\u3712\u3764d\xe5\u1248\u0380adempst\u3721\u374d\u3740\u3751\u3757\u375c\u375fngle\u0280;dlqr\u3730\u3731\u3736\u3740\u3742\u65b5own\xbb\u1dbbeft\u0100;e\u2800\u373e\xf1\u092e;\u625cight\u0100;e\u32aa\u374b\xf1\u105aot;\u65ecinus;\u6a3alus;\u6a39b;\u69cdime;\u6a3bezium;\u63e2\u0180cht\u3772\u377d\u3781\u0100ry\u3777\u377b;\uc000\ud835\udcc9;\u4446cy;\u445brok;\u4167\u0100io\u378b\u378ex\xf4\u1777head\u0100lr\u3797\u37a0eftarro\xf7\u084fightarrow\xbb\u0f5d\u0900AHabcdfghlmoprstuw\u37d0\u37d3\u37d7\u37e4\u37f0\u37fc\u380e\u381c\u3823\u3834\u3851\u385d\u386b\u38a9\u38cc\u38d2\u38ea\u38f6r\xf2\u03edar;\u6963\u0100cr\u37dc\u37e2ute\u803b\xfa\u40fa\xf2\u1150r\u01e3\u37ea\0\u37edy;\u445eve;\u416d\u0100iy\u37f5\u37farc\u803b\xfb\u40fb;\u4443\u0180abh\u3803\u3806\u380br\xf2\u13adlac;\u4171a\xf2\u13c3\u0100ir\u3813\u3818sht;\u697e;\uc000\ud835\udd32rave\u803b\xf9\u40f9\u0161\u3827\u3831r\u0100lr\u382c\u382e\xbb\u0957\xbb\u1083lk;\u6580\u0100ct\u3839\u384d\u026f\u383f\0\0\u384arn\u0100;e\u3845\u3846\u631cr\xbb\u3846op;\u630fri;\u65f8\u0100al\u3856\u385acr;\u416b\u80bb\xa8\u0349\u0100gp\u3862\u3866on;\u4173f;\uc000\ud835\udd66\u0300adhlsu\u114b\u3878\u387d\u1372\u3891\u38a0own\xe1\u13b3arpoon\u0100lr\u3888\u388cef\xf4\u382digh\xf4\u382fi\u0180;hl\u3899\u389a\u389c\u43c5\xbb\u13faon\xbb\u389aparrows;\u61c8\u0180cit\u38b0\u38c4\u38c8\u026f\u38b6\0\0\u38c1rn\u0100;e\u38bc\u38bd\u631dr\xbb\u38bdop;\u630eng;\u416fri;\u65f9cr;\uc000\ud835\udcca\u0180dir\u38d9\u38dd\u38e2ot;\u62f0lde;\u4169i\u0100;f\u3730\u38e8\xbb\u1813\u0100am\u38ef\u38f2r\xf2\u38a8l\u803b\xfc\u40fcangle;\u69a7\u0780ABDacdeflnoprsz\u391c\u391f\u3929\u392d\u39b5\u39b8\u39bd\u39df\u39e4\u39e8\u39f3\u39f9\u39fd\u3a01\u3a20r\xf2\u03f7ar\u0100;v\u3926\u3927\u6ae8;\u6ae9as\xe8\u03e1\u0100nr\u3932\u3937grt;\u699c\u0380eknprst\u34e3\u3946\u394b\u3952\u395d\u3964\u3996app\xe1\u2415othin\xe7\u1e96\u0180hir\u34eb\u2ec8\u3959op\xf4\u2fb5\u0100;h\u13b7\u3962\xef\u318d\u0100iu\u3969\u396dgm\xe1\u33b3\u0100bp\u3972\u3984setneq\u0100;q\u397d\u3980\uc000\u228a\ufe00;\uc000\u2acb\ufe00setneq\u0100;q\u398f\u3992\uc000\u228b\ufe00;\uc000\u2acc\ufe00\u0100hr\u399b\u399fet\xe1\u369ciangle\u0100lr\u39aa\u39afeft\xbb\u0925ight\xbb\u1051y;\u4432ash\xbb\u1036\u0180elr\u39c4\u39d2\u39d7\u0180;be\u2dea\u39cb\u39cfar;\u62bbq;\u625alip;\u62ee\u0100bt\u39dc\u1468a\xf2\u1469r;\uc000\ud835\udd33tr\xe9\u39aesu\u0100bp\u39ef\u39f1\xbb\u0d1c\xbb\u0d59pf;\uc000\ud835\udd67ro\xf0\u0efbtr\xe9\u39b4\u0100cu\u3a06\u3a0br;\uc000\ud835\udccb\u0100bp\u3a10\u3a18n\u0100Ee\u3980\u3a16\xbb\u397en\u0100Ee\u3992\u3a1e\xbb\u3990igzag;\u699a\u0380cefoprs\u3a36\u3a3b\u3a56\u3a5b\u3a54\u3a61\u3a6airc;\u4175\u0100di\u3a40\u3a51\u0100bg\u3a45\u3a49ar;\u6a5fe\u0100;q\u15fa\u3a4f;\u6259erp;\u6118r;\uc000\ud835\udd34pf;\uc000\ud835\udd68\u0100;e\u1479\u3a66at\xe8\u1479cr;\uc000\ud835\udccc\u0ae3\u178e\u3a87\0\u3a8b\0\u3a90\u3a9b\0\0\u3a9d\u3aa8\u3aab\u3aaf\0\0\u3ac3\u3ace\0\u3ad8\u17dc\u17dftr\xe9\u17d1r;\uc000\ud835\udd35\u0100Aa\u3a94\u3a97r\xf2\u03c3r\xf2\u09f6;\u43be\u0100Aa\u3aa1\u3aa4r\xf2\u03b8r\xf2\u09eba\xf0\u2713is;\u62fb\u0180dpt\u17a4\u3ab5\u3abe\u0100fl\u3aba\u17a9;\uc000\ud835\udd69im\xe5\u17b2\u0100Aa\u3ac7\u3acar\xf2\u03cer\xf2\u0a01\u0100cq\u3ad2\u17b8r;\uc000\ud835\udccd\u0100pt\u17d6\u3adcr\xe9\u17d4\u0400acefiosu\u3af0\u3afd\u3b08\u3b0c\u3b11\u3b15\u3b1b\u3b21c\u0100uy\u3af6\u3afbte\u803b\xfd\u40fd;\u444f\u0100iy\u3b02\u3b06rc;\u4177;\u444bn\u803b\xa5\u40a5r;\uc000\ud835\udd36cy;\u4457pf;\uc000\ud835\udd6acr;\uc000\ud835\udcce\u0100cm\u3b26\u3b29y;\u444el\u803b\xff\u40ff\u0500acdefhiosw\u3b42\u3b48\u3b54\u3b58\u3b64\u3b69\u3b6d\u3b74\u3b7a\u3b80cute;\u417a\u0100ay\u3b4d\u3b52ron;\u417e;\u4437ot;\u417c\u0100et\u3b5d\u3b61tr\xe6\u155fa;\u43b6r;\uc000\ud835\udd37cy;\u4436grarr;\u61ddpf;\uc000\ud835\udd6bcr;\uc000\ud835\udccf\u0100jn\u3b85\u3b87;\u600dj;\u600c"
       .split("")
       .map((c) => c.charCodeAt(0)));

   // Generated using scripts/write-decode-map.ts
   var xmlDecodeTree = new Uint16Array(
   // prettier-ignore
   "\u0200aglq\t\x15\x18\x1b\u026d\x0f\0\0\x12p;\u4026os;\u4027t;\u403et;\u403cuot;\u4022"
       .split("")
       .map((c) => c.charCodeAt(0)));

   // Adapted from https://github.com/mathiasbynens/he/blob/36afe179392226cf1b6ccdb16ebbb7a5a844d93a/src/he.js#L106-L134
   var _a;
   const decodeMap = new Map([
       [0, 65533],
       // C1 Unicode control character reference replacements
       [128, 8364],
       [130, 8218],
       [131, 402],
       [132, 8222],
       [133, 8230],
       [134, 8224],
       [135, 8225],
       [136, 710],
       [137, 8240],
       [138, 352],
       [139, 8249],
       [140, 338],
       [142, 381],
       [145, 8216],
       [146, 8217],
       [147, 8220],
       [148, 8221],
       [149, 8226],
       [150, 8211],
       [151, 8212],
       [152, 732],
       [153, 8482],
       [154, 353],
       [155, 8250],
       [156, 339],
       [158, 382],
       [159, 376],
   ]);
   /**
    * Polyfill for `String.fromCodePoint`. It is used to create a string from a Unicode code point.
    */
   const fromCodePoint = 
   // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, node/no-unsupported-features/es-builtins
   (_a = String.fromCodePoint) !== null && _a !== void 0 ? _a : function (codePoint) {
       let output = "";
       if (codePoint > 0xffff) {
           codePoint -= 0x10000;
           output += String.fromCharCode(((codePoint >>> 10) & 0x3ff) | 0xd800);
           codePoint = 0xdc00 | (codePoint & 0x3ff);
       }
       output += String.fromCharCode(codePoint);
       return output;
   };
   /**
    * Replace the given code point with a replacement character if it is a
    * surrogate or is outside the valid range. Otherwise return the code
    * point unchanged.
    */
   function replaceCodePoint(codePoint) {
       var _a;
       if ((codePoint >= 0xd800 && codePoint <= 0xdfff) || codePoint > 0x10ffff) {
           return 0xfffd;
       }
       return (_a = decodeMap.get(codePoint)) !== null && _a !== void 0 ? _a : codePoint;
   }

   var CharCodes;
   (function (CharCodes) {
       CharCodes[CharCodes["NUM"] = 35] = "NUM";
       CharCodes[CharCodes["SEMI"] = 59] = "SEMI";
       CharCodes[CharCodes["EQUALS"] = 61] = "EQUALS";
       CharCodes[CharCodes["ZERO"] = 48] = "ZERO";
       CharCodes[CharCodes["NINE"] = 57] = "NINE";
       CharCodes[CharCodes["LOWER_A"] = 97] = "LOWER_A";
       CharCodes[CharCodes["LOWER_F"] = 102] = "LOWER_F";
       CharCodes[CharCodes["LOWER_X"] = 120] = "LOWER_X";
       CharCodes[CharCodes["LOWER_Z"] = 122] = "LOWER_Z";
       CharCodes[CharCodes["UPPER_A"] = 65] = "UPPER_A";
       CharCodes[CharCodes["UPPER_F"] = 70] = "UPPER_F";
       CharCodes[CharCodes["UPPER_Z"] = 90] = "UPPER_Z";
   })(CharCodes || (CharCodes = {}));
   /** Bit that needs to be set to convert an upper case ASCII character to lower case */
   const TO_LOWER_BIT = 0b100000;
   var BinTrieFlags;
   (function (BinTrieFlags) {
       BinTrieFlags[BinTrieFlags["VALUE_LENGTH"] = 49152] = "VALUE_LENGTH";
       BinTrieFlags[BinTrieFlags["BRANCH_LENGTH"] = 16256] = "BRANCH_LENGTH";
       BinTrieFlags[BinTrieFlags["JUMP_TABLE"] = 127] = "JUMP_TABLE";
   })(BinTrieFlags || (BinTrieFlags = {}));
   function isNumber$2(code) {
       return code >= CharCodes.ZERO && code <= CharCodes.NINE;
   }
   function isHexadecimalCharacter(code) {
       return ((code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_F) ||
           (code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_F));
   }
   function isAsciiAlphaNumeric$1(code) {
       return ((code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_Z) ||
           (code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_Z) ||
           isNumber$2(code));
   }
   /**
    * Checks if the given character is a valid end character for an entity in an attribute.
    *
    * Attribute values that aren't terminated properly aren't parsed, and shouldn't lead to a parser error.
    * See the example in https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state
    */
   function isEntityInAttributeInvalidEnd$1(code) {
       return code === CharCodes.EQUALS || isAsciiAlphaNumeric$1(code);
   }
   var EntityDecoderState;
   (function (EntityDecoderState) {
       EntityDecoderState[EntityDecoderState["EntityStart"] = 0] = "EntityStart";
       EntityDecoderState[EntityDecoderState["NumericStart"] = 1] = "NumericStart";
       EntityDecoderState[EntityDecoderState["NumericDecimal"] = 2] = "NumericDecimal";
       EntityDecoderState[EntityDecoderState["NumericHex"] = 3] = "NumericHex";
       EntityDecoderState[EntityDecoderState["NamedEntity"] = 4] = "NamedEntity";
   })(EntityDecoderState || (EntityDecoderState = {}));
   var DecodingMode;
   (function (DecodingMode) {
       /** Entities in text nodes that can end with any character. */
       DecodingMode[DecodingMode["Legacy"] = 0] = "Legacy";
       /** Only allow entities terminated with a semicolon. */
       DecodingMode[DecodingMode["Strict"] = 1] = "Strict";
       /** Entities in attributes have limitations on ending characters. */
       DecodingMode[DecodingMode["Attribute"] = 2] = "Attribute";
   })(DecodingMode || (DecodingMode = {}));
   /**
    * Token decoder with support of writing partial entities.
    */
   class EntityDecoder {
       constructor(
       /** The tree used to decode entities. */
       decodeTree, 
       /**
        * The function that is called when a codepoint is decoded.
        *
        * For multi-byte named entities, this will be called multiple times,
        * with the second codepoint, and the same `consumed` value.
        *
        * @param codepoint The decoded codepoint.
        * @param consumed The number of bytes consumed by the decoder.
        */
       emitCodePoint, 
       /** An object that is used to produce errors. */
       errors) {
           this.decodeTree = decodeTree;
           this.emitCodePoint = emitCodePoint;
           this.errors = errors;
           /** The current state of the decoder. */
           this.state = EntityDecoderState.EntityStart;
           /** Characters that were consumed while parsing an entity. */
           this.consumed = 1;
           /**
            * The result of the entity.
            *
            * Either the result index of a numeric entity, or the codepoint of a
            * numeric entity.
            */
           this.result = 0;
           /** The current index in the decode tree. */
           this.treeIndex = 0;
           /** The number of characters that were consumed in excess. */
           this.excess = 1;
           /** The mode in which the decoder is operating. */
           this.decodeMode = DecodingMode.Strict;
       }
       /** Resets the instance to make it reusable. */
       startEntity(decodeMode) {
           this.decodeMode = decodeMode;
           this.state = EntityDecoderState.EntityStart;
           this.result = 0;
           this.treeIndex = 0;
           this.excess = 1;
           this.consumed = 1;
       }
       /**
        * Write an entity to the decoder. This can be called multiple times with partial entities.
        * If the entity is incomplete, the decoder will return -1.
        *
        * Mirrors the implementation of `getDecoder`, but with the ability to stop decoding if the
        * entity is incomplete, and resume when the next string is written.
        *
        * @param string The string containing the entity (or a continuation of the entity).
        * @param offset The offset at which the entity begins. Should be 0 if this is not the first call.
        * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
        */
       write(str, offset) {
           switch (this.state) {
               case EntityDecoderState.EntityStart: {
                   if (str.charCodeAt(offset) === CharCodes.NUM) {
                       this.state = EntityDecoderState.NumericStart;
                       this.consumed += 1;
                       return this.stateNumericStart(str, offset + 1);
                   }
                   this.state = EntityDecoderState.NamedEntity;
                   return this.stateNamedEntity(str, offset);
               }
               case EntityDecoderState.NumericStart: {
                   return this.stateNumericStart(str, offset);
               }
               case EntityDecoderState.NumericDecimal: {
                   return this.stateNumericDecimal(str, offset);
               }
               case EntityDecoderState.NumericHex: {
                   return this.stateNumericHex(str, offset);
               }
               case EntityDecoderState.NamedEntity: {
                   return this.stateNamedEntity(str, offset);
               }
           }
       }
       /**
        * Switches between the numeric decimal and hexadecimal states.
        *
        * Equivalent to the `Numeric character reference state` in the HTML spec.
        *
        * @param str The string containing the entity (or a continuation of the entity).
        * @param offset The current offset.
        * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
        */
       stateNumericStart(str, offset) {
           if (offset >= str.length) {
               return -1;
           }
           if ((str.charCodeAt(offset) | TO_LOWER_BIT) === CharCodes.LOWER_X) {
               this.state = EntityDecoderState.NumericHex;
               this.consumed += 1;
               return this.stateNumericHex(str, offset + 1);
           }
           this.state = EntityDecoderState.NumericDecimal;
           return this.stateNumericDecimal(str, offset);
       }
       addToNumericResult(str, start, end, base) {
           if (start !== end) {
               const digitCount = end - start;
               this.result =
                   this.result * Math.pow(base, digitCount) +
                       parseInt(str.substr(start, digitCount), base);
               this.consumed += digitCount;
           }
       }
       /**
        * Parses a hexadecimal numeric entity.
        *
        * Equivalent to the `Hexademical character reference state` in the HTML spec.
        *
        * @param str The string containing the entity (or a continuation of the entity).
        * @param offset The current offset.
        * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
        */
       stateNumericHex(str, offset) {
           const startIdx = offset;
           while (offset < str.length) {
               const char = str.charCodeAt(offset);
               if (isNumber$2(char) || isHexadecimalCharacter(char)) {
                   offset += 1;
               }
               else {
                   this.addToNumericResult(str, startIdx, offset, 16);
                   return this.emitNumericEntity(char, 3);
               }
           }
           this.addToNumericResult(str, startIdx, offset, 16);
           return -1;
       }
       /**
        * Parses a decimal numeric entity.
        *
        * Equivalent to the `Decimal character reference state` in the HTML spec.
        *
        * @param str The string containing the entity (or a continuation of the entity).
        * @param offset The current offset.
        * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
        */
       stateNumericDecimal(str, offset) {
           const startIdx = offset;
           while (offset < str.length) {
               const char = str.charCodeAt(offset);
               if (isNumber$2(char)) {
                   offset += 1;
               }
               else {
                   this.addToNumericResult(str, startIdx, offset, 10);
                   return this.emitNumericEntity(char, 2);
               }
           }
           this.addToNumericResult(str, startIdx, offset, 10);
           return -1;
       }
       /**
        * Validate and emit a numeric entity.
        *
        * Implements the logic from the `Hexademical character reference start
        * state` and `Numeric character reference end state` in the HTML spec.
        *
        * @param lastCp The last code point of the entity. Used to see if the
        *               entity was terminated with a semicolon.
        * @param expectedLength The minimum number of characters that should be
        *                       consumed. Used to validate that at least one digit
        *                       was consumed.
        * @returns The number of characters that were consumed.
        */
       emitNumericEntity(lastCp, expectedLength) {
           var _a;
           // Ensure we consumed at least one digit.
           if (this.consumed <= expectedLength) {
               (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);
               return 0;
           }
           // Figure out if this is a legit end of the entity
           if (lastCp === CharCodes.SEMI) {
               this.consumed += 1;
           }
           else if (this.decodeMode === DecodingMode.Strict) {
               return 0;
           }
           this.emitCodePoint(replaceCodePoint(this.result), this.consumed);
           if (this.errors) {
               if (lastCp !== CharCodes.SEMI) {
                   this.errors.missingSemicolonAfterCharacterReference();
               }
               this.errors.validateNumericCharacterReference(this.result);
           }
           return this.consumed;
       }
       /**
        * Parses a named entity.
        *
        * Equivalent to the `Named character reference state` in the HTML spec.
        *
        * @param str The string containing the entity (or a continuation of the entity).
        * @param offset The current offset.
        * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
        */
       stateNamedEntity(str, offset) {
           const { decodeTree } = this;
           let current = decodeTree[this.treeIndex];
           // The mask is the number of bytes of the value, including the current byte.
           let valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;
           for (; offset < str.length; offset++, this.excess++) {
               const char = str.charCodeAt(offset);
               this.treeIndex = determineBranch(decodeTree, current, this.treeIndex + Math.max(1, valueLength), char);
               if (this.treeIndex < 0) {
                   return this.result === 0 ||
                       // If we are parsing an attribute
                       (this.decodeMode === DecodingMode.Attribute &&
                           // We shouldn't have consumed any characters after the entity,
                           (valueLength === 0 ||
                               // And there should be no invalid characters.
                               isEntityInAttributeInvalidEnd$1(char)))
                       ? 0
                       : this.emitNotTerminatedNamedEntity();
               }
               current = decodeTree[this.treeIndex];
               valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;
               // If the branch is a value, store it and continue
               if (valueLength !== 0) {
                   // If the entity is terminated by a semicolon, we are done.
                   if (char === CharCodes.SEMI) {
                       return this.emitNamedEntityData(this.treeIndex, valueLength, this.consumed + this.excess);
                   }
                   // If we encounter a non-terminated (legacy) entity while parsing strictly, then ignore it.
                   if (this.decodeMode !== DecodingMode.Strict) {
                       this.result = this.treeIndex;
                       this.consumed += this.excess;
                       this.excess = 0;
                   }
               }
           }
           return -1;
       }
       /**
        * Emit a named entity that was not terminated with a semicolon.
        *
        * @returns The number of characters consumed.
        */
       emitNotTerminatedNamedEntity() {
           var _a;
           const { result, decodeTree } = this;
           const valueLength = (decodeTree[result] & BinTrieFlags.VALUE_LENGTH) >> 14;
           this.emitNamedEntityData(result, valueLength, this.consumed);
           (_a = this.errors) === null || _a === void 0 ? void 0 : _a.missingSemicolonAfterCharacterReference();
           return this.consumed;
       }
       /**
        * Emit a named entity.
        *
        * @param result The index of the entity in the decode tree.
        * @param valueLength The number of bytes in the entity.
        * @param consumed The number of characters consumed.
        *
        * @returns The number of characters consumed.
        */
       emitNamedEntityData(result, valueLength, consumed) {
           const { decodeTree } = this;
           this.emitCodePoint(valueLength === 1
               ? decodeTree[result] & ~BinTrieFlags.VALUE_LENGTH
               : decodeTree[result + 1], consumed);
           if (valueLength === 3) {
               // For multi-byte values, we need to emit the second byte.
               this.emitCodePoint(decodeTree[result + 2], consumed);
           }
           return consumed;
       }
       /**
        * Signal to the parser that the end of the input was reached.
        *
        * Remaining data will be emitted and relevant errors will be produced.
        *
        * @returns The number of characters consumed.
        */
       end() {
           var _a;
           switch (this.state) {
               case EntityDecoderState.NamedEntity: {
                   // Emit a named entity if we have one.
                   return this.result !== 0 &&
                       (this.decodeMode !== DecodingMode.Attribute ||
                           this.result === this.treeIndex)
                       ? this.emitNotTerminatedNamedEntity()
                       : 0;
               }
               // Otherwise, emit a numeric entity if we have one.
               case EntityDecoderState.NumericDecimal: {
                   return this.emitNumericEntity(0, 2);
               }
               case EntityDecoderState.NumericHex: {
                   return this.emitNumericEntity(0, 3);
               }
               case EntityDecoderState.NumericStart: {
                   (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);
                   return 0;
               }
               case EntityDecoderState.EntityStart: {
                   // Return 0 if we have no entity.
                   return 0;
               }
           }
       }
   }
   /**
    * Creates a function that decodes entities in a string.
    *
    * @param decodeTree The decode tree.
    * @returns A function that decodes entities in a string.
    */
   function getDecoder(decodeTree) {
       let ret = "";
       const decoder = new EntityDecoder(decodeTree, (str) => (ret += fromCodePoint(str)));
       return function decodeWithTrie(str, decodeMode) {
           let lastIndex = 0;
           let offset = 0;
           while ((offset = str.indexOf("&", offset)) >= 0) {
               ret += str.slice(lastIndex, offset);
               decoder.startEntity(decodeMode);
               const len = decoder.write(str, 
               // Skip the "&"
               offset + 1);
               if (len < 0) {
                   lastIndex = offset + decoder.end();
                   break;
               }
               lastIndex = offset + len;
               // If `len` is 0, skip the current `&` and continue.
               offset = len === 0 ? lastIndex + 1 : lastIndex;
           }
           const result = ret + str.slice(lastIndex);
           // Make sure we don't keep a reference to the final string.
           ret = "";
           return result;
       };
   }
   /**
    * Determines the branch of the current node that is taken given the current
    * character. This function is used to traverse the trie.
    *
    * @param decodeTree The trie.
    * @param current The current node.
    * @param nodeIdx The index right after the current node and its value.
    * @param char The current character.
    * @returns The index of the next node, or -1 if no branch is taken.
    */
   function determineBranch(decodeTree, current, nodeIdx, char) {
       const branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;
       const jumpOffset = current & BinTrieFlags.JUMP_TABLE;
       // Case 1: Single branch encoded in jump offset
       if (branchCount === 0) {
           return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;
       }
       // Case 2: Multiple branches encoded in jump table
       if (jumpOffset) {
           const value = char - jumpOffset;
           return value < 0 || value >= branchCount
               ? -1
               : decodeTree[nodeIdx + value] - 1;
       }
       // Case 3: Multiple branches encoded in dictionary
       // Binary search for the character.
       let lo = nodeIdx;
       let hi = lo + branchCount - 1;
       while (lo <= hi) {
           const mid = (lo + hi) >>> 1;
           const midVal = decodeTree[mid];
           if (midVal < char) {
               lo = mid + 1;
           }
           else if (midVal > char) {
               hi = mid - 1;
           }
           else {
               return decodeTree[mid + branchCount];
           }
       }
       return -1;
   }
   getDecoder(htmlDecodeTree);
   getDecoder(xmlDecodeTree);

   /** All valid namespaces in HTML. */
   var NS;
   (function (NS) {
       NS["HTML"] = "http://www.w3.org/1999/xhtml";
       NS["MATHML"] = "http://www.w3.org/1998/Math/MathML";
       NS["SVG"] = "http://www.w3.org/2000/svg";
       NS["XLINK"] = "http://www.w3.org/1999/xlink";
       NS["XML"] = "http://www.w3.org/XML/1998/namespace";
       NS["XMLNS"] = "http://www.w3.org/2000/xmlns/";
   })(NS = NS || (NS = {}));
   var ATTRS;
   (function (ATTRS) {
       ATTRS["TYPE"] = "type";
       ATTRS["ACTION"] = "action";
       ATTRS["ENCODING"] = "encoding";
       ATTRS["PROMPT"] = "prompt";
       ATTRS["NAME"] = "name";
       ATTRS["COLOR"] = "color";
       ATTRS["FACE"] = "face";
       ATTRS["SIZE"] = "size";
   })(ATTRS = ATTRS || (ATTRS = {}));
   /**
    * The mode of the document.
    *
    * @see {@link https://dom.spec.whatwg.org/#concept-document-limited-quirks}
    */
   var DOCUMENT_MODE;
   (function (DOCUMENT_MODE) {
       DOCUMENT_MODE["NO_QUIRKS"] = "no-quirks";
       DOCUMENT_MODE["QUIRKS"] = "quirks";
       DOCUMENT_MODE["LIMITED_QUIRKS"] = "limited-quirks";
   })(DOCUMENT_MODE = DOCUMENT_MODE || (DOCUMENT_MODE = {}));
   var TAG_NAMES;
   (function (TAG_NAMES) {
       TAG_NAMES["A"] = "a";
       TAG_NAMES["ADDRESS"] = "address";
       TAG_NAMES["ANNOTATION_XML"] = "annotation-xml";
       TAG_NAMES["APPLET"] = "applet";
       TAG_NAMES["AREA"] = "area";
       TAG_NAMES["ARTICLE"] = "article";
       TAG_NAMES["ASIDE"] = "aside";
       TAG_NAMES["B"] = "b";
       TAG_NAMES["BASE"] = "base";
       TAG_NAMES["BASEFONT"] = "basefont";
       TAG_NAMES["BGSOUND"] = "bgsound";
       TAG_NAMES["BIG"] = "big";
       TAG_NAMES["BLOCKQUOTE"] = "blockquote";
       TAG_NAMES["BODY"] = "body";
       TAG_NAMES["BR"] = "br";
       TAG_NAMES["BUTTON"] = "button";
       TAG_NAMES["CAPTION"] = "caption";
       TAG_NAMES["CENTER"] = "center";
       TAG_NAMES["CODE"] = "code";
       TAG_NAMES["COL"] = "col";
       TAG_NAMES["COLGROUP"] = "colgroup";
       TAG_NAMES["DD"] = "dd";
       TAG_NAMES["DESC"] = "desc";
       TAG_NAMES["DETAILS"] = "details";
       TAG_NAMES["DIALOG"] = "dialog";
       TAG_NAMES["DIR"] = "dir";
       TAG_NAMES["DIV"] = "div";
       TAG_NAMES["DL"] = "dl";
       TAG_NAMES["DT"] = "dt";
       TAG_NAMES["EM"] = "em";
       TAG_NAMES["EMBED"] = "embed";
       TAG_NAMES["FIELDSET"] = "fieldset";
       TAG_NAMES["FIGCAPTION"] = "figcaption";
       TAG_NAMES["FIGURE"] = "figure";
       TAG_NAMES["FONT"] = "font";
       TAG_NAMES["FOOTER"] = "footer";
       TAG_NAMES["FOREIGN_OBJECT"] = "foreignObject";
       TAG_NAMES["FORM"] = "form";
       TAG_NAMES["FRAME"] = "frame";
       TAG_NAMES["FRAMESET"] = "frameset";
       TAG_NAMES["H1"] = "h1";
       TAG_NAMES["H2"] = "h2";
       TAG_NAMES["H3"] = "h3";
       TAG_NAMES["H4"] = "h4";
       TAG_NAMES["H5"] = "h5";
       TAG_NAMES["H6"] = "h6";
       TAG_NAMES["HEAD"] = "head";
       TAG_NAMES["HEADER"] = "header";
       TAG_NAMES["HGROUP"] = "hgroup";
       TAG_NAMES["HR"] = "hr";
       TAG_NAMES["HTML"] = "html";
       TAG_NAMES["I"] = "i";
       TAG_NAMES["IMG"] = "img";
       TAG_NAMES["IMAGE"] = "image";
       TAG_NAMES["INPUT"] = "input";
       TAG_NAMES["IFRAME"] = "iframe";
       TAG_NAMES["KEYGEN"] = "keygen";
       TAG_NAMES["LABEL"] = "label";
       TAG_NAMES["LI"] = "li";
       TAG_NAMES["LINK"] = "link";
       TAG_NAMES["LISTING"] = "listing";
       TAG_NAMES["MAIN"] = "main";
       TAG_NAMES["MALIGNMARK"] = "malignmark";
       TAG_NAMES["MARQUEE"] = "marquee";
       TAG_NAMES["MATH"] = "math";
       TAG_NAMES["MENU"] = "menu";
       TAG_NAMES["META"] = "meta";
       TAG_NAMES["MGLYPH"] = "mglyph";
       TAG_NAMES["MI"] = "mi";
       TAG_NAMES["MO"] = "mo";
       TAG_NAMES["MN"] = "mn";
       TAG_NAMES["MS"] = "ms";
       TAG_NAMES["MTEXT"] = "mtext";
       TAG_NAMES["NAV"] = "nav";
       TAG_NAMES["NOBR"] = "nobr";
       TAG_NAMES["NOFRAMES"] = "noframes";
       TAG_NAMES["NOEMBED"] = "noembed";
       TAG_NAMES["NOSCRIPT"] = "noscript";
       TAG_NAMES["OBJECT"] = "object";
       TAG_NAMES["OL"] = "ol";
       TAG_NAMES["OPTGROUP"] = "optgroup";
       TAG_NAMES["OPTION"] = "option";
       TAG_NAMES["P"] = "p";
       TAG_NAMES["PARAM"] = "param";
       TAG_NAMES["PLAINTEXT"] = "plaintext";
       TAG_NAMES["PRE"] = "pre";
       TAG_NAMES["RB"] = "rb";
       TAG_NAMES["RP"] = "rp";
       TAG_NAMES["RT"] = "rt";
       TAG_NAMES["RTC"] = "rtc";
       TAG_NAMES["RUBY"] = "ruby";
       TAG_NAMES["S"] = "s";
       TAG_NAMES["SCRIPT"] = "script";
       TAG_NAMES["SECTION"] = "section";
       TAG_NAMES["SELECT"] = "select";
       TAG_NAMES["SOURCE"] = "source";
       TAG_NAMES["SMALL"] = "small";
       TAG_NAMES["SPAN"] = "span";
       TAG_NAMES["STRIKE"] = "strike";
       TAG_NAMES["STRONG"] = "strong";
       TAG_NAMES["STYLE"] = "style";
       TAG_NAMES["SUB"] = "sub";
       TAG_NAMES["SUMMARY"] = "summary";
       TAG_NAMES["SUP"] = "sup";
       TAG_NAMES["TABLE"] = "table";
       TAG_NAMES["TBODY"] = "tbody";
       TAG_NAMES["TEMPLATE"] = "template";
       TAG_NAMES["TEXTAREA"] = "textarea";
       TAG_NAMES["TFOOT"] = "tfoot";
       TAG_NAMES["TD"] = "td";
       TAG_NAMES["TH"] = "th";
       TAG_NAMES["THEAD"] = "thead";
       TAG_NAMES["TITLE"] = "title";
       TAG_NAMES["TR"] = "tr";
       TAG_NAMES["TRACK"] = "track";
       TAG_NAMES["TT"] = "tt";
       TAG_NAMES["U"] = "u";
       TAG_NAMES["UL"] = "ul";
       TAG_NAMES["SVG"] = "svg";
       TAG_NAMES["VAR"] = "var";
       TAG_NAMES["WBR"] = "wbr";
       TAG_NAMES["XMP"] = "xmp";
   })(TAG_NAMES = TAG_NAMES || (TAG_NAMES = {}));
   /**
    * Tag IDs are numeric IDs for known tag names.
    *
    * We use tag IDs to improve the performance of tag name comparisons.
    */
   var TAG_ID;
   (function (TAG_ID) {
       TAG_ID[TAG_ID["UNKNOWN"] = 0] = "UNKNOWN";
       TAG_ID[TAG_ID["A"] = 1] = "A";
       TAG_ID[TAG_ID["ADDRESS"] = 2] = "ADDRESS";
       TAG_ID[TAG_ID["ANNOTATION_XML"] = 3] = "ANNOTATION_XML";
       TAG_ID[TAG_ID["APPLET"] = 4] = "APPLET";
       TAG_ID[TAG_ID["AREA"] = 5] = "AREA";
       TAG_ID[TAG_ID["ARTICLE"] = 6] = "ARTICLE";
       TAG_ID[TAG_ID["ASIDE"] = 7] = "ASIDE";
       TAG_ID[TAG_ID["B"] = 8] = "B";
       TAG_ID[TAG_ID["BASE"] = 9] = "BASE";
       TAG_ID[TAG_ID["BASEFONT"] = 10] = "BASEFONT";
       TAG_ID[TAG_ID["BGSOUND"] = 11] = "BGSOUND";
       TAG_ID[TAG_ID["BIG"] = 12] = "BIG";
       TAG_ID[TAG_ID["BLOCKQUOTE"] = 13] = "BLOCKQUOTE";
       TAG_ID[TAG_ID["BODY"] = 14] = "BODY";
       TAG_ID[TAG_ID["BR"] = 15] = "BR";
       TAG_ID[TAG_ID["BUTTON"] = 16] = "BUTTON";
       TAG_ID[TAG_ID["CAPTION"] = 17] = "CAPTION";
       TAG_ID[TAG_ID["CENTER"] = 18] = "CENTER";
       TAG_ID[TAG_ID["CODE"] = 19] = "CODE";
       TAG_ID[TAG_ID["COL"] = 20] = "COL";
       TAG_ID[TAG_ID["COLGROUP"] = 21] = "COLGROUP";
       TAG_ID[TAG_ID["DD"] = 22] = "DD";
       TAG_ID[TAG_ID["DESC"] = 23] = "DESC";
       TAG_ID[TAG_ID["DETAILS"] = 24] = "DETAILS";
       TAG_ID[TAG_ID["DIALOG"] = 25] = "DIALOG";
       TAG_ID[TAG_ID["DIR"] = 26] = "DIR";
       TAG_ID[TAG_ID["DIV"] = 27] = "DIV";
       TAG_ID[TAG_ID["DL"] = 28] = "DL";
       TAG_ID[TAG_ID["DT"] = 29] = "DT";
       TAG_ID[TAG_ID["EM"] = 30] = "EM";
       TAG_ID[TAG_ID["EMBED"] = 31] = "EMBED";
       TAG_ID[TAG_ID["FIELDSET"] = 32] = "FIELDSET";
       TAG_ID[TAG_ID["FIGCAPTION"] = 33] = "FIGCAPTION";
       TAG_ID[TAG_ID["FIGURE"] = 34] = "FIGURE";
       TAG_ID[TAG_ID["FONT"] = 35] = "FONT";
       TAG_ID[TAG_ID["FOOTER"] = 36] = "FOOTER";
       TAG_ID[TAG_ID["FOREIGN_OBJECT"] = 37] = "FOREIGN_OBJECT";
       TAG_ID[TAG_ID["FORM"] = 38] = "FORM";
       TAG_ID[TAG_ID["FRAME"] = 39] = "FRAME";
       TAG_ID[TAG_ID["FRAMESET"] = 40] = "FRAMESET";
       TAG_ID[TAG_ID["H1"] = 41] = "H1";
       TAG_ID[TAG_ID["H2"] = 42] = "H2";
       TAG_ID[TAG_ID["H3"] = 43] = "H3";
       TAG_ID[TAG_ID["H4"] = 44] = "H4";
       TAG_ID[TAG_ID["H5"] = 45] = "H5";
       TAG_ID[TAG_ID["H6"] = 46] = "H6";
       TAG_ID[TAG_ID["HEAD"] = 47] = "HEAD";
       TAG_ID[TAG_ID["HEADER"] = 48] = "HEADER";
       TAG_ID[TAG_ID["HGROUP"] = 49] = "HGROUP";
       TAG_ID[TAG_ID["HR"] = 50] = "HR";
       TAG_ID[TAG_ID["HTML"] = 51] = "HTML";
       TAG_ID[TAG_ID["I"] = 52] = "I";
       TAG_ID[TAG_ID["IMG"] = 53] = "IMG";
       TAG_ID[TAG_ID["IMAGE"] = 54] = "IMAGE";
       TAG_ID[TAG_ID["INPUT"] = 55] = "INPUT";
       TAG_ID[TAG_ID["IFRAME"] = 56] = "IFRAME";
       TAG_ID[TAG_ID["KEYGEN"] = 57] = "KEYGEN";
       TAG_ID[TAG_ID["LABEL"] = 58] = "LABEL";
       TAG_ID[TAG_ID["LI"] = 59] = "LI";
       TAG_ID[TAG_ID["LINK"] = 60] = "LINK";
       TAG_ID[TAG_ID["LISTING"] = 61] = "LISTING";
       TAG_ID[TAG_ID["MAIN"] = 62] = "MAIN";
       TAG_ID[TAG_ID["MALIGNMARK"] = 63] = "MALIGNMARK";
       TAG_ID[TAG_ID["MARQUEE"] = 64] = "MARQUEE";
       TAG_ID[TAG_ID["MATH"] = 65] = "MATH";
       TAG_ID[TAG_ID["MENU"] = 66] = "MENU";
       TAG_ID[TAG_ID["META"] = 67] = "META";
       TAG_ID[TAG_ID["MGLYPH"] = 68] = "MGLYPH";
       TAG_ID[TAG_ID["MI"] = 69] = "MI";
       TAG_ID[TAG_ID["MO"] = 70] = "MO";
       TAG_ID[TAG_ID["MN"] = 71] = "MN";
       TAG_ID[TAG_ID["MS"] = 72] = "MS";
       TAG_ID[TAG_ID["MTEXT"] = 73] = "MTEXT";
       TAG_ID[TAG_ID["NAV"] = 74] = "NAV";
       TAG_ID[TAG_ID["NOBR"] = 75] = "NOBR";
       TAG_ID[TAG_ID["NOFRAMES"] = 76] = "NOFRAMES";
       TAG_ID[TAG_ID["NOEMBED"] = 77] = "NOEMBED";
       TAG_ID[TAG_ID["NOSCRIPT"] = 78] = "NOSCRIPT";
       TAG_ID[TAG_ID["OBJECT"] = 79] = "OBJECT";
       TAG_ID[TAG_ID["OL"] = 80] = "OL";
       TAG_ID[TAG_ID["OPTGROUP"] = 81] = "OPTGROUP";
       TAG_ID[TAG_ID["OPTION"] = 82] = "OPTION";
       TAG_ID[TAG_ID["P"] = 83] = "P";
       TAG_ID[TAG_ID["PARAM"] = 84] = "PARAM";
       TAG_ID[TAG_ID["PLAINTEXT"] = 85] = "PLAINTEXT";
       TAG_ID[TAG_ID["PRE"] = 86] = "PRE";
       TAG_ID[TAG_ID["RB"] = 87] = "RB";
       TAG_ID[TAG_ID["RP"] = 88] = "RP";
       TAG_ID[TAG_ID["RT"] = 89] = "RT";
       TAG_ID[TAG_ID["RTC"] = 90] = "RTC";
       TAG_ID[TAG_ID["RUBY"] = 91] = "RUBY";
       TAG_ID[TAG_ID["S"] = 92] = "S";
       TAG_ID[TAG_ID["SCRIPT"] = 93] = "SCRIPT";
       TAG_ID[TAG_ID["SECTION"] = 94] = "SECTION";
       TAG_ID[TAG_ID["SELECT"] = 95] = "SELECT";
       TAG_ID[TAG_ID["SOURCE"] = 96] = "SOURCE";
       TAG_ID[TAG_ID["SMALL"] = 97] = "SMALL";
       TAG_ID[TAG_ID["SPAN"] = 98] = "SPAN";
       TAG_ID[TAG_ID["STRIKE"] = 99] = "STRIKE";
       TAG_ID[TAG_ID["STRONG"] = 100] = "STRONG";
       TAG_ID[TAG_ID["STYLE"] = 101] = "STYLE";
       TAG_ID[TAG_ID["SUB"] = 102] = "SUB";
       TAG_ID[TAG_ID["SUMMARY"] = 103] = "SUMMARY";
       TAG_ID[TAG_ID["SUP"] = 104] = "SUP";
       TAG_ID[TAG_ID["TABLE"] = 105] = "TABLE";
       TAG_ID[TAG_ID["TBODY"] = 106] = "TBODY";
       TAG_ID[TAG_ID["TEMPLATE"] = 107] = "TEMPLATE";
       TAG_ID[TAG_ID["TEXTAREA"] = 108] = "TEXTAREA";
       TAG_ID[TAG_ID["TFOOT"] = 109] = "TFOOT";
       TAG_ID[TAG_ID["TD"] = 110] = "TD";
       TAG_ID[TAG_ID["TH"] = 111] = "TH";
       TAG_ID[TAG_ID["THEAD"] = 112] = "THEAD";
       TAG_ID[TAG_ID["TITLE"] = 113] = "TITLE";
       TAG_ID[TAG_ID["TR"] = 114] = "TR";
       TAG_ID[TAG_ID["TRACK"] = 115] = "TRACK";
       TAG_ID[TAG_ID["TT"] = 116] = "TT";
       TAG_ID[TAG_ID["U"] = 117] = "U";
       TAG_ID[TAG_ID["UL"] = 118] = "UL";
       TAG_ID[TAG_ID["SVG"] = 119] = "SVG";
       TAG_ID[TAG_ID["VAR"] = 120] = "VAR";
       TAG_ID[TAG_ID["WBR"] = 121] = "WBR";
       TAG_ID[TAG_ID["XMP"] = 122] = "XMP";
   })(TAG_ID = TAG_ID || (TAG_ID = {}));
   const TAG_NAME_TO_ID = new Map([
       [TAG_NAMES.A, TAG_ID.A],
       [TAG_NAMES.ADDRESS, TAG_ID.ADDRESS],
       [TAG_NAMES.ANNOTATION_XML, TAG_ID.ANNOTATION_XML],
       [TAG_NAMES.APPLET, TAG_ID.APPLET],
       [TAG_NAMES.AREA, TAG_ID.AREA],
       [TAG_NAMES.ARTICLE, TAG_ID.ARTICLE],
       [TAG_NAMES.ASIDE, TAG_ID.ASIDE],
       [TAG_NAMES.B, TAG_ID.B],
       [TAG_NAMES.BASE, TAG_ID.BASE],
       [TAG_NAMES.BASEFONT, TAG_ID.BASEFONT],
       [TAG_NAMES.BGSOUND, TAG_ID.BGSOUND],
       [TAG_NAMES.BIG, TAG_ID.BIG],
       [TAG_NAMES.BLOCKQUOTE, TAG_ID.BLOCKQUOTE],
       [TAG_NAMES.BODY, TAG_ID.BODY],
       [TAG_NAMES.BR, TAG_ID.BR],
       [TAG_NAMES.BUTTON, TAG_ID.BUTTON],
       [TAG_NAMES.CAPTION, TAG_ID.CAPTION],
       [TAG_NAMES.CENTER, TAG_ID.CENTER],
       [TAG_NAMES.CODE, TAG_ID.CODE],
       [TAG_NAMES.COL, TAG_ID.COL],
       [TAG_NAMES.COLGROUP, TAG_ID.COLGROUP],
       [TAG_NAMES.DD, TAG_ID.DD],
       [TAG_NAMES.DESC, TAG_ID.DESC],
       [TAG_NAMES.DETAILS, TAG_ID.DETAILS],
       [TAG_NAMES.DIALOG, TAG_ID.DIALOG],
       [TAG_NAMES.DIR, TAG_ID.DIR],
       [TAG_NAMES.DIV, TAG_ID.DIV],
       [TAG_NAMES.DL, TAG_ID.DL],
       [TAG_NAMES.DT, TAG_ID.DT],
       [TAG_NAMES.EM, TAG_ID.EM],
       [TAG_NAMES.EMBED, TAG_ID.EMBED],
       [TAG_NAMES.FIELDSET, TAG_ID.FIELDSET],
       [TAG_NAMES.FIGCAPTION, TAG_ID.FIGCAPTION],
       [TAG_NAMES.FIGURE, TAG_ID.FIGURE],
       [TAG_NAMES.FONT, TAG_ID.FONT],
       [TAG_NAMES.FOOTER, TAG_ID.FOOTER],
       [TAG_NAMES.FOREIGN_OBJECT, TAG_ID.FOREIGN_OBJECT],
       [TAG_NAMES.FORM, TAG_ID.FORM],
       [TAG_NAMES.FRAME, TAG_ID.FRAME],
       [TAG_NAMES.FRAMESET, TAG_ID.FRAMESET],
       [TAG_NAMES.H1, TAG_ID.H1],
       [TAG_NAMES.H2, TAG_ID.H2],
       [TAG_NAMES.H3, TAG_ID.H3],
       [TAG_NAMES.H4, TAG_ID.H4],
       [TAG_NAMES.H5, TAG_ID.H5],
       [TAG_NAMES.H6, TAG_ID.H6],
       [TAG_NAMES.HEAD, TAG_ID.HEAD],
       [TAG_NAMES.HEADER, TAG_ID.HEADER],
       [TAG_NAMES.HGROUP, TAG_ID.HGROUP],
       [TAG_NAMES.HR, TAG_ID.HR],
       [TAG_NAMES.HTML, TAG_ID.HTML],
       [TAG_NAMES.I, TAG_ID.I],
       [TAG_NAMES.IMG, TAG_ID.IMG],
       [TAG_NAMES.IMAGE, TAG_ID.IMAGE],
       [TAG_NAMES.INPUT, TAG_ID.INPUT],
       [TAG_NAMES.IFRAME, TAG_ID.IFRAME],
       [TAG_NAMES.KEYGEN, TAG_ID.KEYGEN],
       [TAG_NAMES.LABEL, TAG_ID.LABEL],
       [TAG_NAMES.LI, TAG_ID.LI],
       [TAG_NAMES.LINK, TAG_ID.LINK],
       [TAG_NAMES.LISTING, TAG_ID.LISTING],
       [TAG_NAMES.MAIN, TAG_ID.MAIN],
       [TAG_NAMES.MALIGNMARK, TAG_ID.MALIGNMARK],
       [TAG_NAMES.MARQUEE, TAG_ID.MARQUEE],
       [TAG_NAMES.MATH, TAG_ID.MATH],
       [TAG_NAMES.MENU, TAG_ID.MENU],
       [TAG_NAMES.META, TAG_ID.META],
       [TAG_NAMES.MGLYPH, TAG_ID.MGLYPH],
       [TAG_NAMES.MI, TAG_ID.MI],
       [TAG_NAMES.MO, TAG_ID.MO],
       [TAG_NAMES.MN, TAG_ID.MN],
       [TAG_NAMES.MS, TAG_ID.MS],
       [TAG_NAMES.MTEXT, TAG_ID.MTEXT],
       [TAG_NAMES.NAV, TAG_ID.NAV],
       [TAG_NAMES.NOBR, TAG_ID.NOBR],
       [TAG_NAMES.NOFRAMES, TAG_ID.NOFRAMES],
       [TAG_NAMES.NOEMBED, TAG_ID.NOEMBED],
       [TAG_NAMES.NOSCRIPT, TAG_ID.NOSCRIPT],
       [TAG_NAMES.OBJECT, TAG_ID.OBJECT],
       [TAG_NAMES.OL, TAG_ID.OL],
       [TAG_NAMES.OPTGROUP, TAG_ID.OPTGROUP],
       [TAG_NAMES.OPTION, TAG_ID.OPTION],
       [TAG_NAMES.P, TAG_ID.P],
       [TAG_NAMES.PARAM, TAG_ID.PARAM],
       [TAG_NAMES.PLAINTEXT, TAG_ID.PLAINTEXT],
       [TAG_NAMES.PRE, TAG_ID.PRE],
       [TAG_NAMES.RB, TAG_ID.RB],
       [TAG_NAMES.RP, TAG_ID.RP],
       [TAG_NAMES.RT, TAG_ID.RT],
       [TAG_NAMES.RTC, TAG_ID.RTC],
       [TAG_NAMES.RUBY, TAG_ID.RUBY],
       [TAG_NAMES.S, TAG_ID.S],
       [TAG_NAMES.SCRIPT, TAG_ID.SCRIPT],
       [TAG_NAMES.SECTION, TAG_ID.SECTION],
       [TAG_NAMES.SELECT, TAG_ID.SELECT],
       [TAG_NAMES.SOURCE, TAG_ID.SOURCE],
       [TAG_NAMES.SMALL, TAG_ID.SMALL],
       [TAG_NAMES.SPAN, TAG_ID.SPAN],
       [TAG_NAMES.STRIKE, TAG_ID.STRIKE],
       [TAG_NAMES.STRONG, TAG_ID.STRONG],
       [TAG_NAMES.STYLE, TAG_ID.STYLE],
       [TAG_NAMES.SUB, TAG_ID.SUB],
       [TAG_NAMES.SUMMARY, TAG_ID.SUMMARY],
       [TAG_NAMES.SUP, TAG_ID.SUP],
       [TAG_NAMES.TABLE, TAG_ID.TABLE],
       [TAG_NAMES.TBODY, TAG_ID.TBODY],
       [TAG_NAMES.TEMPLATE, TAG_ID.TEMPLATE],
       [TAG_NAMES.TEXTAREA, TAG_ID.TEXTAREA],
       [TAG_NAMES.TFOOT, TAG_ID.TFOOT],
       [TAG_NAMES.TD, TAG_ID.TD],
       [TAG_NAMES.TH, TAG_ID.TH],
       [TAG_NAMES.THEAD, TAG_ID.THEAD],
       [TAG_NAMES.TITLE, TAG_ID.TITLE],
       [TAG_NAMES.TR, TAG_ID.TR],
       [TAG_NAMES.TRACK, TAG_ID.TRACK],
       [TAG_NAMES.TT, TAG_ID.TT],
       [TAG_NAMES.U, TAG_ID.U],
       [TAG_NAMES.UL, TAG_ID.UL],
       [TAG_NAMES.SVG, TAG_ID.SVG],
       [TAG_NAMES.VAR, TAG_ID.VAR],
       [TAG_NAMES.WBR, TAG_ID.WBR],
       [TAG_NAMES.XMP, TAG_ID.XMP],
   ]);
   function getTagID(tagName) {
       var _a;
       return (_a = TAG_NAME_TO_ID.get(tagName)) !== null && _a !== void 0 ? _a : TAG_ID.UNKNOWN;
   }
   const $ = TAG_ID;
   const SPECIAL_ELEMENTS = {
       [NS.HTML]: new Set([
           $.ADDRESS,
           $.APPLET,
           $.AREA,
           $.ARTICLE,
           $.ASIDE,
           $.BASE,
           $.BASEFONT,
           $.BGSOUND,
           $.BLOCKQUOTE,
           $.BODY,
           $.BR,
           $.BUTTON,
           $.CAPTION,
           $.CENTER,
           $.COL,
           $.COLGROUP,
           $.DD,
           $.DETAILS,
           $.DIR,
           $.DIV,
           $.DL,
           $.DT,
           $.EMBED,
           $.FIELDSET,
           $.FIGCAPTION,
           $.FIGURE,
           $.FOOTER,
           $.FORM,
           $.FRAME,
           $.FRAMESET,
           $.H1,
           $.H2,
           $.H3,
           $.H4,
           $.H5,
           $.H6,
           $.HEAD,
           $.HEADER,
           $.HGROUP,
           $.HR,
           $.HTML,
           $.IFRAME,
           $.IMG,
           $.INPUT,
           $.LI,
           $.LINK,
           $.LISTING,
           $.MAIN,
           $.MARQUEE,
           $.MENU,
           $.META,
           $.NAV,
           $.NOEMBED,
           $.NOFRAMES,
           $.NOSCRIPT,
           $.OBJECT,
           $.OL,
           $.P,
           $.PARAM,
           $.PLAINTEXT,
           $.PRE,
           $.SCRIPT,
           $.SECTION,
           $.SELECT,
           $.SOURCE,
           $.STYLE,
           $.SUMMARY,
           $.TABLE,
           $.TBODY,
           $.TD,
           $.TEMPLATE,
           $.TEXTAREA,
           $.TFOOT,
           $.TH,
           $.THEAD,
           $.TITLE,
           $.TR,
           $.TRACK,
           $.UL,
           $.WBR,
           $.XMP,
       ]),
       [NS.MATHML]: new Set([$.MI, $.MO, $.MN, $.MS, $.MTEXT, $.ANNOTATION_XML]),
       [NS.SVG]: new Set([$.TITLE, $.FOREIGN_OBJECT, $.DESC]),
       [NS.XLINK]: new Set(),
       [NS.XML]: new Set(),
       [NS.XMLNS]: new Set(),
   };
   function isNumberedHeader(tn) {
       return tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6;
   }
   new Set([
       TAG_NAMES.STYLE,
       TAG_NAMES.SCRIPT,
       TAG_NAMES.XMP,
       TAG_NAMES.IFRAME,
       TAG_NAMES.NOEMBED,
       TAG_NAMES.NOFRAMES,
       TAG_NAMES.PLAINTEXT,
   ]);

   //C1 Unicode control character reference replacements
   const C1_CONTROLS_REFERENCE_REPLACEMENTS = new Map([
       [0x80, 8364],
       [0x82, 8218],
       [0x83, 402],
       [0x84, 8222],
       [0x85, 8230],
       [0x86, 8224],
       [0x87, 8225],
       [0x88, 710],
       [0x89, 8240],
       [0x8a, 352],
       [0x8b, 8249],
       [0x8c, 338],
       [0x8e, 381],
       [0x91, 8216],
       [0x92, 8217],
       [0x93, 8220],
       [0x94, 8221],
       [0x95, 8226],
       [0x96, 8211],
       [0x97, 8212],
       [0x98, 732],
       [0x99, 8482],
       [0x9a, 353],
       [0x9b, 8250],
       [0x9c, 339],
       [0x9e, 382],
       [0x9f, 376],
   ]);
   //States
   var State$1;
   (function (State) {
       State[State["DATA"] = 0] = "DATA";
       State[State["RCDATA"] = 1] = "RCDATA";
       State[State["RAWTEXT"] = 2] = "RAWTEXT";
       State[State["SCRIPT_DATA"] = 3] = "SCRIPT_DATA";
       State[State["PLAINTEXT"] = 4] = "PLAINTEXT";
       State[State["TAG_OPEN"] = 5] = "TAG_OPEN";
       State[State["END_TAG_OPEN"] = 6] = "END_TAG_OPEN";
       State[State["TAG_NAME"] = 7] = "TAG_NAME";
       State[State["RCDATA_LESS_THAN_SIGN"] = 8] = "RCDATA_LESS_THAN_SIGN";
       State[State["RCDATA_END_TAG_OPEN"] = 9] = "RCDATA_END_TAG_OPEN";
       State[State["RCDATA_END_TAG_NAME"] = 10] = "RCDATA_END_TAG_NAME";
       State[State["RAWTEXT_LESS_THAN_SIGN"] = 11] = "RAWTEXT_LESS_THAN_SIGN";
       State[State["RAWTEXT_END_TAG_OPEN"] = 12] = "RAWTEXT_END_TAG_OPEN";
       State[State["RAWTEXT_END_TAG_NAME"] = 13] = "RAWTEXT_END_TAG_NAME";
       State[State["SCRIPT_DATA_LESS_THAN_SIGN"] = 14] = "SCRIPT_DATA_LESS_THAN_SIGN";
       State[State["SCRIPT_DATA_END_TAG_OPEN"] = 15] = "SCRIPT_DATA_END_TAG_OPEN";
       State[State["SCRIPT_DATA_END_TAG_NAME"] = 16] = "SCRIPT_DATA_END_TAG_NAME";
       State[State["SCRIPT_DATA_ESCAPE_START"] = 17] = "SCRIPT_DATA_ESCAPE_START";
       State[State["SCRIPT_DATA_ESCAPE_START_DASH"] = 18] = "SCRIPT_DATA_ESCAPE_START_DASH";
       State[State["SCRIPT_DATA_ESCAPED"] = 19] = "SCRIPT_DATA_ESCAPED";
       State[State["SCRIPT_DATA_ESCAPED_DASH"] = 20] = "SCRIPT_DATA_ESCAPED_DASH";
       State[State["SCRIPT_DATA_ESCAPED_DASH_DASH"] = 21] = "SCRIPT_DATA_ESCAPED_DASH_DASH";
       State[State["SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN"] = 22] = "SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN";
       State[State["SCRIPT_DATA_ESCAPED_END_TAG_OPEN"] = 23] = "SCRIPT_DATA_ESCAPED_END_TAG_OPEN";
       State[State["SCRIPT_DATA_ESCAPED_END_TAG_NAME"] = 24] = "SCRIPT_DATA_ESCAPED_END_TAG_NAME";
       State[State["SCRIPT_DATA_DOUBLE_ESCAPE_START"] = 25] = "SCRIPT_DATA_DOUBLE_ESCAPE_START";
       State[State["SCRIPT_DATA_DOUBLE_ESCAPED"] = 26] = "SCRIPT_DATA_DOUBLE_ESCAPED";
       State[State["SCRIPT_DATA_DOUBLE_ESCAPED_DASH"] = 27] = "SCRIPT_DATA_DOUBLE_ESCAPED_DASH";
       State[State["SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH"] = 28] = "SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH";
       State[State["SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN"] = 29] = "SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN";
       State[State["SCRIPT_DATA_DOUBLE_ESCAPE_END"] = 30] = "SCRIPT_DATA_DOUBLE_ESCAPE_END";
       State[State["BEFORE_ATTRIBUTE_NAME"] = 31] = "BEFORE_ATTRIBUTE_NAME";
       State[State["ATTRIBUTE_NAME"] = 32] = "ATTRIBUTE_NAME";
       State[State["AFTER_ATTRIBUTE_NAME"] = 33] = "AFTER_ATTRIBUTE_NAME";
       State[State["BEFORE_ATTRIBUTE_VALUE"] = 34] = "BEFORE_ATTRIBUTE_VALUE";
       State[State["ATTRIBUTE_VALUE_DOUBLE_QUOTED"] = 35] = "ATTRIBUTE_VALUE_DOUBLE_QUOTED";
       State[State["ATTRIBUTE_VALUE_SINGLE_QUOTED"] = 36] = "ATTRIBUTE_VALUE_SINGLE_QUOTED";
       State[State["ATTRIBUTE_VALUE_UNQUOTED"] = 37] = "ATTRIBUTE_VALUE_UNQUOTED";
       State[State["AFTER_ATTRIBUTE_VALUE_QUOTED"] = 38] = "AFTER_ATTRIBUTE_VALUE_QUOTED";
       State[State["SELF_CLOSING_START_TAG"] = 39] = "SELF_CLOSING_START_TAG";
       State[State["BOGUS_COMMENT"] = 40] = "BOGUS_COMMENT";
       State[State["MARKUP_DECLARATION_OPEN"] = 41] = "MARKUP_DECLARATION_OPEN";
       State[State["COMMENT_START"] = 42] = "COMMENT_START";
       State[State["COMMENT_START_DASH"] = 43] = "COMMENT_START_DASH";
       State[State["COMMENT"] = 44] = "COMMENT";
       State[State["COMMENT_LESS_THAN_SIGN"] = 45] = "COMMENT_LESS_THAN_SIGN";
       State[State["COMMENT_LESS_THAN_SIGN_BANG"] = 46] = "COMMENT_LESS_THAN_SIGN_BANG";
       State[State["COMMENT_LESS_THAN_SIGN_BANG_DASH"] = 47] = "COMMENT_LESS_THAN_SIGN_BANG_DASH";
       State[State["COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH"] = 48] = "COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH";
       State[State["COMMENT_END_DASH"] = 49] = "COMMENT_END_DASH";
       State[State["COMMENT_END"] = 50] = "COMMENT_END";
       State[State["COMMENT_END_BANG"] = 51] = "COMMENT_END_BANG";
       State[State["DOCTYPE"] = 52] = "DOCTYPE";
       State[State["BEFORE_DOCTYPE_NAME"] = 53] = "BEFORE_DOCTYPE_NAME";
       State[State["DOCTYPE_NAME"] = 54] = "DOCTYPE_NAME";
       State[State["AFTER_DOCTYPE_NAME"] = 55] = "AFTER_DOCTYPE_NAME";
       State[State["AFTER_DOCTYPE_PUBLIC_KEYWORD"] = 56] = "AFTER_DOCTYPE_PUBLIC_KEYWORD";
       State[State["BEFORE_DOCTYPE_PUBLIC_IDENTIFIER"] = 57] = "BEFORE_DOCTYPE_PUBLIC_IDENTIFIER";
       State[State["DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED"] = 58] = "DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED";
       State[State["DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED"] = 59] = "DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED";
       State[State["AFTER_DOCTYPE_PUBLIC_IDENTIFIER"] = 60] = "AFTER_DOCTYPE_PUBLIC_IDENTIFIER";
       State[State["BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS"] = 61] = "BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS";
       State[State["AFTER_DOCTYPE_SYSTEM_KEYWORD"] = 62] = "AFTER_DOCTYPE_SYSTEM_KEYWORD";
       State[State["BEFORE_DOCTYPE_SYSTEM_IDENTIFIER"] = 63] = "BEFORE_DOCTYPE_SYSTEM_IDENTIFIER";
       State[State["DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED"] = 64] = "DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED";
       State[State["DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED"] = 65] = "DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED";
       State[State["AFTER_DOCTYPE_SYSTEM_IDENTIFIER"] = 66] = "AFTER_DOCTYPE_SYSTEM_IDENTIFIER";
       State[State["BOGUS_DOCTYPE"] = 67] = "BOGUS_DOCTYPE";
       State[State["CDATA_SECTION"] = 68] = "CDATA_SECTION";
       State[State["CDATA_SECTION_BRACKET"] = 69] = "CDATA_SECTION_BRACKET";
       State[State["CDATA_SECTION_END"] = 70] = "CDATA_SECTION_END";
       State[State["CHARACTER_REFERENCE"] = 71] = "CHARACTER_REFERENCE";
       State[State["NAMED_CHARACTER_REFERENCE"] = 72] = "NAMED_CHARACTER_REFERENCE";
       State[State["AMBIGUOUS_AMPERSAND"] = 73] = "AMBIGUOUS_AMPERSAND";
       State[State["NUMERIC_CHARACTER_REFERENCE"] = 74] = "NUMERIC_CHARACTER_REFERENCE";
       State[State["HEXADEMICAL_CHARACTER_REFERENCE_START"] = 75] = "HEXADEMICAL_CHARACTER_REFERENCE_START";
       State[State["HEXADEMICAL_CHARACTER_REFERENCE"] = 76] = "HEXADEMICAL_CHARACTER_REFERENCE";
       State[State["DECIMAL_CHARACTER_REFERENCE"] = 77] = "DECIMAL_CHARACTER_REFERENCE";
       State[State["NUMERIC_CHARACTER_REFERENCE_END"] = 78] = "NUMERIC_CHARACTER_REFERENCE_END";
   })(State$1 || (State$1 = {}));
   //Tokenizer initial states for different modes
   const TokenizerMode = {
       DATA: State$1.DATA,
       RCDATA: State$1.RCDATA,
       RAWTEXT: State$1.RAWTEXT,
       SCRIPT_DATA: State$1.SCRIPT_DATA,
       PLAINTEXT: State$1.PLAINTEXT,
       CDATA_SECTION: State$1.CDATA_SECTION,
   };
   //Utils
   //OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline
   //this functions if they will be situated in another module due to context switch.
   //Always perform inlining check before modifying this functions ('node --trace-inlining').
   function isAsciiDigit(cp) {
       return cp >= CODE_POINTS.DIGIT_0 && cp <= CODE_POINTS.DIGIT_9;
   }
   function isAsciiUpper(cp) {
       return cp >= CODE_POINTS.LATIN_CAPITAL_A && cp <= CODE_POINTS.LATIN_CAPITAL_Z;
   }
   function isAsciiLower(cp) {
       return cp >= CODE_POINTS.LATIN_SMALL_A && cp <= CODE_POINTS.LATIN_SMALL_Z;
   }
   function isAsciiLetter(cp) {
       return isAsciiLower(cp) || isAsciiUpper(cp);
   }
   function isAsciiAlphaNumeric(cp) {
       return isAsciiLetter(cp) || isAsciiDigit(cp);
   }
   function isAsciiUpperHexDigit(cp) {
       return cp >= CODE_POINTS.LATIN_CAPITAL_A && cp <= CODE_POINTS.LATIN_CAPITAL_F;
   }
   function isAsciiLowerHexDigit(cp) {
       return cp >= CODE_POINTS.LATIN_SMALL_A && cp <= CODE_POINTS.LATIN_SMALL_F;
   }
   function isAsciiHexDigit(cp) {
       return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);
   }
   function toAsciiLower(cp) {
       return cp + 32;
   }
   function isWhitespace(cp) {
       return cp === CODE_POINTS.SPACE || cp === CODE_POINTS.LINE_FEED || cp === CODE_POINTS.TABULATION || cp === CODE_POINTS.FORM_FEED;
   }
   function isEntityInAttributeInvalidEnd(nextCp) {
       return nextCp === CODE_POINTS.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);
   }
   function isScriptDataDoubleEscapeSequenceEnd(cp) {
       return isWhitespace(cp) || cp === CODE_POINTS.SOLIDUS || cp === CODE_POINTS.GREATER_THAN_SIGN;
   }
   //Tokenizer
   class Tokenizer {
       constructor(options, handler) {
           this.options = options;
           this.handler = handler;
           this.paused = false;
           /** Ensures that the parsing loop isn't run multiple times at once. */
           this.inLoop = false;
           /**
            * Indicates that the current adjusted node exists, is not an element in the HTML namespace,
            * and that it is not an integration point for either MathML or HTML.
            *
            * @see {@link https://html.spec.whatwg.org/multipage/parsing.html#tree-construction}
            */
           this.inForeignNode = false;
           this.lastStartTagName = '';
           this.active = false;
           this.state = State$1.DATA;
           this.returnState = State$1.DATA;
           this.charRefCode = -1;
           this.consumedAfterSnapshot = -1;
           this.currentCharacterToken = null;
           this.currentToken = null;
           this.currentAttr = { name: '', value: '' };
           this.preprocessor = new Preprocessor(handler);
           this.currentLocation = this.getCurrentLocation(-1);
       }
       //Errors
       _err(code) {
           var _a, _b;
           (_b = (_a = this.handler).onParseError) === null || _b === void 0 ? void 0 : _b.call(_a, this.preprocessor.getError(code));
       }
       // NOTE: `offset` may never run across line boundaries.
       getCurrentLocation(offset) {
           if (!this.options.sourceCodeLocationInfo) {
               return null;
           }
           return {
               startLine: this.preprocessor.line,
               startCol: this.preprocessor.col - offset,
               startOffset: this.preprocessor.offset - offset,
               endLine: -1,
               endCol: -1,
               endOffset: -1,
           };
       }
       _runParsingLoop() {
           if (this.inLoop)
               return;
           this.inLoop = true;
           while (this.active && !this.paused) {
               this.consumedAfterSnapshot = 0;
               const cp = this._consume();
               if (!this._ensureHibernation()) {
                   this._callState(cp);
               }
           }
           this.inLoop = false;
       }
       //API
       pause() {
           this.paused = true;
       }
       resume(writeCallback) {
           if (!this.paused) {
               throw new Error('Parser was already resumed');
           }
           this.paused = false;
           // Necessary for synchronous resume.
           if (this.inLoop)
               return;
           this._runParsingLoop();
           if (!this.paused) {
               writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();
           }
       }
       write(chunk, isLastChunk, writeCallback) {
           this.active = true;
           this.preprocessor.write(chunk, isLastChunk);
           this._runParsingLoop();
           if (!this.paused) {
               writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();
           }
       }
       insertHtmlAtCurrentPos(chunk) {
           this.active = true;
           this.preprocessor.insertHtmlAtCurrentPos(chunk);
           this._runParsingLoop();
       }
       //Hibernation
       _ensureHibernation() {
           if (this.preprocessor.endOfChunkHit) {
               this._unconsume(this.consumedAfterSnapshot);
               this.active = false;
               return true;
           }
           return false;
       }
       //Consumption
       _consume() {
           this.consumedAfterSnapshot++;
           return this.preprocessor.advance();
       }
       _unconsume(count) {
           this.consumedAfterSnapshot -= count;
           this.preprocessor.retreat(count);
       }
       _reconsumeInState(state, cp) {
           this.state = state;
           this._callState(cp);
       }
       _advanceBy(count) {
           this.consumedAfterSnapshot += count;
           for (let i = 0; i < count; i++) {
               this.preprocessor.advance();
           }
       }
       _consumeSequenceIfMatch(pattern, caseSensitive) {
           if (this.preprocessor.startsWith(pattern, caseSensitive)) {
               // We will already have consumed one character before calling this method.
               this._advanceBy(pattern.length - 1);
               return true;
           }
           return false;
       }
       //Token creation
       _createStartTagToken() {
           this.currentToken = {
               type: TokenType.START_TAG,
               tagName: '',
               tagID: TAG_ID.UNKNOWN,
               selfClosing: false,
               ackSelfClosing: false,
               attrs: [],
               location: this.getCurrentLocation(1),
           };
       }
       _createEndTagToken() {
           this.currentToken = {
               type: TokenType.END_TAG,
               tagName: '',
               tagID: TAG_ID.UNKNOWN,
               selfClosing: false,
               ackSelfClosing: false,
               attrs: [],
               location: this.getCurrentLocation(2),
           };
       }
       _createCommentToken(offset) {
           this.currentToken = {
               type: TokenType.COMMENT,
               data: '',
               location: this.getCurrentLocation(offset),
           };
       }
       _createDoctypeToken(initialName) {
           this.currentToken = {
               type: TokenType.DOCTYPE,
               name: initialName,
               forceQuirks: false,
               publicId: null,
               systemId: null,
               location: this.currentLocation,
           };
       }
       _createCharacterToken(type, chars) {
           this.currentCharacterToken = {
               type,
               chars,
               location: this.currentLocation,
           };
       }
       //Tag attributes
       _createAttr(attrNameFirstCh) {
           this.currentAttr = {
               name: attrNameFirstCh,
               value: '',
           };
           this.currentLocation = this.getCurrentLocation(0);
       }
       _leaveAttrName() {
           var _a;
           var _b;
           const token = this.currentToken;
           if (getTokenAttr(token, this.currentAttr.name) === null) {
               token.attrs.push(this.currentAttr);
               if (token.location && this.currentLocation) {
                   const attrLocations = ((_a = (_b = token.location).attrs) !== null && _a !== void 0 ? _a : (_b.attrs = Object.create(null)));
                   attrLocations[this.currentAttr.name] = this.currentLocation;
                   // Set end location
                   this._leaveAttrValue();
               }
           }
           else {
               this._err(ERR.duplicateAttribute);
           }
       }
       _leaveAttrValue() {
           if (this.currentLocation) {
               this.currentLocation.endLine = this.preprocessor.line;
               this.currentLocation.endCol = this.preprocessor.col;
               this.currentLocation.endOffset = this.preprocessor.offset;
           }
       }
       //Token emission
       prepareToken(ct) {
           this._emitCurrentCharacterToken(ct.location);
           this.currentToken = null;
           if (ct.location) {
               ct.location.endLine = this.preprocessor.line;
               ct.location.endCol = this.preprocessor.col + 1;
               ct.location.endOffset = this.preprocessor.offset + 1;
           }
           this.currentLocation = this.getCurrentLocation(-1);
       }
       emitCurrentTagToken() {
           const ct = this.currentToken;
           this.prepareToken(ct);
           ct.tagID = getTagID(ct.tagName);
           if (ct.type === TokenType.START_TAG) {
               this.lastStartTagName = ct.tagName;
               this.handler.onStartTag(ct);
           }
           else {
               if (ct.attrs.length > 0) {
                   this._err(ERR.endTagWithAttributes);
               }
               if (ct.selfClosing) {
                   this._err(ERR.endTagWithTrailingSolidus);
               }
               this.handler.onEndTag(ct);
           }
           this.preprocessor.dropParsedChunk();
       }
       emitCurrentComment(ct) {
           this.prepareToken(ct);
           this.handler.onComment(ct);
           this.preprocessor.dropParsedChunk();
       }
       emitCurrentDoctype(ct) {
           this.prepareToken(ct);
           this.handler.onDoctype(ct);
           this.preprocessor.dropParsedChunk();
       }
       _emitCurrentCharacterToken(nextLocation) {
           if (this.currentCharacterToken) {
               //NOTE: if we have a pending character token, make it's end location equal to the
               //current token's start location.
               if (nextLocation && this.currentCharacterToken.location) {
                   this.currentCharacterToken.location.endLine = nextLocation.startLine;
                   this.currentCharacterToken.location.endCol = nextLocation.startCol;
                   this.currentCharacterToken.location.endOffset = nextLocation.startOffset;
               }
               switch (this.currentCharacterToken.type) {
                   case TokenType.CHARACTER: {
                       this.handler.onCharacter(this.currentCharacterToken);
                       break;
                   }
                   case TokenType.NULL_CHARACTER: {
                       this.handler.onNullCharacter(this.currentCharacterToken);
                       break;
                   }
                   case TokenType.WHITESPACE_CHARACTER: {
                       this.handler.onWhitespaceCharacter(this.currentCharacterToken);
                       break;
                   }
               }
               this.currentCharacterToken = null;
           }
       }
       _emitEOFToken() {
           const location = this.getCurrentLocation(0);
           if (location) {
               location.endLine = location.startLine;
               location.endCol = location.startCol;
               location.endOffset = location.startOffset;
           }
           this._emitCurrentCharacterToken(location);
           this.handler.onEof({ type: TokenType.EOF, location });
           this.active = false;
       }
       //Characters emission
       //OPTIMIZATION: specification uses only one type of character tokens (one token per character).
       //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.
       //If we have a sequence of characters that belong to the same group, the parser can process it
       //as a single solid character token.
       //So, there are 3 types of character tokens in parse5:
       //1)TokenType.NULL_CHARACTER - \u0000-character sequences (e.g. '\u0000\u0000\u0000')
       //2)TokenType.WHITESPACE_CHARACTER - any whitespace/new-line character sequences (e.g. '\n  \r\t   \f')
       //3)TokenType.CHARACTER - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')
       _appendCharToCurrentCharacterToken(type, ch) {
           if (this.currentCharacterToken) {
               if (this.currentCharacterToken.type !== type) {
                   this.currentLocation = this.getCurrentLocation(0);
                   this._emitCurrentCharacterToken(this.currentLocation);
                   this.preprocessor.dropParsedChunk();
               }
               else {
                   this.currentCharacterToken.chars += ch;
                   return;
               }
           }
           this._createCharacterToken(type, ch);
       }
       _emitCodePoint(cp) {
           const type = isWhitespace(cp)
               ? TokenType.WHITESPACE_CHARACTER
               : cp === CODE_POINTS.NULL
                   ? TokenType.NULL_CHARACTER
                   : TokenType.CHARACTER;
           this._appendCharToCurrentCharacterToken(type, String.fromCodePoint(cp));
       }
       //NOTE: used when we emit characters explicitly.
       //This is always for non-whitespace and non-null characters, which allows us to avoid additional checks.
       _emitChars(ch) {
           this._appendCharToCurrentCharacterToken(TokenType.CHARACTER, ch);
       }
       // Character reference helpers
       _matchNamedCharacterReference(cp) {
           let result = null;
           let excess = 0;
           let withoutSemicolon = false;
           for (let i = 0, current = htmlDecodeTree[0]; i >= 0; cp = this._consume()) {
               i = determineBranch(htmlDecodeTree, current, i + 1, cp);
               if (i < 0)
                   break;
               excess += 1;
               current = htmlDecodeTree[i];
               const masked = current & BinTrieFlags.VALUE_LENGTH;
               // If the branch is a value, store it and continue
               if (masked) {
                   // The mask is the number of bytes of the value, including the current byte.
                   const valueLength = (masked >> 14) - 1;
                   // Attribute values that aren't terminated properly aren't parsed, and shouldn't lead to a parser error.
                   // See the example in https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state
                   if (cp !== CODE_POINTS.SEMICOLON &&
                       this._isCharacterReferenceInAttribute() &&
                       isEntityInAttributeInvalidEnd(this.preprocessor.peek(1))) {
                       //NOTE: we don't flush all consumed code points here, and instead switch back to the original state after
                       //emitting an ampersand. This is fine, as alphanumeric characters won't be parsed differently in attributes.
                       result = [CODE_POINTS.AMPERSAND];
                       // Skip over the value.
                       i += valueLength;
                   }
                   else {
                       // If this is a surrogate pair, consume the next two bytes.
                       result =
                           valueLength === 0
                               ? [htmlDecodeTree[i] & ~BinTrieFlags.VALUE_LENGTH]
                               : valueLength === 1
                                   ? [htmlDecodeTree[++i]]
                                   : [htmlDecodeTree[++i], htmlDecodeTree[++i]];
                       excess = 0;
                       withoutSemicolon = cp !== CODE_POINTS.SEMICOLON;
                   }
                   if (valueLength === 0) {
                       // If the value is zero-length, we're done.
                       this._consume();
                       break;
                   }
               }
           }
           this._unconsume(excess);
           if (withoutSemicolon && !this.preprocessor.endOfChunkHit) {
               this._err(ERR.missingSemicolonAfterCharacterReference);
           }
           // We want to emit the error above on the code point after the entity.
           // We always consume one code point too many in the loop, and we wait to
           // unconsume it until after the error is emitted.
           this._unconsume(1);
           return result;
       }
       _isCharacterReferenceInAttribute() {
           return (this.returnState === State$1.ATTRIBUTE_VALUE_DOUBLE_QUOTED ||
               this.returnState === State$1.ATTRIBUTE_VALUE_SINGLE_QUOTED ||
               this.returnState === State$1.ATTRIBUTE_VALUE_UNQUOTED);
       }
       _flushCodePointConsumedAsCharacterReference(cp) {
           if (this._isCharacterReferenceInAttribute()) {
               this.currentAttr.value += String.fromCodePoint(cp);
           }
           else {
               this._emitCodePoint(cp);
           }
       }
       // Calling states this way turns out to be much faster than any other approach.
       _callState(cp) {
           switch (this.state) {
               case State$1.DATA: {
                   this._stateData(cp);
                   break;
               }
               case State$1.RCDATA: {
                   this._stateRcdata(cp);
                   break;
               }
               case State$1.RAWTEXT: {
                   this._stateRawtext(cp);
                   break;
               }
               case State$1.SCRIPT_DATA: {
                   this._stateScriptData(cp);
                   break;
               }
               case State$1.PLAINTEXT: {
                   this._statePlaintext(cp);
                   break;
               }
               case State$1.TAG_OPEN: {
                   this._stateTagOpen(cp);
                   break;
               }
               case State$1.END_TAG_OPEN: {
                   this._stateEndTagOpen(cp);
                   break;
               }
               case State$1.TAG_NAME: {
                   this._stateTagName(cp);
                   break;
               }
               case State$1.RCDATA_LESS_THAN_SIGN: {
                   this._stateRcdataLessThanSign(cp);
                   break;
               }
               case State$1.RCDATA_END_TAG_OPEN: {
                   this._stateRcdataEndTagOpen(cp);
                   break;
               }
               case State$1.RCDATA_END_TAG_NAME: {
                   this._stateRcdataEndTagName(cp);
                   break;
               }
               case State$1.RAWTEXT_LESS_THAN_SIGN: {
                   this._stateRawtextLessThanSign(cp);
                   break;
               }
               case State$1.RAWTEXT_END_TAG_OPEN: {
                   this._stateRawtextEndTagOpen(cp);
                   break;
               }
               case State$1.RAWTEXT_END_TAG_NAME: {
                   this._stateRawtextEndTagName(cp);
                   break;
               }
               case State$1.SCRIPT_DATA_LESS_THAN_SIGN: {
                   this._stateScriptDataLessThanSign(cp);
                   break;
               }
               case State$1.SCRIPT_DATA_END_TAG_OPEN: {
                   this._stateScriptDataEndTagOpen(cp);
                   break;
               }
               case State$1.SCRIPT_DATA_END_TAG_NAME: {
                   this._stateScriptDataEndTagName(cp);
                   break;
               }
               case State$1.SCRIPT_DATA_ESCAPE_START: {
                   this._stateScriptDataEscapeStart(cp);
                   break;
               }
               case State$1.SCRIPT_DATA_ESCAPE_START_DASH: {
                   this._stateScriptDataEscapeStartDash(cp);
                   break;
               }
               case State$1.SCRIPT_DATA_ESCAPED: {
                   this._stateScriptDataEscaped(cp);
                   break;
               }
               case State$1.SCRIPT_DATA_ESCAPED_DASH: {
                   this._stateScriptDataEscapedDash(cp);
                   break;
               }
               case State$1.SCRIPT_DATA_ESCAPED_DASH_DASH: {
                   this._stateScriptDataEscapedDashDash(cp);
                   break;
               }
               case State$1.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN: {
                   this._stateScriptDataEscapedLessThanSign(cp);
                   break;
               }
               case State$1.SCRIPT_DATA_ESCAPED_END_TAG_OPEN: {
                   this._stateScriptDataEscapedEndTagOpen(cp);
                   break;
               }
               case State$1.SCRIPT_DATA_ESCAPED_END_TAG_NAME: {
                   this._stateScriptDataEscapedEndTagName(cp);
                   break;
               }
               case State$1.SCRIPT_DATA_DOUBLE_ESCAPE_START: {
                   this._stateScriptDataDoubleEscapeStart(cp);
                   break;
               }
               case State$1.SCRIPT_DATA_DOUBLE_ESCAPED: {
                   this._stateScriptDataDoubleEscaped(cp);
                   break;
               }
               case State$1.SCRIPT_DATA_DOUBLE_ESCAPED_DASH: {
                   this._stateScriptDataDoubleEscapedDash(cp);
                   break;
               }
               case State$1.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH: {
                   this._stateScriptDataDoubleEscapedDashDash(cp);
                   break;
               }
               case State$1.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN: {
                   this._stateScriptDataDoubleEscapedLessThanSign(cp);
                   break;
               }
               case State$1.SCRIPT_DATA_DOUBLE_ESCAPE_END: {
                   this._stateScriptDataDoubleEscapeEnd(cp);
                   break;
               }
               case State$1.BEFORE_ATTRIBUTE_NAME: {
                   this._stateBeforeAttributeName(cp);
                   break;
               }
               case State$1.ATTRIBUTE_NAME: {
                   this._stateAttributeName(cp);
                   break;
               }
               case State$1.AFTER_ATTRIBUTE_NAME: {
                   this._stateAfterAttributeName(cp);
                   break;
               }
               case State$1.BEFORE_ATTRIBUTE_VALUE: {
                   this._stateBeforeAttributeValue(cp);
                   break;
               }
               case State$1.ATTRIBUTE_VALUE_DOUBLE_QUOTED: {
                   this._stateAttributeValueDoubleQuoted(cp);
                   break;
               }
               case State$1.ATTRIBUTE_VALUE_SINGLE_QUOTED: {
                   this._stateAttributeValueSingleQuoted(cp);
                   break;
               }
               case State$1.ATTRIBUTE_VALUE_UNQUOTED: {
                   this._stateAttributeValueUnquoted(cp);
                   break;
               }
               case State$1.AFTER_ATTRIBUTE_VALUE_QUOTED: {
                   this._stateAfterAttributeValueQuoted(cp);
                   break;
               }
               case State$1.SELF_CLOSING_START_TAG: {
                   this._stateSelfClosingStartTag(cp);
                   break;
               }
               case State$1.BOGUS_COMMENT: {
                   this._stateBogusComment(cp);
                   break;
               }
               case State$1.MARKUP_DECLARATION_OPEN: {
                   this._stateMarkupDeclarationOpen(cp);
                   break;
               }
               case State$1.COMMENT_START: {
                   this._stateCommentStart(cp);
                   break;
               }
               case State$1.COMMENT_START_DASH: {
                   this._stateCommentStartDash(cp);
                   break;
               }
               case State$1.COMMENT: {
                   this._stateComment(cp);
                   break;
               }
               case State$1.COMMENT_LESS_THAN_SIGN: {
                   this._stateCommentLessThanSign(cp);
                   break;
               }
               case State$1.COMMENT_LESS_THAN_SIGN_BANG: {
                   this._stateCommentLessThanSignBang(cp);
                   break;
               }
               case State$1.COMMENT_LESS_THAN_SIGN_BANG_DASH: {
                   this._stateCommentLessThanSignBangDash(cp);
                   break;
               }
               case State$1.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH: {
                   this._stateCommentLessThanSignBangDashDash(cp);
                   break;
               }
               case State$1.COMMENT_END_DASH: {
                   this._stateCommentEndDash(cp);
                   break;
               }
               case State$1.COMMENT_END: {
                   this._stateCommentEnd(cp);
                   break;
               }
               case State$1.COMMENT_END_BANG: {
                   this._stateCommentEndBang(cp);
                   break;
               }
               case State$1.DOCTYPE: {
                   this._stateDoctype(cp);
                   break;
               }
               case State$1.BEFORE_DOCTYPE_NAME: {
                   this._stateBeforeDoctypeName(cp);
                   break;
               }
               case State$1.DOCTYPE_NAME: {
                   this._stateDoctypeName(cp);
                   break;
               }
               case State$1.AFTER_DOCTYPE_NAME: {
                   this._stateAfterDoctypeName(cp);
                   break;
               }
               case State$1.AFTER_DOCTYPE_PUBLIC_KEYWORD: {
                   this._stateAfterDoctypePublicKeyword(cp);
                   break;
               }
               case State$1.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER: {
                   this._stateBeforeDoctypePublicIdentifier(cp);
                   break;
               }
               case State$1.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED: {
                   this._stateDoctypePublicIdentifierDoubleQuoted(cp);
                   break;
               }
               case State$1.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED: {
                   this._stateDoctypePublicIdentifierSingleQuoted(cp);
                   break;
               }
               case State$1.AFTER_DOCTYPE_PUBLIC_IDENTIFIER: {
                   this._stateAfterDoctypePublicIdentifier(cp);
                   break;
               }
               case State$1.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS: {
                   this._stateBetweenDoctypePublicAndSystemIdentifiers(cp);
                   break;
               }
               case State$1.AFTER_DOCTYPE_SYSTEM_KEYWORD: {
                   this._stateAfterDoctypeSystemKeyword(cp);
                   break;
               }
               case State$1.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER: {
                   this._stateBeforeDoctypeSystemIdentifier(cp);
                   break;
               }
               case State$1.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED: {
                   this._stateDoctypeSystemIdentifierDoubleQuoted(cp);
                   break;
               }
               case State$1.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED: {
                   this._stateDoctypeSystemIdentifierSingleQuoted(cp);
                   break;
               }
               case State$1.AFTER_DOCTYPE_SYSTEM_IDENTIFIER: {
                   this._stateAfterDoctypeSystemIdentifier(cp);
                   break;
               }
               case State$1.BOGUS_DOCTYPE: {
                   this._stateBogusDoctype(cp);
                   break;
               }
               case State$1.CDATA_SECTION: {
                   this._stateCdataSection(cp);
                   break;
               }
               case State$1.CDATA_SECTION_BRACKET: {
                   this._stateCdataSectionBracket(cp);
                   break;
               }
               case State$1.CDATA_SECTION_END: {
                   this._stateCdataSectionEnd(cp);
                   break;
               }
               case State$1.CHARACTER_REFERENCE: {
                   this._stateCharacterReference(cp);
                   break;
               }
               case State$1.NAMED_CHARACTER_REFERENCE: {
                   this._stateNamedCharacterReference(cp);
                   break;
               }
               case State$1.AMBIGUOUS_AMPERSAND: {
                   this._stateAmbiguousAmpersand(cp);
                   break;
               }
               case State$1.NUMERIC_CHARACTER_REFERENCE: {
                   this._stateNumericCharacterReference(cp);
                   break;
               }
               case State$1.HEXADEMICAL_CHARACTER_REFERENCE_START: {
                   this._stateHexademicalCharacterReferenceStart(cp);
                   break;
               }
               case State$1.HEXADEMICAL_CHARACTER_REFERENCE: {
                   this._stateHexademicalCharacterReference(cp);
                   break;
               }
               case State$1.DECIMAL_CHARACTER_REFERENCE: {
                   this._stateDecimalCharacterReference(cp);
                   break;
               }
               case State$1.NUMERIC_CHARACTER_REFERENCE_END: {
                   this._stateNumericCharacterReferenceEnd(cp);
                   break;
               }
               default: {
                   throw new Error('Unknown state');
               }
           }
       }
       // State machine
       // Data state
       //------------------------------------------------------------------
       _stateData(cp) {
           switch (cp) {
               case CODE_POINTS.LESS_THAN_SIGN: {
                   this.state = State$1.TAG_OPEN;
                   break;
               }
               case CODE_POINTS.AMPERSAND: {
                   this.returnState = State$1.DATA;
                   this.state = State$1.CHARACTER_REFERENCE;
                   break;
               }
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   this._emitCodePoint(cp);
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this._emitCodePoint(cp);
               }
           }
       }
       //  RCDATA state
       //------------------------------------------------------------------
       _stateRcdata(cp) {
           switch (cp) {
               case CODE_POINTS.AMPERSAND: {
                   this.returnState = State$1.RCDATA;
                   this.state = State$1.CHARACTER_REFERENCE;
                   break;
               }
               case CODE_POINTS.LESS_THAN_SIGN: {
                   this.state = State$1.RCDATA_LESS_THAN_SIGN;
                   break;
               }
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   this._emitChars(REPLACEMENT_CHARACTER);
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this._emitCodePoint(cp);
               }
           }
       }
       // RAWTEXT state
       //------------------------------------------------------------------
       _stateRawtext(cp) {
           switch (cp) {
               case CODE_POINTS.LESS_THAN_SIGN: {
                   this.state = State$1.RAWTEXT_LESS_THAN_SIGN;
                   break;
               }
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   this._emitChars(REPLACEMENT_CHARACTER);
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this._emitCodePoint(cp);
               }
           }
       }
       // Script data state
       //------------------------------------------------------------------
       _stateScriptData(cp) {
           switch (cp) {
               case CODE_POINTS.LESS_THAN_SIGN: {
                   this.state = State$1.SCRIPT_DATA_LESS_THAN_SIGN;
                   break;
               }
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   this._emitChars(REPLACEMENT_CHARACTER);
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this._emitCodePoint(cp);
               }
           }
       }
       // PLAINTEXT state
       //------------------------------------------------------------------
       _statePlaintext(cp) {
           switch (cp) {
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   this._emitChars(REPLACEMENT_CHARACTER);
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this._emitCodePoint(cp);
               }
           }
       }
       // Tag open state
       //------------------------------------------------------------------
       _stateTagOpen(cp) {
           if (isAsciiLetter(cp)) {
               this._createStartTagToken();
               this.state = State$1.TAG_NAME;
               this._stateTagName(cp);
           }
           else
               switch (cp) {
                   case CODE_POINTS.EXCLAMATION_MARK: {
                       this.state = State$1.MARKUP_DECLARATION_OPEN;
                       break;
                   }
                   case CODE_POINTS.SOLIDUS: {
                       this.state = State$1.END_TAG_OPEN;
                       break;
                   }
                   case CODE_POINTS.QUESTION_MARK: {
                       this._err(ERR.unexpectedQuestionMarkInsteadOfTagName);
                       this._createCommentToken(1);
                       this.state = State$1.BOGUS_COMMENT;
                       this._stateBogusComment(cp);
                       break;
                   }
                   case CODE_POINTS.EOF: {
                       this._err(ERR.eofBeforeTagName);
                       this._emitChars('<');
                       this._emitEOFToken();
                       break;
                   }
                   default: {
                       this._err(ERR.invalidFirstCharacterOfTagName);
                       this._emitChars('<');
                       this.state = State$1.DATA;
                       this._stateData(cp);
                   }
               }
       }
       // End tag open state
       //------------------------------------------------------------------
       _stateEndTagOpen(cp) {
           if (isAsciiLetter(cp)) {
               this._createEndTagToken();
               this.state = State$1.TAG_NAME;
               this._stateTagName(cp);
           }
           else
               switch (cp) {
                   case CODE_POINTS.GREATER_THAN_SIGN: {
                       this._err(ERR.missingEndTagName);
                       this.state = State$1.DATA;
                       break;
                   }
                   case CODE_POINTS.EOF: {
                       this._err(ERR.eofBeforeTagName);
                       this._emitChars('</');
                       this._emitEOFToken();
                       break;
                   }
                   default: {
                       this._err(ERR.invalidFirstCharacterOfTagName);
                       this._createCommentToken(2);
                       this.state = State$1.BOGUS_COMMENT;
                       this._stateBogusComment(cp);
                   }
               }
       }
       // Tag name state
       //------------------------------------------------------------------
       _stateTagName(cp) {
           const token = this.currentToken;
           switch (cp) {
               case CODE_POINTS.SPACE:
               case CODE_POINTS.LINE_FEED:
               case CODE_POINTS.TABULATION:
               case CODE_POINTS.FORM_FEED: {
                   this.state = State$1.BEFORE_ATTRIBUTE_NAME;
                   break;
               }
               case CODE_POINTS.SOLIDUS: {
                   this.state = State$1.SELF_CLOSING_START_TAG;
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this.state = State$1.DATA;
                   this.emitCurrentTagToken();
                   break;
               }
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   token.tagName += REPLACEMENT_CHARACTER;
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInTag);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   token.tagName += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);
               }
           }
       }
       // RCDATA less-than sign state
       //------------------------------------------------------------------
       _stateRcdataLessThanSign(cp) {
           if (cp === CODE_POINTS.SOLIDUS) {
               this.state = State$1.RCDATA_END_TAG_OPEN;
           }
           else {
               this._emitChars('<');
               this.state = State$1.RCDATA;
               this._stateRcdata(cp);
           }
       }
       // RCDATA end tag open state
       //------------------------------------------------------------------
       _stateRcdataEndTagOpen(cp) {
           if (isAsciiLetter(cp)) {
               this.state = State$1.RCDATA_END_TAG_NAME;
               this._stateRcdataEndTagName(cp);
           }
           else {
               this._emitChars('</');
               this.state = State$1.RCDATA;
               this._stateRcdata(cp);
           }
       }
       handleSpecialEndTag(_cp) {
           if (!this.preprocessor.startsWith(this.lastStartTagName, false)) {
               return !this._ensureHibernation();
           }
           this._createEndTagToken();
           const token = this.currentToken;
           token.tagName = this.lastStartTagName;
           const cp = this.preprocessor.peek(this.lastStartTagName.length);
           switch (cp) {
               case CODE_POINTS.SPACE:
               case CODE_POINTS.LINE_FEED:
               case CODE_POINTS.TABULATION:
               case CODE_POINTS.FORM_FEED: {
                   this._advanceBy(this.lastStartTagName.length);
                   this.state = State$1.BEFORE_ATTRIBUTE_NAME;
                   return false;
               }
               case CODE_POINTS.SOLIDUS: {
                   this._advanceBy(this.lastStartTagName.length);
                   this.state = State$1.SELF_CLOSING_START_TAG;
                   return false;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this._advanceBy(this.lastStartTagName.length);
                   this.emitCurrentTagToken();
                   this.state = State$1.DATA;
                   return false;
               }
               default: {
                   return !this._ensureHibernation();
               }
           }
       }
       // RCDATA end tag name state
       //------------------------------------------------------------------
       _stateRcdataEndTagName(cp) {
           if (this.handleSpecialEndTag(cp)) {
               this._emitChars('</');
               this.state = State$1.RCDATA;
               this._stateRcdata(cp);
           }
       }
       // RAWTEXT less-than sign state
       //------------------------------------------------------------------
       _stateRawtextLessThanSign(cp) {
           if (cp === CODE_POINTS.SOLIDUS) {
               this.state = State$1.RAWTEXT_END_TAG_OPEN;
           }
           else {
               this._emitChars('<');
               this.state = State$1.RAWTEXT;
               this._stateRawtext(cp);
           }
       }
       // RAWTEXT end tag open state
       //------------------------------------------------------------------
       _stateRawtextEndTagOpen(cp) {
           if (isAsciiLetter(cp)) {
               this.state = State$1.RAWTEXT_END_TAG_NAME;
               this._stateRawtextEndTagName(cp);
           }
           else {
               this._emitChars('</');
               this.state = State$1.RAWTEXT;
               this._stateRawtext(cp);
           }
       }
       // RAWTEXT end tag name state
       //------------------------------------------------------------------
       _stateRawtextEndTagName(cp) {
           if (this.handleSpecialEndTag(cp)) {
               this._emitChars('</');
               this.state = State$1.RAWTEXT;
               this._stateRawtext(cp);
           }
       }
       // Script data less-than sign state
       //------------------------------------------------------------------
       _stateScriptDataLessThanSign(cp) {
           switch (cp) {
               case CODE_POINTS.SOLIDUS: {
                   this.state = State$1.SCRIPT_DATA_END_TAG_OPEN;
                   break;
               }
               case CODE_POINTS.EXCLAMATION_MARK: {
                   this.state = State$1.SCRIPT_DATA_ESCAPE_START;
                   this._emitChars('<!');
                   break;
               }
               default: {
                   this._emitChars('<');
                   this.state = State$1.SCRIPT_DATA;
                   this._stateScriptData(cp);
               }
           }
       }
       // Script data end tag open state
       //------------------------------------------------------------------
       _stateScriptDataEndTagOpen(cp) {
           if (isAsciiLetter(cp)) {
               this.state = State$1.SCRIPT_DATA_END_TAG_NAME;
               this._stateScriptDataEndTagName(cp);
           }
           else {
               this._emitChars('</');
               this.state = State$1.SCRIPT_DATA;
               this._stateScriptData(cp);
           }
       }
       // Script data end tag name state
       //------------------------------------------------------------------
       _stateScriptDataEndTagName(cp) {
           if (this.handleSpecialEndTag(cp)) {
               this._emitChars('</');
               this.state = State$1.SCRIPT_DATA;
               this._stateScriptData(cp);
           }
       }
       // Script data escape start state
       //------------------------------------------------------------------
       _stateScriptDataEscapeStart(cp) {
           if (cp === CODE_POINTS.HYPHEN_MINUS) {
               this.state = State$1.SCRIPT_DATA_ESCAPE_START_DASH;
               this._emitChars('-');
           }
           else {
               this.state = State$1.SCRIPT_DATA;
               this._stateScriptData(cp);
           }
       }
       // Script data escape start dash state
       //------------------------------------------------------------------
       _stateScriptDataEscapeStartDash(cp) {
           if (cp === CODE_POINTS.HYPHEN_MINUS) {
               this.state = State$1.SCRIPT_DATA_ESCAPED_DASH_DASH;
               this._emitChars('-');
           }
           else {
               this.state = State$1.SCRIPT_DATA;
               this._stateScriptData(cp);
           }
       }
       // Script data escaped state
       //------------------------------------------------------------------
       _stateScriptDataEscaped(cp) {
           switch (cp) {
               case CODE_POINTS.HYPHEN_MINUS: {
                   this.state = State$1.SCRIPT_DATA_ESCAPED_DASH;
                   this._emitChars('-');
                   break;
               }
               case CODE_POINTS.LESS_THAN_SIGN: {
                   this.state = State$1.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;
                   break;
               }
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   this._emitChars(REPLACEMENT_CHARACTER);
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInScriptHtmlCommentLikeText);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this._emitCodePoint(cp);
               }
           }
       }
       // Script data escaped dash state
       //------------------------------------------------------------------
       _stateScriptDataEscapedDash(cp) {
           switch (cp) {
               case CODE_POINTS.HYPHEN_MINUS: {
                   this.state = State$1.SCRIPT_DATA_ESCAPED_DASH_DASH;
                   this._emitChars('-');
                   break;
               }
               case CODE_POINTS.LESS_THAN_SIGN: {
                   this.state = State$1.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;
                   break;
               }
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   this.state = State$1.SCRIPT_DATA_ESCAPED;
                   this._emitChars(REPLACEMENT_CHARACTER);
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInScriptHtmlCommentLikeText);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this.state = State$1.SCRIPT_DATA_ESCAPED;
                   this._emitCodePoint(cp);
               }
           }
       }
       // Script data escaped dash dash state
       //------------------------------------------------------------------
       _stateScriptDataEscapedDashDash(cp) {
           switch (cp) {
               case CODE_POINTS.HYPHEN_MINUS: {
                   this._emitChars('-');
                   break;
               }
               case CODE_POINTS.LESS_THAN_SIGN: {
                   this.state = State$1.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this.state = State$1.SCRIPT_DATA;
                   this._emitChars('>');
                   break;
               }
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   this.state = State$1.SCRIPT_DATA_ESCAPED;
                   this._emitChars(REPLACEMENT_CHARACTER);
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInScriptHtmlCommentLikeText);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this.state = State$1.SCRIPT_DATA_ESCAPED;
                   this._emitCodePoint(cp);
               }
           }
       }
       // Script data escaped less-than sign state
       //------------------------------------------------------------------
       _stateScriptDataEscapedLessThanSign(cp) {
           if (cp === CODE_POINTS.SOLIDUS) {
               this.state = State$1.SCRIPT_DATA_ESCAPED_END_TAG_OPEN;
           }
           else if (isAsciiLetter(cp)) {
               this._emitChars('<');
               this.state = State$1.SCRIPT_DATA_DOUBLE_ESCAPE_START;
               this._stateScriptDataDoubleEscapeStart(cp);
           }
           else {
               this._emitChars('<');
               this.state = State$1.SCRIPT_DATA_ESCAPED;
               this._stateScriptDataEscaped(cp);
           }
       }
       // Script data escaped end tag open state
       //------------------------------------------------------------------
       _stateScriptDataEscapedEndTagOpen(cp) {
           if (isAsciiLetter(cp)) {
               this.state = State$1.SCRIPT_DATA_ESCAPED_END_TAG_NAME;
               this._stateScriptDataEscapedEndTagName(cp);
           }
           else {
               this._emitChars('</');
               this.state = State$1.SCRIPT_DATA_ESCAPED;
               this._stateScriptDataEscaped(cp);
           }
       }
       // Script data escaped end tag name state
       //------------------------------------------------------------------
       _stateScriptDataEscapedEndTagName(cp) {
           if (this.handleSpecialEndTag(cp)) {
               this._emitChars('</');
               this.state = State$1.SCRIPT_DATA_ESCAPED;
               this._stateScriptDataEscaped(cp);
           }
       }
       // Script data double escape start state
       //------------------------------------------------------------------
       _stateScriptDataDoubleEscapeStart(cp) {
           if (this.preprocessor.startsWith(SEQUENCES.SCRIPT, false) &&
               isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek(SEQUENCES.SCRIPT.length))) {
               this._emitCodePoint(cp);
               for (let i = 0; i < SEQUENCES.SCRIPT.length; i++) {
                   this._emitCodePoint(this._consume());
               }
               this.state = State$1.SCRIPT_DATA_DOUBLE_ESCAPED;
           }
           else if (!this._ensureHibernation()) {
               this.state = State$1.SCRIPT_DATA_ESCAPED;
               this._stateScriptDataEscaped(cp);
           }
       }
       // Script data double escaped state
       //------------------------------------------------------------------
       _stateScriptDataDoubleEscaped(cp) {
           switch (cp) {
               case CODE_POINTS.HYPHEN_MINUS: {
                   this.state = State$1.SCRIPT_DATA_DOUBLE_ESCAPED_DASH;
                   this._emitChars('-');
                   break;
               }
               case CODE_POINTS.LESS_THAN_SIGN: {
                   this.state = State$1.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;
                   this._emitChars('<');
                   break;
               }
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   this._emitChars(REPLACEMENT_CHARACTER);
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInScriptHtmlCommentLikeText);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this._emitCodePoint(cp);
               }
           }
       }
       // Script data double escaped dash state
       //------------------------------------------------------------------
       _stateScriptDataDoubleEscapedDash(cp) {
           switch (cp) {
               case CODE_POINTS.HYPHEN_MINUS: {
                   this.state = State$1.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH;
                   this._emitChars('-');
                   break;
               }
               case CODE_POINTS.LESS_THAN_SIGN: {
                   this.state = State$1.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;
                   this._emitChars('<');
                   break;
               }
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   this.state = State$1.SCRIPT_DATA_DOUBLE_ESCAPED;
                   this._emitChars(REPLACEMENT_CHARACTER);
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInScriptHtmlCommentLikeText);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this.state = State$1.SCRIPT_DATA_DOUBLE_ESCAPED;
                   this._emitCodePoint(cp);
               }
           }
       }
       // Script data double escaped dash dash state
       //------------------------------------------------------------------
       _stateScriptDataDoubleEscapedDashDash(cp) {
           switch (cp) {
               case CODE_POINTS.HYPHEN_MINUS: {
                   this._emitChars('-');
                   break;
               }
               case CODE_POINTS.LESS_THAN_SIGN: {
                   this.state = State$1.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;
                   this._emitChars('<');
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this.state = State$1.SCRIPT_DATA;
                   this._emitChars('>');
                   break;
               }
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   this.state = State$1.SCRIPT_DATA_DOUBLE_ESCAPED;
                   this._emitChars(REPLACEMENT_CHARACTER);
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInScriptHtmlCommentLikeText);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this.state = State$1.SCRIPT_DATA_DOUBLE_ESCAPED;
                   this._emitCodePoint(cp);
               }
           }
       }
       // Script data double escaped less-than sign state
       //------------------------------------------------------------------
       _stateScriptDataDoubleEscapedLessThanSign(cp) {
           if (cp === CODE_POINTS.SOLIDUS) {
               this.state = State$1.SCRIPT_DATA_DOUBLE_ESCAPE_END;
               this._emitChars('/');
           }
           else {
               this.state = State$1.SCRIPT_DATA_DOUBLE_ESCAPED;
               this._stateScriptDataDoubleEscaped(cp);
           }
       }
       // Script data double escape end state
       //------------------------------------------------------------------
       _stateScriptDataDoubleEscapeEnd(cp) {
           if (this.preprocessor.startsWith(SEQUENCES.SCRIPT, false) &&
               isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek(SEQUENCES.SCRIPT.length))) {
               this._emitCodePoint(cp);
               for (let i = 0; i < SEQUENCES.SCRIPT.length; i++) {
                   this._emitCodePoint(this._consume());
               }
               this.state = State$1.SCRIPT_DATA_ESCAPED;
           }
           else if (!this._ensureHibernation()) {
               this.state = State$1.SCRIPT_DATA_DOUBLE_ESCAPED;
               this._stateScriptDataDoubleEscaped(cp);
           }
       }
       // Before attribute name state
       //------------------------------------------------------------------
       _stateBeforeAttributeName(cp) {
           switch (cp) {
               case CODE_POINTS.SPACE:
               case CODE_POINTS.LINE_FEED:
               case CODE_POINTS.TABULATION:
               case CODE_POINTS.FORM_FEED: {
                   // Ignore whitespace
                   break;
               }
               case CODE_POINTS.SOLIDUS:
               case CODE_POINTS.GREATER_THAN_SIGN:
               case CODE_POINTS.EOF: {
                   this.state = State$1.AFTER_ATTRIBUTE_NAME;
                   this._stateAfterAttributeName(cp);
                   break;
               }
               case CODE_POINTS.EQUALS_SIGN: {
                   this._err(ERR.unexpectedEqualsSignBeforeAttributeName);
                   this._createAttr('=');
                   this.state = State$1.ATTRIBUTE_NAME;
                   break;
               }
               default: {
                   this._createAttr('');
                   this.state = State$1.ATTRIBUTE_NAME;
                   this._stateAttributeName(cp);
               }
           }
       }
       // Attribute name state
       //------------------------------------------------------------------
       _stateAttributeName(cp) {
           switch (cp) {
               case CODE_POINTS.SPACE:
               case CODE_POINTS.LINE_FEED:
               case CODE_POINTS.TABULATION:
               case CODE_POINTS.FORM_FEED:
               case CODE_POINTS.SOLIDUS:
               case CODE_POINTS.GREATER_THAN_SIGN:
               case CODE_POINTS.EOF: {
                   this._leaveAttrName();
                   this.state = State$1.AFTER_ATTRIBUTE_NAME;
                   this._stateAfterAttributeName(cp);
                   break;
               }
               case CODE_POINTS.EQUALS_SIGN: {
                   this._leaveAttrName();
                   this.state = State$1.BEFORE_ATTRIBUTE_VALUE;
                   break;
               }
               case CODE_POINTS.QUOTATION_MARK:
               case CODE_POINTS.APOSTROPHE:
               case CODE_POINTS.LESS_THAN_SIGN: {
                   this._err(ERR.unexpectedCharacterInAttributeName);
                   this.currentAttr.name += String.fromCodePoint(cp);
                   break;
               }
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   this.currentAttr.name += REPLACEMENT_CHARACTER;
                   break;
               }
               default: {
                   this.currentAttr.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);
               }
           }
       }
       // After attribute name state
       //------------------------------------------------------------------
       _stateAfterAttributeName(cp) {
           switch (cp) {
               case CODE_POINTS.SPACE:
               case CODE_POINTS.LINE_FEED:
               case CODE_POINTS.TABULATION:
               case CODE_POINTS.FORM_FEED: {
                   // Ignore whitespace
                   break;
               }
               case CODE_POINTS.SOLIDUS: {
                   this.state = State$1.SELF_CLOSING_START_TAG;
                   break;
               }
               case CODE_POINTS.EQUALS_SIGN: {
                   this.state = State$1.BEFORE_ATTRIBUTE_VALUE;
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this.state = State$1.DATA;
                   this.emitCurrentTagToken();
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInTag);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this._createAttr('');
                   this.state = State$1.ATTRIBUTE_NAME;
                   this._stateAttributeName(cp);
               }
           }
       }
       // Before attribute value state
       //------------------------------------------------------------------
       _stateBeforeAttributeValue(cp) {
           switch (cp) {
               case CODE_POINTS.SPACE:
               case CODE_POINTS.LINE_FEED:
               case CODE_POINTS.TABULATION:
               case CODE_POINTS.FORM_FEED: {
                   // Ignore whitespace
                   break;
               }
               case CODE_POINTS.QUOTATION_MARK: {
                   this.state = State$1.ATTRIBUTE_VALUE_DOUBLE_QUOTED;
                   break;
               }
               case CODE_POINTS.APOSTROPHE: {
                   this.state = State$1.ATTRIBUTE_VALUE_SINGLE_QUOTED;
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this._err(ERR.missingAttributeValue);
                   this.state = State$1.DATA;
                   this.emitCurrentTagToken();
                   break;
               }
               default: {
                   this.state = State$1.ATTRIBUTE_VALUE_UNQUOTED;
                   this._stateAttributeValueUnquoted(cp);
               }
           }
       }
       // Attribute value (double-quoted) state
       //------------------------------------------------------------------
       _stateAttributeValueDoubleQuoted(cp) {
           switch (cp) {
               case CODE_POINTS.QUOTATION_MARK: {
                   this.state = State$1.AFTER_ATTRIBUTE_VALUE_QUOTED;
                   break;
               }
               case CODE_POINTS.AMPERSAND: {
                   this.returnState = State$1.ATTRIBUTE_VALUE_DOUBLE_QUOTED;
                   this.state = State$1.CHARACTER_REFERENCE;
                   break;
               }
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   this.currentAttr.value += REPLACEMENT_CHARACTER;
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInTag);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this.currentAttr.value += String.fromCodePoint(cp);
               }
           }
       }
       // Attribute value (single-quoted) state
       //------------------------------------------------------------------
       _stateAttributeValueSingleQuoted(cp) {
           switch (cp) {
               case CODE_POINTS.APOSTROPHE: {
                   this.state = State$1.AFTER_ATTRIBUTE_VALUE_QUOTED;
                   break;
               }
               case CODE_POINTS.AMPERSAND: {
                   this.returnState = State$1.ATTRIBUTE_VALUE_SINGLE_QUOTED;
                   this.state = State$1.CHARACTER_REFERENCE;
                   break;
               }
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   this.currentAttr.value += REPLACEMENT_CHARACTER;
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInTag);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this.currentAttr.value += String.fromCodePoint(cp);
               }
           }
       }
       // Attribute value (unquoted) state
       //------------------------------------------------------------------
       _stateAttributeValueUnquoted(cp) {
           switch (cp) {
               case CODE_POINTS.SPACE:
               case CODE_POINTS.LINE_FEED:
               case CODE_POINTS.TABULATION:
               case CODE_POINTS.FORM_FEED: {
                   this._leaveAttrValue();
                   this.state = State$1.BEFORE_ATTRIBUTE_NAME;
                   break;
               }
               case CODE_POINTS.AMPERSAND: {
                   this.returnState = State$1.ATTRIBUTE_VALUE_UNQUOTED;
                   this.state = State$1.CHARACTER_REFERENCE;
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this._leaveAttrValue();
                   this.state = State$1.DATA;
                   this.emitCurrentTagToken();
                   break;
               }
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   this.currentAttr.value += REPLACEMENT_CHARACTER;
                   break;
               }
               case CODE_POINTS.QUOTATION_MARK:
               case CODE_POINTS.APOSTROPHE:
               case CODE_POINTS.LESS_THAN_SIGN:
               case CODE_POINTS.EQUALS_SIGN:
               case CODE_POINTS.GRAVE_ACCENT: {
                   this._err(ERR.unexpectedCharacterInUnquotedAttributeValue);
                   this.currentAttr.value += String.fromCodePoint(cp);
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInTag);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this.currentAttr.value += String.fromCodePoint(cp);
               }
           }
       }
       // After attribute value (quoted) state
       //------------------------------------------------------------------
       _stateAfterAttributeValueQuoted(cp) {
           switch (cp) {
               case CODE_POINTS.SPACE:
               case CODE_POINTS.LINE_FEED:
               case CODE_POINTS.TABULATION:
               case CODE_POINTS.FORM_FEED: {
                   this._leaveAttrValue();
                   this.state = State$1.BEFORE_ATTRIBUTE_NAME;
                   break;
               }
               case CODE_POINTS.SOLIDUS: {
                   this._leaveAttrValue();
                   this.state = State$1.SELF_CLOSING_START_TAG;
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this._leaveAttrValue();
                   this.state = State$1.DATA;
                   this.emitCurrentTagToken();
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInTag);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this._err(ERR.missingWhitespaceBetweenAttributes);
                   this.state = State$1.BEFORE_ATTRIBUTE_NAME;
                   this._stateBeforeAttributeName(cp);
               }
           }
       }
       // Self-closing start tag state
       //------------------------------------------------------------------
       _stateSelfClosingStartTag(cp) {
           switch (cp) {
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   const token = this.currentToken;
                   token.selfClosing = true;
                   this.state = State$1.DATA;
                   this.emitCurrentTagToken();
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInTag);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this._err(ERR.unexpectedSolidusInTag);
                   this.state = State$1.BEFORE_ATTRIBUTE_NAME;
                   this._stateBeforeAttributeName(cp);
               }
           }
       }
       // Bogus comment state
       //------------------------------------------------------------------
       _stateBogusComment(cp) {
           const token = this.currentToken;
           switch (cp) {
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this.state = State$1.DATA;
                   this.emitCurrentComment(token);
                   break;
               }
               case CODE_POINTS.EOF: {
                   this.emitCurrentComment(token);
                   this._emitEOFToken();
                   break;
               }
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   token.data += REPLACEMENT_CHARACTER;
                   break;
               }
               default: {
                   token.data += String.fromCodePoint(cp);
               }
           }
       }
       // Markup declaration open state
       //------------------------------------------------------------------
       _stateMarkupDeclarationOpen(cp) {
           if (this._consumeSequenceIfMatch(SEQUENCES.DASH_DASH, true)) {
               this._createCommentToken(SEQUENCES.DASH_DASH.length + 1);
               this.state = State$1.COMMENT_START;
           }
           else if (this._consumeSequenceIfMatch(SEQUENCES.DOCTYPE, false)) {
               // NOTE: Doctypes tokens are created without fixed offsets. We keep track of the moment a doctype *might* start here.
               this.currentLocation = this.getCurrentLocation(SEQUENCES.DOCTYPE.length + 1);
               this.state = State$1.DOCTYPE;
           }
           else if (this._consumeSequenceIfMatch(SEQUENCES.CDATA_START, true)) {
               if (this.inForeignNode) {
                   this.state = State$1.CDATA_SECTION;
               }
               else {
                   this._err(ERR.cdataInHtmlContent);
                   this._createCommentToken(SEQUENCES.CDATA_START.length + 1);
                   this.currentToken.data = '[CDATA[';
                   this.state = State$1.BOGUS_COMMENT;
               }
           }
           //NOTE: Sequence lookups can be abrupted by hibernation. In that case, lookup
           //results are no longer valid and we will need to start over.
           else if (!this._ensureHibernation()) {
               this._err(ERR.incorrectlyOpenedComment);
               this._createCommentToken(2);
               this.state = State$1.BOGUS_COMMENT;
               this._stateBogusComment(cp);
           }
       }
       // Comment start state
       //------------------------------------------------------------------
       _stateCommentStart(cp) {
           switch (cp) {
               case CODE_POINTS.HYPHEN_MINUS: {
                   this.state = State$1.COMMENT_START_DASH;
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this._err(ERR.abruptClosingOfEmptyComment);
                   this.state = State$1.DATA;
                   const token = this.currentToken;
                   this.emitCurrentComment(token);
                   break;
               }
               default: {
                   this.state = State$1.COMMENT;
                   this._stateComment(cp);
               }
           }
       }
       // Comment start dash state
       //------------------------------------------------------------------
       _stateCommentStartDash(cp) {
           const token = this.currentToken;
           switch (cp) {
               case CODE_POINTS.HYPHEN_MINUS: {
                   this.state = State$1.COMMENT_END;
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this._err(ERR.abruptClosingOfEmptyComment);
                   this.state = State$1.DATA;
                   this.emitCurrentComment(token);
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInComment);
                   this.emitCurrentComment(token);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   token.data += '-';
                   this.state = State$1.COMMENT;
                   this._stateComment(cp);
               }
           }
       }
       // Comment state
       //------------------------------------------------------------------
       _stateComment(cp) {
           const token = this.currentToken;
           switch (cp) {
               case CODE_POINTS.HYPHEN_MINUS: {
                   this.state = State$1.COMMENT_END_DASH;
                   break;
               }
               case CODE_POINTS.LESS_THAN_SIGN: {
                   token.data += '<';
                   this.state = State$1.COMMENT_LESS_THAN_SIGN;
                   break;
               }
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   token.data += REPLACEMENT_CHARACTER;
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInComment);
                   this.emitCurrentComment(token);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   token.data += String.fromCodePoint(cp);
               }
           }
       }
       // Comment less-than sign state
       //------------------------------------------------------------------
       _stateCommentLessThanSign(cp) {
           const token = this.currentToken;
           switch (cp) {
               case CODE_POINTS.EXCLAMATION_MARK: {
                   token.data += '!';
                   this.state = State$1.COMMENT_LESS_THAN_SIGN_BANG;
                   break;
               }
               case CODE_POINTS.LESS_THAN_SIGN: {
                   token.data += '<';
                   break;
               }
               default: {
                   this.state = State$1.COMMENT;
                   this._stateComment(cp);
               }
           }
       }
       // Comment less-than sign bang state
       //------------------------------------------------------------------
       _stateCommentLessThanSignBang(cp) {
           if (cp === CODE_POINTS.HYPHEN_MINUS) {
               this.state = State$1.COMMENT_LESS_THAN_SIGN_BANG_DASH;
           }
           else {
               this.state = State$1.COMMENT;
               this._stateComment(cp);
           }
       }
       // Comment less-than sign bang dash state
       //------------------------------------------------------------------
       _stateCommentLessThanSignBangDash(cp) {
           if (cp === CODE_POINTS.HYPHEN_MINUS) {
               this.state = State$1.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH;
           }
           else {
               this.state = State$1.COMMENT_END_DASH;
               this._stateCommentEndDash(cp);
           }
       }
       // Comment less-than sign bang dash dash state
       //------------------------------------------------------------------
       _stateCommentLessThanSignBangDashDash(cp) {
           if (cp !== CODE_POINTS.GREATER_THAN_SIGN && cp !== CODE_POINTS.EOF) {
               this._err(ERR.nestedComment);
           }
           this.state = State$1.COMMENT_END;
           this._stateCommentEnd(cp);
       }
       // Comment end dash state
       //------------------------------------------------------------------
       _stateCommentEndDash(cp) {
           const token = this.currentToken;
           switch (cp) {
               case CODE_POINTS.HYPHEN_MINUS: {
                   this.state = State$1.COMMENT_END;
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInComment);
                   this.emitCurrentComment(token);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   token.data += '-';
                   this.state = State$1.COMMENT;
                   this._stateComment(cp);
               }
           }
       }
       // Comment end state
       //------------------------------------------------------------------
       _stateCommentEnd(cp) {
           const token = this.currentToken;
           switch (cp) {
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this.state = State$1.DATA;
                   this.emitCurrentComment(token);
                   break;
               }
               case CODE_POINTS.EXCLAMATION_MARK: {
                   this.state = State$1.COMMENT_END_BANG;
                   break;
               }
               case CODE_POINTS.HYPHEN_MINUS: {
                   token.data += '-';
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInComment);
                   this.emitCurrentComment(token);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   token.data += '--';
                   this.state = State$1.COMMENT;
                   this._stateComment(cp);
               }
           }
       }
       // Comment end bang state
       //------------------------------------------------------------------
       _stateCommentEndBang(cp) {
           const token = this.currentToken;
           switch (cp) {
               case CODE_POINTS.HYPHEN_MINUS: {
                   token.data += '--!';
                   this.state = State$1.COMMENT_END_DASH;
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this._err(ERR.incorrectlyClosedComment);
                   this.state = State$1.DATA;
                   this.emitCurrentComment(token);
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInComment);
                   this.emitCurrentComment(token);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   token.data += '--!';
                   this.state = State$1.COMMENT;
                   this._stateComment(cp);
               }
           }
       }
       // DOCTYPE state
       //------------------------------------------------------------------
       _stateDoctype(cp) {
           switch (cp) {
               case CODE_POINTS.SPACE:
               case CODE_POINTS.LINE_FEED:
               case CODE_POINTS.TABULATION:
               case CODE_POINTS.FORM_FEED: {
                   this.state = State$1.BEFORE_DOCTYPE_NAME;
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this.state = State$1.BEFORE_DOCTYPE_NAME;
                   this._stateBeforeDoctypeName(cp);
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInDoctype);
                   this._createDoctypeToken(null);
                   const token = this.currentToken;
                   token.forceQuirks = true;
                   this.emitCurrentDoctype(token);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this._err(ERR.missingWhitespaceBeforeDoctypeName);
                   this.state = State$1.BEFORE_DOCTYPE_NAME;
                   this._stateBeforeDoctypeName(cp);
               }
           }
       }
       // Before DOCTYPE name state
       //------------------------------------------------------------------
       _stateBeforeDoctypeName(cp) {
           if (isAsciiUpper(cp)) {
               this._createDoctypeToken(String.fromCharCode(toAsciiLower(cp)));
               this.state = State$1.DOCTYPE_NAME;
           }
           else
               switch (cp) {
                   case CODE_POINTS.SPACE:
                   case CODE_POINTS.LINE_FEED:
                   case CODE_POINTS.TABULATION:
                   case CODE_POINTS.FORM_FEED: {
                       // Ignore whitespace
                       break;
                   }
                   case CODE_POINTS.NULL: {
                       this._err(ERR.unexpectedNullCharacter);
                       this._createDoctypeToken(REPLACEMENT_CHARACTER);
                       this.state = State$1.DOCTYPE_NAME;
                       break;
                   }
                   case CODE_POINTS.GREATER_THAN_SIGN: {
                       this._err(ERR.missingDoctypeName);
                       this._createDoctypeToken(null);
                       const token = this.currentToken;
                       token.forceQuirks = true;
                       this.emitCurrentDoctype(token);
                       this.state = State$1.DATA;
                       break;
                   }
                   case CODE_POINTS.EOF: {
                       this._err(ERR.eofInDoctype);
                       this._createDoctypeToken(null);
                       const token = this.currentToken;
                       token.forceQuirks = true;
                       this.emitCurrentDoctype(token);
                       this._emitEOFToken();
                       break;
                   }
                   default: {
                       this._createDoctypeToken(String.fromCodePoint(cp));
                       this.state = State$1.DOCTYPE_NAME;
                   }
               }
       }
       // DOCTYPE name state
       //------------------------------------------------------------------
       _stateDoctypeName(cp) {
           const token = this.currentToken;
           switch (cp) {
               case CODE_POINTS.SPACE:
               case CODE_POINTS.LINE_FEED:
               case CODE_POINTS.TABULATION:
               case CODE_POINTS.FORM_FEED: {
                   this.state = State$1.AFTER_DOCTYPE_NAME;
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this.state = State$1.DATA;
                   this.emitCurrentDoctype(token);
                   break;
               }
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   token.name += REPLACEMENT_CHARACTER;
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInDoctype);
                   token.forceQuirks = true;
                   this.emitCurrentDoctype(token);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   token.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);
               }
           }
       }
       // After DOCTYPE name state
       //------------------------------------------------------------------
       _stateAfterDoctypeName(cp) {
           const token = this.currentToken;
           switch (cp) {
               case CODE_POINTS.SPACE:
               case CODE_POINTS.LINE_FEED:
               case CODE_POINTS.TABULATION:
               case CODE_POINTS.FORM_FEED: {
                   // Ignore whitespace
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this.state = State$1.DATA;
                   this.emitCurrentDoctype(token);
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInDoctype);
                   token.forceQuirks = true;
                   this.emitCurrentDoctype(token);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   if (this._consumeSequenceIfMatch(SEQUENCES.PUBLIC, false)) {
                       this.state = State$1.AFTER_DOCTYPE_PUBLIC_KEYWORD;
                   }
                   else if (this._consumeSequenceIfMatch(SEQUENCES.SYSTEM, false)) {
                       this.state = State$1.AFTER_DOCTYPE_SYSTEM_KEYWORD;
                   }
                   //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup
                   //results are no longer valid and we will need to start over.
                   else if (!this._ensureHibernation()) {
                       this._err(ERR.invalidCharacterSequenceAfterDoctypeName);
                       token.forceQuirks = true;
                       this.state = State$1.BOGUS_DOCTYPE;
                       this._stateBogusDoctype(cp);
                   }
               }
           }
       }
       // After DOCTYPE public keyword state
       //------------------------------------------------------------------
       _stateAfterDoctypePublicKeyword(cp) {
           const token = this.currentToken;
           switch (cp) {
               case CODE_POINTS.SPACE:
               case CODE_POINTS.LINE_FEED:
               case CODE_POINTS.TABULATION:
               case CODE_POINTS.FORM_FEED: {
                   this.state = State$1.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER;
                   break;
               }
               case CODE_POINTS.QUOTATION_MARK: {
                   this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);
                   token.publicId = '';
                   this.state = State$1.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;
                   break;
               }
               case CODE_POINTS.APOSTROPHE: {
                   this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);
                   token.publicId = '';
                   this.state = State$1.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this._err(ERR.missingDoctypePublicIdentifier);
                   token.forceQuirks = true;
                   this.state = State$1.DATA;
                   this.emitCurrentDoctype(token);
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInDoctype);
                   token.forceQuirks = true;
                   this.emitCurrentDoctype(token);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);
                   token.forceQuirks = true;
                   this.state = State$1.BOGUS_DOCTYPE;
                   this._stateBogusDoctype(cp);
               }
           }
       }
       // Before DOCTYPE public identifier state
       //------------------------------------------------------------------
       _stateBeforeDoctypePublicIdentifier(cp) {
           const token = this.currentToken;
           switch (cp) {
               case CODE_POINTS.SPACE:
               case CODE_POINTS.LINE_FEED:
               case CODE_POINTS.TABULATION:
               case CODE_POINTS.FORM_FEED: {
                   // Ignore whitespace
                   break;
               }
               case CODE_POINTS.QUOTATION_MARK: {
                   token.publicId = '';
                   this.state = State$1.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;
                   break;
               }
               case CODE_POINTS.APOSTROPHE: {
                   token.publicId = '';
                   this.state = State$1.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this._err(ERR.missingDoctypePublicIdentifier);
                   token.forceQuirks = true;
                   this.state = State$1.DATA;
                   this.emitCurrentDoctype(token);
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInDoctype);
                   token.forceQuirks = true;
                   this.emitCurrentDoctype(token);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);
                   token.forceQuirks = true;
                   this.state = State$1.BOGUS_DOCTYPE;
                   this._stateBogusDoctype(cp);
               }
           }
       }
       // DOCTYPE public identifier (double-quoted) state
       //------------------------------------------------------------------
       _stateDoctypePublicIdentifierDoubleQuoted(cp) {
           const token = this.currentToken;
           switch (cp) {
               case CODE_POINTS.QUOTATION_MARK: {
                   this.state = State$1.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;
                   break;
               }
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   token.publicId += REPLACEMENT_CHARACTER;
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this._err(ERR.abruptDoctypePublicIdentifier);
                   token.forceQuirks = true;
                   this.emitCurrentDoctype(token);
                   this.state = State$1.DATA;
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInDoctype);
                   token.forceQuirks = true;
                   this.emitCurrentDoctype(token);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   token.publicId += String.fromCodePoint(cp);
               }
           }
       }
       // DOCTYPE public identifier (single-quoted) state
       //------------------------------------------------------------------
       _stateDoctypePublicIdentifierSingleQuoted(cp) {
           const token = this.currentToken;
           switch (cp) {
               case CODE_POINTS.APOSTROPHE: {
                   this.state = State$1.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;
                   break;
               }
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   token.publicId += REPLACEMENT_CHARACTER;
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this._err(ERR.abruptDoctypePublicIdentifier);
                   token.forceQuirks = true;
                   this.emitCurrentDoctype(token);
                   this.state = State$1.DATA;
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInDoctype);
                   token.forceQuirks = true;
                   this.emitCurrentDoctype(token);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   token.publicId += String.fromCodePoint(cp);
               }
           }
       }
       // After DOCTYPE public identifier state
       //------------------------------------------------------------------
       _stateAfterDoctypePublicIdentifier(cp) {
           const token = this.currentToken;
           switch (cp) {
               case CODE_POINTS.SPACE:
               case CODE_POINTS.LINE_FEED:
               case CODE_POINTS.TABULATION:
               case CODE_POINTS.FORM_FEED: {
                   this.state = State$1.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS;
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this.state = State$1.DATA;
                   this.emitCurrentDoctype(token);
                   break;
               }
               case CODE_POINTS.QUOTATION_MARK: {
                   this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);
                   token.systemId = '';
                   this.state = State$1.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;
                   break;
               }
               case CODE_POINTS.APOSTROPHE: {
                   this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);
                   token.systemId = '';
                   this.state = State$1.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInDoctype);
                   token.forceQuirks = true;
                   this.emitCurrentDoctype(token);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
                   token.forceQuirks = true;
                   this.state = State$1.BOGUS_DOCTYPE;
                   this._stateBogusDoctype(cp);
               }
           }
       }
       // Between DOCTYPE public and system identifiers state
       //------------------------------------------------------------------
       _stateBetweenDoctypePublicAndSystemIdentifiers(cp) {
           const token = this.currentToken;
           switch (cp) {
               case CODE_POINTS.SPACE:
               case CODE_POINTS.LINE_FEED:
               case CODE_POINTS.TABULATION:
               case CODE_POINTS.FORM_FEED: {
                   // Ignore whitespace
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this.emitCurrentDoctype(token);
                   this.state = State$1.DATA;
                   break;
               }
               case CODE_POINTS.QUOTATION_MARK: {
                   token.systemId = '';
                   this.state = State$1.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;
                   break;
               }
               case CODE_POINTS.APOSTROPHE: {
                   token.systemId = '';
                   this.state = State$1.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInDoctype);
                   token.forceQuirks = true;
                   this.emitCurrentDoctype(token);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
                   token.forceQuirks = true;
                   this.state = State$1.BOGUS_DOCTYPE;
                   this._stateBogusDoctype(cp);
               }
           }
       }
       // After DOCTYPE system keyword state
       //------------------------------------------------------------------
       _stateAfterDoctypeSystemKeyword(cp) {
           const token = this.currentToken;
           switch (cp) {
               case CODE_POINTS.SPACE:
               case CODE_POINTS.LINE_FEED:
               case CODE_POINTS.TABULATION:
               case CODE_POINTS.FORM_FEED: {
                   this.state = State$1.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER;
                   break;
               }
               case CODE_POINTS.QUOTATION_MARK: {
                   this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);
                   token.systemId = '';
                   this.state = State$1.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;
                   break;
               }
               case CODE_POINTS.APOSTROPHE: {
                   this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);
                   token.systemId = '';
                   this.state = State$1.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this._err(ERR.missingDoctypeSystemIdentifier);
                   token.forceQuirks = true;
                   this.state = State$1.DATA;
                   this.emitCurrentDoctype(token);
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInDoctype);
                   token.forceQuirks = true;
                   this.emitCurrentDoctype(token);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
                   token.forceQuirks = true;
                   this.state = State$1.BOGUS_DOCTYPE;
                   this._stateBogusDoctype(cp);
               }
           }
       }
       // Before DOCTYPE system identifier state
       //------------------------------------------------------------------
       _stateBeforeDoctypeSystemIdentifier(cp) {
           const token = this.currentToken;
           switch (cp) {
               case CODE_POINTS.SPACE:
               case CODE_POINTS.LINE_FEED:
               case CODE_POINTS.TABULATION:
               case CODE_POINTS.FORM_FEED: {
                   // Ignore whitespace
                   break;
               }
               case CODE_POINTS.QUOTATION_MARK: {
                   token.systemId = '';
                   this.state = State$1.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;
                   break;
               }
               case CODE_POINTS.APOSTROPHE: {
                   token.systemId = '';
                   this.state = State$1.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this._err(ERR.missingDoctypeSystemIdentifier);
                   token.forceQuirks = true;
                   this.state = State$1.DATA;
                   this.emitCurrentDoctype(token);
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInDoctype);
                   token.forceQuirks = true;
                   this.emitCurrentDoctype(token);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
                   token.forceQuirks = true;
                   this.state = State$1.BOGUS_DOCTYPE;
                   this._stateBogusDoctype(cp);
               }
           }
       }
       // DOCTYPE system identifier (double-quoted) state
       //------------------------------------------------------------------
       _stateDoctypeSystemIdentifierDoubleQuoted(cp) {
           const token = this.currentToken;
           switch (cp) {
               case CODE_POINTS.QUOTATION_MARK: {
                   this.state = State$1.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;
                   break;
               }
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   token.systemId += REPLACEMENT_CHARACTER;
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this._err(ERR.abruptDoctypeSystemIdentifier);
                   token.forceQuirks = true;
                   this.emitCurrentDoctype(token);
                   this.state = State$1.DATA;
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInDoctype);
                   token.forceQuirks = true;
                   this.emitCurrentDoctype(token);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   token.systemId += String.fromCodePoint(cp);
               }
           }
       }
       // DOCTYPE system identifier (single-quoted) state
       //------------------------------------------------------------------
       _stateDoctypeSystemIdentifierSingleQuoted(cp) {
           const token = this.currentToken;
           switch (cp) {
               case CODE_POINTS.APOSTROPHE: {
                   this.state = State$1.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;
                   break;
               }
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   token.systemId += REPLACEMENT_CHARACTER;
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this._err(ERR.abruptDoctypeSystemIdentifier);
                   token.forceQuirks = true;
                   this.emitCurrentDoctype(token);
                   this.state = State$1.DATA;
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInDoctype);
                   token.forceQuirks = true;
                   this.emitCurrentDoctype(token);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   token.systemId += String.fromCodePoint(cp);
               }
           }
       }
       // After DOCTYPE system identifier state
       //------------------------------------------------------------------
       _stateAfterDoctypeSystemIdentifier(cp) {
           const token = this.currentToken;
           switch (cp) {
               case CODE_POINTS.SPACE:
               case CODE_POINTS.LINE_FEED:
               case CODE_POINTS.TABULATION:
               case CODE_POINTS.FORM_FEED: {
                   // Ignore whitespace
                   break;
               }
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this.emitCurrentDoctype(token);
                   this.state = State$1.DATA;
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInDoctype);
                   token.forceQuirks = true;
                   this.emitCurrentDoctype(token);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this._err(ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);
                   this.state = State$1.BOGUS_DOCTYPE;
                   this._stateBogusDoctype(cp);
               }
           }
       }
       // Bogus DOCTYPE state
       //------------------------------------------------------------------
       _stateBogusDoctype(cp) {
           const token = this.currentToken;
           switch (cp) {
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this.emitCurrentDoctype(token);
                   this.state = State$1.DATA;
                   break;
               }
               case CODE_POINTS.NULL: {
                   this._err(ERR.unexpectedNullCharacter);
                   break;
               }
               case CODE_POINTS.EOF: {
                   this.emitCurrentDoctype(token);
                   this._emitEOFToken();
                   break;
               }
               // Do nothing
           }
       }
       // CDATA section state
       //------------------------------------------------------------------
       _stateCdataSection(cp) {
           switch (cp) {
               case CODE_POINTS.RIGHT_SQUARE_BRACKET: {
                   this.state = State$1.CDATA_SECTION_BRACKET;
                   break;
               }
               case CODE_POINTS.EOF: {
                   this._err(ERR.eofInCdata);
                   this._emitEOFToken();
                   break;
               }
               default: {
                   this._emitCodePoint(cp);
               }
           }
       }
       // CDATA section bracket state
       //------------------------------------------------------------------
       _stateCdataSectionBracket(cp) {
           if (cp === CODE_POINTS.RIGHT_SQUARE_BRACKET) {
               this.state = State$1.CDATA_SECTION_END;
           }
           else {
               this._emitChars(']');
               this.state = State$1.CDATA_SECTION;
               this._stateCdataSection(cp);
           }
       }
       // CDATA section end state
       //------------------------------------------------------------------
       _stateCdataSectionEnd(cp) {
           switch (cp) {
               case CODE_POINTS.GREATER_THAN_SIGN: {
                   this.state = State$1.DATA;
                   break;
               }
               case CODE_POINTS.RIGHT_SQUARE_BRACKET: {
                   this._emitChars(']');
                   break;
               }
               default: {
                   this._emitChars(']]');
                   this.state = State$1.CDATA_SECTION;
                   this._stateCdataSection(cp);
               }
           }
       }
       // Character reference state
       //------------------------------------------------------------------
       _stateCharacterReference(cp) {
           if (cp === CODE_POINTS.NUMBER_SIGN) {
               this.state = State$1.NUMERIC_CHARACTER_REFERENCE;
           }
           else if (isAsciiAlphaNumeric(cp)) {
               this.state = State$1.NAMED_CHARACTER_REFERENCE;
               this._stateNamedCharacterReference(cp);
           }
           else {
               this._flushCodePointConsumedAsCharacterReference(CODE_POINTS.AMPERSAND);
               this._reconsumeInState(this.returnState, cp);
           }
       }
       // Named character reference state
       //------------------------------------------------------------------
       _stateNamedCharacterReference(cp) {
           const matchResult = this._matchNamedCharacterReference(cp);
           //NOTE: Matching can be abrupted by hibernation. In that case, match
           //results are no longer valid and we will need to start over.
           if (this._ensureHibernation()) ;
           else if (matchResult) {
               for (let i = 0; i < matchResult.length; i++) {
                   this._flushCodePointConsumedAsCharacterReference(matchResult[i]);
               }
               this.state = this.returnState;
           }
           else {
               this._flushCodePointConsumedAsCharacterReference(CODE_POINTS.AMPERSAND);
               this.state = State$1.AMBIGUOUS_AMPERSAND;
           }
       }
       // Ambiguos ampersand state
       //------------------------------------------------------------------
       _stateAmbiguousAmpersand(cp) {
           if (isAsciiAlphaNumeric(cp)) {
               this._flushCodePointConsumedAsCharacterReference(cp);
           }
           else {
               if (cp === CODE_POINTS.SEMICOLON) {
                   this._err(ERR.unknownNamedCharacterReference);
               }
               this._reconsumeInState(this.returnState, cp);
           }
       }
       // Numeric character reference state
       //------------------------------------------------------------------
       _stateNumericCharacterReference(cp) {
           this.charRefCode = 0;
           if (cp === CODE_POINTS.LATIN_SMALL_X || cp === CODE_POINTS.LATIN_CAPITAL_X) {
               this.state = State$1.HEXADEMICAL_CHARACTER_REFERENCE_START;
           }
           // Inlined decimal character reference start state
           else if (isAsciiDigit(cp)) {
               this.state = State$1.DECIMAL_CHARACTER_REFERENCE;
               this._stateDecimalCharacterReference(cp);
           }
           else {
               this._err(ERR.absenceOfDigitsInNumericCharacterReference);
               this._flushCodePointConsumedAsCharacterReference(CODE_POINTS.AMPERSAND);
               this._flushCodePointConsumedAsCharacterReference(CODE_POINTS.NUMBER_SIGN);
               this._reconsumeInState(this.returnState, cp);
           }
       }
       // Hexademical character reference start state
       //------------------------------------------------------------------
       _stateHexademicalCharacterReferenceStart(cp) {
           if (isAsciiHexDigit(cp)) {
               this.state = State$1.HEXADEMICAL_CHARACTER_REFERENCE;
               this._stateHexademicalCharacterReference(cp);
           }
           else {
               this._err(ERR.absenceOfDigitsInNumericCharacterReference);
               this._flushCodePointConsumedAsCharacterReference(CODE_POINTS.AMPERSAND);
               this._flushCodePointConsumedAsCharacterReference(CODE_POINTS.NUMBER_SIGN);
               this._unconsume(2);
               this.state = this.returnState;
           }
       }
       // Hexademical character reference state
       //------------------------------------------------------------------
       _stateHexademicalCharacterReference(cp) {
           if (isAsciiUpperHexDigit(cp)) {
               this.charRefCode = this.charRefCode * 16 + cp - 0x37;
           }
           else if (isAsciiLowerHexDigit(cp)) {
               this.charRefCode = this.charRefCode * 16 + cp - 0x57;
           }
           else if (isAsciiDigit(cp)) {
               this.charRefCode = this.charRefCode * 16 + cp - 0x30;
           }
           else if (cp === CODE_POINTS.SEMICOLON) {
               this.state = State$1.NUMERIC_CHARACTER_REFERENCE_END;
           }
           else {
               this._err(ERR.missingSemicolonAfterCharacterReference);
               this.state = State$1.NUMERIC_CHARACTER_REFERENCE_END;
               this._stateNumericCharacterReferenceEnd(cp);
           }
       }
       // Decimal character reference state
       //------------------------------------------------------------------
       _stateDecimalCharacterReference(cp) {
           if (isAsciiDigit(cp)) {
               this.charRefCode = this.charRefCode * 10 + cp - 0x30;
           }
           else if (cp === CODE_POINTS.SEMICOLON) {
               this.state = State$1.NUMERIC_CHARACTER_REFERENCE_END;
           }
           else {
               this._err(ERR.missingSemicolonAfterCharacterReference);
               this.state = State$1.NUMERIC_CHARACTER_REFERENCE_END;
               this._stateNumericCharacterReferenceEnd(cp);
           }
       }
       // Numeric character reference end state
       //------------------------------------------------------------------
       _stateNumericCharacterReferenceEnd(cp) {
           if (this.charRefCode === CODE_POINTS.NULL) {
               this._err(ERR.nullCharacterReference);
               this.charRefCode = CODE_POINTS.REPLACEMENT_CHARACTER;
           }
           else if (this.charRefCode > 1114111) {
               this._err(ERR.characterReferenceOutsideUnicodeRange);
               this.charRefCode = CODE_POINTS.REPLACEMENT_CHARACTER;
           }
           else if (isSurrogate(this.charRefCode)) {
               this._err(ERR.surrogateCharacterReference);
               this.charRefCode = CODE_POINTS.REPLACEMENT_CHARACTER;
           }
           else if (isUndefinedCodePoint(this.charRefCode)) {
               this._err(ERR.noncharacterCharacterReference);
           }
           else if (isControlCodePoint(this.charRefCode) || this.charRefCode === CODE_POINTS.CARRIAGE_RETURN) {
               this._err(ERR.controlCharacterReference);
               const replacement = C1_CONTROLS_REFERENCE_REPLACEMENTS.get(this.charRefCode);
               if (replacement !== undefined) {
                   this.charRefCode = replacement;
               }
           }
           this._flushCodePointConsumedAsCharacterReference(this.charRefCode);
           this._reconsumeInState(this.returnState, cp);
       }
   }

   //Element utils
   const IMPLICIT_END_TAG_REQUIRED = new Set([TAG_ID.DD, TAG_ID.DT, TAG_ID.LI, TAG_ID.OPTGROUP, TAG_ID.OPTION, TAG_ID.P, TAG_ID.RB, TAG_ID.RP, TAG_ID.RT, TAG_ID.RTC]);
   const IMPLICIT_END_TAG_REQUIRED_THOROUGHLY = new Set([
       ...IMPLICIT_END_TAG_REQUIRED,
       TAG_ID.CAPTION,
       TAG_ID.COLGROUP,
       TAG_ID.TBODY,
       TAG_ID.TD,
       TAG_ID.TFOOT,
       TAG_ID.TH,
       TAG_ID.THEAD,
       TAG_ID.TR,
   ]);
   const SCOPING_ELEMENT_NS = new Map([
       [TAG_ID.APPLET, NS.HTML],
       [TAG_ID.CAPTION, NS.HTML],
       [TAG_ID.HTML, NS.HTML],
       [TAG_ID.MARQUEE, NS.HTML],
       [TAG_ID.OBJECT, NS.HTML],
       [TAG_ID.TABLE, NS.HTML],
       [TAG_ID.TD, NS.HTML],
       [TAG_ID.TEMPLATE, NS.HTML],
       [TAG_ID.TH, NS.HTML],
       [TAG_ID.ANNOTATION_XML, NS.MATHML],
       [TAG_ID.MI, NS.MATHML],
       [TAG_ID.MN, NS.MATHML],
       [TAG_ID.MO, NS.MATHML],
       [TAG_ID.MS, NS.MATHML],
       [TAG_ID.MTEXT, NS.MATHML],
       [TAG_ID.DESC, NS.SVG],
       [TAG_ID.FOREIGN_OBJECT, NS.SVG],
       [TAG_ID.TITLE, NS.SVG],
   ]);
   const NAMED_HEADERS = [TAG_ID.H1, TAG_ID.H2, TAG_ID.H3, TAG_ID.H4, TAG_ID.H5, TAG_ID.H6];
   const TABLE_ROW_CONTEXT = [TAG_ID.TR, TAG_ID.TEMPLATE, TAG_ID.HTML];
   const TABLE_BODY_CONTEXT = [TAG_ID.TBODY, TAG_ID.TFOOT, TAG_ID.THEAD, TAG_ID.TEMPLATE, TAG_ID.HTML];
   const TABLE_CONTEXT = [TAG_ID.TABLE, TAG_ID.TEMPLATE, TAG_ID.HTML];
   const TABLE_CELLS = [TAG_ID.TD, TAG_ID.TH];
   //Stack of open elements
   class OpenElementStack {
       get currentTmplContentOrNode() {
           return this._isInTemplate() ? this.treeAdapter.getTemplateContent(this.current) : this.current;
       }
       constructor(document, treeAdapter, handler) {
           this.treeAdapter = treeAdapter;
           this.handler = handler;
           this.items = [];
           this.tagIDs = [];
           this.stackTop = -1;
           this.tmplCount = 0;
           this.currentTagId = TAG_ID.UNKNOWN;
           this.current = document;
       }
       //Index of element
       _indexOf(element) {
           return this.items.lastIndexOf(element, this.stackTop);
       }
       //Update current element
       _isInTemplate() {
           return this.currentTagId === TAG_ID.TEMPLATE && this.treeAdapter.getNamespaceURI(this.current) === NS.HTML;
       }
       _updateCurrentElement() {
           this.current = this.items[this.stackTop];
           this.currentTagId = this.tagIDs[this.stackTop];
       }
       //Mutations
       push(element, tagID) {
           this.stackTop++;
           this.items[this.stackTop] = element;
           this.current = element;
           this.tagIDs[this.stackTop] = tagID;
           this.currentTagId = tagID;
           if (this._isInTemplate()) {
               this.tmplCount++;
           }
           this.handler.onItemPush(element, tagID, true);
       }
       pop() {
           const popped = this.current;
           if (this.tmplCount > 0 && this._isInTemplate()) {
               this.tmplCount--;
           }
           this.stackTop--;
           this._updateCurrentElement();
           this.handler.onItemPop(popped, true);
       }
       replace(oldElement, newElement) {
           const idx = this._indexOf(oldElement);
           this.items[idx] = newElement;
           if (idx === this.stackTop) {
               this.current = newElement;
           }
       }
       insertAfter(referenceElement, newElement, newElementID) {
           const insertionIdx = this._indexOf(referenceElement) + 1;
           this.items.splice(insertionIdx, 0, newElement);
           this.tagIDs.splice(insertionIdx, 0, newElementID);
           this.stackTop++;
           if (insertionIdx === this.stackTop) {
               this._updateCurrentElement();
           }
           this.handler.onItemPush(this.current, this.currentTagId, insertionIdx === this.stackTop);
       }
       popUntilTagNamePopped(tagName) {
           let targetIdx = this.stackTop + 1;
           do {
               targetIdx = this.tagIDs.lastIndexOf(tagName, targetIdx - 1);
           } while (targetIdx > 0 && this.treeAdapter.getNamespaceURI(this.items[targetIdx]) !== NS.HTML);
           this.shortenToLength(targetIdx < 0 ? 0 : targetIdx);
       }
       shortenToLength(idx) {
           while (this.stackTop >= idx) {
               const popped = this.current;
               if (this.tmplCount > 0 && this._isInTemplate()) {
                   this.tmplCount -= 1;
               }
               this.stackTop--;
               this._updateCurrentElement();
               this.handler.onItemPop(popped, this.stackTop < idx);
           }
       }
       popUntilElementPopped(element) {
           const idx = this._indexOf(element);
           this.shortenToLength(idx < 0 ? 0 : idx);
       }
       popUntilPopped(tagNames, targetNS) {
           const idx = this._indexOfTagNames(tagNames, targetNS);
           this.shortenToLength(idx < 0 ? 0 : idx);
       }
       popUntilNumberedHeaderPopped() {
           this.popUntilPopped(NAMED_HEADERS, NS.HTML);
       }
       popUntilTableCellPopped() {
           this.popUntilPopped(TABLE_CELLS, NS.HTML);
       }
       popAllUpToHtmlElement() {
           //NOTE: here we assume that the root <html> element is always first in the open element stack, so
           //we perform this fast stack clean up.
           this.tmplCount = 0;
           this.shortenToLength(1);
       }
       _indexOfTagNames(tagNames, namespace) {
           for (let i = this.stackTop; i >= 0; i--) {
               if (tagNames.includes(this.tagIDs[i]) && this.treeAdapter.getNamespaceURI(this.items[i]) === namespace) {
                   return i;
               }
           }
           return -1;
       }
       clearBackTo(tagNames, targetNS) {
           const idx = this._indexOfTagNames(tagNames, targetNS);
           this.shortenToLength(idx + 1);
       }
       clearBackToTableContext() {
           this.clearBackTo(TABLE_CONTEXT, NS.HTML);
       }
       clearBackToTableBodyContext() {
           this.clearBackTo(TABLE_BODY_CONTEXT, NS.HTML);
       }
       clearBackToTableRowContext() {
           this.clearBackTo(TABLE_ROW_CONTEXT, NS.HTML);
       }
       remove(element) {
           const idx = this._indexOf(element);
           if (idx >= 0) {
               if (idx === this.stackTop) {
                   this.pop();
               }
               else {
                   this.items.splice(idx, 1);
                   this.tagIDs.splice(idx, 1);
                   this.stackTop--;
                   this._updateCurrentElement();
                   this.handler.onItemPop(element, false);
               }
           }
       }
       //Search
       tryPeekProperlyNestedBodyElement() {
           //Properly nested <body> element (should be second element in stack).
           return this.stackTop >= 1 && this.tagIDs[1] === TAG_ID.BODY ? this.items[1] : null;
       }
       contains(element) {
           return this._indexOf(element) > -1;
       }
       getCommonAncestor(element) {
           const elementIdx = this._indexOf(element) - 1;
           return elementIdx >= 0 ? this.items[elementIdx] : null;
       }
       isRootHtmlElementCurrent() {
           return this.stackTop === 0 && this.tagIDs[0] === TAG_ID.HTML;
       }
       //Element in scope
       hasInScope(tagName) {
           for (let i = this.stackTop; i >= 0; i--) {
               const tn = this.tagIDs[i];
               const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
               if (tn === tagName && ns === NS.HTML) {
                   return true;
               }
               if (SCOPING_ELEMENT_NS.get(tn) === ns) {
                   return false;
               }
           }
           return true;
       }
       hasNumberedHeaderInScope() {
           for (let i = this.stackTop; i >= 0; i--) {
               const tn = this.tagIDs[i];
               const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
               if (isNumberedHeader(tn) && ns === NS.HTML) {
                   return true;
               }
               if (SCOPING_ELEMENT_NS.get(tn) === ns) {
                   return false;
               }
           }
           return true;
       }
       hasInListItemScope(tagName) {
           for (let i = this.stackTop; i >= 0; i--) {
               const tn = this.tagIDs[i];
               const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
               if (tn === tagName && ns === NS.HTML) {
                   return true;
               }
               if (((tn === TAG_ID.UL || tn === TAG_ID.OL) && ns === NS.HTML) || SCOPING_ELEMENT_NS.get(tn) === ns) {
                   return false;
               }
           }
           return true;
       }
       hasInButtonScope(tagName) {
           for (let i = this.stackTop; i >= 0; i--) {
               const tn = this.tagIDs[i];
               const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
               if (tn === tagName && ns === NS.HTML) {
                   return true;
               }
               if ((tn === TAG_ID.BUTTON && ns === NS.HTML) || SCOPING_ELEMENT_NS.get(tn) === ns) {
                   return false;
               }
           }
           return true;
       }
       hasInTableScope(tagName) {
           for (let i = this.stackTop; i >= 0; i--) {
               const tn = this.tagIDs[i];
               const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
               if (ns !== NS.HTML) {
                   continue;
               }
               if (tn === tagName) {
                   return true;
               }
               if (tn === TAG_ID.TABLE || tn === TAG_ID.TEMPLATE || tn === TAG_ID.HTML) {
                   return false;
               }
           }
           return true;
       }
       hasTableBodyContextInTableScope() {
           for (let i = this.stackTop; i >= 0; i--) {
               const tn = this.tagIDs[i];
               const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
               if (ns !== NS.HTML) {
                   continue;
               }
               if (tn === TAG_ID.TBODY || tn === TAG_ID.THEAD || tn === TAG_ID.TFOOT) {
                   return true;
               }
               if (tn === TAG_ID.TABLE || tn === TAG_ID.HTML) {
                   return false;
               }
           }
           return true;
       }
       hasInSelectScope(tagName) {
           for (let i = this.stackTop; i >= 0; i--) {
               const tn = this.tagIDs[i];
               const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
               if (ns !== NS.HTML) {
                   continue;
               }
               if (tn === tagName) {
                   return true;
               }
               if (tn !== TAG_ID.OPTION && tn !== TAG_ID.OPTGROUP) {
                   return false;
               }
           }
           return true;
       }
       //Implied end tags
       generateImpliedEndTags() {
           while (IMPLICIT_END_TAG_REQUIRED.has(this.currentTagId)) {
               this.pop();
           }
       }
       generateImpliedEndTagsThoroughly() {
           while (IMPLICIT_END_TAG_REQUIRED_THOROUGHLY.has(this.currentTagId)) {
               this.pop();
           }
       }
       generateImpliedEndTagsWithExclusion(exclusionId) {
           while (this.currentTagId !== exclusionId && IMPLICIT_END_TAG_REQUIRED_THOROUGHLY.has(this.currentTagId)) {
               this.pop();
           }
       }
   }

   //Const
   const NOAH_ARK_CAPACITY = 3;
   var EntryType;
   (function (EntryType) {
       EntryType[EntryType["Marker"] = 0] = "Marker";
       EntryType[EntryType["Element"] = 1] = "Element";
   })(EntryType = EntryType || (EntryType = {}));
   const MARKER = { type: EntryType.Marker };
   //List of formatting elements
   class FormattingElementList {
       constructor(treeAdapter) {
           this.treeAdapter = treeAdapter;
           this.entries = [];
           this.bookmark = null;
       }
       //Noah Ark's condition
       //OPTIMIZATION: at first we try to find possible candidates for exclusion using
       //lightweight heuristics without thorough attributes check.
       _getNoahArkConditionCandidates(newElement, neAttrs) {
           const candidates = [];
           const neAttrsLength = neAttrs.length;
           const neTagName = this.treeAdapter.getTagName(newElement);
           const neNamespaceURI = this.treeAdapter.getNamespaceURI(newElement);
           for (let i = 0; i < this.entries.length; i++) {
               const entry = this.entries[i];
               if (entry.type === EntryType.Marker) {
                   break;
               }
               const { element } = entry;
               if (this.treeAdapter.getTagName(element) === neTagName &&
                   this.treeAdapter.getNamespaceURI(element) === neNamespaceURI) {
                   const elementAttrs = this.treeAdapter.getAttrList(element);
                   if (elementAttrs.length === neAttrsLength) {
                       candidates.push({ idx: i, attrs: elementAttrs });
                   }
               }
           }
           return candidates;
       }
       _ensureNoahArkCondition(newElement) {
           if (this.entries.length < NOAH_ARK_CAPACITY)
               return;
           const neAttrs = this.treeAdapter.getAttrList(newElement);
           const candidates = this._getNoahArkConditionCandidates(newElement, neAttrs);
           if (candidates.length < NOAH_ARK_CAPACITY)
               return;
           //NOTE: build attrs map for the new element, so we can perform fast lookups
           const neAttrsMap = new Map(neAttrs.map((neAttr) => [neAttr.name, neAttr.value]));
           let validCandidates = 0;
           //NOTE: remove bottommost candidates, until Noah's Ark condition will not be met
           for (let i = 0; i < candidates.length; i++) {
               const candidate = candidates[i];
               // We know that `candidate.attrs.length === neAttrs.length`
               if (candidate.attrs.every((cAttr) => neAttrsMap.get(cAttr.name) === cAttr.value)) {
                   validCandidates += 1;
                   if (validCandidates >= NOAH_ARK_CAPACITY) {
                       this.entries.splice(candidate.idx, 1);
                   }
               }
           }
       }
       //Mutations
       insertMarker() {
           this.entries.unshift(MARKER);
       }
       pushElement(element, token) {
           this._ensureNoahArkCondition(element);
           this.entries.unshift({
               type: EntryType.Element,
               element,
               token,
           });
       }
       insertElementAfterBookmark(element, token) {
           const bookmarkIdx = this.entries.indexOf(this.bookmark);
           this.entries.splice(bookmarkIdx, 0, {
               type: EntryType.Element,
               element,
               token,
           });
       }
       removeEntry(entry) {
           const entryIndex = this.entries.indexOf(entry);
           if (entryIndex >= 0) {
               this.entries.splice(entryIndex, 1);
           }
       }
       /**
        * Clears the list of formatting elements up to the last marker.
        *
        * @see https://html.spec.whatwg.org/multipage/parsing.html#clear-the-list-of-active-formatting-elements-up-to-the-last-marker
        */
       clearToLastMarker() {
           const markerIdx = this.entries.indexOf(MARKER);
           if (markerIdx >= 0) {
               this.entries.splice(0, markerIdx + 1);
           }
           else {
               this.entries.length = 0;
           }
       }
       //Search
       getElementEntryInScopeWithTagName(tagName) {
           const entry = this.entries.find((entry) => entry.type === EntryType.Marker || this.treeAdapter.getTagName(entry.element) === tagName);
           return entry && entry.type === EntryType.Element ? entry : null;
       }
       getElementEntry(element) {
           return this.entries.find((entry) => entry.type === EntryType.Element && entry.element === element);
       }
   }

   function createTextNode(value) {
       return {
           nodeName: '#text',
           value,
           parentNode: null,
       };
   }
   const defaultTreeAdapter = {
       //Node construction
       createDocument() {
           return {
               nodeName: '#document',
               mode: DOCUMENT_MODE.NO_QUIRKS,
               childNodes: [],
           };
       },
       createDocumentFragment() {
           return {
               nodeName: '#document-fragment',
               childNodes: [],
           };
       },
       createElement(tagName, namespaceURI, attrs) {
           return {
               nodeName: tagName,
               tagName,
               attrs,
               namespaceURI,
               childNodes: [],
               parentNode: null,
           };
       },
       createCommentNode(data) {
           return {
               nodeName: '#comment',
               data,
               parentNode: null,
           };
       },
       //Tree mutation
       appendChild(parentNode, newNode) {
           parentNode.childNodes.push(newNode);
           newNode.parentNode = parentNode;
       },
       insertBefore(parentNode, newNode, referenceNode) {
           const insertionIdx = parentNode.childNodes.indexOf(referenceNode);
           parentNode.childNodes.splice(insertionIdx, 0, newNode);
           newNode.parentNode = parentNode;
       },
       setTemplateContent(templateElement, contentElement) {
           templateElement.content = contentElement;
       },
       getTemplateContent(templateElement) {
           return templateElement.content;
       },
       setDocumentType(document, name, publicId, systemId) {
           const doctypeNode = document.childNodes.find((node) => node.nodeName === '#documentType');
           if (doctypeNode) {
               doctypeNode.name = name;
               doctypeNode.publicId = publicId;
               doctypeNode.systemId = systemId;
           }
           else {
               const node = {
                   nodeName: '#documentType',
                   name,
                   publicId,
                   systemId,
                   parentNode: null,
               };
               defaultTreeAdapter.appendChild(document, node);
           }
       },
       setDocumentMode(document, mode) {
           document.mode = mode;
       },
       getDocumentMode(document) {
           return document.mode;
       },
       detachNode(node) {
           if (node.parentNode) {
               const idx = node.parentNode.childNodes.indexOf(node);
               node.parentNode.childNodes.splice(idx, 1);
               node.parentNode = null;
           }
       },
       insertText(parentNode, text) {
           if (parentNode.childNodes.length > 0) {
               const prevNode = parentNode.childNodes[parentNode.childNodes.length - 1];
               if (defaultTreeAdapter.isTextNode(prevNode)) {
                   prevNode.value += text;
                   return;
               }
           }
           defaultTreeAdapter.appendChild(parentNode, createTextNode(text));
       },
       insertTextBefore(parentNode, text, referenceNode) {
           const prevNode = parentNode.childNodes[parentNode.childNodes.indexOf(referenceNode) - 1];
           if (prevNode && defaultTreeAdapter.isTextNode(prevNode)) {
               prevNode.value += text;
           }
           else {
               defaultTreeAdapter.insertBefore(parentNode, createTextNode(text), referenceNode);
           }
       },
       adoptAttributes(recipient, attrs) {
           const recipientAttrsMap = new Set(recipient.attrs.map((attr) => attr.name));
           for (let j = 0; j < attrs.length; j++) {
               if (!recipientAttrsMap.has(attrs[j].name)) {
                   recipient.attrs.push(attrs[j]);
               }
           }
       },
       //Tree traversing
       getFirstChild(node) {
           return node.childNodes[0];
       },
       getChildNodes(node) {
           return node.childNodes;
       },
       getParentNode(node) {
           return node.parentNode;
       },
       getAttrList(element) {
           return element.attrs;
       },
       //Node data
       getTagName(element) {
           return element.tagName;
       },
       getNamespaceURI(element) {
           return element.namespaceURI;
       },
       getTextNodeContent(textNode) {
           return textNode.value;
       },
       getCommentNodeContent(commentNode) {
           return commentNode.data;
       },
       getDocumentTypeNodeName(doctypeNode) {
           return doctypeNode.name;
       },
       getDocumentTypeNodePublicId(doctypeNode) {
           return doctypeNode.publicId;
       },
       getDocumentTypeNodeSystemId(doctypeNode) {
           return doctypeNode.systemId;
       },
       //Node types
       isTextNode(node) {
           return node.nodeName === '#text';
       },
       isCommentNode(node) {
           return node.nodeName === '#comment';
       },
       isDocumentTypeNode(node) {
           return node.nodeName === '#documentType';
       },
       isElementNode(node) {
           return Object.prototype.hasOwnProperty.call(node, 'tagName');
       },
       // Source code location
       setNodeSourceCodeLocation(node, location) {
           node.sourceCodeLocation = location;
       },
       getNodeSourceCodeLocation(node) {
           return node.sourceCodeLocation;
       },
       updateNodeSourceCodeLocation(node, endLocation) {
           node.sourceCodeLocation = { ...node.sourceCodeLocation, ...endLocation };
       },
   };

   //Const
   const VALID_DOCTYPE_NAME = 'html';
   const VALID_SYSTEM_ID = 'about:legacy-compat';
   const QUIRKS_MODE_SYSTEM_ID = 'http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd';
   const QUIRKS_MODE_PUBLIC_ID_PREFIXES = [
       '+//silmaril//dtd html pro v0r11 19970101//',
       '-//as//dtd html 3.0 aswedit + extensions//',
       '-//advasoft ltd//dtd html 3.0 aswedit + extensions//',
       '-//ietf//dtd html 2.0 level 1//',
       '-//ietf//dtd html 2.0 level 2//',
       '-//ietf//dtd html 2.0 strict level 1//',
       '-//ietf//dtd html 2.0 strict level 2//',
       '-//ietf//dtd html 2.0 strict//',
       '-//ietf//dtd html 2.0//',
       '-//ietf//dtd html 2.1e//',
       '-//ietf//dtd html 3.0//',
       '-//ietf//dtd html 3.2 final//',
       '-//ietf//dtd html 3.2//',
       '-//ietf//dtd html 3//',
       '-//ietf//dtd html level 0//',
       '-//ietf//dtd html level 1//',
       '-//ietf//dtd html level 2//',
       '-//ietf//dtd html level 3//',
       '-//ietf//dtd html strict level 0//',
       '-//ietf//dtd html strict level 1//',
       '-//ietf//dtd html strict level 2//',
       '-//ietf//dtd html strict level 3//',
       '-//ietf//dtd html strict//',
       '-//ietf//dtd html//',
       '-//metrius//dtd metrius presentational//',
       '-//microsoft//dtd internet explorer 2.0 html strict//',
       '-//microsoft//dtd internet explorer 2.0 html//',
       '-//microsoft//dtd internet explorer 2.0 tables//',
       '-//microsoft//dtd internet explorer 3.0 html strict//',
       '-//microsoft//dtd internet explorer 3.0 html//',
       '-//microsoft//dtd internet explorer 3.0 tables//',
       '-//netscape comm. corp.//dtd html//',
       '-//netscape comm. corp.//dtd strict html//',
       "-//o'reilly and associates//dtd html 2.0//",
       "-//o'reilly and associates//dtd html extended 1.0//",
       "-//o'reilly and associates//dtd html extended relaxed 1.0//",
       '-//sq//dtd html 2.0 hotmetal + extensions//',
       '-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//',
       '-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//',
       '-//spyglass//dtd html 2.0 extended//',
       '-//sun microsystems corp.//dtd hotjava html//',
       '-//sun microsystems corp.//dtd hotjava strict html//',
       '-//w3c//dtd html 3 1995-03-24//',
       '-//w3c//dtd html 3.2 draft//',
       '-//w3c//dtd html 3.2 final//',
       '-//w3c//dtd html 3.2//',
       '-//w3c//dtd html 3.2s draft//',
       '-//w3c//dtd html 4.0 frameset//',
       '-//w3c//dtd html 4.0 transitional//',
       '-//w3c//dtd html experimental 19960712//',
       '-//w3c//dtd html experimental 970421//',
       '-//w3c//dtd w3 html//',
       '-//w3o//dtd w3 html 3.0//',
       '-//webtechs//dtd mozilla html 2.0//',
       '-//webtechs//dtd mozilla html//',
   ];
   const QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES = [
       ...QUIRKS_MODE_PUBLIC_ID_PREFIXES,
       '-//w3c//dtd html 4.01 frameset//',
       '-//w3c//dtd html 4.01 transitional//',
   ];
   const QUIRKS_MODE_PUBLIC_IDS = new Set([
       '-//w3o//dtd w3 html strict 3.0//en//',
       '-/w3c/dtd html 4.0 transitional/en',
       'html',
   ]);
   const LIMITED_QUIRKS_PUBLIC_ID_PREFIXES = ['-//w3c//dtd xhtml 1.0 frameset//', '-//w3c//dtd xhtml 1.0 transitional//'];
   const LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES = [
       ...LIMITED_QUIRKS_PUBLIC_ID_PREFIXES,
       '-//w3c//dtd html 4.01 frameset//',
       '-//w3c//dtd html 4.01 transitional//',
   ];
   //Utils
   function hasPrefix(publicId, prefixes) {
       return prefixes.some((prefix) => publicId.startsWith(prefix));
   }
   //API
   function isConforming(token) {
       return (token.name === VALID_DOCTYPE_NAME &&
           token.publicId === null &&
           (token.systemId === null || token.systemId === VALID_SYSTEM_ID));
   }
   function getDocumentMode(token) {
       if (token.name !== VALID_DOCTYPE_NAME) {
           return DOCUMENT_MODE.QUIRKS;
       }
       const { systemId } = token;
       if (systemId && systemId.toLowerCase() === QUIRKS_MODE_SYSTEM_ID) {
           return DOCUMENT_MODE.QUIRKS;
       }
       let { publicId } = token;
       if (publicId !== null) {
           publicId = publicId.toLowerCase();
           if (QUIRKS_MODE_PUBLIC_IDS.has(publicId)) {
               return DOCUMENT_MODE.QUIRKS;
           }
           let prefixes = systemId === null ? QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES : QUIRKS_MODE_PUBLIC_ID_PREFIXES;
           if (hasPrefix(publicId, prefixes)) {
               return DOCUMENT_MODE.QUIRKS;
           }
           prefixes =
               systemId === null ? LIMITED_QUIRKS_PUBLIC_ID_PREFIXES : LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES;
           if (hasPrefix(publicId, prefixes)) {
               return DOCUMENT_MODE.LIMITED_QUIRKS;
           }
       }
       return DOCUMENT_MODE.NO_QUIRKS;
   }

   //MIME types
   const MIME_TYPES = {
       TEXT_HTML: 'text/html',
       APPLICATION_XML: 'application/xhtml+xml',
   };
   //Attributes
   const DEFINITION_URL_ATTR = 'definitionurl';
   const ADJUSTED_DEFINITION_URL_ATTR = 'definitionURL';
   const SVG_ATTRS_ADJUSTMENT_MAP = new Map([
       'attributeName',
       'attributeType',
       'baseFrequency',
       'baseProfile',
       'calcMode',
       'clipPathUnits',
       'diffuseConstant',
       'edgeMode',
       'filterUnits',
       'glyphRef',
       'gradientTransform',
       'gradientUnits',
       'kernelMatrix',
       'kernelUnitLength',
       'keyPoints',
       'keySplines',
       'keyTimes',
       'lengthAdjust',
       'limitingConeAngle',
       'markerHeight',
       'markerUnits',
       'markerWidth',
       'maskContentUnits',
       'maskUnits',
       'numOctaves',
       'pathLength',
       'patternContentUnits',
       'patternTransform',
       'patternUnits',
       'pointsAtX',
       'pointsAtY',
       'pointsAtZ',
       'preserveAlpha',
       'preserveAspectRatio',
       'primitiveUnits',
       'refX',
       'refY',
       'repeatCount',
       'repeatDur',
       'requiredExtensions',
       'requiredFeatures',
       'specularConstant',
       'specularExponent',
       'spreadMethod',
       'startOffset',
       'stdDeviation',
       'stitchTiles',
       'surfaceScale',
       'systemLanguage',
       'tableValues',
       'targetX',
       'targetY',
       'textLength',
       'viewBox',
       'viewTarget',
       'xChannelSelector',
       'yChannelSelector',
       'zoomAndPan',
   ].map((attr) => [attr.toLowerCase(), attr]));
   const XML_ATTRS_ADJUSTMENT_MAP = new Map([
       ['xlink:actuate', { prefix: 'xlink', name: 'actuate', namespace: NS.XLINK }],
       ['xlink:arcrole', { prefix: 'xlink', name: 'arcrole', namespace: NS.XLINK }],
       ['xlink:href', { prefix: 'xlink', name: 'href', namespace: NS.XLINK }],
       ['xlink:role', { prefix: 'xlink', name: 'role', namespace: NS.XLINK }],
       ['xlink:show', { prefix: 'xlink', name: 'show', namespace: NS.XLINK }],
       ['xlink:title', { prefix: 'xlink', name: 'title', namespace: NS.XLINK }],
       ['xlink:type', { prefix: 'xlink', name: 'type', namespace: NS.XLINK }],
       ['xml:base', { prefix: 'xml', name: 'base', namespace: NS.XML }],
       ['xml:lang', { prefix: 'xml', name: 'lang', namespace: NS.XML }],
       ['xml:space', { prefix: 'xml', name: 'space', namespace: NS.XML }],
       ['xmlns', { prefix: '', name: 'xmlns', namespace: NS.XMLNS }],
       ['xmlns:xlink', { prefix: 'xmlns', name: 'xlink', namespace: NS.XMLNS }],
   ]);
   //SVG tag names adjustment map
   const SVG_TAG_NAMES_ADJUSTMENT_MAP = new Map([
       'altGlyph',
       'altGlyphDef',
       'altGlyphItem',
       'animateColor',
       'animateMotion',
       'animateTransform',
       'clipPath',
       'feBlend',
       'feColorMatrix',
       'feComponentTransfer',
       'feComposite',
       'feConvolveMatrix',
       'feDiffuseLighting',
       'feDisplacementMap',
       'feDistantLight',
       'feFlood',
       'feFuncA',
       'feFuncB',
       'feFuncG',
       'feFuncR',
       'feGaussianBlur',
       'feImage',
       'feMerge',
       'feMergeNode',
       'feMorphology',
       'feOffset',
       'fePointLight',
       'feSpecularLighting',
       'feSpotLight',
       'feTile',
       'feTurbulence',
       'foreignObject',
       'glyphRef',
       'linearGradient',
       'radialGradient',
       'textPath',
   ].map((tn) => [tn.toLowerCase(), tn]));
   //Tags that causes exit from foreign content
   const EXITS_FOREIGN_CONTENT = new Set([
       TAG_ID.B,
       TAG_ID.BIG,
       TAG_ID.BLOCKQUOTE,
       TAG_ID.BODY,
       TAG_ID.BR,
       TAG_ID.CENTER,
       TAG_ID.CODE,
       TAG_ID.DD,
       TAG_ID.DIV,
       TAG_ID.DL,
       TAG_ID.DT,
       TAG_ID.EM,
       TAG_ID.EMBED,
       TAG_ID.H1,
       TAG_ID.H2,
       TAG_ID.H3,
       TAG_ID.H4,
       TAG_ID.H5,
       TAG_ID.H6,
       TAG_ID.HEAD,
       TAG_ID.HR,
       TAG_ID.I,
       TAG_ID.IMG,
       TAG_ID.LI,
       TAG_ID.LISTING,
       TAG_ID.MENU,
       TAG_ID.META,
       TAG_ID.NOBR,
       TAG_ID.OL,
       TAG_ID.P,
       TAG_ID.PRE,
       TAG_ID.RUBY,
       TAG_ID.S,
       TAG_ID.SMALL,
       TAG_ID.SPAN,
       TAG_ID.STRONG,
       TAG_ID.STRIKE,
       TAG_ID.SUB,
       TAG_ID.SUP,
       TAG_ID.TABLE,
       TAG_ID.TT,
       TAG_ID.U,
       TAG_ID.UL,
       TAG_ID.VAR,
   ]);
   //Check exit from foreign content
   function causesExit(startTagToken) {
       const tn = startTagToken.tagID;
       const isFontWithAttrs = tn === TAG_ID.FONT &&
           startTagToken.attrs.some(({ name }) => name === ATTRS.COLOR || name === ATTRS.SIZE || name === ATTRS.FACE);
       return isFontWithAttrs || EXITS_FOREIGN_CONTENT.has(tn);
   }
   //Token adjustments
   function adjustTokenMathMLAttrs(token) {
       for (let i = 0; i < token.attrs.length; i++) {
           if (token.attrs[i].name === DEFINITION_URL_ATTR) {
               token.attrs[i].name = ADJUSTED_DEFINITION_URL_ATTR;
               break;
           }
       }
   }
   function adjustTokenSVGAttrs(token) {
       for (let i = 0; i < token.attrs.length; i++) {
           const adjustedAttrName = SVG_ATTRS_ADJUSTMENT_MAP.get(token.attrs[i].name);
           if (adjustedAttrName != null) {
               token.attrs[i].name = adjustedAttrName;
           }
       }
   }
   function adjustTokenXMLAttrs(token) {
       for (let i = 0; i < token.attrs.length; i++) {
           const adjustedAttrEntry = XML_ATTRS_ADJUSTMENT_MAP.get(token.attrs[i].name);
           if (adjustedAttrEntry) {
               token.attrs[i].prefix = adjustedAttrEntry.prefix;
               token.attrs[i].name = adjustedAttrEntry.name;
               token.attrs[i].namespace = adjustedAttrEntry.namespace;
           }
       }
   }
   function adjustTokenSVGTagName(token) {
       const adjustedTagName = SVG_TAG_NAMES_ADJUSTMENT_MAP.get(token.tagName);
       if (adjustedTagName != null) {
           token.tagName = adjustedTagName;
           token.tagID = getTagID(token.tagName);
       }
   }
   //Integration points
   function isMathMLTextIntegrationPoint(tn, ns) {
       return ns === NS.MATHML && (tn === TAG_ID.MI || tn === TAG_ID.MO || tn === TAG_ID.MN || tn === TAG_ID.MS || tn === TAG_ID.MTEXT);
   }
   function isHtmlIntegrationPoint(tn, ns, attrs) {
       if (ns === NS.MATHML && tn === TAG_ID.ANNOTATION_XML) {
           for (let i = 0; i < attrs.length; i++) {
               if (attrs[i].name === ATTRS.ENCODING) {
                   const value = attrs[i].value.toLowerCase();
                   return value === MIME_TYPES.TEXT_HTML || value === MIME_TYPES.APPLICATION_XML;
               }
           }
       }
       return ns === NS.SVG && (tn === TAG_ID.FOREIGN_OBJECT || tn === TAG_ID.DESC || tn === TAG_ID.TITLE);
   }
   function isIntegrationPoint(tn, ns, attrs, foreignNS) {
       return (((!foreignNS || foreignNS === NS.HTML) && isHtmlIntegrationPoint(tn, ns, attrs)) ||
           ((!foreignNS || foreignNS === NS.MATHML) && isMathMLTextIntegrationPoint(tn, ns)));
   }

   //Misc constants
   const HIDDEN_INPUT_TYPE = 'hidden';
   //Adoption agency loops iteration count
   const AA_OUTER_LOOP_ITER = 8;
   const AA_INNER_LOOP_ITER = 3;
   //Insertion modes
   var InsertionMode;
   (function (InsertionMode) {
       InsertionMode[InsertionMode["INITIAL"] = 0] = "INITIAL";
       InsertionMode[InsertionMode["BEFORE_HTML"] = 1] = "BEFORE_HTML";
       InsertionMode[InsertionMode["BEFORE_HEAD"] = 2] = "BEFORE_HEAD";
       InsertionMode[InsertionMode["IN_HEAD"] = 3] = "IN_HEAD";
       InsertionMode[InsertionMode["IN_HEAD_NO_SCRIPT"] = 4] = "IN_HEAD_NO_SCRIPT";
       InsertionMode[InsertionMode["AFTER_HEAD"] = 5] = "AFTER_HEAD";
       InsertionMode[InsertionMode["IN_BODY"] = 6] = "IN_BODY";
       InsertionMode[InsertionMode["TEXT"] = 7] = "TEXT";
       InsertionMode[InsertionMode["IN_TABLE"] = 8] = "IN_TABLE";
       InsertionMode[InsertionMode["IN_TABLE_TEXT"] = 9] = "IN_TABLE_TEXT";
       InsertionMode[InsertionMode["IN_CAPTION"] = 10] = "IN_CAPTION";
       InsertionMode[InsertionMode["IN_COLUMN_GROUP"] = 11] = "IN_COLUMN_GROUP";
       InsertionMode[InsertionMode["IN_TABLE_BODY"] = 12] = "IN_TABLE_BODY";
       InsertionMode[InsertionMode["IN_ROW"] = 13] = "IN_ROW";
       InsertionMode[InsertionMode["IN_CELL"] = 14] = "IN_CELL";
       InsertionMode[InsertionMode["IN_SELECT"] = 15] = "IN_SELECT";
       InsertionMode[InsertionMode["IN_SELECT_IN_TABLE"] = 16] = "IN_SELECT_IN_TABLE";
       InsertionMode[InsertionMode["IN_TEMPLATE"] = 17] = "IN_TEMPLATE";
       InsertionMode[InsertionMode["AFTER_BODY"] = 18] = "AFTER_BODY";
       InsertionMode[InsertionMode["IN_FRAMESET"] = 19] = "IN_FRAMESET";
       InsertionMode[InsertionMode["AFTER_FRAMESET"] = 20] = "AFTER_FRAMESET";
       InsertionMode[InsertionMode["AFTER_AFTER_BODY"] = 21] = "AFTER_AFTER_BODY";
       InsertionMode[InsertionMode["AFTER_AFTER_FRAMESET"] = 22] = "AFTER_AFTER_FRAMESET";
   })(InsertionMode || (InsertionMode = {}));
   const BASE_LOC = {
       startLine: -1,
       startCol: -1,
       startOffset: -1,
       endLine: -1,
       endCol: -1,
       endOffset: -1,
   };
   const TABLE_STRUCTURE_TAGS = new Set([TAG_ID.TABLE, TAG_ID.TBODY, TAG_ID.TFOOT, TAG_ID.THEAD, TAG_ID.TR]);
   const defaultParserOptions = {
       scriptingEnabled: true,
       sourceCodeLocationInfo: false,
       treeAdapter: defaultTreeAdapter,
       onParseError: null,
   };
   //Parser
   class Parser {
       constructor(options, document, fragmentContext = null, scriptHandler = null) {
           this.fragmentContext = fragmentContext;
           this.scriptHandler = scriptHandler;
           this.currentToken = null;
           this.stopped = false;
           this.insertionMode = InsertionMode.INITIAL;
           this.originalInsertionMode = InsertionMode.INITIAL;
           this.headElement = null;
           this.formElement = null;
           /** Indicates that the current node is not an element in the HTML namespace */
           this.currentNotInHTML = false;
           /**
            * The template insertion mode stack is maintained from the left.
            * Ie. the topmost element will always have index 0.
            */
           this.tmplInsertionModeStack = [];
           this.pendingCharacterTokens = [];
           this.hasNonWhitespacePendingCharacterToken = false;
           this.framesetOk = true;
           this.skipNextNewLine = false;
           this.fosterParentingEnabled = false;
           this.options = {
               ...defaultParserOptions,
               ...options,
           };
           this.treeAdapter = this.options.treeAdapter;
           this.onParseError = this.options.onParseError;
           // Always enable location info if we report parse errors.
           if (this.onParseError) {
               this.options.sourceCodeLocationInfo = true;
           }
           this.document = document !== null && document !== void 0 ? document : this.treeAdapter.createDocument();
           this.tokenizer = new Tokenizer(this.options, this);
           this.activeFormattingElements = new FormattingElementList(this.treeAdapter);
           this.fragmentContextID = fragmentContext ? getTagID(this.treeAdapter.getTagName(fragmentContext)) : TAG_ID.UNKNOWN;
           this._setContextModes(fragmentContext !== null && fragmentContext !== void 0 ? fragmentContext : this.document, this.fragmentContextID);
           this.openElements = new OpenElementStack(this.document, this.treeAdapter, this);
       }
       // API
       static parse(html, options) {
           const parser = new this(options);
           parser.tokenizer.write(html, true);
           return parser.document;
       }
       static getFragmentParser(fragmentContext, options) {
           const opts = {
               ...defaultParserOptions,
               ...options,
           };
           //NOTE: use a <template> element as the fragment context if no context element was provided,
           //so we will parse in a "forgiving" manner
           fragmentContext !== null && fragmentContext !== void 0 ? fragmentContext : (fragmentContext = opts.treeAdapter.createElement(TAG_NAMES.TEMPLATE, NS.HTML, []));
           //NOTE: create a fake element which will be used as the `document` for fragment parsing.
           //This is important for jsdom, where a new `document` cannot be created. This led to
           //fragment parsing messing with the main `document`.
           const documentMock = opts.treeAdapter.createElement('documentmock', NS.HTML, []);
           const parser = new this(opts, documentMock, fragmentContext);
           if (parser.fragmentContextID === TAG_ID.TEMPLATE) {
               parser.tmplInsertionModeStack.unshift(InsertionMode.IN_TEMPLATE);
           }
           parser._initTokenizerForFragmentParsing();
           parser._insertFakeRootElement();
           parser._resetInsertionMode();
           parser._findFormInFragmentContext();
           return parser;
       }
       getFragment() {
           const rootElement = this.treeAdapter.getFirstChild(this.document);
           const fragment = this.treeAdapter.createDocumentFragment();
           this._adoptNodes(rootElement, fragment);
           return fragment;
       }
       //Errors
       _err(token, code, beforeToken) {
           var _a;
           if (!this.onParseError)
               return;
           const loc = (_a = token.location) !== null && _a !== void 0 ? _a : BASE_LOC;
           const err = {
               code,
               startLine: loc.startLine,
               startCol: loc.startCol,
               startOffset: loc.startOffset,
               endLine: beforeToken ? loc.startLine : loc.endLine,
               endCol: beforeToken ? loc.startCol : loc.endCol,
               endOffset: beforeToken ? loc.startOffset : loc.endOffset,
           };
           this.onParseError(err);
       }
       //Stack events
       onItemPush(node, tid, isTop) {
           var _a, _b;
           (_b = (_a = this.treeAdapter).onItemPush) === null || _b === void 0 ? void 0 : _b.call(_a, node);
           if (isTop && this.openElements.stackTop > 0)
               this._setContextModes(node, tid);
       }
       onItemPop(node, isTop) {
           var _a, _b;
           if (this.options.sourceCodeLocationInfo) {
               this._setEndLocation(node, this.currentToken);
           }
           (_b = (_a = this.treeAdapter).onItemPop) === null || _b === void 0 ? void 0 : _b.call(_a, node, this.openElements.current);
           if (isTop) {
               let current;
               let currentTagId;
               if (this.openElements.stackTop === 0 && this.fragmentContext) {
                   current = this.fragmentContext;
                   currentTagId = this.fragmentContextID;
               }
               else {
                   ({ current, currentTagId } = this.openElements);
               }
               this._setContextModes(current, currentTagId);
           }
       }
       _setContextModes(current, tid) {
           const isHTML = current === this.document || this.treeAdapter.getNamespaceURI(current) === NS.HTML;
           this.currentNotInHTML = !isHTML;
           this.tokenizer.inForeignNode = !isHTML && !this._isIntegrationPoint(tid, current);
       }
       _switchToTextParsing(currentToken, nextTokenizerState) {
           this._insertElement(currentToken, NS.HTML);
           this.tokenizer.state = nextTokenizerState;
           this.originalInsertionMode = this.insertionMode;
           this.insertionMode = InsertionMode.TEXT;
       }
       switchToPlaintextParsing() {
           this.insertionMode = InsertionMode.TEXT;
           this.originalInsertionMode = InsertionMode.IN_BODY;
           this.tokenizer.state = TokenizerMode.PLAINTEXT;
       }
       //Fragment parsing
       _getAdjustedCurrentElement() {
           return this.openElements.stackTop === 0 && this.fragmentContext
               ? this.fragmentContext
               : this.openElements.current;
       }
       _findFormInFragmentContext() {
           let node = this.fragmentContext;
           while (node) {
               if (this.treeAdapter.getTagName(node) === TAG_NAMES.FORM) {
                   this.formElement = node;
                   break;
               }
               node = this.treeAdapter.getParentNode(node);
           }
       }
       _initTokenizerForFragmentParsing() {
           if (!this.fragmentContext || this.treeAdapter.getNamespaceURI(this.fragmentContext) !== NS.HTML) {
               return;
           }
           switch (this.fragmentContextID) {
               case TAG_ID.TITLE:
               case TAG_ID.TEXTAREA: {
                   this.tokenizer.state = TokenizerMode.RCDATA;
                   break;
               }
               case TAG_ID.STYLE:
               case TAG_ID.XMP:
               case TAG_ID.IFRAME:
               case TAG_ID.NOEMBED:
               case TAG_ID.NOFRAMES:
               case TAG_ID.NOSCRIPT: {
                   this.tokenizer.state = TokenizerMode.RAWTEXT;
                   break;
               }
               case TAG_ID.SCRIPT: {
                   this.tokenizer.state = TokenizerMode.SCRIPT_DATA;
                   break;
               }
               case TAG_ID.PLAINTEXT: {
                   this.tokenizer.state = TokenizerMode.PLAINTEXT;
                   break;
               }
               // Do nothing
           }
       }
       //Tree mutation
       _setDocumentType(token) {
           const name = token.name || '';
           const publicId = token.publicId || '';
           const systemId = token.systemId || '';
           this.treeAdapter.setDocumentType(this.document, name, publicId, systemId);
           if (token.location) {
               const documentChildren = this.treeAdapter.getChildNodes(this.document);
               const docTypeNode = documentChildren.find((node) => this.treeAdapter.isDocumentTypeNode(node));
               if (docTypeNode) {
                   this.treeAdapter.setNodeSourceCodeLocation(docTypeNode, token.location);
               }
           }
       }
       _attachElementToTree(element, location) {
           if (this.options.sourceCodeLocationInfo) {
               const loc = location && {
                   ...location,
                   startTag: location,
               };
               this.treeAdapter.setNodeSourceCodeLocation(element, loc);
           }
           if (this._shouldFosterParentOnInsertion()) {
               this._fosterParentElement(element);
           }
           else {
               const parent = this.openElements.currentTmplContentOrNode;
               this.treeAdapter.appendChild(parent, element);
           }
       }
       _appendElement(token, namespaceURI) {
           const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);
           this._attachElementToTree(element, token.location);
       }
       _insertElement(token, namespaceURI) {
           const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);
           this._attachElementToTree(element, token.location);
           this.openElements.push(element, token.tagID);
       }
       _insertFakeElement(tagName, tagID) {
           const element = this.treeAdapter.createElement(tagName, NS.HTML, []);
           this._attachElementToTree(element, null);
           this.openElements.push(element, tagID);
       }
       _insertTemplate(token) {
           const tmpl = this.treeAdapter.createElement(token.tagName, NS.HTML, token.attrs);
           const content = this.treeAdapter.createDocumentFragment();
           this.treeAdapter.setTemplateContent(tmpl, content);
           this._attachElementToTree(tmpl, token.location);
           this.openElements.push(tmpl, token.tagID);
           if (this.options.sourceCodeLocationInfo)
               this.treeAdapter.setNodeSourceCodeLocation(content, null);
       }
       _insertFakeRootElement() {
           const element = this.treeAdapter.createElement(TAG_NAMES.HTML, NS.HTML, []);
           if (this.options.sourceCodeLocationInfo)
               this.treeAdapter.setNodeSourceCodeLocation(element, null);
           this.treeAdapter.appendChild(this.openElements.current, element);
           this.openElements.push(element, TAG_ID.HTML);
       }
       _appendCommentNode(token, parent) {
           const commentNode = this.treeAdapter.createCommentNode(token.data);
           this.treeAdapter.appendChild(parent, commentNode);
           if (this.options.sourceCodeLocationInfo) {
               this.treeAdapter.setNodeSourceCodeLocation(commentNode, token.location);
           }
       }
       _insertCharacters(token) {
           let parent;
           let beforeElement;
           if (this._shouldFosterParentOnInsertion()) {
               ({ parent, beforeElement } = this._findFosterParentingLocation());
               if (beforeElement) {
                   this.treeAdapter.insertTextBefore(parent, token.chars, beforeElement);
               }
               else {
                   this.treeAdapter.insertText(parent, token.chars);
               }
           }
           else {
               parent = this.openElements.currentTmplContentOrNode;
               this.treeAdapter.insertText(parent, token.chars);
           }
           if (!token.location)
               return;
           const siblings = this.treeAdapter.getChildNodes(parent);
           const textNodeIdx = beforeElement ? siblings.lastIndexOf(beforeElement) : siblings.length;
           const textNode = siblings[textNodeIdx - 1];
           //NOTE: if we have a location assigned by another token, then just update the end position
           const tnLoc = this.treeAdapter.getNodeSourceCodeLocation(textNode);
           if (tnLoc) {
               const { endLine, endCol, endOffset } = token.location;
               this.treeAdapter.updateNodeSourceCodeLocation(textNode, { endLine, endCol, endOffset });
           }
           else if (this.options.sourceCodeLocationInfo) {
               this.treeAdapter.setNodeSourceCodeLocation(textNode, token.location);
           }
       }
       _adoptNodes(donor, recipient) {
           for (let child = this.treeAdapter.getFirstChild(donor); child; child = this.treeAdapter.getFirstChild(donor)) {
               this.treeAdapter.detachNode(child);
               this.treeAdapter.appendChild(recipient, child);
           }
       }
       _setEndLocation(element, closingToken) {
           if (this.treeAdapter.getNodeSourceCodeLocation(element) && closingToken.location) {
               const ctLoc = closingToken.location;
               const tn = this.treeAdapter.getTagName(element);
               const endLoc = 
               // NOTE: For cases like <p> <p> </p> - First 'p' closes without a closing
               // tag and for cases like <td> <p> </td> - 'p' closes without a closing tag.
               closingToken.type === TokenType.END_TAG && tn === closingToken.tagName
                   ? {
                       endTag: { ...ctLoc },
                       endLine: ctLoc.endLine,
                       endCol: ctLoc.endCol,
                       endOffset: ctLoc.endOffset,
                   }
                   : {
                       endLine: ctLoc.startLine,
                       endCol: ctLoc.startCol,
                       endOffset: ctLoc.startOffset,
                   };
               this.treeAdapter.updateNodeSourceCodeLocation(element, endLoc);
           }
       }
       //Token processing
       shouldProcessStartTagTokenInForeignContent(token) {
           // Check that neither current === document, or ns === NS.HTML
           if (!this.currentNotInHTML)
               return false;
           let current;
           let currentTagId;
           if (this.openElements.stackTop === 0 && this.fragmentContext) {
               current = this.fragmentContext;
               currentTagId = this.fragmentContextID;
           }
           else {
               ({ current, currentTagId } = this.openElements);
           }
           if (token.tagID === TAG_ID.SVG &&
               this.treeAdapter.getTagName(current) === TAG_NAMES.ANNOTATION_XML &&
               this.treeAdapter.getNamespaceURI(current) === NS.MATHML) {
               return false;
           }
           return (
           // Check that `current` is not an integration point for HTML or MathML elements.
           this.tokenizer.inForeignNode ||
               // If it _is_ an integration point, then we might have to check that it is not an HTML
               // integration point.
               ((token.tagID === TAG_ID.MGLYPH || token.tagID === TAG_ID.MALIGNMARK) &&
                   !this._isIntegrationPoint(currentTagId, current, NS.HTML)));
       }
       _processToken(token) {
           switch (token.type) {
               case TokenType.CHARACTER: {
                   this.onCharacter(token);
                   break;
               }
               case TokenType.NULL_CHARACTER: {
                   this.onNullCharacter(token);
                   break;
               }
               case TokenType.COMMENT: {
                   this.onComment(token);
                   break;
               }
               case TokenType.DOCTYPE: {
                   this.onDoctype(token);
                   break;
               }
               case TokenType.START_TAG: {
                   this._processStartTag(token);
                   break;
               }
               case TokenType.END_TAG: {
                   this.onEndTag(token);
                   break;
               }
               case TokenType.EOF: {
                   this.onEof(token);
                   break;
               }
               case TokenType.WHITESPACE_CHARACTER: {
                   this.onWhitespaceCharacter(token);
                   break;
               }
           }
       }
       //Integration points
       _isIntegrationPoint(tid, element, foreignNS) {
           const ns = this.treeAdapter.getNamespaceURI(element);
           const attrs = this.treeAdapter.getAttrList(element);
           return isIntegrationPoint(tid, ns, attrs, foreignNS);
       }
       //Active formatting elements reconstruction
       _reconstructActiveFormattingElements() {
           const listLength = this.activeFormattingElements.entries.length;
           if (listLength) {
               const endIndex = this.activeFormattingElements.entries.findIndex((entry) => entry.type === EntryType.Marker || this.openElements.contains(entry.element));
               const unopenIdx = endIndex < 0 ? listLength - 1 : endIndex - 1;
               for (let i = unopenIdx; i >= 0; i--) {
                   const entry = this.activeFormattingElements.entries[i];
                   this._insertElement(entry.token, this.treeAdapter.getNamespaceURI(entry.element));
                   entry.element = this.openElements.current;
               }
           }
       }
       //Close elements
       _closeTableCell() {
           this.openElements.generateImpliedEndTags();
           this.openElements.popUntilTableCellPopped();
           this.activeFormattingElements.clearToLastMarker();
           this.insertionMode = InsertionMode.IN_ROW;
       }
       _closePElement() {
           this.openElements.generateImpliedEndTagsWithExclusion(TAG_ID.P);
           this.openElements.popUntilTagNamePopped(TAG_ID.P);
       }
       //Insertion modes
       _resetInsertionMode() {
           for (let i = this.openElements.stackTop; i >= 0; i--) {
               //Insertion mode reset map
               switch (i === 0 && this.fragmentContext ? this.fragmentContextID : this.openElements.tagIDs[i]) {
                   case TAG_ID.TR: {
                       this.insertionMode = InsertionMode.IN_ROW;
                       return;
                   }
                   case TAG_ID.TBODY:
                   case TAG_ID.THEAD:
                   case TAG_ID.TFOOT: {
                       this.insertionMode = InsertionMode.IN_TABLE_BODY;
                       return;
                   }
                   case TAG_ID.CAPTION: {
                       this.insertionMode = InsertionMode.IN_CAPTION;
                       return;
                   }
                   case TAG_ID.COLGROUP: {
                       this.insertionMode = InsertionMode.IN_COLUMN_GROUP;
                       return;
                   }
                   case TAG_ID.TABLE: {
                       this.insertionMode = InsertionMode.IN_TABLE;
                       return;
                   }
                   case TAG_ID.BODY: {
                       this.insertionMode = InsertionMode.IN_BODY;
                       return;
                   }
                   case TAG_ID.FRAMESET: {
                       this.insertionMode = InsertionMode.IN_FRAMESET;
                       return;
                   }
                   case TAG_ID.SELECT: {
                       this._resetInsertionModeForSelect(i);
                       return;
                   }
                   case TAG_ID.TEMPLATE: {
                       this.insertionMode = this.tmplInsertionModeStack[0];
                       return;
                   }
                   case TAG_ID.HTML: {
                       this.insertionMode = this.headElement ? InsertionMode.AFTER_HEAD : InsertionMode.BEFORE_HEAD;
                       return;
                   }
                   case TAG_ID.TD:
                   case TAG_ID.TH: {
                       if (i > 0) {
                           this.insertionMode = InsertionMode.IN_CELL;
                           return;
                       }
                       break;
                   }
                   case TAG_ID.HEAD: {
                       if (i > 0) {
                           this.insertionMode = InsertionMode.IN_HEAD;
                           return;
                       }
                       break;
                   }
               }
           }
           this.insertionMode = InsertionMode.IN_BODY;
       }
       _resetInsertionModeForSelect(selectIdx) {
           if (selectIdx > 0) {
               for (let i = selectIdx - 1; i > 0; i--) {
                   const tn = this.openElements.tagIDs[i];
                   if (tn === TAG_ID.TEMPLATE) {
                       break;
                   }
                   else if (tn === TAG_ID.TABLE) {
                       this.insertionMode = InsertionMode.IN_SELECT_IN_TABLE;
                       return;
                   }
               }
           }
           this.insertionMode = InsertionMode.IN_SELECT;
       }
       //Foster parenting
       _isElementCausesFosterParenting(tn) {
           return TABLE_STRUCTURE_TAGS.has(tn);
       }
       _shouldFosterParentOnInsertion() {
           return this.fosterParentingEnabled && this._isElementCausesFosterParenting(this.openElements.currentTagId);
       }
       _findFosterParentingLocation() {
           for (let i = this.openElements.stackTop; i >= 0; i--) {
               const openElement = this.openElements.items[i];
               switch (this.openElements.tagIDs[i]) {
                   case TAG_ID.TEMPLATE: {
                       if (this.treeAdapter.getNamespaceURI(openElement) === NS.HTML) {
                           return { parent: this.treeAdapter.getTemplateContent(openElement), beforeElement: null };
                       }
                       break;
                   }
                   case TAG_ID.TABLE: {
                       const parent = this.treeAdapter.getParentNode(openElement);
                       if (parent) {
                           return { parent, beforeElement: openElement };
                       }
                       return { parent: this.openElements.items[i - 1], beforeElement: null };
                   }
                   // Do nothing
               }
           }
           return { parent: this.openElements.items[0], beforeElement: null };
       }
       _fosterParentElement(element) {
           const location = this._findFosterParentingLocation();
           if (location.beforeElement) {
               this.treeAdapter.insertBefore(location.parent, element, location.beforeElement);
           }
           else {
               this.treeAdapter.appendChild(location.parent, element);
           }
       }
       //Special elements
       _isSpecialElement(element, id) {
           const ns = this.treeAdapter.getNamespaceURI(element);
           return SPECIAL_ELEMENTS[ns].has(id);
       }
       onCharacter(token) {
           this.skipNextNewLine = false;
           if (this.tokenizer.inForeignNode) {
               characterInForeignContent(this, token);
               return;
           }
           switch (this.insertionMode) {
               case InsertionMode.INITIAL: {
                   tokenInInitialMode(this, token);
                   break;
               }
               case InsertionMode.BEFORE_HTML: {
                   tokenBeforeHtml(this, token);
                   break;
               }
               case InsertionMode.BEFORE_HEAD: {
                   tokenBeforeHead(this, token);
                   break;
               }
               case InsertionMode.IN_HEAD: {
                   tokenInHead(this, token);
                   break;
               }
               case InsertionMode.IN_HEAD_NO_SCRIPT: {
                   tokenInHeadNoScript(this, token);
                   break;
               }
               case InsertionMode.AFTER_HEAD: {
                   tokenAfterHead(this, token);
                   break;
               }
               case InsertionMode.IN_BODY:
               case InsertionMode.IN_CAPTION:
               case InsertionMode.IN_CELL:
               case InsertionMode.IN_TEMPLATE: {
                   characterInBody(this, token);
                   break;
               }
               case InsertionMode.TEXT:
               case InsertionMode.IN_SELECT:
               case InsertionMode.IN_SELECT_IN_TABLE: {
                   this._insertCharacters(token);
                   break;
               }
               case InsertionMode.IN_TABLE:
               case InsertionMode.IN_TABLE_BODY:
               case InsertionMode.IN_ROW: {
                   characterInTable(this, token);
                   break;
               }
               case InsertionMode.IN_TABLE_TEXT: {
                   characterInTableText(this, token);
                   break;
               }
               case InsertionMode.IN_COLUMN_GROUP: {
                   tokenInColumnGroup(this, token);
                   break;
               }
               case InsertionMode.AFTER_BODY: {
                   tokenAfterBody(this, token);
                   break;
               }
               case InsertionMode.AFTER_AFTER_BODY: {
                   tokenAfterAfterBody(this, token);
                   break;
               }
               // Do nothing
           }
       }
       onNullCharacter(token) {
           this.skipNextNewLine = false;
           if (this.tokenizer.inForeignNode) {
               nullCharacterInForeignContent(this, token);
               return;
           }
           switch (this.insertionMode) {
               case InsertionMode.INITIAL: {
                   tokenInInitialMode(this, token);
                   break;
               }
               case InsertionMode.BEFORE_HTML: {
                   tokenBeforeHtml(this, token);
                   break;
               }
               case InsertionMode.BEFORE_HEAD: {
                   tokenBeforeHead(this, token);
                   break;
               }
               case InsertionMode.IN_HEAD: {
                   tokenInHead(this, token);
                   break;
               }
               case InsertionMode.IN_HEAD_NO_SCRIPT: {
                   tokenInHeadNoScript(this, token);
                   break;
               }
               case InsertionMode.AFTER_HEAD: {
                   tokenAfterHead(this, token);
                   break;
               }
               case InsertionMode.TEXT: {
                   this._insertCharacters(token);
                   break;
               }
               case InsertionMode.IN_TABLE:
               case InsertionMode.IN_TABLE_BODY:
               case InsertionMode.IN_ROW: {
                   characterInTable(this, token);
                   break;
               }
               case InsertionMode.IN_COLUMN_GROUP: {
                   tokenInColumnGroup(this, token);
                   break;
               }
               case InsertionMode.AFTER_BODY: {
                   tokenAfterBody(this, token);
                   break;
               }
               case InsertionMode.AFTER_AFTER_BODY: {
                   tokenAfterAfterBody(this, token);
                   break;
               }
               // Do nothing
           }
       }
       onComment(token) {
           this.skipNextNewLine = false;
           if (this.currentNotInHTML) {
               appendComment(this, token);
               return;
           }
           switch (this.insertionMode) {
               case InsertionMode.INITIAL:
               case InsertionMode.BEFORE_HTML:
               case InsertionMode.BEFORE_HEAD:
               case InsertionMode.IN_HEAD:
               case InsertionMode.IN_HEAD_NO_SCRIPT:
               case InsertionMode.AFTER_HEAD:
               case InsertionMode.IN_BODY:
               case InsertionMode.IN_TABLE:
               case InsertionMode.IN_CAPTION:
               case InsertionMode.IN_COLUMN_GROUP:
               case InsertionMode.IN_TABLE_BODY:
               case InsertionMode.IN_ROW:
               case InsertionMode.IN_CELL:
               case InsertionMode.IN_SELECT:
               case InsertionMode.IN_SELECT_IN_TABLE:
               case InsertionMode.IN_TEMPLATE:
               case InsertionMode.IN_FRAMESET:
               case InsertionMode.AFTER_FRAMESET: {
                   appendComment(this, token);
                   break;
               }
               case InsertionMode.IN_TABLE_TEXT: {
                   tokenInTableText(this, token);
                   break;
               }
               case InsertionMode.AFTER_BODY: {
                   appendCommentToRootHtmlElement(this, token);
                   break;
               }
               case InsertionMode.AFTER_AFTER_BODY:
               case InsertionMode.AFTER_AFTER_FRAMESET: {
                   appendCommentToDocument(this, token);
                   break;
               }
               // Do nothing
           }
       }
       onDoctype(token) {
           this.skipNextNewLine = false;
           switch (this.insertionMode) {
               case InsertionMode.INITIAL: {
                   doctypeInInitialMode(this, token);
                   break;
               }
               case InsertionMode.BEFORE_HEAD:
               case InsertionMode.IN_HEAD:
               case InsertionMode.IN_HEAD_NO_SCRIPT:
               case InsertionMode.AFTER_HEAD: {
                   this._err(token, ERR.misplacedDoctype);
                   break;
               }
               case InsertionMode.IN_TABLE_TEXT: {
                   tokenInTableText(this, token);
                   break;
               }
               // Do nothing
           }
       }
       onStartTag(token) {
           this.skipNextNewLine = false;
           this.currentToken = token;
           this._processStartTag(token);
           if (token.selfClosing && !token.ackSelfClosing) {
               this._err(token, ERR.nonVoidHtmlElementStartTagWithTrailingSolidus);
           }
       }
       /**
        * Processes a given start tag.
        *
        * `onStartTag` checks if a self-closing tag was recognized. When a token
        * is moved inbetween multiple insertion modes, this check for self-closing
        * could lead to false positives. To avoid this, `_processStartTag` is used
        * for nested calls.
        *
        * @param token The token to process.
        */
       _processStartTag(token) {
           if (this.shouldProcessStartTagTokenInForeignContent(token)) {
               startTagInForeignContent(this, token);
           }
           else {
               this._startTagOutsideForeignContent(token);
           }
       }
       _startTagOutsideForeignContent(token) {
           switch (this.insertionMode) {
               case InsertionMode.INITIAL: {
                   tokenInInitialMode(this, token);
                   break;
               }
               case InsertionMode.BEFORE_HTML: {
                   startTagBeforeHtml(this, token);
                   break;
               }
               case InsertionMode.BEFORE_HEAD: {
                   startTagBeforeHead(this, token);
                   break;
               }
               case InsertionMode.IN_HEAD: {
                   startTagInHead(this, token);
                   break;
               }
               case InsertionMode.IN_HEAD_NO_SCRIPT: {
                   startTagInHeadNoScript(this, token);
                   break;
               }
               case InsertionMode.AFTER_HEAD: {
                   startTagAfterHead(this, token);
                   break;
               }
               case InsertionMode.IN_BODY: {
                   startTagInBody(this, token);
                   break;
               }
               case InsertionMode.IN_TABLE: {
                   startTagInTable(this, token);
                   break;
               }
               case InsertionMode.IN_TABLE_TEXT: {
                   tokenInTableText(this, token);
                   break;
               }
               case InsertionMode.IN_CAPTION: {
                   startTagInCaption(this, token);
                   break;
               }
               case InsertionMode.IN_COLUMN_GROUP: {
                   startTagInColumnGroup(this, token);
                   break;
               }
               case InsertionMode.IN_TABLE_BODY: {
                   startTagInTableBody(this, token);
                   break;
               }
               case InsertionMode.IN_ROW: {
                   startTagInRow(this, token);
                   break;
               }
               case InsertionMode.IN_CELL: {
                   startTagInCell(this, token);
                   break;
               }
               case InsertionMode.IN_SELECT: {
                   startTagInSelect(this, token);
                   break;
               }
               case InsertionMode.IN_SELECT_IN_TABLE: {
                   startTagInSelectInTable(this, token);
                   break;
               }
               case InsertionMode.IN_TEMPLATE: {
                   startTagInTemplate(this, token);
                   break;
               }
               case InsertionMode.AFTER_BODY: {
                   startTagAfterBody(this, token);
                   break;
               }
               case InsertionMode.IN_FRAMESET: {
                   startTagInFrameset(this, token);
                   break;
               }
               case InsertionMode.AFTER_FRAMESET: {
                   startTagAfterFrameset(this, token);
                   break;
               }
               case InsertionMode.AFTER_AFTER_BODY: {
                   startTagAfterAfterBody(this, token);
                   break;
               }
               case InsertionMode.AFTER_AFTER_FRAMESET: {
                   startTagAfterAfterFrameset(this, token);
                   break;
               }
               // Do nothing
           }
       }
       onEndTag(token) {
           this.skipNextNewLine = false;
           this.currentToken = token;
           if (this.currentNotInHTML) {
               endTagInForeignContent(this, token);
           }
           else {
               this._endTagOutsideForeignContent(token);
           }
       }
       _endTagOutsideForeignContent(token) {
           switch (this.insertionMode) {
               case InsertionMode.INITIAL: {
                   tokenInInitialMode(this, token);
                   break;
               }
               case InsertionMode.BEFORE_HTML: {
                   endTagBeforeHtml(this, token);
                   break;
               }
               case InsertionMode.BEFORE_HEAD: {
                   endTagBeforeHead(this, token);
                   break;
               }
               case InsertionMode.IN_HEAD: {
                   endTagInHead(this, token);
                   break;
               }
               case InsertionMode.IN_HEAD_NO_SCRIPT: {
                   endTagInHeadNoScript(this, token);
                   break;
               }
               case InsertionMode.AFTER_HEAD: {
                   endTagAfterHead(this, token);
                   break;
               }
               case InsertionMode.IN_BODY: {
                   endTagInBody(this, token);
                   break;
               }
               case InsertionMode.TEXT: {
                   endTagInText(this, token);
                   break;
               }
               case InsertionMode.IN_TABLE: {
                   endTagInTable(this, token);
                   break;
               }
               case InsertionMode.IN_TABLE_TEXT: {
                   tokenInTableText(this, token);
                   break;
               }
               case InsertionMode.IN_CAPTION: {
                   endTagInCaption(this, token);
                   break;
               }
               case InsertionMode.IN_COLUMN_GROUP: {
                   endTagInColumnGroup(this, token);
                   break;
               }
               case InsertionMode.IN_TABLE_BODY: {
                   endTagInTableBody(this, token);
                   break;
               }
               case InsertionMode.IN_ROW: {
                   endTagInRow(this, token);
                   break;
               }
               case InsertionMode.IN_CELL: {
                   endTagInCell(this, token);
                   break;
               }
               case InsertionMode.IN_SELECT: {
                   endTagInSelect(this, token);
                   break;
               }
               case InsertionMode.IN_SELECT_IN_TABLE: {
                   endTagInSelectInTable(this, token);
                   break;
               }
               case InsertionMode.IN_TEMPLATE: {
                   endTagInTemplate(this, token);
                   break;
               }
               case InsertionMode.AFTER_BODY: {
                   endTagAfterBody(this, token);
                   break;
               }
               case InsertionMode.IN_FRAMESET: {
                   endTagInFrameset(this, token);
                   break;
               }
               case InsertionMode.AFTER_FRAMESET: {
                   endTagAfterFrameset(this, token);
                   break;
               }
               case InsertionMode.AFTER_AFTER_BODY: {
                   tokenAfterAfterBody(this, token);
                   break;
               }
               // Do nothing
           }
       }
       onEof(token) {
           switch (this.insertionMode) {
               case InsertionMode.INITIAL: {
                   tokenInInitialMode(this, token);
                   break;
               }
               case InsertionMode.BEFORE_HTML: {
                   tokenBeforeHtml(this, token);
                   break;
               }
               case InsertionMode.BEFORE_HEAD: {
                   tokenBeforeHead(this, token);
                   break;
               }
               case InsertionMode.IN_HEAD: {
                   tokenInHead(this, token);
                   break;
               }
               case InsertionMode.IN_HEAD_NO_SCRIPT: {
                   tokenInHeadNoScript(this, token);
                   break;
               }
               case InsertionMode.AFTER_HEAD: {
                   tokenAfterHead(this, token);
                   break;
               }
               case InsertionMode.IN_BODY:
               case InsertionMode.IN_TABLE:
               case InsertionMode.IN_CAPTION:
               case InsertionMode.IN_COLUMN_GROUP:
               case InsertionMode.IN_TABLE_BODY:
               case InsertionMode.IN_ROW:
               case InsertionMode.IN_CELL:
               case InsertionMode.IN_SELECT:
               case InsertionMode.IN_SELECT_IN_TABLE: {
                   eofInBody(this, token);
                   break;
               }
               case InsertionMode.TEXT: {
                   eofInText(this, token);
                   break;
               }
               case InsertionMode.IN_TABLE_TEXT: {
                   tokenInTableText(this, token);
                   break;
               }
               case InsertionMode.IN_TEMPLATE: {
                   eofInTemplate(this, token);
                   break;
               }
               case InsertionMode.AFTER_BODY:
               case InsertionMode.IN_FRAMESET:
               case InsertionMode.AFTER_FRAMESET:
               case InsertionMode.AFTER_AFTER_BODY:
               case InsertionMode.AFTER_AFTER_FRAMESET: {
                   stopParsing(this, token);
                   break;
               }
               // Do nothing
           }
       }
       onWhitespaceCharacter(token) {
           if (this.skipNextNewLine) {
               this.skipNextNewLine = false;
               if (token.chars.charCodeAt(0) === CODE_POINTS.LINE_FEED) {
                   if (token.chars.length === 1) {
                       return;
                   }
                   token.chars = token.chars.substr(1);
               }
           }
           if (this.tokenizer.inForeignNode) {
               this._insertCharacters(token);
               return;
           }
           switch (this.insertionMode) {
               case InsertionMode.IN_HEAD:
               case InsertionMode.IN_HEAD_NO_SCRIPT:
               case InsertionMode.AFTER_HEAD:
               case InsertionMode.TEXT:
               case InsertionMode.IN_COLUMN_GROUP:
               case InsertionMode.IN_SELECT:
               case InsertionMode.IN_SELECT_IN_TABLE:
               case InsertionMode.IN_FRAMESET:
               case InsertionMode.AFTER_FRAMESET: {
                   this._insertCharacters(token);
                   break;
               }
               case InsertionMode.IN_BODY:
               case InsertionMode.IN_CAPTION:
               case InsertionMode.IN_CELL:
               case InsertionMode.IN_TEMPLATE:
               case InsertionMode.AFTER_BODY:
               case InsertionMode.AFTER_AFTER_BODY:
               case InsertionMode.AFTER_AFTER_FRAMESET: {
                   whitespaceCharacterInBody(this, token);
                   break;
               }
               case InsertionMode.IN_TABLE:
               case InsertionMode.IN_TABLE_BODY:
               case InsertionMode.IN_ROW: {
                   characterInTable(this, token);
                   break;
               }
               case InsertionMode.IN_TABLE_TEXT: {
                   whitespaceCharacterInTableText(this, token);
                   break;
               }
               // Do nothing
           }
       }
   }
   //Adoption agency algorithm
   //(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#adoptionAgency)
   //------------------------------------------------------------------
   //Steps 5-8 of the algorithm
   function aaObtainFormattingElementEntry(p, token) {
       let formattingElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(token.tagName);
       if (formattingElementEntry) {
           if (!p.openElements.contains(formattingElementEntry.element)) {
               p.activeFormattingElements.removeEntry(formattingElementEntry);
               formattingElementEntry = null;
           }
           else if (!p.openElements.hasInScope(token.tagID)) {
               formattingElementEntry = null;
           }
       }
       else {
           genericEndTagInBody(p, token);
       }
       return formattingElementEntry;
   }
   //Steps 9 and 10 of the algorithm
   function aaObtainFurthestBlock(p, formattingElementEntry) {
       let furthestBlock = null;
       let idx = p.openElements.stackTop;
       for (; idx >= 0; idx--) {
           const element = p.openElements.items[idx];
           if (element === formattingElementEntry.element) {
               break;
           }
           if (p._isSpecialElement(element, p.openElements.tagIDs[idx])) {
               furthestBlock = element;
           }
       }
       if (!furthestBlock) {
           p.openElements.shortenToLength(idx < 0 ? 0 : idx);
           p.activeFormattingElements.removeEntry(formattingElementEntry);
       }
       return furthestBlock;
   }
   //Step 13 of the algorithm
   function aaInnerLoop(p, furthestBlock, formattingElement) {
       let lastElement = furthestBlock;
       let nextElement = p.openElements.getCommonAncestor(furthestBlock);
       for (let i = 0, element = nextElement; element !== formattingElement; i++, element = nextElement) {
           //NOTE: store the next element for the next loop iteration (it may be deleted from the stack by step 9.5)
           nextElement = p.openElements.getCommonAncestor(element);
           const elementEntry = p.activeFormattingElements.getElementEntry(element);
           const counterOverflow = elementEntry && i >= AA_INNER_LOOP_ITER;
           const shouldRemoveFromOpenElements = !elementEntry || counterOverflow;
           if (shouldRemoveFromOpenElements) {
               if (counterOverflow) {
                   p.activeFormattingElements.removeEntry(elementEntry);
               }
               p.openElements.remove(element);
           }
           else {
               element = aaRecreateElementFromEntry(p, elementEntry);
               if (lastElement === furthestBlock) {
                   p.activeFormattingElements.bookmark = elementEntry;
               }
               p.treeAdapter.detachNode(lastElement);
               p.treeAdapter.appendChild(element, lastElement);
               lastElement = element;
           }
       }
       return lastElement;
   }
   //Step 13.7 of the algorithm
   function aaRecreateElementFromEntry(p, elementEntry) {
       const ns = p.treeAdapter.getNamespaceURI(elementEntry.element);
       const newElement = p.treeAdapter.createElement(elementEntry.token.tagName, ns, elementEntry.token.attrs);
       p.openElements.replace(elementEntry.element, newElement);
       elementEntry.element = newElement;
       return newElement;
   }
   //Step 14 of the algorithm
   function aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement) {
       const tn = p.treeAdapter.getTagName(commonAncestor);
       const tid = getTagID(tn);
       if (p._isElementCausesFosterParenting(tid)) {
           p._fosterParentElement(lastElement);
       }
       else {
           const ns = p.treeAdapter.getNamespaceURI(commonAncestor);
           if (tid === TAG_ID.TEMPLATE && ns === NS.HTML) {
               commonAncestor = p.treeAdapter.getTemplateContent(commonAncestor);
           }
           p.treeAdapter.appendChild(commonAncestor, lastElement);
       }
   }
   //Steps 15-19 of the algorithm
   function aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry) {
       const ns = p.treeAdapter.getNamespaceURI(formattingElementEntry.element);
       const { token } = formattingElementEntry;
       const newElement = p.treeAdapter.createElement(token.tagName, ns, token.attrs);
       p._adoptNodes(furthestBlock, newElement);
       p.treeAdapter.appendChild(furthestBlock, newElement);
       p.activeFormattingElements.insertElementAfterBookmark(newElement, token);
       p.activeFormattingElements.removeEntry(formattingElementEntry);
       p.openElements.remove(formattingElementEntry.element);
       p.openElements.insertAfter(furthestBlock, newElement, token.tagID);
   }
   //Algorithm entry point
   function callAdoptionAgency(p, token) {
       for (let i = 0; i < AA_OUTER_LOOP_ITER; i++) {
           const formattingElementEntry = aaObtainFormattingElementEntry(p, token);
           if (!formattingElementEntry) {
               break;
           }
           const furthestBlock = aaObtainFurthestBlock(p, formattingElementEntry);
           if (!furthestBlock) {
               break;
           }
           p.activeFormattingElements.bookmark = formattingElementEntry;
           const lastElement = aaInnerLoop(p, furthestBlock, formattingElementEntry.element);
           const commonAncestor = p.openElements.getCommonAncestor(formattingElementEntry.element);
           p.treeAdapter.detachNode(lastElement);
           if (commonAncestor)
               aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement);
           aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry);
       }
   }
   //Generic token handlers
   //------------------------------------------------------------------
   function appendComment(p, token) {
       p._appendCommentNode(token, p.openElements.currentTmplContentOrNode);
   }
   function appendCommentToRootHtmlElement(p, token) {
       p._appendCommentNode(token, p.openElements.items[0]);
   }
   function appendCommentToDocument(p, token) {
       p._appendCommentNode(token, p.document);
   }
   function stopParsing(p, token) {
       p.stopped = true;
       // NOTE: Set end locations for elements that remain on the open element stack.
       if (token.location) {
           // NOTE: If we are not in a fragment, `html` and `body` will stay on the stack.
           // This is a problem, as we might overwrite their end position here.
           const target = p.fragmentContext ? 0 : 2;
           for (let i = p.openElements.stackTop; i >= target; i--) {
               p._setEndLocation(p.openElements.items[i], token);
           }
           // Handle `html` and `body`
           if (!p.fragmentContext && p.openElements.stackTop >= 0) {
               const htmlElement = p.openElements.items[0];
               const htmlLocation = p.treeAdapter.getNodeSourceCodeLocation(htmlElement);
               if (htmlLocation && !htmlLocation.endTag) {
                   p._setEndLocation(htmlElement, token);
                   if (p.openElements.stackTop >= 1) {
                       const bodyElement = p.openElements.items[1];
                       const bodyLocation = p.treeAdapter.getNodeSourceCodeLocation(bodyElement);
                       if (bodyLocation && !bodyLocation.endTag) {
                           p._setEndLocation(bodyElement, token);
                       }
                   }
               }
           }
       }
   }
   // The "initial" insertion mode
   //------------------------------------------------------------------
   function doctypeInInitialMode(p, token) {
       p._setDocumentType(token);
       const mode = token.forceQuirks ? DOCUMENT_MODE.QUIRKS : getDocumentMode(token);
       if (!isConforming(token)) {
           p._err(token, ERR.nonConformingDoctype);
       }
       p.treeAdapter.setDocumentMode(p.document, mode);
       p.insertionMode = InsertionMode.BEFORE_HTML;
   }
   function tokenInInitialMode(p, token) {
       p._err(token, ERR.missingDoctype, true);
       p.treeAdapter.setDocumentMode(p.document, DOCUMENT_MODE.QUIRKS);
       p.insertionMode = InsertionMode.BEFORE_HTML;
       p._processToken(token);
   }
   // The "before html" insertion mode
   //------------------------------------------------------------------
   function startTagBeforeHtml(p, token) {
       if (token.tagID === TAG_ID.HTML) {
           p._insertElement(token, NS.HTML);
           p.insertionMode = InsertionMode.BEFORE_HEAD;
       }
       else {
           tokenBeforeHtml(p, token);
       }
   }
   function endTagBeforeHtml(p, token) {
       const tn = token.tagID;
       if (tn === TAG_ID.HTML || tn === TAG_ID.HEAD || tn === TAG_ID.BODY || tn === TAG_ID.BR) {
           tokenBeforeHtml(p, token);
       }
   }
   function tokenBeforeHtml(p, token) {
       p._insertFakeRootElement();
       p.insertionMode = InsertionMode.BEFORE_HEAD;
       p._processToken(token);
   }
   // The "before head" insertion mode
   //------------------------------------------------------------------
   function startTagBeforeHead(p, token) {
       switch (token.tagID) {
           case TAG_ID.HTML: {
               startTagInBody(p, token);
               break;
           }
           case TAG_ID.HEAD: {
               p._insertElement(token, NS.HTML);
               p.headElement = p.openElements.current;
               p.insertionMode = InsertionMode.IN_HEAD;
               break;
           }
           default: {
               tokenBeforeHead(p, token);
           }
       }
   }
   function endTagBeforeHead(p, token) {
       const tn = token.tagID;
       if (tn === TAG_ID.HEAD || tn === TAG_ID.BODY || tn === TAG_ID.HTML || tn === TAG_ID.BR) {
           tokenBeforeHead(p, token);
       }
       else {
           p._err(token, ERR.endTagWithoutMatchingOpenElement);
       }
   }
   function tokenBeforeHead(p, token) {
       p._insertFakeElement(TAG_NAMES.HEAD, TAG_ID.HEAD);
       p.headElement = p.openElements.current;
       p.insertionMode = InsertionMode.IN_HEAD;
       p._processToken(token);
   }
   // The "in head" insertion mode
   //------------------------------------------------------------------
   function startTagInHead(p, token) {
       switch (token.tagID) {
           case TAG_ID.HTML: {
               startTagInBody(p, token);
               break;
           }
           case TAG_ID.BASE:
           case TAG_ID.BASEFONT:
           case TAG_ID.BGSOUND:
           case TAG_ID.LINK:
           case TAG_ID.META: {
               p._appendElement(token, NS.HTML);
               token.ackSelfClosing = true;
               break;
           }
           case TAG_ID.TITLE: {
               p._switchToTextParsing(token, TokenizerMode.RCDATA);
               break;
           }
           case TAG_ID.NOSCRIPT: {
               if (p.options.scriptingEnabled) {
                   p._switchToTextParsing(token, TokenizerMode.RAWTEXT);
               }
               else {
                   p._insertElement(token, NS.HTML);
                   p.insertionMode = InsertionMode.IN_HEAD_NO_SCRIPT;
               }
               break;
           }
           case TAG_ID.NOFRAMES:
           case TAG_ID.STYLE: {
               p._switchToTextParsing(token, TokenizerMode.RAWTEXT);
               break;
           }
           case TAG_ID.SCRIPT: {
               p._switchToTextParsing(token, TokenizerMode.SCRIPT_DATA);
               break;
           }
           case TAG_ID.TEMPLATE: {
               p._insertTemplate(token);
               p.activeFormattingElements.insertMarker();
               p.framesetOk = false;
               p.insertionMode = InsertionMode.IN_TEMPLATE;
               p.tmplInsertionModeStack.unshift(InsertionMode.IN_TEMPLATE);
               break;
           }
           case TAG_ID.HEAD: {
               p._err(token, ERR.misplacedStartTagForHeadElement);
               break;
           }
           default: {
               tokenInHead(p, token);
           }
       }
   }
   function endTagInHead(p, token) {
       switch (token.tagID) {
           case TAG_ID.HEAD: {
               p.openElements.pop();
               p.insertionMode = InsertionMode.AFTER_HEAD;
               break;
           }
           case TAG_ID.BODY:
           case TAG_ID.BR:
           case TAG_ID.HTML: {
               tokenInHead(p, token);
               break;
           }
           case TAG_ID.TEMPLATE: {
               templateEndTagInHead(p, token);
               break;
           }
           default: {
               p._err(token, ERR.endTagWithoutMatchingOpenElement);
           }
       }
   }
   function templateEndTagInHead(p, token) {
       if (p.openElements.tmplCount > 0) {
           p.openElements.generateImpliedEndTagsThoroughly();
           if (p.openElements.currentTagId !== TAG_ID.TEMPLATE) {
               p._err(token, ERR.closingOfElementWithOpenChildElements);
           }
           p.openElements.popUntilTagNamePopped(TAG_ID.TEMPLATE);
           p.activeFormattingElements.clearToLastMarker();
           p.tmplInsertionModeStack.shift();
           p._resetInsertionMode();
       }
       else {
           p._err(token, ERR.endTagWithoutMatchingOpenElement);
       }
   }
   function tokenInHead(p, token) {
       p.openElements.pop();
       p.insertionMode = InsertionMode.AFTER_HEAD;
       p._processToken(token);
   }
   // The "in head no script" insertion mode
   //------------------------------------------------------------------
   function startTagInHeadNoScript(p, token) {
       switch (token.tagID) {
           case TAG_ID.HTML: {
               startTagInBody(p, token);
               break;
           }
           case TAG_ID.BASEFONT:
           case TAG_ID.BGSOUND:
           case TAG_ID.HEAD:
           case TAG_ID.LINK:
           case TAG_ID.META:
           case TAG_ID.NOFRAMES:
           case TAG_ID.STYLE: {
               startTagInHead(p, token);
               break;
           }
           case TAG_ID.NOSCRIPT: {
               p._err(token, ERR.nestedNoscriptInHead);
               break;
           }
           default: {
               tokenInHeadNoScript(p, token);
           }
       }
   }
   function endTagInHeadNoScript(p, token) {
       switch (token.tagID) {
           case TAG_ID.NOSCRIPT: {
               p.openElements.pop();
               p.insertionMode = InsertionMode.IN_HEAD;
               break;
           }
           case TAG_ID.BR: {
               tokenInHeadNoScript(p, token);
               break;
           }
           default: {
               p._err(token, ERR.endTagWithoutMatchingOpenElement);
           }
       }
   }
   function tokenInHeadNoScript(p, token) {
       const errCode = token.type === TokenType.EOF ? ERR.openElementsLeftAfterEof : ERR.disallowedContentInNoscriptInHead;
       p._err(token, errCode);
       p.openElements.pop();
       p.insertionMode = InsertionMode.IN_HEAD;
       p._processToken(token);
   }
   // The "after head" insertion mode
   //------------------------------------------------------------------
   function startTagAfterHead(p, token) {
       switch (token.tagID) {
           case TAG_ID.HTML: {
               startTagInBody(p, token);
               break;
           }
           case TAG_ID.BODY: {
               p._insertElement(token, NS.HTML);
               p.framesetOk = false;
               p.insertionMode = InsertionMode.IN_BODY;
               break;
           }
           case TAG_ID.FRAMESET: {
               p._insertElement(token, NS.HTML);
               p.insertionMode = InsertionMode.IN_FRAMESET;
               break;
           }
           case TAG_ID.BASE:
           case TAG_ID.BASEFONT:
           case TAG_ID.BGSOUND:
           case TAG_ID.LINK:
           case TAG_ID.META:
           case TAG_ID.NOFRAMES:
           case TAG_ID.SCRIPT:
           case TAG_ID.STYLE:
           case TAG_ID.TEMPLATE:
           case TAG_ID.TITLE: {
               p._err(token, ERR.abandonedHeadElementChild);
               p.openElements.push(p.headElement, TAG_ID.HEAD);
               startTagInHead(p, token);
               p.openElements.remove(p.headElement);
               break;
           }
           case TAG_ID.HEAD: {
               p._err(token, ERR.misplacedStartTagForHeadElement);
               break;
           }
           default: {
               tokenAfterHead(p, token);
           }
       }
   }
   function endTagAfterHead(p, token) {
       switch (token.tagID) {
           case TAG_ID.BODY:
           case TAG_ID.HTML:
           case TAG_ID.BR: {
               tokenAfterHead(p, token);
               break;
           }
           case TAG_ID.TEMPLATE: {
               templateEndTagInHead(p, token);
               break;
           }
           default: {
               p._err(token, ERR.endTagWithoutMatchingOpenElement);
           }
       }
   }
   function tokenAfterHead(p, token) {
       p._insertFakeElement(TAG_NAMES.BODY, TAG_ID.BODY);
       p.insertionMode = InsertionMode.IN_BODY;
       modeInBody(p, token);
   }
   // The "in body" insertion mode
   //------------------------------------------------------------------
   function modeInBody(p, token) {
       switch (token.type) {
           case TokenType.CHARACTER: {
               characterInBody(p, token);
               break;
           }
           case TokenType.WHITESPACE_CHARACTER: {
               whitespaceCharacterInBody(p, token);
               break;
           }
           case TokenType.COMMENT: {
               appendComment(p, token);
               break;
           }
           case TokenType.START_TAG: {
               startTagInBody(p, token);
               break;
           }
           case TokenType.END_TAG: {
               endTagInBody(p, token);
               break;
           }
           case TokenType.EOF: {
               eofInBody(p, token);
               break;
           }
           // Do nothing
       }
   }
   function whitespaceCharacterInBody(p, token) {
       p._reconstructActiveFormattingElements();
       p._insertCharacters(token);
   }
   function characterInBody(p, token) {
       p._reconstructActiveFormattingElements();
       p._insertCharacters(token);
       p.framesetOk = false;
   }
   function htmlStartTagInBody(p, token) {
       if (p.openElements.tmplCount === 0) {
           p.treeAdapter.adoptAttributes(p.openElements.items[0], token.attrs);
       }
   }
   function bodyStartTagInBody(p, token) {
       const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();
       if (bodyElement && p.openElements.tmplCount === 0) {
           p.framesetOk = false;
           p.treeAdapter.adoptAttributes(bodyElement, token.attrs);
       }
   }
   function framesetStartTagInBody(p, token) {
       const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();
       if (p.framesetOk && bodyElement) {
           p.treeAdapter.detachNode(bodyElement);
           p.openElements.popAllUpToHtmlElement();
           p._insertElement(token, NS.HTML);
           p.insertionMode = InsertionMode.IN_FRAMESET;
       }
   }
   function addressStartTagInBody(p, token) {
       if (p.openElements.hasInButtonScope(TAG_ID.P)) {
           p._closePElement();
       }
       p._insertElement(token, NS.HTML);
   }
   function numberedHeaderStartTagInBody(p, token) {
       if (p.openElements.hasInButtonScope(TAG_ID.P)) {
           p._closePElement();
       }
       if (isNumberedHeader(p.openElements.currentTagId)) {
           p.openElements.pop();
       }
       p._insertElement(token, NS.HTML);
   }
   function preStartTagInBody(p, token) {
       if (p.openElements.hasInButtonScope(TAG_ID.P)) {
           p._closePElement();
       }
       p._insertElement(token, NS.HTML);
       //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move
       //on to the next one. (Newlines at the start of pre blocks are ignored as an authoring convenience.)
       p.skipNextNewLine = true;
       p.framesetOk = false;
   }
   function formStartTagInBody(p, token) {
       const inTemplate = p.openElements.tmplCount > 0;
       if (!p.formElement || inTemplate) {
           if (p.openElements.hasInButtonScope(TAG_ID.P)) {
               p._closePElement();
           }
           p._insertElement(token, NS.HTML);
           if (!inTemplate) {
               p.formElement = p.openElements.current;
           }
       }
   }
   function listItemStartTagInBody(p, token) {
       p.framesetOk = false;
       const tn = token.tagID;
       for (let i = p.openElements.stackTop; i >= 0; i--) {
           const elementId = p.openElements.tagIDs[i];
           if ((tn === TAG_ID.LI && elementId === TAG_ID.LI) ||
               ((tn === TAG_ID.DD || tn === TAG_ID.DT) && (elementId === TAG_ID.DD || elementId === TAG_ID.DT))) {
               p.openElements.generateImpliedEndTagsWithExclusion(elementId);
               p.openElements.popUntilTagNamePopped(elementId);
               break;
           }
           if (elementId !== TAG_ID.ADDRESS &&
               elementId !== TAG_ID.DIV &&
               elementId !== TAG_ID.P &&
               p._isSpecialElement(p.openElements.items[i], elementId)) {
               break;
           }
       }
       if (p.openElements.hasInButtonScope(TAG_ID.P)) {
           p._closePElement();
       }
       p._insertElement(token, NS.HTML);
   }
   function plaintextStartTagInBody(p, token) {
       if (p.openElements.hasInButtonScope(TAG_ID.P)) {
           p._closePElement();
       }
       p._insertElement(token, NS.HTML);
       p.tokenizer.state = TokenizerMode.PLAINTEXT;
   }
   function buttonStartTagInBody(p, token) {
       if (p.openElements.hasInScope(TAG_ID.BUTTON)) {
           p.openElements.generateImpliedEndTags();
           p.openElements.popUntilTagNamePopped(TAG_ID.BUTTON);
       }
       p._reconstructActiveFormattingElements();
       p._insertElement(token, NS.HTML);
       p.framesetOk = false;
   }
   function aStartTagInBody(p, token) {
       const activeElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(TAG_NAMES.A);
       if (activeElementEntry) {
           callAdoptionAgency(p, token);
           p.openElements.remove(activeElementEntry.element);
           p.activeFormattingElements.removeEntry(activeElementEntry);
       }
       p._reconstructActiveFormattingElements();
       p._insertElement(token, NS.HTML);
       p.activeFormattingElements.pushElement(p.openElements.current, token);
   }
   function bStartTagInBody(p, token) {
       p._reconstructActiveFormattingElements();
       p._insertElement(token, NS.HTML);
       p.activeFormattingElements.pushElement(p.openElements.current, token);
   }
   function nobrStartTagInBody(p, token) {
       p._reconstructActiveFormattingElements();
       if (p.openElements.hasInScope(TAG_ID.NOBR)) {
           callAdoptionAgency(p, token);
           p._reconstructActiveFormattingElements();
       }
       p._insertElement(token, NS.HTML);
       p.activeFormattingElements.pushElement(p.openElements.current, token);
   }
   function appletStartTagInBody(p, token) {
       p._reconstructActiveFormattingElements();
       p._insertElement(token, NS.HTML);
       p.activeFormattingElements.insertMarker();
       p.framesetOk = false;
   }
   function tableStartTagInBody(p, token) {
       if (p.treeAdapter.getDocumentMode(p.document) !== DOCUMENT_MODE.QUIRKS && p.openElements.hasInButtonScope(TAG_ID.P)) {
           p._closePElement();
       }
       p._insertElement(token, NS.HTML);
       p.framesetOk = false;
       p.insertionMode = InsertionMode.IN_TABLE;
   }
   function areaStartTagInBody(p, token) {
       p._reconstructActiveFormattingElements();
       p._appendElement(token, NS.HTML);
       p.framesetOk = false;
       token.ackSelfClosing = true;
   }
   function isHiddenInput(token) {
       const inputType = getTokenAttr(token, ATTRS.TYPE);
       return inputType != null && inputType.toLowerCase() === HIDDEN_INPUT_TYPE;
   }
   function inputStartTagInBody(p, token) {
       p._reconstructActiveFormattingElements();
       p._appendElement(token, NS.HTML);
       if (!isHiddenInput(token)) {
           p.framesetOk = false;
       }
       token.ackSelfClosing = true;
   }
   function paramStartTagInBody(p, token) {
       p._appendElement(token, NS.HTML);
       token.ackSelfClosing = true;
   }
   function hrStartTagInBody(p, token) {
       if (p.openElements.hasInButtonScope(TAG_ID.P)) {
           p._closePElement();
       }
       p._appendElement(token, NS.HTML);
       p.framesetOk = false;
       token.ackSelfClosing = true;
   }
   function imageStartTagInBody(p, token) {
       token.tagName = TAG_NAMES.IMG;
       token.tagID = TAG_ID.IMG;
       areaStartTagInBody(p, token);
   }
   function textareaStartTagInBody(p, token) {
       p._insertElement(token, NS.HTML);
       //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move
       //on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)
       p.skipNextNewLine = true;
       p.tokenizer.state = TokenizerMode.RCDATA;
       p.originalInsertionMode = p.insertionMode;
       p.framesetOk = false;
       p.insertionMode = InsertionMode.TEXT;
   }
   function xmpStartTagInBody(p, token) {
       if (p.openElements.hasInButtonScope(TAG_ID.P)) {
           p._closePElement();
       }
       p._reconstructActiveFormattingElements();
       p.framesetOk = false;
       p._switchToTextParsing(token, TokenizerMode.RAWTEXT);
   }
   function iframeStartTagInBody(p, token) {
       p.framesetOk = false;
       p._switchToTextParsing(token, TokenizerMode.RAWTEXT);
   }
   //NOTE: here we assume that we always act as an user agent with enabled plugins, so we parse
   //<noembed> as rawtext.
   function noembedStartTagInBody(p, token) {
       p._switchToTextParsing(token, TokenizerMode.RAWTEXT);
   }
   function selectStartTagInBody(p, token) {
       p._reconstructActiveFormattingElements();
       p._insertElement(token, NS.HTML);
       p.framesetOk = false;
       p.insertionMode =
           p.insertionMode === InsertionMode.IN_TABLE ||
               p.insertionMode === InsertionMode.IN_CAPTION ||
               p.insertionMode === InsertionMode.IN_TABLE_BODY ||
               p.insertionMode === InsertionMode.IN_ROW ||
               p.insertionMode === InsertionMode.IN_CELL
               ? InsertionMode.IN_SELECT_IN_TABLE
               : InsertionMode.IN_SELECT;
   }
   function optgroupStartTagInBody(p, token) {
       if (p.openElements.currentTagId === TAG_ID.OPTION) {
           p.openElements.pop();
       }
       p._reconstructActiveFormattingElements();
       p._insertElement(token, NS.HTML);
   }
   function rbStartTagInBody(p, token) {
       if (p.openElements.hasInScope(TAG_ID.RUBY)) {
           p.openElements.generateImpliedEndTags();
       }
       p._insertElement(token, NS.HTML);
   }
   function rtStartTagInBody(p, token) {
       if (p.openElements.hasInScope(TAG_ID.RUBY)) {
           p.openElements.generateImpliedEndTagsWithExclusion(TAG_ID.RTC);
       }
       p._insertElement(token, NS.HTML);
   }
   function mathStartTagInBody(p, token) {
       p._reconstructActiveFormattingElements();
       adjustTokenMathMLAttrs(token);
       adjustTokenXMLAttrs(token);
       if (token.selfClosing) {
           p._appendElement(token, NS.MATHML);
       }
       else {
           p._insertElement(token, NS.MATHML);
       }
       token.ackSelfClosing = true;
   }
   function svgStartTagInBody(p, token) {
       p._reconstructActiveFormattingElements();
       adjustTokenSVGAttrs(token);
       adjustTokenXMLAttrs(token);
       if (token.selfClosing) {
           p._appendElement(token, NS.SVG);
       }
       else {
           p._insertElement(token, NS.SVG);
       }
       token.ackSelfClosing = true;
   }
   function genericStartTagInBody(p, token) {
       p._reconstructActiveFormattingElements();
       p._insertElement(token, NS.HTML);
   }
   function startTagInBody(p, token) {
       switch (token.tagID) {
           case TAG_ID.I:
           case TAG_ID.S:
           case TAG_ID.B:
           case TAG_ID.U:
           case TAG_ID.EM:
           case TAG_ID.TT:
           case TAG_ID.BIG:
           case TAG_ID.CODE:
           case TAG_ID.FONT:
           case TAG_ID.SMALL:
           case TAG_ID.STRIKE:
           case TAG_ID.STRONG: {
               bStartTagInBody(p, token);
               break;
           }
           case TAG_ID.A: {
               aStartTagInBody(p, token);
               break;
           }
           case TAG_ID.H1:
           case TAG_ID.H2:
           case TAG_ID.H3:
           case TAG_ID.H4:
           case TAG_ID.H5:
           case TAG_ID.H6: {
               numberedHeaderStartTagInBody(p, token);
               break;
           }
           case TAG_ID.P:
           case TAG_ID.DL:
           case TAG_ID.OL:
           case TAG_ID.UL:
           case TAG_ID.DIV:
           case TAG_ID.DIR:
           case TAG_ID.NAV:
           case TAG_ID.MAIN:
           case TAG_ID.MENU:
           case TAG_ID.ASIDE:
           case TAG_ID.CENTER:
           case TAG_ID.FIGURE:
           case TAG_ID.FOOTER:
           case TAG_ID.HEADER:
           case TAG_ID.HGROUP:
           case TAG_ID.DIALOG:
           case TAG_ID.DETAILS:
           case TAG_ID.ADDRESS:
           case TAG_ID.ARTICLE:
           case TAG_ID.SECTION:
           case TAG_ID.SUMMARY:
           case TAG_ID.FIELDSET:
           case TAG_ID.BLOCKQUOTE:
           case TAG_ID.FIGCAPTION: {
               addressStartTagInBody(p, token);
               break;
           }
           case TAG_ID.LI:
           case TAG_ID.DD:
           case TAG_ID.DT: {
               listItemStartTagInBody(p, token);
               break;
           }
           case TAG_ID.BR:
           case TAG_ID.IMG:
           case TAG_ID.WBR:
           case TAG_ID.AREA:
           case TAG_ID.EMBED:
           case TAG_ID.KEYGEN: {
               areaStartTagInBody(p, token);
               break;
           }
           case TAG_ID.HR: {
               hrStartTagInBody(p, token);
               break;
           }
           case TAG_ID.RB:
           case TAG_ID.RTC: {
               rbStartTagInBody(p, token);
               break;
           }
           case TAG_ID.RT:
           case TAG_ID.RP: {
               rtStartTagInBody(p, token);
               break;
           }
           case TAG_ID.PRE:
           case TAG_ID.LISTING: {
               preStartTagInBody(p, token);
               break;
           }
           case TAG_ID.XMP: {
               xmpStartTagInBody(p, token);
               break;
           }
           case TAG_ID.SVG: {
               svgStartTagInBody(p, token);
               break;
           }
           case TAG_ID.HTML: {
               htmlStartTagInBody(p, token);
               break;
           }
           case TAG_ID.BASE:
           case TAG_ID.LINK:
           case TAG_ID.META:
           case TAG_ID.STYLE:
           case TAG_ID.TITLE:
           case TAG_ID.SCRIPT:
           case TAG_ID.BGSOUND:
           case TAG_ID.BASEFONT:
           case TAG_ID.TEMPLATE: {
               startTagInHead(p, token);
               break;
           }
           case TAG_ID.BODY: {
               bodyStartTagInBody(p, token);
               break;
           }
           case TAG_ID.FORM: {
               formStartTagInBody(p, token);
               break;
           }
           case TAG_ID.NOBR: {
               nobrStartTagInBody(p, token);
               break;
           }
           case TAG_ID.MATH: {
               mathStartTagInBody(p, token);
               break;
           }
           case TAG_ID.TABLE: {
               tableStartTagInBody(p, token);
               break;
           }
           case TAG_ID.INPUT: {
               inputStartTagInBody(p, token);
               break;
           }
           case TAG_ID.PARAM:
           case TAG_ID.TRACK:
           case TAG_ID.SOURCE: {
               paramStartTagInBody(p, token);
               break;
           }
           case TAG_ID.IMAGE: {
               imageStartTagInBody(p, token);
               break;
           }
           case TAG_ID.BUTTON: {
               buttonStartTagInBody(p, token);
               break;
           }
           case TAG_ID.APPLET:
           case TAG_ID.OBJECT:
           case TAG_ID.MARQUEE: {
               appletStartTagInBody(p, token);
               break;
           }
           case TAG_ID.IFRAME: {
               iframeStartTagInBody(p, token);
               break;
           }
           case TAG_ID.SELECT: {
               selectStartTagInBody(p, token);
               break;
           }
           case TAG_ID.OPTION:
           case TAG_ID.OPTGROUP: {
               optgroupStartTagInBody(p, token);
               break;
           }
           case TAG_ID.NOEMBED: {
               noembedStartTagInBody(p, token);
               break;
           }
           case TAG_ID.FRAMESET: {
               framesetStartTagInBody(p, token);
               break;
           }
           case TAG_ID.TEXTAREA: {
               textareaStartTagInBody(p, token);
               break;
           }
           case TAG_ID.NOSCRIPT: {
               if (p.options.scriptingEnabled) {
                   noembedStartTagInBody(p, token);
               }
               else {
                   genericStartTagInBody(p, token);
               }
               break;
           }
           case TAG_ID.PLAINTEXT: {
               plaintextStartTagInBody(p, token);
               break;
           }
           case TAG_ID.COL:
           case TAG_ID.TH:
           case TAG_ID.TD:
           case TAG_ID.TR:
           case TAG_ID.HEAD:
           case TAG_ID.FRAME:
           case TAG_ID.TBODY:
           case TAG_ID.TFOOT:
           case TAG_ID.THEAD:
           case TAG_ID.CAPTION:
           case TAG_ID.COLGROUP: {
               // Ignore token
               break;
           }
           default: {
               genericStartTagInBody(p, token);
           }
       }
   }
   function bodyEndTagInBody(p, token) {
       if (p.openElements.hasInScope(TAG_ID.BODY)) {
           p.insertionMode = InsertionMode.AFTER_BODY;
           //NOTE: <body> is never popped from the stack, so we need to updated
           //the end location explicitly.
           if (p.options.sourceCodeLocationInfo) {
               const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();
               if (bodyElement) {
                   p._setEndLocation(bodyElement, token);
               }
           }
       }
   }
   function htmlEndTagInBody(p, token) {
       if (p.openElements.hasInScope(TAG_ID.BODY)) {
           p.insertionMode = InsertionMode.AFTER_BODY;
           endTagAfterBody(p, token);
       }
   }
   function addressEndTagInBody(p, token) {
       const tn = token.tagID;
       if (p.openElements.hasInScope(tn)) {
           p.openElements.generateImpliedEndTags();
           p.openElements.popUntilTagNamePopped(tn);
       }
   }
   function formEndTagInBody(p) {
       const inTemplate = p.openElements.tmplCount > 0;
       const { formElement } = p;
       if (!inTemplate) {
           p.formElement = null;
       }
       if ((formElement || inTemplate) && p.openElements.hasInScope(TAG_ID.FORM)) {
           p.openElements.generateImpliedEndTags();
           if (inTemplate) {
               p.openElements.popUntilTagNamePopped(TAG_ID.FORM);
           }
           else if (formElement) {
               p.openElements.remove(formElement);
           }
       }
   }
   function pEndTagInBody(p) {
       if (!p.openElements.hasInButtonScope(TAG_ID.P)) {
           p._insertFakeElement(TAG_NAMES.P, TAG_ID.P);
       }
       p._closePElement();
   }
   function liEndTagInBody(p) {
       if (p.openElements.hasInListItemScope(TAG_ID.LI)) {
           p.openElements.generateImpliedEndTagsWithExclusion(TAG_ID.LI);
           p.openElements.popUntilTagNamePopped(TAG_ID.LI);
       }
   }
   function ddEndTagInBody(p, token) {
       const tn = token.tagID;
       if (p.openElements.hasInScope(tn)) {
           p.openElements.generateImpliedEndTagsWithExclusion(tn);
           p.openElements.popUntilTagNamePopped(tn);
       }
   }
   function numberedHeaderEndTagInBody(p) {
       if (p.openElements.hasNumberedHeaderInScope()) {
           p.openElements.generateImpliedEndTags();
           p.openElements.popUntilNumberedHeaderPopped();
       }
   }
   function appletEndTagInBody(p, token) {
       const tn = token.tagID;
       if (p.openElements.hasInScope(tn)) {
           p.openElements.generateImpliedEndTags();
           p.openElements.popUntilTagNamePopped(tn);
           p.activeFormattingElements.clearToLastMarker();
       }
   }
   function brEndTagInBody(p) {
       p._reconstructActiveFormattingElements();
       p._insertFakeElement(TAG_NAMES.BR, TAG_ID.BR);
       p.openElements.pop();
       p.framesetOk = false;
   }
   function genericEndTagInBody(p, token) {
       const tn = token.tagName;
       const tid = token.tagID;
       for (let i = p.openElements.stackTop; i > 0; i--) {
           const element = p.openElements.items[i];
           const elementId = p.openElements.tagIDs[i];
           // Compare the tag name here, as the tag might not be a known tag with an ID.
           if (tid === elementId && (tid !== TAG_ID.UNKNOWN || p.treeAdapter.getTagName(element) === tn)) {
               p.openElements.generateImpliedEndTagsWithExclusion(tid);
               if (p.openElements.stackTop >= i)
                   p.openElements.shortenToLength(i);
               break;
           }
           if (p._isSpecialElement(element, elementId)) {
               break;
           }
       }
   }
   function endTagInBody(p, token) {
       switch (token.tagID) {
           case TAG_ID.A:
           case TAG_ID.B:
           case TAG_ID.I:
           case TAG_ID.S:
           case TAG_ID.U:
           case TAG_ID.EM:
           case TAG_ID.TT:
           case TAG_ID.BIG:
           case TAG_ID.CODE:
           case TAG_ID.FONT:
           case TAG_ID.NOBR:
           case TAG_ID.SMALL:
           case TAG_ID.STRIKE:
           case TAG_ID.STRONG: {
               callAdoptionAgency(p, token);
               break;
           }
           case TAG_ID.P: {
               pEndTagInBody(p);
               break;
           }
           case TAG_ID.DL:
           case TAG_ID.UL:
           case TAG_ID.OL:
           case TAG_ID.DIR:
           case TAG_ID.DIV:
           case TAG_ID.NAV:
           case TAG_ID.PRE:
           case TAG_ID.MAIN:
           case TAG_ID.MENU:
           case TAG_ID.ASIDE:
           case TAG_ID.BUTTON:
           case TAG_ID.CENTER:
           case TAG_ID.FIGURE:
           case TAG_ID.FOOTER:
           case TAG_ID.HEADER:
           case TAG_ID.HGROUP:
           case TAG_ID.DIALOG:
           case TAG_ID.ADDRESS:
           case TAG_ID.ARTICLE:
           case TAG_ID.DETAILS:
           case TAG_ID.SECTION:
           case TAG_ID.SUMMARY:
           case TAG_ID.LISTING:
           case TAG_ID.FIELDSET:
           case TAG_ID.BLOCKQUOTE:
           case TAG_ID.FIGCAPTION: {
               addressEndTagInBody(p, token);
               break;
           }
           case TAG_ID.LI: {
               liEndTagInBody(p);
               break;
           }
           case TAG_ID.DD:
           case TAG_ID.DT: {
               ddEndTagInBody(p, token);
               break;
           }
           case TAG_ID.H1:
           case TAG_ID.H2:
           case TAG_ID.H3:
           case TAG_ID.H4:
           case TAG_ID.H5:
           case TAG_ID.H6: {
               numberedHeaderEndTagInBody(p);
               break;
           }
           case TAG_ID.BR: {
               brEndTagInBody(p);
               break;
           }
           case TAG_ID.BODY: {
               bodyEndTagInBody(p, token);
               break;
           }
           case TAG_ID.HTML: {
               htmlEndTagInBody(p, token);
               break;
           }
           case TAG_ID.FORM: {
               formEndTagInBody(p);
               break;
           }
           case TAG_ID.APPLET:
           case TAG_ID.OBJECT:
           case TAG_ID.MARQUEE: {
               appletEndTagInBody(p, token);
               break;
           }
           case TAG_ID.TEMPLATE: {
               templateEndTagInHead(p, token);
               break;
           }
           default: {
               genericEndTagInBody(p, token);
           }
       }
   }
   function eofInBody(p, token) {
       if (p.tmplInsertionModeStack.length > 0) {
           eofInTemplate(p, token);
       }
       else {
           stopParsing(p, token);
       }
   }
   // The "text" insertion mode
   //------------------------------------------------------------------
   function endTagInText(p, token) {
       var _a;
       if (token.tagID === TAG_ID.SCRIPT) {
           (_a = p.scriptHandler) === null || _a === void 0 ? void 0 : _a.call(p, p.openElements.current);
       }
       p.openElements.pop();
       p.insertionMode = p.originalInsertionMode;
   }
   function eofInText(p, token) {
       p._err(token, ERR.eofInElementThatCanContainOnlyText);
       p.openElements.pop();
       p.insertionMode = p.originalInsertionMode;
       p.onEof(token);
   }
   // The "in table" insertion mode
   //------------------------------------------------------------------
   function characterInTable(p, token) {
       if (TABLE_STRUCTURE_TAGS.has(p.openElements.currentTagId)) {
           p.pendingCharacterTokens.length = 0;
           p.hasNonWhitespacePendingCharacterToken = false;
           p.originalInsertionMode = p.insertionMode;
           p.insertionMode = InsertionMode.IN_TABLE_TEXT;
           switch (token.type) {
               case TokenType.CHARACTER: {
                   characterInTableText(p, token);
                   break;
               }
               case TokenType.WHITESPACE_CHARACTER: {
                   whitespaceCharacterInTableText(p, token);
                   break;
               }
               // Ignore null
           }
       }
       else {
           tokenInTable(p, token);
       }
   }
   function captionStartTagInTable(p, token) {
       p.openElements.clearBackToTableContext();
       p.activeFormattingElements.insertMarker();
       p._insertElement(token, NS.HTML);
       p.insertionMode = InsertionMode.IN_CAPTION;
   }
   function colgroupStartTagInTable(p, token) {
       p.openElements.clearBackToTableContext();
       p._insertElement(token, NS.HTML);
       p.insertionMode = InsertionMode.IN_COLUMN_GROUP;
   }
   function colStartTagInTable(p, token) {
       p.openElements.clearBackToTableContext();
       p._insertFakeElement(TAG_NAMES.COLGROUP, TAG_ID.COLGROUP);
       p.insertionMode = InsertionMode.IN_COLUMN_GROUP;
       startTagInColumnGroup(p, token);
   }
   function tbodyStartTagInTable(p, token) {
       p.openElements.clearBackToTableContext();
       p._insertElement(token, NS.HTML);
       p.insertionMode = InsertionMode.IN_TABLE_BODY;
   }
   function tdStartTagInTable(p, token) {
       p.openElements.clearBackToTableContext();
       p._insertFakeElement(TAG_NAMES.TBODY, TAG_ID.TBODY);
       p.insertionMode = InsertionMode.IN_TABLE_BODY;
       startTagInTableBody(p, token);
   }
   function tableStartTagInTable(p, token) {
       if (p.openElements.hasInTableScope(TAG_ID.TABLE)) {
           p.openElements.popUntilTagNamePopped(TAG_ID.TABLE);
           p._resetInsertionMode();
           p._processStartTag(token);
       }
   }
   function inputStartTagInTable(p, token) {
       if (isHiddenInput(token)) {
           p._appendElement(token, NS.HTML);
       }
       else {
           tokenInTable(p, token);
       }
       token.ackSelfClosing = true;
   }
   function formStartTagInTable(p, token) {
       if (!p.formElement && p.openElements.tmplCount === 0) {
           p._insertElement(token, NS.HTML);
           p.formElement = p.openElements.current;
           p.openElements.pop();
       }
   }
   function startTagInTable(p, token) {
       switch (token.tagID) {
           case TAG_ID.TD:
           case TAG_ID.TH:
           case TAG_ID.TR: {
               tdStartTagInTable(p, token);
               break;
           }
           case TAG_ID.STYLE:
           case TAG_ID.SCRIPT:
           case TAG_ID.TEMPLATE: {
               startTagInHead(p, token);
               break;
           }
           case TAG_ID.COL: {
               colStartTagInTable(p, token);
               break;
           }
           case TAG_ID.FORM: {
               formStartTagInTable(p, token);
               break;
           }
           case TAG_ID.TABLE: {
               tableStartTagInTable(p, token);
               break;
           }
           case TAG_ID.TBODY:
           case TAG_ID.TFOOT:
           case TAG_ID.THEAD: {
               tbodyStartTagInTable(p, token);
               break;
           }
           case TAG_ID.INPUT: {
               inputStartTagInTable(p, token);
               break;
           }
           case TAG_ID.CAPTION: {
               captionStartTagInTable(p, token);
               break;
           }
           case TAG_ID.COLGROUP: {
               colgroupStartTagInTable(p, token);
               break;
           }
           default: {
               tokenInTable(p, token);
           }
       }
   }
   function endTagInTable(p, token) {
       switch (token.tagID) {
           case TAG_ID.TABLE: {
               if (p.openElements.hasInTableScope(TAG_ID.TABLE)) {
                   p.openElements.popUntilTagNamePopped(TAG_ID.TABLE);
                   p._resetInsertionMode();
               }
               break;
           }
           case TAG_ID.TEMPLATE: {
               templateEndTagInHead(p, token);
               break;
           }
           case TAG_ID.BODY:
           case TAG_ID.CAPTION:
           case TAG_ID.COL:
           case TAG_ID.COLGROUP:
           case TAG_ID.HTML:
           case TAG_ID.TBODY:
           case TAG_ID.TD:
           case TAG_ID.TFOOT:
           case TAG_ID.TH:
           case TAG_ID.THEAD:
           case TAG_ID.TR: {
               // Ignore token
               break;
           }
           default: {
               tokenInTable(p, token);
           }
       }
   }
   function tokenInTable(p, token) {
       const savedFosterParentingState = p.fosterParentingEnabled;
       p.fosterParentingEnabled = true;
       // Process token in `In Body` mode
       modeInBody(p, token);
       p.fosterParentingEnabled = savedFosterParentingState;
   }
   // The "in table text" insertion mode
   //------------------------------------------------------------------
   function whitespaceCharacterInTableText(p, token) {
       p.pendingCharacterTokens.push(token);
   }
   function characterInTableText(p, token) {
       p.pendingCharacterTokens.push(token);
       p.hasNonWhitespacePendingCharacterToken = true;
   }
   function tokenInTableText(p, token) {
       let i = 0;
       if (p.hasNonWhitespacePendingCharacterToken) {
           for (; i < p.pendingCharacterTokens.length; i++) {
               tokenInTable(p, p.pendingCharacterTokens[i]);
           }
       }
       else {
           for (; i < p.pendingCharacterTokens.length; i++) {
               p._insertCharacters(p.pendingCharacterTokens[i]);
           }
       }
       p.insertionMode = p.originalInsertionMode;
       p._processToken(token);
   }
   // The "in caption" insertion mode
   //------------------------------------------------------------------
   const TABLE_VOID_ELEMENTS = new Set([TAG_ID.CAPTION, TAG_ID.COL, TAG_ID.COLGROUP, TAG_ID.TBODY, TAG_ID.TD, TAG_ID.TFOOT, TAG_ID.TH, TAG_ID.THEAD, TAG_ID.TR]);
   function startTagInCaption(p, token) {
       const tn = token.tagID;
       if (TABLE_VOID_ELEMENTS.has(tn)) {
           if (p.openElements.hasInTableScope(TAG_ID.CAPTION)) {
               p.openElements.generateImpliedEndTags();
               p.openElements.popUntilTagNamePopped(TAG_ID.CAPTION);
               p.activeFormattingElements.clearToLastMarker();
               p.insertionMode = InsertionMode.IN_TABLE;
               startTagInTable(p, token);
           }
       }
       else {
           startTagInBody(p, token);
       }
   }
   function endTagInCaption(p, token) {
       const tn = token.tagID;
       switch (tn) {
           case TAG_ID.CAPTION:
           case TAG_ID.TABLE: {
               if (p.openElements.hasInTableScope(TAG_ID.CAPTION)) {
                   p.openElements.generateImpliedEndTags();
                   p.openElements.popUntilTagNamePopped(TAG_ID.CAPTION);
                   p.activeFormattingElements.clearToLastMarker();
                   p.insertionMode = InsertionMode.IN_TABLE;
                   if (tn === TAG_ID.TABLE) {
                       endTagInTable(p, token);
                   }
               }
               break;
           }
           case TAG_ID.BODY:
           case TAG_ID.COL:
           case TAG_ID.COLGROUP:
           case TAG_ID.HTML:
           case TAG_ID.TBODY:
           case TAG_ID.TD:
           case TAG_ID.TFOOT:
           case TAG_ID.TH:
           case TAG_ID.THEAD:
           case TAG_ID.TR: {
               // Ignore token
               break;
           }
           default: {
               endTagInBody(p, token);
           }
       }
   }
   // The "in column group" insertion mode
   //------------------------------------------------------------------
   function startTagInColumnGroup(p, token) {
       switch (token.tagID) {
           case TAG_ID.HTML: {
               startTagInBody(p, token);
               break;
           }
           case TAG_ID.COL: {
               p._appendElement(token, NS.HTML);
               token.ackSelfClosing = true;
               break;
           }
           case TAG_ID.TEMPLATE: {
               startTagInHead(p, token);
               break;
           }
           default: {
               tokenInColumnGroup(p, token);
           }
       }
   }
   function endTagInColumnGroup(p, token) {
       switch (token.tagID) {
           case TAG_ID.COLGROUP: {
               if (p.openElements.currentTagId === TAG_ID.COLGROUP) {
                   p.openElements.pop();
                   p.insertionMode = InsertionMode.IN_TABLE;
               }
               break;
           }
           case TAG_ID.TEMPLATE: {
               templateEndTagInHead(p, token);
               break;
           }
           case TAG_ID.COL: {
               // Ignore token
               break;
           }
           default: {
               tokenInColumnGroup(p, token);
           }
       }
   }
   function tokenInColumnGroup(p, token) {
       if (p.openElements.currentTagId === TAG_ID.COLGROUP) {
           p.openElements.pop();
           p.insertionMode = InsertionMode.IN_TABLE;
           p._processToken(token);
       }
   }
   // The "in table body" insertion mode
   //------------------------------------------------------------------
   function startTagInTableBody(p, token) {
       switch (token.tagID) {
           case TAG_ID.TR: {
               p.openElements.clearBackToTableBodyContext();
               p._insertElement(token, NS.HTML);
               p.insertionMode = InsertionMode.IN_ROW;
               break;
           }
           case TAG_ID.TH:
           case TAG_ID.TD: {
               p.openElements.clearBackToTableBodyContext();
               p._insertFakeElement(TAG_NAMES.TR, TAG_ID.TR);
               p.insertionMode = InsertionMode.IN_ROW;
               startTagInRow(p, token);
               break;
           }
           case TAG_ID.CAPTION:
           case TAG_ID.COL:
           case TAG_ID.COLGROUP:
           case TAG_ID.TBODY:
           case TAG_ID.TFOOT:
           case TAG_ID.THEAD: {
               if (p.openElements.hasTableBodyContextInTableScope()) {
                   p.openElements.clearBackToTableBodyContext();
                   p.openElements.pop();
                   p.insertionMode = InsertionMode.IN_TABLE;
                   startTagInTable(p, token);
               }
               break;
           }
           default: {
               startTagInTable(p, token);
           }
       }
   }
   function endTagInTableBody(p, token) {
       const tn = token.tagID;
       switch (token.tagID) {
           case TAG_ID.TBODY:
           case TAG_ID.TFOOT:
           case TAG_ID.THEAD: {
               if (p.openElements.hasInTableScope(tn)) {
                   p.openElements.clearBackToTableBodyContext();
                   p.openElements.pop();
                   p.insertionMode = InsertionMode.IN_TABLE;
               }
               break;
           }
           case TAG_ID.TABLE: {
               if (p.openElements.hasTableBodyContextInTableScope()) {
                   p.openElements.clearBackToTableBodyContext();
                   p.openElements.pop();
                   p.insertionMode = InsertionMode.IN_TABLE;
                   endTagInTable(p, token);
               }
               break;
           }
           case TAG_ID.BODY:
           case TAG_ID.CAPTION:
           case TAG_ID.COL:
           case TAG_ID.COLGROUP:
           case TAG_ID.HTML:
           case TAG_ID.TD:
           case TAG_ID.TH:
           case TAG_ID.TR: {
               // Ignore token
               break;
           }
           default: {
               endTagInTable(p, token);
           }
       }
   }
   // The "in row" insertion mode
   //------------------------------------------------------------------
   function startTagInRow(p, token) {
       switch (token.tagID) {
           case TAG_ID.TH:
           case TAG_ID.TD: {
               p.openElements.clearBackToTableRowContext();
               p._insertElement(token, NS.HTML);
               p.insertionMode = InsertionMode.IN_CELL;
               p.activeFormattingElements.insertMarker();
               break;
           }
           case TAG_ID.CAPTION:
           case TAG_ID.COL:
           case TAG_ID.COLGROUP:
           case TAG_ID.TBODY:
           case TAG_ID.TFOOT:
           case TAG_ID.THEAD:
           case TAG_ID.TR: {
               if (p.openElements.hasInTableScope(TAG_ID.TR)) {
                   p.openElements.clearBackToTableRowContext();
                   p.openElements.pop();
                   p.insertionMode = InsertionMode.IN_TABLE_BODY;
                   startTagInTableBody(p, token);
               }
               break;
           }
           default: {
               startTagInTable(p, token);
           }
       }
   }
   function endTagInRow(p, token) {
       switch (token.tagID) {
           case TAG_ID.TR: {
               if (p.openElements.hasInTableScope(TAG_ID.TR)) {
                   p.openElements.clearBackToTableRowContext();
                   p.openElements.pop();
                   p.insertionMode = InsertionMode.IN_TABLE_BODY;
               }
               break;
           }
           case TAG_ID.TABLE: {
               if (p.openElements.hasInTableScope(TAG_ID.TR)) {
                   p.openElements.clearBackToTableRowContext();
                   p.openElements.pop();
                   p.insertionMode = InsertionMode.IN_TABLE_BODY;
                   endTagInTableBody(p, token);
               }
               break;
           }
           case TAG_ID.TBODY:
           case TAG_ID.TFOOT:
           case TAG_ID.THEAD: {
               if (p.openElements.hasInTableScope(token.tagID) || p.openElements.hasInTableScope(TAG_ID.TR)) {
                   p.openElements.clearBackToTableRowContext();
                   p.openElements.pop();
                   p.insertionMode = InsertionMode.IN_TABLE_BODY;
                   endTagInTableBody(p, token);
               }
               break;
           }
           case TAG_ID.BODY:
           case TAG_ID.CAPTION:
           case TAG_ID.COL:
           case TAG_ID.COLGROUP:
           case TAG_ID.HTML:
           case TAG_ID.TD:
           case TAG_ID.TH: {
               // Ignore end tag
               break;
           }
           default: {
               endTagInTable(p, token);
           }
       }
   }
   // The "in cell" insertion mode
   //------------------------------------------------------------------
   function startTagInCell(p, token) {
       const tn = token.tagID;
       if (TABLE_VOID_ELEMENTS.has(tn)) {
           if (p.openElements.hasInTableScope(TAG_ID.TD) || p.openElements.hasInTableScope(TAG_ID.TH)) {
               p._closeTableCell();
               startTagInRow(p, token);
           }
       }
       else {
           startTagInBody(p, token);
       }
   }
   function endTagInCell(p, token) {
       const tn = token.tagID;
       switch (tn) {
           case TAG_ID.TD:
           case TAG_ID.TH: {
               if (p.openElements.hasInTableScope(tn)) {
                   p.openElements.generateImpliedEndTags();
                   p.openElements.popUntilTagNamePopped(tn);
                   p.activeFormattingElements.clearToLastMarker();
                   p.insertionMode = InsertionMode.IN_ROW;
               }
               break;
           }
           case TAG_ID.TABLE:
           case TAG_ID.TBODY:
           case TAG_ID.TFOOT:
           case TAG_ID.THEAD:
           case TAG_ID.TR: {
               if (p.openElements.hasInTableScope(tn)) {
                   p._closeTableCell();
                   endTagInRow(p, token);
               }
               break;
           }
           case TAG_ID.BODY:
           case TAG_ID.CAPTION:
           case TAG_ID.COL:
           case TAG_ID.COLGROUP:
           case TAG_ID.HTML: {
               // Ignore token
               break;
           }
           default: {
               endTagInBody(p, token);
           }
       }
   }
   // The "in select" insertion mode
   //------------------------------------------------------------------
   function startTagInSelect(p, token) {
       switch (token.tagID) {
           case TAG_ID.HTML: {
               startTagInBody(p, token);
               break;
           }
           case TAG_ID.OPTION: {
               if (p.openElements.currentTagId === TAG_ID.OPTION) {
                   p.openElements.pop();
               }
               p._insertElement(token, NS.HTML);
               break;
           }
           case TAG_ID.OPTGROUP: {
               if (p.openElements.currentTagId === TAG_ID.OPTION) {
                   p.openElements.pop();
               }
               if (p.openElements.currentTagId === TAG_ID.OPTGROUP) {
                   p.openElements.pop();
               }
               p._insertElement(token, NS.HTML);
               break;
           }
           case TAG_ID.INPUT:
           case TAG_ID.KEYGEN:
           case TAG_ID.TEXTAREA:
           case TAG_ID.SELECT: {
               if (p.openElements.hasInSelectScope(TAG_ID.SELECT)) {
                   p.openElements.popUntilTagNamePopped(TAG_ID.SELECT);
                   p._resetInsertionMode();
                   if (token.tagID !== TAG_ID.SELECT) {
                       p._processStartTag(token);
                   }
               }
               break;
           }
           case TAG_ID.SCRIPT:
           case TAG_ID.TEMPLATE: {
               startTagInHead(p, token);
               break;
           }
           // Do nothing
       }
   }
   function endTagInSelect(p, token) {
       switch (token.tagID) {
           case TAG_ID.OPTGROUP: {
               if (p.openElements.stackTop > 0 &&
                   p.openElements.currentTagId === TAG_ID.OPTION &&
                   p.openElements.tagIDs[p.openElements.stackTop - 1] === TAG_ID.OPTGROUP) {
                   p.openElements.pop();
               }
               if (p.openElements.currentTagId === TAG_ID.OPTGROUP) {
                   p.openElements.pop();
               }
               break;
           }
           case TAG_ID.OPTION: {
               if (p.openElements.currentTagId === TAG_ID.OPTION) {
                   p.openElements.pop();
               }
               break;
           }
           case TAG_ID.SELECT: {
               if (p.openElements.hasInSelectScope(TAG_ID.SELECT)) {
                   p.openElements.popUntilTagNamePopped(TAG_ID.SELECT);
                   p._resetInsertionMode();
               }
               break;
           }
           case TAG_ID.TEMPLATE: {
               templateEndTagInHead(p, token);
               break;
           }
           // Do nothing
       }
   }
   // The "in select in table" insertion mode
   //------------------------------------------------------------------
   function startTagInSelectInTable(p, token) {
       const tn = token.tagID;
       if (tn === TAG_ID.CAPTION ||
           tn === TAG_ID.TABLE ||
           tn === TAG_ID.TBODY ||
           tn === TAG_ID.TFOOT ||
           tn === TAG_ID.THEAD ||
           tn === TAG_ID.TR ||
           tn === TAG_ID.TD ||
           tn === TAG_ID.TH) {
           p.openElements.popUntilTagNamePopped(TAG_ID.SELECT);
           p._resetInsertionMode();
           p._processStartTag(token);
       }
       else {
           startTagInSelect(p, token);
       }
   }
   function endTagInSelectInTable(p, token) {
       const tn = token.tagID;
       if (tn === TAG_ID.CAPTION ||
           tn === TAG_ID.TABLE ||
           tn === TAG_ID.TBODY ||
           tn === TAG_ID.TFOOT ||
           tn === TAG_ID.THEAD ||
           tn === TAG_ID.TR ||
           tn === TAG_ID.TD ||
           tn === TAG_ID.TH) {
           if (p.openElements.hasInTableScope(tn)) {
               p.openElements.popUntilTagNamePopped(TAG_ID.SELECT);
               p._resetInsertionMode();
               p.onEndTag(token);
           }
       }
       else {
           endTagInSelect(p, token);
       }
   }
   // The "in template" insertion mode
   //------------------------------------------------------------------
   function startTagInTemplate(p, token) {
       switch (token.tagID) {
           // First, handle tags that can start without a mode change
           case TAG_ID.BASE:
           case TAG_ID.BASEFONT:
           case TAG_ID.BGSOUND:
           case TAG_ID.LINK:
           case TAG_ID.META:
           case TAG_ID.NOFRAMES:
           case TAG_ID.SCRIPT:
           case TAG_ID.STYLE:
           case TAG_ID.TEMPLATE:
           case TAG_ID.TITLE: {
               startTagInHead(p, token);
               break;
           }
           // Re-process the token in the appropriate mode
           case TAG_ID.CAPTION:
           case TAG_ID.COLGROUP:
           case TAG_ID.TBODY:
           case TAG_ID.TFOOT:
           case TAG_ID.THEAD: {
               p.tmplInsertionModeStack[0] = InsertionMode.IN_TABLE;
               p.insertionMode = InsertionMode.IN_TABLE;
               startTagInTable(p, token);
               break;
           }
           case TAG_ID.COL: {
               p.tmplInsertionModeStack[0] = InsertionMode.IN_COLUMN_GROUP;
               p.insertionMode = InsertionMode.IN_COLUMN_GROUP;
               startTagInColumnGroup(p, token);
               break;
           }
           case TAG_ID.TR: {
               p.tmplInsertionModeStack[0] = InsertionMode.IN_TABLE_BODY;
               p.insertionMode = InsertionMode.IN_TABLE_BODY;
               startTagInTableBody(p, token);
               break;
           }
           case TAG_ID.TD:
           case TAG_ID.TH: {
               p.tmplInsertionModeStack[0] = InsertionMode.IN_ROW;
               p.insertionMode = InsertionMode.IN_ROW;
               startTagInRow(p, token);
               break;
           }
           default: {
               p.tmplInsertionModeStack[0] = InsertionMode.IN_BODY;
               p.insertionMode = InsertionMode.IN_BODY;
               startTagInBody(p, token);
           }
       }
   }
   function endTagInTemplate(p, token) {
       if (token.tagID === TAG_ID.TEMPLATE) {
           templateEndTagInHead(p, token);
       }
   }
   function eofInTemplate(p, token) {
       if (p.openElements.tmplCount > 0) {
           p.openElements.popUntilTagNamePopped(TAG_ID.TEMPLATE);
           p.activeFormattingElements.clearToLastMarker();
           p.tmplInsertionModeStack.shift();
           p._resetInsertionMode();
           p.onEof(token);
       }
       else {
           stopParsing(p, token);
       }
   }
   // The "after body" insertion mode
   //------------------------------------------------------------------
   function startTagAfterBody(p, token) {
       if (token.tagID === TAG_ID.HTML) {
           startTagInBody(p, token);
       }
       else {
           tokenAfterBody(p, token);
       }
   }
   function endTagAfterBody(p, token) {
       var _a;
       if (token.tagID === TAG_ID.HTML) {
           if (!p.fragmentContext) {
               p.insertionMode = InsertionMode.AFTER_AFTER_BODY;
           }
           //NOTE: <html> is never popped from the stack, so we need to updated
           //the end location explicitly.
           if (p.options.sourceCodeLocationInfo && p.openElements.tagIDs[0] === TAG_ID.HTML) {
               p._setEndLocation(p.openElements.items[0], token);
               // Update the body element, if it doesn't have an end tag
               const bodyElement = p.openElements.items[1];
               if (bodyElement && !((_a = p.treeAdapter.getNodeSourceCodeLocation(bodyElement)) === null || _a === void 0 ? void 0 : _a.endTag)) {
                   p._setEndLocation(bodyElement, token);
               }
           }
       }
       else {
           tokenAfterBody(p, token);
       }
   }
   function tokenAfterBody(p, token) {
       p.insertionMode = InsertionMode.IN_BODY;
       modeInBody(p, token);
   }
   // The "in frameset" insertion mode
   //------------------------------------------------------------------
   function startTagInFrameset(p, token) {
       switch (token.tagID) {
           case TAG_ID.HTML: {
               startTagInBody(p, token);
               break;
           }
           case TAG_ID.FRAMESET: {
               p._insertElement(token, NS.HTML);
               break;
           }
           case TAG_ID.FRAME: {
               p._appendElement(token, NS.HTML);
               token.ackSelfClosing = true;
               break;
           }
           case TAG_ID.NOFRAMES: {
               startTagInHead(p, token);
               break;
           }
           // Do nothing
       }
   }
   function endTagInFrameset(p, token) {
       if (token.tagID === TAG_ID.FRAMESET && !p.openElements.isRootHtmlElementCurrent()) {
           p.openElements.pop();
           if (!p.fragmentContext && p.openElements.currentTagId !== TAG_ID.FRAMESET) {
               p.insertionMode = InsertionMode.AFTER_FRAMESET;
           }
       }
   }
   // The "after frameset" insertion mode
   //------------------------------------------------------------------
   function startTagAfterFrameset(p, token) {
       switch (token.tagID) {
           case TAG_ID.HTML: {
               startTagInBody(p, token);
               break;
           }
           case TAG_ID.NOFRAMES: {
               startTagInHead(p, token);
               break;
           }
           // Do nothing
       }
   }
   function endTagAfterFrameset(p, token) {
       if (token.tagID === TAG_ID.HTML) {
           p.insertionMode = InsertionMode.AFTER_AFTER_FRAMESET;
       }
   }
   // The "after after body" insertion mode
   //------------------------------------------------------------------
   function startTagAfterAfterBody(p, token) {
       if (token.tagID === TAG_ID.HTML) {
           startTagInBody(p, token);
       }
       else {
           tokenAfterAfterBody(p, token);
       }
   }
   function tokenAfterAfterBody(p, token) {
       p.insertionMode = InsertionMode.IN_BODY;
       modeInBody(p, token);
   }
   // The "after after frameset" insertion mode
   //------------------------------------------------------------------
   function startTagAfterAfterFrameset(p, token) {
       switch (token.tagID) {
           case TAG_ID.HTML: {
               startTagInBody(p, token);
               break;
           }
           case TAG_ID.NOFRAMES: {
               startTagInHead(p, token);
               break;
           }
           // Do nothing
       }
   }
   // The rules for parsing tokens in foreign content
   //------------------------------------------------------------------
   function nullCharacterInForeignContent(p, token) {
       token.chars = REPLACEMENT_CHARACTER;
       p._insertCharacters(token);
   }
   function characterInForeignContent(p, token) {
       p._insertCharacters(token);
       p.framesetOk = false;
   }
   function popUntilHtmlOrIntegrationPoint(p) {
       while (p.treeAdapter.getNamespaceURI(p.openElements.current) !== NS.HTML &&
           !p._isIntegrationPoint(p.openElements.currentTagId, p.openElements.current)) {
           p.openElements.pop();
       }
   }
   function startTagInForeignContent(p, token) {
       if (causesExit(token)) {
           popUntilHtmlOrIntegrationPoint(p);
           p._startTagOutsideForeignContent(token);
       }
       else {
           const current = p._getAdjustedCurrentElement();
           const currentNs = p.treeAdapter.getNamespaceURI(current);
           if (currentNs === NS.MATHML) {
               adjustTokenMathMLAttrs(token);
           }
           else if (currentNs === NS.SVG) {
               adjustTokenSVGTagName(token);
               adjustTokenSVGAttrs(token);
           }
           adjustTokenXMLAttrs(token);
           if (token.selfClosing) {
               p._appendElement(token, currentNs);
           }
           else {
               p._insertElement(token, currentNs);
           }
           token.ackSelfClosing = true;
       }
   }
   function endTagInForeignContent(p, token) {
       if (token.tagID === TAG_ID.P || token.tagID === TAG_ID.BR) {
           popUntilHtmlOrIntegrationPoint(p);
           p._endTagOutsideForeignContent(token);
           return;
       }
       for (let i = p.openElements.stackTop; i > 0; i--) {
           const element = p.openElements.items[i];
           if (p.treeAdapter.getNamespaceURI(element) === NS.HTML) {
               p._endTagOutsideForeignContent(token);
               break;
           }
           const tagName = p.treeAdapter.getTagName(element);
           if (tagName.toLowerCase() === token.tagName) {
               //NOTE: update the token tag name for `_setEndLocation`.
               token.tagName = tagName;
               p.openElements.shortenToLength(i);
               break;
           }
       }
   }

   // Sets
   new Set([
       TAG_NAMES.AREA,
       TAG_NAMES.BASE,
       TAG_NAMES.BASEFONT,
       TAG_NAMES.BGSOUND,
       TAG_NAMES.BR,
       TAG_NAMES.COL,
       TAG_NAMES.EMBED,
       TAG_NAMES.FRAME,
       TAG_NAMES.HR,
       TAG_NAMES.IMG,
       TAG_NAMES.INPUT,
       TAG_NAMES.KEYGEN,
       TAG_NAMES.LINK,
       TAG_NAMES.META,
       TAG_NAMES.PARAM,
       TAG_NAMES.SOURCE,
       TAG_NAMES.TRACK,
       TAG_NAMES.WBR,
   ]);

   // Shorthands
   /**
    * Parses an HTML string.
    *
    * @param html Input HTML string.
    * @param options Parsing options.
    * @returns Document
    *
    * @example
    *
    * ```js
    * const parse5 = require('parse5');
    *
    * const document = parse5.parse('<!DOCTYPE html><html><head></head><body>Hi there!</body></html>');
    *
    * console.log(document.childNodes[1].tagName); //> 'html'
    *```
    */
   function parse$3(html, options) {
       return Parser.parse(html, options);
   }
   function parseFragment(fragmentContext, html, options) {
       if (typeof fragmentContext === 'string') {
           options = html;
           html = fragmentContext;
           fragmentContext = null;
       }
       const parser = Parser.getFragmentParser(fragmentContext, options);
       parser.tokenizer.write(html, true);
       return parser.getFragment();
   }

   function getDefaultExportFromCjs (x) {
   	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
   }

   /*!
    * Determine if an object is a Buffer
    *
    * @author   Feross Aboukhadijeh <https://feross.org>
    * @license  MIT
    */

   var isBuffer = function isBuffer (obj) {
     return obj != null && obj.constructor != null &&
       typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
   };

   var bufferLike = /*@__PURE__*/getDefaultExportFromCjs(isBuffer);

   /**
    * @typedef {import('unist').Node} Node
    * @typedef {import('unist').Point} Point
    * @typedef {import('unist').Position} Position
    */

   /**
    * @typedef NodeLike
    * @property {string} type
    * @property {PositionLike | null | undefined} [position]
    *
    * @typedef PositionLike
    * @property {PointLike | null | undefined} [start]
    * @property {PointLike | null | undefined} [end]
    *
    * @typedef PointLike
    * @property {number | null | undefined} [line]
    * @property {number | null | undefined} [column]
    * @property {number | null | undefined} [offset]
    */

   /**
    * Serialize the positional info of a point, position (start and end points),
    * or node.
    *
    * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]
    *   Node, position, or point.
    * @returns {string}
    *   Pretty printed positional info of a node (`string`).
    *
    *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)
    *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for
    *   column, `s` for `start`, and `e` for end.
    *   An empty string (`''`) is returned if the given value is neither `node`,
    *   `position`, nor `point`.
    */
   function stringifyPosition(value) {
     // Nothing.
     if (!value || typeof value !== 'object') {
       return ''
     }

     // Node.
     if ('position' in value || 'type' in value) {
       return position$2(value.position)
     }

     // Position.
     if ('start' in value || 'end' in value) {
       return position$2(value)
     }

     // Point.
     if ('line' in value || 'column' in value) {
       return point$3(value)
     }

     // ?
     return ''
   }

   /**
    * @param {Point | PointLike | null | undefined} point
    * @returns {string}
    */
   function point$3(point) {
     return index$d(point && point.line) + ':' + index$d(point && point.column)
   }

   /**
    * @param {Position | PositionLike | null | undefined} pos
    * @returns {string}
    */
   function position$2(pos) {
     return point$3(pos && pos.start) + '-' + point$3(pos && pos.end)
   }

   /**
    * @param {number | null | undefined} value
    * @returns {number}
    */
   function index$d(value) {
     return value && typeof value === 'number' ? value : 1
   }

   /**
    * @typedef {import('unist').Node} Node
    * @typedef {import('unist').Position} Position
    * @typedef {import('unist').Point} Point
    * @typedef {object & {type: string, position?: Position | undefined}} NodeLike
    */


   /**
    * Message.
    */
   class VFileMessage extends Error {
     /**
      * Create a message for `reason` at `place` from `origin`.
      *
      * When an error is passed in as `reason`, the `stack` is copied.
      *
      * @param {string | Error | VFileMessage} reason
      *   Reason for message, uses the stack and message of the error if given.
      *
      *   > 👉 **Note**: you should use markdown.
      * @param {Node | NodeLike | Position | Point | null | undefined} [place]
      *   Place in file where the message occurred.
      * @param {string | null | undefined} [origin]
      *   Place in code where the message originates (example:
      *   `'my-package:my-rule'` or `'my-rule'`).
      * @returns
      *   Instance of `VFileMessage`.
      */
     // To do: next major: expose `undefined` everywhere instead of `null`.
     constructor(reason, place, origin) {
       /** @type {[string | null, string | null]} */
       const parts = [null, null];
       /** @type {Position} */
       let position = {
         // @ts-expect-error: we always follows the structure of `position`.
         start: {line: null, column: null},
         // @ts-expect-error: "
         end: {line: null, column: null}
       };

       super();

       if (typeof place === 'string') {
         origin = place;
         place = undefined;
       }

       if (typeof origin === 'string') {
         const index = origin.indexOf(':');

         if (index === -1) {
           parts[1] = origin;
         } else {
           parts[0] = origin.slice(0, index);
           parts[1] = origin.slice(index + 1);
         }
       }

       if (place) {
         // Node.
         if ('type' in place || 'position' in place) {
           if (place.position) {
             // To do: next major: deep clone.
             // @ts-expect-error: looks like a position.
             position = place.position;
           }
         }
         // Position.
         else if ('start' in place || 'end' in place) {
           // @ts-expect-error: looks like a position.
           // To do: next major: deep clone.
           position = place;
         }
         // Point.
         else if ('line' in place || 'column' in place) {
           // To do: next major: deep clone.
           position.start = place;
         }
       }

       // Fields from `Error`.
       /**
        * Serialized positional info of error.
        *
        * On normal errors, this would be something like `ParseError`, buit in
        * `VFile` messages we use this space to show where an error happened.
        */
       this.name = stringifyPosition(place) || '1:1';

       /**
        * Reason for message.
        *
        * @type {string}
        */
       this.message = typeof reason === 'object' ? reason.message : reason;

       /**
        * Stack of message.
        *
        * This is used by normal errors to show where something happened in
        * programming code, irrelevant for `VFile` messages,
        *
        * @type {string}
        */
       this.stack = '';

       if (typeof reason === 'object' && reason.stack) {
         this.stack = reason.stack;
       }

       /**
        * Reason for message.
        *
        * > 👉 **Note**: you should use markdown.
        *
        * @type {string}
        */
       this.reason = this.message;

       /* eslint-disable no-unused-expressions */
       /**
        * State of problem.
        *
        * * `true` — marks associated file as no longer processable (error)
        * * `false` — necessitates a (potential) change (warning)
        * * `null | undefined` — for things that might not need changing (info)
        *
        * @type {boolean | null | undefined}
        */
       this.fatal;

       /**
        * Starting line of error.
        *
        * @type {number | null}
        */
       this.line = position.start.line;

       /**
        * Starting column of error.
        *
        * @type {number | null}
        */
       this.column = position.start.column;

       /**
        * Full unist position.
        *
        * @type {Position | null}
        */
       this.position = position;

       /**
        * Namespace of message (example: `'my-package'`).
        *
        * @type {string | null}
        */
       this.source = parts[0];

       /**
        * Category of message (example: `'my-rule'`).
        *
        * @type {string | null}
        */
       this.ruleId = parts[1];

       /**
        * Path of a file (used throughout the `VFile` ecosystem).
        *
        * @type {string | null}
        */
       this.file;

       // The following fields are “well known”.
       // Not standard.
       // Feel free to add other non-standard fields to your messages.

       /**
        * Specify the source value that’s being reported, which is deemed
        * incorrect.
        *
        * @type {string | null}
        */
       this.actual;

       /**
        * Suggest acceptable values that can be used instead of `actual`.
        *
        * @type {Array<string> | null}
        */
       this.expected;

       /**
        * Link to docs for the message.
        *
        * > 👉 **Note**: this must be an absolute URL that can be passed as `x`
        * > to `new URL(x)`.
        *
        * @type {string | null}
        */
       this.url;

       /**
        * Long form description of the message (you should use markdown).
        *
        * @type {string | null}
        */
       this.note;
       /* eslint-enable no-unused-expressions */
     }
   }

   VFileMessage.prototype.file = '';
   VFileMessage.prototype.name = '';
   VFileMessage.prototype.reason = '';
   VFileMessage.prototype.message = '';
   VFileMessage.prototype.stack = '';
   VFileMessage.prototype.fatal = null;
   VFileMessage.prototype.column = null;
   VFileMessage.prototype.line = null;
   VFileMessage.prototype.source = null;
   VFileMessage.prototype.ruleId = null;
   VFileMessage.prototype.position = null;

   // A derivative work based on:
   // <https://github.com/browserify/path-browserify>.
   // Which is licensed:
   //
   // MIT License
   //
   // Copyright (c) 2013 James Halliday
   //
   // Permission is hereby granted, free of charge, to any person obtaining a copy of
   // this software and associated documentation files (the "Software"), to deal in
   // the Software without restriction, including without limitation the rights to
   // use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   // the Software, and to permit persons to whom the Software is furnished to do so,
   // subject to the following conditions:
   //
   // The above copyright notice and this permission notice shall be included in all
   // copies or substantial portions of the Software.
   //
   // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
   // FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
   // COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
   // IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
   // CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
   // A derivative work based on:
   //
   // Parts of that are extracted from Node’s internal `path` module:
   // <https://github.com/nodejs/node/blob/master/lib/path.js>.
   // Which is licensed:
   //
   // Copyright Joyent, Inc. and other Node contributors.
   //
   // Permission is hereby granted, free of charge, to any person obtaining a
   // copy of this software and associated documentation files (the
   // "Software"), to deal in the Software without restriction, including
   // without limitation the rights to use, copy, modify, merge, publish,
   // distribute, sublicense, and/or sell copies of the Software, and to permit
   // persons to whom the Software is furnished to do so, subject to the
   // following conditions:
   //
   // The above copyright notice and this permission notice shall be included
   // in all copies or substantial portions of the Software.
   //
   // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
   // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
   // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
   // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
   // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
   // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
   // USE OR OTHER DEALINGS IN THE SOFTWARE.

   const path = {basename, dirname, extname, join: join$1, sep: '/'};

   /* eslint-disable max-depth, complexity */

   /**
    * Get the basename from a path.
    *
    * @param {string} path
    *   File path.
    * @param {string | undefined} [ext]
    *   Extension to strip.
    * @returns {string}
    *   Stem or basename.
    */
   function basename(path, ext) {
     if (ext !== undefined && typeof ext !== 'string') {
       throw new TypeError('"ext" argument must be a string')
     }

     assertPath$1(path);
     let start = 0;
     let end = -1;
     let index = path.length;
     /** @type {boolean | undefined} */
     let seenNonSlash;

     if (ext === undefined || ext.length === 0 || ext.length > path.length) {
       while (index--) {
         if (path.charCodeAt(index) === 47 /* `/` */) {
           // If we reached a path separator that was not part of a set of path
           // separators at the end of the string, stop now.
           if (seenNonSlash) {
             start = index + 1;
             break
           }
         } else if (end < 0) {
           // We saw the first non-path separator, mark this as the end of our
           // path component.
           seenNonSlash = true;
           end = index + 1;
         }
       }

       return end < 0 ? '' : path.slice(start, end)
     }

     if (ext === path) {
       return ''
     }

     let firstNonSlashEnd = -1;
     let extIndex = ext.length - 1;

     while (index--) {
       if (path.charCodeAt(index) === 47 /* `/` */) {
         // If we reached a path separator that was not part of a set of path
         // separators at the end of the string, stop now.
         if (seenNonSlash) {
           start = index + 1;
           break
         }
       } else {
         if (firstNonSlashEnd < 0) {
           // We saw the first non-path separator, remember this index in case
           // we need it if the extension ends up not matching.
           seenNonSlash = true;
           firstNonSlashEnd = index + 1;
         }

         if (extIndex > -1) {
           // Try to match the explicit extension.
           if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {
             if (extIndex < 0) {
               // We matched the extension, so mark this as the end of our path
               // component
               end = index;
             }
           } else {
             // Extension does not match, so our result is the entire path
             // component
             extIndex = -1;
             end = firstNonSlashEnd;
           }
         }
       }
     }

     if (start === end) {
       end = firstNonSlashEnd;
     } else if (end < 0) {
       end = path.length;
     }

     return path.slice(start, end)
   }

   /**
    * Get the dirname from a path.
    *
    * @param {string} path
    *   File path.
    * @returns {string}
    *   File path.
    */
   function dirname(path) {
     assertPath$1(path);

     if (path.length === 0) {
       return '.'
     }

     let end = -1;
     let index = path.length;
     /** @type {boolean | undefined} */
     let unmatchedSlash;

     // Prefix `--` is important to not run on `0`.
     while (--index) {
       if (path.charCodeAt(index) === 47 /* `/` */) {
         if (unmatchedSlash) {
           end = index;
           break
         }
       } else if (!unmatchedSlash) {
         // We saw the first non-path separator
         unmatchedSlash = true;
       }
     }

     return end < 0
       ? path.charCodeAt(0) === 47 /* `/` */
         ? '/'
         : '.'
       : end === 1 && path.charCodeAt(0) === 47 /* `/` */
       ? '//'
       : path.slice(0, end)
   }

   /**
    * Get an extname from a path.
    *
    * @param {string} path
    *   File path.
    * @returns {string}
    *   Extname.
    */
   function extname(path) {
     assertPath$1(path);

     let index = path.length;

     let end = -1;
     let startPart = 0;
     let startDot = -1;
     // Track the state of characters (if any) we see before our first dot and
     // after any path separator we find.
     let preDotState = 0;
     /** @type {boolean | undefined} */
     let unmatchedSlash;

     while (index--) {
       const code = path.charCodeAt(index);

       if (code === 47 /* `/` */) {
         // If we reached a path separator that was not part of a set of path
         // separators at the end of the string, stop now.
         if (unmatchedSlash) {
           startPart = index + 1;
           break
         }

         continue
       }

       if (end < 0) {
         // We saw the first non-path separator, mark this as the end of our
         // extension.
         unmatchedSlash = true;
         end = index + 1;
       }

       if (code === 46 /* `.` */) {
         // If this is our first dot, mark it as the start of our extension.
         if (startDot < 0) {
           startDot = index;
         } else if (preDotState !== 1) {
           preDotState = 1;
         }
       } else if (startDot > -1) {
         // We saw a non-dot and non-path separator before our dot, so we should
         // have a good chance at having a non-empty extension.
         preDotState = -1;
       }
     }

     if (
       startDot < 0 ||
       end < 0 ||
       // We saw a non-dot character immediately before the dot.
       preDotState === 0 ||
       // The (right-most) trimmed path component is exactly `..`.
       (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)
     ) {
       return ''
     }

     return path.slice(startDot, end)
   }

   /**
    * Join segments from a path.
    *
    * @param {Array<string>} segments
    *   Path segments.
    * @returns {string}
    *   File path.
    */
   function join$1(...segments) {
     let index = -1;
     /** @type {string | undefined} */
     let joined;

     while (++index < segments.length) {
       assertPath$1(segments[index]);

       if (segments[index]) {
         joined =
           joined === undefined ? segments[index] : joined + '/' + segments[index];
       }
     }

     return joined === undefined ? '.' : normalize$1(joined)
   }

   /**
    * Normalize a basic file path.
    *
    * @param {string} path
    *   File path.
    * @returns {string}
    *   File path.
    */
   // Note: `normalize` is not exposed as `path.normalize`, so some code is
   // manually removed from it.
   function normalize$1(path) {
     assertPath$1(path);

     const absolute = path.charCodeAt(0) === 47; /* `/` */

     // Normalize the path according to POSIX rules.
     let value = normalizeString(path, !absolute);

     if (value.length === 0 && !absolute) {
       value = '.';
     }

     if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {
       value += '/';
     }

     return absolute ? '/' + value : value
   }

   /**
    * Resolve `.` and `..` elements in a path with directory names.
    *
    * @param {string} path
    *   File path.
    * @param {boolean} allowAboveRoot
    *   Whether `..` can move above root.
    * @returns {string}
    *   File path.
    */
   function normalizeString(path, allowAboveRoot) {
     let result = '';
     let lastSegmentLength = 0;
     let lastSlash = -1;
     let dots = 0;
     let index = -1;
     /** @type {number | undefined} */
     let code;
     /** @type {number} */
     let lastSlashIndex;

     while (++index <= path.length) {
       if (index < path.length) {
         code = path.charCodeAt(index);
       } else if (code === 47 /* `/` */) {
         break
       } else {
         code = 47; /* `/` */
       }

       if (code === 47 /* `/` */) {
         if (lastSlash === index - 1 || dots === 1) ; else if (lastSlash !== index - 1 && dots === 2) {
           if (
             result.length < 2 ||
             lastSegmentLength !== 2 ||
             result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||
             result.charCodeAt(result.length - 2) !== 46 /* `.` */
           ) {
             if (result.length > 2) {
               lastSlashIndex = result.lastIndexOf('/');

               if (lastSlashIndex !== result.length - 1) {
                 if (lastSlashIndex < 0) {
                   result = '';
                   lastSegmentLength = 0;
                 } else {
                   result = result.slice(0, lastSlashIndex);
                   lastSegmentLength = result.length - 1 - result.lastIndexOf('/');
                 }

                 lastSlash = index;
                 dots = 0;
                 continue
               }
             } else if (result.length > 0) {
               result = '';
               lastSegmentLength = 0;
               lastSlash = index;
               dots = 0;
               continue
             }
           }

           if (allowAboveRoot) {
             result = result.length > 0 ? result + '/..' : '..';
             lastSegmentLength = 2;
           }
         } else {
           if (result.length > 0) {
             result += '/' + path.slice(lastSlash + 1, index);
           } else {
             result = path.slice(lastSlash + 1, index);
           }

           lastSegmentLength = index - lastSlash - 1;
         }

         lastSlash = index;
         dots = 0;
       } else if (code === 46 /* `.` */ && dots > -1) {
         dots++;
       } else {
         dots = -1;
       }
     }

     return result
   }

   /**
    * Make sure `path` is a string.
    *
    * @param {string} path
    *   File path.
    * @returns {asserts path is string}
    *   Nothing.
    */
   function assertPath$1(path) {
     if (typeof path !== 'string') {
       throw new TypeError(
         'Path must be a string. Received ' + JSON.stringify(path)
       )
     }
   }

   /* eslint-enable max-depth, complexity */

   // Somewhat based on:
   // <https://github.com/defunctzombie/node-process/blob/master/browser.js>.
   // But I don’t think one tiny line of code can be copyrighted. 😅
   const proc = {cwd};

   function cwd() {
     return '/'
   }

   /**
    * @typedef URL
    * @property {string} hash
    * @property {string} host
    * @property {string} hostname
    * @property {string} href
    * @property {string} origin
    * @property {string} password
    * @property {string} pathname
    * @property {string} port
    * @property {string} protocol
    * @property {string} search
    * @property {any} searchParams
    * @property {string} username
    * @property {() => string} toString
    * @property {() => string} toJSON
    */

   /**
    * Check if `fileUrlOrPath` looks like a URL.
    *
    * @param {unknown} fileUrlOrPath
    *   File path or URL.
    * @returns {fileUrlOrPath is URL}
    *   Whether it’s a URL.
    */
   // From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>
   function isUrl(fileUrlOrPath) {
     return (
       fileUrlOrPath !== null &&
       typeof fileUrlOrPath === 'object' &&
       // @ts-expect-error: indexable.
       fileUrlOrPath.href &&
       // @ts-expect-error: indexable.
       fileUrlOrPath.origin
     )
   }

   /// <reference lib="dom" />


   // See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>

   /**
    * @param {string | URL} path
    *   File URL.
    * @returns {string}
    *   File URL.
    */
   function urlToPath(path) {
     if (typeof path === 'string') {
       path = new URL(path);
     } else if (!isUrl(path)) {
       /** @type {NodeJS.ErrnoException} */
       const error = new TypeError(
         'The "path" argument must be of type string or an instance of URL. Received `' +
           path +
           '`'
       );
       error.code = 'ERR_INVALID_ARG_TYPE';
       throw error
     }

     if (path.protocol !== 'file:') {
       /** @type {NodeJS.ErrnoException} */
       const error = new TypeError('The URL must be of scheme file');
       error.code = 'ERR_INVALID_URL_SCHEME';
       throw error
     }

     return getPathFromURLPosix(path)
   }

   /**
    * Get a path from a POSIX URL.
    *
    * @param {URL} url
    *   URL.
    * @returns {string}
    *   File path.
    */
   function getPathFromURLPosix(url) {
     if (url.hostname !== '') {
       /** @type {NodeJS.ErrnoException} */
       const error = new TypeError(
         'File URL host must be "localhost" or empty on darwin'
       );
       error.code = 'ERR_INVALID_FILE_URL_HOST';
       throw error
     }

     const pathname = url.pathname;
     let index = -1;

     while (++index < pathname.length) {
       if (
         pathname.charCodeAt(index) === 37 /* `%` */ &&
         pathname.charCodeAt(index + 1) === 50 /* `2` */
       ) {
         const third = pathname.charCodeAt(index + 2);
         if (third === 70 /* `F` */ || third === 102 /* `f` */) {
           /** @type {NodeJS.ErrnoException} */
           const error = new TypeError(
             'File URL path must not include encoded / characters'
           );
           error.code = 'ERR_INVALID_FILE_URL_PATH';
           throw error
         }
       }
     }

     return decodeURIComponent(pathname)
   }

   /**
    * @typedef {import('unist').Node} Node
    * @typedef {import('unist').Position} Position
    * @typedef {import('unist').Point} Point
    * @typedef {import('./minurl.shared.js').URL} URL
    * @typedef {import('../index.js').Data} Data
    * @typedef {import('../index.js').Value} Value
    */


   /**
    * Order of setting (least specific to most), we need this because otherwise
    * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a
    * stem can be set.
    *
    * @type {Array<'basename' | 'dirname' | 'extname' | 'history' | 'path' | 'stem'>}
    */
   const order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname'];

   class VFile {
     /**
      * Create a new virtual file.
      *
      * `options` is treated as:
      *
      * *   `string` or `Buffer` — `{value: options}`
      * *   `URL` — `{path: options}`
      * *   `VFile` — shallow copies its data over to the new file
      * *   `object` — all fields are shallow copied over to the new file
      *
      * Path related fields are set in the following order (least specific to
      * most specific): `history`, `path`, `basename`, `stem`, `extname`,
      * `dirname`.
      *
      * You cannot set `dirname` or `extname` without setting either `history`,
      * `path`, `basename`, or `stem` too.
      *
      * @param {Compatible | null | undefined} [value]
      *   File value.
      * @returns
      *   New instance.
      */
     constructor(value) {
       /** @type {Options | VFile} */
       let options;

       if (!value) {
         options = {};
       } else if (typeof value === 'string' || buffer(value)) {
         options = {value};
       } else if (isUrl(value)) {
         options = {path: value};
       } else {
         options = value;
       }

       /**
        * Place to store custom information (default: `{}`).
        *
        * It’s OK to store custom data directly on the file but moving it to
        * `data` is recommended.
        *
        * @type {Data}
        */
       this.data = {};

       /**
        * List of messages associated with the file.
        *
        * @type {Array<VFileMessage>}
        */
       this.messages = [];

       /**
        * List of filepaths the file moved between.
        *
        * The first is the original path and the last is the current path.
        *
        * @type {Array<string>}
        */
       this.history = [];

       /**
        * Base of `path` (default: `process.cwd()` or `'/'` in browsers).
        *
        * @type {string}
        */
       this.cwd = proc.cwd();

       /* eslint-disable no-unused-expressions */
       /**
        * Raw value.
        *
        * @type {Value}
        */
       this.value;

       // The below are non-standard, they are “well-known”.
       // As in, used in several tools.

       /**
        * Whether a file was saved to disk.
        *
        * This is used by vfile reporters.
        *
        * @type {boolean}
        */
       this.stored;

       /**
        * Custom, non-string, compiled, representation.
        *
        * This is used by unified to store non-string results.
        * One example is when turning markdown into React nodes.
        *
        * @type {unknown}
        */
       this.result;

       /**
        * Source map.
        *
        * This type is equivalent to the `RawSourceMap` type from the `source-map`
        * module.
        *
        * @type {Map | null | undefined}
        */
       this.map;
       /* eslint-enable no-unused-expressions */

       // Set path related properties in the correct order.
       let index = -1;

       while (++index < order.length) {
         const prop = order[index];

         // Note: we specifically use `in` instead of `hasOwnProperty` to accept
         // `vfile`s too.
         if (
           prop in options &&
           options[prop] !== undefined &&
           options[prop] !== null
         ) {
           // @ts-expect-error: TS doesn’t understand basic reality.
           this[prop] = prop === 'history' ? [...options[prop]] : options[prop];
         }
       }

       /** @type {string} */
       let prop;

       // Set non-path related properties.
       for (prop in options) {
         // @ts-expect-error: fine to set other things.
         if (!order.includes(prop)) {
           // @ts-expect-error: fine to set other things.
           this[prop] = options[prop];
         }
       }
     }

     /**
      * Get the full path (example: `'~/index.min.js'`).
      *
      * @returns {string}
      */
     get path() {
       return this.history[this.history.length - 1]
     }

     /**
      * Set the full path (example: `'~/index.min.js'`).
      *
      * Cannot be nullified.
      * You can set a file URL (a `URL` object with a `file:` protocol) which will
      * be turned into a path with `url.fileURLToPath`.
      *
      * @param {string | URL} path
      */
     set path(path) {
       if (isUrl(path)) {
         path = urlToPath(path);
       }

       assertNonEmpty(path, 'path');

       if (this.path !== path) {
         this.history.push(path);
       }
     }

     /**
      * Get the parent path (example: `'~'`).
      */
     get dirname() {
       return typeof this.path === 'string' ? path.dirname(this.path) : undefined
     }

     /**
      * Set the parent path (example: `'~'`).
      *
      * Cannot be set if there’s no `path` yet.
      */
     set dirname(dirname) {
       assertPath(this.basename, 'dirname');
       this.path = path.join(dirname || '', this.basename);
     }

     /**
      * Get the basename (including extname) (example: `'index.min.js'`).
      */
     get basename() {
       return typeof this.path === 'string' ? path.basename(this.path) : undefined
     }

     /**
      * Set basename (including extname) (`'index.min.js'`).
      *
      * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
      * on windows).
      * Cannot be nullified (use `file.path = file.dirname` instead).
      */
     set basename(basename) {
       assertNonEmpty(basename, 'basename');
       assertPart(basename, 'basename');
       this.path = path.join(this.dirname || '', basename);
     }

     /**
      * Get the extname (including dot) (example: `'.js'`).
      */
     get extname() {
       return typeof this.path === 'string' ? path.extname(this.path) : undefined
     }

     /**
      * Set the extname (including dot) (example: `'.js'`).
      *
      * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
      * on windows).
      * Cannot be set if there’s no `path` yet.
      */
     set extname(extname) {
       assertPart(extname, 'extname');
       assertPath(this.dirname, 'extname');

       if (extname) {
         if (extname.charCodeAt(0) !== 46 /* `.` */) {
           throw new Error('`extname` must start with `.`')
         }

         if (extname.includes('.', 1)) {
           throw new Error('`extname` cannot contain multiple dots')
         }
       }

       this.path = path.join(this.dirname, this.stem + (extname || ''));
     }

     /**
      * Get the stem (basename w/o extname) (example: `'index.min'`).
      */
     get stem() {
       return typeof this.path === 'string'
         ? path.basename(this.path, this.extname)
         : undefined
     }

     /**
      * Set the stem (basename w/o extname) (example: `'index.min'`).
      *
      * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
      * on windows).
      * Cannot be nullified (use `file.path = file.dirname` instead).
      */
     set stem(stem) {
       assertNonEmpty(stem, 'stem');
       assertPart(stem, 'stem');
       this.path = path.join(this.dirname || '', stem + (this.extname || ''));
     }

     /**
      * Serialize the file.
      *
      * @param {BufferEncoding | null | undefined} [encoding='utf8']
      *   Character encoding to understand `value` as when it’s a `Buffer`
      *   (default: `'utf8'`).
      * @returns {string}
      *   Serialized file.
      */
     toString(encoding) {
       return (this.value || '').toString(encoding || undefined)
     }

     /**
      * Create a warning message associated with the file.
      *
      * Its `fatal` is set to `false` and `file` is set to the current file path.
      * Its added to `file.messages`.
      *
      * @param {string | Error | VFileMessage} reason
      *   Reason for message, uses the stack and message of the error if given.
      * @param {Node | NodeLike | Position | Point | null | undefined} [place]
      *   Place in file where the message occurred.
      * @param {string | null | undefined} [origin]
      *   Place in code where the message originates (example:
      *   `'my-package:my-rule'` or `'my-rule'`).
      * @returns {VFileMessage}
      *   Message.
      */
     message(reason, place, origin) {
       const message = new VFileMessage(reason, place, origin);

       if (this.path) {
         message.name = this.path + ':' + message.name;
         message.file = this.path;
       }

       message.fatal = false;

       this.messages.push(message);

       return message
     }

     /**
      * Create an info message associated with the file.
      *
      * Its `fatal` is set to `null` and `file` is set to the current file path.
      * Its added to `file.messages`.
      *
      * @param {string | Error | VFileMessage} reason
      *   Reason for message, uses the stack and message of the error if given.
      * @param {Node | NodeLike | Position | Point | null | undefined} [place]
      *   Place in file where the message occurred.
      * @param {string | null | undefined} [origin]
      *   Place in code where the message originates (example:
      *   `'my-package:my-rule'` or `'my-rule'`).
      * @returns {VFileMessage}
      *   Message.
      */
     info(reason, place, origin) {
       const message = this.message(reason, place, origin);

       message.fatal = null;

       return message
     }

     /**
      * Create a fatal error associated with the file.
      *
      * Its `fatal` is set to `true` and `file` is set to the current file path.
      * Its added to `file.messages`.
      *
      * > 👉 **Note**: a fatal error means that a file is no longer processable.
      *
      * @param {string | Error | VFileMessage} reason
      *   Reason for message, uses the stack and message of the error if given.
      * @param {Node | NodeLike | Position | Point | null | undefined} [place]
      *   Place in file where the message occurred.
      * @param {string | null | undefined} [origin]
      *   Place in code where the message originates (example:
      *   `'my-package:my-rule'` or `'my-rule'`).
      * @returns {never}
      *   Message.
      * @throws {VFileMessage}
      *   Message.
      */
     fail(reason, place, origin) {
       const message = this.message(reason, place, origin);

       message.fatal = true;

       throw message
     }
   }

   /**
    * Assert that `part` is not a path (as in, does not contain `path.sep`).
    *
    * @param {string | null | undefined} part
    *   File path part.
    * @param {string} name
    *   Part name.
    * @returns {void}
    *   Nothing.
    */
   function assertPart(part, name) {
     if (part && part.includes(path.sep)) {
       throw new Error(
         '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'
       )
     }
   }

   /**
    * Assert that `part` is not empty.
    *
    * @param {string | undefined} part
    *   Thing.
    * @param {string} name
    *   Part name.
    * @returns {asserts part is string}
    *   Nothing.
    */
   function assertNonEmpty(part, name) {
     if (!part) {
       throw new Error('`' + name + '` cannot be empty')
     }
   }

   /**
    * Assert `path` exists.
    *
    * @param {string | undefined} path
    *   Path.
    * @param {string} name
    *   Dependency name.
    * @returns {asserts path is string}
    *   Nothing.
    */
   function assertPath(path, name) {
     if (!path) {
       throw new Error('Setting `' + name + '` requires `path` to be set too')
     }
   }

   /**
    * Assert `value` is a buffer.
    *
    * @param {unknown} value
    *   thing.
    * @returns {value is Buffer}
    *   Whether `value` is a Node.js buffer.
    */
   function buffer(value) {
     return bufferLike(value)
   }

   /**
    * @typedef {import('./info.js').Info} Info
    * @typedef {Record<string, Info>} Properties
    * @typedef {Record<string, string>} Normal
    */

   class Schema {
     /**
      * @constructor
      * @param {Properties} property
      * @param {Normal} normal
      * @param {string} [space]
      */
     constructor(property, normal, space) {
       this.property = property;
       this.normal = normal;
       if (space) {
         this.space = space;
       }
     }
   }

   /** @type {Properties} */
   Schema.prototype.property = {};
   /** @type {Normal} */
   Schema.prototype.normal = {};
   /** @type {string|null} */
   Schema.prototype.space = null;

   /**
    * @typedef {import('./schema.js').Properties} Properties
    * @typedef {import('./schema.js').Normal} Normal
    */


   /**
    * @param {Schema[]} definitions
    * @param {string} [space]
    * @returns {Schema}
    */
   function merge(definitions, space) {
     /** @type {Properties} */
     const property = {};
     /** @type {Normal} */
     const normal = {};
     let index = -1;

     while (++index < definitions.length) {
       Object.assign(property, definitions[index].property);
       Object.assign(normal, definitions[index].normal);
     }

     return new Schema(property, normal, space)
   }

   /**
    * @param {string} value
    * @returns {string}
    */
   function normalize(value) {
     return value.toLowerCase()
   }

   class Info {
     /**
      * @constructor
      * @param {string} property
      * @param {string} attribute
      */
     constructor(property, attribute) {
       /** @type {string} */
       this.property = property;
       /** @type {string} */
       this.attribute = attribute;
     }
   }

   /** @type {string|null} */
   Info.prototype.space = null;
   Info.prototype.boolean = false;
   Info.prototype.booleanish = false;
   Info.prototype.overloadedBoolean = false;
   Info.prototype.number = false;
   Info.prototype.commaSeparated = false;
   Info.prototype.spaceSeparated = false;
   Info.prototype.commaOrSpaceSeparated = false;
   Info.prototype.mustUseProperty = false;
   Info.prototype.defined = false;

   let powers = 0;

   const boolean = increment();
   const booleanish = increment();
   const overloadedBoolean = increment();
   const number$1 = increment();
   const spaceSeparated = increment();
   const commaSeparated = increment();
   const commaOrSpaceSeparated = increment();

   function increment() {
     return 2 ** ++powers
   }

   var types$6 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      boolean: boolean,
      booleanish: booleanish,
      commaOrSpaceSeparated: commaOrSpaceSeparated,
      commaSeparated: commaSeparated,
      number: number$1,
      overloadedBoolean: overloadedBoolean,
      spaceSeparated: spaceSeparated
   });

   /** @type {Array<keyof types>} */
   // @ts-expect-error: hush.
   const checks = Object.keys(types$6);

   class DefinedInfo extends Info {
     /**
      * @constructor
      * @param {string} property
      * @param {string} attribute
      * @param {number|null} [mask]
      * @param {string} [space]
      */
     constructor(property, attribute, mask, space) {
       let index = -1;

       super(property, attribute);

       mark(this, 'space', space);

       if (typeof mask === 'number') {
         while (++index < checks.length) {
           const check = checks[index];
           mark(this, checks[index], (mask & types$6[check]) === types$6[check]);
         }
       }
     }
   }

   DefinedInfo.prototype.defined = true;

   /**
    * @param {DefinedInfo} values
    * @param {string} key
    * @param {unknown} value
    */
   function mark(values, key, value) {
     if (value) {
       // @ts-expect-error: assume `value` matches the expected value of `key`.
       values[key] = value;
     }
   }

   /**
    * @typedef {import('./schema.js').Properties} Properties
    * @typedef {import('./schema.js').Normal} Normal
    *
    * @typedef {Record<string, string>} Attributes
    *
    * @typedef {Object} Definition
    * @property {Record<string, number|null>} properties
    * @property {(attributes: Attributes, property: string) => string} transform
    * @property {string} [space]
    * @property {Attributes} [attributes]
    * @property {Array<string>} [mustUseProperty]
    */


   const own$b = {}.hasOwnProperty;

   /**
    * @param {Definition} definition
    * @returns {Schema}
    */
   function create$3(definition) {
     /** @type {Properties} */
     const property = {};
     /** @type {Normal} */
     const normal = {};
     /** @type {string} */
     let prop;

     for (prop in definition.properties) {
       if (own$b.call(definition.properties, prop)) {
         const value = definition.properties[prop];
         const info = new DefinedInfo(
           prop,
           definition.transform(definition.attributes || {}, prop),
           value,
           definition.space
         );

         if (
           definition.mustUseProperty &&
           definition.mustUseProperty.includes(prop)
         ) {
           info.mustUseProperty = true;
         }

         property[prop] = info;

         normal[normalize(prop)] = prop;
         normal[normalize(info.attribute)] = prop;
       }
     }

     return new Schema(property, normal, definition.space)
   }

   const xlink = create$3({
     space: 'xlink',
     transform(_, prop) {
       return 'xlink:' + prop.slice(5).toLowerCase()
     },
     properties: {
       xLinkActuate: null,
       xLinkArcRole: null,
       xLinkHref: null,
       xLinkRole: null,
       xLinkShow: null,
       xLinkTitle: null,
       xLinkType: null
     }
   });

   const xml$1 = create$3({
     space: 'xml',
     transform(_, prop) {
       return 'xml:' + prop.slice(3).toLowerCase()
     },
     properties: {xmlLang: null, xmlBase: null, xmlSpace: null}
   });

   /**
    * @param {Record<string, string>} attributes
    * @param {string} attribute
    * @returns {string}
    */
   function caseSensitiveTransform(attributes, attribute) {
     return attribute in attributes ? attributes[attribute] : attribute
   }

   /**
    * @param {Record<string, string>} attributes
    * @param {string} property
    * @returns {string}
    */
   function caseInsensitiveTransform(attributes, property) {
     return caseSensitiveTransform(attributes, property.toLowerCase())
   }

   const xmlns = create$3({
     space: 'xmlns',
     attributes: {xmlnsxlink: 'xmlns:xlink'},
     transform: caseInsensitiveTransform,
     properties: {xmlns: null, xmlnsXLink: null}
   });

   const aria = create$3({
     transform(_, prop) {
       return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()
     },
     properties: {
       ariaActiveDescendant: null,
       ariaAtomic: booleanish,
       ariaAutoComplete: null,
       ariaBusy: booleanish,
       ariaChecked: booleanish,
       ariaColCount: number$1,
       ariaColIndex: number$1,
       ariaColSpan: number$1,
       ariaControls: spaceSeparated,
       ariaCurrent: null,
       ariaDescribedBy: spaceSeparated,
       ariaDetails: null,
       ariaDisabled: booleanish,
       ariaDropEffect: spaceSeparated,
       ariaErrorMessage: null,
       ariaExpanded: booleanish,
       ariaFlowTo: spaceSeparated,
       ariaGrabbed: booleanish,
       ariaHasPopup: null,
       ariaHidden: booleanish,
       ariaInvalid: null,
       ariaKeyShortcuts: null,
       ariaLabel: null,
       ariaLabelledBy: spaceSeparated,
       ariaLevel: number$1,
       ariaLive: null,
       ariaModal: booleanish,
       ariaMultiLine: booleanish,
       ariaMultiSelectable: booleanish,
       ariaOrientation: null,
       ariaOwns: spaceSeparated,
       ariaPlaceholder: null,
       ariaPosInSet: number$1,
       ariaPressed: booleanish,
       ariaReadOnly: booleanish,
       ariaRelevant: null,
       ariaRequired: booleanish,
       ariaRoleDescription: spaceSeparated,
       ariaRowCount: number$1,
       ariaRowIndex: number$1,
       ariaRowSpan: number$1,
       ariaSelected: booleanish,
       ariaSetSize: number$1,
       ariaSort: null,
       ariaValueMax: number$1,
       ariaValueMin: number$1,
       ariaValueNow: number$1,
       ariaValueText: null,
       role: null
     }
   });

   const html$5 = create$3({
     space: 'html',
     attributes: {
       acceptcharset: 'accept-charset',
       classname: 'class',
       htmlfor: 'for',
       httpequiv: 'http-equiv'
     },
     transform: caseInsensitiveTransform,
     mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],
     properties: {
       // Standard Properties.
       abbr: null,
       accept: commaSeparated,
       acceptCharset: spaceSeparated,
       accessKey: spaceSeparated,
       action: null,
       allow: null,
       allowFullScreen: boolean,
       allowPaymentRequest: boolean,
       allowUserMedia: boolean,
       alt: null,
       as: null,
       async: boolean,
       autoCapitalize: null,
       autoComplete: spaceSeparated,
       autoFocus: boolean,
       autoPlay: boolean,
       capture: boolean,
       charSet: null,
       checked: boolean,
       cite: null,
       className: spaceSeparated,
       cols: number$1,
       colSpan: null,
       content: null,
       contentEditable: booleanish,
       controls: boolean,
       controlsList: spaceSeparated,
       coords: number$1 | commaSeparated,
       crossOrigin: null,
       data: null,
       dateTime: null,
       decoding: null,
       default: boolean,
       defer: boolean,
       dir: null,
       dirName: null,
       disabled: boolean,
       download: overloadedBoolean,
       draggable: booleanish,
       encType: null,
       enterKeyHint: null,
       form: null,
       formAction: null,
       formEncType: null,
       formMethod: null,
       formNoValidate: boolean,
       formTarget: null,
       headers: spaceSeparated,
       height: number$1,
       hidden: boolean,
       high: number$1,
       href: null,
       hrefLang: null,
       htmlFor: spaceSeparated,
       httpEquiv: spaceSeparated,
       id: null,
       imageSizes: null,
       imageSrcSet: null,
       inputMode: null,
       integrity: null,
       is: null,
       isMap: boolean,
       itemId: null,
       itemProp: spaceSeparated,
       itemRef: spaceSeparated,
       itemScope: boolean,
       itemType: spaceSeparated,
       kind: null,
       label: null,
       lang: null,
       language: null,
       list: null,
       loading: null,
       loop: boolean,
       low: number$1,
       manifest: null,
       max: null,
       maxLength: number$1,
       media: null,
       method: null,
       min: null,
       minLength: number$1,
       multiple: boolean,
       muted: boolean,
       name: null,
       nonce: null,
       noModule: boolean,
       noValidate: boolean,
       onAbort: null,
       onAfterPrint: null,
       onAuxClick: null,
       onBeforeMatch: null,
       onBeforePrint: null,
       onBeforeUnload: null,
       onBlur: null,
       onCancel: null,
       onCanPlay: null,
       onCanPlayThrough: null,
       onChange: null,
       onClick: null,
       onClose: null,
       onContextLost: null,
       onContextMenu: null,
       onContextRestored: null,
       onCopy: null,
       onCueChange: null,
       onCut: null,
       onDblClick: null,
       onDrag: null,
       onDragEnd: null,
       onDragEnter: null,
       onDragExit: null,
       onDragLeave: null,
       onDragOver: null,
       onDragStart: null,
       onDrop: null,
       onDurationChange: null,
       onEmptied: null,
       onEnded: null,
       onError: null,
       onFocus: null,
       onFormData: null,
       onHashChange: null,
       onInput: null,
       onInvalid: null,
       onKeyDown: null,
       onKeyPress: null,
       onKeyUp: null,
       onLanguageChange: null,
       onLoad: null,
       onLoadedData: null,
       onLoadedMetadata: null,
       onLoadEnd: null,
       onLoadStart: null,
       onMessage: null,
       onMessageError: null,
       onMouseDown: null,
       onMouseEnter: null,
       onMouseLeave: null,
       onMouseMove: null,
       onMouseOut: null,
       onMouseOver: null,
       onMouseUp: null,
       onOffline: null,
       onOnline: null,
       onPageHide: null,
       onPageShow: null,
       onPaste: null,
       onPause: null,
       onPlay: null,
       onPlaying: null,
       onPopState: null,
       onProgress: null,
       onRateChange: null,
       onRejectionHandled: null,
       onReset: null,
       onResize: null,
       onScroll: null,
       onScrollEnd: null,
       onSecurityPolicyViolation: null,
       onSeeked: null,
       onSeeking: null,
       onSelect: null,
       onSlotChange: null,
       onStalled: null,
       onStorage: null,
       onSubmit: null,
       onSuspend: null,
       onTimeUpdate: null,
       onToggle: null,
       onUnhandledRejection: null,
       onUnload: null,
       onVolumeChange: null,
       onWaiting: null,
       onWheel: null,
       open: boolean,
       optimum: number$1,
       pattern: null,
       ping: spaceSeparated,
       placeholder: null,
       playsInline: boolean,
       poster: null,
       preload: null,
       readOnly: boolean,
       referrerPolicy: null,
       rel: spaceSeparated,
       required: boolean,
       reversed: boolean,
       rows: number$1,
       rowSpan: number$1,
       sandbox: spaceSeparated,
       scope: null,
       scoped: boolean,
       seamless: boolean,
       selected: boolean,
       shape: null,
       size: number$1,
       sizes: null,
       slot: null,
       span: number$1,
       spellCheck: booleanish,
       src: null,
       srcDoc: null,
       srcLang: null,
       srcSet: null,
       start: number$1,
       step: null,
       style: null,
       tabIndex: number$1,
       target: null,
       title: null,
       translate: null,
       type: null,
       typeMustMatch: boolean,
       useMap: null,
       value: booleanish,
       width: number$1,
       wrap: null,

       // Legacy.
       // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis
       align: null, // Several. Use CSS `text-align` instead,
       aLink: null, // `<body>`. Use CSS `a:active {color}` instead
       archive: spaceSeparated, // `<object>`. List of URIs to archives
       axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`
       background: null, // `<body>`. Use CSS `background-image` instead
       bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead
       border: number$1, // `<table>`. Use CSS `border-width` instead,
       borderColor: null, // `<table>`. Use CSS `border-color` instead,
       bottomMargin: number$1, // `<body>`
       cellPadding: null, // `<table>`
       cellSpacing: null, // `<table>`
       char: null, // Several table elements. When `align=char`, sets the character to align on
       charOff: null, // Several table elements. When `char`, offsets the alignment
       classId: null, // `<object>`
       clear: null, // `<br>`. Use CSS `clear` instead
       code: null, // `<object>`
       codeBase: null, // `<object>`
       codeType: null, // `<object>`
       color: null, // `<font>` and `<hr>`. Use CSS instead
       compact: boolean, // Lists. Use CSS to reduce space between items instead
       declare: boolean, // `<object>`
       event: null, // `<script>`
       face: null, // `<font>`. Use CSS instead
       frame: null, // `<table>`
       frameBorder: null, // `<iframe>`. Use CSS `border` instead
       hSpace: number$1, // `<img>` and `<object>`
       leftMargin: number$1, // `<body>`
       link: null, // `<body>`. Use CSS `a:link {color: *}` instead
       longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`
       lowSrc: null, // `<img>`. Use a `<picture>`
       marginHeight: number$1, // `<body>`
       marginWidth: number$1, // `<body>`
       noResize: boolean, // `<frame>`
       noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`
       noShade: boolean, // `<hr>`. Use background-color and height instead of borders
       noWrap: boolean, // `<td>` and `<th>`
       object: null, // `<applet>`
       profile: null, // `<head>`
       prompt: null, // `<isindex>`
       rev: null, // `<link>`
       rightMargin: number$1, // `<body>`
       rules: null, // `<table>`
       scheme: null, // `<meta>`
       scrolling: booleanish, // `<frame>`. Use overflow in the child context
       standby: null, // `<object>`
       summary: null, // `<table>`
       text: null, // `<body>`. Use CSS `color` instead
       topMargin: number$1, // `<body>`
       valueType: null, // `<param>`
       version: null, // `<html>`. Use a doctype.
       vAlign: null, // Several. Use CSS `vertical-align` instead
       vLink: null, // `<body>`. Use CSS `a:visited {color}` instead
       vSpace: number$1, // `<img>` and `<object>`

       // Non-standard Properties.
       allowTransparency: null,
       autoCorrect: null,
       autoSave: null,
       disablePictureInPicture: boolean,
       disableRemotePlayback: boolean,
       prefix: null,
       property: null,
       results: number$1,
       security: null,
       unselectable: null
     }
   });

   const svg$1 = create$3({
     space: 'svg',
     attributes: {
       accentHeight: 'accent-height',
       alignmentBaseline: 'alignment-baseline',
       arabicForm: 'arabic-form',
       baselineShift: 'baseline-shift',
       capHeight: 'cap-height',
       className: 'class',
       clipPath: 'clip-path',
       clipRule: 'clip-rule',
       colorInterpolation: 'color-interpolation',
       colorInterpolationFilters: 'color-interpolation-filters',
       colorProfile: 'color-profile',
       colorRendering: 'color-rendering',
       crossOrigin: 'crossorigin',
       dataType: 'datatype',
       dominantBaseline: 'dominant-baseline',
       enableBackground: 'enable-background',
       fillOpacity: 'fill-opacity',
       fillRule: 'fill-rule',
       floodColor: 'flood-color',
       floodOpacity: 'flood-opacity',
       fontFamily: 'font-family',
       fontSize: 'font-size',
       fontSizeAdjust: 'font-size-adjust',
       fontStretch: 'font-stretch',
       fontStyle: 'font-style',
       fontVariant: 'font-variant',
       fontWeight: 'font-weight',
       glyphName: 'glyph-name',
       glyphOrientationHorizontal: 'glyph-orientation-horizontal',
       glyphOrientationVertical: 'glyph-orientation-vertical',
       hrefLang: 'hreflang',
       horizAdvX: 'horiz-adv-x',
       horizOriginX: 'horiz-origin-x',
       horizOriginY: 'horiz-origin-y',
       imageRendering: 'image-rendering',
       letterSpacing: 'letter-spacing',
       lightingColor: 'lighting-color',
       markerEnd: 'marker-end',
       markerMid: 'marker-mid',
       markerStart: 'marker-start',
       navDown: 'nav-down',
       navDownLeft: 'nav-down-left',
       navDownRight: 'nav-down-right',
       navLeft: 'nav-left',
       navNext: 'nav-next',
       navPrev: 'nav-prev',
       navRight: 'nav-right',
       navUp: 'nav-up',
       navUpLeft: 'nav-up-left',
       navUpRight: 'nav-up-right',
       onAbort: 'onabort',
       onActivate: 'onactivate',
       onAfterPrint: 'onafterprint',
       onBeforePrint: 'onbeforeprint',
       onBegin: 'onbegin',
       onCancel: 'oncancel',
       onCanPlay: 'oncanplay',
       onCanPlayThrough: 'oncanplaythrough',
       onChange: 'onchange',
       onClick: 'onclick',
       onClose: 'onclose',
       onCopy: 'oncopy',
       onCueChange: 'oncuechange',
       onCut: 'oncut',
       onDblClick: 'ondblclick',
       onDrag: 'ondrag',
       onDragEnd: 'ondragend',
       onDragEnter: 'ondragenter',
       onDragExit: 'ondragexit',
       onDragLeave: 'ondragleave',
       onDragOver: 'ondragover',
       onDragStart: 'ondragstart',
       onDrop: 'ondrop',
       onDurationChange: 'ondurationchange',
       onEmptied: 'onemptied',
       onEnd: 'onend',
       onEnded: 'onended',
       onError: 'onerror',
       onFocus: 'onfocus',
       onFocusIn: 'onfocusin',
       onFocusOut: 'onfocusout',
       onHashChange: 'onhashchange',
       onInput: 'oninput',
       onInvalid: 'oninvalid',
       onKeyDown: 'onkeydown',
       onKeyPress: 'onkeypress',
       onKeyUp: 'onkeyup',
       onLoad: 'onload',
       onLoadedData: 'onloadeddata',
       onLoadedMetadata: 'onloadedmetadata',
       onLoadStart: 'onloadstart',
       onMessage: 'onmessage',
       onMouseDown: 'onmousedown',
       onMouseEnter: 'onmouseenter',
       onMouseLeave: 'onmouseleave',
       onMouseMove: 'onmousemove',
       onMouseOut: 'onmouseout',
       onMouseOver: 'onmouseover',
       onMouseUp: 'onmouseup',
       onMouseWheel: 'onmousewheel',
       onOffline: 'onoffline',
       onOnline: 'ononline',
       onPageHide: 'onpagehide',
       onPageShow: 'onpageshow',
       onPaste: 'onpaste',
       onPause: 'onpause',
       onPlay: 'onplay',
       onPlaying: 'onplaying',
       onPopState: 'onpopstate',
       onProgress: 'onprogress',
       onRateChange: 'onratechange',
       onRepeat: 'onrepeat',
       onReset: 'onreset',
       onResize: 'onresize',
       onScroll: 'onscroll',
       onSeeked: 'onseeked',
       onSeeking: 'onseeking',
       onSelect: 'onselect',
       onShow: 'onshow',
       onStalled: 'onstalled',
       onStorage: 'onstorage',
       onSubmit: 'onsubmit',
       onSuspend: 'onsuspend',
       onTimeUpdate: 'ontimeupdate',
       onToggle: 'ontoggle',
       onUnload: 'onunload',
       onVolumeChange: 'onvolumechange',
       onWaiting: 'onwaiting',
       onZoom: 'onzoom',
       overlinePosition: 'overline-position',
       overlineThickness: 'overline-thickness',
       paintOrder: 'paint-order',
       panose1: 'panose-1',
       pointerEvents: 'pointer-events',
       referrerPolicy: 'referrerpolicy',
       renderingIntent: 'rendering-intent',
       shapeRendering: 'shape-rendering',
       stopColor: 'stop-color',
       stopOpacity: 'stop-opacity',
       strikethroughPosition: 'strikethrough-position',
       strikethroughThickness: 'strikethrough-thickness',
       strokeDashArray: 'stroke-dasharray',
       strokeDashOffset: 'stroke-dashoffset',
       strokeLineCap: 'stroke-linecap',
       strokeLineJoin: 'stroke-linejoin',
       strokeMiterLimit: 'stroke-miterlimit',
       strokeOpacity: 'stroke-opacity',
       strokeWidth: 'stroke-width',
       tabIndex: 'tabindex',
       textAnchor: 'text-anchor',
       textDecoration: 'text-decoration',
       textRendering: 'text-rendering',
       typeOf: 'typeof',
       underlinePosition: 'underline-position',
       underlineThickness: 'underline-thickness',
       unicodeBidi: 'unicode-bidi',
       unicodeRange: 'unicode-range',
       unitsPerEm: 'units-per-em',
       vAlphabetic: 'v-alphabetic',
       vHanging: 'v-hanging',
       vIdeographic: 'v-ideographic',
       vMathematical: 'v-mathematical',
       vectorEffect: 'vector-effect',
       vertAdvY: 'vert-adv-y',
       vertOriginX: 'vert-origin-x',
       vertOriginY: 'vert-origin-y',
       wordSpacing: 'word-spacing',
       writingMode: 'writing-mode',
       xHeight: 'x-height',
       // These were camelcased in Tiny. Now lowercased in SVG 2
       playbackOrder: 'playbackorder',
       timelineBegin: 'timelinebegin'
     },
     transform: caseSensitiveTransform,
     properties: {
       about: commaOrSpaceSeparated,
       accentHeight: number$1,
       accumulate: null,
       additive: null,
       alignmentBaseline: null,
       alphabetic: number$1,
       amplitude: number$1,
       arabicForm: null,
       ascent: number$1,
       attributeName: null,
       attributeType: null,
       azimuth: number$1,
       bandwidth: null,
       baselineShift: null,
       baseFrequency: null,
       baseProfile: null,
       bbox: null,
       begin: null,
       bias: number$1,
       by: null,
       calcMode: null,
       capHeight: number$1,
       className: spaceSeparated,
       clip: null,
       clipPath: null,
       clipPathUnits: null,
       clipRule: null,
       color: null,
       colorInterpolation: null,
       colorInterpolationFilters: null,
       colorProfile: null,
       colorRendering: null,
       content: null,
       contentScriptType: null,
       contentStyleType: null,
       crossOrigin: null,
       cursor: null,
       cx: null,
       cy: null,
       d: null,
       dataType: null,
       defaultAction: null,
       descent: number$1,
       diffuseConstant: number$1,
       direction: null,
       display: null,
       dur: null,
       divisor: number$1,
       dominantBaseline: null,
       download: boolean,
       dx: null,
       dy: null,
       edgeMode: null,
       editable: null,
       elevation: number$1,
       enableBackground: null,
       end: null,
       event: null,
       exponent: number$1,
       externalResourcesRequired: null,
       fill: null,
       fillOpacity: number$1,
       fillRule: null,
       filter: null,
       filterRes: null,
       filterUnits: null,
       floodColor: null,
       floodOpacity: null,
       focusable: null,
       focusHighlight: null,
       fontFamily: null,
       fontSize: null,
       fontSizeAdjust: null,
       fontStretch: null,
       fontStyle: null,
       fontVariant: null,
       fontWeight: null,
       format: null,
       fr: null,
       from: null,
       fx: null,
       fy: null,
       g1: commaSeparated,
       g2: commaSeparated,
       glyphName: commaSeparated,
       glyphOrientationHorizontal: null,
       glyphOrientationVertical: null,
       glyphRef: null,
       gradientTransform: null,
       gradientUnits: null,
       handler: null,
       hanging: number$1,
       hatchContentUnits: null,
       hatchUnits: null,
       height: null,
       href: null,
       hrefLang: null,
       horizAdvX: number$1,
       horizOriginX: number$1,
       horizOriginY: number$1,
       id: null,
       ideographic: number$1,
       imageRendering: null,
       initialVisibility: null,
       in: null,
       in2: null,
       intercept: number$1,
       k: number$1,
       k1: number$1,
       k2: number$1,
       k3: number$1,
       k4: number$1,
       kernelMatrix: commaOrSpaceSeparated,
       kernelUnitLength: null,
       keyPoints: null, // SEMI_COLON_SEPARATED
       keySplines: null, // SEMI_COLON_SEPARATED
       keyTimes: null, // SEMI_COLON_SEPARATED
       kerning: null,
       lang: null,
       lengthAdjust: null,
       letterSpacing: null,
       lightingColor: null,
       limitingConeAngle: number$1,
       local: null,
       markerEnd: null,
       markerMid: null,
       markerStart: null,
       markerHeight: null,
       markerUnits: null,
       markerWidth: null,
       mask: null,
       maskContentUnits: null,
       maskUnits: null,
       mathematical: null,
       max: null,
       media: null,
       mediaCharacterEncoding: null,
       mediaContentEncodings: null,
       mediaSize: number$1,
       mediaTime: null,
       method: null,
       min: null,
       mode: null,
       name: null,
       navDown: null,
       navDownLeft: null,
       navDownRight: null,
       navLeft: null,
       navNext: null,
       navPrev: null,
       navRight: null,
       navUp: null,
       navUpLeft: null,
       navUpRight: null,
       numOctaves: null,
       observer: null,
       offset: null,
       onAbort: null,
       onActivate: null,
       onAfterPrint: null,
       onBeforePrint: null,
       onBegin: null,
       onCancel: null,
       onCanPlay: null,
       onCanPlayThrough: null,
       onChange: null,
       onClick: null,
       onClose: null,
       onCopy: null,
       onCueChange: null,
       onCut: null,
       onDblClick: null,
       onDrag: null,
       onDragEnd: null,
       onDragEnter: null,
       onDragExit: null,
       onDragLeave: null,
       onDragOver: null,
       onDragStart: null,
       onDrop: null,
       onDurationChange: null,
       onEmptied: null,
       onEnd: null,
       onEnded: null,
       onError: null,
       onFocus: null,
       onFocusIn: null,
       onFocusOut: null,
       onHashChange: null,
       onInput: null,
       onInvalid: null,
       onKeyDown: null,
       onKeyPress: null,
       onKeyUp: null,
       onLoad: null,
       onLoadedData: null,
       onLoadedMetadata: null,
       onLoadStart: null,
       onMessage: null,
       onMouseDown: null,
       onMouseEnter: null,
       onMouseLeave: null,
       onMouseMove: null,
       onMouseOut: null,
       onMouseOver: null,
       onMouseUp: null,
       onMouseWheel: null,
       onOffline: null,
       onOnline: null,
       onPageHide: null,
       onPageShow: null,
       onPaste: null,
       onPause: null,
       onPlay: null,
       onPlaying: null,
       onPopState: null,
       onProgress: null,
       onRateChange: null,
       onRepeat: null,
       onReset: null,
       onResize: null,
       onScroll: null,
       onSeeked: null,
       onSeeking: null,
       onSelect: null,
       onShow: null,
       onStalled: null,
       onStorage: null,
       onSubmit: null,
       onSuspend: null,
       onTimeUpdate: null,
       onToggle: null,
       onUnload: null,
       onVolumeChange: null,
       onWaiting: null,
       onZoom: null,
       opacity: null,
       operator: null,
       order: null,
       orient: null,
       orientation: null,
       origin: null,
       overflow: null,
       overlay: null,
       overlinePosition: number$1,
       overlineThickness: number$1,
       paintOrder: null,
       panose1: null,
       path: null,
       pathLength: number$1,
       patternContentUnits: null,
       patternTransform: null,
       patternUnits: null,
       phase: null,
       ping: spaceSeparated,
       pitch: null,
       playbackOrder: null,
       pointerEvents: null,
       points: null,
       pointsAtX: number$1,
       pointsAtY: number$1,
       pointsAtZ: number$1,
       preserveAlpha: null,
       preserveAspectRatio: null,
       primitiveUnits: null,
       propagate: null,
       property: commaOrSpaceSeparated,
       r: null,
       radius: null,
       referrerPolicy: null,
       refX: null,
       refY: null,
       rel: commaOrSpaceSeparated,
       rev: commaOrSpaceSeparated,
       renderingIntent: null,
       repeatCount: null,
       repeatDur: null,
       requiredExtensions: commaOrSpaceSeparated,
       requiredFeatures: commaOrSpaceSeparated,
       requiredFonts: commaOrSpaceSeparated,
       requiredFormats: commaOrSpaceSeparated,
       resource: null,
       restart: null,
       result: null,
       rotate: null,
       rx: null,
       ry: null,
       scale: null,
       seed: null,
       shapeRendering: null,
       side: null,
       slope: null,
       snapshotTime: null,
       specularConstant: number$1,
       specularExponent: number$1,
       spreadMethod: null,
       spacing: null,
       startOffset: null,
       stdDeviation: null,
       stemh: null,
       stemv: null,
       stitchTiles: null,
       stopColor: null,
       stopOpacity: null,
       strikethroughPosition: number$1,
       strikethroughThickness: number$1,
       string: null,
       stroke: null,
       strokeDashArray: commaOrSpaceSeparated,
       strokeDashOffset: null,
       strokeLineCap: null,
       strokeLineJoin: null,
       strokeMiterLimit: number$1,
       strokeOpacity: number$1,
       strokeWidth: null,
       style: null,
       surfaceScale: number$1,
       syncBehavior: null,
       syncBehaviorDefault: null,
       syncMaster: null,
       syncTolerance: null,
       syncToleranceDefault: null,
       systemLanguage: commaOrSpaceSeparated,
       tabIndex: number$1,
       tableValues: null,
       target: null,
       targetX: number$1,
       targetY: number$1,
       textAnchor: null,
       textDecoration: null,
       textRendering: null,
       textLength: null,
       timelineBegin: null,
       title: null,
       transformBehavior: null,
       type: null,
       typeOf: commaOrSpaceSeparated,
       to: null,
       transform: null,
       u1: null,
       u2: null,
       underlinePosition: number$1,
       underlineThickness: number$1,
       unicode: null,
       unicodeBidi: null,
       unicodeRange: null,
       unitsPerEm: number$1,
       values: null,
       vAlphabetic: number$1,
       vMathematical: number$1,
       vectorEffect: null,
       vHanging: number$1,
       vIdeographic: number$1,
       version: null,
       vertAdvY: number$1,
       vertOriginX: number$1,
       vertOriginY: number$1,
       viewBox: null,
       viewTarget: null,
       visibility: null,
       width: null,
       widths: null,
       wordSpacing: null,
       writingMode: null,
       x: null,
       x1: null,
       x2: null,
       xChannelSelector: null,
       xHeight: number$1,
       y: null,
       y1: null,
       y2: null,
       yChannelSelector: null,
       z: null,
       zoomAndPan: null
     }
   });

   /**
    * @typedef {import('./util/schema.js').Schema} Schema
    */


   const valid = /^data[-\w.:]+$/i;
   const dash$1 = /-[a-z]/g;
   const cap = /[A-Z]/g;

   /**
    * @param {Schema} schema
    * @param {string} value
    * @returns {Info}
    */
   function find(schema, value) {
     const normal = normalize(value);
     let prop = value;
     let Type = Info;

     if (normal in schema.normal) {
       return schema.property[schema.normal[normal]]
     }

     if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {
       // Attribute or property.
       if (value.charAt(4) === '-') {
         // Turn it into a property.
         const rest = value.slice(5).replace(dash$1, camelcase$1);
         prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1);
       } else {
         // Turn it into an attribute.
         const rest = value.slice(4);

         if (!dash$1.test(rest)) {
           let dashes = rest.replace(cap, kebab);

           if (dashes.charAt(0) !== '-') {
             dashes = '-' + dashes;
           }

           value = 'data' + dashes;
         }
       }

       Type = DefinedInfo;
     }

     return new Type(prop, value)
   }

   /**
    * @param {string} $0
    * @returns {string}
    */
   function kebab($0) {
     return '-' + $0.toLowerCase()
   }

   /**
    * @param {string} $0
    * @returns {string}
    */
   function camelcase$1($0) {
     return $0.charAt(1).toUpperCase()
   }

   /**
    * @typedef {import('./lib/util/info.js').Info} Info
    * @typedef {import('./lib/util/schema.js').Schema} Schema
    */

   const html$4 = merge([xml$1, xlink, xmlns, aria, html$5], 'html');
   const svg = merge([xml$1, xlink, xmlns, aria, svg$1], 'svg');

   /**
    * @typedef {import('hast').Properties} Properties
    * @typedef {import('hast').Element} Element
    */

   const search$1 = /[#.]/g;

   /**
    * Create a hast element from a simple CSS selector.
    *
    * @template {string} Selector
    *   Type of selector.
    * @template {string} [DefaultTagName='div']
    *   Type of default tag name.
    * @param {Selector | null | undefined} [selector]
    *   Simple CSS selector.
    *
    *   Can contain a tag name (`foo`), classes (`.bar`), and an ID (`#baz`).
    *   Multiple classes are allowed.
    *   Uses the last ID if multiple IDs are found.
    * @param {DefaultTagName | null | undefined} [defaultTagName='div']
    *   Tag name to use if `selector` does not specify one (default: `'div'`).
    * @returns {Element & {tagName: import('./extract.js').ExtractTagName<Selector, DefaultTagName>}}
    *   Built element.
    */
   function parseSelector(selector, defaultTagName) {
     const value = selector || '';
     /** @type {Properties} */
     const props = {};
     let start = 0;
     /** @type {string | undefined} */
     let previous;
     /** @type {string | undefined} */
     let tagName;

     while (start < value.length) {
       search$1.lastIndex = start;
       const match = search$1.exec(value);
       const subvalue = value.slice(start, match ? match.index : value.length);

       if (subvalue) {
         if (!previous) {
           tagName = subvalue;
         } else if (previous === '#') {
           props.id = subvalue;
         } else if (Array.isArray(props.className)) {
           props.className.push(subvalue);
         } else {
           props.className = [subvalue];
         }

         start += subvalue.length;
       }

       if (match) {
         previous = match[0];
         start++;
       }
     }

     return {
       type: 'element',
       // @ts-expect-error: fine.
       tagName: tagName || defaultTagName || 'div',
       properties: props,
       children: []
     }
   }

   /**
    * Parse space-separated tokens to an array of strings.
    *
    * @param {string} value
    *   Space-separated tokens.
    * @returns {Array<string>}
    *   List of tokens.
    */
   function parse$2(value) {
     const input = String(value || '').trim();
     return input ? input.split(/[ \t\n\r\f]+/g) : []
   }

   /**
    * Serialize an array of strings as space separated-tokens.
    *
    * @param {Array<string|number>} values
    *   List of tokens.
    * @returns {string}
    *   Space-separated tokens.
    */
   function stringify$1(values) {
     return values.join(' ').trim()
   }

   /**
    * @typedef Options
    *   Configuration for `stringify`.
    * @property {boolean} [padLeft=true]
    *   Whether to pad a space before a token.
    * @property {boolean} [padRight=false]
    *   Whether to pad a space after a token.
    */

   /**
    * @typedef {Options} StringifyOptions
    *   Please use `StringifyOptions` instead.
    */

   /**
    * Parse comma-separated tokens to an array.
    *
    * @param {string} value
    *   Comma-separated tokens.
    * @returns {Array<string>}
    *   List of tokens.
    */
   function parse$1(value) {
     /** @type {Array<string>} */
     const tokens = [];
     const input = String(value || '');
     let index = input.indexOf(',');
     let start = 0;
     /** @type {boolean} */
     let end = false;

     while (!end) {
       if (index === -1) {
         index = input.length;
         end = true;
       }

       const token = input.slice(start, index).trim();

       if (token || !end) {
         tokens.push(token);
       }

       start = index + 1;
       index = input.indexOf(',', start);
     }

     return tokens
   }

   /**
    * Serialize an array of strings or numbers to comma-separated tokens.
    *
    * @param {Array<string|number>} values
    *   List of tokens.
    * @param {Options} [options]
    *   Configuration for `stringify` (optional).
    * @returns {string}
    *   Comma-separated tokens.
    */
   function stringify(values, options) {
     const settings = options || {};

     // Ensure the last empty entry is seen.
     const input = values[values.length - 1] === '' ? [...values, ''] : values;

     return input
       .join(
         (settings.padRight ? ' ' : '') +
           ',' +
           (settings.padLeft === false ? '' : ' ')
       )
       .trim()
   }

   /**
    * @typedef {import('hast').Root} Root
    * @typedef {import('hast').Content} Content
    * @typedef {import('hast').Element} Element
    * @typedef {import('hast').Properties} Properties
    * @typedef {import('property-information').Info} Info
    * @typedef {import('property-information').Schema} Schema
    */


   const buttonTypes = new Set(['menu', 'submit', 'reset', 'button']);

   const own$a = {}.hasOwnProperty;

   /**
    * @param {Schema} schema
    * @param {string} defaultTagName
    * @param {Array<string>} [caseSensitive]
    */
   function core$1(schema, defaultTagName, caseSensitive) {
     const adjust = caseSensitive && createAdjustMap(caseSensitive);

     const h =
       /**
        * @type {{
        *   (): Root
        *   (selector: null | undefined, ...children: Array<HChild>): Root
        *   (selector: string, properties?: HProperties, ...children: Array<HChild>): Element
        *   (selector: string, ...children: Array<HChild>): Element
        * }}
        */
       (
         /**
          * Hyperscript compatible DSL for creating virtual hast trees.
          *
          * @param {string | null} [selector]
          * @param {HProperties | HChild} [properties]
          * @param {Array<HChild>} children
          * @returns {HResult}
          */
         function (selector, properties, ...children) {
           let index = -1;
           /** @type {HResult} */
           let node;

           if (selector === undefined || selector === null) {
             node = {type: 'root', children: []};
             // @ts-expect-error Properties are not supported for roots.
             children.unshift(properties);
           } else {
             node = parseSelector(selector, defaultTagName);
             // Normalize the name.
             node.tagName = node.tagName.toLowerCase();
             if (adjust && own$a.call(adjust, node.tagName)) {
               node.tagName = adjust[node.tagName];
             }

             // Handle props.
             if (isProperties(properties, node.tagName)) {
               /** @type {string} */
               let key;

               for (key in properties) {
                 if (own$a.call(properties, key)) {
                   // @ts-expect-error `node.properties` is set.
                   addProperty(schema, node.properties, key, properties[key]);
                 }
               }
             } else {
               children.unshift(properties);
             }
           }

           // Handle children.
           while (++index < children.length) {
             addChild(node.children, children[index]);
           }

           if (node.type === 'element' && node.tagName === 'template') {
             node.content = {type: 'root', children: node.children};
             node.children = [];
           }

           return node
         }
       );

     return h
   }

   /**
    * @param {HProperties | HChild} value
    * @param {string} name
    * @returns {value is HProperties}
    */
   function isProperties(value, name) {
     if (
       value === null ||
       value === undefined ||
       typeof value !== 'object' ||
       Array.isArray(value)
     ) {
       return false
     }

     if (name === 'input' || !value.type || typeof value.type !== 'string') {
       return true
     }

     if ('children' in value && Array.isArray(value.children)) {
       return false
     }

     if (name === 'button') {
       return buttonTypes.has(value.type.toLowerCase())
     }

     return !('value' in value)
   }

   /**
    * @param {Schema} schema
    * @param {Properties} properties
    * @param {string} key
    * @param {HStyle | HPropertyValue} value
    * @returns {void}
    */
   function addProperty(schema, properties, key, value) {
     const info = find(schema, key);
     let index = -1;
     /** @type {HPropertyValue} */
     let result;

     // Ignore nullish and NaN values.
     if (value === undefined || value === null) return

     if (typeof value === 'number') {
       // Ignore NaN.
       if (Number.isNaN(value)) return

       result = value;
     }
     // Booleans.
     else if (typeof value === 'boolean') {
       result = value;
     }
     // Handle list values.
     else if (typeof value === 'string') {
       if (info.spaceSeparated) {
         result = parse$2(value);
       } else if (info.commaSeparated) {
         result = parse$1(value);
       } else if (info.commaOrSpaceSeparated) {
         result = parse$2(parse$1(value).join(' '));
       } else {
         result = parsePrimitive(info, info.property, value);
       }
     } else if (Array.isArray(value)) {
       result = value.concat();
     } else {
       result = info.property === 'style' ? style$1(value) : String(value);
     }

     if (Array.isArray(result)) {
       /** @type {Array<string | number>} */
       const finalResult = [];

       while (++index < result.length) {
         // @ts-expect-error Assume no booleans in array.
         finalResult[index] = parsePrimitive(info, info.property, result[index]);
       }

       result = finalResult;
     }

     // Class names (which can be added both on the `selector` and here).
     if (info.property === 'className' && Array.isArray(properties.className)) {
       // @ts-expect-error Assume no booleans in `className`.
       result = properties.className.concat(result);
     }

     properties[info.property] = result;
   }

   /**
    * @param {Array<Content>} nodes
    * @param {HChild} value
    * @returns {void}
    */
   function addChild(nodes, value) {
     let index = -1;

     if (value === undefined || value === null) ; else if (typeof value === 'string' || typeof value === 'number') {
       nodes.push({type: 'text', value: String(value)});
     } else if (Array.isArray(value)) {
       while (++index < value.length) {
         addChild(nodes, value[index]);
       }
     } else if (typeof value === 'object' && 'type' in value) {
       if (value.type === 'root') {
         addChild(nodes, value.children);
       } else {
         nodes.push(value);
       }
     } else {
       throw new Error('Expected node, nodes, or string, got `' + value + '`')
     }
   }

   /**
    * Parse a single primitives.
    *
    * @param {Info} info
    * @param {string} name
    * @param {HPrimitiveValue} value
    * @returns {HPrimitiveValue}
    */
   function parsePrimitive(info, name, value) {
     if (typeof value === 'string') {
       if (info.number && value && !Number.isNaN(Number(value))) {
         return Number(value)
       }

       if (
         (info.boolean || info.overloadedBoolean) &&
         (value === '' || normalize(value) === normalize(name))
       ) {
         return true
       }
     }

     return value
   }

   /**
    * Serialize a `style` object as a string.
    *
    * @param {HStyle} value
    *   Style object.
    * @returns {string}
    *   CSS string.
    */
   function style$1(value) {
     /** @type {Array<string>} */
     const result = [];
     /** @type {string} */
     let key;

     for (key in value) {
       if (own$a.call(value, key)) {
         result.push([key, value[key]].join(': '));
       }
     }

     return result.join('; ')
   }

   /**
    * Create a map to adjust casing.
    *
    * @param {Array<string>} values
    *   List of properly cased keys.
    * @returns {Record<string, string>}
    *   Map of lowercase keys to uppercase keys.
    */
   function createAdjustMap(values) {
     /** @type {Record<string, string>} */
     const result = {};
     let index = -1;

     while (++index < values.length) {
       result[values[index].toLowerCase()] = values[index];
     }

     return result
   }

   /**
    * @typedef {import('./core.js').HChild} Child
    *   Acceptable child value.
    * @typedef {import('./core.js').HProperties} Properties
    *   Acceptable value for element properties.
    * @typedef {import('./core.js').HResult} Result
    *   Result from a `h` (or `s`) call.
    *
    * @typedef {import('./jsx-classic.js').Element} h.JSX.Element
    * @typedef {import('./jsx-classic.js').IntrinsicAttributes} h.JSX.IntrinsicAttributes
    * @typedef {import('./jsx-classic.js').IntrinsicElements} h.JSX.IntrinsicElements
    * @typedef {import('./jsx-classic.js').ElementChildrenAttribute} h.JSX.ElementChildrenAttribute
    */


   const h = core$1(html$4, 'div');

   const svgCaseSensitiveTagNames = [
     'altGlyph',
     'altGlyphDef',
     'altGlyphItem',
     'animateColor',
     'animateMotion',
     'animateTransform',
     'clipPath',
     'feBlend',
     'feColorMatrix',
     'feComponentTransfer',
     'feComposite',
     'feConvolveMatrix',
     'feDiffuseLighting',
     'feDisplacementMap',
     'feDistantLight',
     'feDropShadow',
     'feFlood',
     'feFuncA',
     'feFuncB',
     'feFuncG',
     'feFuncR',
     'feGaussianBlur',
     'feImage',
     'feMerge',
     'feMergeNode',
     'feMorphology',
     'feOffset',
     'fePointLight',
     'feSpecularLighting',
     'feSpotLight',
     'feTile',
     'feTurbulence',
     'foreignObject',
     'glyphRef',
     'linearGradient',
     'radialGradient',
     'solidColor',
     'textArea',
     'textPath'
   ];

   /**
    * @typedef {import('./core.js').HChild} Child
    *   Acceptable child value.
    * @typedef {import('./core.js').HProperties} Properties
    *   Acceptable value for element properties.
    * @typedef {import('./core.js').HResult} Result
    *   Result from a `h` (or `s`) call.
    *
    * @typedef {import('./jsx-classic.js').Element} s.JSX.Element
    * @typedef {import('./jsx-classic.js').IntrinsicAttributes} s.JSX.IntrinsicAttributes
    * @typedef {import('./jsx-classic.js').IntrinsicElements} s.JSX.IntrinsicElements
    * @typedef {import('./jsx-classic.js').ElementChildrenAttribute} s.JSX.ElementChildrenAttribute
    */


   const s = core$1(svg, 'g', svgCaseSensitiveTagNames);

   /**
    * @typedef {import('vfile').VFile} VFile
    * @typedef {import('vfile').Value} Value
    */

   /**
    * @typedef Point
    *   unist point, where `line` and `column` can be `undefined`.
    * @property {number | undefined} line
    *   Line.
    * @property {number | undefined} column
    *   Column.
    * @property {number | undefined} [offset]
    *   Offset.
    *
    * @typedef PointLike
    *   unist point, allowed as input.
    * @property {number | null | undefined} [line]
    *   Line.
    * @property {number | null | undefined} [column]
    *   Column.
    * @property {number | null | undefined} [offset]
    *   Offset.
    *
    * @callback ToPoint
    *   Get a line/column-based `point` from `offset`.
    * @param {number | null | undefined} [offset]
    *   Something that should be an `offset.
    * @returns {Point}
    *   Point, line/column are undefined for invalid or out of bounds input.
    *
    * @callback ToOffset
    *   Get an offset from a line/column-based `point`.
    * @param {Point | null | undefined} [point]
    *   Something that should be a `point.
    * @returns {number}
    *   Offset or `-1` for invalid or out of bounds input.
    *
    * @typedef Location
    *   Accessors for index.
    * @property {ToPoint} toPoint
    *   Get a line/column-based `point` from `offset`.
    * @property {ToOffset} toOffset
    *   Get an offset from a line/column-based `point`.
    */

   /**
    * Index the given document so you can translate between line/column and offset
    * based positional info.
    *
    * @param {VFile | Value} file
    *   File to index.
    * @returns {Location}
    *   Accessors for index.
    */
   function location(file) {
     const value = String(file);
     /** @type {Array<number>} */
     const indices = [];
     const search = /\r?\n|\r/g;

     while (search.test(value)) {
       indices.push(search.lastIndex);
     }

     indices.push(value.length + 1);

     return {toPoint, toOffset}

     /** @type {ToPoint} */
     function toPoint(offset) {
       let index = -1;

       if (
         typeof offset === 'number' &&
         offset > -1 &&
         offset < indices[indices.length - 1]
       ) {
         while (++index < indices.length) {
           if (indices[index] > offset) {
             return {
               line: index + 1,
               column: offset - (index > 0 ? indices[index - 1] : 0) + 1,
               offset
             }
           }
         }
       }

       return {line: undefined, column: undefined, offset: undefined}
     }

     /** @type {ToOffset} */
     function toOffset(point) {
       const line = point && point.line;
       const column = point && point.column;

       if (
         typeof line === 'number' &&
         typeof column === 'number' &&
         !Number.isNaN(line) &&
         !Number.isNaN(column) &&
         line - 1 in indices
       ) {
         const offset = (indices[line - 2] || 0) + column - 1 || 0;

         if (offset > -1 && offset < indices[indices.length - 1]) {
           return offset
         }
       }

       return -1
     }
   }

   /**
    * Map of web namespaces.
    *
    * @type {Record<string, string>}
    */
   const webNamespaces = {
     html: 'http://www.w3.org/1999/xhtml',
     mathml: 'http://www.w3.org/1998/Math/MathML',
     svg: 'http://www.w3.org/2000/svg',
     xlink: 'http://www.w3.org/1999/xlink',
     xml: 'http://www.w3.org/XML/1998/namespace',
     xmlns: 'http://www.w3.org/2000/xmlns/'
   };

   /**
    * @typedef {import('vfile').VFile} VFile
    * @typedef {import('property-information').Schema} Schema
    * @typedef {import('unist').Position} Position
    * @typedef {import('unist').Point} Point
    * @typedef {import('hast').Element} Element
    * @typedef {import('hast').Root} Root
    * @typedef {import('hast').Content} Content
    * @typedef {import('parse5').DefaultTreeAdapterMap} DefaultTreeAdapterMap
    * @typedef {import('parse5').Token.ElementLocation} P5ElementLocation
    * @typedef {import('parse5').Token.Location} P5Location
    */


   const own$9 = {}.hasOwnProperty;
   /** @type {unknown} */
   // type-coverage:ignore-next-line
   const proto = Object.prototype;

   /**
    * Transform a `parse5` AST to hast.
    *
    * @param {P5Node} tree
    *   `parse5` tree to transform.
    * @param {Options | VFile | null | undefined} [options]
    *   Configuration.
    * @returns {Node}
    *   hast tree.
    */
   function fromParse5(tree, options) {
     const options_ = options || {};
     /** @type {Options} */
     let settings;
     /** @type {VFile | undefined} */
     let file;

     if (isFile(options_)) {
       file = options_;
       settings = {};
     } else {
       file = options_.file || undefined;
       settings = options_;
     }

     return one$4(
       {
         schema: settings.space === 'svg' ? svg : html$4,
         file,
         verbose: settings.verbose,
         location: false
       },
       tree
     )
   }

   /**
    * Transform a node.
    *
    * @param {State} state
    *   Info passed around about the current state.
    * @param {P5Node} node
    *   p5 node.
    * @returns {Node}
    *   hast node.
    */
   function one$4(state, node) {
     /** @type {Node} */
     let result;

     switch (node.nodeName) {
       case '#comment': {
         const reference = /** @type {P5Comment} */ (node);
         result = {type: 'comment', value: reference.data};
         patch$2(state, reference, result);
         return result
       }

       case '#document':
       case '#document-fragment': {
         const reference = /** @type {P5Document | P5DocumentFragment} */ (node);
         const quirksMode =
           'mode' in reference
             ? reference.mode === 'quirks' || reference.mode === 'limited-quirks'
             : false;

         result = {
           type: 'root',
           children: all$6(state, node.childNodes),
           data: {quirksMode}
         };

         if (state.file && state.location) {
           const doc = String(state.file);
           const loc = location(doc);
           const start = loc.toPoint(0);
           const end = loc.toPoint(doc.length);
           // @ts-expect-error: always defined as we give valid input.
           result.position = {start, end};
         }

         return result
       }

       case '#documentType': {
         const reference = /** @type {P5DocumentType} */ (node);
         // @ts-expect-error Types are out of date.
         result = {type: 'doctype'};
         patch$2(state, reference, result);
         return result
       }

       case '#text': {
         const reference = /** @type {P5Text} */ (node);
         result = {type: 'text', value: reference.value};
         patch$2(state, reference, result);
         return result
       }

       // Element.
       default: {
         const reference = /** @type {P5Element} */ (node);
         result = element$4(state, reference);
         return result
       }
     }
   }

   /**
    * Transform children.
    *
    * @param {State} state
    *   Info passed around about the current state.
    * @param {Array<P5Node>} nodes
    *   Nodes.
    * @returns {Array<Content>}
    *   hast nodes.
    */
   function all$6(state, nodes) {
     let index = -1;
     /** @type {Array<Content>} */
     const result = [];

     while (++index < nodes.length) {
       // @ts-expect-error Assume no roots in `nodes`.
       result[index] = one$4(state, nodes[index]);
     }

     return result
   }

   /**
    * Transform an element.
    *
    * @param {State} state
    *   Info passed around about the current state.
    * @param {P5Element} node
    *   `parse5` node to transform.
    * @returns {Element}
    *   hast node.
    */
   function element$4(state, node) {
     const schema = state.schema;

     state.schema = node.namespaceURI === webNamespaces.svg ? svg : html$4;

     // Props.
     let index = -1;
     /** @type {Record<string, string>} */
     const props = {};

     while (++index < node.attrs.length) {
       const attribute = node.attrs[index];
       const name =
         (attribute.prefix ? attribute.prefix + ':' : '') + attribute.name;
       if (!own$9.call(proto, name)) {
         props[name] = attribute.value;
       }
     }

     // Build.
     const fn = state.schema.space === 'svg' ? s : h;
     const result = fn(node.tagName, props, all$6(state, node.childNodes));
     patch$2(state, node, result);

     // Switch content.
     if (result.tagName === 'template') {
       const reference = /** @type {P5Template} */ (node);
       const pos = reference.sourceCodeLocation;
       const startTag = pos && pos.startTag && position$1(pos.startTag);
       const endTag = pos && pos.endTag && position$1(pos.endTag);

       /** @type {Root} */
       // @ts-expect-error Types are wrong.
       const content = one$4(state, reference.content);

       if (startTag && endTag && state.file) {
         content.position = {start: startTag.end, end: endTag.start};
       }

       result.content = content;
     }

     state.schema = schema;

     return result
   }

   /**
    * Patch positional info from `from` onto `to`.
    *
    * @param {State} state
    *   Info passed around about the current state.
    * @param {P5Node} from
    *   p5 node.
    * @param {Node} to
    *   hast node.
    * @returns {void}
    *   Nothing.
    */
   function patch$2(state, from, to) {
     if ('sourceCodeLocation' in from && from.sourceCodeLocation && state.file) {
       const position = createLocation(state, to, from.sourceCodeLocation);

       if (position) {
         state.location = true;
         to.position = position;
       }
     }
   }

   /**
    * Create clean positional information.
    *
    * @param {State} state
    *   Info passed around about the current state.
    * @param {Node} node
    *   hast node.
    * @param {P5ElementLocation} location
    *   p5 location info.
    * @returns {Position | undefined}
    *   Position, or nothing.
    */
   function createLocation(state, node, location) {
     const result = position$1(location);

     if (node.type === 'element') {
       const tail = node.children[node.children.length - 1];

       // Bug for unclosed with children.
       // See: <https://github.com/inikulin/parse5/issues/109>.
       if (
         result &&
         !location.endTag &&
         tail &&
         tail.position &&
         tail.position.end
       ) {
         result.end = Object.assign({}, tail.position.end);
       }

       if (state.verbose) {
         /** @type {Record<string, Position | undefined>} */
         const props = {};
         /** @type {string} */
         let key;

         if (location.attrs) {
           for (key in location.attrs) {
             if (own$9.call(location.attrs, key)) {
               props[find(state.schema, key).property] = position$1(
                 location.attrs[key]
               );
             }
           }
         }

         node.data = {
           position: {
             // @ts-expect-error: assume not `undefined`.
             opening: position$1(location.startTag),
             closing: location.endTag ? position$1(location.endTag) : null,
             properties: props
           }
         };
       }
     }

     return result
   }

   /**
    * Turn a p5 location into a position.
    *
    * @param {P5Location} loc
    *   Location.
    * @returns {Position | undefined}
    *   Position or nothing.
    */
   function position$1(loc) {
     const start = point$2({
       line: loc.startLine,
       column: loc.startCol,
       offset: loc.startOffset
     });
     const end = point$2({
       line: loc.endLine,
       column: loc.endCol,
       offset: loc.endOffset
     });
     // @ts-expect-error `undefined` is fine.
     return start || end ? {start, end} : undefined
   }

   /**
    * Filter out invalid points.
    *
    * @param {Point} point
    *   Point with potentially `undefined` values.
    * @returns {Point | undefined}
    *   Point or nothing.
    */
   function point$2(point) {
     return point.line && point.column ? point : undefined
   }

   /**
    * Check if something is a file.
    *
    * @param {VFile | Options} value
    *   File or options.
    * @returns {value is VFile}
    *   Whether `value` is a file.
    */
   function isFile(value) {
     return 'messages' in value
   }

   const errors = {
     abandonedHeadElementChild: {
       reason: 'Unexpected metadata element after head',
       description:
         'Unexpected element after head. Expected the element before `</head>`',
       url: false
     },
     abruptClosingOfEmptyComment: {
       reason: 'Unexpected abruptly closed empty comment',
       description: 'Unexpected `>` or `->`. Expected `-->` to close comments'
     },
     abruptDoctypePublicIdentifier: {
       reason: 'Unexpected abruptly closed public identifier',
       description:
         'Unexpected `>`. Expected a closing `"` or `\'` after the public identifier'
     },
     abruptDoctypeSystemIdentifier: {
       reason: 'Unexpected abruptly closed system identifier',
       description:
         'Unexpected `>`. Expected a closing `"` or `\'` after the identifier identifier'
     },
     absenceOfDigitsInNumericCharacterReference: {
       reason: 'Unexpected non-digit at start of numeric character reference',
       description:
         'Unexpected `%c`. Expected `[0-9]` for decimal references or `[0-9a-fA-F]` for hexadecimal references'
     },
     cdataInHtmlContent: {
       reason: 'Unexpected CDATA section in HTML',
       description:
         'Unexpected `<![CDATA[` in HTML. Remove it, use a comment, or encode special characters instead'
     },
     characterReferenceOutsideUnicodeRange: {
       reason: 'Unexpected too big numeric character reference',
       description:
         'Unexpectedly high character reference. Expected character references to be at most hexadecimal 10ffff (or decimal 1114111)'
     },
     closingOfElementWithOpenChildElements: {
       reason: 'Unexpected closing tag with open child elements',
       description:
         'Unexpectedly closing tag. Expected other tags to be closed first',
       url: false
     },
     controlCharacterInInputStream: {
       reason: 'Unexpected control character',
       description:
         'Unexpected control character `%x`. Expected a non-control code point, 0x00, or ASCII whitespace'
     },
     controlCharacterReference: {
       reason: 'Unexpected control character reference',
       description:
         'Unexpectedly control character in reference. Expected a non-control code point, 0x00, or ASCII whitespace'
     },
     disallowedContentInNoscriptInHead: {
       reason: 'Disallowed content inside `<noscript>` in `<head>`',
       description:
         'Unexpected text character `%c`. Only use text in `<noscript>`s in `<body>`',
       url: false
     },
     duplicateAttribute: {
       reason: 'Unexpected duplicate attribute',
       description:
         'Unexpectedly double attribute. Expected attributes to occur only once'
     },
     endTagWithAttributes: {
       reason: 'Unexpected attribute on closing tag',
       description: 'Unexpected attribute. Expected `>` instead'
     },
     endTagWithTrailingSolidus: {
       reason: 'Unexpected slash at end of closing tag',
       description: 'Unexpected `%c-1`. Expected `>` instead'
     },
     endTagWithoutMatchingOpenElement: {
       reason: 'Unexpected unopened end tag',
       description: 'Unexpected end tag. Expected no end tag or another end tag',
       url: false
     },
     eofBeforeTagName: {
       reason: 'Unexpected end of file',
       description: 'Unexpected end of file. Expected tag name instead'
     },
     eofInCdata: {
       reason: 'Unexpected end of file in CDATA',
       description: 'Unexpected end of file. Expected `]]>` to close the CDATA'
     },
     eofInComment: {
       reason: 'Unexpected end of file in comment',
       description: 'Unexpected end of file. Expected `-->` to close the comment'
     },
     eofInDoctype: {
       reason: 'Unexpected end of file in doctype',
       description:
         'Unexpected end of file. Expected a valid doctype (such as `<!doctype html>`)'
     },
     eofInElementThatCanContainOnlyText: {
       reason: 'Unexpected end of file in element that can only contain text',
       description: 'Unexpected end of file. Expected text or a closing tag',
       url: false
     },
     eofInScriptHtmlCommentLikeText: {
       reason: 'Unexpected end of file in comment inside script',
       description: 'Unexpected end of file. Expected `-->` to close the comment'
     },
     eofInTag: {
       reason: 'Unexpected end of file in tag',
       description: 'Unexpected end of file. Expected `>` to close the tag'
     },
     incorrectlyClosedComment: {
       reason: 'Incorrectly closed comment',
       description: 'Unexpected `%c-1`. Expected `-->` to close the comment'
     },
     incorrectlyOpenedComment: {
       reason: 'Incorrectly opened comment',
       description: 'Unexpected `%c`. Expected `<!--` to open the comment'
     },
     invalidCharacterSequenceAfterDoctypeName: {
       reason: 'Invalid sequence after doctype name',
       description: 'Unexpected sequence at `%c`. Expected `public` or `system`'
     },
     invalidFirstCharacterOfTagName: {
       reason: 'Invalid first character in tag name',
       description: 'Unexpected `%c`. Expected an ASCII letter instead'
     },
     misplacedDoctype: {
       reason: 'Misplaced doctype',
       description: 'Unexpected doctype. Expected doctype before head',
       url: false
     },
     misplacedStartTagForHeadElement: {
       reason: 'Misplaced `<head>` start tag',
       description:
         'Unexpected start tag `<head>`. Expected `<head>` directly after doctype',
       url: false
     },
     missingAttributeValue: {
       reason: 'Missing attribute value',
       description:
         'Unexpected `%c-1`. Expected an attribute value or no `%c-1` instead'
     },
     missingDoctype: {
       reason: 'Missing doctype before other content',
       description: 'Expected a `<!doctype html>` before anything else',
       url: false
     },
     missingDoctypeName: {
       reason: 'Missing doctype name',
       description: 'Unexpected doctype end at `%c`. Expected `html` instead'
     },
     missingDoctypePublicIdentifier: {
       reason: 'Missing public identifier in doctype',
       description: 'Unexpected `%c`. Expected identifier for `public` instead'
     },
     missingDoctypeSystemIdentifier: {
       reason: 'Missing system identifier in doctype',
       description:
         'Unexpected `%c`. Expected identifier for `system` instead (suggested: `"about:legacy-compat"`)'
     },
     missingEndTagName: {
       reason: 'Missing name in end tag',
       description: 'Unexpected `%c`. Expected an ASCII letter instead'
     },
     missingQuoteBeforeDoctypePublicIdentifier: {
       reason: 'Missing quote before public identifier in doctype',
       description: 'Unexpected `%c`. Expected `"` or `\'` instead'
     },
     missingQuoteBeforeDoctypeSystemIdentifier: {
       reason: 'Missing quote before system identifier in doctype',
       description: 'Unexpected `%c`. Expected `"` or `\'` instead'
     },
     missingSemicolonAfterCharacterReference: {
       reason: 'Missing semicolon after character reference',
       description: 'Unexpected `%c`. Expected `;` instead'
     },
     missingWhitespaceAfterDoctypePublicKeyword: {
       reason: 'Missing whitespace after public identifier in doctype',
       description: 'Unexpected `%c`. Expected ASCII whitespace instead'
     },
     missingWhitespaceAfterDoctypeSystemKeyword: {
       reason: 'Missing whitespace after system identifier in doctype',
       description: 'Unexpected `%c`. Expected ASCII whitespace instead'
     },
     missingWhitespaceBeforeDoctypeName: {
       reason: 'Missing whitespace before doctype name',
       description: 'Unexpected `%c`. Expected ASCII whitespace instead'
     },
     missingWhitespaceBetweenAttributes: {
       reason: 'Missing whitespace between attributes',
       description: 'Unexpected `%c`. Expected ASCII whitespace instead'
     },
     missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers: {
       reason:
         'Missing whitespace between public and system identifiers in doctype',
       description: 'Unexpected `%c`. Expected ASCII whitespace instead'
     },
     nestedComment: {
       reason: 'Unexpected nested comment',
       description: 'Unexpected `<!--`. Expected `-->`'
     },
     nestedNoscriptInHead: {
       reason: 'Unexpected nested `<noscript>` in `<head>`',
       description:
         'Unexpected `<noscript>`. Expected a closing tag or a meta element',
       url: false
     },
     nonConformingDoctype: {
       reason: 'Unexpected non-conforming doctype declaration',
       description:
         'Expected `<!doctype html>` or `<!doctype html system "about:legacy-compat">`',
       url: false
     },
     nonVoidHtmlElementStartTagWithTrailingSolidus: {
       reason: 'Unexpected trailing slash on start tag of non-void element',
       description: 'Unexpected `/`. Expected `>` instead'
     },
     noncharacterCharacterReference: {
       reason:
         'Unexpected noncharacter code point referenced by character reference',
       description: 'Unexpected code point. Do not use noncharacters in HTML'
     },
     noncharacterInInputStream: {
       reason: 'Unexpected noncharacter character',
       description: 'Unexpected code point `%x`. Do not use noncharacters in HTML'
     },
     nullCharacterReference: {
       reason: 'Unexpected NULL character referenced by character reference',
       description: 'Unexpected code point. Do not use NULL characters in HTML'
     },
     openElementsLeftAfterEof: {
       reason: 'Unexpected end of file',
       description: 'Unexpected end of file. Expected closing tag instead',
       url: false
     },
     surrogateCharacterReference: {
       reason: 'Unexpected surrogate character referenced by character reference',
       description:
         'Unexpected code point. Do not use lone surrogate characters in HTML'
     },
     surrogateInInputStream: {
       reason: 'Unexpected surrogate character',
       description:
         'Unexpected code point `%x`. Do not use lone surrogate characters in HTML'
     },
     unexpectedCharacterAfterDoctypeSystemIdentifier: {
       reason: 'Invalid character after system identifier in doctype',
       description: 'Unexpected character at `%c`. Expected `>`'
     },
     unexpectedCharacterInAttributeName: {
       reason: 'Unexpected character in attribute name',
       description:
         'Unexpected `%c`. Expected whitespace, `/`, `>`, `=`, or probably an ASCII letter'
     },
     unexpectedCharacterInUnquotedAttributeValue: {
       reason: 'Unexpected character in unquoted attribute value',
       description: 'Unexpected `%c`. Quote the attribute value to include it'
     },
     unexpectedEqualsSignBeforeAttributeName: {
       reason: 'Unexpected equals sign before attribute name',
       description: 'Unexpected `%c`. Add an attribute name before it'
     },
     unexpectedNullCharacter: {
       reason: 'Unexpected NULL character',
       description:
         'Unexpected code point `%x`. Do not use NULL characters in HTML'
     },
     unexpectedQuestionMarkInsteadOfTagName: {
       reason: 'Unexpected question mark instead of tag name',
       description: 'Unexpected `%c`. Expected an ASCII letter instead'
     },
     unexpectedSolidusInTag: {
       reason: 'Unexpected slash in tag',
       description:
         'Unexpected `%c-1`. Expected it followed by `>` or in a quoted attribute value'
     },
     unknownNamedCharacterReference: {
       reason: 'Unexpected unknown named character reference',
       description:
         'Unexpected character reference. Expected known named character references'
     }
   };

   /**
    * @typedef {import('hast').Root} Root
    * @typedef {import('vfile').VFileCompatible} VFileCompatible
    */


   const base$3 = 'https://html.spec.whatwg.org/multipage/parsing.html#parse-error-';

   const fatalities = {2: true, 1: false, 0: null};

   /**
    * Turn serialized HTML into a hast tree.
    *
    * @param {VFileCompatible} value
    *   Serialized HTML to parse.
    * @param {Options | null | undefined} [options={}]
    *   Configuration (optional).
    * @returns {Root}
    *   Tree.
    */
   function fromHtml(value, options) {
     const settings = options || {};
     const warn = settings.onerror || null;
     const file = value instanceof VFile ? value : new VFile(value);
     const fn = settings.fragment ? parseFragment : parse$3;
     const doc = String(file);
     const p5doc = fn(doc, {
       sourceCodeLocationInfo: true,
       onParseError: settings.onerror ? onerror : null,
       scriptingEnabled: false
     });

     // @ts-expect-error: `parse5` returns document or fragment, which are always
     // mapped to roots.
     return fromParse5(p5doc, {
       file,
       space: settings.space,
       verbose: settings.verbose
     })

     /**
      * @param {Error} error
      */
     function onerror(error) {
       const code = error.code;
       const name = camelcase(code);
       const setting = settings[name];
       const config = setting === undefined || setting === null ? true : setting;
       const level = typeof config === 'number' ? config : config ? 1 : 0;
       const start = {
         line: error.startLine,
         column: error.startCol,
         offset: error.startOffset
       };
       const end = {
         line: error.endLine,
         column: error.endCol,
         offset: error.endOffset
       };

       if (level) {
         /* c8 ignore next */
         const info = errors[name] || {reason: '', description: '', url: ''};
         const message = new VFileMessage(format(info.reason), {start, end});

         if (file.path) {
           message.name = file.path + ':' + message.name;
           message.file = file.path;
         }

         message.source = 'parse-error';
         message.ruleId = code;
         message.fatal = fatalities[level];
         message.note = format(info.description);
         message.url = 'url' in info && info.url === false ? null : base$3 + code;
         // @ts-expect-error: `onerror` is not passed if `warn` is not set.
         warn(message);
       }

       /**
        * @param {string} value
        * @returns {string}
        */
       function format(value) {
         return value
           .replace(
             /%c(?:([-+])(\d+))?/g,
             (_, /** @type {string} */ $1, /** @type {string} */ $2) => {
               const offset =
                 ($2 ? Number.parseInt($2, 10) : 0) * ($1 === '-' ? -1 : 1);
               const char = doc.charAt(error.startOffset + offset);
               return char === '`' ? '` ` `' : char
             }
           )
           .replace(
             /%x/g,
             () =>
               '0x' + doc.charCodeAt(error.startOffset).toString(16).toUpperCase()
           )
       }
     }
   }

   /**
    * @param {string} value
    * @returns {ErrorCode}
    */
   function camelcase(value) {
     // @ts-expect-error: fine.
     return value.replace(/-[a-z]/g, ($0) => $0.charAt(1).toUpperCase())
   }

   /**
    * List of HTML void tag names.
    *
    * @type {Array<string>}
    */
   const htmlVoidElements = [
     'area',
     'base',
     'basefont',
     'bgsound',
     'br',
     'col',
     'command',
     'embed',
     'frame',
     'hr',
     'image',
     'img',
     'input',
     'isindex',
     'keygen',
     'link',
     'menuitem',
     'meta',
     'nextid',
     'param',
     'source',
     'track',
     'wbr'
   ];

   /**
    * @callback Handler
    *   Handle a value, with a certain ID field set to a certain value.
    *   The ID field is passed to `zwitch`, and it’s value is this function’s
    *   place on the `handlers` record.
    * @param {...any} parameters
    *   Arbitrary parameters passed to the zwitch.
    *   The first will be an object with a certain ID field set to a certain value.
    * @returns {any}
    *   Anything!
    */

   /**
    * @callback UnknownHandler
    *   Handle values that do have a certain ID field, but it’s set to a value
    *   that is not listed in the `handlers` record.
    * @param {unknown} value
    *   An object with a certain ID field set to an unknown value.
    * @param {...any} rest
    *   Arbitrary parameters passed to the zwitch.
    * @returns {any}
    *   Anything!
    */

   /**
    * @callback InvalidHandler
    *   Handle values that do not have a certain ID field.
    * @param {unknown} value
    *   Any unknown value.
    * @param {...any} rest
    *   Arbitrary parameters passed to the zwitch.
    * @returns {void|null|undefined|never}
    *   This should crash or return nothing.
    */

   /**
    * @template {InvalidHandler} [Invalid=InvalidHandler]
    * @template {UnknownHandler} [Unknown=UnknownHandler]
    * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]
    * @typedef Options
    *   Configuration (required).
    * @property {Invalid} [invalid]
    *   Handler to use for invalid values.
    * @property {Unknown} [unknown]
    *   Handler to use for unknown values.
    * @property {Handlers} [handlers]
    *   Handlers to use.
    */

   const own$8 = {}.hasOwnProperty;

   /**
    * Handle values based on a field.
    *
    * @template {InvalidHandler} [Invalid=InvalidHandler]
    * @template {UnknownHandler} [Unknown=UnknownHandler]
    * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]
    * @param {string} key
    *   Field to switch on.
    * @param {Options<Invalid, Unknown, Handlers>} [options]
    *   Configuration (required).
    * @returns {{unknown: Unknown, invalid: Invalid, handlers: Handlers, (...parameters: Parameters<Handlers[keyof Handlers]>): ReturnType<Handlers[keyof Handlers]>, (...parameters: Parameters<Unknown>): ReturnType<Unknown>}}
    */
   function zwitch(key, options) {
     const settings = options || {};

     /**
      * Handle one value.
      *
      * Based on the bound `key`, a respective handler will be called.
      * If `value` is not an object, or doesn’t have a `key` property, the special
      * “invalid” handler will be called.
      * If `value` has an unknown `key`, the special “unknown” handler will be
      * called.
      *
      * All arguments, and the context object, are passed through to the handler,
      * and it’s result is returned.
      *
      * @this {unknown}
      *   Any context object.
      * @param {unknown} [value]
      *   Any value.
      * @param {...unknown} parameters
      *   Arbitrary parameters passed to the zwitch.
      * @property {Handler} invalid
      *   Handle for values that do not have a certain ID field.
      * @property {Handler} unknown
      *   Handle values that do have a certain ID field, but it’s set to a value
      *   that is not listed in the `handlers` record.
      * @property {Handlers} handlers
      *   Record of handlers.
      * @returns {unknown}
      *   Anything.
      */
     function one(value, ...parameters) {
       /** @type {Handler|undefined} */
       let fn = one.invalid;
       const handlers = one.handlers;

       if (value && own$8.call(value, key)) {
         // @ts-expect-error Indexable.
         const id = String(value[key]);
         // @ts-expect-error Indexable.
         fn = own$8.call(handlers, id) ? handlers[id] : one.unknown;
       }

       if (fn) {
         return fn.call(this, value, ...parameters)
       }
     }

     one.handlers = settings.handlers || {};
     one.invalid = settings.invalid;
     one.unknown = settings.unknown;

     // @ts-expect-error: matches!
     return one
   }

   /**
    * @typedef CoreOptions
    * @property {Array<string>} [subset=[]]
    *   Whether to only escape the given subset of characters.
    * @property {boolean} [escapeOnly=false]
    *   Whether to only escape possibly dangerous characters.
    *   Those characters are `"`, `&`, `'`, `<`, `>`, and `` ` ``.
    *
    * @typedef FormatOptions
    * @property {(code: number, next: number, options: CoreWithFormatOptions) => string} format
    *   Format strategy.
    *
    * @typedef {CoreOptions & FormatOptions & import('./util/format-smart.js').FormatSmartOptions} CoreWithFormatOptions
    */

   /**
    * Encode certain characters in `value`.
    *
    * @param {string} value
    * @param {CoreWithFormatOptions} options
    * @returns {string}
    */
   function core(value, options) {
     value = value.replace(
       options.subset ? charactersToExpression(options.subset) : /["&'<>`]/g,
       basic
     );

     if (options.subset || options.escapeOnly) {
       return value
     }

     return (
       value
         // Surrogate pairs.
         .replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, surrogate)
         // BMP control characters (C0 except for LF, CR, SP; DEL; and some more
         // non-ASCII ones).
         .replace(
           // eslint-disable-next-line no-control-regex, unicorn/no-hex-escape
           /[\x01-\t\v\f\x0E-\x1F\x7F\x81\x8D\x8F\x90\x9D\xA0-\uFFFF]/g,
           basic
         )
     )

     /**
      * @param {string} pair
      * @param {number} index
      * @param {string} all
      */
     function surrogate(pair, index, all) {
       return options.format(
         (pair.charCodeAt(0) - 0xd800) * 0x400 +
           pair.charCodeAt(1) -
           0xdc00 +
           0x10000,
         all.charCodeAt(index + 2),
         options
       )
     }

     /**
      * @param {string} character
      * @param {number} index
      * @param {string} all
      */
     function basic(character, index, all) {
       return options.format(
         character.charCodeAt(0),
         all.charCodeAt(index + 1),
         options
       )
     }
   }

   /**
    * @param {Array<string>} subset
    * @returns {RegExp}
    */
   function charactersToExpression(subset) {
     /** @type {Array<string>} */
     const groups = [];
     let index = -1;

     while (++index < subset.length) {
       groups.push(subset[index].replace(/[|\\{}()[\]^$+*?.]/g, '\\$&'));
     }

     return new RegExp('(?:' + groups.join('|') + ')', 'g')
   }

   /**
    * Configurable ways to encode characters as hexadecimal references.
    *
    * @param {number} code
    * @param {number} next
    * @param {boolean|undefined} omit
    * @returns {string}
    */
   function toHexadecimal(code, next, omit) {
     const value = '&#x' + code.toString(16).toUpperCase();
     return omit && next && !/[\dA-Fa-f]/.test(String.fromCharCode(next))
       ? value
       : value + ';'
   }

   /**
    * Configurable ways to encode characters as decimal references.
    *
    * @param {number} code
    * @param {number} next
    * @param {boolean|undefined} omit
    * @returns {string}
    */
   function toDecimal(code, next, omit) {
     const value = '&#' + String(code);
     return omit && next && !/\d/.test(String.fromCharCode(next))
       ? value
       : value + ';'
   }

   /**
    * List of legacy HTML named character references that don’t need a trailing semicolon.
    *
    * @type {Array<string>}
    */
   const characterEntitiesLegacy = [
     'AElig',
     'AMP',
     'Aacute',
     'Acirc',
     'Agrave',
     'Aring',
     'Atilde',
     'Auml',
     'COPY',
     'Ccedil',
     'ETH',
     'Eacute',
     'Ecirc',
     'Egrave',
     'Euml',
     'GT',
     'Iacute',
     'Icirc',
     'Igrave',
     'Iuml',
     'LT',
     'Ntilde',
     'Oacute',
     'Ocirc',
     'Ograve',
     'Oslash',
     'Otilde',
     'Ouml',
     'QUOT',
     'REG',
     'THORN',
     'Uacute',
     'Ucirc',
     'Ugrave',
     'Uuml',
     'Yacute',
     'aacute',
     'acirc',
     'acute',
     'aelig',
     'agrave',
     'amp',
     'aring',
     'atilde',
     'auml',
     'brvbar',
     'ccedil',
     'cedil',
     'cent',
     'copy',
     'curren',
     'deg',
     'divide',
     'eacute',
     'ecirc',
     'egrave',
     'eth',
     'euml',
     'frac12',
     'frac14',
     'frac34',
     'gt',
     'iacute',
     'icirc',
     'iexcl',
     'igrave',
     'iquest',
     'iuml',
     'laquo',
     'lt',
     'macr',
     'micro',
     'middot',
     'nbsp',
     'not',
     'ntilde',
     'oacute',
     'ocirc',
     'ograve',
     'ordf',
     'ordm',
     'oslash',
     'otilde',
     'ouml',
     'para',
     'plusmn',
     'pound',
     'quot',
     'raquo',
     'reg',
     'sect',
     'shy',
     'sup1',
     'sup2',
     'sup3',
     'szlig',
     'thorn',
     'times',
     'uacute',
     'ucirc',
     'ugrave',
     'uml',
     'uuml',
     'yacute',
     'yen',
     'yuml'
   ];

   /**
    * Map of named character references from HTML 4.
    *
    * @type {Record<string, string>}
    */
   const characterEntitiesHtml4 = {
     nbsp: ' ',
     iexcl: '¡',
     cent: '¢',
     pound: '£',
     curren: '¤',
     yen: '¥',
     brvbar: '¦',
     sect: '§',
     uml: '¨',
     copy: '©',
     ordf: 'ª',
     laquo: '«',
     not: '¬',
     shy: '­',
     reg: '®',
     macr: '¯',
     deg: '°',
     plusmn: '±',
     sup2: '²',
     sup3: '³',
     acute: '´',
     micro: 'µ',
     para: '¶',
     middot: '·',
     cedil: '¸',
     sup1: '¹',
     ordm: 'º',
     raquo: '»',
     frac14: '¼',
     frac12: '½',
     frac34: '¾',
     iquest: '¿',
     Agrave: 'À',
     Aacute: 'Á',
     Acirc: 'Â',
     Atilde: 'Ã',
     Auml: 'Ä',
     Aring: 'Å',
     AElig: 'Æ',
     Ccedil: 'Ç',
     Egrave: 'È',
     Eacute: 'É',
     Ecirc: 'Ê',
     Euml: 'Ë',
     Igrave: 'Ì',
     Iacute: 'Í',
     Icirc: 'Î',
     Iuml: 'Ï',
     ETH: 'Ð',
     Ntilde: 'Ñ',
     Ograve: 'Ò',
     Oacute: 'Ó',
     Ocirc: 'Ô',
     Otilde: 'Õ',
     Ouml: 'Ö',
     times: '×',
     Oslash: 'Ø',
     Ugrave: 'Ù',
     Uacute: 'Ú',
     Ucirc: 'Û',
     Uuml: 'Ü',
     Yacute: 'Ý',
     THORN: 'Þ',
     szlig: 'ß',
     agrave: 'à',
     aacute: 'á',
     acirc: 'â',
     atilde: 'ã',
     auml: 'ä',
     aring: 'å',
     aelig: 'æ',
     ccedil: 'ç',
     egrave: 'è',
     eacute: 'é',
     ecirc: 'ê',
     euml: 'ë',
     igrave: 'ì',
     iacute: 'í',
     icirc: 'î',
     iuml: 'ï',
     eth: 'ð',
     ntilde: 'ñ',
     ograve: 'ò',
     oacute: 'ó',
     ocirc: 'ô',
     otilde: 'õ',
     ouml: 'ö',
     divide: '÷',
     oslash: 'ø',
     ugrave: 'ù',
     uacute: 'ú',
     ucirc: 'û',
     uuml: 'ü',
     yacute: 'ý',
     thorn: 'þ',
     yuml: 'ÿ',
     fnof: 'ƒ',
     Alpha: 'Α',
     Beta: 'Β',
     Gamma: 'Γ',
     Delta: 'Δ',
     Epsilon: 'Ε',
     Zeta: 'Ζ',
     Eta: 'Η',
     Theta: 'Θ',
     Iota: 'Ι',
     Kappa: 'Κ',
     Lambda: 'Λ',
     Mu: 'Μ',
     Nu: 'Ν',
     Xi: 'Ξ',
     Omicron: 'Ο',
     Pi: 'Π',
     Rho: 'Ρ',
     Sigma: 'Σ',
     Tau: 'Τ',
     Upsilon: 'Υ',
     Phi: 'Φ',
     Chi: 'Χ',
     Psi: 'Ψ',
     Omega: 'Ω',
     alpha: 'α',
     beta: 'β',
     gamma: 'γ',
     delta: 'δ',
     epsilon: 'ε',
     zeta: 'ζ',
     eta: 'η',
     theta: 'θ',
     iota: 'ι',
     kappa: 'κ',
     lambda: 'λ',
     mu: 'μ',
     nu: 'ν',
     xi: 'ξ',
     omicron: 'ο',
     pi: 'π',
     rho: 'ρ',
     sigmaf: 'ς',
     sigma: 'σ',
     tau: 'τ',
     upsilon: 'υ',
     phi: 'φ',
     chi: 'χ',
     psi: 'ψ',
     omega: 'ω',
     thetasym: 'ϑ',
     upsih: 'ϒ',
     piv: 'ϖ',
     bull: '•',
     hellip: '…',
     prime: '′',
     Prime: '″',
     oline: '‾',
     frasl: '⁄',
     weierp: '℘',
     image: 'ℑ',
     real: 'ℜ',
     trade: '™',
     alefsym: 'ℵ',
     larr: '←',
     uarr: '↑',
     rarr: '→',
     darr: '↓',
     harr: '↔',
     crarr: '↵',
     lArr: '⇐',
     uArr: '⇑',
     rArr: '⇒',
     dArr: '⇓',
     hArr: '⇔',
     forall: '∀',
     part: '∂',
     exist: '∃',
     empty: '∅',
     nabla: '∇',
     isin: '∈',
     notin: '∉',
     ni: '∋',
     prod: '∏',
     sum: '∑',
     minus: '−',
     lowast: '∗',
     radic: '√',
     prop: '∝',
     infin: '∞',
     ang: '∠',
     and: '∧',
     or: '∨',
     cap: '∩',
     cup: '∪',
     int: '∫',
     there4: '∴',
     sim: '∼',
     cong: '≅',
     asymp: '≈',
     ne: '≠',
     equiv: '≡',
     le: '≤',
     ge: '≥',
     sub: '⊂',
     sup: '⊃',
     nsub: '⊄',
     sube: '⊆',
     supe: '⊇',
     oplus: '⊕',
     otimes: '⊗',
     perp: '⊥',
     sdot: '⋅',
     lceil: '⌈',
     rceil: '⌉',
     lfloor: '⌊',
     rfloor: '⌋',
     lang: '〈',
     rang: '〉',
     loz: '◊',
     spades: '♠',
     clubs: '♣',
     hearts: '♥',
     diams: '♦',
     quot: '"',
     amp: '&',
     lt: '<',
     gt: '>',
     OElig: 'Œ',
     oelig: 'œ',
     Scaron: 'Š',
     scaron: 'š',
     Yuml: 'Ÿ',
     circ: 'ˆ',
     tilde: '˜',
     ensp: ' ',
     emsp: ' ',
     thinsp: ' ',
     zwnj: '‌',
     zwj: '‍',
     lrm: '‎',
     rlm: '‏',
     ndash: '–',
     mdash: '—',
     lsquo: '‘',
     rsquo: '’',
     sbquo: '‚',
     ldquo: '“',
     rdquo: '”',
     bdquo: '„',
     dagger: '†',
     Dagger: '‡',
     permil: '‰',
     lsaquo: '‹',
     rsaquo: '›',
     euro: '€'
   };

   /**
    * List of legacy (that don’t need a trailing `;`) named references which could,
    * depending on what follows them, turn into a different meaning
    *
    * @type {Array<string>}
    */
   const dangerous = [
     'cent',
     'copy',
     'divide',
     'gt',
     'lt',
     'not',
     'para',
     'times'
   ];

   const own$7 = {}.hasOwnProperty;

   /**
    * `characterEntitiesHtml4` but inverted.
    *
    * @type {Record<string, string>}
    */
   const characters = {};

   /** @type {string} */
   let key;

   for (key in characterEntitiesHtml4) {
     if (own$7.call(characterEntitiesHtml4, key)) {
       characters[characterEntitiesHtml4[key]] = key;
     }
   }

   /**
    * Configurable ways to encode characters as named references.
    *
    * @param {number} code
    * @param {number} next
    * @param {boolean|undefined} omit
    * @param {boolean|undefined} attribute
    * @returns {string}
    */
   function toNamed(code, next, omit, attribute) {
     const character = String.fromCharCode(code);

     if (own$7.call(characters, character)) {
       const name = characters[character];
       const value = '&' + name;

       if (
         omit &&
         characterEntitiesLegacy.includes(name) &&
         !dangerous.includes(name) &&
         (!attribute ||
           (next &&
             next !== 61 /* `=` */ &&
             /[^\da-z]/i.test(String.fromCharCode(next))))
       ) {
         return value
       }

       return value + ';'
     }

     return ''
   }

   /**
    * @typedef FormatSmartOptions
    * @property {boolean} [useNamedReferences=false]
    *   Prefer named character references (`&amp;`) where possible.
    * @property {boolean} [useShortestReferences=false]
    *   Prefer the shortest possible reference, if that results in less bytes.
    *   **Note**: `useNamedReferences` can be omitted when using `useShortestReferences`.
    * @property {boolean} [omitOptionalSemicolons=false]
    *   Whether to omit semicolons when possible.
    *   **Note**: This creates what HTML calls “parse errors” but is otherwise still valid HTML — don’t use this except when building a minifier.
    *   Omitting semicolons is possible for certain named and numeric references in some cases.
    * @property {boolean} [attribute=false]
    *   Create character references which don’t fail in attributes.
    *   **Note**: `attribute` only applies when operating dangerously with
    *   `omitOptionalSemicolons: true`.
    */


   /**
    * Configurable ways to encode a character yielding pretty or small results.
    *
    * @param {number} code
    * @param {number} next
    * @param {FormatSmartOptions} options
    * @returns {string}
    */
   function formatSmart(code, next, options) {
     let numeric = toHexadecimal(code, next, options.omitOptionalSemicolons);
     /** @type {string|undefined} */
     let named;

     if (options.useNamedReferences || options.useShortestReferences) {
       named = toNamed(
         code,
         next,
         options.omitOptionalSemicolons,
         options.attribute
       );
     }

     // Use the shortest numeric reference when requested.
     // A simple algorithm would use decimal for all code points under 100, as
     // those are shorter than hexadecimal:
     //
     // * `&#99;` vs `&#x63;` (decimal shorter)
     // * `&#100;` vs `&#x64;` (equal)
     //
     // However, because we take `next` into consideration when `omit` is used,
     // And it would be possible that decimals are shorter on bigger values as
     // well if `next` is hexadecimal but not decimal, we instead compare both.
     if (
       (options.useShortestReferences || !named) &&
       options.useShortestReferences
     ) {
       const decimal = toDecimal(code, next, options.omitOptionalSemicolons);

       if (decimal.length < numeric.length) {
         numeric = decimal;
       }
     }

     return named &&
       (!options.useShortestReferences || named.length < numeric.length)
       ? named
       : numeric
   }

   /**
    * The smallest way to encode a character.
    *
    * @param {number} code
    * @returns {string}
    */
   function formatBasic(code) {
     return '&#x' + code.toString(16).toUpperCase() + ';'
   }

   /**
    * @typedef {import('./core.js').CoreOptions & import('./util/format-smart.js').FormatSmartOptions} Options
    * @typedef {import('./core.js').CoreOptions} LightOptions
    */


   /**
    * Encode special characters in `value`.
    *
    * @param {string} value
    *   Value to encode.
    * @param {Options} [options]
    *   Configuration.
    * @returns {string}
    *   Encoded value.
    */
   function stringifyEntities(value, options) {
     return core(value, Object.assign({format: formatSmart}, options))
   }

   /**
    * Encode special characters in `value` as hexadecimals.
    *
    * @param {string} value
    *   Value to encode.
    * @param {LightOptions} [options]
    *   Configuration.
    * @returns {string}
    *   Encoded value.
    */
   function stringifyEntitiesLight(value, options) {
     return core(value, Object.assign({format: formatBasic}, options))
   }

   /**
    * @typedef {import('../types.js').Comment} Comment
    * @typedef {import('../types.js').Parent} Parent
    * @typedef {import('../types.js').State} State
    */


   /**
    * Serialize a comment.
    *
    * @param {Comment} node
    *   Node to handle.
    * @param {number | undefined} _1
    *   Index of `node` in `parent.
    * @param {Parent | undefined} _2
    *   Parent of `node`.
    * @param {State} state
    *   Info passed around about the current state.
    * @returns {string}
    *   Serialized node.
    */
   function comment$1(node, _1, _2, state) {
     // See: <https://html.spec.whatwg.org/multipage/syntax.html#comments>
     return state.settings.bogusComments
       ? '<?' +
           stringifyEntities(
             node.value,
             Object.assign({}, state.settings.characterReferences, {subset: ['>']})
           ) +
           '>'
       : '<!--' + node.value.replace(/^>|^->|<!--|-->|--!>|<!-$/g, encode) + '-->'

     /**
      * @param {string} $0
      */
     function encode($0) {
       return stringifyEntities(
         $0,
         Object.assign({}, state.settings.characterReferences, {
           subset: ['<', '>']
         })
       )
     }
   }

   /**
    * @typedef {import('../types.js').DocType} DocType
    * @typedef {import('../types.js').Parent} Parent
    * @typedef {import('../types.js').State} State
    */

   /**
    * Serialize a doctype.
    *
    * @param {DocType} _1
    *   Node to handle.
    * @param {number | undefined} _2
    *   Index of `node` in `parent.
    * @param {Parent | undefined} _3
    *   Parent of `node`.
    * @param {State} state
    *   Info passed around about the current state.
    * @returns {string}
    *   Serialized node.
    */
   function doctype(_1, _2, _3, state) {
     return (
       '<!' +
       (state.settings.upperDoctype ? 'DOCTYPE' : 'doctype') +
       (state.settings.tightDoctype ? '' : ' ') +
       'html>'
     )
   }

   /**
    * Count how often a character (or substring) is used in a string.
    *
    * @param {string} value
    *   Value to search in.
    * @param {string} character
    *   Character (or substring) to look for.
    * @return {number}
    *   Number of times `character` occurred in `value`.
    */
   function ccount(value, character) {
     const source = String(value);

     if (typeof character !== 'string') {
       throw new TypeError('Expected character')
     }

     let count = 0;
     let index = source.indexOf(character);

     while (index !== -1) {
       count++;
       index = source.indexOf(character, index + character.length);
     }

     return count
   }

   /**
    * Check if the given value is *inter-element whitespace*.
    *
    * @param {unknown} thing
    *   Thing to check (typically `Node` or `string`).
    * @returns {boolean}
    *   Whether the `value` is inter-element whitespace (`boolean`): consisting of
    *   zero or more of space, tab (`\t`), line feed (`\n`), carriage return
    *   (`\r`), or form feed (`\f`).
    *   If a node is passed it must be a `Text` node, whose `value` field is
    *   checked.
    */
   function whitespace$3(thing) {
     /** @type {string} */
     const value =
       // @ts-expect-error looks like a node.
       thing && typeof thing === 'object' && thing.type === 'text'
         ? // @ts-expect-error looks like a text.
           thing.value || ''
         : thing;

     // HTML whitespace expression.
     // See <https://infra.spec.whatwg.org/#ascii-whitespace>.
     return typeof value === 'string' && value.replace(/[ \t\n\f\r]/g, '') === ''
   }

   /**
    * @typedef {import('../../types.js').Parent} Parent
    * @typedef {import('../../types.js').Content} Content
    */


   const siblingAfter = siblings(1);
   const siblingBefore = siblings(-1);

   /**
    * Factory to check siblings in a direction.
    *
    * @param {number} increment
    */
   function siblings(increment) {
     return sibling

     /**
      * Find applicable siblings in a direction.
      *
      * @param {Parent | null | undefined} parent
      * @param {number | null | undefined} index
      * @param {boolean | null | undefined} [includeWhitespace=false]
      * @returns {Content}
      */
     function sibling(parent, index, includeWhitespace) {
       const siblings = parent ? parent.children : [];
       let offset = (index || 0) + increment;
       let next = siblings && siblings[offset];

       if (!includeWhitespace) {
         while (next && whitespace$3(next)) {
           offset += increment;
           next = siblings[offset];
         }
       }

       return next
     }
   }

   /**
    * @typedef {import('../types.js').OmitHandle} OmitHandle
    */

   const own$6 = {}.hasOwnProperty;

   /**
    * Factory to check if a given node can have a tag omitted.
    *
    * @param {Record<string, OmitHandle>} handlers
    *   Omission handlers, where each key is a tag name, and each value is the
    *   corresponding handler.
    * @returns {OmitHandle}
    *   Whether to omit a tag of an element.
    */
   function omission(handlers) {
     return omit

     /**
      * Check if a given node can have a tag omitted.
      *
      * @type {OmitHandle}
      */
     function omit(node, index, parent) {
       return (
         own$6.call(handlers, node.tagName) &&
         handlers[node.tagName](node, index, parent)
       )
     }
   }

   /**
    * @typedef {import('../types.js').Element} Element
    * @typedef {import('../types.js').Parent} Parent
    */


   const closing$2 = omission({
     html: html$3,
     head: headOrColgroupOrCaption,
     body: body$2,
     p: p$2,
     li: li$2,
     dt: dt$1,
     dd: dd$1,
     rt: rubyElement,
     rp: rubyElement,
     optgroup,
     option,
     menuitem,
     colgroup: headOrColgroupOrCaption,
     caption: headOrColgroupOrCaption,
     thead,
     tbody: tbody$1,
     tfoot,
     tr,
     td: cells,
     th: cells
   });

   /**
    * Macro for `</head>`, `</colgroup>`, and `</caption>`.
    *
    * @param {Element} _
    *   Element.
    * @param {number | undefined} index
    *   Index of element in parent.
    * @param {Parent | undefined} parent
    *   Parent of element.
    * @returns {boolean}
    *   Whether the closing tag can be omitted.
    */
   function headOrColgroupOrCaption(_, index, parent) {
     const next = siblingAfter(parent, index, true);
     return (
       !next ||
       (next.type !== 'comment' &&
         !(next.type === 'text' && whitespace$3(next.value.charAt(0))))
     )
   }

   /**
    * Whether to omit `</html>`.
    *
    * @param {Element} _
    *   Element.
    * @param {number | undefined} index
    *   Index of element in parent.
    * @param {Parent | undefined} parent
    *   Parent of element.
    * @returns {boolean}
    *   Whether the closing tag can be omitted.
    */
   function html$3(_, index, parent) {
     const next = siblingAfter(parent, index);
     return !next || next.type !== 'comment'
   }

   /**
    * Whether to omit `</body>`.
    *
    * @param {Element} _
    *   Element.
    * @param {number | undefined} index
    *   Index of element in parent.
    * @param {Parent | undefined} parent
    *   Parent of element.
    * @returns {boolean}
    *   Whether the closing tag can be omitted.
    */
   function body$2(_, index, parent) {
     const next = siblingAfter(parent, index);
     return !next || next.type !== 'comment'
   }

   /**
    * Whether to omit `</p>`.
    *
    * @param {Element} _
    *   Element.
    * @param {number | undefined} index
    *   Index of element in parent.
    * @param {Parent | undefined} parent
    *   Parent of element.
    * @returns {boolean}
    *   Whether the closing tag can be omitted.
    */
   // eslint-disable-next-line complexity
   function p$2(_, index, parent) {
     const next = siblingAfter(parent, index);
     return next
       ? next.type === 'element' &&
           (next.tagName === 'address' ||
             next.tagName === 'article' ||
             next.tagName === 'aside' ||
             next.tagName === 'blockquote' ||
             next.tagName === 'details' ||
             next.tagName === 'div' ||
             next.tagName === 'dl' ||
             next.tagName === 'fieldset' ||
             next.tagName === 'figcaption' ||
             next.tagName === 'figure' ||
             next.tagName === 'footer' ||
             next.tagName === 'form' ||
             next.tagName === 'h1' ||
             next.tagName === 'h2' ||
             next.tagName === 'h3' ||
             next.tagName === 'h4' ||
             next.tagName === 'h5' ||
             next.tagName === 'h6' ||
             next.tagName === 'header' ||
             next.tagName === 'hgroup' ||
             next.tagName === 'hr' ||
             next.tagName === 'main' ||
             next.tagName === 'menu' ||
             next.tagName === 'nav' ||
             next.tagName === 'ol' ||
             next.tagName === 'p' ||
             next.tagName === 'pre' ||
             next.tagName === 'section' ||
             next.tagName === 'table' ||
             next.tagName === 'ul')
       : !parent ||
           // Confusing parent.
           !(
             parent.type === 'element' &&
             (parent.tagName === 'a' ||
               parent.tagName === 'audio' ||
               parent.tagName === 'del' ||
               parent.tagName === 'ins' ||
               parent.tagName === 'map' ||
               parent.tagName === 'noscript' ||
               parent.tagName === 'video')
           )
   }

   /**
    * Whether to omit `</li>`.
    *
    * @param {Element} _
    *   Element.
    * @param {number | undefined} index
    *   Index of element in parent.
    * @param {Parent | undefined} parent
    *   Parent of element.
    * @returns {boolean}
    *   Whether the closing tag can be omitted.
    */
   function li$2(_, index, parent) {
     const next = siblingAfter(parent, index);
     return !next || (next.type === 'element' && next.tagName === 'li')
   }

   /**
    * Whether to omit `</dt>`.
    *
    * @param {Element} _
    *   Element.
    * @param {number | undefined} index
    *   Index of element in parent.
    * @param {Parent | undefined} parent
    *   Parent of element.
    * @returns {boolean}
    *   Whether the closing tag can be omitted.
    */
   function dt$1(_, index, parent) {
     const next = siblingAfter(parent, index);
     return (
       next &&
       next.type === 'element' &&
       (next.tagName === 'dt' || next.tagName === 'dd')
     )
   }

   /**
    * Whether to omit `</dd>`.
    *
    * @param {Element} _
    *   Element.
    * @param {number | undefined} index
    *   Index of element in parent.
    * @param {Parent | undefined} parent
    *   Parent of element.
    * @returns {boolean}
    *   Whether the closing tag can be omitted.
    */
   function dd$1(_, index, parent) {
     const next = siblingAfter(parent, index);
     return (
       !next ||
       (next.type === 'element' &&
         (next.tagName === 'dt' || next.tagName === 'dd'))
     )
   }

   /**
    * Whether to omit `</rt>` or `</rp>`.
    *
    * @param {Element} _
    *   Element.
    * @param {number | undefined} index
    *   Index of element in parent.
    * @param {Parent | undefined} parent
    *   Parent of element.
    * @returns {boolean}
    *   Whether the closing tag can be omitted.
    */
   function rubyElement(_, index, parent) {
     const next = siblingAfter(parent, index);
     return (
       !next ||
       (next.type === 'element' &&
         (next.tagName === 'rp' || next.tagName === 'rt'))
     )
   }

   /**
    * Whether to omit `</optgroup>`.
    *
    * @param {Element} _
    *   Element.
    * @param {number | undefined} index
    *   Index of element in parent.
    * @param {Parent | undefined} parent
    *   Parent of element.
    * @returns {boolean}
    *   Whether the closing tag can be omitted.
    */
   function optgroup(_, index, parent) {
     const next = siblingAfter(parent, index);
     return !next || (next.type === 'element' && next.tagName === 'optgroup')
   }

   /**
    * Whether to omit `</option>`.
    *
    * @param {Element} _
    *   Element.
    * @param {number | undefined} index
    *   Index of element in parent.
    * @param {Parent | undefined} parent
    *   Parent of element.
    * @returns {boolean}
    *   Whether the closing tag can be omitted.
    */
   function option(_, index, parent) {
     const next = siblingAfter(parent, index);
     return (
       !next ||
       (next.type === 'element' &&
         (next.tagName === 'option' || next.tagName === 'optgroup'))
     )
   }

   /**
    * Whether to omit `</menuitem>`.
    *
    * @param {Element} _
    *   Element.
    * @param {number | undefined} index
    *   Index of element in parent.
    * @param {Parent | undefined} parent
    *   Parent of element.
    * @returns {boolean}
    *   Whether the closing tag can be omitted.
    */
   function menuitem(_, index, parent) {
     const next = siblingAfter(parent, index);
     return (
       !next ||
       (next.type === 'element' &&
         (next.tagName === 'menuitem' ||
           next.tagName === 'hr' ||
           next.tagName === 'menu'))
     )
   }

   /**
    * Whether to omit `</thead>`.
    *
    * @param {Element} _
    *   Element.
    * @param {number | undefined} index
    *   Index of element in parent.
    * @param {Parent | undefined} parent
    *   Parent of element.
    * @returns {boolean}
    *   Whether the closing tag can be omitted.
    */
   function thead(_, index, parent) {
     const next = siblingAfter(parent, index);
     return (
       next &&
       next.type === 'element' &&
       (next.tagName === 'tbody' || next.tagName === 'tfoot')
     )
   }

   /**
    * Whether to omit `</tbody>`.
    *
    * @param {Element} _
    *   Element.
    * @param {number | undefined} index
    *   Index of element in parent.
    * @param {Parent | undefined} parent
    *   Parent of element.
    * @returns {boolean}
    *   Whether the closing tag can be omitted.
    */
   function tbody$1(_, index, parent) {
     const next = siblingAfter(parent, index);
     return (
       !next ||
       (next.type === 'element' &&
         (next.tagName === 'tbody' || next.tagName === 'tfoot'))
     )
   }

   /**
    * Whether to omit `</tfoot>`.
    *
    * @param {Element} _
    *   Element.
    * @param {number | undefined} index
    *   Index of element in parent.
    * @param {Parent | undefined} parent
    *   Parent of element.
    * @returns {boolean}
    *   Whether the closing tag can be omitted.
    */
   function tfoot(_, index, parent) {
     return !siblingAfter(parent, index)
   }

   /**
    * Whether to omit `</tr>`.
    *
    * @param {Element} _
    *   Element.
    * @param {number | undefined} index
    *   Index of element in parent.
    * @param {Parent | undefined} parent
    *   Parent of element.
    * @returns {boolean}
    *   Whether the closing tag can be omitted.
    */
   function tr(_, index, parent) {
     const next = siblingAfter(parent, index);
     return !next || (next.type === 'element' && next.tagName === 'tr')
   }

   /**
    * Whether to omit `</td>` or `</th>`.
    *
    * @param {Element} _
    *   Element.
    * @param {number | undefined} index
    *   Index of element in parent.
    * @param {Parent | undefined} parent
    *   Parent of element.
    * @returns {boolean}
    *   Whether the closing tag can be omitted.
    */
   function cells(_, index, parent) {
     const next = siblingAfter(parent, index);
     return (
       !next ||
       (next.type === 'element' &&
         (next.tagName === 'td' || next.tagName === 'th'))
     )
   }

   /**
    * @typedef {import('../types.js').Element} Element
    * @typedef {import('../types.js').Parent} Parent
    * @typedef {import('../types.js').Content} Content
    */


   const opening$2 = omission({
     html: html$2,
     head,
     body: body$1,
     colgroup,
     tbody
   });

   /**
    * Whether to omit `<html>`.
    *
    * @param {Element} node
    *   Element.
    * @returns {boolean}
    *   Whether the opening tag can be omitted.
    */
   function html$2(node) {
     const head = siblingAfter(node, -1);
     return !head || head.type !== 'comment'
   }

   /**
    * Whether to omit `<head>`.
    *
    * @param {Element} node
    *   Element.
    * @returns {boolean}
    *   Whether the opening tag can be omitted.
    */
   function head(node) {
     const children = node.children;
     /** @type {Array<string>} */
     const seen = [];
     let index = -1;

     while (++index < children.length) {
       const child = children[index];
       if (
         child.type === 'element' &&
         (child.tagName === 'title' || child.tagName === 'base')
       ) {
         if (seen.includes(child.tagName)) return false
         seen.push(child.tagName);
       }
     }

     return children.length > 0
   }

   /**
    * Whether to omit `<body>`.
    *
    * @param {Element} node
    *   Element.
    * @returns {boolean}
    *   Whether the opening tag can be omitted.
    */
   function body$1(node) {
     const head = siblingAfter(node, -1, true);

     return (
       !head ||
       (head.type !== 'comment' &&
         !(head.type === 'text' && whitespace$3(head.value.charAt(0))) &&
         !(
           head.type === 'element' &&
           (head.tagName === 'meta' ||
             head.tagName === 'link' ||
             head.tagName === 'script' ||
             head.tagName === 'style' ||
             head.tagName === 'template')
         ))
     )
   }

   /**
    * Whether to omit `<colgroup>`.
    * The spec describes some logic for the opening tag, but it’s easier to
    * implement in the closing tag, to the same effect, so we handle it there
    * instead.
    *
    * @param {Element} node
    *   Element.
    * @param {number | undefined} index
    *   Index of element in parent.
    * @param {Parent | undefined} parent
    *   Parent of element.
    * @returns {boolean}
    *   Whether the opening tag can be omitted.
    */
   function colgroup(node, index, parent) {
     const previous = siblingBefore(parent, index);
     const head = siblingAfter(node, -1, true);

     // Previous colgroup was already omitted.
     if (
       parent &&
       previous &&
       previous.type === 'element' &&
       previous.tagName === 'colgroup' &&
       closing$2(previous, parent.children.indexOf(previous), parent)
     ) {
       return false
     }

     return head && head.type === 'element' && head.tagName === 'col'
   }

   /**
    * Whether to omit `<tbody>`.
    *
    * @param {Element} node
    *   Element.
    * @param {number | undefined} index
    *   Index of element in parent.
    * @param {Parent | undefined} parent
    *   Parent of element.
    * @returns {boolean}
    *   Whether the opening tag can be omitted.
    */
   function tbody(node, index, parent) {
     const previous = siblingBefore(parent, index);
     const head = siblingAfter(node, -1);

     // Previous table section was already omitted.
     if (
       parent &&
       previous &&
       previous.type === 'element' &&
       (previous.tagName === 'thead' || previous.tagName === 'tbody') &&
       closing$2(previous, parent.children.indexOf(previous), parent)
     ) {
       return false
     }

     return head && head.type === 'element' && head.tagName === 'tr'
   }

   /**
    * @typedef {import('../types.js').State} State
    * @typedef {import('../types.js').Parent} Parent
    * @typedef {import('../types.js').Element} Element
    * @typedef {import('../types.js').Properties} Properties
    * @typedef {import('../types.js').PropertyValue} PropertyValue
    */


   /**
    * Maps of subsets.
    *
    * Each value is a matrix of tuples.
    * The value at `0` causes parse errors, the value at `1` is valid.
    * Of both, the value at `0` is unsafe, and the value at `1` is safe.
    *
    * @type {Record<'name' | 'unquoted' | 'single' | 'double', Array<[Array<string>, Array<string>]>>}
    */
   const constants$1 = {
     // See: <https://html.spec.whatwg.org/#attribute-name-state>.
     name: [
       ['\t\n\f\r &/=>'.split(''), '\t\n\f\r "&\'/=>`'.split('')],
       ['\0\t\n\f\r "&\'/<=>'.split(''), '\0\t\n\f\r "&\'/<=>`'.split('')]
     ],
     // See: <https://html.spec.whatwg.org/#attribute-value-(unquoted)-state>.
     unquoted: [
       ['\t\n\f\r &>'.split(''), '\0\t\n\f\r "&\'<=>`'.split('')],
       ['\0\t\n\f\r "&\'<=>`'.split(''), '\0\t\n\f\r "&\'<=>`'.split('')]
     ],
     // See: <https://html.spec.whatwg.org/#attribute-value-(single-quoted)-state>.
     single: [
       ["&'".split(''), '"&\'`'.split('')],
       ["\0&'".split(''), '\0"&\'`'.split('')]
     ],
     // See: <https://html.spec.whatwg.org/#attribute-value-(double-quoted)-state>.
     double: [
       ['"&'.split(''), '"&\'`'.split('')],
       ['\0"&'.split(''), '\0"&\'`'.split('')]
     ]
   };

   /**
    * Serialize an element node.
    *
    * @param {Element} node
    *   Node to handle.
    * @param {number | undefined} index
    *   Index of `node` in `parent.
    * @param {Parent | undefined} parent
    *   Parent of `node`.
    * @param {State} state
    *   Info passed around about the current state.
    * @returns {string}
    *   Serialized node.
    */
   // eslint-disable-next-line complexity
   function element$3(node, index, parent, state) {
     const schema = state.schema;
     const omit = schema.space === 'svg' ? false : state.settings.omitOptionalTags;
     let selfClosing =
       schema.space === 'svg'
         ? state.settings.closeEmptyElements
         : state.settings.voids.includes(node.tagName.toLowerCase());
     /** @type {Array<string>} */
     const parts = [];
     /** @type {string} */
     let last;

     if (schema.space === 'html' && node.tagName === 'svg') {
       state.schema = svg;
     }

     const attrs = serializeAttributes(state, node.properties);

     const content = state.all(
       schema.space === 'html' && node.tagName === 'template' ? node.content : node
     );

     state.schema = schema;

     // If the node is categorised as void, but it has children, remove the
     // categorisation.
     // This enables for example `menuitem`s, which are void in W3C HTML but not
     // void in WHATWG HTML, to be stringified properly.
     if (content) selfClosing = false;

     if (attrs || !omit || !opening$2(node, index, parent)) {
       parts.push('<', node.tagName, attrs ? ' ' + attrs : '');

       if (
         selfClosing &&
         (schema.space === 'svg' || state.settings.closeSelfClosing)
       ) {
         last = attrs.charAt(attrs.length - 1);
         if (
           !state.settings.tightSelfClosing ||
           last === '/' ||
           (last && last !== '"' && last !== "'")
         ) {
           parts.push(' ');
         }

         parts.push('/');
       }

       parts.push('>');
     }

     parts.push(content);

     if (!selfClosing && (!omit || !closing$2(node, index, parent))) {
       parts.push('</' + node.tagName + '>');
     }

     return parts.join('')
   }

   /**
    * @param {State} state
    * @param {Properties | null | undefined} props
    * @returns {string}
    */
   function serializeAttributes(state, props) {
     /** @type {Array<string>} */
     const values = [];
     let index = -1;
     /** @type {string} */
     let key;

     if (props) {
       for (key in props) {
         if (props[key] !== undefined && props[key] !== null) {
           const value = serializeAttribute(state, key, props[key]);
           if (value) values.push(value);
         }
       }
     }

     while (++index < values.length) {
       const last = state.settings.tightAttributes
         ? values[index].charAt(values[index].length - 1)
         : null;

       // In tight mode, don’t add a space after quoted attributes.
       if (index !== values.length - 1 && last !== '"' && last !== "'") {
         values[index] += ' ';
       }
     }

     return values.join('')
   }

   /**
    * @param {State} state
    * @param {string} key
    * @param {PropertyValue} value
    * @returns {string}
    */
   // eslint-disable-next-line complexity
   function serializeAttribute(state, key, value) {
     const info = find(state.schema, key);
     const x =
       state.settings.allowParseErrors && state.schema.space === 'html' ? 0 : 1;
     const y = state.settings.allowDangerousCharacters ? 0 : 1;
     let quote = state.quote;
     /** @type {string | undefined} */
     let result;

     if (info.overloadedBoolean && (value === info.attribute || value === '')) {
       value = true;
     } else if (
       info.boolean ||
       (info.overloadedBoolean && typeof value !== 'string')
     ) {
       value = Boolean(value);
     }

     if (
       value === undefined ||
       value === null ||
       value === false ||
       (typeof value === 'number' && Number.isNaN(value))
     ) {
       return ''
     }

     const name = stringifyEntities(
       info.attribute,
       Object.assign({}, state.settings.characterReferences, {
         // Always encode without parse errors in non-HTML.
         subset: constants$1.name[x][y]
       })
     );

     // No value.
     // There is currently only one boolean property in SVG: `[download]` on
     // `<a>`.
     // This property does not seem to work in browsers (Firefox, Safari, Chrome),
     // so I can’t test if dropping the value works.
     // But I assume that it should:
     //
     // ```html
     // <!doctype html>
     // <svg viewBox="0 0 100 100">
     //   <a href=https://example.com download>
     //     <circle cx=50 cy=40 r=35 />
     //   </a>
     // </svg>
     // ```
     //
     // See: <https://github.com/wooorm/property-information/blob/main/lib/svg.js>
     if (value === true) return name

     // `spaces` doesn’t accept a second argument, but it’s given here just to
     // keep the code cleaner.
     value = Array.isArray(value)
       ? (info.commaSeparated ? stringify : stringify$1)(value, {
           padLeft: !state.settings.tightCommaSeparatedLists
         })
       : String(value);

     if (state.settings.collapseEmptyAttributes && !value) return name

     // Check unquoted value.
     if (state.settings.preferUnquoted) {
       result = stringifyEntities(
         value,
         Object.assign({}, state.settings.characterReferences, {
           subset: constants$1.unquoted[x][y],
           attribute: true
         })
       );
     }

     // If we don’t want unquoted, or if `value` contains character references when
     // unquoted…
     if (result !== value) {
       // If the alternative is less common than `quote`, switch.
       if (
         state.settings.quoteSmart &&
         ccount(value, quote) > ccount(value, state.alternative)
       ) {
         quote = state.alternative;
       }

       result =
         quote +
         stringifyEntities(
           value,
           Object.assign({}, state.settings.characterReferences, {
             // Always encode without parse errors in non-HTML.
             subset: (quote === "'" ? constants$1.single : constants$1.double)[x][y],
             attribute: true
           })
         ) +
         quote;
     }

     // Don’t add a `=` for unquoted empties.
     return name + (result ? '=' + result : result)
   }

   /**
    * @typedef {import('../types.js').State} State
    * @typedef {import('../types.js').Parent} Parent
    * @typedef {import('../types.js').Raw} Raw
    * @typedef {import('../types.js').Text} Text
    */


   /**
    * Serialize a text node.
    *
    * @param {Text | Raw} node
    *   Node to handle.
    * @param {number | undefined} _
    *   Index of `node` in `parent.
    * @param {Parent | undefined} parent
    *   Parent of `node`.
    * @param {State} state
    *   Info passed around about the current state.
    * @returns {string}
    *   Serialized node.
    */
   function text$6(node, _, parent, state) {
     // Check if content of `node` should be escaped.
     return parent &&
       parent.type === 'element' &&
       (parent.tagName === 'script' || parent.tagName === 'style')
       ? node.value
       : stringifyEntities(
           node.value,
           Object.assign({}, state.settings.characterReferences, {
             subset: ['<', '&']
           })
         )
   }

   /**
    * @typedef {import('../types.js').State} State
    * @typedef {import('../types.js').Parent} Parent
    * @typedef {import('../types.js').Raw} Raw
    */


   /**
    * Serialize a raw node.
    *
    * @param {Raw} node
    *   Node to handle.
    * @param {number | undefined} index
    *   Index of `node` in `parent.
    * @param {Parent | undefined} parent
    *   Parent of `node`.
    * @param {State} state
    *   Info passed around about the current state.
    * @returns {string}
    *   Serialized node.
    */
   function raw(node, index, parent, state) {
     return state.settings.allowDangerousHtml
       ? node.value
       : text$6(node, index, parent, state)
   }

   /**
    * @typedef {import('../types.js').Root} Root
    * @typedef {import('../types.js').Parent} Parent
    * @typedef {import('../types.js').State} State
    */

   /**
    * Serialize a root.
    *
    * @param {Root} node
    *   Node to handle.
    * @param {number | undefined} _1
    *   Index of `node` in `parent.
    * @param {Parent | undefined} _2
    *   Parent of `node`.
    * @param {State} state
    *   Info passed around about the current state.
    * @returns {string}
    *   Serialized node.
    */
   function root$3(node, _1, _2, state) {
     return state.all(node)
   }

   /**
    * @typedef {import('../types.js').State} State
    * @typedef {import('../types.js').Node} Node
    * @typedef {import('../types.js').Parent} Parent
    */


   /**
    * @type {(node: Node, index: number | undefined, parent: Parent | undefined, state: State) => string}
    */
   const handle$2 = zwitch('type', {
     invalid: invalid$1,
     unknown: unknown$1,
     handlers: {comment: comment$1, doctype, element: element$3, raw, root: root$3, text: text$6}
   });

   /**
    * Fail when a non-node is found in the tree.
    *
    * @param {unknown} node
    *   Unknown value.
    * @returns {never}
    *   Never.
    */
   function invalid$1(node) {
     throw new Error('Expected node, not `' + node + '`')
   }

   /**
    * Fail when a node with an unknown type is found in the tree.
    *
    * @param {unknown} node
    *  Unknown node.
    * @returns {never}
    *   Never.
    */
   function unknown$1(node) {
     // @ts-expect-error: `type` is defined.
     throw new Error('Cannot compile unknown node `' + node.type + '`')
   }

   /**
    * @typedef {import('./types.js').Node} Node
    * @typedef {import('./types.js').Parent} Parent
    * @typedef {import('./types.js').Content} Content
    * @typedef {import('./types.js').Options} Options
    * @typedef {import('./types.js').State} State
    */


   /**
    * Serialize hast as HTML.
    *
    * @param {Node | Array<Content>} tree
    *   Tree to serialize.
    * @param {Options | null | undefined} [options]
    *   Configuration.
    * @returns {string}
    *   Serialized HTML.
    */
   // eslint-disable-next-line complexity
   function toHtml(tree, options) {
     const options_ = options || {};
     const quote = options_.quote || '"';
     const alternative = quote === '"' ? "'" : '"';

     if (quote !== '"' && quote !== "'") {
       throw new Error('Invalid quote `' + quote + '`, expected `\'` or `"`')
     }

     /** @type {State} */
     const state = {
       one: one$3,
       all: all$5,
       settings: {
         omitOptionalTags: options_.omitOptionalTags || false,
         allowParseErrors: options_.allowParseErrors || false,
         allowDangerousCharacters: options_.allowDangerousCharacters || false,
         quoteSmart: options_.quoteSmart || false,
         preferUnquoted: options_.preferUnquoted || false,
         tightAttributes: options_.tightAttributes || false,
         upperDoctype: options_.upperDoctype || false,
         tightDoctype: options_.tightDoctype || false,
         bogusComments: options_.bogusComments || false,
         tightCommaSeparatedLists: options_.tightCommaSeparatedLists || false,
         tightSelfClosing: options_.tightSelfClosing || false,
         collapseEmptyAttributes: options_.collapseEmptyAttributes || false,
         allowDangerousHtml: options_.allowDangerousHtml || false,
         voids: options_.voids || htmlVoidElements,
         characterReferences:
           options_.characterReferences || options_.entities || {},
         closeSelfClosing: options_.closeSelfClosing || false,
         closeEmptyElements: options_.closeEmptyElements || false
       },
       schema: options_.space === 'svg' ? svg : html$4,
       quote,
       alternative
     };

     return state.one(
       Array.isArray(tree) ? {type: 'root', children: tree} : tree,
       undefined,
       undefined
     )
   }

   /**
    * Serialize a node.
    *
    * @this {State}
    *   Info passed around about the current state.
    * @param {Node} node
    *   Node to handle.
    * @param {number | undefined} index
    *   Index of `node` in `parent.
    * @param {Parent | undefined} parent
    *   Parent of `node`.
    * @returns {string}
    *   Serialized node.
    */
   function one$3(node, index, parent) {
     return handle$2(node, index, parent, this)
   }

   /**
    * Serialize all children of `parent`.
    *
    * @this {State}
    *   Info passed around about the current state.
    * @param {Parent | undefined} parent
    *   Parent whose children to serialize.
    * @returns {string}
    */
   function all$5(parent) {
     /** @type {Array<string>} */
     const results = [];
     const children = (parent && parent.children) || [];
     let index = -1;

     while (++index < children.length) {
       results[index] = this.one(children[index], index, parent);
     }

     return results.join('')
   }

   /**
    * @typedef {import('unist').Parent} Parent
    * @typedef {import('hast').Element} Element
    */

   /**
    * @typedef {null | undefined | string | TestFunctionAnything | Array<string | TestFunctionAnything>} Test
    *   Check for an arbitrary element, unaware of TypeScript inferral.
    *
    * @callback TestFunctionAnything
    *   Check if an element passes a test, unaware of TypeScript inferral.
    * @param {Element} element
    *   An element.
    * @param {number | null | undefined} [index]
    *   The element’s position in its parent.
    * @param {Parent | null | undefined} [parent]
    *   The element’s parent.
    * @returns {boolean | void}
    *   Whether this element passes the test.
    */

   /**
    * @template {Element} T
    *   Element type.
    * @typedef {T['tagName'] | TestFunctionPredicate<T> | Array<T['tagName'] | TestFunctionPredicate<T>>} PredicateTest
    *   Check for an element that can be inferred by TypeScript.
    */

   /**
    * Check if an element passes a certain node test.
    *
    * @template {Element} T
    *   Element type.
    * @callback TestFunctionPredicate
    *   Complex test function for an element that can be inferred by TypeScript.
    * @param {Element} element
    *   An element.
    * @param {number | null | undefined} [index]
    *   The element’s position in its parent.
    * @param {Parent | null | undefined} [parent]
    *   The element’s parent.
    * @returns {element is T}
    *   Whether this element passes the test.
    */

   /**
    * @callback AssertAnything
    *   Check that an arbitrary value is an element, unaware of TypeScript inferral.
    * @param {unknown} [node]
    *   Anything (typically a node).
    * @param {number | null | undefined} [index]
    *   The node’s position in its parent.
    * @param {Parent | null | undefined} [parent]
    *   The node’s parent.
    * @returns {boolean}
    *   Whether this is an element and passes a test.
    */

   /**
    * Check if a node is an element and passes a certain node test
    *
    * @template {Element} T
    *   Element type.
    * @callback AssertPredicate
    *   Check that an arbitrary value is a specific element, aware of TypeScript.
    * @param {unknown} [node]
    *   Anything (typically a node).
    * @param {number | null | undefined} [index]
    *   The node’s position in its parent.
    * @param {Parent | null | undefined} [parent]
    *   The node’s parent.
    * @returns {node is T}
    *   Whether this is an element and passes a test.
    */

   /**
    * Check if `node` is an `Element` and whether it passes the given test.
    *
    * @param node
    *   Thing to check, typically `Node`.
    * @param test
    *   A check for a specific element.
    * @param index
    *   The node’s position in its parent.
    * @param parent
    *   The node’s parent.
    * @returns
    *   Whether `node` is an element and passes a test.
    */
   const isElement =
     /**
      * @type {(
      *   (() => false) &
      *   (<T extends Element = Element>(node: unknown, test?: PredicateTest<T>, index?: number, parent?: Parent, context?: unknown) => node is T) &
      *   ((node: unknown, test: Test, index?: number, parent?: Parent, context?: unknown) => boolean)
      * )}
      */
     (
       /**
        * @param {unknown} [node]
        * @param {Test | undefined} [test]
        * @param {number | null | undefined} [index]
        * @param {Parent | null | undefined} [parent]
        * @param {unknown} [context]
        * @returns {boolean}
        */
       // eslint-disable-next-line max-params
       function (node, test, index, parent, context) {
         const check = convertElement(test);

         if (
           index !== undefined &&
           index !== null &&
           (typeof index !== 'number' ||
             index < 0 ||
             index === Number.POSITIVE_INFINITY)
         ) {
           throw new Error('Expected positive finite index for child node')
         }

         if (
           parent !== undefined &&
           parent !== null &&
           (!parent.type || !parent.children)
         ) {
           throw new Error('Expected parent node')
         }

         // @ts-expect-error Looks like a node.
         if (!node || !node.type || typeof node.type !== 'string') {
           return false
         }

         if (
           (parent === undefined || parent === null) !==
           (index === undefined || index === null)
         ) {
           throw new Error('Expected both parent and index')
         }

         return check.call(context, node, index, parent)
       }
     );

   /**
    * Generate an assertion from a test.
    *
    * Useful if you’re going to test many nodes, for example when creating a
    * utility where something else passes a compatible test.
    *
    * The created function is a bit faster because it expects valid input only:
    * a `node`, `index`, and `parent`.
    *
    * @param test
    *   *  When nullish, checks if `node` is an `Element`.
    *   *  When `string`, works like passing `(element) => element.tagName === test`.
    *   *  When `function` checks if function passed the element is true.
    *   *  When `array`, checks any one of the subtests pass.
    * @returns
    *   An assertion.
    */
   const convertElement =
     /**
      * @type {(
      *   (<T extends Element>(test: T['tagName'] | TestFunctionPredicate<T>) => AssertPredicate<T>) &
      *   ((test?: Test) => AssertAnything)
      * )}
      */
     (
       /**
        * @param {Test | null | undefined} [test]
        * @returns {AssertAnything}
        */
       function (test) {
         if (test === undefined || test === null) {
           return element$2
         }

         if (typeof test === 'string') {
           return tagNameFactory(test)
         }

         if (typeof test === 'object') {
           return anyFactory$1(test)
         }

         if (typeof test === 'function') {
           return castFactory$1(test)
         }

         throw new Error('Expected function, string, or array as test')
       }
     );

   /**
    * Handle multiple tests.
    *
    * @param {Array<string | TestFunctionAnything>} tests
    * @returns {AssertAnything}
    */
   function anyFactory$1(tests) {
     /** @type {Array<AssertAnything>} */
     const checks = [];
     let index = -1;

     while (++index < tests.length) {
       checks[index] = convertElement(tests[index]);
     }

     return castFactory$1(any)

     /**
      * @this {unknown}
      * @param {Array<unknown>} parameters
      * @returns {boolean}
      */
     function any(...parameters) {
       let index = -1;

       while (++index < checks.length) {
         if (checks[index].call(this, ...parameters)) {
           return true
         }
       }

       return false
     }
   }

   /**
    * Turn a string into a test for an element with a certain tag name.
    *
    * @param {string} check
    * @returns {AssertAnything}
    */
   function tagNameFactory(check) {
     return tagName

     /**
      * @param {unknown} node
      * @returns {boolean}
      */
     function tagName(node) {
       return element$2(node) && node.tagName === check
     }
   }

   /**
    * Turn a custom test into a test for an element that passes that test.
    *
    * @param {TestFunctionAnything} check
    * @returns {AssertAnything}
    */
   function castFactory$1(check) {
     return assertion

     /**
      * @this {unknown}
      * @param {unknown} node
      * @param {Array<unknown>} parameters
      * @returns {boolean}
      */
     function assertion(node, ...parameters) {
       // @ts-expect-error: fine.
       return element$2(node) && Boolean(check.call(this, node, ...parameters))
     }
   }

   /**
    * Make sure something is an element.
    *
    * @param {unknown} node
    * @returns {node is Element}
    */
   function element$2(node) {
     return Boolean(
       node &&
         typeof node === 'object' &&
         // @ts-expect-error Looks like a node.
         node.type === 'element' &&
         // @ts-expect-error Looks like an element.
         typeof node.tagName === 'string'
     )
   }

   /**
    * @typedef {import('hast').Element} Element
    */


   /**
    * Check if a node is a *embedded content*.
    *
    * @type {import('hast-util-is-element').AssertPredicate<Element & {tagName: 'audio' | 'canvas' | 'embed' | 'iframe' | 'img' | 'math' | 'object' | 'picture' | 'svg' | 'video'}>}
    * @param value
    *   Thing to check (typically `Node`).
    * @returns
    *   Whether `value` is an element considered embedded content.
    *
    *   The elements `audio`, `canvas`, `embed`, `iframe`, `img`, `math`,
    *   `object`, `picture`, `svg`, and `video` are embedded content.
    */
   // @ts-expect-error Sure, the assertion matches.
   const embedded = convertElement([
     'audio',
     'canvas',
     'embed',
     'iframe',
     'img',
     'math',
     'object',
     'picture',
     'svg',
     'video'
   ]);

   /**
    * @typedef {import('unist').Node} Node
    * @typedef {import('unist').Parent} Parent
    */


   /**
    * Generate an assertion from a test.
    *
    * Useful if you’re going to test many nodes, for example when creating a
    * utility where something else passes a compatible test.
    *
    * The created function is a bit faster because it expects valid input only:
    * a `node`, `index`, and `parent`.
    *
    * @param test
    *   *   when nullish, checks if `node` is a `Node`.
    *   *   when `string`, works like passing `(node) => node.type === test`.
    *   *   when `function` checks if function passed the node is true.
    *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.
    *   *   when `array`, checks if any one of the subtests pass.
    * @returns
    *   An assertion.
    */
   const convert =
     /**
      * @type {(
      *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &
      *   ((test?: Test) => AssertAnything)
      * )}
      */
     (
       /**
        * @param {Test} [test]
        * @returns {AssertAnything}
        */
       function (test) {
         if (test === undefined || test === null) {
           return ok
         }

         if (typeof test === 'string') {
           return typeFactory(test)
         }

         if (typeof test === 'object') {
           return Array.isArray(test) ? anyFactory(test) : propsFactory(test)
         }

         if (typeof test === 'function') {
           return castFactory(test)
         }

         throw new Error('Expected function, string, or object as test')
       }
     );

   /**
    * @param {Array<string | Props | TestFunctionAnything>} tests
    * @returns {AssertAnything}
    */
   function anyFactory(tests) {
     /** @type {Array<AssertAnything>} */
     const checks = [];
     let index = -1;

     while (++index < tests.length) {
       checks[index] = convert(tests[index]);
     }

     return castFactory(any)

     /**
      * @this {unknown}
      * @param {Array<unknown>} parameters
      * @returns {boolean}
      */
     function any(...parameters) {
       let index = -1;

       while (++index < checks.length) {
         if (checks[index].call(this, ...parameters)) return true
       }

       return false
     }
   }

   /**
    * Turn an object into a test for a node with a certain fields.
    *
    * @param {Props} check
    * @returns {AssertAnything}
    */
   function propsFactory(check) {
     return castFactory(all)

     /**
      * @param {Node} node
      * @returns {boolean}
      */
     function all(node) {
       /** @type {string} */
       let key;

       for (key in check) {
         // @ts-expect-error: hush, it sure works as an index.
         if (node[key] !== check[key]) return false
       }

       return true
     }
   }

   /**
    * Turn a string into a test for a node with a certain type.
    *
    * @param {string} check
    * @returns {AssertAnything}
    */
   function typeFactory(check) {
     return castFactory(type)

     /**
      * @param {Node} node
      */
     function type(node) {
       return node && node.type === check
     }
   }

   /**
    * Turn a custom test into a test for a node that passes that test.
    *
    * @param {TestFunctionAnything} check
    * @returns {AssertAnything}
    */
   function castFactory(check) {
     return assertion

     /**
      * @this {unknown}
      * @param {unknown} node
      * @param {Array<unknown>} parameters
      * @returns {boolean}
      */
     function assertion(node, ...parameters) {
       return Boolean(
         node &&
           typeof node === 'object' &&
           'type' in node &&
           // @ts-expect-error: fine.
           Boolean(check.call(this, node, ...parameters))
       )
     }
   }

   function ok() {
     return true
   }

   // See: <https://html.spec.whatwg.org/#the-css-user-agent-style-sheet-and-presentational-hints>
   const blocks = [
     'address', // Flow content.
     'article', // Sections and headings.
     'aside', // Sections and headings.
     'blockquote', // Flow content.
     'body', // Page.
     'br', // Contribute whitespace intrinsically.
     'caption', // Similar to block.
     'center', // Flow content, legacy.
     'col', // Similar to block.
     'colgroup', // Similar to block.
     'dd', // Lists.
     'dialog', // Flow content.
     'dir', // Lists, legacy.
     'div', // Flow content.
     'dl', // Lists.
     'dt', // Lists.
     'figcaption', // Flow content.
     'figure', // Flow content.
     'footer', // Flow content.
     'form', // Flow content.
     'h1', // Sections and headings.
     'h2', // Sections and headings.
     'h3', // Sections and headings.
     'h4', // Sections and headings.
     'h5', // Sections and headings.
     'h6', // Sections and headings.
     'head', // Page.
     'header', // Flow content.
     'hgroup', // Sections and headings.
     'hr', // Flow content.
     'html', // Page.
     'legend', // Flow content.
     'li', // Block-like.
     'li', // Similar to block.
     'listing', // Flow content, legacy
     'main', // Flow content.
     'menu', // Lists.
     'nav', // Sections and headings.
     'ol', // Lists.
     'optgroup', // Similar to block.
     'option', // Similar to block.
     'p', // Flow content.
     'plaintext', // Flow content, legacy
     'pre', // Flow content.
     'section', // Sections and headings.
     'summary', // Similar to block.
     'table', // Similar to block.
     'tbody', // Similar to block.
     'td', // Block-like.
     'td', // Similar to block.
     'tfoot', // Similar to block.
     'th', // Block-like.
     'th', // Similar to block.
     'thead', // Similar to block.
     'tr', // Similar to block.
     'ul', // Lists.
     'wbr', // Contribute whitespace intrinsically.
     'xmp' // Flow content, legacy
   ];

   const content$4 = [
     // Form.
     'button',
     'input',
     'select',
     'textarea'
   ];

   const skippable$1 = [
     'area',
     'base',
     'basefont',
     'dialog',
     'datalist',
     'head',
     'link',
     'meta',
     'noembed',
     'noframes',
     'param',
     'rp',
     'script',
     'source',
     'style',
     'template',
     'track',
     'title'
   ];

   /**
    * rehype plugin to minify whitespace between elements.
    *
    * ## What is this?
    *
    * This package is a plugin that can minify the whitespace between elements.
    *
    * ## When should I use this?
    *
    * You can use this plugin when you want to improve the size of HTML documents.
    *
    * ## API
    *
    * ### `unified().use(rehypeMinifyWhitespace[, options])`
    *
    * Minify whitespace.
    *
    * ##### `options`
    *
    * Configuration (optional).
    *
    * ##### `options.newlines`
    *
    * Whether to collapse runs of whitespace that include line endings to one
    * line ending (`boolean`, default: `false`).
    * The default is to collapse everything to one space.
    *
    * @example
    *   <h1>Heading</h1>
    *   <p><strong>This</strong> and <em>that</em></p>
    */


   const ignorableNode = convert(['doctype', 'comment']);

   /**
    * Minify whitespace.
    *
    * @type {import('unified').Plugin<[Options?]|Array<void>, Root>}
    */
   function rehypeMinifyWhitespace(options = {}) {
     const collapse = collapseFactory(
       options.newlines ? replaceNewlines : replaceWhitespace
     );

     return (tree) => {
       minify(tree, {collapse, whitespace: 'normal'});
     }
   }

   /**
    * @param {Node} node
    * @param {Context} context
    * @returns {Result}
    */
   function minify(node, context) {
     if ('children' in node) {
       const settings = Object.assign({}, context);

       if (node.type === 'root' || blocklike(node)) {
         settings.before = true;
         settings.after = true;
       }

       settings.whitespace = inferWhiteSpace(node, context);

       return all$4(node, settings)
     }

     if (node.type === 'text') {
       if (context.whitespace === 'normal') {
         return minifyText(node, context)
       }

       // Naïve collapse, but no trimming:
       if (context.whitespace === 'nowrap') {
         node.value = context.collapse(node.value);
       }

       // The `pre-wrap` or `pre` whitespace settings are neither collapsed nor
       // trimmed.
     }

     return {remove: false, ignore: ignorableNode(node), stripAtStart: false}
   }

   /**
    * @param {Text} node
    * @param {Context} context
    * @returns {Result}
    */
   function minifyText(node, context) {
     const value = context.collapse(node.value);
     const result = {remove: false, ignore: false, stripAtStart: false};
     let start = 0;
     let end = value.length;

     if (context.before && removable(value.charAt(0))) {
       start++;
     }

     if (start !== end && removable(value.charAt(end - 1))) {
       if (context.after) {
         end--;
       } else {
         result.stripAtStart = true;
       }
     }

     if (start === end) {
       result.remove = true;
     } else {
       node.value = value.slice(start, end);
     }

     return result
   }

   /**
    * @param {Root|Element} parent
    * @param {Context} context
    * @returns {Result}
    */
   function all$4(parent, context) {
     let before = context.before;
     const after = context.after;
     const children = parent.children;
     let length = children.length;
     let index = -1;

     while (++index < length) {
       const result = minify(
         children[index],
         Object.assign({}, context, {
           before,
           after: collapsableAfter(children, index, after)
         })
       );

       if (result.remove) {
         children.splice(index, 1);
         index--;
         length--;
       } else if (!result.ignore) {
         before = result.stripAtStart;
       }

       // If this element, such as a `<select>` or `<img>`, contributes content
       // somehow, allow whitespace again.
       if (content$3(children[index])) {
         before = false;
       }
     }

     return {remove: false, ignore: false, stripAtStart: Boolean(before || after)}
   }

   /**
    * @param {Array<Node>} nodes
    * @param {number} index
    * @param {boolean|undefined} [after]
    * @returns {boolean|undefined}
    */
   function collapsableAfter(nodes, index, after) {
     while (++index < nodes.length) {
       const node = nodes[index];
       let result = inferBoundary(node);

       if (result === undefined && 'children' in node && !skippable(node)) {
         result = collapsableAfter(node.children, -1);
       }

       if (typeof result === 'boolean') {
         return result
       }
     }

     return after
   }

   /**
    * Infer two types of boundaries:
    *
    * 1. `true` — boundary for which whitespace around it does not contribute
    *    anything
    * 2. `false` — boundary for which whitespace around it *does* contribute
    *
    * No result (`undefined`) is returned if it is unknown.
    *
    * @param {Node} node
    * @returns {boolean|undefined}
    */
   function inferBoundary(node) {
     if (node.type === 'element') {
       if (content$3(node)) {
         return false
       }

       if (blocklike(node)) {
         return true
       }

       // Unknown: either depends on siblings if embedded or metadata, or on
       // children.
     } else if (node.type === 'text') {
       if (!whitespace$3(node)) {
         return false
       }
     } else if (!ignorableNode(node)) {
       return false
     }
   }

   /**
    * Infer whether a node is skippable.
    *
    * @param {Node} node
    * @returns {boolean}
    */
   function content$3(node) {
     return embedded(node) || isElement(node, content$4)
   }

   /**
    * See: <https://html.spec.whatwg.org/#the-css-user-agent-style-sheet-and-presentational-hints>
    *
    * @param {Element} node
    * @returns {boolean}
    */
   function blocklike(node) {
     return isElement(node, blocks)
   }

   /**
    * @param {Element|Root} node
    * @returns {boolean}
    */
   function skippable(node) {
     return (
       Boolean(
         'properties' in node && node.properties && node.properties.hidden
       ) ||
       ignorableNode(node) ||
       isElement(node, skippable$1)
     )
   }

   /**
    * @param {string} character
    * @returns {boolean}
    */
   function removable(character) {
     return character === ' ' || character === '\n'
   }

   /**
    * @param {string} value
    * @returns {string}
    */
   function replaceNewlines(value) {
     const match = /\r?\n|\r/.exec(value);
     return match ? match[0] : ' '
   }

   /**
    * @returns {string}
    */
   function replaceWhitespace() {
     return ' '
   }

   /**
    * @param {(value: string) => string} replace
    */
   function collapseFactory(replace) {
     return collapse

     /**
      * @param {string} value
      * @returns {string}
      */
     function collapse(value) {
       return String(value).replace(/[\t\n\v\f\r ]+/g, replace)
     }
   }

   /**
    * We don’t need to support void elements here (so `nobr wbr` -> `normal` is
    * ignored).
    *
    * @param {Root|Element} node
    * @param {Context} context
    * @returns {Whitespace}
    */
   function inferWhiteSpace(node, context) {
     if ('tagName' in node && node.properties) {
       switch (node.tagName) {
         // Whitespace in script/style, while not displayed by CSS as significant,
         // could have some meaning in JS/CSS, so we can’t touch them.
         case 'listing':
         case 'plaintext':
         case 'script':
         case 'style':
         case 'xmp':
           return 'pre'
         case 'nobr':
           return 'nowrap'
         case 'pre':
           return node.properties.wrap ? 'pre-wrap' : 'pre'
         case 'td':
         case 'th':
           return node.properties.noWrap ? 'nowrap' : context.whitespace
         case 'textarea':
           return 'pre-wrap'
       }
     }

     return context.whitespace
   }

   /**
    * @param {string} d
    * @returns {string}
    */
   function color(d) {
     return d
   }

   /**
    * @typedef {import('unist').Node} Node
    * @typedef {import('unist').Parent} Parent
    * @typedef {import('unist-util-is').Test} Test
    */


   /**
    * Continue traversing as normal.
    */
   const CONTINUE = true;

   /**
    * Stop traversing immediately.
    */
   const EXIT = false;

   /**
    * Do not traverse this node’s children.
    */
   const SKIP = 'skip';

   /**
    * Visit nodes, with ancestral information.
    *
    * This algorithm performs *depth-first* *tree traversal* in *preorder*
    * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).
    *
    * You can choose for which nodes `visitor` is called by passing a `test`.
    * For complex tests, you should test yourself in `visitor`, as it will be
    * faster and will have improved type information.
    *
    * Walking the tree is an intensive task.
    * Make use of the return values of the visitor when possible.
    * Instead of walking a tree multiple times, walk it once, use `unist-util-is`
    * to check if a node matches, and then perform different operations.
    *
    * You can change the tree.
    * See `Visitor` for more info.
    *
    * @param tree
    *   Tree to traverse.
    * @param test
    *   `unist-util-is`-compatible test
    * @param visitor
    *   Handle each node.
    * @param reverse
    *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).
    * @returns
    *   Nothing.
    */
   const visitParents =
     /**
      * @type {(
      *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &
      *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)
      * )}
      */
     (
       /**
        * @param {Node} tree
        * @param {Test} test
        * @param {Visitor<Node>} visitor
        * @param {boolean | null | undefined} [reverse]
        * @returns {void}
        */
       function (tree, test, visitor, reverse) {
         if (typeof test === 'function' && typeof visitor !== 'function') {
           reverse = visitor;
           // @ts-expect-error no visitor given, so `visitor` is test.
           visitor = test;
           test = null;
         }

         const is = convert(test);
         const step = reverse ? -1 : 1;

         factory(tree, undefined, [])();

         /**
          * @param {Node} node
          * @param {number | undefined} index
          * @param {Array<Parent>} parents
          */
         function factory(node, index, parents) {
           /** @type {Record<string, unknown>} */
           // @ts-expect-error: hush
           const value = node && typeof node === 'object' ? node : {};

           if (typeof value.type === 'string') {
             const name =
               // `hast`
               typeof value.tagName === 'string'
                 ? value.tagName
                 : // `xast`
                 typeof value.name === 'string'
                 ? value.name
                 : undefined;

             Object.defineProperty(visit, 'name', {
               value:
                 'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'
             });
           }

           return visit

           function visit() {
             /** @type {ActionTuple} */
             let result = [];
             /** @type {ActionTuple} */
             let subresult;
             /** @type {number} */
             let offset;
             /** @type {Array<Parent>} */
             let grandparents;

             if (!test || is(node, index, parents[parents.length - 1] || null)) {
               result = toResult(visitor(node, parents));

               if (result[0] === EXIT) {
                 return result
               }
             }

             // @ts-expect-error looks like a parent.
             if (node.children && result[0] !== SKIP) {
               // @ts-expect-error looks like a parent.
               offset = (reverse ? node.children.length : -1) + step;
               // @ts-expect-error looks like a parent.
               grandparents = parents.concat(node);

               // @ts-expect-error looks like a parent.
               while (offset > -1 && offset < node.children.length) {
                 // @ts-expect-error looks like a parent.
                 subresult = factory(node.children[offset], offset, grandparents)();

                 if (subresult[0] === EXIT) {
                   return subresult
                 }

                 offset =
                   typeof subresult[1] === 'number' ? subresult[1] : offset + step;
               }
             }

             return result
           }
         }
       }
     );

   /**
    * Turn a return value into a clean result.
    *
    * @param {VisitorResult} value
    *   Valid return values from visitors.
    * @returns {ActionTuple}
    *   Clean result.
    */
   function toResult(value) {
     if (Array.isArray(value)) {
       return value
     }

     if (typeof value === 'number') {
       return [CONTINUE, value]
     }

     return [value]
   }

   /**
    * @typedef {import('unist').Node} Node
    * @typedef {import('unist').Parent} Parent
    * @typedef {import('unist-util-is').Test} Test
    * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult
    */


   /**
    * Visit nodes.
    *
    * This algorithm performs *depth-first* *tree traversal* in *preorder*
    * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).
    *
    * You can choose for which nodes `visitor` is called by passing a `test`.
    * For complex tests, you should test yourself in `visitor`, as it will be
    * faster and will have improved type information.
    *
    * Walking the tree is an intensive task.
    * Make use of the return values of the visitor when possible.
    * Instead of walking a tree multiple times, walk it once, use `unist-util-is`
    * to check if a node matches, and then perform different operations.
    *
    * You can change the tree.
    * See `Visitor` for more info.
    *
    * @param tree
    *   Tree to traverse.
    * @param test
    *   `unist-util-is`-compatible test
    * @param visitor
    *   Handle each node.
    * @param reverse
    *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).
    * @returns
    *   Nothing.
    */
   const visit =
     /**
      * @type {(
      *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &
      *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)
      * )}
      */
     (
       /**
        * @param {Node} tree
        * @param {Test} test
        * @param {Visitor} visitor
        * @param {boolean | null | undefined} [reverse]
        * @returns {void}
        */
       function (tree, test, visitor, reverse) {
         if (typeof test === 'function' && typeof visitor !== 'function') {
           reverse = visitor;
           visitor = test;
           test = null;
         }

         visitParents(tree, test, overload, reverse);

         /**
          * @param {Node} node
          * @param {Array<Parent>} parents
          */
         function overload(node, parents) {
           const parent = parents[parents.length - 1];
           return visitor(
             node,
             parent ? parent.children.indexOf(node) : null,
             parent
           )
         }
       }
     );

   /**
    * @typedef {import('unist').Position} Position
    * @typedef {import('unist').Node} Node
    * @typedef {import('unist').Point} Point
    */

   /**
    * @typedef NodeLike
    * @property {string} type
    * @property {PositionLike | null | undefined} [position]
    *
    * @typedef PositionLike
    * @property {PointLike | null | undefined} [start]
    * @property {PointLike | null | undefined} [end]
    *
    * @typedef PointLike
    * @property {number | null | undefined} [line]
    * @property {number | null | undefined} [column]
    * @property {number | null | undefined} [offset]
    */

   /**
    * Get the starting point of `node`.
    *
    * @param node
    *   Node.
    * @returns
    *   Point.
    */
   const pointStart = point$1('start');

   /**
    * Get the ending point of `node`.
    *
    * @param node
    *   Node.
    * @returns
    *   Point.
    */
   const pointEnd = point$1('end');

   /**
    * Get the positional info of `node`.
    *
    * @param {NodeLike | Node | null | undefined} [node]
    *   Node.
    * @returns {Position}
    *   Position.
    */
   function position(node) {
     return {start: pointStart(node), end: pointEnd(node)}
   }

   /**
    * Get the positional info of `node`.
    *
    * @param {'start' | 'end'} type
    *   Side.
    * @returns
    *   Getter.
    */
   function point$1(type) {
     return point

     /**
      * Get the point info of `node` at a bound side.
      *
      * @param {NodeLike | Node | null | undefined} [node]
      * @returns {Point}
      */
     function point(node) {
       const point = (node && node.position && node.position[type]) || {};

       // To do: next major: don’t return points when invalid.
       return {
         // @ts-expect-error: in practice, null is allowed.
         line: point.line || null,
         // @ts-expect-error: in practice, null is allowed.
         column: point.column || null,
         // @ts-expect-error: in practice, null is allowed.
         offset: point.offset > -1 ? point.offset : null
       }
     }
   }

   /**
    * @typedef {import('mdast').Link} Link
    * @typedef {import('hast').Element} Element
    * @typedef {import('../state.js').State} State
    */

   /**
    * @param {State} state
    *   State.
    * @param {Element} node
    *   hast element to transform.
    * @returns {Link}
    *   mdast node.
    */
   function a$1(state, node) {
     const properties = node.properties || {};

     /** @type {Link} */
     const result = {
       type: 'link',
       url: state.resolve(String(properties.href || '') || null),
       title: properties.title ? String(properties.title) : null,
       // @ts-expect-error: allow potentially “invalid” nodes, they might be unknown.
       // We also support straddling later.
       children: state.all(node)
     };
     state.patch(node, result);
     return result
   }

   /**
    * @typedef {import('hast').Element} Element
    * @typedef {import('../state.js').State} State
    */

   /**
    * @param {State} state
    *   State.
    * @param {Element} node
    *   hast element to transform.
    * @returns {void}
    *   Nothing.
    */
   function base$2(state, node) {
     if (!state.baseFound) {
       state.frozenBaseUrl =
         String((node.properties && node.properties.href) || '') || undefined;
       state.baseFound = true;
     }
   }

   /**
    * @typedef {import('hast').Element} Element
    * @typedef {import('mdast').Blockquote} Blockquote
    * @typedef {import('../state.js').State} State
    */

   /**
    * @param {State} state
    *   State.
    * @param {Element} node
    *   hast element to transform.
    * @returns {Blockquote}
    *   mdast node.
    */
   function blockquote$2(state, node) {
     /** @type {Blockquote} */
     const result = {type: 'blockquote', children: state.toFlow(state.all(node))};
     state.patch(node, result);
     return result
   }

   /**
    * @typedef {import('hast').Element} Element
    * @typedef {import('mdast').Break} Break
    * @typedef {import('../state.js').State} State
    */

   /**
    * @param {State} state
    *   State.
    * @param {Element} node
    *   hast element to transform.
    * @returns {Break}
    *   mdast node.
    */
   function br$1(state, node) {
     /** @type {Break} */
     const result = {type: 'break'};
     state.patch(node, result);
     return result
   }

   /**
    * @typedef {import('unist').Node} Node
    * @typedef {import('unist').Parent} Parent
    * @typedef {import('unist-util-is').Test} Test
    */


   /**
    * Find the first node in `parent` after another `node` or after an index,
    * that passes `test`.

    * @param parent
    *   Parent node.
    * @param index
    *   Child of `parent` or it’s index.
    * @param test
    *   `unist-util-is`-compatible test.
    * @returns
    *   Child of `parent` or `null`.
    */
   const findAfter =
     /**
      * @type {(
      *  (<T extends Node>(node: Parent, index: Node | number, test: import('unist-util-is').PredicateTest<T>) => T | null) &
      *  ((node: Parent, index: Node | number, test?: Test) => Node | null)
      * )}
      */
     (
       /**
        * @param {Parent} parent
        * @param {Node | number} index
        * @param {Test} [test]
        * @returns {Node | null}
        */
       function (parent, index, test) {
         const is = convert(test);

         if (!parent || !parent.type || !parent.children) {
           throw new Error('Expected parent node')
         }

         if (typeof index === 'number') {
           if (index < 0 || index === Number.POSITIVE_INFINITY) {
             throw new Error('Expected positive finite number as index')
           }
         } else {
           index = parent.children.indexOf(index);

           if (index < 0) {
             throw new Error('Expected child node or index')
           }
         }

         while (++index < parent.children.length) {
           if (is(parent.children[index], index, parent)) {
             return parent.children[index]
           }
         }

         return null
       }
     );

   /**
    * @typedef {import('hast-util-is-element').TestFunctionAnything} TestFunctionAnything
    * @typedef {import('hast').Content} Content
    * @typedef {import('hast').Text} Text
    * @typedef {import('hast').Comment} Comment
    * @typedef {import('hast').Root} Root
    * @typedef {import('hast').Element} Element
    */


   const searchLineFeeds = /\n/g;
   const searchTabOrSpaces = /[\t ]+/g;

   const br = convertElement('br');
   const p$1 = convertElement('p');
   const cell = convertElement(['th', 'td']);
   const row = convertElement('tr');

   // Note that we don’t need to include void elements here as they don’t have text.
   // See: <https://github.com/wooorm/html-void-elements>
   const notRendered = convertElement([
     // List from: <https://html.spec.whatwg.org/#hidden-elements>
     'datalist',
     'head',
     'noembed',
     'noframes',
     'noscript', // Act as if we support scripting.
     'rp',
     'script',
     'style',
     'template',
     'title',
     // Hidden attribute.
     hidden,
     // From: <https://html.spec.whatwg.org/#flow-content-3>
     closedDialog
   ]);

   // See: <https://html.spec.whatwg.org/#the-css-user-agent-style-sheet-and-presentational-hints>
   const blockOrCaption = convertElement([
     'address', // Flow content
     'article', // Sections and headings
     'aside', // Sections and headings
     'blockquote', // Flow content
     'body', // Page
     'caption', // `table-caption`
     'center', // Flow content (legacy)
     'dd', // Lists
     'dialog', // Flow content
     'dir', // Lists (legacy)
     'dl', // Lists
     'dt', // Lists
     'div', // Flow content
     'figure', // Flow content
     'figcaption', // Flow content
     'footer', // Flow content
     'form,', // Flow content
     'h1', // Sections and headings
     'h2', // Sections and headings
     'h3', // Sections and headings
     'h4', // Sections and headings
     'h5', // Sections and headings
     'h6', // Sections and headings
     'header', // Flow content
     'hgroup', // Sections and headings
     'hr', // Flow content
     'html', // Page
     'legend', // Flow content
     'listing', // Flow content (legacy)
     'main', // Flow content
     'menu', // Lists
     'nav', // Sections and headings
     'ol', // Lists
     'p', // Flow content
     'plaintext', // Flow content (legacy)
     'pre', // Flow content
     'section', // Sections and headings
     'ul', // Lists
     'xmp' // Flow content (legacy)
   ]);

   /**
    * Get the plain-text value of a node.
    *
    * ###### Algorithm
    *
    * *   if `tree` is a comment, returns its `value`
    * *   if `tree` is a text, applies normal whitespace collapsing to its
    *     `value`, as defined by the CSS Text spec
    * *   if `tree` is a root or element, applies an algorithm similar to the
    *     `innerText` getter as defined by HTML
    *
    * ###### Notes
    *
    * > 👉 **Note**: the algorithm acts as if `tree` is being rendered, and as if
    * > we’re a CSS-supporting user agent, with scripting enabled.
    *
    * *   if `tree` is an element that is not displayed (such as a `head`), we’ll
    *     still use the `innerText` algorithm instead of switching to `textContent`
    * *   if descendants of `tree` are elements that are not displayed, they are
    *     ignored
    * *   CSS is not considered, except for the default user agent style sheet
    * *   a line feed is collapsed instead of ignored in cases where Fullwidth, Wide,
    *     or Halfwidth East Asian Width characters are used, the same goes for a case
    *     with Chinese, Japanese, or Yi writing systems
    * *   replaced elements (such as `audio`) are treated like non-replaced elements
    *
    * @param {Node} tree
    *   Tree to turn into text.
    * @param {Options} [options]
    *   Configuration (optional).
    * @returns {string}
    *   Serialized `tree`.
    */
   function toText(tree, options = {}) {
     const children = 'children' in tree ? tree.children : [];
     const block = blockOrCaption(tree);
     const whitespace = inferWhitespace(tree, {
       whitespace: options.whitespace || 'normal',
       breakBefore: false,
       breakAfter: false
     });

     /** @type {Array<string | BreakNumber>} */
     const results = [];

     // Treat `text` and `comment` as having normal white-space.
     // This deviates from the spec as in the DOM the node’s `.data` has to be
     // returned.
     // If you want that behavior use `hast-util-to-string`.
     // All other nodes are later handled as if they are `element`s (so the
     // algorithm also works on a `root`).
     // Nodes without children are treated as a void element, so `doctype` is thus
     // ignored.
     if (tree.type === 'text' || tree.type === 'comment') {
       results.push(
         ...collectText(tree, {
           whitespace,
           breakBefore: true,
           breakAfter: true
         })
       );
     }

     // 1.  If this element is not being rendered, or if the user agent is a
     //     non-CSS user agent, then return the same value as the textContent IDL
     //     attribute on this element.
     //
     //     Note: we’re not supporting stylesheets so we’re acting as if the node
     //     is rendered.
     //
     //     If you want that behavior use `hast-util-to-string`.
     //     Important: we’ll have to account for this later though.

     // 2.  Let results be a new empty list.
     let index = -1;

     // 3.  For each child node node of this element:
     while (++index < children.length) {
       // 3.1. Let current be the list resulting in running the inner text
       //      collection steps with node.
       //      Each item in results will either be a JavaScript string or a
       //      positive integer (a required line break count).
       // 3.2. For each item item in current, append item to results.
       results.push(
         // @ts-expect-error Looks like a parent.
         ...innerTextCollection(children[index], tree, {
           whitespace,
           breakBefore: index ? undefined : block,
           breakAfter:
             index < children.length - 1 ? br(children[index + 1]) : block
         })
       );
     }

     // 4.  Remove any items from results that are the empty string.
     // 5.  Remove any runs of consecutive required line break count items at the
     //     start or end of results.
     // 6.  Replace each remaining run of consecutive required line break count
     //     items with a string consisting of as many U+000A LINE FEED (LF)
     //     characters as the maximum of the values in the required line break
     //     count items.
     /** @type {Array<string>} */
     const result = [];
     /** @type {number | undefined} */
     let count;

     index = -1;

     while (++index < results.length) {
       const value = results[index];

       if (typeof value === 'number') {
         if (count !== undefined && value > count) count = value;
       } else if (value) {
         if (count !== undefined && count > -1) {
           result.push('\n'.repeat(count) || ' ');
         }

         count = -1;
         result.push(value);
       }
     }

     // 7.  Return the concatenation of the string items in results.
     return result.join('')
   }

   /**
    * <https://html.spec.whatwg.org/#inner-text-collection-steps>
    *
    * @param {Node} node
    * @param {Parent} parent
    * @param {CollectionInfo} info
    * @returns {Array<string | BreakNumber>}
    */
   function innerTextCollection(node, parent, info) {
     if (node.type === 'element') {
       return collectElement(node, parent, info)
     }

     if (node.type === 'text') {
       return info.whitespace === 'normal'
         ? collectText(node, info)
         : collectPreText(node)
     }

     return []
   }

   /**
    * Collect an element.
    *
    * @param {Element} node
    *   Element node.
    * @param {Parent} parent
    * @param {CollectionInfo} info
    *   Info on current collection.
    * @returns {Array<string | BreakNumber>}
    */
   function collectElement(node, parent, info) {
     // First we infer the `white-space` property.
     const whitespace = inferWhitespace(node, info);
     const children = node.children || [];
     let index = -1;
     /** @type {Array<string | BreakNumber>} */
     let items = [];

     // We’re ignoring point 3, and exiting without any content here, because we
     // deviated from the spec in `toText` at step 3.
     if (notRendered(node)) {
       return items
     }

     /** @type {BreakNumber | undefined} */
     let prefix;
     /** @type {BreakNumber | BreakForce | undefined} */
     let suffix;
     // Note: we first detect if there is going to be a break before or after the
     // contents, as that changes the white-space handling.

     // 2.  If node’s computed value of `visibility` is not `visible`, then return
     //     items.
     //
     //     Note: Ignored, as everything is visible by default user agent styles.

     // 3.  If node is not being rendered, then return items. [...]
     //
     //     Note: We already did this above.

     // See `collectText` for step 4.

     // 5.  If node is a `<br>` element, then append a string containing a single
     //     U+000A LINE FEED (LF) character to items.
     if (br(node)) {
       suffix = '\n';
     }

     // 7.  If node’s computed value of `display` is `table-row`, and node’s CSS
     //     box is not the last `table-row` box of the nearest ancestor `table`
     //     box, then append a string containing a single U+000A LINE FEED (LF)
     //     character to items.
     //
     //     See: <https://html.spec.whatwg.org/#tables-2>
     //     Note: needs further investigation as this does not account for implicit
     //     rows.
     else if (row(node) && findAfter(parent, node, row)) {
       suffix = '\n';
     }

     // 8.  If node is a `<p>` element, then append 2 (a required line break count)
     //     at the beginning and end of items.
     else if (p$1(node)) {
       prefix = 2;
       suffix = 2;
     }

     // 9.  If node’s used value of `display` is block-level or `table-caption`,
     //     then append 1 (a required line break count) at the beginning and end of
     //     items.
     else if (blockOrCaption(node)) {
       prefix = 1;
       suffix = 1;
     }

     // 1.  Let items be the result of running the inner text collection steps with
     //     each child node of node in tree order, and then concatenating the
     //     results to a single list.
     while (++index < children.length) {
       items = items.concat(
         innerTextCollection(children[index], node, {
           whitespace,
           breakBefore: index ? undefined : prefix,
           breakAfter:
             index < children.length - 1 ? br(children[index + 1]) : suffix
         })
       );
     }

     // 6.  If node’s computed value of `display` is `table-cell`, and node’s CSS
     //     box is not the last `table-cell` box of its enclosing `table-row` box,
     //     then append a string containing a single U+0009 CHARACTER TABULATION
     //     (tab) character to items.
     //
     //     See: <https://html.spec.whatwg.org/#tables-2>
     if (cell(node) && findAfter(parent, node, cell)) {
       items.push('\t');
     }

     // Add the pre- and suffix.
     if (prefix) items.unshift(prefix);
     if (suffix) items.push(suffix);

     return items
   }

   /**
    * 4.  If node is a Text node, then for each CSS text box produced by node,
    *     in content order, compute the text of the box after application of the
    *     CSS `white-space` processing rules and `text-transform` rules, set
    *     items to the list of the resulting strings, and return items.
    *     The CSS `white-space` processing rules are slightly modified:
    *     collapsible spaces at the end of lines are always collapsed, but they
    *     are only removed if the line is the last line of the block, or it ends
    *     with a br element.
    *     Soft hyphens should be preserved.
    *
    *     Note: See `collectText` and `collectPreText`.
    *     Note: we don’t deal with `text-transform`, no element has that by
    *     default.
    *
    * See: <https://drafts.csswg.org/css-text/#white-space-phase-1>
    *
    * @param {Text | Comment} node
    *   Text node.
    * @param {CollectionInfo} info
    *   Info on current collection.
    * @returns {Array<string | BreakNumber>}
    *   Result.
    */
   function collectText(node, info) {
     const value = String(node.value);
     /** @type {Array<string>} */
     const lines = [];
     /** @type {Array<string | BreakNumber>} */
     const result = [];
     let start = 0;

     while (start <= value.length) {
       searchLineFeeds.lastIndex = start;

       const match = searchLineFeeds.exec(value);
       const end = match && 'index' in match ? match.index : value.length;

       lines.push(
         // Any sequence of collapsible spaces and tabs immediately preceding or
         // following a segment break is removed.
         trimAndCollapseSpacesAndTabs(
           // […] ignoring bidi formatting characters (characters with the
           // Bidi_Control property [UAX9]: ALM, LTR, RTL, LRE-RLO, LRI-PDI) as if
           // they were not there.
           value
             .slice(start, end)
             .replace(/[\u061C\u200E\u200F\u202A-\u202E\u2066-\u2069]/g, ''),
           start === 0 ? info.breakBefore : true,
           end === value.length ? info.breakAfter : true
         )
       );

       start = end + 1;
     }

     // Collapsible segment breaks are transformed for rendering according to the
     // segment break transformation rules.
     // So here we jump to 4.1.2 of [CSSTEXT]:
     // Any collapsible segment break immediately following another collapsible
     // segment break is removed
     let index = -1;
     /** @type {BreakNumber | undefined} */
     let join;

     while (++index < lines.length) {
       // *   If the character immediately before or immediately after the segment
       //     break is the zero-width space character (U+200B), then the break is
       //     removed, leaving behind the zero-width space.
       if (
         lines[index].charCodeAt(lines[index].length - 1) === 0x200b /* ZWSP */ ||
         (index < lines.length - 1 &&
           lines[index + 1].charCodeAt(0) === 0x200b) /* ZWSP */
       ) {
         result.push(lines[index]);
         join = undefined;
       }

       // *   Otherwise, if the East Asian Width property [UAX11] of both the
       //     character before and after the segment break is Fullwidth, Wide, or
       //     Halfwidth (not Ambiguous), and neither side is Hangul, then the
       //     segment break is removed.
       //
       //     Note: ignored.
       // *   Otherwise, if the writing system of the segment break is Chinese,
       //     Japanese, or Yi, and the character before or after the segment break
       //     is punctuation or a symbol (Unicode general category P* or S*) and
       //     has an East Asian Width property of Ambiguous, and the character on
       //     the other side of the segment break is Fullwidth, Wide, or Halfwidth,
       //     and not Hangul, then the segment break is removed.
       //
       //     Note: ignored.

       // *   Otherwise, the segment break is converted to a space (U+0020).
       else if (lines[index]) {
         if (typeof join === 'number') result.push(join);
         result.push(lines[index]);
         join = 0;
       } else if (index === 0 || index === lines.length - 1) {
         // If this line is empty, and it’s the first or last, add a space.
         // Note that this function is only called in normal whitespace, so we
         // don’t worry about `pre`.
         result.push(0);
       }
     }

     return result
   }

   /**
    * Collect a text node as “pre” whitespace.
    *
    * @param {Text} node
    *   Text node.
    * @returns {Array<string | BreakNumber>}
    *   Result.
    */
   function collectPreText(node) {
     return [String(node.value)]
   }

   /**
    * 3.  Every collapsible tab is converted to a collapsible space (U+0020).
    * 4.  Any collapsible space immediately following another collapsible
    *     space—even one outside the boundary of the inline containing that
    *     space, provided both spaces are within the same inline formatting
    *     context—is collapsed to have zero advance width. (It is invisible,
    *     but retains its soft wrap opportunity, if any.)
    *
    * @param {string} value
    *   Value to collapse.
    * @param {BreakBefore} breakBefore
    *   Whether there was a break before.
    * @param {BreakAfter} breakAfter
    *   Whether there was a break after.
    * @returns {string}
    *   Result.
    */
   function trimAndCollapseSpacesAndTabs(value, breakBefore, breakAfter) {
     /** @type {Array<string>} */
     const result = [];
     let start = 0;
     /** @type {number | undefined} */
     let end;

     while (start < value.length) {
       searchTabOrSpaces.lastIndex = start;
       const match = searchTabOrSpaces.exec(value);
       end = match ? match.index : value.length;

       // If we’re not directly after a segment break, but there was white space,
       // add an empty value that will be turned into a space.
       if (!start && !end && match && !breakBefore) {
         result.push('');
       }

       if (start !== end) {
         result.push(value.slice(start, end));
       }

       start = match ? end + match[0].length : end;
     }

     // If we reached the end, there was trailing white space, and there’s no
     // segment break after this node, add an empty value that will be turned
     // into a space.
     if (start !== end && !breakAfter) {
       result.push('');
     }

     return result.join(' ')
   }

   /**
    * Figure out the whitespace of a node.
    *
    * We don’t support void elements here (so `nobr wbr` -> `normal` is ignored).
    *
    * @param {Node} node
    *   Node (typically `Element`).
    * @param {CollectionInfo} info
    *   Info on current collection.
    * @returns {Whitespace}
    *   Applied whitespace.
    */
   function inferWhitespace(node, info) {
     if (node.type === 'element') {
       const props = node.properties || {};
       switch (node.tagName) {
         case 'listing':
         case 'plaintext':
         case 'xmp': {
           return 'pre'
         }

         case 'nobr': {
           return 'nowrap'
         }

         case 'pre': {
           return props.wrap ? 'pre-wrap' : 'pre'
         }

         case 'td':
         case 'th': {
           return props.noWrap ? 'nowrap' : info.whitespace
         }

         case 'textarea': {
           return 'pre-wrap'
         }
       }
     }

     return info.whitespace
   }

   /** @type {TestFunctionAnything} */
   function hidden(node) {
     return Boolean((node.properties || {}).hidden)
   }

   /** @type {TestFunctionAnything} */
   function closedDialog(node) {
     return node.tagName === 'dialog' && !(node.properties || {}).open
   }

   /**
    * Remove final line endings from `value`
    *
    * @param {unknown} value
    *   Value with trailing line endings, coerced to string.
    * @return {string}
    *   Value without trailing line endings.
    */
   function trimTrailingLines(value) {
     const input = String(value);
     let end = input.length;

     while (end > 0) {
       const code = input.codePointAt(end - 1);
       if (code !== undefined && (code === 10 || code === 13)) {
         end--;
       } else {
         break
       }
     }

     return input.slice(0, end)
   }

   /**
    * @typedef {import('hast').Element} Element
    * @typedef {import('mdast').Code} Code
    * @typedef {import('../state.js').State} State
    */


   const prefix$1 = 'language-';

   /**
    * @param {State} state
    *   State.
    * @param {Element} node
    *   hast element to transform.
    * @returns {Code}
    *   mdast node.
    */
   function code$2(state, node) {
     const children = node.children;
     let index = -1;
     /** @type {Array<string | number> | undefined} */
     let classList;
     /** @type {string | undefined} */
     let lang;

     if (node.tagName === 'pre') {
       while (++index < children.length) {
         const child = children[index];

         if (
           child.type === 'element' &&
           child.tagName === 'code' &&
           child.properties &&
           child.properties.className &&
           Array.isArray(child.properties.className)
         ) {
           classList = child.properties.className;
           break
         }
       }
     }

     if (classList) {
       index = -1;

       while (++index < classList.length) {
         if (String(classList[index]).slice(0, prefix$1.length) === prefix$1) {
           lang = String(classList[index]).slice(prefix$1.length);
           break
         }
       }
     }

     /** @type {Code} */
     const result = {
       type: 'code',
       lang: lang || null,
       meta: null,
       value: trimTrailingLines(toText(node))
     };
     state.patch(node, result);
     return result
   }

   /**
    * @typedef {import('hast').Comment} Comment
    * @typedef {import('mdast').HTML} HTML
    * @typedef {import('../state.js').State} State
    */

   /**
    * @param {State} state
    *   State.
    * @param {Comment} node
    *   hast element to transform.
    * @returns {HTML}
    *   mdast node.
    */
   function comment(state, node) {
     /** @type {HTML} */
     const result = {
       type: 'html',
       value: '<!--' + node.value + '-->'
     };
     state.patch(node, result);
     return result
   }

   /**
    * @typedef {import('hast').Element} Element
    * @typedef {import('mdast').Delete} Delete
    * @typedef {import('../state.js').State} State
    */

   /**
    * @param {State} state
    *   State.
    * @param {Element} node
    *   hast element to transform.
    * @returns {Delete}
    *   mdast node.
    */
   function del(state, node) {
     /** @type {Delete} */
     const result = {
       type: 'delete',
       // @ts-expect-error: allow potentially “invalid” nodes, they might be unknown.
       // We also support straddling later.
       children: state.all(node)
     };
     state.patch(node, result);
     return result
   }

   /**
    * @typedef {import('mdast').ListContent} ListContent
    */

   /**
    * Infer whether list items are spread.
    *
    * @param {Array<ListContent>} children
    *   List items.
    * @returns {boolean}
    *   Whether one or more list items are spread.
    */
   function listItemsSpread(children) {
     let index = -1;

     if (children.length > 1) {
       while (++index < children.length) {
         if (children[index].spread) {
           return true
         }
       }
     }

     return false
   }

   /**
    * @typedef {import('hast').Element} Element
    * @typedef {import('hast').ElementContent} ElementContent
    * @typedef {import('mdast').List} List
    * @typedef {import('mdast').BlockContent} BlockContent
    * @typedef {import('mdast').DefinitionContent} DefinitionContent
    * @typedef {import('mdast').ListContent} ListContent
    * @typedef {import('../state.js').State} State
    *
    * @typedef Group
    *   Title/definition group.
    * @property {Array<Element>} titles
    *   One or more titles.
    * @property {Array<ElementContent>} definitions
    *   One or more definitions.
    */


   /**
    * @param {State} state
    *   State.
    * @param {Element} node
    *   hast element to transform.
    * @returns {List | undefined}
    *   mdast node.
    */
   function dl$1(state, node) {
     /** @type {Array<ElementContent>} */
     const clean = [];
     /** @type {Array<Group>} */
     const groups = [];
     let index = -1;

     // Unwrap `<div>`s
     while (++index < node.children.length) {
       const child = node.children[index];

       if (child.type === 'element' && child.tagName === 'div') {
         clean.push(...child.children);
       } else {
         clean.push(child);
       }
     }

     /** @type {Group} */
     let group = {titles: [], definitions: []};
     index = -1;

     // Group titles and definitions.
     while (++index < clean.length) {
       const child = clean[index];

       if (child.type === 'element' && child.tagName === 'dt') {
         const previous = clean[index - 1];

         if (
           previous &&
           previous.type === 'element' &&
           previous.tagName === 'dd'
         ) {
           groups.push(group);
           group = {titles: [], definitions: []};
         }

         group.titles.push(child);
       } else {
         group.definitions.push(child);
       }
     }

     groups.push(group);

     // Create items.
     index = -1;
     /** @type {Array<ListContent>} */
     const content = [];

     while (++index < groups.length) {
       const result = [
         ...handle$1(state, groups[index].titles),
         ...handle$1(state, groups[index].definitions)
       ];

       if (result.length > 0) {
         content.push({
           type: 'listItem',
           spread: result.length > 1,
           checked: null,
           children: result
         });
       }
     }

     // Create a list if there are items.
     if (content.length > 0) {
       /** @type {List} */
       const result = {
         type: 'list',
         ordered: false,
         start: null,
         spread: listItemsSpread(content),
         children: content
       };
       state.patch(node, result);
       return result
     }
   }

   /**
    * @param {State} state
    *   State.
    * @param {Array<ElementContent>} children
    *   hast element children to transform.
    * @returns {Array<BlockContent | DefinitionContent>}
    *   mdast nodes.
    */
   function handle$1(state, children) {
     const nodes = state.all({type: 'element', tagName: 'x', children});
     const listItems = state.toSpecificContent(nodes, create$2);

     if (listItems.length === 0) {
       return []
     }

     if (listItems.length === 1) {
       return listItems[0].children
     }

     return [
       {
         type: 'list',
         ordered: false,
         start: null,
         spread: listItemsSpread(listItems),
         children: listItems
       }
     ]
   }

   /**
    * @returns {ListContent}
    */
   function create$2() {
     return {type: 'listItem', spread: false, checked: null, children: []}
   }

   /**
    * @typedef {import('hast').Element} Element
    * @typedef {import('mdast').Emphasis} Emphasis
    * @typedef {import('../state.js').State} State
    */

   /**
    * @param {State} state
    *   State.
    * @param {Element} node
    *   hast element to transform.
    * @returns {Emphasis}
    *   mdast node.
    */
   function em(state, node) {
     /** @type {Emphasis} */
     // @ts-expect-error: allow potentially “invalid” nodes, they might be unknown.
     const result = {type: 'emphasis', children: state.all(node)};
     state.patch(node, result);
     return result
   }

   /**
    * @typedef {import('hast').Element} Element
    * @typedef {import('mdast').Heading} Heading
    * @typedef {import('../state.js').State} State
    */

   /**
    * @param {State} state
    *   State.
    * @param {Element} node
    *   hast element to transform.
    * @returns {Heading}
    *   mdast node.
    */
   function heading$2(state, node) {
     /* c8 ignore next */
     const depth = Number(node.tagName.charAt(1)) || 1;

     /** @type {Heading} */
     const result = {
       type: 'heading',
       // @ts-expect-error: fine.
       depth,
       // @ts-expect-error: allow potentially “invalid” nodes, they might be unknown.
       children: state.all(node)
     };
     state.patch(node, result);
     return result
   }

   /**
    * @typedef {import('hast').Element} Element
    * @typedef {import('mdast').ThematicBreak} ThematicBreak
    * @typedef {import('../state.js').State} State
    */

   /**
    * @param {State} state
    *   State.
    * @param {Element} node
    *   hast element to transform.
    * @returns {ThematicBreak}
    *   mdast node.
    */
   function hr(state, node) {
     /** @type {ThematicBreak} */
     const result = {type: 'thematicBreak'};
     state.patch(node, result);
     return result
   }

   /**
    * @typedef {import('hast').Element} Element
    * @typedef {import('mdast').Link} Link
    * @typedef {import('../state.js').State} State
    */

   /**
    * @param {State} state
    *   State.
    * @param {Element} node
    *   hast element to transform.
    * @returns {Link | void}
    *   mdast node.
    */
   function iframe(state, node) {
     const properties = node.properties || {};
     const src = String(properties.src || '');
     const title = String(properties.title || '');

     // Only create a link if there is a title.
     // We can’t use the content of the frame because conforming HTML parsers treat
     // it as text, whereas legacy parsers treat it as HTML, so it will likely
     // contain tags that will show up in text.
     if (src && title) {
       /** @type {Link} */
       const result = {
         type: 'link',
         title: null,
         url: state.resolve(src),
         children: [{type: 'text', value: title}]
       };
       state.patch(node, result);
       return result
     }
   }

   /**
    * @typedef {import('mdast').Image} Image
    * @typedef {import('hast').Element} Element
    * @typedef {import('../state.js').State} State
    */

   /**
    * @param {State} state
    *   State.
    * @param {Element} node
    *   hast element to transform.
    * @returns {Image}
    *   mdast node.
    */
   function img(state, node) {
     const properties = node.properties || {};

     /** @type {Image} */
     const result = {
       type: 'image',
       url: state.resolve(String(properties.src || '') || null),
       title: properties.title ? String(properties.title) : null,
       alt: properties.alt ? String(properties.alt) : ''
     };
     state.patch(node, result);
     return result
   }

   /**
    * @typedef {import('mdast').InlineCode} InlineCode
    * @typedef {import('hast').Element} Element
    * @typedef {import('../state.js').State} State
    */


   /**
    * @param {State} state
    *   State.
    * @param {Element} node
    *   hast element to transform.
    * @returns {InlineCode}
    *   mdast node.
    */
   function inlineCode$2(state, node) {
     /** @type {InlineCode} */
     const result = {type: 'inlineCode', value: toText(node)};
     state.patch(node, result);
     return result
   }

   /**
    * @typedef {import('hast').Element} Element
    * @typedef {import('hast').Properties} Properties
    * @typedef {import('../state.js').State} State
    */


   /**
    * @param {State} state
    *   State.
    * @param {Element} node
    *   hast element to inspect.
    * @param {Properties | undefined} [properties]
    *   Properties to use, normally taken from `node`, but can be changed.
    * @returns {Options}
    */
   function findSelectedOptions(state, node, properties) {
     /** @type {Array<Element>} */
     const selectedOptions = [];
     /** @type {Options} */
     const values = [];
     const props = properties || node.properties || {};
     const options = findOptions(node);
     const size =
       Math.min(Number.parseInt(String(props.size), 10), 0) ||
       (props.multiple ? 4 : 1);
     let index = -1;

     while (++index < options.length) {
       const option = options[index];

       if (option && option.properties && option.properties.selected) {
         selectedOptions.push(option);
       }
     }

     const list = selectedOptions.length > 0 ? selectedOptions : options;
     const max = list.length > size ? size : list.length;
     index = -1;

     while (++index < max) {
       const option = list[index];
       const props = option.properties || {};
       const content = toText(option);
       const label = content || String(props.label || '');
       const value = String(props.value || '') || content;
       values.push([value, label === value ? undefined : label]);
     }

     return values
   }

   /**
    * @param {Element} node
    *   Parent to find in.
    * @returns {Array<Element>}
    *   Option elements.
    */
   function findOptions(node) {
     /** @type {Array<Element>} */
     const results = [];
     let index = -1;

     while (++index < node.children.length) {
       const child = node.children[index];

       if ('children' in child && Array.isArray(child.children)) {
         results.push(...findOptions(child));
       }

       if (
         child.type === 'element' &&
         child.tagName === 'option' &&
         (!child.properties || !child.properties.disabled)
       ) {
         results.push(child);
       }
     }

     return results
   }

   /**
    * @typedef {import('hast').Element} Element
    * @typedef {import('mdast').Text} Text
    * @typedef {import('mdast').Link} Link
    * @typedef {import('mdast').Image} Image
    * @typedef {import('../state.js').State} State
    * @typedef {import('../util/find-selected-options.js').Options} Options
    */


   const defaultChecked = '[x]';
   const defaultUnchecked = '[ ]';

   /**
    * @param {State} state
    *   State.
    * @param {Element} node
    *   hast element to transform.
    * @returns {Text | Image | Array<Link | Text> | void}
    *   mdast node.
    */
   // eslint-disable-next-line complexity
   function input(state, node) {
     const properties = node.properties || {};
     const value = String(properties.value || properties.placeholder || '');

     if (
       properties.disabled ||
       properties.type === 'hidden' ||
       properties.type === 'file'
     ) {
       return
     }

     if (properties.type === 'checkbox' || properties.type === 'radio') {
       /** @type {Text} */
       const result = {
         type: 'text',
         value: properties.checked
           ? state.options.checked || defaultChecked
           : state.options.unchecked || defaultUnchecked
       };
       state.patch(node, result);
       return result
     }

     if (properties.type === 'image') {
       const alt = properties.alt || value;

       if (alt) {
         /** @type {Image} */
         const result = {
           type: 'image',
           url: state.resolve(String(properties.src || '') || null),
           title: String(properties.title || '') || null,
           alt: String(alt)
         };
         state.patch(node, result);
         return result
       }

       return
     }

     /** @type {Options} */
     let values = [];

     if (value) {
       values = [[value, undefined]];
     } else if (
       // `list` is not supported on these types:
       properties.type !== 'password' &&
       properties.type !== 'file' &&
       properties.type !== 'submit' &&
       properties.type !== 'reset' &&
       properties.type !== 'button' &&
       properties.list
     ) {
       const list = String(properties.list);
       const datalist = state.elementById.get(list);

       if (datalist && datalist.tagName === 'datalist') {
         values = findSelectedOptions(state, datalist, properties);
       }
     }

     if (values.length === 0) {
       return
     }

     // Hide password value.
     if (properties.type === 'password') {
       // Passwords don’t support `list`.
       values[0] = ['•'.repeat(values[0][0].length), undefined];
     }

     if (properties.type === 'url' || properties.type === 'email') {
       /** @type {Array<Link | Text>} */
       const results = [];
       let index = -1;

       while (++index < values.length) {
         const value = state.resolve(values[index][0]);
         /** @type {Link} */
         const result = {
           type: 'link',
           title: null,
           url: properties.type === 'email' ? 'mailto:' + value : value,
           children: [{type: 'text', value: values[index][1] || value}]
         };

         results.push(result);

         if (index !== values.length - 1) {
           results.push({type: 'text', value: ', '});
         }
       }

       return results
     }

     /** @type {Array<string>} */
     const texts = [];
     let index = -1;

     while (++index < values.length) {
       texts.push(
         values[index][1]
           ? values[index][1] + ' (' + values[index][0] + ')'
           : values[index][0]
       );
     }

     /** @type {Text} */
     const result = {type: 'text', value: texts.join(', ')};
     state.patch(node, result);
     return result
   }

   /**
    * @typedef {import('hast').Root} Root
    * @typedef {import('hast').Content} Content
    */

   /**
    * @typedef {Root | Content} Node
    */

   const own$5 = {}.hasOwnProperty;

   /**
    * Check if `node`is an element and has a `field` property.
    *
    * @param {unknown} node
    *   Thing to check (typically `Element`).
    * @param {unknown} field
    *   Field name to check (typically `string`).
    * @returns {boolean}
    *   Whether `node` is an element that has a `field` property.
    */
   function hasProperty(node, field) {
     const value =
       typeof field === 'string' &&
       isNode(node) &&
       node.type === 'element' &&
       node.properties &&
       own$5.call(node.properties, field) &&
       node.properties[field];

     return value !== null && value !== undefined && value !== false
   }

   /**
    * @param {unknown} value
    * @returns {value is Node}
    */
   function isNode(value) {
     return Boolean(value && typeof value === 'object' && 'type' in value)
   }

   /**
    * @fileoverview
    *   Check if a `link` element is “Body OK”.
    * @longdescription
    *   ## Use
    *
    *   ```js
    *   import {h} from 'hastscript'
    *   import {isBodyOkLink} from 'hast-util-is-body-ok-link'
    *
    *   isBodyOkLink(h('link', {itemProp: 'foo'})) //=> true
    *   isBodyOkLink(h('link', {rel: ['stylesheet'], href: 'index.css'})) //=> true
    *   isBodyOkLink(h('link', {rel: ['author'], href: 'index.css'})) //=> false
    *   ```
    *
    *   ## API
    *
    *   ### `isBodyOkLink(node)`
    *
    *   * Return `true` for `link` elements with an `itemProp`
    *   * Return `true` for `link` elements with a `rel` list where one or more
    *     entries are `pingback`, `prefetch`, or `stylesheet`.
    */


   const list$5 = new Set(['pingback', 'prefetch', 'stylesheet']);

   /**
    * @typedef {import('hast').Root} Root
    * @typedef {Root|Root['children'][number]} Node
    */

   /**
    * Check if a `link` element is “Body OK”.
    *
    * @param {Node} node
    * @returns {boolean}
    */
   function isBodyOkLink(node) {
     if (!isElement(node, 'link')) {
       return false
     }

     if (hasProperty(node, 'itemProp')) {
       return true
     }

     const props = node.properties || {};
     const rel = props.rel || [];
     let index = -1;

     if (!Array.isArray(rel) || rel.length === 0) {
       return false
     }

     while (++index < rel.length) {
       if (!list$5.has(String(rel[index]))) {
         return false
       }
     }

     return true
   }

   /**
    * @typedef {import('hast').Root} Root
    * @typedef {import('hast').Content} Content
    */


   const basic = convertElement([
     'a',
     'abbr',
     // `area` is in fact only phrasing if it is inside a `map` element.
     // However, since `area`s are required to be inside a `map` element, and it’s
     // a rather involved check, it’s ignored here for now.
     'area',
     'b',
     'bdi',
     'bdo',
     'br',
     'button',
     'cite',
     'code',
     'data',
     'datalist',
     'del',
     'dfn',
     'em',
     'i',
     'input',
     'ins',
     'kbd',
     'keygen',
     'label',
     'map',
     'mark',
     'meter',
     'noscript',
     'output',
     'progress',
     'q',
     'ruby',
     's',
     'samp',
     'script',
     'select',
     'small',
     'span',
     'strong',
     'sub',
     'sup',
     'template',
     'textarea',
     'time',
     'u',
     'var',
     'wbr'
   ]);

   const meta = convertElement('meta');

   /**
    * Check if the given value is *phrasing* content.
    *
    * @param {unknown} value
    *   Thing to check, typically `Node`.
    * @returns {boolean}
    *   Whether `value` is phrasing content.
    */
   function phrasing$2(value) {
     return Boolean(
       node$1(value) &&
         (value.type === 'text' ||
           basic(value) ||
           embedded(value) ||
           isBodyOkLink(value) ||
           (meta(value) && hasProperty(value, 'itemProp')))
     )
   }

   /**
    * @param {unknown} value
    * @returns {value is Node}
    */
   function node$1(value) {
     // @ts-expect-error: looks like an object.
     return value && typeof value === 'object' && 'type' in value
   }

   /**
    * @typedef {import('hast').Element} Element
    * @typedef {import('mdast').ListItem} ListItem
    * @typedef {import('../state.js').State} State
    */


   /**
    * @param {State} state
    *   State.
    * @param {Element} node
    *   hast element to transform.
    * @returns {ListItem}
    *   mdast node.
    */
   function li$1(state, node) {
     const head = node.children[0];
     /** @type {boolean | null} */
     let checked = null;
     /** @type {Element | undefined} */
     let clone;

     // Check if this node starts with a checkbox.
     if (head && head.type === 'element' && head.tagName === 'p') {
       const checkbox = head.children[0];

       if (
         checkbox &&
         checkbox.type === 'element' &&
         checkbox.tagName === 'input' &&
         checkbox.properties &&
         (checkbox.properties.type === 'checkbox' ||
           checkbox.properties.type === 'radio')
       ) {
         checked = Boolean(checkbox.properties.checked);
         clone = {
           ...node,
           children: [
             {...head, children: head.children.slice(1)},
             ...node.children.slice(1)
           ]
         };
       }
     }

     if (!clone) clone = node;

     const spread = spreadout$2(clone);
     const children = state.toFlow(state.all(clone));

     /** @type {ListItem} */
     const result = {type: 'listItem', spread, checked, children};
     state.patch(clone, result);
     return result
   }

   /**
    * Check if an element should spread out.
    *
    * The reason to spread out a markdown list item is primarily whether writing
    * the equivalent in markdown, would yield a spread out item.
    *
    * A spread out item results in `<p>` and `</p>` tags.
    * Otherwise, the phrasing would be output directly.
    * We can check for that: if there’s a `<p>` element, spread it out.
    *
    * But what if there are no paragraphs?
    * In that case, we can also assume that if two “block” things were written in
    * an item, that it is spread out, because blocks are typically joined by blank
    * lines, which also means a spread item.
    *
    * Lastly, because in HTML things can be wrapped in a `<div>` or similar, we
    * delve into non-phrasing elements here to figure out if they themselves
    * contain paragraphs or 2 or more flow non-phrasing elements.
    *
    * @param {Element} node
    * @returns {boolean}
    */
   function spreadout$2(node) {
     let index = -1;
     let seenFlow = false;

     while (++index < node.children.length) {
       const child = node.children[index];

       if (child.type === 'element') {
         if (phrasing$2(child)) continue

         if (child.tagName === 'p' || seenFlow || spreadout$2(child)) {
           return true
         }

         seenFlow = true;
       }
     }

     return false
   }

   /**
    * @typedef {import('hast').Element} Element
    * @typedef {import('mdast').List} List
    * @typedef {import('mdast').ListContent} ListContent
    * @typedef {import('../state.js').State} State
    */


   /**
    * @param {State} state
    *   State.
    * @param {Element} node
    *   hast element to transform.
    * @returns {List}
    *   mdast node.
    */
   function list$4(state, node) {
     const ordered = node.tagName === 'ol';
     const children = state.toSpecificContent(state.all(node), create$1);
     /** @type {number | null} */
     let start = null;

     if (ordered) {
       start =
         node.properties && node.properties.start
           ? Number.parseInt(String(node.properties.start), 10)
           : 1;
     }

     /** @type {List} */
     const result = {
       type: 'list',
       ordered,
       start,
       spread: listItemsSpread(children),
       children
     };
     state.patch(node, result);
     return result
   }

   /**
    * @returns {ListContent}
    */
   function create$1() {
     return {type: 'listItem', spread: false, checked: null, children: []}
   }

   /**
    * @typedef {import('mdast').Root|import('mdast').Content} Node
    *
    * @typedef Options
    *   Configuration (optional).
    * @property {boolean | null | undefined} [includeImageAlt=true]
    *   Whether to use `alt` for `image`s.
    * @property {boolean | null | undefined} [includeHtml=true]
    *   Whether to use `value` of HTML.
    */

   /** @type {Options} */
   const emptyOptions = {};

   /**
    * Get the text content of a node or list of nodes.
    *
    * Prefers the node’s plain-text fields, otherwise serializes its children,
    * and if the given value is an array, serialize the nodes in it.
    *
    * @param {unknown} value
    *   Thing to serialize, typically `Node`.
    * @param {Options | null | undefined} [options]
    *   Configuration (optional).
    * @returns {string}
    *   Serialized `value`.
    */
   function toString(value, options) {
     const settings = options || emptyOptions;
     const includeImageAlt =
       typeof settings.includeImageAlt === 'boolean'
         ? settings.includeImageAlt
         : true;
     const includeHtml =
       typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true;

     return one$2(value, includeImageAlt, includeHtml)
   }

   /**
    * One node or several nodes.
    *
    * @param {unknown} value
    *   Thing to serialize.
    * @param {boolean} includeImageAlt
    *   Include image `alt`s.
    * @param {boolean} includeHtml
    *   Include HTML.
    * @returns {string}
    *   Serialized node.
    */
   function one$2(value, includeImageAlt, includeHtml) {
     if (node(value)) {
       if ('value' in value) {
         return value.type === 'html' && !includeHtml ? '' : value.value
       }

       if (includeImageAlt && 'alt' in value && value.alt) {
         return value.alt
       }

       if ('children' in value) {
         return all$3(value.children, includeImageAlt, includeHtml)
       }
     }

     if (Array.isArray(value)) {
       return all$3(value, includeImageAlt, includeHtml)
     }

     return ''
   }

   /**
    * Serialize a list of nodes.
    *
    * @param {Array<unknown>} values
    *   Thing to serialize.
    * @param {boolean} includeImageAlt
    *   Include image `alt`s.
    * @param {boolean} includeHtml
    *   Include HTML.
    * @returns {string}
    *   Serialized nodes.
    */
   function all$3(values, includeImageAlt, includeHtml) {
     /** @type {Array<string>} */
     const result = [];
     let index = -1;

     while (++index < values.length) {
       result[index] = one$2(values[index], includeImageAlt, includeHtml);
     }

     return result.join('')
   }

   /**
    * Check if `value` looks like a node.
    *
    * @param {unknown} value
    *   Thing.
    * @returns {value is Node}
    *   Whether `value` is a node.
    */
   function node(value) {
     return Boolean(value && typeof value === 'object')
   }

   var hasOwn = Object.prototype.hasOwnProperty;
   var toStr = Object.prototype.toString;
   var defineProperty = Object.defineProperty;
   var gOPD = Object.getOwnPropertyDescriptor;

   var isArray = function isArray(arr) {
   	if (typeof Array.isArray === 'function') {
   		return Array.isArray(arr);
   	}

   	return toStr.call(arr) === '[object Array]';
   };

   var isPlainObject = function isPlainObject(obj) {
   	if (!obj || toStr.call(obj) !== '[object Object]') {
   		return false;
   	}

   	var hasOwnConstructor = hasOwn.call(obj, 'constructor');
   	var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
   	// Not own constructor property must be Object
   	if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
   		return false;
   	}

   	// Own properties are enumerated firstly, so to speed up,
   	// if last one is own, then all properties are own.
   	var key;
   	for (key in obj) { /**/ }

   	return typeof key === 'undefined' || hasOwn.call(obj, key);
   };

   // If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target
   var setProperty = function setProperty(target, options) {
   	if (defineProperty && options.name === '__proto__') {
   		defineProperty(target, options.name, {
   			enumerable: true,
   			configurable: true,
   			value: options.newValue,
   			writable: true
   		});
   	} else {
   		target[options.name] = options.newValue;
   	}
   };

   // Return undefined instead of __proto__ if '__proto__' is not an own property
   var getProperty = function getProperty(obj, name) {
   	if (name === '__proto__') {
   		if (!hasOwn.call(obj, name)) {
   			return void 0;
   		} else if (gOPD) {
   			// In early versions of node, obj['__proto__'] is buggy when obj has
   			// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.
   			return gOPD(obj, name).value;
   		}
   	}

   	return obj[name];
   };

   var extend = function extend() {
   	var options, name, src, copy, copyIsArray, clone;
   	var target = arguments[0];
   	var i = 1;
   	var length = arguments.length;
   	var deep = false;

   	// Handle a deep copy situation
   	if (typeof target === 'boolean') {
   		deep = target;
   		target = arguments[1] || {};
   		// skip the boolean and the target
   		i = 2;
   	}
   	if (target == null || (typeof target !== 'object' && typeof target !== 'function')) {
   		target = {};
   	}

   	for (; i < length; ++i) {
   		options = arguments[i];
   		// Only deal with non-null/undefined values
   		if (options != null) {
   			// Extend the base object
   			for (name in options) {
   				src = getProperty(target, name);
   				copy = getProperty(options, name);

   				// Prevent never-ending loop
   				if (target !== copy) {
   					// Recurse if we're merging plain objects or arrays
   					if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
   						if (copyIsArray) {
   							copyIsArray = false;
   							clone = src && isArray(src) ? src : [];
   						} else {
   							clone = src && isPlainObject(src) ? src : {};
   						}

   						// Never move original objects, clone them
   						setProperty(target, { name: name, newValue: extend(deep, clone, copy) });

   					// Don't bring in undefined values
   					} else if (typeof copy !== 'undefined') {
   						setProperty(target, { name: name, newValue: copy });
   					}
   				}
   			}
   		}
   	}

   	// Return the modified object
   	return target;
   };

   var extend$1 = /*@__PURE__*/getDefaultExportFromCjs(extend);

   /**
    * @typedef {import('mdast').PhrasingContent} PhrasingContent
    * @typedef {import('unist-util-is').AssertPredicate<PhrasingContent>} AssertPredicatePhrasing
    */


   /**
    * Check if the given value is *phrasing content*.
    *
    * @param
    *   Thing to check, typically `Node`.
    * @returns
    *   Whether `value` is phrasing content.
    */
   const phrasing$1 = /** @type {AssertPredicatePhrasing} */ (
     convert([
       'break',
       'delete',
       'emphasis',
       'footnote',
       'footnoteReference',
       'image',
       'imageReference',
       'inlineCode',
       'link',
       'linkReference',
       'strong',
       'text'
     ])
   );

   /**
    * @typedef {import('mdast').Root} Root
    * @typedef {import('mdast').Content} Content
    * @typedef {import('mdast').Delete} Delete
    * @typedef {import('mdast').Link} Link
    * @typedef {import('mdast').Paragraph} Paragraph
    * @typedef {import('mdast').BlockContent} BlockContent
    * @typedef {import('mdast').PhrasingContent} PhrasingContent
    */


   /**
    * Check if there are phrasing mdast nodes.
    *
    * This is needed if a fragment is given, which could just be a sentence, and
    * doesn’t need a wrapper paragraph.
    *
    * @param {Array<Node>} nodes
    * @returns {boolean}
    */
   function wrapNeeded(nodes) {
     let index = -1;

     while (++index < nodes.length) {
       const node = nodes[index];

       if (!phrasing(node) || ('children' in node && wrapNeeded(node.children))) {
         return true
       }
     }

     return false
   }

   /**
    * Wrap runs of phrasing content into paragraphs, leaving the non-phrasing
    * content as-is.
    *
    * @param {Array<Content>} nodes
    *   Content.
    * @returns {Array<BlockContent>}
    *   Content where phrasing is wrapped in paragraphs.
    */
   function wrap$1(nodes) {
     return runs(nodes, onphrasing, (d) => d)

     /**
      * @param {Array<PhrasingContent>} nodes
      * @returns {Array<Paragraph>}
      */
     function onphrasing(nodes) {
       return nodes.every((d) => whitespace$3(d))
         ? []
         : [{type: 'paragraph', children: nodes}]
     }
   }

   /**
    * @param {Delete | Link} node
    * @returns {Array<BlockContent>}
    */
   function split(node) {
     return runs(node.children, onphrasing, onnonphrasing)

     /**
      * Use `parent`, put the phrasing run inside it.
      *
      * @param {Array<PhrasingContent>} nodes
      * @returns {Array<BlockContent>}
      */
     function onphrasing(nodes) {
       const newParent = cloneWithoutChildren(node);
       newParent.children = nodes;
       // @ts-expect-error Assume fine.
       return [newParent]
     }

     /**
      * Use `child`, add `parent` as its first child, put the original children
      * into `parent`.
      * If `child` is not a parent, `parent` will not be added.
      *
      * @param {BlockContent} child
      * @returns {BlockContent}
      */
     function onnonphrasing(child) {
       if ('children' in child && 'children' in node) {
         const newParent = cloneWithoutChildren(node);
         const newChild = cloneWithoutChildren(child);
         // @ts-expect-error Assume fine.
         newParent.children = child.children;
         // @ts-expect-error Assume fine.
         newChild.children.push(newParent);
         return newChild
       }

       return {...child}
     }
   }

   /**
    * Wrap all runs of mdast phrasing content in `paragraph` nodes.
    *
    * @param {Array<Content>} nodes
    *   List of input nodes.
    * @param {(nodes: Array<PhrasingContent>) => Array<BlockContent>} onphrasing
    *   Turn phrasing content into block content.
    * @param {(node: BlockContent) => BlockContent} onnonphrasing
    *   Map block content (defaults to keeping them as-is).
    * @returns {Array<BlockContent>}
    */
   function runs(nodes, onphrasing, onnonphrasing) {
     const flattened = flatten(nodes);
     /** @type {Array<BlockContent>} */
     const result = [];
     /** @type {Array<PhrasingContent>} */
     let queue = [];
     let index = -1;

     while (++index < flattened.length) {
       const node = flattened[index];

       if (phrasing(node)) {
         queue.push(node);
       } else {
         if (queue.length > 0) {
           result.push(...onphrasing(queue));
           queue = [];
         }

         // @ts-expect-error Assume non-phrasing.
         result.push(onnonphrasing(node));
       }
     }

     if (queue.length > 0) {
       result.push(...onphrasing(queue));
       queue = [];
     }

     return result
   }

   /**
    * Flatten a list of nodes.
    *
    * @param {Array<Content>} nodes
    *   List of nodes, will unravel `delete` and `link`.
    * @returns {Array<Content>}
    *   Unraveled nodes.
    */
   function flatten(nodes) {
     /** @type {Array<Content>} */
     const flattened = [];
     let index = -1;

     while (++index < nodes.length) {
       const node = nodes[index];

       // Straddling: some elements are *weird*.
       // Namely: `map`, `ins`, `del`, and `a`, as they are hybrid elements.
       // See: <https://html.spec.whatwg.org/#paragraphs>.
       // Paragraphs are the weirdest of them all.
       // See the straddling fixture for more info!
       // `ins` is ignored in mdast, so we don’t need to worry about that.
       // `map` maps to its content, so we don’t need to worry about that either.
       // `del` maps to `delete` and `a` to `link`, so we do handle those.
       // What we’ll do is split `node` over each of its children.
       if (
         (node.type === 'delete' || node.type === 'link') &&
         wrapNeeded(node.children)
       ) {
         flattened.push(...split(node));
       } else {
         flattened.push(node);
       }
     }

     return flattened
   }

   /**
    * Check if an mdast node is phrasing.
    *
    * Also supports checking embedded hast fields.
    *
    * @param {Node} node
    *   mdast node to check.
    * @returns {node is PhrasingContent}
    *   Whether `node` is phrasing content (includes nodes with `hName` fields
    *   set to phrasing hast element names).
    */
   function phrasing(node) {
     const tagName = node.data && node.data.hName;
     return tagName
       ? phrasing$2({type: 'element', tagName, properties: {}, children: []})
       : phrasing$1(node)
   }

   /**
    * @template {Parent} ParentType
    *   Parent type.
    * @param {ParentType} node
    *   Node to clone.
    * @returns {ParentType}
    *   Cloned node, without children.
    */
   function cloneWithoutChildren(node) {
     return extend$1(true, {}, {...node, children: []})
   }

   /**
    * @typedef {import('hast').Element} Element
    * @typedef {import('mdast').Root} Root
    * @typedef {import('mdast').Link} Link
    * @typedef {import('mdast').Image} Image
    * @typedef {import('mdast').Content} MdastContent
    * @typedef {import('../state.js').State} State
    */


   /**
    * @param {State} state
    *   State.
    * @param {Element} node
    *   hast element to transform.
    * @returns {Link | Array<MdastContent>}
    *   mdast node.
    */
   function media(state, node) {
     const properties = node.properties || {};
     const poster = node.tagName === 'video' ? String(properties.poster || '') : '';
     let src = String(properties.src || '');
     let index = -1;
     let linkInFallbackContent = false;
     let nodes = state.all(node);

     /** @type {Root} */
     const fragment = {type: 'root', children: nodes};

     visit(fragment, function (node) {
       if (node.type === 'link') {
         linkInFallbackContent = true;
         return EXIT
       }
     });

     // If the content links to something, or if it’s not phrasing…
     if (linkInFallbackContent || wrapNeeded(nodes)) {
       return nodes
     }

     // Find the source.
     while (!src && ++index < node.children.length) {
       const child = node.children[index];

       if (
         child.type === 'element' &&
         child.tagName === 'source' &&
         child.properties
       ) {
         src = String(child.properties.src || '');
       }
     }

     // If there’s a poster defined on the video, create an image.
     if (poster) {
       /** @type {Image} */
       const image = {
         type: 'image',
         title: null,
         url: state.resolve(poster),
         alt: toString(nodes)
       };
       state.patch(node, image);
       nodes = [image];
     }

     // Link to the media resource.
     /** @type {Link} */
     const result = {
       type: 'link',
       title: properties.title ? String(properties.title) : null,
       url: state.resolve(src),
       // @ts-expect-error: allow potentially “invalid” nodes, they might be unknown.
       // We also support straddling later.
       children: nodes
     };
     state.patch(node, result);
     return result
   }

   /**
    * @typedef {import('hast').Element} Element
    * @typedef {import('mdast').Paragraph} Paragraph
    * @typedef {import('../state.js').State} State
    */

   /**
    * @param {State} state
    *   State.
    * @param {Element} node
    *   hast element to transform.
    * @returns {Paragraph | void}
    *   mdast node.
    */
   function p(state, node) {
     const children = state.all(node);

     if (children.length > 0) {
       /** @type {Paragraph} */
       // @ts-expect-error: allow potentially “invalid” nodes, they might be unknown.
       const result = {type: 'paragraph', children};
       state.patch(node, result);
       return result
     }
   }

   /**
    * @typedef {import('hast').Element} Element
    * @typedef {import('mdast').Content} MdastContent
    * @typedef {import('../state.js').State} State
    */

   const defaultQuotes = ['"'];

   /**
    * @param {State} state
    *   State.
    * @param {Element} node
    *   hast element to transform.
    * @returns {Array<MdastContent>}
    *   mdast nodes.
    */
   function q$2(state, node) {
     const quotes = state.options.quotes || defaultQuotes;

     state.qNesting++;
     const contents = state.all(node);
     state.qNesting--;

     const quote = quotes[state.qNesting % quotes.length];
     const head = contents[0];
     const tail = contents[contents.length - 1];
     const open = quote.charAt(0);
     const close = quote.length > 1 ? quote.charAt(1) : quote;

     if (head && head.type === 'text') {
       head.value = open + head.value;
     } else {
       contents.unshift({type: 'text', value: open});
     }

     if (tail && tail.type === 'text') {
       tail.value += close;
     } else {
       contents.push({type: 'text', value: close});
     }

     return contents
   }

   /**
    * @typedef {import('hast').Root} HastRoot
    * @typedef {import('mdast').Root} MdastRoot
    * @typedef {import('../state.js').State} State
    */


   /**
    * @param {State} state
    *   State.
    * @param {HastRoot} node
    *   hast root to transform.
    * @returns {MdastRoot}
    *   mdast node.
    */
   function root$2(state, node) {
     let children = state.all(node);

     if (state.options.document || wrapNeeded(children)) {
       children = wrap$1(children);
     }

     /** @type {MdastRoot} */
     const result = {type: 'root', children};
     state.patch(node, result);
     return result
   }

   /**
    * @typedef {import('hast').Element} Element
    * @typedef {import('mdast').Text} Text
    * @typedef {import('../state.js').State} State
    */


   /**
    * @param {State} state
    *   State.
    * @param {Element} node
    *   hast element to transform.
    * @returns {Text | void}
    *   mdast node.
    */
   function select(state, node) {
     const values = findSelectedOptions(state, node);
     let index = -1;
     /** @type {Array<string>} */
     const results = [];

     while (++index < values.length) {
       const value = values[index];
       results.push(value[1] ? value[1] + ' (' + value[0] + ')' : value[0]);
     }

     if (results.length > 0) {
       /** @type {Text} */
       const result = {type: 'text', value: results.join(', ')};
       state.patch(node, result);
       return result
     }
   }

   /**
    * @typedef {import('hast').Element} Element
    * @typedef {import('mdast').Strong} Strong
    * @typedef {import('../state.js').State} State
    */

   /**
    * @param {State} state
    *   State.
    * @param {Element} node
    *   hast element to transform.
    * @returns {Strong}
    *   mdast node.
    */
   function strong$2(state, node) {
     /** @type {Strong} */
     // @ts-expect-error: allow potentially “invalid” nodes, they might be unknown.
     const result = {type: 'strong', children: state.all(node)};
     state.patch(node, result);
     return result
   }

   /**
    * @typedef {import('hast').Element} Element
    * @typedef {import('mdast').TableCell} TableCell
    * @typedef {import('../state.js').State} State
    */

   /**
    * @param {State} state
    *   State.
    * @param {Element} node
    *   hast element to transform.
    * @returns {TableCell}
    *   mdast node.
    */
   function tableCell$1(state, node) {
     /** @type {TableCell} */
     // @ts-expect-error: allow potentially “invalid” nodes, they might be unknown.
     const result = {type: 'tableCell', children: state.all(node)};
     state.patch(node, result);

     if (node.properties) {
       const rowSpan = node.properties.rowSpan;
       const colSpan = node.properties.colSpan;

       if (rowSpan || colSpan) {
         const data = result.data || (result.data = {});
         if (rowSpan) data.hastUtilToMdastTemporaryRowSpan = rowSpan;
         if (colSpan) data.hastUtilToMdastTemporaryColSpan = colSpan;
       }
     }

     return result
   }

   /**
    * @typedef {import('hast').Element} Element
    * @typedef {import('mdast').TableRow} TableRow
    * @typedef {import('mdast').RowContent} RowContent
    * @typedef {import('../state.js').State} State
    */

   /**
    * @param {State} state
    *   State.
    * @param {Element} node
    *   hast element to transform.
    * @returns {TableRow}
    *   mdast node.
    */
   function tableRow$1(state, node) {
     const children = state.toSpecificContent(state.all(node), create);

     /** @type {TableRow} */
     const result = {type: 'tableRow', children};
     state.patch(node, result);
     return result
   }

   /**
    * @returns {RowContent}
    */
   function create() {
     return {type: 'tableCell', children: []}
   }

   /**
    * @typedef {import('hast').Element} Element
    * @typedef {import('mdast').AlignType} AlignType
    * @typedef {import('mdast').Content} Content
    * @typedef {import('mdast').PhrasingContent} PhrasingContent
    * @typedef {import('mdast').RowContent} RowContent
    * @typedef {import('mdast').Table} Table
    * @typedef {import('mdast').TableContent} TableContent
    * @typedef {import('mdast').Text} Text
    * @typedef {import('../state.js').State} State
    *
    * @typedef Info
    *   Inferred info on a table.
    * @property {Array<AlignType>} align
    *   Alignment.
    * @property {boolean} headless
    *   Whether a `thead` is missing.
    */


   /**
    * @param {State} state
    *   State.
    * @param {Element} node
    *   hast element to transform.
    * @returns {Table | Text}
    *   mdast node.
    */
   // eslint-disable-next-line complexity
   function table$1(state, node) {
     // Ignore nested tables.
     if (state.inTable) {
       /** @type {Text} */
       const result = {type: 'text', value: toText(node)};
       state.patch(node, result);
       return result
     }

     state.inTable = true;

     const {headless, align} = inspect(node);
     const rows = state.toSpecificContent(state.all(node), createRow);

     // Add an empty header row.
     if (headless) {
       rows.unshift(createRow());
     }

     let rowIndex = -1;

     while (++rowIndex < rows.length) {
       const row = rows[rowIndex];
       const cells = state.toSpecificContent(row.children, createCell);
       row.children = cells;
     }

     let columns = 1;
     rowIndex = -1;

     while (++rowIndex < rows.length) {
       const cells = rows[rowIndex].children;
       let cellIndex = -1;

       while (++cellIndex < cells.length) {
         const cell = cells[cellIndex];

         if (cell.data) {
           const colSpan =
             Number.parseInt(
               String(cell.data.hastUtilToMdastTemporaryColSpan),
               10
             ) || 1;
           const rowSpan =
             Number.parseInt(
               String(cell.data.hastUtilToMdastTemporaryRowSpan),
               10
             ) || 1;

           if (colSpan > 1 || rowSpan > 1) {
             let otherRowIndex = rowIndex - 1;

             while (++otherRowIndex < rowIndex + rowSpan) {
               let colIndex = cellIndex - 1;

               while (++colIndex < cellIndex + colSpan) {
                 if (!rows[otherRowIndex]) {
                   // Don’t add rows that don’t exist.
                   // Browsers don’t render them either.
                   break
                 }

                 /** @type {Array<RowContent>} */
                 const newCells = [];

                 if (otherRowIndex !== rowIndex || colIndex !== cellIndex) {
                   newCells.push({type: 'tableCell', children: []});
                 }

                 rows[otherRowIndex].children.splice(colIndex, 0, ...newCells);
               }
             }
           }

           // Clean the data fields.
           if ('hastUtilToMdastTemporaryColSpan' in cell.data)
             delete cell.data.hastUtilToMdastTemporaryColSpan;
           if ('hastUtilToMdastTemporaryRowSpan' in cell.data)
             delete cell.data.hastUtilToMdastTemporaryRowSpan;
           if (Object.keys(cell.data).length === 0) delete cell.data;
         }
       }

       if (cells.length > columns) columns = cells.length;
     }

     // Add extra empty cells.
     rowIndex = -1;

     while (++rowIndex < rows.length) {
       const cells = rows[rowIndex].children;
       let cellIndex = cells.length - 1;
       while (++cellIndex < columns) {
         cells.push({type: 'tableCell', children: []});
       }
     }

     let alignIndex = align.length - 1;
     while (++alignIndex < columns) {
       align.push(null);
     }

     state.inTable = false;

     /** @type {Table} */
     const result = {type: 'table', align, children: rows};
     state.patch(node, result);
     return result
   }

   /**
    * Infer whether the HTML table has a head and how it aligns.
    *
    * @param {Element} node
    *   Table element to check.
    * @returns {Info}
    *   Info.
    */
   function inspect(node) {
     /** @type {Info} */
     const info = {align: [null], headless: true};
     let rowIndex = 0;
     let cellIndex = 0;

     visit(node, function (child) {
       if (child.type === 'element') {
         // Don’t enter nested tables.
         if (child.tagName === 'table' && node !== child) {
           return SKIP
         }

         if (
           (child.tagName === 'th' || child.tagName === 'td') &&
           child.properties
         ) {
           if (!info.align[cellIndex]) {
             const value = String(child.properties.align || '') || null;

             if (
               value === null ||
               value === 'left' ||
               value === 'center' ||
               value === 'right'
             ) {
               info.align[cellIndex] = value;
             }
           }

           // If there is a `th` in the first row, assume there is a header row.
           if (info.headless && rowIndex < 2 && child.tagName === 'th') {
             info.headless = false;
           }

           cellIndex++;
         }
         // If there is a `thead`, assume there is a header row.
         else if (child.tagName === 'thead') {
           info.headless = false;
         } else if (child.tagName === 'tr') {
           rowIndex++;
           cellIndex = 0;
         }
       }
     });

     return info
   }

   /**
    * @returns {TableContent}
    */
   function createRow() {
     return {type: 'tableRow', children: []}
   }

   /**
    * @returns {RowContent}
    */
   function createCell() {
     return {type: 'tableCell', children: []}
   }

   /**
    * @typedef {import('hast').Text} HastText
    * @typedef {import('mdast').Text} MdastText
    * @typedef {import('../state.js').State} State
    */

   /**
    * @param {State} state
    *   State.
    * @param {HastText} node
    *   hast element to transform.
    * @returns {MdastText}
    *   mdast node.
    */
   function text$5(state, node) {
     /** @type {MdastText} */
     const result = {type: 'text', value: node.value};
     state.patch(node, result);
     return result
   }

   /**
    * @typedef {import('hast').Element} Element
    * @typedef {import('mdast').Text} Text
    * @typedef {import('../state.js').State} State
    */


   /**
    * @param {State} state
    *   State.
    * @param {Element} node
    *   hast element to transform.
    * @returns {Text}
    *   mdast node.
    */
   function textarea(state, node) {
     /** @type {Text} */
     const result = {type: 'text', value: toText(node)};
     state.patch(node, result);
     return result
   }

   /**
    * @typedef {import('hast').Element} Element
    * @typedef {import('mdast').Text} Text
    * @typedef {import('../state.js').State} State
    */

   /**
    * @param {State} state
    *   State.
    * @param {Element} node
    *   hast element to transform.
    * @returns {Text}
    *   mdast node.
    */
   function wbr(state, node) {
     /** @type {Text} */
     const result = {type: 'text', value: '\u200B'};
     state.patch(node, result);
     return result
   }

   /**
    * @typedef {import('hast').Root} Root
    * @typedef {import('hast').Content} Content
    * @typedef {import('../state.js').State} State
    */


   /**
    * Default handlers for nodes.
    *
    * Each key is a node type, each value is a `NodeHandler`.
    */
   const nodeHandlers = {
     root: root$2,
     text: text$5,
     comment,
     doctype: ignore$1
   };

   /**
    * Default handlers for elements.
    *
    * Each key is an element name, each value is a `Handler`.
    */
   const handlers$1 = {
     applet: ignore$1,
     area: ignore$1,
     basefont: ignore$1,
     bgsound: ignore$1,
     caption: ignore$1,
     col: ignore$1,
     colgroup: ignore$1,
     command: ignore$1,
     content: ignore$1,
     datalist: ignore$1,
     dialog: ignore$1,
     element: ignore$1,
     embed: ignore$1,
     frame: ignore$1,
     frameset: ignore$1,
     isindex: ignore$1,
     keygen: ignore$1,
     link: ignore$1,
     math: ignore$1,
     menu: ignore$1,
     menuitem: ignore$1,
     meta: ignore$1,
     nextid: ignore$1,
     noembed: ignore$1,
     noframes: ignore$1,
     optgroup: ignore$1,
     option: ignore$1,
     param: ignore$1,
     script: ignore$1,
     shadow: ignore$1,
     source: ignore$1,
     spacer: ignore$1,
     style: ignore$1,
     svg: ignore$1,
     template: ignore$1,
     title: ignore$1,
     track: ignore$1,

     abbr: all$2,
     acronym: all$2,
     bdi: all$2,
     bdo: all$2,
     big: all$2,
     blink: all$2,
     button: all$2,
     canvas: all$2,
     cite: all$2,
     data: all$2,
     details: all$2,
     dfn: all$2,
     font: all$2,
     ins: all$2,
     label: all$2,
     map: all$2,
     marquee: all$2,
     meter: all$2,
     nobr: all$2,
     noscript: all$2,
     object: all$2,
     output: all$2,
     progress: all$2,
     rb: all$2,
     rbc: all$2,
     rp: all$2,
     rt: all$2,
     rtc: all$2,
     ruby: all$2,
     slot: all$2,
     small: all$2,
     span: all$2,
     sup: all$2,
     sub: all$2,
     tbody: all$2,
     tfoot: all$2,
     thead: all$2,
     time: all$2,

     address: flow$2,
     article: flow$2,
     aside: flow$2,
     body: flow$2,
     center: flow$2,
     div: flow$2,
     fieldset: flow$2,
     figcaption: flow$2,
     figure: flow$2,
     form: flow$2,
     footer: flow$2,
     header: flow$2,
     hgroup: flow$2,
     html: flow$2,
     legend: flow$2,
     main: flow$2,
     multicol: flow$2,
     nav: flow$2,
     picture: flow$2,
     section: flow$2,

     a: a$1,
     audio: media,
     b: strong$2,
     base: base$2,
     blockquote: blockquote$2,
     br: br$1,
     code: inlineCode$2,
     dir: list$4,
     dl: dl$1,
     dt: li$1,
     dd: li$1,
     del,
     em,
     h1: heading$2,
     h2: heading$2,
     h3: heading$2,
     h4: heading$2,
     h5: heading$2,
     h6: heading$2,
     hr,
     i: em,
     iframe,
     img,
     image: img,
     input,
     kbd: inlineCode$2,
     li: li$1,
     listing: code$2,
     mark: em,
     ol: list$4,
     p,
     plaintext: code$2,
     pre: code$2,
     q: q$2,
     s: del,
     samp: inlineCode$2,
     select,
     strike: del,
     strong: strong$2,
     summary: p,
     table: table$1,
     td: tableCell$1,
     textarea,
     th: tableCell$1,
     tr: tableRow$1,
     tt: inlineCode$2,
     u: em,
     ul: list$4,
     var: inlineCode$2,
     video: media,
     wbr,
     xmp: code$2
   };

   function ignore$1() {}

   /**
    * @param {State} state
    *   State.
    * @param {Parent} node
    *   Parent to transform.
    */
   function flow$2(state, node) {
     return state.toFlow(state.all(node))
   }

   /**
    * @param {State} state
    *   State.
    * @param {Parent} node
    *   Parent to transform.
    */
   function all$2(state, node) {
     return state.all(node)
   }

   /**
    * @typedef {import('hast').Root} Root
    * @typedef {import('hast').Content} Content
    * @typedef {import('hast').Element} Element
    * @typedef {import('mdast').Root} MdastRoot
    * @typedef {import('mdast').Content} MdastContent
    * @typedef {import('mdast').BlockContent} MdastBlockContent
    * @typedef {import('mdast').DefinitionContent} MdastDefinitionContent
    * @typedef {import('./types.js').Options} Options
    * @typedef {import('./types.js').Handle} Handle
    * @typedef {import('./types.js').NodeHandle} NodeHandle
    */


   const own$4 = {}.hasOwnProperty;

   /**
    * Create a state.
    *
    * @param {Options} options
    *   User configuration.
    * @returns {State}
    *   State.
    */
   function createState$1(options) {
     /** @type {State} */
     const state = {
       patch: patch$1,
       resolve,
       all: all$1,
       one: one$1,
       toFlow,
       toSpecificContent,
       options,
       elementById: new Map(),
       nodeHandlers: {...nodeHandlers, ...options.nodeHandlers},
       handlers: {...handlers$1, ...options.handlers},
       baseFound: false,
       inTable: false,
       frozenBaseUrl: undefined,
       qNesting: 0
     };

     return state
   }

   /**
    * Copy a node’s positional info.
    *
    * @param {Node} origin
    *   hast node to copy from.
    * @param {MdastNode} node
    *   mdast node to copy into.
    * @returns {void}
    *   Nothing.
    */
   function patch$1(origin, node) {
     if (origin.position) node.position = position(origin);
   }

   /**
    * Transform a hast node to mdast.
    *
    * @this {State}
    *   Info passed around about the current state.
    * @param {Node} node
    *   hast node to transform.
    * @param {Parent | undefined} parent
    *   Parent of `node`.
    * @returns {MdastNode | Array<MdastNode> | void}
    *   mdast result.
    */
   function one$1(node, parent) {
     if (node.type === 'element') {
       if (node.properties && node.properties.dataMdast === 'ignore') {
         return
       }

       if (own$4.call(this.handlers, node.tagName)) {
         return this.handlers[node.tagName](this, node, parent)
       }
     } else if (own$4.call(this.nodeHandlers, node.type)) {
       return this.nodeHandlers[node.type](this, node, parent)
     }

     // Unknown literal.
     if ('value' in node && typeof node.value === 'string') {
       /** @type {MdastContent} */
       const result = {type: 'text', value: node.value};
       this.patch(node, result);
       return result
     }

     // Unknown parent.
     if ('children' in node) {
       return this.all(node)
     }
   }

   /**
    * Transform the children of a hast parent to mdast.
    *
    * You might want to combine this with `toFlow` or `toSpecificContent`.
    *
    * @this {State}
    *   Info passed around about the current state.
    * @param {Parent} parent
    *   Parent.
    * @returns {Array<MdastContent>}
    *   mdast children.
    */
   function all$1(parent) {
     const children = parent.children || [];
     /** @type {Array<MdastContent>} */
     const results = [];
     let index = -1;

     while (++index < children.length) {
       const child = children[index];
       const result = this.one(child, parent);

       if (Array.isArray(result)) {
         // @ts-expect-error: assume no `root`.
         results.push(...result);
       } else if (result) {
         // @ts-expect-error: assume no `root`.
         results.push(result);
       }
     }

     let start = 0;
     let end = results.length;

     while (start < end && results[start].type === 'break') {
       start++;
     }

     while (end > start && results[end - 1].type === 'break') {
       end--;
     }

     return start === 0 && end === results.length
       ? results
       : results.slice(start, end)
   }

   /**
    * Transform a list of mdast nodes to flow.
    *
    * @this {State}
    *   Info passed around about the current state.
    * @param {Array<MdastContent>} nodes
    *   Parent.
    * @returns {Array<MdastFlowContent>}
    *   mdast flow children.
    */
   function toFlow(nodes) {
     return wrap$1(nodes)
   }

   /**
    * Turn arbitrary content into a particular node type.
    *
    * This is useful for example for lists, which must have list items as content.
    * in this example, when non-items are found, they will be queued, and
    * inserted into an adjacent item.
    * When no actual items exist, one will be made with `build`.
    *
    * @template {MdastNode} ChildType
    *   Node type of children.
    * @template {MdastParent & {'children': Array<ChildType>}} ParentType
    *   Node type of parent.
    * @param {Array<MdastContent>} nodes
    *   Nodes, which are either `ParentType`, or will be wrapped in one.
    * @param {() => ParentType} build
    *   Build a parent if needed (must have empty `children`).
    * @returns {Array<ParentType>}
    *   List of parents.
    */
   function toSpecificContent(nodes, build) {
     const reference = build();
     /** @type {Array<ParentType>} */
     const results = [];
     /** @type {Array<ChildType>} */
     let queue = [];
     let index = -1;

     while (++index < nodes.length) {
       const node = nodes[index];

       if (expectedParent(node)) {
         if (queue.length > 0) {
           node.children.unshift(...queue);
           queue = [];
         }

         results.push(node);
       } else {
         // @ts-expect-error: assume `node` can be a child of `ParentType`.
         // If we start checking nodes, we’d run into problems with unknown nodes,
         // which we do want to support.
         queue.push(node);
       }
     }

     if (queue.length > 0) {
       let node = results[results.length - 1];

       if (!node) {
         node = build();
         results.push(node);
       }

       node.children.push(...queue);
       queue = [];
     }

     return results

     /**
      * @param {MdastNode} node
      * @returns {node is ParentType}
      */
     function expectedParent(node) {
       return node.type === reference.type
     }
   }

   /**
    * @this {State}
    *   Info passed around about the current state.
    * @param {string | null | undefined} url
    *   Possible URL value.
    * @returns {string}
    *   URL, resolved to a `base` element, if any.
    */
   function resolve(url) {
     const base = this.frozenBaseUrl;

     if (url === null || url === undefined) {
       return ''
     }

     if (base) {
       return String(new URL(url, base))
     }

     return url
   }

   /**
    * @typedef {import('hast').Root} Root
    * @typedef {import('hast').Content} Content
    * @typedef {import('mdast').Root} MdastRoot
    * @typedef {import('mdast').Content} MdastContent
    * @typedef {import('./types.js').Options} Options
    */


   /**
    * Transform hast to mdast.
    *
    * @param {Node} tree
    *   hast tree to transform.
    * @param {Options | null | undefined} [options]
    *   Configuration (optional).
    * @returns {MdastNode}
    *   mdast tree.
    */
   function toMdast(tree, options) {
     // We have to clone, cause we’ll use `rehype-minify-whitespace` on the tree,
     // which modifies
     /** @type {Node} */
     const cleanTree = JSON.parse(JSON.stringify(tree));
     const options_ = options || {};
     const state = createState$1(options_);
     /** @type {MdastNode | MdastRoot} */
     let mdast;

     // @ts-expect-error: does return a transformer, that does accept any node.
     rehypeMinifyWhitespace({newlines: options_.newlines === true})(cleanTree);
     visit(cleanTree, function (node) {
       if (node && node.type === 'element' && node.properties) {
         const id = String(node.properties.id || '') || undefined;

         if (id && !state.elementById.has(id)) {
           state.elementById.set(id, node);
         }
       }
     });

     const result = state.one(cleanTree, undefined);

     if (!result) {
       mdast = {type: 'root', children: []};
     } else if (Array.isArray(result)) {
       // @ts-expect-error: assume no `root` in `children`.
       mdast = {type: 'root', children: result};
     } else {
       mdast = result;
     }

     // Collapse text nodes, and fix whitespace.
     //
     // Most of this is taken care of by `rehype-minify-whitespace`, but
     // we’re generating some whitespace too, and some nodes are in the end
     // ignored.
     // So clean up.
     visit(mdast, function (node, index, parent) {
       if (node.type === 'text' && index !== null && parent) {
         const previous = parent.children[index - 1];

         if (previous && previous.type === node.type) {
           previous.value += node.value;
           parent.children.splice(index, 1);

           if (previous.position && node.position) {
             previous.position.end = node.position.end;
           }

           // Iterate over the previous node again, to handle its total value.
           return index - 1
         }

         node.value = node.value.replace(/[\t ]*(\r?\n|\r)[\t ]*/, '$1');

         // We don’t care about other phrasing nodes in between (e.g., `[ asd ]()`),
         // as there the whitespace matters.
         if (
           parent &&
           (parent.type === 'heading' ||
             parent.type === 'paragraph' ||
             parent.type === 'root')
         ) {
           if (!index) {
             node.value = node.value.replace(/^[\t ]+/, '');
           }

           if (index === parent.children.length - 1) {
             node.value = node.value.replace(/[\t ]+$/, '');
           }
         }

         if (!node.value) {
           parent.children.splice(index, 1);
           return index
         }
       }
     });

     return mdast
   }

   /**
    * Like `Array#splice`, but smarter for giant arrays.
    *
    * `Array#splice` takes all items to be inserted as individual argument which
    * causes a stack overflow in V8 when trying to insert 100k items for instance.
    *
    * Otherwise, this does not return the removed items, and takes `items` as an
    * array instead of rest parameters.
    *
    * @template {unknown} T
    *   Item type.
    * @param {Array<T>} list
    *   List to operate on.
    * @param {number} start
    *   Index to remove/insert at (can be negative).
    * @param {number} remove
    *   Number of items to remove.
    * @param {Array<T>} items
    *   Items to inject into `list`.
    * @returns {void}
    *   Nothing.
    */
   function splice(list, start, remove, items) {
     const end = list.length;
     let chunkStart = 0;
     /** @type {Array<unknown>} */
     let parameters;

     // Make start between zero and `end` (included).
     if (start < 0) {
       start = -start > end ? 0 : end + start;
     } else {
       start = start > end ? end : start;
     }
     remove = remove > 0 ? remove : 0;

     // No need to chunk the items if there’s only a couple (10k) items.
     if (items.length < 10000) {
       parameters = Array.from(items);
       parameters.unshift(start, remove);
       // @ts-expect-error Hush, it’s fine.
       list.splice(...parameters);
     } else {
       // Delete `remove` items starting from `start`
       if (remove) list.splice(start, remove);

       // Insert the items in chunks to not cause stack overflows.
       while (chunkStart < items.length) {
         parameters = items.slice(chunkStart, chunkStart + 10000);
         parameters.unshift(start, 0);
         // @ts-expect-error Hush, it’s fine.
         list.splice(...parameters);
         chunkStart += 10000;
         start += 10000;
       }
     }
   }

   /**
    * Append `items` (an array) at the end of `list` (another array).
    * When `list` was empty, returns `items` instead.
    *
    * This prevents a potentially expensive operation when `list` is empty,
    * and adds items in batches to prevent V8 from hanging.
    *
    * @template {unknown} T
    *   Item type.
    * @param {Array<T>} list
    *   List to operate on.
    * @param {Array<T>} items
    *   Items to add to `list`.
    * @returns {Array<T>}
    *   Either `list` or `items`.
    */
   function push$1(list, items) {
     if (list.length > 0) {
       splice(list, list.length, 0, items);
       return list
     }
     return items
   }

   /**
    * @typedef {import('micromark-util-types').Extension} Extension
    * @typedef {import('micromark-util-types').Handles} Handles
    * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension
    * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension
    */


   const hasOwnProperty = {}.hasOwnProperty;

   /**
    * Combine multiple syntax extensions into one.
    *
    * @param {Array<Extension>} extensions
    *   List of syntax extensions.
    * @returns {NormalizedExtension}
    *   A single combined extension.
    */
   function combineExtensions(extensions) {
     /** @type {NormalizedExtension} */
     const all = {};
     let index = -1;

     while (++index < extensions.length) {
       syntaxExtension(all, extensions[index]);
     }

     return all
   }

   /**
    * Merge `extension` into `all`.
    *
    * @param {NormalizedExtension} all
    *   Extension to merge into.
    * @param {Extension} extension
    *   Extension to merge.
    * @returns {void}
    */
   function syntaxExtension(all, extension) {
     /** @type {keyof Extension} */
     let hook;

     for (hook in extension) {
       const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined;
       /** @type {Record<string, unknown>} */
       const left = maybe || (all[hook] = {});
       /** @type {Record<string, unknown> | undefined} */
       const right = extension[hook];
       /** @type {string} */
       let code;

       if (right) {
         for (code in right) {
           if (!hasOwnProperty.call(left, code)) left[code] = [];
           const value = right[code];
           constructs(
             // @ts-expect-error Looks like a list.
             left[code],
             Array.isArray(value) ? value : value ? [value] : []
           );
         }
       }
     }
   }

   /**
    * Merge `list` into `existing` (both lists of constructs).
    * Mutates `existing`.
    *
    * @param {Array<unknown>} existing
    * @param {Array<unknown>} list
    * @returns {void}
    */
   function constructs(existing, list) {
     let index = -1;
     /** @type {Array<unknown>} */
     const before = [];

     while (++index < list.length) {
   (list[index].add === 'after' ? existing : before).push(list[index]);
     }

     splice(existing, 0, 0, before);
   }

   // This module is generated by `script/`.
   //
   // CommonMark handles attention (emphasis, strong) markers based on what comes
   // before or after them.
   // One such difference is if those characters are Unicode punctuation.
   // This script is generated from the Unicode data.

   /**
    * Regular expression that matches a unicode punctuation character.
    */
   const unicodePunctuationRegex =
     /[!-\/:-@\[-`\{-~\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061D-\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1B7D\u1B7E\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52-\u2E5D\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]/;

   /**
    * @typedef {import('micromark-util-types').Code} Code
    */


   /**
    * Check whether the character code represents an ASCII alpha (`a` through `z`,
    * case insensitive).
    *
    * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.
    *
    * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)
    * to U+005A (`Z`).
    *
    * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)
    * to U+007A (`z`).
    *
    * @param code
    *   Code.
    * @returns
    *   Whether it matches.
    */
   const asciiAlpha = regexCheck(/[A-Za-z]/);

   /**
    * Check whether the character code represents an ASCII alphanumeric (`a`
    * through `z`, case insensitive, or `0` through `9`).
    *
    * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha
    * (see `asciiAlpha`).
    *
    * @param code
    *   Code.
    * @returns
    *   Whether it matches.
    */
   const asciiAlphanumeric = regexCheck(/[\dA-Za-z]/);

   /**
    * Check whether the character code represents an ASCII atext.
    *
    * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in
    * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),
    * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F
    * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E
    * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE
    * (`{`) to U+007E TILDE (`~`).
    *
    * See:
    * **\[RFC5322]**:
    * [Internet Message Format](https://tools.ietf.org/html/rfc5322).
    * P. Resnick.
    * IETF.
    *
    * @param code
    *   Code.
    * @returns
    *   Whether it matches.
    */
   const asciiAtext = regexCheck(/[#-'*+\--9=?A-Z^-~]/);

   /**
    * Check whether a character code is an ASCII control character.
    *
    * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)
    * to U+001F (US), or U+007F (DEL).
    *
    * @param {Code} code
    *   Code.
    * @returns {boolean}
    *   Whether it matches.
    */
   function asciiControl(code) {
     return (
       // Special whitespace codes (which have negative values), C0 and Control
       // character DEL
       code !== null && (code < 32 || code === 127)
     )
   }

   /**
    * Check whether the character code represents an ASCII digit (`0` through `9`).
    *
    * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to
    * U+0039 (`9`).
    *
    * @param code
    *   Code.
    * @returns
    *   Whether it matches.
    */
   const asciiDigit = regexCheck(/\d/);

   /**
    * Check whether the character code represents an ASCII hex digit (`a` through
    * `f`, case insensitive, or `0` through `9`).
    *
    * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex
    * digit, or an ASCII lower hex digit.
    *
    * An **ASCII upper hex digit** is a character in the inclusive range U+0041
    * (`A`) to U+0046 (`F`).
    *
    * An **ASCII lower hex digit** is a character in the inclusive range U+0061
    * (`a`) to U+0066 (`f`).
    *
    * @param code
    *   Code.
    * @returns
    *   Whether it matches.
    */
   const asciiHexDigit = regexCheck(/[\dA-Fa-f]/);

   /**
    * Check whether the character code represents ASCII punctuation.
    *
    * An **ASCII punctuation** is a character in the inclusive ranges U+0021
    * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT
    * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT
    * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).
    *
    * @param code
    *   Code.
    * @returns
    *   Whether it matches.
    */
   const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);

   /**
    * Check whether a character code is a markdown line ending.
    *
    * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN
    * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).
    *
    * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE
    * RETURN (CR) are replaced by these virtual characters depending on whether
    * they occurred together.
    *
    * @param {Code} code
    *   Code.
    * @returns {boolean}
    *   Whether it matches.
    */
   function markdownLineEnding(code) {
     return code !== null && code < -2
   }

   /**
    * Check whether a character code is a markdown line ending (see
    * `markdownLineEnding`) or markdown space (see `markdownSpace`).
    *
    * @param {Code} code
    *   Code.
    * @returns {boolean}
    *   Whether it matches.
    */
   function markdownLineEndingOrSpace(code) {
     return code !== null && (code < 0 || code === 32)
   }

   /**
    * Check whether a character code is a markdown space.
    *
    * A **markdown space** is the concrete character U+0020 SPACE (SP) and the
    * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).
    *
    * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is
    * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL
    * SPACE (VS) characters, depending on the column at which the tab occurred.
    *
    * @param {Code} code
    *   Code.
    * @returns {boolean}
    *   Whether it matches.
    */
   function markdownSpace(code) {
     return code === -2 || code === -1 || code === 32
   }

   // Size note: removing ASCII from the regex and using `asciiPunctuation` here
   // In fact adds to the bundle size.
   /**
    * Check whether the character code represents Unicode punctuation.
    *
    * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,
    * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`
    * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`
    * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII
    * punctuation (see `asciiPunctuation`).
    *
    * See:
    * **\[UNICODE]**:
    * [The Unicode Standard](https://www.unicode.org/versions/).
    * Unicode Consortium.
    *
    * @param code
    *   Code.
    * @returns
    *   Whether it matches.
    */
   const unicodePunctuation = regexCheck(unicodePunctuationRegex);

   /**
    * Check whether the character code represents Unicode whitespace.
    *
    * Note that this does handle micromark specific markdown whitespace characters.
    * See `markdownLineEndingOrSpace` to check that.
    *
    * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,
    * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),
    * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\[UNICODE]**).
    *
    * See:
    * **\[UNICODE]**:
    * [The Unicode Standard](https://www.unicode.org/versions/).
    * Unicode Consortium.
    *
    * @param code
    *   Code.
    * @returns
    *   Whether it matches.
    */
   const unicodeWhitespace = regexCheck(/\s/);

   /**
    * Create a code check from a regex.
    *
    * @param {RegExp} regex
    * @returns {(code: Code) => boolean}
    */
   function regexCheck(regex) {
     return check

     /**
      * Check whether a code matches the bound regex.
      *
      * @param {Code} code
      *   Character code.
      * @returns {boolean}
      *   Whether the character code matches the bound regex.
      */
     function check(code) {
       return code !== null && regex.test(String.fromCharCode(code))
     }
   }

   /**
    * @typedef {import('micromark-util-types').Effects} Effects
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').TokenType} TokenType
    */


   // To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.

   /**
    * Parse spaces and tabs.
    *
    * There is no `nok` parameter:
    *
    * *   spaces in markdown are often optional, in which case this factory can be
    *     used and `ok` will be switched to whether spaces were found or not
    * *   one line ending or space can be detected with `markdownSpace(code)` right
    *     before using `factorySpace`
    *
    * ###### Examples
    *
    * Where `␉` represents a tab (plus how much it expands) and `␠` represents a
    * single space.
    *
    * ```markdown
    * ␉
    * ␠␠␠␠
    * ␉␠
    * ```
    *
    * @param {Effects} effects
    *   Context.
    * @param {State} ok
    *   State switched to when successful.
    * @param {TokenType} type
    *   Type (`' \t'`).
    * @param {number | undefined} [max=Infinity]
    *   Max (exclusive).
    * @returns
    *   Start state.
    */
   function factorySpace(effects, ok, type, max) {
     const limit = max ? max - 1 : Number.POSITIVE_INFINITY;
     let size = 0;
     return start

     /** @type {State} */
     function start(code) {
       if (markdownSpace(code)) {
         effects.enter(type);
         return prefix(code)
       }
       return ok(code)
     }

     /** @type {State} */
     function prefix(code) {
       if (markdownSpace(code) && size++ < limit) {
         effects.consume(code);
         return prefix
       }
       effects.exit(type);
       return ok(code)
     }
   }

   /**
    * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
    * @typedef {import('micromark-util-types').Initializer} Initializer
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').Token} Token
    * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
    */

   /** @type {InitialConstruct} */
   const content$2 = {
     tokenize: initializeContent
   };

   /**
    * @this {TokenizeContext}
    * @type {Initializer}
    */
   function initializeContent(effects) {
     const contentStart = effects.attempt(
       this.parser.constructs.contentInitial,
       afterContentStartConstruct,
       paragraphInitial
     );
     /** @type {Token} */
     let previous;
     return contentStart

     /** @type {State} */
     function afterContentStartConstruct(code) {
       if (code === null) {
         effects.consume(code);
         return
       }
       effects.enter('lineEnding');
       effects.consume(code);
       effects.exit('lineEnding');
       return factorySpace(effects, contentStart, 'linePrefix')
     }

     /** @type {State} */
     function paragraphInitial(code) {
       effects.enter('paragraph');
       return lineStart(code)
     }

     /** @type {State} */
     function lineStart(code) {
       const token = effects.enter('chunkText', {
         contentType: 'text',
         previous
       });
       if (previous) {
         previous.next = token;
       }
       previous = token;
       return data(code)
     }

     /** @type {State} */
     function data(code) {
       if (code === null) {
         effects.exit('chunkText');
         effects.exit('paragraph');
         effects.consume(code);
         return
       }
       if (markdownLineEnding(code)) {
         effects.consume(code);
         effects.exit('chunkText');
         return lineStart
       }

       // Data.
       effects.consume(code);
       return data
     }
   }

   /**
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').ContainerState} ContainerState
    * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
    * @typedef {import('micromark-util-types').Initializer} Initializer
    * @typedef {import('micromark-util-types').Point} Point
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').Token} Token
    * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    */

   /** @type {InitialConstruct} */
   const document$2 = {
     tokenize: initializeDocument
   };

   /** @type {Construct} */
   const containerConstruct = {
     tokenize: tokenizeContainer
   };

   /**
    * @this {TokenizeContext}
    * @type {Initializer}
    */
   function initializeDocument(effects) {
     const self = this;
     /** @type {Array<StackItem>} */
     const stack = [];
     let continued = 0;
     /** @type {TokenizeContext | undefined} */
     let childFlow;
     /** @type {Token | undefined} */
     let childToken;
     /** @type {number} */
     let lineStartOffset;
     return start

     /** @type {State} */
     function start(code) {
       // First we iterate through the open blocks, starting with the root
       // document, and descending through last children down to the last open
       // block.
       // Each block imposes a condition that the line must satisfy if the block is
       // to remain open.
       // For example, a block quote requires a `>` character.
       // A paragraph requires a non-blank line.
       // In this phase we may match all or just some of the open blocks.
       // But we cannot close unmatched blocks yet, because we may have a lazy
       // continuation line.
       if (continued < stack.length) {
         const item = stack[continued];
         self.containerState = item[1];
         return effects.attempt(
           item[0].continuation,
           documentContinue,
           checkNewContainers
         )(code)
       }

       // Done.
       return checkNewContainers(code)
     }

     /** @type {State} */
     function documentContinue(code) {
       continued++;

       // Note: this field is called `_closeFlow` but it also closes containers.
       // Perhaps a good idea to rename it but it’s already used in the wild by
       // extensions.
       if (self.containerState._closeFlow) {
         self.containerState._closeFlow = undefined;
         if (childFlow) {
           closeFlow();
         }

         // Note: this algorithm for moving events around is similar to the
         // algorithm when dealing with lazy lines in `writeToChild`.
         const indexBeforeExits = self.events.length;
         let indexBeforeFlow = indexBeforeExits;
         /** @type {Point | undefined} */
         let point;

         // Find the flow chunk.
         while (indexBeforeFlow--) {
           if (
             self.events[indexBeforeFlow][0] === 'exit' &&
             self.events[indexBeforeFlow][1].type === 'chunkFlow'
           ) {
             point = self.events[indexBeforeFlow][1].end;
             break
           }
         }
         exitContainers(continued);

         // Fix positions.
         let index = indexBeforeExits;
         while (index < self.events.length) {
           self.events[index][1].end = Object.assign({}, point);
           index++;
         }

         // Inject the exits earlier (they’re still also at the end).
         splice(
           self.events,
           indexBeforeFlow + 1,
           0,
           self.events.slice(indexBeforeExits)
         );

         // Discard the duplicate exits.
         self.events.length = index;
         return checkNewContainers(code)
       }
       return start(code)
     }

     /** @type {State} */
     function checkNewContainers(code) {
       // Next, after consuming the continuation markers for existing blocks, we
       // look for new block starts (e.g. `>` for a block quote).
       // If we encounter a new block start, we close any blocks unmatched in
       // step 1 before creating the new block as a child of the last matched
       // block.
       if (continued === stack.length) {
         // No need to `check` whether there’s a container, of `exitContainers`
         // would be moot.
         // We can instead immediately `attempt` to parse one.
         if (!childFlow) {
           return documentContinued(code)
         }

         // If we have concrete content, such as block HTML or fenced code,
         // we can’t have containers “pierce” into them, so we can immediately
         // start.
         if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {
           return flowStart(code)
         }

         // If we do have flow, it could still be a blank line,
         // but we’d be interrupting it w/ a new container if there’s a current
         // construct.
         // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer
         // needed in micromark-extension-gfm-table@1.0.6).
         self.interrupt = Boolean(
           childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack
         );
       }

       // Check if there is a new container.
       self.containerState = {};
       return effects.check(
         containerConstruct,
         thereIsANewContainer,
         thereIsNoNewContainer
       )(code)
     }

     /** @type {State} */
     function thereIsANewContainer(code) {
       if (childFlow) closeFlow();
       exitContainers(continued);
       return documentContinued(code)
     }

     /** @type {State} */
     function thereIsNoNewContainer(code) {
       self.parser.lazy[self.now().line] = continued !== stack.length;
       lineStartOffset = self.now().offset;
       return flowStart(code)
     }

     /** @type {State} */
     function documentContinued(code) {
       // Try new containers.
       self.containerState = {};
       return effects.attempt(
         containerConstruct,
         containerContinue,
         flowStart
       )(code)
     }

     /** @type {State} */
     function containerContinue(code) {
       continued++;
       stack.push([self.currentConstruct, self.containerState]);
       // Try another.
       return documentContinued(code)
     }

     /** @type {State} */
     function flowStart(code) {
       if (code === null) {
         if (childFlow) closeFlow();
         exitContainers(0);
         effects.consume(code);
         return
       }
       childFlow = childFlow || self.parser.flow(self.now());
       effects.enter('chunkFlow', {
         contentType: 'flow',
         previous: childToken,
         _tokenizer: childFlow
       });
       return flowContinue(code)
     }

     /** @type {State} */
     function flowContinue(code) {
       if (code === null) {
         writeToChild(effects.exit('chunkFlow'), true);
         exitContainers(0);
         effects.consume(code);
         return
       }
       if (markdownLineEnding(code)) {
         effects.consume(code);
         writeToChild(effects.exit('chunkFlow'));
         // Get ready for the next line.
         continued = 0;
         self.interrupt = undefined;
         return start
       }
       effects.consume(code);
       return flowContinue
     }

     /**
      * @param {Token} token
      * @param {boolean | undefined} [eof]
      * @returns {void}
      */
     function writeToChild(token, eof) {
       const stream = self.sliceStream(token);
       if (eof) stream.push(null);
       token.previous = childToken;
       if (childToken) childToken.next = token;
       childToken = token;
       childFlow.defineSkip(token.start);
       childFlow.write(stream);

       // Alright, so we just added a lazy line:
       //
       // ```markdown
       // > a
       // b.
       //
       // Or:
       //
       // > ~~~c
       // d
       //
       // Or:
       //
       // > | e |
       // f
       // ```
       //
       // The construct in the second example (fenced code) does not accept lazy
       // lines, so it marked itself as done at the end of its first line, and
       // then the content construct parses `d`.
       // Most constructs in markdown match on the first line: if the first line
       // forms a construct, a non-lazy line can’t “unmake” it.
       //
       // The construct in the third example is potentially a GFM table, and
       // those are *weird*.
       // It *could* be a table, from the first line, if the following line
       // matches a condition.
       // In this case, that second line is lazy, which “unmakes” the first line
       // and turns the whole into one content block.
       //
       // We’ve now parsed the non-lazy and the lazy line, and can figure out
       // whether the lazy line started a new flow block.
       // If it did, we exit the current containers between the two flow blocks.
       if (self.parser.lazy[token.start.line]) {
         let index = childFlow.events.length;
         while (index--) {
           if (
             // The token starts before the line ending…
             childFlow.events[index][1].start.offset < lineStartOffset &&
             // …and either is not ended yet…
             (!childFlow.events[index][1].end ||
               // …or ends after it.
               childFlow.events[index][1].end.offset > lineStartOffset)
           ) {
             // Exit: there’s still something open, which means it’s a lazy line
             // part of something.
             return
           }
         }

         // Note: this algorithm for moving events around is similar to the
         // algorithm when closing flow in `documentContinue`.
         const indexBeforeExits = self.events.length;
         let indexBeforeFlow = indexBeforeExits;
         /** @type {boolean | undefined} */
         let seen;
         /** @type {Point | undefined} */
         let point;

         // Find the previous chunk (the one before the lazy line).
         while (indexBeforeFlow--) {
           if (
             self.events[indexBeforeFlow][0] === 'exit' &&
             self.events[indexBeforeFlow][1].type === 'chunkFlow'
           ) {
             if (seen) {
               point = self.events[indexBeforeFlow][1].end;
               break
             }
             seen = true;
           }
         }
         exitContainers(continued);

         // Fix positions.
         index = indexBeforeExits;
         while (index < self.events.length) {
           self.events[index][1].end = Object.assign({}, point);
           index++;
         }

         // Inject the exits earlier (they’re still also at the end).
         splice(
           self.events,
           indexBeforeFlow + 1,
           0,
           self.events.slice(indexBeforeExits)
         );

         // Discard the duplicate exits.
         self.events.length = index;
       }
     }

     /**
      * @param {number} size
      * @returns {void}
      */
     function exitContainers(size) {
       let index = stack.length;

       // Exit open containers.
       while (index-- > size) {
         const entry = stack[index];
         self.containerState = entry[1];
         entry[0].exit.call(self, effects);
       }
       stack.length = size;
     }
     function closeFlow() {
       childFlow.write([null]);
       childToken = undefined;
       childFlow = undefined;
       self.containerState._closeFlow = undefined;
     }
   }

   /**
    * @this {TokenizeContext}
    * @type {Tokenizer}
    */
   function tokenizeContainer(effects, ok, nok) {
     // Always populated by defaults.

     return factorySpace(
       effects,
       effects.attempt(this.parser.constructs.document, ok, nok),
       'linePrefix',
       this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4
     )
   }

   /**
    * @typedef {import('micromark-util-types').Code} Code
    */

   /**
    * Classify whether a code represents whitespace, punctuation, or something
    * else.
    *
    * Used for attention (emphasis, strong), whose sequences can open or close
    * based on the class of surrounding characters.
    *
    * > 👉 **Note**: eof (`null`) is seen as whitespace.
    *
    * @param {Code} code
    *   Code.
    * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}
    *   Group.
    */
   function classifyCharacter(code) {
     if (
       code === null ||
       markdownLineEndingOrSpace(code) ||
       unicodeWhitespace(code)
     ) {
       return 1
     }
     if (unicodePunctuation(code)) {
       return 2
     }
   }

   /**
    * @typedef {import('micromark-util-types').Event} Event
    * @typedef {import('micromark-util-types').Resolver} Resolver
    * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
    */

   /**
    * Call all `resolveAll`s.
    *
    * @param {Array<{resolveAll?: Resolver | undefined}>} constructs
    *   List of constructs, optionally with `resolveAll`s.
    * @param {Array<Event>} events
    *   List of events.
    * @param {TokenizeContext} context
    *   Context used by `tokenize`.
    * @returns {Array<Event>}
    *   Changed events.
    */
   function resolveAll(constructs, events, context) {
     /** @type {Array<Resolver>} */
     const called = [];
     let index = -1;

     while (++index < constructs.length) {
       const resolve = constructs[index].resolveAll;

       if (resolve && !called.includes(resolve)) {
         events = resolve(events, context);
         called.push(resolve);
       }
     }

     return events
   }

   /**
    * @typedef {import('micromark-util-types').Code} Code
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').Event} Event
    * @typedef {import('micromark-util-types').Point} Point
    * @typedef {import('micromark-util-types').Resolver} Resolver
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').Token} Token
    * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    */

   /** @type {Construct} */
   const attention$1 = {
     name: 'attention',
     tokenize: tokenizeAttention,
     resolveAll: resolveAllAttention
   };

   /**
    * Take all events and resolve attention to emphasis or strong.
    *
    * @type {Resolver}
    */
   function resolveAllAttention(events, context) {
     let index = -1;
     /** @type {number} */
     let open;
     /** @type {Token} */
     let group;
     /** @type {Token} */
     let text;
     /** @type {Token} */
     let openingSequence;
     /** @type {Token} */
     let closingSequence;
     /** @type {number} */
     let use;
     /** @type {Array<Event>} */
     let nextEvents;
     /** @type {number} */
     let offset;

     // Walk through all events.
     //
     // Note: performance of this is fine on an mb of normal markdown, but it’s
     // a bottleneck for malicious stuff.
     while (++index < events.length) {
       // Find a token that can close.
       if (
         events[index][0] === 'enter' &&
         events[index][1].type === 'attentionSequence' &&
         events[index][1]._close
       ) {
         open = index;

         // Now walk back to find an opener.
         while (open--) {
           // Find a token that can open the closer.
           if (
             events[open][0] === 'exit' &&
             events[open][1].type === 'attentionSequence' &&
             events[open][1]._open &&
             // If the markers are the same:
             context.sliceSerialize(events[open][1]).charCodeAt(0) ===
               context.sliceSerialize(events[index][1]).charCodeAt(0)
           ) {
             // If the opening can close or the closing can open,
             // and the close size *is not* a multiple of three,
             // but the sum of the opening and closing size *is* multiple of three,
             // then don’t match.
             if (
               (events[open][1]._close || events[index][1]._open) &&
               (events[index][1].end.offset - events[index][1].start.offset) % 3 &&
               !(
                 (events[open][1].end.offset -
                   events[open][1].start.offset +
                   events[index][1].end.offset -
                   events[index][1].start.offset) %
                 3
               )
             ) {
               continue
             }

             // Number of markers to use from the sequence.
             use =
               events[open][1].end.offset - events[open][1].start.offset > 1 &&
               events[index][1].end.offset - events[index][1].start.offset > 1
                 ? 2
                 : 1;
             const start = Object.assign({}, events[open][1].end);
             const end = Object.assign({}, events[index][1].start);
             movePoint(start, -use);
             movePoint(end, use);
             openingSequence = {
               type: use > 1 ? 'strongSequence' : 'emphasisSequence',
               start,
               end: Object.assign({}, events[open][1].end)
             };
             closingSequence = {
               type: use > 1 ? 'strongSequence' : 'emphasisSequence',
               start: Object.assign({}, events[index][1].start),
               end
             };
             text = {
               type: use > 1 ? 'strongText' : 'emphasisText',
               start: Object.assign({}, events[open][1].end),
               end: Object.assign({}, events[index][1].start)
             };
             group = {
               type: use > 1 ? 'strong' : 'emphasis',
               start: Object.assign({}, openingSequence.start),
               end: Object.assign({}, closingSequence.end)
             };
             events[open][1].end = Object.assign({}, openingSequence.start);
             events[index][1].start = Object.assign({}, closingSequence.end);
             nextEvents = [];

             // If there are more markers in the opening, add them before.
             if (events[open][1].end.offset - events[open][1].start.offset) {
               nextEvents = push$1(nextEvents, [
                 ['enter', events[open][1], context],
                 ['exit', events[open][1], context]
               ]);
             }

             // Opening.
             nextEvents = push$1(nextEvents, [
               ['enter', group, context],
               ['enter', openingSequence, context],
               ['exit', openingSequence, context],
               ['enter', text, context]
             ]);

             // Always populated by defaults.

             // Between.
             nextEvents = push$1(
               nextEvents,
               resolveAll(
                 context.parser.constructs.insideSpan.null,
                 events.slice(open + 1, index),
                 context
               )
             );

             // Closing.
             nextEvents = push$1(nextEvents, [
               ['exit', text, context],
               ['enter', closingSequence, context],
               ['exit', closingSequence, context],
               ['exit', group, context]
             ]);

             // If there are more markers in the closing, add them after.
             if (events[index][1].end.offset - events[index][1].start.offset) {
               offset = 2;
               nextEvents = push$1(nextEvents, [
                 ['enter', events[index][1], context],
                 ['exit', events[index][1], context]
               ]);
             } else {
               offset = 0;
             }
             splice(events, open - 1, index - open + 3, nextEvents);
             index = open + nextEvents.length - offset - 2;
             break
           }
         }
       }
     }

     // Remove remaining sequences.
     index = -1;
     while (++index < events.length) {
       if (events[index][1].type === 'attentionSequence') {
         events[index][1].type = 'data';
       }
     }
     return events
   }

   /**
    * @this {TokenizeContext}
    * @type {Tokenizer}
    */
   function tokenizeAttention(effects, ok) {
     const attentionMarkers = this.parser.constructs.attentionMarkers.null;
     const previous = this.previous;
     const before = classifyCharacter(previous);

     /** @type {NonNullable<Code>} */
     let marker;
     return start

     /**
      * Before a sequence.
      *
      * ```markdown
      * > | **
      *     ^
      * ```
      *
      * @type {State}
      */
     function start(code) {
       marker = code;
       effects.enter('attentionSequence');
       return inside(code)
     }

     /**
      * In a sequence.
      *
      * ```markdown
      * > | **
      *     ^^
      * ```
      *
      * @type {State}
      */
     function inside(code) {
       if (code === marker) {
         effects.consume(code);
         return inside
       }
       const token = effects.exit('attentionSequence');

       // To do: next major: move this to resolver, just like `markdown-rs`.
       const after = classifyCharacter(code);

       // Always populated by defaults.

       const open =
         !after || (after === 2 && before) || attentionMarkers.includes(code);
       const close =
         !before || (before === 2 && after) || attentionMarkers.includes(previous);
       token._open = Boolean(marker === 42 ? open : open && (before || !close));
       token._close = Boolean(marker === 42 ? close : close && (after || !open));
       return ok(code)
     }
   }

   /**
    * Move a point a bit.
    *
    * Note: `move` only works inside lines! It’s not possible to move past other
    * chunks (replacement characters, tabs, or line endings).
    *
    * @param {Point} point
    * @param {number} offset
    * @returns {void}
    */
   function movePoint(point, offset) {
     point.column += offset;
     point.offset += offset;
     point._bufferIndex += offset;
   }

   /**
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    */

   /** @type {Construct} */
   const autolink = {
     name: 'autolink',
     tokenize: tokenizeAutolink
   };

   /**
    * @this {TokenizeContext}
    * @type {Tokenizer}
    */
   function tokenizeAutolink(effects, ok, nok) {
     let size = 0;
     return start

     /**
      * Start of an autolink.
      *
      * ```markdown
      * > | a<https://example.com>b
      *      ^
      * > | a<user@example.com>b
      *      ^
      * ```
      *
      * @type {State}
      */
     function start(code) {
       effects.enter('autolink');
       effects.enter('autolinkMarker');
       effects.consume(code);
       effects.exit('autolinkMarker');
       effects.enter('autolinkProtocol');
       return open
     }

     /**
      * After `<`, at protocol or atext.
      *
      * ```markdown
      * > | a<https://example.com>b
      *       ^
      * > | a<user@example.com>b
      *       ^
      * ```
      *
      * @type {State}
      */
     function open(code) {
       if (asciiAlpha(code)) {
         effects.consume(code);
         return schemeOrEmailAtext
       }
       return emailAtext(code)
     }

     /**
      * At second byte of protocol or atext.
      *
      * ```markdown
      * > | a<https://example.com>b
      *        ^
      * > | a<user@example.com>b
      *        ^
      * ```
      *
      * @type {State}
      */
     function schemeOrEmailAtext(code) {
       // ASCII alphanumeric and `+`, `-`, and `.`.
       if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {
         // Count the previous alphabetical from `open` too.
         size = 1;
         return schemeInsideOrEmailAtext(code)
       }
       return emailAtext(code)
     }

     /**
      * In ambiguous protocol or atext.
      *
      * ```markdown
      * > | a<https://example.com>b
      *        ^
      * > | a<user@example.com>b
      *        ^
      * ```
      *
      * @type {State}
      */
     function schemeInsideOrEmailAtext(code) {
       if (code === 58) {
         effects.consume(code);
         size = 0;
         return urlInside
       }

       // ASCII alphanumeric and `+`, `-`, and `.`.
       if (
         (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&
         size++ < 32
       ) {
         effects.consume(code);
         return schemeInsideOrEmailAtext
       }
       size = 0;
       return emailAtext(code)
     }

     /**
      * After protocol, in URL.
      *
      * ```markdown
      * > | a<https://example.com>b
      *             ^
      * ```
      *
      * @type {State}
      */
     function urlInside(code) {
       if (code === 62) {
         effects.exit('autolinkProtocol');
         effects.enter('autolinkMarker');
         effects.consume(code);
         effects.exit('autolinkMarker');
         effects.exit('autolink');
         return ok
       }

       // ASCII control, space, or `<`.
       if (code === null || code === 32 || code === 60 || asciiControl(code)) {
         return nok(code)
       }
       effects.consume(code);
       return urlInside
     }

     /**
      * In email atext.
      *
      * ```markdown
      * > | a<user.name@example.com>b
      *              ^
      * ```
      *
      * @type {State}
      */
     function emailAtext(code) {
       if (code === 64) {
         effects.consume(code);
         return emailAtSignOrDot
       }
       if (asciiAtext(code)) {
         effects.consume(code);
         return emailAtext
       }
       return nok(code)
     }

     /**
      * In label, after at-sign or dot.
      *
      * ```markdown
      * > | a<user.name@example.com>b
      *                 ^       ^
      * ```
      *
      * @type {State}
      */
     function emailAtSignOrDot(code) {
       return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)
     }

     /**
      * In label, where `.` and `>` are allowed.
      *
      * ```markdown
      * > | a<user.name@example.com>b
      *                   ^
      * ```
      *
      * @type {State}
      */
     function emailLabel(code) {
       if (code === 46) {
         effects.consume(code);
         size = 0;
         return emailAtSignOrDot
       }
       if (code === 62) {
         // Exit, then change the token type.
         effects.exit('autolinkProtocol').type = 'autolinkEmail';
         effects.enter('autolinkMarker');
         effects.consume(code);
         effects.exit('autolinkMarker');
         effects.exit('autolink');
         return ok
       }
       return emailValue(code)
     }

     /**
      * In label, where `.` and `>` are *not* allowed.
      *
      * Though, this is also used in `emailLabel` to parse other values.
      *
      * ```markdown
      * > | a<user.name@ex-ample.com>b
      *                    ^
      * ```
      *
      * @type {State}
      */
     function emailValue(code) {
       // ASCII alphanumeric or `-`.
       if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {
         const next = code === 45 ? emailValue : emailLabel;
         effects.consume(code);
         return next
       }
       return nok(code)
     }
   }

   /**
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    */

   /** @type {Construct} */
   const blankLine$1 = {
     tokenize: tokenizeBlankLine,
     partial: true
   };

   /**
    * @this {TokenizeContext}
    * @type {Tokenizer}
    */
   function tokenizeBlankLine(effects, ok, nok) {
     return start

     /**
      * Start of blank line.
      *
      * > 👉 **Note**: `␠` represents a space character.
      *
      * ```markdown
      * > | ␠␠␊
      *     ^
      * > | ␊
      *     ^
      * ```
      *
      * @type {State}
      */
     function start(code) {
       return markdownSpace(code)
         ? factorySpace(effects, after, 'linePrefix')(code)
         : after(code)
     }

     /**
      * At eof/eol, after optional whitespace.
      *
      * > 👉 **Note**: `␠` represents a space character.
      *
      * ```markdown
      * > | ␠␠␊
      *       ^
      * > | ␊
      *     ^
      * ```
      *
      * @type {State}
      */
     function after(code) {
       return code === null || markdownLineEnding(code) ? ok(code) : nok(code)
     }
   }

   /**
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').Exiter} Exiter
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    */

   /** @type {Construct} */
   const blockQuote = {
     name: 'blockQuote',
     tokenize: tokenizeBlockQuoteStart,
     continuation: {
       tokenize: tokenizeBlockQuoteContinuation
     },
     exit: exit$2
   };

   /**
    * @this {TokenizeContext}
    * @type {Tokenizer}
    */
   function tokenizeBlockQuoteStart(effects, ok, nok) {
     const self = this;
     return start

     /**
      * Start of block quote.
      *
      * ```markdown
      * > | > a
      *     ^
      * ```
      *
      * @type {State}
      */
     function start(code) {
       if (code === 62) {
         const state = self.containerState;
         if (!state.open) {
           effects.enter('blockQuote', {
             _container: true
           });
           state.open = true;
         }
         effects.enter('blockQuotePrefix');
         effects.enter('blockQuoteMarker');
         effects.consume(code);
         effects.exit('blockQuoteMarker');
         return after
       }
       return nok(code)
     }

     /**
      * After `>`, before optional whitespace.
      *
      * ```markdown
      * > | > a
      *      ^
      * ```
      *
      * @type {State}
      */
     function after(code) {
       if (markdownSpace(code)) {
         effects.enter('blockQuotePrefixWhitespace');
         effects.consume(code);
         effects.exit('blockQuotePrefixWhitespace');
         effects.exit('blockQuotePrefix');
         return ok
       }
       effects.exit('blockQuotePrefix');
       return ok(code)
     }
   }

   /**
    * Start of block quote continuation.
    *
    * ```markdown
    *   | > a
    * > | > b
    *     ^
    * ```
    *
    * @this {TokenizeContext}
    * @type {Tokenizer}
    */
   function tokenizeBlockQuoteContinuation(effects, ok, nok) {
     const self = this;
     return contStart

     /**
      * Start of block quote continuation.
      *
      * Also used to parse the first block quote opening.
      *
      * ```markdown
      *   | > a
      * > | > b
      *     ^
      * ```
      *
      * @type {State}
      */
     function contStart(code) {
       if (markdownSpace(code)) {
         // Always populated by defaults.

         return factorySpace(
           effects,
           contBefore,
           'linePrefix',
           self.parser.constructs.disable.null.includes('codeIndented')
             ? undefined
             : 4
         )(code)
       }
       return contBefore(code)
     }

     /**
      * At `>`, after optional whitespace.
      *
      * Also used to parse the first block quote opening.
      *
      * ```markdown
      *   | > a
      * > | > b
      *     ^
      * ```
      *
      * @type {State}
      */
     function contBefore(code) {
       return effects.attempt(blockQuote, ok, nok)(code)
     }
   }

   /** @type {Exiter} */
   function exit$2(effects) {
     effects.exit('blockQuote');
   }

   /**
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    */

   /** @type {Construct} */
   const characterEscape = {
     name: 'characterEscape',
     tokenize: tokenizeCharacterEscape
   };

   /**
    * @this {TokenizeContext}
    * @type {Tokenizer}
    */
   function tokenizeCharacterEscape(effects, ok, nok) {
     return start

     /**
      * Start of character escape.
      *
      * ```markdown
      * > | a\*b
      *      ^
      * ```
      *
      * @type {State}
      */
     function start(code) {
       effects.enter('characterEscape');
       effects.enter('escapeMarker');
       effects.consume(code);
       effects.exit('escapeMarker');
       return inside
     }

     /**
      * After `\`, at punctuation.
      *
      * ```markdown
      * > | a\*b
      *       ^
      * ```
      *
      * @type {State}
      */
     function inside(code) {
       // ASCII punctuation.
       if (asciiPunctuation(code)) {
         effects.enter('characterEscapeValue');
         effects.consume(code);
         effects.exit('characterEscapeValue');
         effects.exit('characterEscape');
         return ok
       }
       return nok(code)
     }
   }

   /// <reference lib="dom" />

   /* eslint-env browser */

   const element$1 = document.createElement('i');

   /**
    * @param {string} value
    * @returns {string|false}
    */
   function decodeNamedCharacterReference(value) {
     const characterReference = '&' + value + ';';
     element$1.innerHTML = characterReference;
     const char = element$1.textContent;

     // Some named character references do not require the closing semicolon
     // (`&not`, for instance), which leads to situations where parsing the assumed
     // named reference of `&notit;` will result in the string `¬it;`.
     // When we encounter a trailing semicolon after parsing, and the character
     // reference to decode was not a semicolon (`&semi;`), we can assume that the
     // matching was not complete.
     // @ts-expect-error: TypeScript is wrong that `textContent` on elements can
     // yield `null`.
     if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {
       return false
     }

     // If the decoded string is equal to the input, the character reference was
     // not valid.
     // @ts-expect-error: TypeScript is wrong that `textContent` on elements can
     // yield `null`.
     return char === characterReference ? false : char
   }

   /**
    * @typedef {import('micromark-util-types').Code} Code
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    */

   /** @type {Construct} */
   const characterReference = {
     name: 'characterReference',
     tokenize: tokenizeCharacterReference
   };

   /**
    * @this {TokenizeContext}
    * @type {Tokenizer}
    */
   function tokenizeCharacterReference(effects, ok, nok) {
     const self = this;
     let size = 0;
     /** @type {number} */
     let max;
     /** @type {(code: Code) => boolean} */
     let test;
     return start

     /**
      * Start of character reference.
      *
      * ```markdown
      * > | a&amp;b
      *      ^
      * > | a&#123;b
      *      ^
      * > | a&#x9;b
      *      ^
      * ```
      *
      * @type {State}
      */
     function start(code) {
       effects.enter('characterReference');
       effects.enter('characterReferenceMarker');
       effects.consume(code);
       effects.exit('characterReferenceMarker');
       return open
     }

     /**
      * After `&`, at `#` for numeric references or alphanumeric for named
      * references.
      *
      * ```markdown
      * > | a&amp;b
      *       ^
      * > | a&#123;b
      *       ^
      * > | a&#x9;b
      *       ^
      * ```
      *
      * @type {State}
      */
     function open(code) {
       if (code === 35) {
         effects.enter('characterReferenceMarkerNumeric');
         effects.consume(code);
         effects.exit('characterReferenceMarkerNumeric');
         return numeric
       }
       effects.enter('characterReferenceValue');
       max = 31;
       test = asciiAlphanumeric;
       return value(code)
     }

     /**
      * After `#`, at `x` for hexadecimals or digit for decimals.
      *
      * ```markdown
      * > | a&#123;b
      *        ^
      * > | a&#x9;b
      *        ^
      * ```
      *
      * @type {State}
      */
     function numeric(code) {
       if (code === 88 || code === 120) {
         effects.enter('characterReferenceMarkerHexadecimal');
         effects.consume(code);
         effects.exit('characterReferenceMarkerHexadecimal');
         effects.enter('characterReferenceValue');
         max = 6;
         test = asciiHexDigit;
         return value
       }
       effects.enter('characterReferenceValue');
       max = 7;
       test = asciiDigit;
       return value(code)
     }

     /**
      * After markers (`&#x`, `&#`, or `&`), in value, before `;`.
      *
      * The character reference kind defines what and how many characters are
      * allowed.
      *
      * ```markdown
      * > | a&amp;b
      *       ^^^
      * > | a&#123;b
      *        ^^^
      * > | a&#x9;b
      *         ^
      * ```
      *
      * @type {State}
      */
     function value(code) {
       if (code === 59 && size) {
         const token = effects.exit('characterReferenceValue');
         if (
           test === asciiAlphanumeric &&
           !decodeNamedCharacterReference(self.sliceSerialize(token))
         ) {
           return nok(code)
         }

         // To do: `markdown-rs` uses a different name:
         // `CharacterReferenceMarkerSemi`.
         effects.enter('characterReferenceMarker');
         effects.consume(code);
         effects.exit('characterReferenceMarker');
         effects.exit('characterReference');
         return ok
       }
       if (test(code) && size++ < max) {
         effects.consume(code);
         return value
       }
       return nok(code)
     }
   }

   /**
    * @typedef {import('micromark-util-types').Code} Code
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    */

   /** @type {Construct} */
   const nonLazyContinuation = {
     tokenize: tokenizeNonLazyContinuation,
     partial: true
   };

   /** @type {Construct} */
   const codeFenced = {
     name: 'codeFenced',
     tokenize: tokenizeCodeFenced,
     concrete: true
   };

   /**
    * @this {TokenizeContext}
    * @type {Tokenizer}
    */
   function tokenizeCodeFenced(effects, ok, nok) {
     const self = this;
     /** @type {Construct} */
     const closeStart = {
       tokenize: tokenizeCloseStart,
       partial: true
     };
     let initialPrefix = 0;
     let sizeOpen = 0;
     /** @type {NonNullable<Code>} */
     let marker;
     return start

     /**
      * Start of code.
      *
      * ```markdown
      * > | ~~~js
      *     ^
      *   | alert(1)
      *   | ~~~
      * ```
      *
      * @type {State}
      */
     function start(code) {
       // To do: parse whitespace like `markdown-rs`.
       return beforeSequenceOpen(code)
     }

     /**
      * In opening fence, after prefix, at sequence.
      *
      * ```markdown
      * > | ~~~js
      *     ^
      *   | alert(1)
      *   | ~~~
      * ```
      *
      * @type {State}
      */
     function beforeSequenceOpen(code) {
       const tail = self.events[self.events.length - 1];
       initialPrefix =
         tail && tail[1].type === 'linePrefix'
           ? tail[2].sliceSerialize(tail[1], true).length
           : 0;
       marker = code;
       effects.enter('codeFenced');
       effects.enter('codeFencedFence');
       effects.enter('codeFencedFenceSequence');
       return sequenceOpen(code)
     }

     /**
      * In opening fence sequence.
      *
      * ```markdown
      * > | ~~~js
      *      ^
      *   | alert(1)
      *   | ~~~
      * ```
      *
      * @type {State}
      */
     function sequenceOpen(code) {
       if (code === marker) {
         sizeOpen++;
         effects.consume(code);
         return sequenceOpen
       }
       if (sizeOpen < 3) {
         return nok(code)
       }
       effects.exit('codeFencedFenceSequence');
       return markdownSpace(code)
         ? factorySpace(effects, infoBefore, 'whitespace')(code)
         : infoBefore(code)
     }

     /**
      * In opening fence, after the sequence (and optional whitespace), before info.
      *
      * ```markdown
      * > | ~~~js
      *        ^
      *   | alert(1)
      *   | ~~~
      * ```
      *
      * @type {State}
      */
     function infoBefore(code) {
       if (code === null || markdownLineEnding(code)) {
         effects.exit('codeFencedFence');
         return self.interrupt
           ? ok(code)
           : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)
       }
       effects.enter('codeFencedFenceInfo');
       effects.enter('chunkString', {
         contentType: 'string'
       });
       return info(code)
     }

     /**
      * In info.
      *
      * ```markdown
      * > | ~~~js
      *        ^
      *   | alert(1)
      *   | ~~~
      * ```
      *
      * @type {State}
      */
     function info(code) {
       if (code === null || markdownLineEnding(code)) {
         effects.exit('chunkString');
         effects.exit('codeFencedFenceInfo');
         return infoBefore(code)
       }
       if (markdownSpace(code)) {
         effects.exit('chunkString');
         effects.exit('codeFencedFenceInfo');
         return factorySpace(effects, metaBefore, 'whitespace')(code)
       }
       if (code === 96 && code === marker) {
         return nok(code)
       }
       effects.consume(code);
       return info
     }

     /**
      * In opening fence, after info and whitespace, before meta.
      *
      * ```markdown
      * > | ~~~js eval
      *           ^
      *   | alert(1)
      *   | ~~~
      * ```
      *
      * @type {State}
      */
     function metaBefore(code) {
       if (code === null || markdownLineEnding(code)) {
         return infoBefore(code)
       }
       effects.enter('codeFencedFenceMeta');
       effects.enter('chunkString', {
         contentType: 'string'
       });
       return meta(code)
     }

     /**
      * In meta.
      *
      * ```markdown
      * > | ~~~js eval
      *           ^
      *   | alert(1)
      *   | ~~~
      * ```
      *
      * @type {State}
      */
     function meta(code) {
       if (code === null || markdownLineEnding(code)) {
         effects.exit('chunkString');
         effects.exit('codeFencedFenceMeta');
         return infoBefore(code)
       }
       if (code === 96 && code === marker) {
         return nok(code)
       }
       effects.consume(code);
       return meta
     }

     /**
      * At eol/eof in code, before a non-lazy closing fence or content.
      *
      * ```markdown
      * > | ~~~js
      *          ^
      * > | alert(1)
      *             ^
      *   | ~~~
      * ```
      *
      * @type {State}
      */
     function atNonLazyBreak(code) {
       return effects.attempt(closeStart, after, contentBefore)(code)
     }

     /**
      * Before code content, not a closing fence, at eol.
      *
      * ```markdown
      *   | ~~~js
      * > | alert(1)
      *             ^
      *   | ~~~
      * ```
      *
      * @type {State}
      */
     function contentBefore(code) {
       effects.enter('lineEnding');
       effects.consume(code);
       effects.exit('lineEnding');
       return contentStart
     }

     /**
      * Before code content, not a closing fence.
      *
      * ```markdown
      *   | ~~~js
      * > | alert(1)
      *     ^
      *   | ~~~
      * ```
      *
      * @type {State}
      */
     function contentStart(code) {
       return initialPrefix > 0 && markdownSpace(code)
         ? factorySpace(
             effects,
             beforeContentChunk,
             'linePrefix',
             initialPrefix + 1
           )(code)
         : beforeContentChunk(code)
     }

     /**
      * Before code content, after optional prefix.
      *
      * ```markdown
      *   | ~~~js
      * > | alert(1)
      *     ^
      *   | ~~~
      * ```
      *
      * @type {State}
      */
     function beforeContentChunk(code) {
       if (code === null || markdownLineEnding(code)) {
         return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)
       }
       effects.enter('codeFlowValue');
       return contentChunk(code)
     }

     /**
      * In code content.
      *
      * ```markdown
      *   | ~~~js
      * > | alert(1)
      *     ^^^^^^^^
      *   | ~~~
      * ```
      *
      * @type {State}
      */
     function contentChunk(code) {
       if (code === null || markdownLineEnding(code)) {
         effects.exit('codeFlowValue');
         return beforeContentChunk(code)
       }
       effects.consume(code);
       return contentChunk
     }

     /**
      * After code.
      *
      * ```markdown
      *   | ~~~js
      *   | alert(1)
      * > | ~~~
      *        ^
      * ```
      *
      * @type {State}
      */
     function after(code) {
       effects.exit('codeFenced');
       return ok(code)
     }

     /**
      * @this {TokenizeContext}
      * @type {Tokenizer}
      */
     function tokenizeCloseStart(effects, ok, nok) {
       let size = 0;
       return startBefore

       /**
        *
        *
        * @type {State}
        */
       function startBefore(code) {
         effects.enter('lineEnding');
         effects.consume(code);
         effects.exit('lineEnding');
         return start
       }

       /**
        * Before closing fence, at optional whitespace.
        *
        * ```markdown
        *   | ~~~js
        *   | alert(1)
        * > | ~~~
        *     ^
        * ```
        *
        * @type {State}
        */
       function start(code) {
         // Always populated by defaults.

         // To do: `enter` here or in next state?
         effects.enter('codeFencedFence');
         return markdownSpace(code)
           ? factorySpace(
               effects,
               beforeSequenceClose,
               'linePrefix',
               self.parser.constructs.disable.null.includes('codeIndented')
                 ? undefined
                 : 4
             )(code)
           : beforeSequenceClose(code)
       }

       /**
        * In closing fence, after optional whitespace, at sequence.
        *
        * ```markdown
        *   | ~~~js
        *   | alert(1)
        * > | ~~~
        *     ^
        * ```
        *
        * @type {State}
        */
       function beforeSequenceClose(code) {
         if (code === marker) {
           effects.enter('codeFencedFenceSequence');
           return sequenceClose(code)
         }
         return nok(code)
       }

       /**
        * In closing fence sequence.
        *
        * ```markdown
        *   | ~~~js
        *   | alert(1)
        * > | ~~~
        *     ^
        * ```
        *
        * @type {State}
        */
       function sequenceClose(code) {
         if (code === marker) {
           size++;
           effects.consume(code);
           return sequenceClose
         }
         if (size >= sizeOpen) {
           effects.exit('codeFencedFenceSequence');
           return markdownSpace(code)
             ? factorySpace(effects, sequenceCloseAfter, 'whitespace')(code)
             : sequenceCloseAfter(code)
         }
         return nok(code)
       }

       /**
        * After closing fence sequence, after optional whitespace.
        *
        * ```markdown
        *   | ~~~js
        *   | alert(1)
        * > | ~~~
        *        ^
        * ```
        *
        * @type {State}
        */
       function sequenceCloseAfter(code) {
         if (code === null || markdownLineEnding(code)) {
           effects.exit('codeFencedFence');
           return ok(code)
         }
         return nok(code)
       }
     }
   }

   /**
    * @this {TokenizeContext}
    * @type {Tokenizer}
    */
   function tokenizeNonLazyContinuation(effects, ok, nok) {
     const self = this;
     return start

     /**
      *
      *
      * @type {State}
      */
     function start(code) {
       if (code === null) {
         return nok(code)
       }
       effects.enter('lineEnding');
       effects.consume(code);
       effects.exit('lineEnding');
       return lineStart
     }

     /**
      *
      *
      * @type {State}
      */
     function lineStart(code) {
       return self.parser.lazy[self.now().line] ? nok(code) : ok(code)
     }
   }

   /**
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    */

   /** @type {Construct} */
   const codeIndented = {
     name: 'codeIndented',
     tokenize: tokenizeCodeIndented
   };

   /** @type {Construct} */
   const furtherStart = {
     tokenize: tokenizeFurtherStart,
     partial: true
   };

   /**
    * @this {TokenizeContext}
    * @type {Tokenizer}
    */
   function tokenizeCodeIndented(effects, ok, nok) {
     const self = this;
     return start

     /**
      * Start of code (indented).
      *
      * > **Parsing note**: it is not needed to check if this first line is a
      * > filled line (that it has a non-whitespace character), because blank lines
      * > are parsed already, so we never run into that.
      *
      * ```markdown
      * > |     aaa
      *     ^
      * ```
      *
      * @type {State}
      */
     function start(code) {
       // To do: manually check if interrupting like `markdown-rs`.

       effects.enter('codeIndented');
       // To do: use an improved `space_or_tab` function like `markdown-rs`,
       // so that we can drop the next state.
       return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)
     }

     /**
      * At start, after 1 or 4 spaces.
      *
      * ```markdown
      * > |     aaa
      *         ^
      * ```
      *
      * @type {State}
      */
     function afterPrefix(code) {
       const tail = self.events[self.events.length - 1];
       return tail &&
         tail[1].type === 'linePrefix' &&
         tail[2].sliceSerialize(tail[1], true).length >= 4
         ? atBreak(code)
         : nok(code)
     }

     /**
      * At a break.
      *
      * ```markdown
      * > |     aaa
      *         ^  ^
      * ```
      *
      * @type {State}
      */
     function atBreak(code) {
       if (code === null) {
         return after(code)
       }
       if (markdownLineEnding(code)) {
         return effects.attempt(furtherStart, atBreak, after)(code)
       }
       effects.enter('codeFlowValue');
       return inside(code)
     }

     /**
      * In code content.
      *
      * ```markdown
      * > |     aaa
      *         ^^^^
      * ```
      *
      * @type {State}
      */
     function inside(code) {
       if (code === null || markdownLineEnding(code)) {
         effects.exit('codeFlowValue');
         return atBreak(code)
       }
       effects.consume(code);
       return inside
     }

     /** @type {State} */
     function after(code) {
       effects.exit('codeIndented');
       // To do: allow interrupting like `markdown-rs`.
       // Feel free to interrupt.
       // tokenizer.interrupt = false
       return ok(code)
     }
   }

   /**
    * @this {TokenizeContext}
    * @type {Tokenizer}
    */
   function tokenizeFurtherStart(effects, ok, nok) {
     const self = this;
     return furtherStart

     /**
      * At eol, trying to parse another indent.
      *
      * ```markdown
      * > |     aaa
      *            ^
      *   |     bbb
      * ```
      *
      * @type {State}
      */
     function furtherStart(code) {
       // To do: improve `lazy` / `pierce` handling.
       // If this is a lazy line, it can’t be code.
       if (self.parser.lazy[self.now().line]) {
         return nok(code)
       }
       if (markdownLineEnding(code)) {
         effects.enter('lineEnding');
         effects.consume(code);
         effects.exit('lineEnding');
         return furtherStart
       }

       // To do: the code here in `micromark-js` is a bit different from
       // `markdown-rs` because there it can attempt spaces.
       // We can’t yet.
       //
       // To do: use an improved `space_or_tab` function like `markdown-rs`,
       // so that we can drop the next state.
       return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)
     }

     /**
      * At start, after 1 or 4 spaces.
      *
      * ```markdown
      * > |     aaa
      *         ^
      * ```
      *
      * @type {State}
      */
     function afterPrefix(code) {
       const tail = self.events[self.events.length - 1];
       return tail &&
         tail[1].type === 'linePrefix' &&
         tail[2].sliceSerialize(tail[1], true).length >= 4
         ? ok(code)
         : markdownLineEnding(code)
         ? furtherStart(code)
         : nok(code)
     }
   }

   /**
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').Previous} Previous
    * @typedef {import('micromark-util-types').Resolver} Resolver
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').Token} Token
    * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    */

   /** @type {Construct} */
   const codeText = {
     name: 'codeText',
     tokenize: tokenizeCodeText,
     resolve: resolveCodeText,
     previous: previous$1
   };

   // To do: next major: don’t resolve, like `markdown-rs`.
   /** @type {Resolver} */
   function resolveCodeText(events) {
     let tailExitIndex = events.length - 4;
     let headEnterIndex = 3;
     /** @type {number} */
     let index;
     /** @type {number | undefined} */
     let enter;

     // If we start and end with an EOL or a space.
     if (
       (events[headEnterIndex][1].type === 'lineEnding' ||
         events[headEnterIndex][1].type === 'space') &&
       (events[tailExitIndex][1].type === 'lineEnding' ||
         events[tailExitIndex][1].type === 'space')
     ) {
       index = headEnterIndex;

       // And we have data.
       while (++index < tailExitIndex) {
         if (events[index][1].type === 'codeTextData') {
           // Then we have padding.
           events[headEnterIndex][1].type = 'codeTextPadding';
           events[tailExitIndex][1].type = 'codeTextPadding';
           headEnterIndex += 2;
           tailExitIndex -= 2;
           break
         }
       }
     }

     // Merge adjacent spaces and data.
     index = headEnterIndex - 1;
     tailExitIndex++;
     while (++index <= tailExitIndex) {
       if (enter === undefined) {
         if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {
           enter = index;
         }
       } else if (
         index === tailExitIndex ||
         events[index][1].type === 'lineEnding'
       ) {
         events[enter][1].type = 'codeTextData';
         if (index !== enter + 2) {
           events[enter][1].end = events[index - 1][1].end;
           events.splice(enter + 2, index - enter - 2);
           tailExitIndex -= index - enter - 2;
           index = enter + 2;
         }
         enter = undefined;
       }
     }
     return events
   }

   /**
    * @this {TokenizeContext}
    * @type {Previous}
    */
   function previous$1(code) {
     // If there is a previous code, there will always be a tail.
     return (
       code !== 96 ||
       this.events[this.events.length - 1][1].type === 'characterEscape'
     )
   }

   /**
    * @this {TokenizeContext}
    * @type {Tokenizer}
    */
   function tokenizeCodeText(effects, ok, nok) {
     let sizeOpen = 0;
     /** @type {number} */
     let size;
     /** @type {Token} */
     let token;
     return start

     /**
      * Start of code (text).
      *
      * ```markdown
      * > | `a`
      *     ^
      * > | \`a`
      *      ^
      * ```
      *
      * @type {State}
      */
     function start(code) {
       effects.enter('codeText');
       effects.enter('codeTextSequence');
       return sequenceOpen(code)
     }

     /**
      * In opening sequence.
      *
      * ```markdown
      * > | `a`
      *     ^
      * ```
      *
      * @type {State}
      */
     function sequenceOpen(code) {
       if (code === 96) {
         effects.consume(code);
         sizeOpen++;
         return sequenceOpen
       }
       effects.exit('codeTextSequence');
       return between(code)
     }

     /**
      * Between something and something else.
      *
      * ```markdown
      * > | `a`
      *      ^^
      * ```
      *
      * @type {State}
      */
     function between(code) {
       // EOF.
       if (code === null) {
         return nok(code)
       }

       // To do: next major: don’t do spaces in resolve, but when compiling,
       // like `markdown-rs`.
       // Tabs don’t work, and virtual spaces don’t make sense.
       if (code === 32) {
         effects.enter('space');
         effects.consume(code);
         effects.exit('space');
         return between
       }

       // Closing fence? Could also be data.
       if (code === 96) {
         token = effects.enter('codeTextSequence');
         size = 0;
         return sequenceClose(code)
       }
       if (markdownLineEnding(code)) {
         effects.enter('lineEnding');
         effects.consume(code);
         effects.exit('lineEnding');
         return between
       }

       // Data.
       effects.enter('codeTextData');
       return data(code)
     }

     /**
      * In data.
      *
      * ```markdown
      * > | `a`
      *      ^
      * ```
      *
      * @type {State}
      */
     function data(code) {
       if (
         code === null ||
         code === 32 ||
         code === 96 ||
         markdownLineEnding(code)
       ) {
         effects.exit('codeTextData');
         return between(code)
       }
       effects.consume(code);
       return data
     }

     /**
      * In closing sequence.
      *
      * ```markdown
      * > | `a`
      *       ^
      * ```
      *
      * @type {State}
      */
     function sequenceClose(code) {
       // More.
       if (code === 96) {
         effects.consume(code);
         size++;
         return sequenceClose
       }

       // Done!
       if (size === sizeOpen) {
         effects.exit('codeTextSequence');
         effects.exit('codeText');
         return ok(code)
       }

       // More or less accents: mark as data.
       token.type = 'codeTextData';
       return data(code)
     }
   }

   /**
    * @typedef {import('micromark-util-types').Chunk} Chunk
    * @typedef {import('micromark-util-types').Event} Event
    * @typedef {import('micromark-util-types').Token} Token
    */

   /**
    * Tokenize subcontent.
    *
    * @param {Array<Event>} events
    *   List of events.
    * @returns {boolean}
    *   Whether subtokens were found.
    */
   function subtokenize(events) {
     /** @type {Record<string, number>} */
     const jumps = {};
     let index = -1;
     /** @type {Event} */
     let event;
     /** @type {number | undefined} */
     let lineIndex;
     /** @type {number} */
     let otherIndex;
     /** @type {Event} */
     let otherEvent;
     /** @type {Array<Event>} */
     let parameters;
     /** @type {Array<Event>} */
     let subevents;
     /** @type {boolean | undefined} */
     let more;
     while (++index < events.length) {
       while (index in jumps) {
         index = jumps[index];
       }
       event = events[index];

       // Add a hook for the GFM tasklist extension, which needs to know if text
       // is in the first content of a list item.
       if (
         index &&
         event[1].type === 'chunkFlow' &&
         events[index - 1][1].type === 'listItemPrefix'
       ) {
         subevents = event[1]._tokenizer.events;
         otherIndex = 0;
         if (
           otherIndex < subevents.length &&
           subevents[otherIndex][1].type === 'lineEndingBlank'
         ) {
           otherIndex += 2;
         }
         if (
           otherIndex < subevents.length &&
           subevents[otherIndex][1].type === 'content'
         ) {
           while (++otherIndex < subevents.length) {
             if (subevents[otherIndex][1].type === 'content') {
               break
             }
             if (subevents[otherIndex][1].type === 'chunkText') {
               subevents[otherIndex][1]._isInFirstContentOfListItem = true;
               otherIndex++;
             }
           }
         }
       }

       // Enter.
       if (event[0] === 'enter') {
         if (event[1].contentType) {
           Object.assign(jumps, subcontent(events, index));
           index = jumps[index];
           more = true;
         }
       }
       // Exit.
       else if (event[1]._container) {
         otherIndex = index;
         lineIndex = undefined;
         while (otherIndex--) {
           otherEvent = events[otherIndex];
           if (
             otherEvent[1].type === 'lineEnding' ||
             otherEvent[1].type === 'lineEndingBlank'
           ) {
             if (otherEvent[0] === 'enter') {
               if (lineIndex) {
                 events[lineIndex][1].type = 'lineEndingBlank';
               }
               otherEvent[1].type = 'lineEnding';
               lineIndex = otherIndex;
             }
           } else {
             break
           }
         }
         if (lineIndex) {
           // Fix position.
           event[1].end = Object.assign({}, events[lineIndex][1].start);

           // Switch container exit w/ line endings.
           parameters = events.slice(lineIndex, index);
           parameters.unshift(event);
           splice(events, lineIndex, index - lineIndex + 1, parameters);
         }
       }
     }
     return !more
   }

   /**
    * Tokenize embedded tokens.
    *
    * @param {Array<Event>} events
    * @param {number} eventIndex
    * @returns {Record<string, number>}
    */
   function subcontent(events, eventIndex) {
     const token = events[eventIndex][1];
     const context = events[eventIndex][2];
     let startPosition = eventIndex - 1;
     /** @type {Array<number>} */
     const startPositions = [];
     const tokenizer =
       token._tokenizer || context.parser[token.contentType](token.start);
     const childEvents = tokenizer.events;
     /** @type {Array<[number, number]>} */
     const jumps = [];
     /** @type {Record<string, number>} */
     const gaps = {};
     /** @type {Array<Chunk>} */
     let stream;
     /** @type {Token | undefined} */
     let previous;
     let index = -1;
     /** @type {Token | undefined} */
     let current = token;
     let adjust = 0;
     let start = 0;
     const breaks = [start];

     // Loop forward through the linked tokens to pass them in order to the
     // subtokenizer.
     while (current) {
       // Find the position of the event for this token.
       while (events[++startPosition][1] !== current) {
         // Empty.
       }
       startPositions.push(startPosition);
       if (!current._tokenizer) {
         stream = context.sliceStream(current);
         if (!current.next) {
           stream.push(null);
         }
         if (previous) {
           tokenizer.defineSkip(current.start);
         }
         if (current._isInFirstContentOfListItem) {
           tokenizer._gfmTasklistFirstContentOfListItem = true;
         }
         tokenizer.write(stream);
         if (current._isInFirstContentOfListItem) {
           tokenizer._gfmTasklistFirstContentOfListItem = undefined;
         }
       }

       // Unravel the next token.
       previous = current;
       current = current.next;
     }

     // Now, loop back through all events (and linked tokens), to figure out which
     // parts belong where.
     current = token;
     while (++index < childEvents.length) {
       if (
         // Find a void token that includes a break.
         childEvents[index][0] === 'exit' &&
         childEvents[index - 1][0] === 'enter' &&
         childEvents[index][1].type === childEvents[index - 1][1].type &&
         childEvents[index][1].start.line !== childEvents[index][1].end.line
       ) {
         start = index + 1;
         breaks.push(start);
         // Help GC.
         current._tokenizer = undefined;
         current.previous = undefined;
         current = current.next;
       }
     }

     // Help GC.
     tokenizer.events = [];

     // If there’s one more token (which is the cases for lines that end in an
     // EOF), that’s perfect: the last point we found starts it.
     // If there isn’t then make sure any remaining content is added to it.
     if (current) {
       // Help GC.
       current._tokenizer = undefined;
       current.previous = undefined;
     } else {
       breaks.pop();
     }

     // Now splice the events from the subtokenizer into the current events,
     // moving back to front so that splice indices aren’t affected.
     index = breaks.length;
     while (index--) {
       const slice = childEvents.slice(breaks[index], breaks[index + 1]);
       const start = startPositions.pop();
       jumps.unshift([start, start + slice.length - 1]);
       splice(events, start, 2, slice);
     }
     index = -1;
     while (++index < jumps.length) {
       gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];
       adjust += jumps[index][1] - jumps[index][0] - 1;
     }
     return gaps
   }

   /**
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').Resolver} Resolver
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').Token} Token
    * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    */

   /**
    * No name because it must not be turned off.
    * @type {Construct}
    */
   const content$1 = {
     tokenize: tokenizeContent,
     resolve: resolveContent
   };

   /** @type {Construct} */
   const continuationConstruct = {
     tokenize: tokenizeContinuation,
     partial: true
   };

   /**
    * Content is transparent: it’s parsed right now. That way, definitions are also
    * parsed right now: before text in paragraphs (specifically, media) are parsed.
    *
    * @type {Resolver}
    */
   function resolveContent(events) {
     subtokenize(events);
     return events
   }

   /**
    * @this {TokenizeContext}
    * @type {Tokenizer}
    */
   function tokenizeContent(effects, ok) {
     /** @type {Token | undefined} */
     let previous;
     return chunkStart

     /**
      * Before a content chunk.
      *
      * ```markdown
      * > | abc
      *     ^
      * ```
      *
      * @type {State}
      */
     function chunkStart(code) {
       effects.enter('content');
       previous = effects.enter('chunkContent', {
         contentType: 'content'
       });
       return chunkInside(code)
     }

     /**
      * In a content chunk.
      *
      * ```markdown
      * > | abc
      *     ^^^
      * ```
      *
      * @type {State}
      */
     function chunkInside(code) {
       if (code === null) {
         return contentEnd(code)
       }

       // To do: in `markdown-rs`, each line is parsed on its own, and everything
       // is stitched together resolving.
       if (markdownLineEnding(code)) {
         return effects.check(
           continuationConstruct,
           contentContinue,
           contentEnd
         )(code)
       }

       // Data.
       effects.consume(code);
       return chunkInside
     }

     /**
      *
      *
      * @type {State}
      */
     function contentEnd(code) {
       effects.exit('chunkContent');
       effects.exit('content');
       return ok(code)
     }

     /**
      *
      *
      * @type {State}
      */
     function contentContinue(code) {
       effects.consume(code);
       effects.exit('chunkContent');
       previous.next = effects.enter('chunkContent', {
         contentType: 'content',
         previous
       });
       previous = previous.next;
       return chunkInside
     }
   }

   /**
    * @this {TokenizeContext}
    * @type {Tokenizer}
    */
   function tokenizeContinuation(effects, ok, nok) {
     const self = this;
     return startLookahead

     /**
      *
      *
      * @type {State}
      */
     function startLookahead(code) {
       effects.exit('chunkContent');
       effects.enter('lineEnding');
       effects.consume(code);
       effects.exit('lineEnding');
       return factorySpace(effects, prefixed, 'linePrefix')
     }

     /**
      *
      *
      * @type {State}
      */
     function prefixed(code) {
       if (code === null || markdownLineEnding(code)) {
         return nok(code)
       }

       // Always populated by defaults.

       const tail = self.events[self.events.length - 1];
       if (
         !self.parser.constructs.disable.null.includes('codeIndented') &&
         tail &&
         tail[1].type === 'linePrefix' &&
         tail[2].sliceSerialize(tail[1], true).length >= 4
       ) {
         return ok(code)
       }
       return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)
     }
   }

   /**
    * @typedef {import('micromark-util-types').Effects} Effects
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').TokenType} TokenType
    */

   /**
    * Parse destinations.
    *
    * ###### Examples
    *
    * ```markdown
    * <a>
    * <a\>b>
    * <a b>
    * <a)>
    * a
    * a\)b
    * a(b)c
    * a(b)
    * ```
    *
    * @param {Effects} effects
    *   Context.
    * @param {State} ok
    *   State switched to when successful.
    * @param {State} nok
    *   State switched to when unsuccessful.
    * @param {TokenType} type
    *   Type for whole (`<a>` or `b`).
    * @param {TokenType} literalType
    *   Type when enclosed (`<a>`).
    * @param {TokenType} literalMarkerType
    *   Type for enclosing (`<` and `>`).
    * @param {TokenType} rawType
    *   Type when not enclosed (`b`).
    * @param {TokenType} stringType
    *   Type for the value (`a` or `b`).
    * @param {number | undefined} [max=Infinity]
    *   Depth of nested parens (inclusive).
    * @returns {State}
    *   Start state.
    */ // eslint-disable-next-line max-params
   function factoryDestination(
     effects,
     ok,
     nok,
     type,
     literalType,
     literalMarkerType,
     rawType,
     stringType,
     max
   ) {
     const limit = max || Number.POSITIVE_INFINITY;
     let balance = 0;
     return start

     /**
      * Start of destination.
      *
      * ```markdown
      * > | <aa>
      *     ^
      * > | aa
      *     ^
      * ```
      *
      * @type {State}
      */
     function start(code) {
       if (code === 60) {
         effects.enter(type);
         effects.enter(literalType);
         effects.enter(literalMarkerType);
         effects.consume(code);
         effects.exit(literalMarkerType);
         return enclosedBefore
       }

       // ASCII control, space, closing paren.
       if (code === null || code === 32 || code === 41 || asciiControl(code)) {
         return nok(code)
       }
       effects.enter(type);
       effects.enter(rawType);
       effects.enter(stringType);
       effects.enter('chunkString', {
         contentType: 'string'
       });
       return raw(code)
     }

     /**
      * After `<`, at an enclosed destination.
      *
      * ```markdown
      * > | <aa>
      *      ^
      * ```
      *
      * @type {State}
      */
     function enclosedBefore(code) {
       if (code === 62) {
         effects.enter(literalMarkerType);
         effects.consume(code);
         effects.exit(literalMarkerType);
         effects.exit(literalType);
         effects.exit(type);
         return ok
       }
       effects.enter(stringType);
       effects.enter('chunkString', {
         contentType: 'string'
       });
       return enclosed(code)
     }

     /**
      * In enclosed destination.
      *
      * ```markdown
      * > | <aa>
      *      ^
      * ```
      *
      * @type {State}
      */
     function enclosed(code) {
       if (code === 62) {
         effects.exit('chunkString');
         effects.exit(stringType);
         return enclosedBefore(code)
       }
       if (code === null || code === 60 || markdownLineEnding(code)) {
         return nok(code)
       }
       effects.consume(code);
       return code === 92 ? enclosedEscape : enclosed
     }

     /**
      * After `\`, at a special character.
      *
      * ```markdown
      * > | <a\*a>
      *        ^
      * ```
      *
      * @type {State}
      */
     function enclosedEscape(code) {
       if (code === 60 || code === 62 || code === 92) {
         effects.consume(code);
         return enclosed
       }
       return enclosed(code)
     }

     /**
      * In raw destination.
      *
      * ```markdown
      * > | aa
      *     ^
      * ```
      *
      * @type {State}
      */
     function raw(code) {
       if (
         !balance &&
         (code === null || code === 41 || markdownLineEndingOrSpace(code))
       ) {
         effects.exit('chunkString');
         effects.exit(stringType);
         effects.exit(rawType);
         effects.exit(type);
         return ok(code)
       }
       if (balance < limit && code === 40) {
         effects.consume(code);
         balance++;
         return raw
       }
       if (code === 41) {
         effects.consume(code);
         balance--;
         return raw
       }

       // ASCII control (but *not* `\0`) and space and `(`.
       // Note: in `markdown-rs`, `\0` exists in codes, in `micromark-js` it
       // doesn’t.
       if (code === null || code === 32 || code === 40 || asciiControl(code)) {
         return nok(code)
       }
       effects.consume(code);
       return code === 92 ? rawEscape : raw
     }

     /**
      * After `\`, at special character.
      *
      * ```markdown
      * > | a\*a
      *       ^
      * ```
      *
      * @type {State}
      */
     function rawEscape(code) {
       if (code === 40 || code === 41 || code === 92) {
         effects.consume(code);
         return raw
       }
       return raw(code)
     }
   }

   /**
    * @typedef {import('micromark-util-types').Effects} Effects
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
    * @typedef {import('micromark-util-types').TokenType} TokenType
    */

   /**
    * Parse labels.
    *
    * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.
    *
    * ###### Examples
    *
    * ```markdown
    * [a]
    * [a
    * b]
    * [a\]b]
    * ```
    *
    * @this {TokenizeContext}
    *   Tokenize context.
    * @param {Effects} effects
    *   Context.
    * @param {State} ok
    *   State switched to when successful.
    * @param {State} nok
    *   State switched to when unsuccessful.
    * @param {TokenType} type
    *   Type of the whole label (`[a]`).
    * @param {TokenType} markerType
    *   Type for the markers (`[` and `]`).
    * @param {TokenType} stringType
    *   Type for the identifier (`a`).
    * @returns {State}
    *   Start state.
    */ // eslint-disable-next-line max-params
   function factoryLabel$1(effects, ok, nok, type, markerType, stringType) {
     const self = this;
     let size = 0;
     /** @type {boolean} */
     let seen;
     return start

     /**
      * Start of label.
      *
      * ```markdown
      * > | [a]
      *     ^
      * ```
      *
      * @type {State}
      */
     function start(code) {
       effects.enter(type);
       effects.enter(markerType);
       effects.consume(code);
       effects.exit(markerType);
       effects.enter(stringType);
       return atBreak
     }

     /**
      * In label, at something, before something else.
      *
      * ```markdown
      * > | [a]
      *      ^
      * ```
      *
      * @type {State}
      */
     function atBreak(code) {
       if (
         size > 999 ||
         code === null ||
         code === 91 ||
         (code === 93 && !seen) ||
         // To do: remove in the future once we’ve switched from
         // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,
         // which doesn’t need this.
         // Hidden footnotes hook.
         /* c8 ignore next 3 */
         (code === 94 &&
           !size &&
           '_hiddenFootnoteSupport' in self.parser.constructs)
       ) {
         return nok(code)
       }
       if (code === 93) {
         effects.exit(stringType);
         effects.enter(markerType);
         effects.consume(code);
         effects.exit(markerType);
         effects.exit(type);
         return ok
       }

       // To do: indent? Link chunks and EOLs together?
       if (markdownLineEnding(code)) {
         effects.enter('lineEnding');
         effects.consume(code);
         effects.exit('lineEnding');
         return atBreak
       }
       effects.enter('chunkString', {
         contentType: 'string'
       });
       return labelInside(code)
     }

     /**
      * In label, in text.
      *
      * ```markdown
      * > | [a]
      *      ^
      * ```
      *
      * @type {State}
      */
     function labelInside(code) {
       if (
         code === null ||
         code === 91 ||
         code === 93 ||
         markdownLineEnding(code) ||
         size++ > 999
       ) {
         effects.exit('chunkString');
         return atBreak(code)
       }
       effects.consume(code);
       if (!seen) seen = !markdownSpace(code);
       return code === 92 ? labelEscape : labelInside
     }

     /**
      * After `\`, at a special character.
      *
      * ```markdown
      * > | [a\*a]
      *        ^
      * ```
      *
      * @type {State}
      */
     function labelEscape(code) {
       if (code === 91 || code === 92 || code === 93) {
         effects.consume(code);
         size++;
         return labelInside
       }
       return labelInside(code)
     }
   }

   /**
    * @typedef {import('micromark-util-types').Code} Code
    * @typedef {import('micromark-util-types').Effects} Effects
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').TokenType} TokenType
    */

   /**
    * Parse titles.
    *
    * ###### Examples
    *
    * ```markdown
    * "a"
    * 'b'
    * (c)
    * "a
    * b"
    * 'a
    *     b'
    * (a\)b)
    * ```
    *
    * @param {Effects} effects
    *   Context.
    * @param {State} ok
    *   State switched to when successful.
    * @param {State} nok
    *   State switched to when unsuccessful.
    * @param {TokenType} type
    *   Type of the whole title (`"a"`, `'b'`, `(c)`).
    * @param {TokenType} markerType
    *   Type for the markers (`"`, `'`, `(`, and `)`).
    * @param {TokenType} stringType
    *   Type for the value (`a`).
    * @returns {State}
    *   Start state.
    */ // eslint-disable-next-line max-params
   function factoryTitle(effects, ok, nok, type, markerType, stringType) {
     /** @type {NonNullable<Code>} */
     let marker;
     return start

     /**
      * Start of title.
      *
      * ```markdown
      * > | "a"
      *     ^
      * ```
      *
      * @type {State}
      */
     function start(code) {
       if (code === 34 || code === 39 || code === 40) {
         effects.enter(type);
         effects.enter(markerType);
         effects.consume(code);
         effects.exit(markerType);
         marker = code === 40 ? 41 : code;
         return begin
       }
       return nok(code)
     }

     /**
      * After opening marker.
      *
      * This is also used at the closing marker.
      *
      * ```markdown
      * > | "a"
      *      ^
      * ```
      *
      * @type {State}
      */
     function begin(code) {
       if (code === marker) {
         effects.enter(markerType);
         effects.consume(code);
         effects.exit(markerType);
         effects.exit(type);
         return ok
       }
       effects.enter(stringType);
       return atBreak(code)
     }

     /**
      * At something, before something else.
      *
      * ```markdown
      * > | "a"
      *      ^
      * ```
      *
      * @type {State}
      */
     function atBreak(code) {
       if (code === marker) {
         effects.exit(stringType);
         return begin(marker)
       }
       if (code === null) {
         return nok(code)
       }

       // Note: blank lines can’t exist in content.
       if (markdownLineEnding(code)) {
         // To do: use `space_or_tab_eol_with_options`, connect.
         effects.enter('lineEnding');
         effects.consume(code);
         effects.exit('lineEnding');
         return factorySpace(effects, atBreak, 'linePrefix')
       }
       effects.enter('chunkString', {
         contentType: 'string'
       });
       return inside(code)
     }

     /**
      *
      *
      * @type {State}
      */
     function inside(code) {
       if (code === marker || code === null || markdownLineEnding(code)) {
         effects.exit('chunkString');
         return atBreak(code)
       }
       effects.consume(code);
       return code === 92 ? escape : inside
     }

     /**
      * After `\`, at a special character.
      *
      * ```markdown
      * > | "a\*b"
      *      ^
      * ```
      *
      * @type {State}
      */
     function escape(code) {
       if (code === marker || code === 92) {
         effects.consume(code);
         return inside
       }
       return inside(code)
     }
   }

   /**
    * @typedef {import('micromark-util-types').Effects} Effects
    * @typedef {import('micromark-util-types').State} State
    */

   /**
    * Parse spaces and tabs.
    *
    * There is no `nok` parameter:
    *
    * *   line endings or spaces in markdown are often optional, in which case this
    *     factory can be used and `ok` will be switched to whether spaces were found
    *     or not
    * *   one line ending or space can be detected with
    *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`
    *
    * @param {Effects} effects
    *   Context.
    * @param {State} ok
    *   State switched to when successful.
    * @returns
    *   Start state.
    */
   function factoryWhitespace(effects, ok) {
     /** @type {boolean} */
     let seen;
     return start

     /** @type {State} */
     function start(code) {
       if (markdownLineEnding(code)) {
         effects.enter('lineEnding');
         effects.consume(code);
         effects.exit('lineEnding');
         seen = true;
         return start
       }
       if (markdownSpace(code)) {
         return factorySpace(
           effects,
           start,
           seen ? 'linePrefix' : 'lineSuffix'
         )(code)
       }
       return ok(code)
     }
   }

   /**
    * Normalize an identifier (as found in references, definitions).
    *
    * Collapses markdown whitespace, trim, and then lower- and uppercase.
    *
    * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their
    * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different
    * uppercase character (U+0398 (`Θ`)).
    * So, to get a canonical form, we perform both lower- and uppercase.
    *
    * Using uppercase last makes sure keys will never interact with default
    * prototypal values (such as `constructor`): nothing in the prototype of
    * `Object` is uppercase.
    *
    * @param {string} value
    *   Identifier to normalize.
    * @returns {string}
    *   Normalized identifier.
    */
   function normalizeIdentifier(value) {
     return (
       value
         // Collapse markdown whitespace.
         .replace(/[\t\n\r ]+/g, ' ')
         // Trim.
         .replace(/^ | $/g, '')
         // Some characters are considered “uppercase”, but if their lowercase
         // counterpart is uppercased will result in a different uppercase
         // character.
         // Hence, to get that form, we perform both lower- and uppercase.
         // Upper case makes sure keys will not interact with default prototypal
         // methods: no method is uppercase.
         .toLowerCase()
         .toUpperCase()
     )
   }

   /**
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    */

   /** @type {Construct} */
   const definition$1 = {
     name: 'definition',
     tokenize: tokenizeDefinition
   };

   /** @type {Construct} */
   const titleBefore = {
     tokenize: tokenizeTitleBefore,
     partial: true
   };

   /**
    * @this {TokenizeContext}
    * @type {Tokenizer}
    */
   function tokenizeDefinition(effects, ok, nok) {
     const self = this;
     /** @type {string} */
     let identifier;
     return start

     /**
      * At start of a definition.
      *
      * ```markdown
      * > | [a]: b "c"
      *     ^
      * ```
      *
      * @type {State}
      */
     function start(code) {
       // Do not interrupt paragraphs (but do follow definitions).
       // To do: do `interrupt` the way `markdown-rs` does.
       // To do: parse whitespace the way `markdown-rs` does.
       effects.enter('definition');
       return before(code)
     }

     /**
      * After optional whitespace, at `[`.
      *
      * ```markdown
      * > | [a]: b "c"
      *     ^
      * ```
      *
      * @type {State}
      */
     function before(code) {
       // To do: parse whitespace the way `markdown-rs` does.

       return factoryLabel$1.call(
         self,
         effects,
         labelAfter,
         // Note: we don’t need to reset the way `markdown-rs` does.
         nok,
         'definitionLabel',
         'definitionLabelMarker',
         'definitionLabelString'
       )(code)
     }

     /**
      * After label.
      *
      * ```markdown
      * > | [a]: b "c"
      *        ^
      * ```
      *
      * @type {State}
      */
     function labelAfter(code) {
       identifier = normalizeIdentifier(
         self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)
       );
       if (code === 58) {
         effects.enter('definitionMarker');
         effects.consume(code);
         effects.exit('definitionMarker');
         return markerAfter
       }
       return nok(code)
     }

     /**
      * After marker.
      *
      * ```markdown
      * > | [a]: b "c"
      *         ^
      * ```
      *
      * @type {State}
      */
     function markerAfter(code) {
       // Note: whitespace is optional.
       return markdownLineEndingOrSpace(code)
         ? factoryWhitespace(effects, destinationBefore)(code)
         : destinationBefore(code)
     }

     /**
      * Before destination.
      *
      * ```markdown
      * > | [a]: b "c"
      *          ^
      * ```
      *
      * @type {State}
      */
     function destinationBefore(code) {
       return factoryDestination(
         effects,
         destinationAfter,
         // Note: we don’t need to reset the way `markdown-rs` does.
         nok,
         'definitionDestination',
         'definitionDestinationLiteral',
         'definitionDestinationLiteralMarker',
         'definitionDestinationRaw',
         'definitionDestinationString'
       )(code)
     }

     /**
      * After destination.
      *
      * ```markdown
      * > | [a]: b "c"
      *           ^
      * ```
      *
      * @type {State}
      */
     function destinationAfter(code) {
       return effects.attempt(titleBefore, after, after)(code)
     }

     /**
      * After definition.
      *
      * ```markdown
      * > | [a]: b
      *           ^
      * > | [a]: b "c"
      *               ^
      * ```
      *
      * @type {State}
      */
     function after(code) {
       return markdownSpace(code)
         ? factorySpace(effects, afterWhitespace, 'whitespace')(code)
         : afterWhitespace(code)
     }

     /**
      * After definition, after optional whitespace.
      *
      * ```markdown
      * > | [a]: b
      *           ^
      * > | [a]: b "c"
      *               ^
      * ```
      *
      * @type {State}
      */
     function afterWhitespace(code) {
       if (code === null || markdownLineEnding(code)) {
         effects.exit('definition');

         // Note: we don’t care about uniqueness.
         // It’s likely that that doesn’t happen very frequently.
         // It is more likely that it wastes precious time.
         self.parser.defined.push(identifier);

         // To do: `markdown-rs` interrupt.
         // // You’d be interrupting.
         // tokenizer.interrupt = true
         return ok(code)
       }
       return nok(code)
     }
   }

   /**
    * @this {TokenizeContext}
    * @type {Tokenizer}
    */
   function tokenizeTitleBefore(effects, ok, nok) {
     return titleBefore

     /**
      * After destination, at whitespace.
      *
      * ```markdown
      * > | [a]: b
      *           ^
      * > | [a]: b "c"
      *           ^
      * ```
      *
      * @type {State}
      */
     function titleBefore(code) {
       return markdownLineEndingOrSpace(code)
         ? factoryWhitespace(effects, beforeMarker)(code)
         : nok(code)
     }

     /**
      * At title.
      *
      * ```markdown
      *   | [a]: b
      * > | "c"
      *     ^
      * ```
      *
      * @type {State}
      */
     function beforeMarker(code) {
       return factoryTitle(
         effects,
         titleAfter,
         nok,
         'definitionTitle',
         'definitionTitleMarker',
         'definitionTitleString'
       )(code)
     }

     /**
      * After title.
      *
      * ```markdown
      * > | [a]: b "c"
      *               ^
      * ```
      *
      * @type {State}
      */
     function titleAfter(code) {
       return markdownSpace(code)
         ? factorySpace(effects, titleAfterOptionalWhitespace, 'whitespace')(code)
         : titleAfterOptionalWhitespace(code)
     }

     /**
      * After title, after optional whitespace.
      *
      * ```markdown
      * > | [a]: b "c"
      *               ^
      * ```
      *
      * @type {State}
      */
     function titleAfterOptionalWhitespace(code) {
       return code === null || markdownLineEnding(code) ? ok(code) : nok(code)
     }
   }

   /**
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    */

   /** @type {Construct} */
   const hardBreakEscape = {
     name: 'hardBreakEscape',
     tokenize: tokenizeHardBreakEscape
   };

   /**
    * @this {TokenizeContext}
    * @type {Tokenizer}
    */
   function tokenizeHardBreakEscape(effects, ok, nok) {
     return start

     /**
      * Start of a hard break (escape).
      *
      * ```markdown
      * > | a\
      *      ^
      *   | b
      * ```
      *
      * @type {State}
      */
     function start(code) {
       effects.enter('hardBreakEscape');
       effects.consume(code);
       return after
     }

     /**
      * After `\`, at eol.
      *
      * ```markdown
      * > | a\
      *       ^
      *   | b
      * ```
      *
      *  @type {State}
      */
     function after(code) {
       if (markdownLineEnding(code)) {
         effects.exit('hardBreakEscape');
         return ok(code)
       }
       return nok(code)
     }
   }

   /**
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').Resolver} Resolver
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').Token} Token
    * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    */

   /** @type {Construct} */
   const headingAtx = {
     name: 'headingAtx',
     tokenize: tokenizeHeadingAtx,
     resolve: resolveHeadingAtx
   };

   /** @type {Resolver} */
   function resolveHeadingAtx(events, context) {
     let contentEnd = events.length - 2;
     let contentStart = 3;
     /** @type {Token} */
     let content;
     /** @type {Token} */
     let text;

     // Prefix whitespace, part of the opening.
     if (events[contentStart][1].type === 'whitespace') {
       contentStart += 2;
     }

     // Suffix whitespace, part of the closing.
     if (
       contentEnd - 2 > contentStart &&
       events[contentEnd][1].type === 'whitespace'
     ) {
       contentEnd -= 2;
     }
     if (
       events[contentEnd][1].type === 'atxHeadingSequence' &&
       (contentStart === contentEnd - 1 ||
         (contentEnd - 4 > contentStart &&
           events[contentEnd - 2][1].type === 'whitespace'))
     ) {
       contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;
     }
     if (contentEnd > contentStart) {
       content = {
         type: 'atxHeadingText',
         start: events[contentStart][1].start,
         end: events[contentEnd][1].end
       };
       text = {
         type: 'chunkText',
         start: events[contentStart][1].start,
         end: events[contentEnd][1].end,
         contentType: 'text'
       };
       splice(events, contentStart, contentEnd - contentStart + 1, [
         ['enter', content, context],
         ['enter', text, context],
         ['exit', text, context],
         ['exit', content, context]
       ]);
     }
     return events
   }

   /**
    * @this {TokenizeContext}
    * @type {Tokenizer}
    */
   function tokenizeHeadingAtx(effects, ok, nok) {
     let size = 0;
     return start

     /**
      * Start of a heading (atx).
      *
      * ```markdown
      * > | ## aa
      *     ^
      * ```
      *
      * @type {State}
      */
     function start(code) {
       // To do: parse indent like `markdown-rs`.
       effects.enter('atxHeading');
       return before(code)
     }

     /**
      * After optional whitespace, at `#`.
      *
      * ```markdown
      * > | ## aa
      *     ^
      * ```
      *
      * @type {State}
      */
     function before(code) {
       effects.enter('atxHeadingSequence');
       return sequenceOpen(code)
     }

     /**
      * In opening sequence.
      *
      * ```markdown
      * > | ## aa
      *     ^
      * ```
      *
      * @type {State}
      */
     function sequenceOpen(code) {
       if (code === 35 && size++ < 6) {
         effects.consume(code);
         return sequenceOpen
       }

       // Always at least one `#`.
       if (code === null || markdownLineEndingOrSpace(code)) {
         effects.exit('atxHeadingSequence');
         return atBreak(code)
       }
       return nok(code)
     }

     /**
      * After something, before something else.
      *
      * ```markdown
      * > | ## aa
      *       ^
      * ```
      *
      * @type {State}
      */
     function atBreak(code) {
       if (code === 35) {
         effects.enter('atxHeadingSequence');
         return sequenceFurther(code)
       }
       if (code === null || markdownLineEnding(code)) {
         effects.exit('atxHeading');
         // To do: interrupt like `markdown-rs`.
         // // Feel free to interrupt.
         // tokenizer.interrupt = false
         return ok(code)
       }
       if (markdownSpace(code)) {
         return factorySpace(effects, atBreak, 'whitespace')(code)
       }

       // To do: generate `data` tokens, add the `text` token later.
       // Needs edit map, see: `markdown.rs`.
       effects.enter('atxHeadingText');
       return data(code)
     }

     /**
      * In further sequence (after whitespace).
      *
      * Could be normal “visible” hashes in the heading or a final sequence.
      *
      * ```markdown
      * > | ## aa ##
      *           ^
      * ```
      *
      * @type {State}
      */
     function sequenceFurther(code) {
       if (code === 35) {
         effects.consume(code);
         return sequenceFurther
       }
       effects.exit('atxHeadingSequence');
       return atBreak(code)
     }

     /**
      * In text.
      *
      * ```markdown
      * > | ## aa
      *        ^
      * ```
      *
      * @type {State}
      */
     function data(code) {
       if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {
         effects.exit('atxHeadingText');
         return atBreak(code)
       }
       effects.consume(code);
       return data
     }
   }

   /**
    * List of lowercase HTML “block” tag names.
    *
    * The list, when parsing HTML (flow), results in more relaxed rules (condition
    * 6).
    * Because they are known blocks, the HTML-like syntax doesn’t have to be
    * strictly parsed.
    * For tag names not in this list, a more strict algorithm (condition 7) is used
    * to detect whether the HTML-like syntax is seen as HTML (flow) or not.
    *
    * This is copied from:
    * <https://spec.commonmark.org/0.30/#html-blocks>.
    *
    * > 👉 **Note**: `search` was added in `CommonMark@0.31`.
    */
   const htmlBlockNames = [
     'address',
     'article',
     'aside',
     'base',
     'basefont',
     'blockquote',
     'body',
     'caption',
     'center',
     'col',
     'colgroup',
     'dd',
     'details',
     'dialog',
     'dir',
     'div',
     'dl',
     'dt',
     'fieldset',
     'figcaption',
     'figure',
     'footer',
     'form',
     'frame',
     'frameset',
     'h1',
     'h2',
     'h3',
     'h4',
     'h5',
     'h6',
     'head',
     'header',
     'hr',
     'html',
     'iframe',
     'legend',
     'li',
     'link',
     'main',
     'menu',
     'menuitem',
     'nav',
     'noframes',
     'ol',
     'optgroup',
     'option',
     'p',
     'param',
     'search',
     'section',
     'summary',
     'table',
     'tbody',
     'td',
     'tfoot',
     'th',
     'thead',
     'title',
     'tr',
     'track',
     'ul'
   ];

   /**
    * List of lowercase HTML “raw” tag names.
    *
    * The list, when parsing HTML (flow), results in HTML that can include lines
    * without exiting, until a closing tag also in this list is found (condition
    * 1).
    *
    * This module is copied from:
    * <https://spec.commonmark.org/0.30/#html-blocks>.
    *
    * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.
    */
   const htmlRawNames = ['pre', 'script', 'style', 'textarea'];

   /**
    * @typedef {import('micromark-util-types').Code} Code
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').Resolver} Resolver
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    */


   /** @type {Construct} */
   const htmlFlow = {
     name: 'htmlFlow',
     tokenize: tokenizeHtmlFlow,
     resolveTo: resolveToHtmlFlow,
     concrete: true
   };

   /** @type {Construct} */
   const blankLineBefore = {
     tokenize: tokenizeBlankLineBefore,
     partial: true
   };
   const nonLazyContinuationStart = {
     tokenize: tokenizeNonLazyContinuationStart,
     partial: true
   };

   /** @type {Resolver} */
   function resolveToHtmlFlow(events) {
     let index = events.length;
     while (index--) {
       if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {
         break
       }
     }
     if (index > 1 && events[index - 2][1].type === 'linePrefix') {
       // Add the prefix start to the HTML token.
       events[index][1].start = events[index - 2][1].start;
       // Add the prefix start to the HTML line token.
       events[index + 1][1].start = events[index - 2][1].start;
       // Remove the line prefix.
       events.splice(index - 2, 2);
     }
     return events
   }

   /**
    * @this {TokenizeContext}
    * @type {Tokenizer}
    */
   function tokenizeHtmlFlow(effects, ok, nok) {
     const self = this;
     /** @type {number} */
     let marker;
     /** @type {boolean} */
     let closingTag;
     /** @type {string} */
     let buffer;
     /** @type {number} */
     let index;
     /** @type {Code} */
     let markerB;
     return start

     /**
      * Start of HTML (flow).
      *
      * ```markdown
      * > | <x />
      *     ^
      * ```
      *
      * @type {State}
      */
     function start(code) {
       // To do: parse indent like `markdown-rs`.
       return before(code)
     }

     /**
      * At `<`, after optional whitespace.
      *
      * ```markdown
      * > | <x />
      *     ^
      * ```
      *
      * @type {State}
      */
     function before(code) {
       effects.enter('htmlFlow');
       effects.enter('htmlFlowData');
       effects.consume(code);
       return open
     }

     /**
      * After `<`, at tag name or other stuff.
      *
      * ```markdown
      * > | <x />
      *      ^
      * > | <!doctype>
      *      ^
      * > | <!--xxx-->
      *      ^
      * ```
      *
      * @type {State}
      */
     function open(code) {
       if (code === 33) {
         effects.consume(code);
         return declarationOpen
       }
       if (code === 47) {
         effects.consume(code);
         closingTag = true;
         return tagCloseStart
       }
       if (code === 63) {
         effects.consume(code);
         marker = 3;
         // To do:
         // tokenizer.concrete = true
         // To do: use `markdown-rs` style interrupt.
         // While we’re in an instruction instead of a declaration, we’re on a `?`
         // right now, so we do need to search for `>`, similar to declarations.
         return self.interrupt ? ok : continuationDeclarationInside
       }

       // ASCII alphabetical.
       if (asciiAlpha(code)) {
         effects.consume(code);
         // @ts-expect-error: not null.
         buffer = String.fromCharCode(code);
         return tagName
       }
       return nok(code)
     }

     /**
      * After `<!`, at declaration, comment, or CDATA.
      *
      * ```markdown
      * > | <!doctype>
      *       ^
      * > | <!--xxx-->
      *       ^
      * > | <![CDATA[>&<]]>
      *       ^
      * ```
      *
      * @type {State}
      */
     function declarationOpen(code) {
       if (code === 45) {
         effects.consume(code);
         marker = 2;
         return commentOpenInside
       }
       if (code === 91) {
         effects.consume(code);
         marker = 5;
         index = 0;
         return cdataOpenInside
       }

       // ASCII alphabetical.
       if (asciiAlpha(code)) {
         effects.consume(code);
         marker = 4;
         // // Do not form containers.
         // tokenizer.concrete = true
         return self.interrupt ? ok : continuationDeclarationInside
       }
       return nok(code)
     }

     /**
      * After `<!-`, inside a comment, at another `-`.
      *
      * ```markdown
      * > | <!--xxx-->
      *        ^
      * ```
      *
      * @type {State}
      */
     function commentOpenInside(code) {
       if (code === 45) {
         effects.consume(code);
         // // Do not form containers.
         // tokenizer.concrete = true
         return self.interrupt ? ok : continuationDeclarationInside
       }
       return nok(code)
     }

     /**
      * After `<![`, inside CDATA, expecting `CDATA[`.
      *
      * ```markdown
      * > | <![CDATA[>&<]]>
      *        ^^^^^^
      * ```
      *
      * @type {State}
      */
     function cdataOpenInside(code) {
       const value = 'CDATA[';
       if (code === value.charCodeAt(index++)) {
         effects.consume(code);
         if (index === value.length) {
           // // Do not form containers.
           // tokenizer.concrete = true
           return self.interrupt ? ok : continuation
         }
         return cdataOpenInside
       }
       return nok(code)
     }

     /**
      * After `</`, in closing tag, at tag name.
      *
      * ```markdown
      * > | </x>
      *       ^
      * ```
      *
      * @type {State}
      */
     function tagCloseStart(code) {
       if (asciiAlpha(code)) {
         effects.consume(code);
         // @ts-expect-error: not null.
         buffer = String.fromCharCode(code);
         return tagName
       }
       return nok(code)
     }

     /**
      * In tag name.
      *
      * ```markdown
      * > | <ab>
      *      ^^
      * > | </ab>
      *       ^^
      * ```
      *
      * @type {State}
      */
     function tagName(code) {
       if (
         code === null ||
         code === 47 ||
         code === 62 ||
         markdownLineEndingOrSpace(code)
       ) {
         const slash = code === 47;
         const name = buffer.toLowerCase();
         if (!slash && !closingTag && htmlRawNames.includes(name)) {
           marker = 1;
           // // Do not form containers.
           // tokenizer.concrete = true
           return self.interrupt ? ok(code) : continuation(code)
         }
         if (htmlBlockNames.includes(buffer.toLowerCase())) {
           marker = 6;
           if (slash) {
             effects.consume(code);
             return basicSelfClosing
           }

           // // Do not form containers.
           // tokenizer.concrete = true
           return self.interrupt ? ok(code) : continuation(code)
         }
         marker = 7;
         // Do not support complete HTML when interrupting.
         return self.interrupt && !self.parser.lazy[self.now().line]
           ? nok(code)
           : closingTag
           ? completeClosingTagAfter(code)
           : completeAttributeNameBefore(code)
       }

       // ASCII alphanumerical and `-`.
       if (code === 45 || asciiAlphanumeric(code)) {
         effects.consume(code);
         buffer += String.fromCharCode(code);
         return tagName
       }
       return nok(code)
     }

     /**
      * After closing slash of a basic tag name.
      *
      * ```markdown
      * > | <div/>
      *          ^
      * ```
      *
      * @type {State}
      */
     function basicSelfClosing(code) {
       if (code === 62) {
         effects.consume(code);
         // // Do not form containers.
         // tokenizer.concrete = true
         return self.interrupt ? ok : continuation
       }
       return nok(code)
     }

     /**
      * After closing slash of a complete tag name.
      *
      * ```markdown
      * > | <x/>
      *        ^
      * ```
      *
      * @type {State}
      */
     function completeClosingTagAfter(code) {
       if (markdownSpace(code)) {
         effects.consume(code);
         return completeClosingTagAfter
       }
       return completeEnd(code)
     }

     /**
      * At an attribute name.
      *
      * At first, this state is used after a complete tag name, after whitespace,
      * where it expects optional attributes or the end of the tag.
      * It is also reused after attributes, when expecting more optional
      * attributes.
      *
      * ```markdown
      * > | <a />
      *        ^
      * > | <a :b>
      *        ^
      * > | <a _b>
      *        ^
      * > | <a b>
      *        ^
      * > | <a >
      *        ^
      * ```
      *
      * @type {State}
      */
     function completeAttributeNameBefore(code) {
       if (code === 47) {
         effects.consume(code);
         return completeEnd
       }

       // ASCII alphanumerical and `:` and `_`.
       if (code === 58 || code === 95 || asciiAlpha(code)) {
         effects.consume(code);
         return completeAttributeName
       }
       if (markdownSpace(code)) {
         effects.consume(code);
         return completeAttributeNameBefore
       }
       return completeEnd(code)
     }

     /**
      * In attribute name.
      *
      * ```markdown
      * > | <a :b>
      *         ^
      * > | <a _b>
      *         ^
      * > | <a b>
      *         ^
      * ```
      *
      * @type {State}
      */
     function completeAttributeName(code) {
       // ASCII alphanumerical and `-`, `.`, `:`, and `_`.
       if (
         code === 45 ||
         code === 46 ||
         code === 58 ||
         code === 95 ||
         asciiAlphanumeric(code)
       ) {
         effects.consume(code);
         return completeAttributeName
       }
       return completeAttributeNameAfter(code)
     }

     /**
      * After attribute name, at an optional initializer, the end of the tag, or
      * whitespace.
      *
      * ```markdown
      * > | <a b>
      *         ^
      * > | <a b=c>
      *         ^
      * ```
      *
      * @type {State}
      */
     function completeAttributeNameAfter(code) {
       if (code === 61) {
         effects.consume(code);
         return completeAttributeValueBefore
       }
       if (markdownSpace(code)) {
         effects.consume(code);
         return completeAttributeNameAfter
       }
       return completeAttributeNameBefore(code)
     }

     /**
      * Before unquoted, double quoted, or single quoted attribute value, allowing
      * whitespace.
      *
      * ```markdown
      * > | <a b=c>
      *          ^
      * > | <a b="c">
      *          ^
      * ```
      *
      * @type {State}
      */
     function completeAttributeValueBefore(code) {
       if (
         code === null ||
         code === 60 ||
         code === 61 ||
         code === 62 ||
         code === 96
       ) {
         return nok(code)
       }
       if (code === 34 || code === 39) {
         effects.consume(code);
         markerB = code;
         return completeAttributeValueQuoted
       }
       if (markdownSpace(code)) {
         effects.consume(code);
         return completeAttributeValueBefore
       }
       return completeAttributeValueUnquoted(code)
     }

     /**
      * In double or single quoted attribute value.
      *
      * ```markdown
      * > | <a b="c">
      *           ^
      * > | <a b='c'>
      *           ^
      * ```
      *
      * @type {State}
      */
     function completeAttributeValueQuoted(code) {
       if (code === markerB) {
         effects.consume(code);
         markerB = null;
         return completeAttributeValueQuotedAfter
       }
       if (code === null || markdownLineEnding(code)) {
         return nok(code)
       }
       effects.consume(code);
       return completeAttributeValueQuoted
     }

     /**
      * In unquoted attribute value.
      *
      * ```markdown
      * > | <a b=c>
      *          ^
      * ```
      *
      * @type {State}
      */
     function completeAttributeValueUnquoted(code) {
       if (
         code === null ||
         code === 34 ||
         code === 39 ||
         code === 47 ||
         code === 60 ||
         code === 61 ||
         code === 62 ||
         code === 96 ||
         markdownLineEndingOrSpace(code)
       ) {
         return completeAttributeNameAfter(code)
       }
       effects.consume(code);
       return completeAttributeValueUnquoted
     }

     /**
      * After double or single quoted attribute value, before whitespace or the
      * end of the tag.
      *
      * ```markdown
      * > | <a b="c">
      *            ^
      * ```
      *
      * @type {State}
      */
     function completeAttributeValueQuotedAfter(code) {
       if (code === 47 || code === 62 || markdownSpace(code)) {
         return completeAttributeNameBefore(code)
       }
       return nok(code)
     }

     /**
      * In certain circumstances of a complete tag where only an `>` is allowed.
      *
      * ```markdown
      * > | <a b="c">
      *             ^
      * ```
      *
      * @type {State}
      */
     function completeEnd(code) {
       if (code === 62) {
         effects.consume(code);
         return completeAfter
       }
       return nok(code)
     }

     /**
      * After `>` in a complete tag.
      *
      * ```markdown
      * > | <x>
      *        ^
      * ```
      *
      * @type {State}
      */
     function completeAfter(code) {
       if (code === null || markdownLineEnding(code)) {
         // // Do not form containers.
         // tokenizer.concrete = true
         return continuation(code)
       }
       if (markdownSpace(code)) {
         effects.consume(code);
         return completeAfter
       }
       return nok(code)
     }

     /**
      * In continuation of any HTML kind.
      *
      * ```markdown
      * > | <!--xxx-->
      *          ^
      * ```
      *
      * @type {State}
      */
     function continuation(code) {
       if (code === 45 && marker === 2) {
         effects.consume(code);
         return continuationCommentInside
       }
       if (code === 60 && marker === 1) {
         effects.consume(code);
         return continuationRawTagOpen
       }
       if (code === 62 && marker === 4) {
         effects.consume(code);
         return continuationClose
       }
       if (code === 63 && marker === 3) {
         effects.consume(code);
         return continuationDeclarationInside
       }
       if (code === 93 && marker === 5) {
         effects.consume(code);
         return continuationCdataInside
       }
       if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {
         effects.exit('htmlFlowData');
         return effects.check(
           blankLineBefore,
           continuationAfter,
           continuationStart
         )(code)
       }
       if (code === null || markdownLineEnding(code)) {
         effects.exit('htmlFlowData');
         return continuationStart(code)
       }
       effects.consume(code);
       return continuation
     }

     /**
      * In continuation, at eol.
      *
      * ```markdown
      * > | <x>
      *        ^
      *   | asd
      * ```
      *
      * @type {State}
      */
     function continuationStart(code) {
       return effects.check(
         nonLazyContinuationStart,
         continuationStartNonLazy,
         continuationAfter
       )(code)
     }

     /**
      * In continuation, at eol, before non-lazy content.
      *
      * ```markdown
      * > | <x>
      *        ^
      *   | asd
      * ```
      *
      * @type {State}
      */
     function continuationStartNonLazy(code) {
       effects.enter('lineEnding');
       effects.consume(code);
       effects.exit('lineEnding');
       return continuationBefore
     }

     /**
      * In continuation, before non-lazy content.
      *
      * ```markdown
      *   | <x>
      * > | asd
      *     ^
      * ```
      *
      * @type {State}
      */
     function continuationBefore(code) {
       if (code === null || markdownLineEnding(code)) {
         return continuationStart(code)
       }
       effects.enter('htmlFlowData');
       return continuation(code)
     }

     /**
      * In comment continuation, after one `-`, expecting another.
      *
      * ```markdown
      * > | <!--xxx-->
      *             ^
      * ```
      *
      * @type {State}
      */
     function continuationCommentInside(code) {
       if (code === 45) {
         effects.consume(code);
         return continuationDeclarationInside
       }
       return continuation(code)
     }

     /**
      * In raw continuation, after `<`, at `/`.
      *
      * ```markdown
      * > | <script>console.log(1)</script>
      *                            ^
      * ```
      *
      * @type {State}
      */
     function continuationRawTagOpen(code) {
       if (code === 47) {
         effects.consume(code);
         buffer = '';
         return continuationRawEndTag
       }
       return continuation(code)
     }

     /**
      * In raw continuation, after `</`, in a raw tag name.
      *
      * ```markdown
      * > | <script>console.log(1)</script>
      *                             ^^^^^^
      * ```
      *
      * @type {State}
      */
     function continuationRawEndTag(code) {
       if (code === 62) {
         const name = buffer.toLowerCase();
         if (htmlRawNames.includes(name)) {
           effects.consume(code);
           return continuationClose
         }
         return continuation(code)
       }
       if (asciiAlpha(code) && buffer.length < 8) {
         effects.consume(code);
         // @ts-expect-error: not null.
         buffer += String.fromCharCode(code);
         return continuationRawEndTag
       }
       return continuation(code)
     }

     /**
      * In cdata continuation, after `]`, expecting `]>`.
      *
      * ```markdown
      * > | <![CDATA[>&<]]>
      *                  ^
      * ```
      *
      * @type {State}
      */
     function continuationCdataInside(code) {
       if (code === 93) {
         effects.consume(code);
         return continuationDeclarationInside
       }
       return continuation(code)
     }

     /**
      * In declaration or instruction continuation, at `>`.
      *
      * ```markdown
      * > | <!-->
      *         ^
      * > | <?>
      *       ^
      * > | <!q>
      *        ^
      * > | <!--ab-->
      *             ^
      * > | <![CDATA[>&<]]>
      *                   ^
      * ```
      *
      * @type {State}
      */
     function continuationDeclarationInside(code) {
       if (code === 62) {
         effects.consume(code);
         return continuationClose
       }

       // More dashes.
       if (code === 45 && marker === 2) {
         effects.consume(code);
         return continuationDeclarationInside
       }
       return continuation(code)
     }

     /**
      * In closed continuation: everything we get until the eol/eof is part of it.
      *
      * ```markdown
      * > | <!doctype>
      *               ^
      * ```
      *
      * @type {State}
      */
     function continuationClose(code) {
       if (code === null || markdownLineEnding(code)) {
         effects.exit('htmlFlowData');
         return continuationAfter(code)
       }
       effects.consume(code);
       return continuationClose
     }

     /**
      * Done.
      *
      * ```markdown
      * > | <!doctype>
      *               ^
      * ```
      *
      * @type {State}
      */
     function continuationAfter(code) {
       effects.exit('htmlFlow');
       // // Feel free to interrupt.
       // tokenizer.interrupt = false
       // // No longer concrete.
       // tokenizer.concrete = false
       return ok(code)
     }
   }

   /**
    * @this {TokenizeContext}
    * @type {Tokenizer}
    */
   function tokenizeNonLazyContinuationStart(effects, ok, nok) {
     const self = this;
     return start

     /**
      * At eol, before continuation.
      *
      * ```markdown
      * > | * ```js
      *            ^
      *   | b
      * ```
      *
      * @type {State}
      */
     function start(code) {
       if (markdownLineEnding(code)) {
         effects.enter('lineEnding');
         effects.consume(code);
         effects.exit('lineEnding');
         return after
       }
       return nok(code)
     }

     /**
      * A continuation.
      *
      * ```markdown
      *   | * ```js
      * > | b
      *     ^
      * ```
      *
      * @type {State}
      */
     function after(code) {
       return self.parser.lazy[self.now().line] ? nok(code) : ok(code)
     }
   }

   /**
    * @this {TokenizeContext}
    * @type {Tokenizer}
    */
   function tokenizeBlankLineBefore(effects, ok, nok) {
     return start

     /**
      * Before eol, expecting blank line.
      *
      * ```markdown
      * > | <div>
      *          ^
      *   |
      * ```
      *
      * @type {State}
      */
     function start(code) {
       effects.enter('lineEnding');
       effects.consume(code);
       effects.exit('lineEnding');
       return effects.attempt(blankLine$1, ok, nok)
     }
   }

   /**
    * @typedef {import('micromark-util-types').Code} Code
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    */

   /** @type {Construct} */
   const htmlText = {
     name: 'htmlText',
     tokenize: tokenizeHtmlText
   };

   /**
    * @this {TokenizeContext}
    * @type {Tokenizer}
    */
   function tokenizeHtmlText(effects, ok, nok) {
     const self = this;
     /** @type {NonNullable<Code> | undefined} */
     let marker;
     /** @type {number} */
     let index;
     /** @type {State} */
     let returnState;
     return start

     /**
      * Start of HTML (text).
      *
      * ```markdown
      * > | a <b> c
      *       ^
      * ```
      *
      * @type {State}
      */
     function start(code) {
       effects.enter('htmlText');
       effects.enter('htmlTextData');
       effects.consume(code);
       return open
     }

     /**
      * After `<`, at tag name or other stuff.
      *
      * ```markdown
      * > | a <b> c
      *        ^
      * > | a <!doctype> c
      *        ^
      * > | a <!--b--> c
      *        ^
      * ```
      *
      * @type {State}
      */
     function open(code) {
       if (code === 33) {
         effects.consume(code);
         return declarationOpen
       }
       if (code === 47) {
         effects.consume(code);
         return tagCloseStart
       }
       if (code === 63) {
         effects.consume(code);
         return instruction
       }

       // ASCII alphabetical.
       if (asciiAlpha(code)) {
         effects.consume(code);
         return tagOpen
       }
       return nok(code)
     }

     /**
      * After `<!`, at declaration, comment, or CDATA.
      *
      * ```markdown
      * > | a <!doctype> c
      *         ^
      * > | a <!--b--> c
      *         ^
      * > | a <![CDATA[>&<]]> c
      *         ^
      * ```
      *
      * @type {State}
      */
     function declarationOpen(code) {
       if (code === 45) {
         effects.consume(code);
         return commentOpenInside
       }
       if (code === 91) {
         effects.consume(code);
         index = 0;
         return cdataOpenInside
       }
       if (asciiAlpha(code)) {
         effects.consume(code);
         return declaration
       }
       return nok(code)
     }

     /**
      * In a comment, after `<!-`, at another `-`.
      *
      * ```markdown
      * > | a <!--b--> c
      *          ^
      * ```
      *
      * @type {State}
      */
     function commentOpenInside(code) {
       if (code === 45) {
         effects.consume(code);
         return commentEnd
       }
       return nok(code)
     }

     /**
      * In comment.
      *
      * ```markdown
      * > | a <!--b--> c
      *           ^
      * ```
      *
      * @type {State}
      */
     function comment(code) {
       if (code === null) {
         return nok(code)
       }
       if (code === 45) {
         effects.consume(code);
         return commentClose
       }
       if (markdownLineEnding(code)) {
         returnState = comment;
         return lineEndingBefore(code)
       }
       effects.consume(code);
       return comment
     }

     /**
      * In comment, after `-`.
      *
      * ```markdown
      * > | a <!--b--> c
      *             ^
      * ```
      *
      * @type {State}
      */
     function commentClose(code) {
       if (code === 45) {
         effects.consume(code);
         return commentEnd
       }
       return comment(code)
     }

     /**
      * In comment, after `--`.
      *
      * ```markdown
      * > | a <!--b--> c
      *              ^
      * ```
      *
      * @type {State}
      */
     function commentEnd(code) {
       return code === 62
         ? end(code)
         : code === 45
         ? commentClose(code)
         : comment(code)
     }

     /**
      * After `<![`, in CDATA, expecting `CDATA[`.
      *
      * ```markdown
      * > | a <![CDATA[>&<]]> b
      *          ^^^^^^
      * ```
      *
      * @type {State}
      */
     function cdataOpenInside(code) {
       const value = 'CDATA[';
       if (code === value.charCodeAt(index++)) {
         effects.consume(code);
         return index === value.length ? cdata : cdataOpenInside
       }
       return nok(code)
     }

     /**
      * In CDATA.
      *
      * ```markdown
      * > | a <![CDATA[>&<]]> b
      *                ^^^
      * ```
      *
      * @type {State}
      */
     function cdata(code) {
       if (code === null) {
         return nok(code)
       }
       if (code === 93) {
         effects.consume(code);
         return cdataClose
       }
       if (markdownLineEnding(code)) {
         returnState = cdata;
         return lineEndingBefore(code)
       }
       effects.consume(code);
       return cdata
     }

     /**
      * In CDATA, after `]`, at another `]`.
      *
      * ```markdown
      * > | a <![CDATA[>&<]]> b
      *                    ^
      * ```
      *
      * @type {State}
      */
     function cdataClose(code) {
       if (code === 93) {
         effects.consume(code);
         return cdataEnd
       }
       return cdata(code)
     }

     /**
      * In CDATA, after `]]`, at `>`.
      *
      * ```markdown
      * > | a <![CDATA[>&<]]> b
      *                     ^
      * ```
      *
      * @type {State}
      */
     function cdataEnd(code) {
       if (code === 62) {
         return end(code)
       }
       if (code === 93) {
         effects.consume(code);
         return cdataEnd
       }
       return cdata(code)
     }

     /**
      * In declaration.
      *
      * ```markdown
      * > | a <!b> c
      *          ^
      * ```
      *
      * @type {State}
      */
     function declaration(code) {
       if (code === null || code === 62) {
         return end(code)
       }
       if (markdownLineEnding(code)) {
         returnState = declaration;
         return lineEndingBefore(code)
       }
       effects.consume(code);
       return declaration
     }

     /**
      * In instruction.
      *
      * ```markdown
      * > | a <?b?> c
      *         ^
      * ```
      *
      * @type {State}
      */
     function instruction(code) {
       if (code === null) {
         return nok(code)
       }
       if (code === 63) {
         effects.consume(code);
         return instructionClose
       }
       if (markdownLineEnding(code)) {
         returnState = instruction;
         return lineEndingBefore(code)
       }
       effects.consume(code);
       return instruction
     }

     /**
      * In instruction, after `?`, at `>`.
      *
      * ```markdown
      * > | a <?b?> c
      *           ^
      * ```
      *
      * @type {State}
      */
     function instructionClose(code) {
       return code === 62 ? end(code) : instruction(code)
     }

     /**
      * After `</`, in closing tag, at tag name.
      *
      * ```markdown
      * > | a </b> c
      *         ^
      * ```
      *
      * @type {State}
      */
     function tagCloseStart(code) {
       // ASCII alphabetical.
       if (asciiAlpha(code)) {
         effects.consume(code);
         return tagClose
       }
       return nok(code)
     }

     /**
      * After `</x`, in a tag name.
      *
      * ```markdown
      * > | a </b> c
      *          ^
      * ```
      *
      * @type {State}
      */
     function tagClose(code) {
       // ASCII alphanumerical and `-`.
       if (code === 45 || asciiAlphanumeric(code)) {
         effects.consume(code);
         return tagClose
       }
       return tagCloseBetween(code)
     }

     /**
      * In closing tag, after tag name.
      *
      * ```markdown
      * > | a </b> c
      *          ^
      * ```
      *
      * @type {State}
      */
     function tagCloseBetween(code) {
       if (markdownLineEnding(code)) {
         returnState = tagCloseBetween;
         return lineEndingBefore(code)
       }
       if (markdownSpace(code)) {
         effects.consume(code);
         return tagCloseBetween
       }
       return end(code)
     }

     /**
      * After `<x`, in opening tag name.
      *
      * ```markdown
      * > | a <b> c
      *         ^
      * ```
      *
      * @type {State}
      */
     function tagOpen(code) {
       // ASCII alphanumerical and `-`.
       if (code === 45 || asciiAlphanumeric(code)) {
         effects.consume(code);
         return tagOpen
       }
       if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {
         return tagOpenBetween(code)
       }
       return nok(code)
     }

     /**
      * In opening tag, after tag name.
      *
      * ```markdown
      * > | a <b> c
      *         ^
      * ```
      *
      * @type {State}
      */
     function tagOpenBetween(code) {
       if (code === 47) {
         effects.consume(code);
         return end
       }

       // ASCII alphabetical and `:` and `_`.
       if (code === 58 || code === 95 || asciiAlpha(code)) {
         effects.consume(code);
         return tagOpenAttributeName
       }
       if (markdownLineEnding(code)) {
         returnState = tagOpenBetween;
         return lineEndingBefore(code)
       }
       if (markdownSpace(code)) {
         effects.consume(code);
         return tagOpenBetween
       }
       return end(code)
     }

     /**
      * In attribute name.
      *
      * ```markdown
      * > | a <b c> d
      *          ^
      * ```
      *
      * @type {State}
      */
     function tagOpenAttributeName(code) {
       // ASCII alphabetical and `-`, `.`, `:`, and `_`.
       if (
         code === 45 ||
         code === 46 ||
         code === 58 ||
         code === 95 ||
         asciiAlphanumeric(code)
       ) {
         effects.consume(code);
         return tagOpenAttributeName
       }
       return tagOpenAttributeNameAfter(code)
     }

     /**
      * After attribute name, before initializer, the end of the tag, or
      * whitespace.
      *
      * ```markdown
      * > | a <b c> d
      *           ^
      * ```
      *
      * @type {State}
      */
     function tagOpenAttributeNameAfter(code) {
       if (code === 61) {
         effects.consume(code);
         return tagOpenAttributeValueBefore
       }
       if (markdownLineEnding(code)) {
         returnState = tagOpenAttributeNameAfter;
         return lineEndingBefore(code)
       }
       if (markdownSpace(code)) {
         effects.consume(code);
         return tagOpenAttributeNameAfter
       }
       return tagOpenBetween(code)
     }

     /**
      * Before unquoted, double quoted, or single quoted attribute value, allowing
      * whitespace.
      *
      * ```markdown
      * > | a <b c=d> e
      *            ^
      * ```
      *
      * @type {State}
      */
     function tagOpenAttributeValueBefore(code) {
       if (
         code === null ||
         code === 60 ||
         code === 61 ||
         code === 62 ||
         code === 96
       ) {
         return nok(code)
       }
       if (code === 34 || code === 39) {
         effects.consume(code);
         marker = code;
         return tagOpenAttributeValueQuoted
       }
       if (markdownLineEnding(code)) {
         returnState = tagOpenAttributeValueBefore;
         return lineEndingBefore(code)
       }
       if (markdownSpace(code)) {
         effects.consume(code);
         return tagOpenAttributeValueBefore
       }
       effects.consume(code);
       return tagOpenAttributeValueUnquoted
     }

     /**
      * In double or single quoted attribute value.
      *
      * ```markdown
      * > | a <b c="d"> e
      *             ^
      * ```
      *
      * @type {State}
      */
     function tagOpenAttributeValueQuoted(code) {
       if (code === marker) {
         effects.consume(code);
         marker = undefined;
         return tagOpenAttributeValueQuotedAfter
       }
       if (code === null) {
         return nok(code)
       }
       if (markdownLineEnding(code)) {
         returnState = tagOpenAttributeValueQuoted;
         return lineEndingBefore(code)
       }
       effects.consume(code);
       return tagOpenAttributeValueQuoted
     }

     /**
      * In unquoted attribute value.
      *
      * ```markdown
      * > | a <b c=d> e
      *            ^
      * ```
      *
      * @type {State}
      */
     function tagOpenAttributeValueUnquoted(code) {
       if (
         code === null ||
         code === 34 ||
         code === 39 ||
         code === 60 ||
         code === 61 ||
         code === 96
       ) {
         return nok(code)
       }
       if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {
         return tagOpenBetween(code)
       }
       effects.consume(code);
       return tagOpenAttributeValueUnquoted
     }

     /**
      * After double or single quoted attribute value, before whitespace or the end
      * of the tag.
      *
      * ```markdown
      * > | a <b c="d"> e
      *               ^
      * ```
      *
      * @type {State}
      */
     function tagOpenAttributeValueQuotedAfter(code) {
       if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {
         return tagOpenBetween(code)
       }
       return nok(code)
     }

     /**
      * In certain circumstances of a tag where only an `>` is allowed.
      *
      * ```markdown
      * > | a <b c="d"> e
      *               ^
      * ```
      *
      * @type {State}
      */
     function end(code) {
       if (code === 62) {
         effects.consume(code);
         effects.exit('htmlTextData');
         effects.exit('htmlText');
         return ok
       }
       return nok(code)
     }

     /**
      * At eol.
      *
      * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about
      * > empty tokens.
      *
      * ```markdown
      * > | a <!--a
      *            ^
      *   | b-->
      * ```
      *
      * @type {State}
      */
     function lineEndingBefore(code) {
       effects.exit('htmlTextData');
       effects.enter('lineEnding');
       effects.consume(code);
       effects.exit('lineEnding');
       return lineEndingAfter
     }

     /**
      * After eol, at optional whitespace.
      *
      * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about
      * > empty tokens.
      *
      * ```markdown
      *   | a <!--a
      * > | b-->
      *     ^
      * ```
      *
      * @type {State}
      */
     function lineEndingAfter(code) {
       // Always populated by defaults.

       return markdownSpace(code)
         ? factorySpace(
             effects,
             lineEndingAfterPrefix,
             'linePrefix',
             self.parser.constructs.disable.null.includes('codeIndented')
               ? undefined
               : 4
           )(code)
         : lineEndingAfterPrefix(code)
     }

     /**
      * After eol, after optional whitespace.
      *
      * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about
      * > empty tokens.
      *
      * ```markdown
      *   | a <!--a
      * > | b-->
      *     ^
      * ```
      *
      * @type {State}
      */
     function lineEndingAfterPrefix(code) {
       effects.enter('htmlTextData');
       return returnState(code)
     }
   }

   /**
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').Event} Event
    * @typedef {import('micromark-util-types').Resolver} Resolver
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').Token} Token
    * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    */

   /** @type {Construct} */
   const labelEnd = {
     name: 'labelEnd',
     tokenize: tokenizeLabelEnd,
     resolveTo: resolveToLabelEnd,
     resolveAll: resolveAllLabelEnd
   };

   /** @type {Construct} */
   const resourceConstruct = {
     tokenize: tokenizeResource
   };
   /** @type {Construct} */
   const referenceFullConstruct = {
     tokenize: tokenizeReferenceFull
   };
   /** @type {Construct} */
   const referenceCollapsedConstruct = {
     tokenize: tokenizeReferenceCollapsed
   };

   /** @type {Resolver} */
   function resolveAllLabelEnd(events) {
     let index = -1;
     while (++index < events.length) {
       const token = events[index][1];
       if (
         token.type === 'labelImage' ||
         token.type === 'labelLink' ||
         token.type === 'labelEnd'
       ) {
         // Remove the marker.
         events.splice(index + 1, token.type === 'labelImage' ? 4 : 2);
         token.type = 'data';
         index++;
       }
     }
     return events
   }

   /** @type {Resolver} */
   function resolveToLabelEnd(events, context) {
     let index = events.length;
     let offset = 0;
     /** @type {Token} */
     let token;
     /** @type {number | undefined} */
     let open;
     /** @type {number | undefined} */
     let close;
     /** @type {Array<Event>} */
     let media;

     // Find an opening.
     while (index--) {
       token = events[index][1];
       if (open) {
         // If we see another link, or inactive link label, we’ve been here before.
         if (
           token.type === 'link' ||
           (token.type === 'labelLink' && token._inactive)
         ) {
           break
         }

         // Mark other link openings as inactive, as we can’t have links in
         // links.
         if (events[index][0] === 'enter' && token.type === 'labelLink') {
           token._inactive = true;
         }
       } else if (close) {
         if (
           events[index][0] === 'enter' &&
           (token.type === 'labelImage' || token.type === 'labelLink') &&
           !token._balanced
         ) {
           open = index;
           if (token.type !== 'labelLink') {
             offset = 2;
             break
           }
         }
       } else if (token.type === 'labelEnd') {
         close = index;
       }
     }
     const group = {
       type: events[open][1].type === 'labelLink' ? 'link' : 'image',
       start: Object.assign({}, events[open][1].start),
       end: Object.assign({}, events[events.length - 1][1].end)
     };
     const label = {
       type: 'label',
       start: Object.assign({}, events[open][1].start),
       end: Object.assign({}, events[close][1].end)
     };
     const text = {
       type: 'labelText',
       start: Object.assign({}, events[open + offset + 2][1].end),
       end: Object.assign({}, events[close - 2][1].start)
     };
     media = [
       ['enter', group, context],
       ['enter', label, context]
     ];

     // Opening marker.
     media = push$1(media, events.slice(open + 1, open + offset + 3));

     // Text open.
     media = push$1(media, [['enter', text, context]]);

     // Always populated by defaults.

     // Between.
     media = push$1(
       media,
       resolveAll(
         context.parser.constructs.insideSpan.null,
         events.slice(open + offset + 4, close - 3),
         context
       )
     );

     // Text close, marker close, label close.
     media = push$1(media, [
       ['exit', text, context],
       events[close - 2],
       events[close - 1],
       ['exit', label, context]
     ]);

     // Reference, resource, or so.
     media = push$1(media, events.slice(close + 1));

     // Media close.
     media = push$1(media, [['exit', group, context]]);
     splice(events, open, events.length, media);
     return events
   }

   /**
    * @this {TokenizeContext}
    * @type {Tokenizer}
    */
   function tokenizeLabelEnd(effects, ok, nok) {
     const self = this;
     let index = self.events.length;
     /** @type {Token} */
     let labelStart;
     /** @type {boolean} */
     let defined;

     // Find an opening.
     while (index--) {
       if (
         (self.events[index][1].type === 'labelImage' ||
           self.events[index][1].type === 'labelLink') &&
         !self.events[index][1]._balanced
       ) {
         labelStart = self.events[index][1];
         break
       }
     }
     return start

     /**
      * Start of label end.
      *
      * ```markdown
      * > | [a](b) c
      *       ^
      * > | [a][b] c
      *       ^
      * > | [a][] b
      *       ^
      * > | [a] b
      * ```
      *
      * @type {State}
      */
     function start(code) {
       // If there is not an okay opening.
       if (!labelStart) {
         return nok(code)
       }

       // If the corresponding label (link) start is marked as inactive,
       // it means we’d be wrapping a link, like this:
       //
       // ```markdown
       // > | a [b [c](d) e](f) g.
       //                  ^
       // ```
       //
       // We can’t have that, so it’s just balanced brackets.
       if (labelStart._inactive) {
         return labelEndNok(code)
       }
       defined = self.parser.defined.includes(
         normalizeIdentifier(
           self.sliceSerialize({
             start: labelStart.end,
             end: self.now()
           })
         )
       );
       effects.enter('labelEnd');
       effects.enter('labelMarker');
       effects.consume(code);
       effects.exit('labelMarker');
       effects.exit('labelEnd');
       return after
     }

     /**
      * After `]`.
      *
      * ```markdown
      * > | [a](b) c
      *       ^
      * > | [a][b] c
      *       ^
      * > | [a][] b
      *       ^
      * > | [a] b
      *       ^
      * ```
      *
      * @type {State}
      */
     function after(code) {
       // Note: `markdown-rs` also parses GFM footnotes here, which for us is in
       // an extension.

       // Resource (`[asd](fgh)`)?
       if (code === 40) {
         return effects.attempt(
           resourceConstruct,
           labelEndOk,
           defined ? labelEndOk : labelEndNok
         )(code)
       }

       // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?
       if (code === 91) {
         return effects.attempt(
           referenceFullConstruct,
           labelEndOk,
           defined ? referenceNotFull : labelEndNok
         )(code)
       }

       // Shortcut (`[asd]`) reference?
       return defined ? labelEndOk(code) : labelEndNok(code)
     }

     /**
      * After `]`, at `[`, but not at a full reference.
      *
      * > 👉 **Note**: we only get here if the label is defined.
      *
      * ```markdown
      * > | [a][] b
      *        ^
      * > | [a] b
      *        ^
      * ```
      *
      * @type {State}
      */
     function referenceNotFull(code) {
       return effects.attempt(
         referenceCollapsedConstruct,
         labelEndOk,
         labelEndNok
       )(code)
     }

     /**
      * Done, we found something.
      *
      * ```markdown
      * > | [a](b) c
      *           ^
      * > | [a][b] c
      *           ^
      * > | [a][] b
      *          ^
      * > | [a] b
      *        ^
      * ```
      *
      * @type {State}
      */
     function labelEndOk(code) {
       // Note: `markdown-rs` does a bunch of stuff here.
       return ok(code)
     }

     /**
      * Done, it’s nothing.
      *
      * There was an okay opening, but we didn’t match anything.
      *
      * ```markdown
      * > | [a](b c
      *        ^
      * > | [a][b c
      *        ^
      * > | [a] b
      *        ^
      * ```
      *
      * @type {State}
      */
     function labelEndNok(code) {
       labelStart._balanced = true;
       return nok(code)
     }
   }

   /**
    * @this {TokenizeContext}
    * @type {Tokenizer}
    */
   function tokenizeResource(effects, ok, nok) {
     return resourceStart

     /**
      * At a resource.
      *
      * ```markdown
      * > | [a](b) c
      *        ^
      * ```
      *
      * @type {State}
      */
     function resourceStart(code) {
       effects.enter('resource');
       effects.enter('resourceMarker');
       effects.consume(code);
       effects.exit('resourceMarker');
       return resourceBefore
     }

     /**
      * In resource, after `(`, at optional whitespace.
      *
      * ```markdown
      * > | [a](b) c
      *         ^
      * ```
      *
      * @type {State}
      */
     function resourceBefore(code) {
       return markdownLineEndingOrSpace(code)
         ? factoryWhitespace(effects, resourceOpen)(code)
         : resourceOpen(code)
     }

     /**
      * In resource, after optional whitespace, at `)` or a destination.
      *
      * ```markdown
      * > | [a](b) c
      *         ^
      * ```
      *
      * @type {State}
      */
     function resourceOpen(code) {
       if (code === 41) {
         return resourceEnd(code)
       }
       return factoryDestination(
         effects,
         resourceDestinationAfter,
         resourceDestinationMissing,
         'resourceDestination',
         'resourceDestinationLiteral',
         'resourceDestinationLiteralMarker',
         'resourceDestinationRaw',
         'resourceDestinationString',
         32
       )(code)
     }

     /**
      * In resource, after destination, at optional whitespace.
      *
      * ```markdown
      * > | [a](b) c
      *          ^
      * ```
      *
      * @type {State}
      */
     function resourceDestinationAfter(code) {
       return markdownLineEndingOrSpace(code)
         ? factoryWhitespace(effects, resourceBetween)(code)
         : resourceEnd(code)
     }

     /**
      * At invalid destination.
      *
      * ```markdown
      * > | [a](<<) b
      *         ^
      * ```
      *
      * @type {State}
      */
     function resourceDestinationMissing(code) {
       return nok(code)
     }

     /**
      * In resource, after destination and whitespace, at `(` or title.
      *
      * ```markdown
      * > | [a](b ) c
      *           ^
      * ```
      *
      * @type {State}
      */
     function resourceBetween(code) {
       if (code === 34 || code === 39 || code === 40) {
         return factoryTitle(
           effects,
           resourceTitleAfter,
           nok,
           'resourceTitle',
           'resourceTitleMarker',
           'resourceTitleString'
         )(code)
       }
       return resourceEnd(code)
     }

     /**
      * In resource, after title, at optional whitespace.
      *
      * ```markdown
      * > | [a](b "c") d
      *              ^
      * ```
      *
      * @type {State}
      */
     function resourceTitleAfter(code) {
       return markdownLineEndingOrSpace(code)
         ? factoryWhitespace(effects, resourceEnd)(code)
         : resourceEnd(code)
     }

     /**
      * In resource, at `)`.
      *
      * ```markdown
      * > | [a](b) d
      *          ^
      * ```
      *
      * @type {State}
      */
     function resourceEnd(code) {
       if (code === 41) {
         effects.enter('resourceMarker');
         effects.consume(code);
         effects.exit('resourceMarker');
         effects.exit('resource');
         return ok
       }
       return nok(code)
     }
   }

   /**
    * @this {TokenizeContext}
    * @type {Tokenizer}
    */
   function tokenizeReferenceFull(effects, ok, nok) {
     const self = this;
     return referenceFull

     /**
      * In a reference (full), at the `[`.
      *
      * ```markdown
      * > | [a][b] d
      *        ^
      * ```
      *
      * @type {State}
      */
     function referenceFull(code) {
       return factoryLabel$1.call(
         self,
         effects,
         referenceFullAfter,
         referenceFullMissing,
         'reference',
         'referenceMarker',
         'referenceString'
       )(code)
     }

     /**
      * In a reference (full), after `]`.
      *
      * ```markdown
      * > | [a][b] d
      *          ^
      * ```
      *
      * @type {State}
      */
     function referenceFullAfter(code) {
       return self.parser.defined.includes(
         normalizeIdentifier(
           self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)
         )
       )
         ? ok(code)
         : nok(code)
     }

     /**
      * In reference (full) that was missing.
      *
      * ```markdown
      * > | [a][b d
      *        ^
      * ```
      *
      * @type {State}
      */
     function referenceFullMissing(code) {
       return nok(code)
     }
   }

   /**
    * @this {TokenizeContext}
    * @type {Tokenizer}
    */
   function tokenizeReferenceCollapsed(effects, ok, nok) {
     return referenceCollapsedStart

     /**
      * In reference (collapsed), at `[`.
      *
      * > 👉 **Note**: we only get here if the label is defined.
      *
      * ```markdown
      * > | [a][] d
      *        ^
      * ```
      *
      * @type {State}
      */
     function referenceCollapsedStart(code) {
       // We only attempt a collapsed label if there’s a `[`.

       effects.enter('reference');
       effects.enter('referenceMarker');
       effects.consume(code);
       effects.exit('referenceMarker');
       return referenceCollapsedOpen
     }

     /**
      * In reference (collapsed), at `]`.
      *
      * > 👉 **Note**: we only get here if the label is defined.
      *
      * ```markdown
      * > | [a][] d
      *         ^
      * ```
      *
      *  @type {State}
      */
     function referenceCollapsedOpen(code) {
       if (code === 93) {
         effects.enter('referenceMarker');
         effects.consume(code);
         effects.exit('referenceMarker');
         effects.exit('reference');
         return ok
       }
       return nok(code)
     }
   }

   /**
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    */


   /** @type {Construct} */
   const labelStartImage = {
     name: 'labelStartImage',
     tokenize: tokenizeLabelStartImage,
     resolveAll: labelEnd.resolveAll
   };

   /**
    * @this {TokenizeContext}
    * @type {Tokenizer}
    */
   function tokenizeLabelStartImage(effects, ok, nok) {
     const self = this;
     return start

     /**
      * Start of label (image) start.
      *
      * ```markdown
      * > | a ![b] c
      *       ^
      * ```
      *
      * @type {State}
      */
     function start(code) {
       effects.enter('labelImage');
       effects.enter('labelImageMarker');
       effects.consume(code);
       effects.exit('labelImageMarker');
       return open
     }

     /**
      * After `!`, at `[`.
      *
      * ```markdown
      * > | a ![b] c
      *        ^
      * ```
      *
      * @type {State}
      */
     function open(code) {
       if (code === 91) {
         effects.enter('labelMarker');
         effects.consume(code);
         effects.exit('labelMarker');
         effects.exit('labelImage');
         return after
       }
       return nok(code)
     }

     /**
      * After `![`.
      *
      * ```markdown
      * > | a ![b] c
      *         ^
      * ```
      *
      * This is needed in because, when GFM footnotes are enabled, images never
      * form when started with a `^`.
      * Instead, links form:
      *
      * ```markdown
      * ![^a](b)
      *
      * ![^a][b]
      *
      * [b]: c
      * ```
      *
      * ```html
      * <p>!<a href=\"b\">^a</a></p>
      * <p>!<a href=\"c\">^a</a></p>
      * ```
      *
      * @type {State}
      */
     function after(code) {
       // To do: use a new field to do this, this is still needed for
       // `micromark-extension-gfm-footnote`, but the `label-start-link`
       // behavior isn’t.
       // Hidden footnotes hook.
       /* c8 ignore next 3 */
       return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs
         ? nok(code)
         : ok(code)
     }
   }

   /**
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    */


   /** @type {Construct} */
   const labelStartLink = {
     name: 'labelStartLink',
     tokenize: tokenizeLabelStartLink,
     resolveAll: labelEnd.resolveAll
   };

   /**
    * @this {TokenizeContext}
    * @type {Tokenizer}
    */
   function tokenizeLabelStartLink(effects, ok, nok) {
     const self = this;
     return start

     /**
      * Start of label (link) start.
      *
      * ```markdown
      * > | a [b] c
      *       ^
      * ```
      *
      * @type {State}
      */
     function start(code) {
       effects.enter('labelLink');
       effects.enter('labelMarker');
       effects.consume(code);
       effects.exit('labelMarker');
       effects.exit('labelLink');
       return after
     }

     /** @type {State} */
     function after(code) {
       // To do: this isn’t needed in `micromark-extension-gfm-footnote`,
       // remove.
       // Hidden footnotes hook.
       /* c8 ignore next 3 */
       return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs
         ? nok(code)
         : ok(code)
     }
   }

   /**
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    */

   /** @type {Construct} */
   const lineEnding = {
     name: 'lineEnding',
     tokenize: tokenizeLineEnding
   };

   /**
    * @this {TokenizeContext}
    * @type {Tokenizer}
    */
   function tokenizeLineEnding(effects, ok) {
     return start

     /** @type {State} */
     function start(code) {
       effects.enter('lineEnding');
       effects.consume(code);
       effects.exit('lineEnding');
       return factorySpace(effects, ok, 'linePrefix')
     }
   }

   /**
    * @typedef {import('micromark-util-types').Code} Code
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    */

   /** @type {Construct} */
   const thematicBreak$2 = {
     name: 'thematicBreak',
     tokenize: tokenizeThematicBreak
   };

   /**
    * @this {TokenizeContext}
    * @type {Tokenizer}
    */
   function tokenizeThematicBreak(effects, ok, nok) {
     let size = 0;
     /** @type {NonNullable<Code>} */
     let marker;
     return start

     /**
      * Start of thematic break.
      *
      * ```markdown
      * > | ***
      *     ^
      * ```
      *
      * @type {State}
      */
     function start(code) {
       effects.enter('thematicBreak');
       // To do: parse indent like `markdown-rs`.
       return before(code)
     }

     /**
      * After optional whitespace, at marker.
      *
      * ```markdown
      * > | ***
      *     ^
      * ```
      *
      * @type {State}
      */
     function before(code) {
       marker = code;
       return atBreak(code)
     }

     /**
      * After something, before something else.
      *
      * ```markdown
      * > | ***
      *     ^
      * ```
      *
      * @type {State}
      */
     function atBreak(code) {
       if (code === marker) {
         effects.enter('thematicBreakSequence');
         return sequence(code)
       }
       if (size >= 3 && (code === null || markdownLineEnding(code))) {
         effects.exit('thematicBreak');
         return ok(code)
       }
       return nok(code)
     }

     /**
      * In sequence.
      *
      * ```markdown
      * > | ***
      *     ^
      * ```
      *
      * @type {State}
      */
     function sequence(code) {
       if (code === marker) {
         effects.consume(code);
         size++;
         return sequence
       }
       effects.exit('thematicBreakSequence');
       return markdownSpace(code)
         ? factorySpace(effects, atBreak, 'whitespace')(code)
         : atBreak(code)
     }
   }

   /**
    * @typedef {import('micromark-util-types').Code} Code
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').ContainerState} ContainerState
    * @typedef {import('micromark-util-types').Exiter} Exiter
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    */


   /** @type {Construct} */
   const list$3 = {
     name: 'list',
     tokenize: tokenizeListStart,
     continuation: {
       tokenize: tokenizeListContinuation
     },
     exit: tokenizeListEnd
   };

   /** @type {Construct} */
   const listItemPrefixWhitespaceConstruct = {
     tokenize: tokenizeListItemPrefixWhitespace,
     partial: true
   };

   /** @type {Construct} */
   const indentConstruct$1 = {
     tokenize: tokenizeIndent$1,
     partial: true
   };

   // To do: `markdown-rs` parses list items on their own and later stitches them
   // together.

   /**
    * @type {Tokenizer}
    * @this {TokenizeContext}
    */
   function tokenizeListStart(effects, ok, nok) {
     const self = this;
     const tail = self.events[self.events.length - 1];
     let initialSize =
       tail && tail[1].type === 'linePrefix'
         ? tail[2].sliceSerialize(tail[1], true).length
         : 0;
     let size = 0;
     return start

     /** @type {State} */
     function start(code) {
       const kind =
         self.containerState.type ||
         (code === 42 || code === 43 || code === 45
           ? 'listUnordered'
           : 'listOrdered');
       if (
         kind === 'listUnordered'
           ? !self.containerState.marker || code === self.containerState.marker
           : asciiDigit(code)
       ) {
         if (!self.containerState.type) {
           self.containerState.type = kind;
           effects.enter(kind, {
             _container: true
           });
         }
         if (kind === 'listUnordered') {
           effects.enter('listItemPrefix');
           return code === 42 || code === 45
             ? effects.check(thematicBreak$2, nok, atMarker)(code)
             : atMarker(code)
         }
         if (!self.interrupt || code === 49) {
           effects.enter('listItemPrefix');
           effects.enter('listItemValue');
           return inside(code)
         }
       }
       return nok(code)
     }

     /** @type {State} */
     function inside(code) {
       if (asciiDigit(code) && ++size < 10) {
         effects.consume(code);
         return inside
       }
       if (
         (!self.interrupt || size < 2) &&
         (self.containerState.marker
           ? code === self.containerState.marker
           : code === 41 || code === 46)
       ) {
         effects.exit('listItemValue');
         return atMarker(code)
       }
       return nok(code)
     }

     /**
      * @type {State}
      **/
     function atMarker(code) {
       effects.enter('listItemMarker');
       effects.consume(code);
       effects.exit('listItemMarker');
       self.containerState.marker = self.containerState.marker || code;
       return effects.check(
         blankLine$1,
         // Can’t be empty when interrupting.
         self.interrupt ? nok : onBlank,
         effects.attempt(
           listItemPrefixWhitespaceConstruct,
           endOfPrefix,
           otherPrefix
         )
       )
     }

     /** @type {State} */
     function onBlank(code) {
       self.containerState.initialBlankLine = true;
       initialSize++;
       return endOfPrefix(code)
     }

     /** @type {State} */
     function otherPrefix(code) {
       if (markdownSpace(code)) {
         effects.enter('listItemPrefixWhitespace');
         effects.consume(code);
         effects.exit('listItemPrefixWhitespace');
         return endOfPrefix
       }
       return nok(code)
     }

     /** @type {State} */
     function endOfPrefix(code) {
       self.containerState.size =
         initialSize +
         self.sliceSerialize(effects.exit('listItemPrefix'), true).length;
       return ok(code)
     }
   }

   /**
    * @type {Tokenizer}
    * @this {TokenizeContext}
    */
   function tokenizeListContinuation(effects, ok, nok) {
     const self = this;
     self.containerState._closeFlow = undefined;
     return effects.check(blankLine$1, onBlank, notBlank)

     /** @type {State} */
     function onBlank(code) {
       self.containerState.furtherBlankLines =
         self.containerState.furtherBlankLines ||
         self.containerState.initialBlankLine;

       // We have a blank line.
       // Still, try to consume at most the items size.
       return factorySpace(
         effects,
         ok,
         'listItemIndent',
         self.containerState.size + 1
       )(code)
     }

     /** @type {State} */
     function notBlank(code) {
       if (self.containerState.furtherBlankLines || !markdownSpace(code)) {
         self.containerState.furtherBlankLines = undefined;
         self.containerState.initialBlankLine = undefined;
         return notInCurrentItem(code)
       }
       self.containerState.furtherBlankLines = undefined;
       self.containerState.initialBlankLine = undefined;
       return effects.attempt(indentConstruct$1, ok, notInCurrentItem)(code)
     }

     /** @type {State} */
     function notInCurrentItem(code) {
       // While we do continue, we signal that the flow should be closed.
       self.containerState._closeFlow = true;
       // As we’re closing flow, we’re no longer interrupting.
       self.interrupt = undefined;
       // Always populated by defaults.

       return factorySpace(
         effects,
         effects.attempt(list$3, ok, nok),
         'linePrefix',
         self.parser.constructs.disable.null.includes('codeIndented')
           ? undefined
           : 4
       )(code)
     }
   }

   /**
    * @type {Tokenizer}
    * @this {TokenizeContext}
    */
   function tokenizeIndent$1(effects, ok, nok) {
     const self = this;
     return factorySpace(
       effects,
       afterPrefix,
       'listItemIndent',
       self.containerState.size + 1
     )

     /** @type {State} */
     function afterPrefix(code) {
       const tail = self.events[self.events.length - 1];
       return tail &&
         tail[1].type === 'listItemIndent' &&
         tail[2].sliceSerialize(tail[1], true).length === self.containerState.size
         ? ok(code)
         : nok(code)
     }
   }

   /**
    * @type {Exiter}
    * @this {TokenizeContext}
    */
   function tokenizeListEnd(effects) {
     effects.exit(this.containerState.type);
   }

   /**
    * @type {Tokenizer}
    * @this {TokenizeContext}
    */
   function tokenizeListItemPrefixWhitespace(effects, ok, nok) {
     const self = this;

     // Always populated by defaults.

     return factorySpace(
       effects,
       afterPrefix,
       'listItemPrefixWhitespace',
       self.parser.constructs.disable.null.includes('codeIndented')
         ? undefined
         : 4 + 1
     )

     /** @type {State} */
     function afterPrefix(code) {
       const tail = self.events[self.events.length - 1];
       return !markdownSpace(code) &&
         tail &&
         tail[1].type === 'listItemPrefixWhitespace'
         ? ok(code)
         : nok(code)
     }
   }

   /**
    * @typedef {import('micromark-util-types').Code} Code
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').Resolver} Resolver
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    */

   /** @type {Construct} */
   const setextUnderline = {
     name: 'setextUnderline',
     tokenize: tokenizeSetextUnderline,
     resolveTo: resolveToSetextUnderline
   };

   /** @type {Resolver} */
   function resolveToSetextUnderline(events, context) {
     // To do: resolve like `markdown-rs`.
     let index = events.length;
     /** @type {number | undefined} */
     let content;
     /** @type {number | undefined} */
     let text;
     /** @type {number | undefined} */
     let definition;

     // Find the opening of the content.
     // It’ll always exist: we don’t tokenize if it isn’t there.
     while (index--) {
       if (events[index][0] === 'enter') {
         if (events[index][1].type === 'content') {
           content = index;
           break
         }
         if (events[index][1].type === 'paragraph') {
           text = index;
         }
       }
       // Exit
       else {
         if (events[index][1].type === 'content') {
           // Remove the content end (if needed we’ll add it later)
           events.splice(index, 1);
         }
         if (!definition && events[index][1].type === 'definition') {
           definition = index;
         }
       }
     }
     const heading = {
       type: 'setextHeading',
       start: Object.assign({}, events[text][1].start),
       end: Object.assign({}, events[events.length - 1][1].end)
     };

     // Change the paragraph to setext heading text.
     events[text][1].type = 'setextHeadingText';

     // If we have definitions in the content, we’ll keep on having content,
     // but we need move it.
     if (definition) {
       events.splice(text, 0, ['enter', heading, context]);
       events.splice(definition + 1, 0, ['exit', events[content][1], context]);
       events[content][1].end = Object.assign({}, events[definition][1].end);
     } else {
       events[content][1] = heading;
     }

     // Add the heading exit at the end.
     events.push(['exit', heading, context]);
     return events
   }

   /**
    * @this {TokenizeContext}
    * @type {Tokenizer}
    */
   function tokenizeSetextUnderline(effects, ok, nok) {
     const self = this;
     /** @type {NonNullable<Code>} */
     let marker;
     return start

     /**
      * At start of heading (setext) underline.
      *
      * ```markdown
      *   | aa
      * > | ==
      *     ^
      * ```
      *
      * @type {State}
      */
     function start(code) {
       let index = self.events.length;
       /** @type {boolean | undefined} */
       let paragraph;
       // Find an opening.
       while (index--) {
         // Skip enter/exit of line ending, line prefix, and content.
         // We can now either have a definition or a paragraph.
         if (
           self.events[index][1].type !== 'lineEnding' &&
           self.events[index][1].type !== 'linePrefix' &&
           self.events[index][1].type !== 'content'
         ) {
           paragraph = self.events[index][1].type === 'paragraph';
           break
         }
       }

       // To do: handle lazy/pierce like `markdown-rs`.
       // To do: parse indent like `markdown-rs`.
       if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {
         effects.enter('setextHeadingLine');
         marker = code;
         return before(code)
       }
       return nok(code)
     }

     /**
      * After optional whitespace, at `-` or `=`.
      *
      * ```markdown
      *   | aa
      * > | ==
      *     ^
      * ```
      *
      * @type {State}
      */
     function before(code) {
       effects.enter('setextHeadingLineSequence');
       return inside(code)
     }

     /**
      * In sequence.
      *
      * ```markdown
      *   | aa
      * > | ==
      *     ^
      * ```
      *
      * @type {State}
      */
     function inside(code) {
       if (code === marker) {
         effects.consume(code);
         return inside
       }
       effects.exit('setextHeadingLineSequence');
       return markdownSpace(code)
         ? factorySpace(effects, after, 'lineSuffix')(code)
         : after(code)
     }

     /**
      * After sequence, after optional whitespace.
      *
      * ```markdown
      *   | aa
      * > | ==
      *       ^
      * ```
      *
      * @type {State}
      */
     function after(code) {
       if (code === null || markdownLineEnding(code)) {
         effects.exit('setextHeadingLine');
         return ok(code)
       }
       return nok(code)
     }
   }

   /**
    * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
    * @typedef {import('micromark-util-types').Initializer} Initializer
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
    */

   /** @type {InitialConstruct} */
   const flow$1 = {
     tokenize: initializeFlow
   };

   /**
    * @this {TokenizeContext}
    * @type {Initializer}
    */
   function initializeFlow(effects) {
     const self = this;
     const initial = effects.attempt(
       // Try to parse a blank line.
       blankLine$1,
       atBlankEnding,
       // Try to parse initial flow (essentially, only code).
       effects.attempt(
         this.parser.constructs.flowInitial,
         afterConstruct,
         factorySpace(
           effects,
           effects.attempt(
             this.parser.constructs.flow,
             afterConstruct,
             effects.attempt(content$1, afterConstruct)
           ),
           'linePrefix'
         )
       )
     );
     return initial

     /** @type {State} */
     function atBlankEnding(code) {
       if (code === null) {
         effects.consume(code);
         return
       }
       effects.enter('lineEndingBlank');
       effects.consume(code);
       effects.exit('lineEndingBlank');
       self.currentConstruct = undefined;
       return initial
     }

     /** @type {State} */
     function afterConstruct(code) {
       if (code === null) {
         effects.consume(code);
         return
       }
       effects.enter('lineEnding');
       effects.consume(code);
       effects.exit('lineEnding');
       self.currentConstruct = undefined;
       return initial
     }
   }

   /**
    * @typedef {import('micromark-util-types').Code} Code
    * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
    * @typedef {import('micromark-util-types').Initializer} Initializer
    * @typedef {import('micromark-util-types').Resolver} Resolver
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
    */

   const resolver = {
     resolveAll: createResolver()
   };
   const string$2 = initializeFactory('string');
   const text$4 = initializeFactory('text');

   /**
    * @param {'string' | 'text'} field
    * @returns {InitialConstruct}
    */
   function initializeFactory(field) {
     return {
       tokenize: initializeText,
       resolveAll: createResolver(
         field === 'text' ? resolveAllLineSuffixes : undefined
       )
     }

     /**
      * @this {TokenizeContext}
      * @type {Initializer}
      */
     function initializeText(effects) {
       const self = this;
       const constructs = this.parser.constructs[field];
       const text = effects.attempt(constructs, start, notText);
       return start

       /** @type {State} */
       function start(code) {
         return atBreak(code) ? text(code) : notText(code)
       }

       /** @type {State} */
       function notText(code) {
         if (code === null) {
           effects.consume(code);
           return
         }
         effects.enter('data');
         effects.consume(code);
         return data
       }

       /** @type {State} */
       function data(code) {
         if (atBreak(code)) {
           effects.exit('data');
           return text(code)
         }

         // Data.
         effects.consume(code);
         return data
       }

       /**
        * @param {Code} code
        * @returns {boolean}
        */
       function atBreak(code) {
         if (code === null) {
           return true
         }
         const list = constructs[code];
         let index = -1;
         if (list) {
           // Always populated by defaults.

           while (++index < list.length) {
             const item = list[index];
             if (!item.previous || item.previous.call(self, self.previous)) {
               return true
             }
           }
         }
         return false
       }
     }
   }

   /**
    * @param {Resolver | undefined} [extraResolver]
    * @returns {Resolver}
    */
   function createResolver(extraResolver) {
     return resolveAllText

     /** @type {Resolver} */
     function resolveAllText(events, context) {
       let index = -1;
       /** @type {number | undefined} */
       let enter;

       // A rather boring computation (to merge adjacent `data` events) which
       // improves mm performance by 29%.
       while (++index <= events.length) {
         if (enter === undefined) {
           if (events[index] && events[index][1].type === 'data') {
             enter = index;
             index++;
           }
         } else if (!events[index] || events[index][1].type !== 'data') {
           // Don’t do anything if there is one data token.
           if (index !== enter + 2) {
             events[enter][1].end = events[index - 1][1].end;
             events.splice(enter + 2, index - enter - 2);
             index = enter + 2;
           }
           enter = undefined;
         }
       }
       return extraResolver ? extraResolver(events, context) : events
     }
   }

   /**
    * A rather ugly set of instructions which again looks at chunks in the input
    * stream.
    * The reason to do this here is that it is *much* faster to parse in reverse.
    * And that we can’t hook into `null` to split the line suffix before an EOF.
    * To do: figure out if we can make this into a clean utility, or even in core.
    * As it will be useful for GFMs literal autolink extension (and maybe even
    * tables?)
    *
    * @type {Resolver}
    */
   function resolveAllLineSuffixes(events, context) {
     let eventIndex = 0; // Skip first.

     while (++eventIndex <= events.length) {
       if (
         (eventIndex === events.length ||
           events[eventIndex][1].type === 'lineEnding') &&
         events[eventIndex - 1][1].type === 'data'
       ) {
         const data = events[eventIndex - 1][1];
         const chunks = context.sliceStream(data);
         let index = chunks.length;
         let bufferIndex = -1;
         let size = 0;
         /** @type {boolean | undefined} */
         let tabs;
         while (index--) {
           const chunk = chunks[index];
           if (typeof chunk === 'string') {
             bufferIndex = chunk.length;
             while (chunk.charCodeAt(bufferIndex - 1) === 32) {
               size++;
               bufferIndex--;
             }
             if (bufferIndex) break
             bufferIndex = -1;
           }
           // Number
           else if (chunk === -2) {
             tabs = true;
             size++;
           } else if (chunk === -1) ; else {
             // Replacement character, exit.
             index++;
             break
           }
         }
         if (size) {
           const token = {
             type:
               eventIndex === events.length || tabs || size < 2
                 ? 'lineSuffix'
                 : 'hardBreakTrailing',
             start: {
               line: data.end.line,
               column: data.end.column - size,
               offset: data.end.offset - size,
               _index: data.start._index + index,
               _bufferIndex: index
                 ? bufferIndex
                 : data.start._bufferIndex + bufferIndex
             },
             end: Object.assign({}, data.end)
           };
           data.end = Object.assign({}, token.start);
           if (data.start.offset === data.end.offset) {
             Object.assign(data, token);
           } else {
             events.splice(
               eventIndex,
               0,
               ['enter', token, context],
               ['exit', token, context]
             );
             eventIndex += 2;
           }
         }
         eventIndex++;
       }
     }
     return events
   }

   /**
    * @typedef {import('micromark-util-types').Chunk} Chunk
    * @typedef {import('micromark-util-types').Code} Code
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord
    * @typedef {import('micromark-util-types').Effects} Effects
    * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
    * @typedef {import('micromark-util-types').ParseContext} ParseContext
    * @typedef {import('micromark-util-types').Point} Point
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').Token} Token
    * @typedef {import('micromark-util-types').TokenType} TokenType
    * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
    */

   /**
    * Create a tokenizer.
    * Tokenizers deal with one type of data (e.g., containers, flow, text).
    * The parser is the object dealing with it all.
    * `initialize` works like other constructs, except that only its `tokenize`
    * function is used, in which case it doesn’t receive an `ok` or `nok`.
    * `from` can be given to set the point before the first character, although
    * when further lines are indented, they must be set with `defineSkip`.
    *
    * @param {ParseContext} parser
    * @param {InitialConstruct} initialize
    * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]
    * @returns {TokenizeContext}
    */
   function createTokenizer(parser, initialize, from) {
     /** @type {Point} */
     let point = Object.assign(
       from
         ? Object.assign({}, from)
         : {
             line: 1,
             column: 1,
             offset: 0
           },
       {
         _index: 0,
         _bufferIndex: -1
       }
     );
     /** @type {Record<string, number>} */
     const columnStart = {};
     /** @type {Array<Construct>} */
     const resolveAllConstructs = [];
     /** @type {Array<Chunk>} */
     let chunks = [];
     /** @type {Array<Token>} */
     let stack = [];

     /**
      * Tools used for tokenizing.
      *
      * @type {Effects}
      */
     const effects = {
       consume,
       enter,
       exit,
       attempt: constructFactory(onsuccessfulconstruct),
       check: constructFactory(onsuccessfulcheck),
       interrupt: constructFactory(onsuccessfulcheck, {
         interrupt: true
       })
     };

     /**
      * State and tools for resolving and serializing.
      *
      * @type {TokenizeContext}
      */
     const context = {
       previous: null,
       code: null,
       containerState: {},
       events: [],
       parser,
       sliceStream,
       sliceSerialize,
       now,
       defineSkip,
       write
     };

     /**
      * The state function.
      *
      * @type {State | void}
      */
     let state = initialize.tokenize.call(context, effects);
     if (initialize.resolveAll) {
       resolveAllConstructs.push(initialize);
     }
     return context

     /** @type {TokenizeContext['write']} */
     function write(slice) {
       chunks = push$1(chunks, slice);
       main();

       // Exit if we’re not done, resolve might change stuff.
       if (chunks[chunks.length - 1] !== null) {
         return []
       }
       addResult(initialize, 0);

       // Otherwise, resolve, and exit.
       context.events = resolveAll(resolveAllConstructs, context.events, context);
       return context.events
     }

     //
     // Tools.
     //

     /** @type {TokenizeContext['sliceSerialize']} */
     function sliceSerialize(token, expandTabs) {
       return serializeChunks(sliceStream(token), expandTabs)
     }

     /** @type {TokenizeContext['sliceStream']} */
     function sliceStream(token) {
       return sliceChunks(chunks, token)
     }

     /** @type {TokenizeContext['now']} */
     function now() {
       // This is a hot path, so we clone manually instead of `Object.assign({}, point)`
       const {line, column, offset, _index, _bufferIndex} = point;
       return {
         line,
         column,
         offset,
         _index,
         _bufferIndex
       }
     }

     /** @type {TokenizeContext['defineSkip']} */
     function defineSkip(value) {
       columnStart[value.line] = value.column;
       accountForPotentialSkip();
     }

     //
     // State management.
     //

     /**
      * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by
      * `consume`).
      * Here is where we walk through the chunks, which either include strings of
      * several characters, or numerical character codes.
      * The reason to do this in a loop instead of a call is so the stack can
      * drain.
      *
      * @returns {void}
      */
     function main() {
       /** @type {number} */
       let chunkIndex;
       while (point._index < chunks.length) {
         const chunk = chunks[point._index];

         // If we’re in a buffer chunk, loop through it.
         if (typeof chunk === 'string') {
           chunkIndex = point._index;
           if (point._bufferIndex < 0) {
             point._bufferIndex = 0;
           }
           while (
             point._index === chunkIndex &&
             point._bufferIndex < chunk.length
           ) {
             go(chunk.charCodeAt(point._bufferIndex));
           }
         } else {
           go(chunk);
         }
       }
     }

     /**
      * Deal with one code.
      *
      * @param {Code} code
      * @returns {void}
      */
     function go(code) {
       state = state(code);
     }

     /** @type {Effects['consume']} */
     function consume(code) {
       if (markdownLineEnding(code)) {
         point.line++;
         point.column = 1;
         point.offset += code === -3 ? 2 : 1;
         accountForPotentialSkip();
       } else if (code !== -1) {
         point.column++;
         point.offset++;
       }

       // Not in a string chunk.
       if (point._bufferIndex < 0) {
         point._index++;
       } else {
         point._bufferIndex++;

         // At end of string chunk.
         // @ts-expect-error Points w/ non-negative `_bufferIndex` reference
         // strings.
         if (point._bufferIndex === chunks[point._index].length) {
           point._bufferIndex = -1;
           point._index++;
         }
       }

       // Expose the previous character.
       context.previous = code;
     }

     /** @type {Effects['enter']} */
     function enter(type, fields) {
       /** @type {Token} */
       // @ts-expect-error Patch instead of assign required fields to help GC.
       const token = fields || {};
       token.type = type;
       token.start = now();
       context.events.push(['enter', token, context]);
       stack.push(token);
       return token
     }

     /** @type {Effects['exit']} */
     function exit(type) {
       const token = stack.pop();
       token.end = now();
       context.events.push(['exit', token, context]);
       return token
     }

     /**
      * Use results.
      *
      * @type {ReturnHandle}
      */
     function onsuccessfulconstruct(construct, info) {
       addResult(construct, info.from);
     }

     /**
      * Discard results.
      *
      * @type {ReturnHandle}
      */
     function onsuccessfulcheck(_, info) {
       info.restore();
     }

     /**
      * Factory to attempt/check/interrupt.
      *
      * @param {ReturnHandle} onreturn
      * @param {{interrupt?: boolean | undefined} | undefined} [fields]
      */
     function constructFactory(onreturn, fields) {
       return hook

       /**
        * Handle either an object mapping codes to constructs, a list of
        * constructs, or a single construct.
        *
        * @param {Array<Construct> | Construct | ConstructRecord} constructs
        * @param {State} returnState
        * @param {State | undefined} [bogusState]
        * @returns {State}
        */
       function hook(constructs, returnState, bogusState) {
         /** @type {Array<Construct>} */
         let listOfConstructs;
         /** @type {number} */
         let constructIndex;
         /** @type {Construct} */
         let currentConstruct;
         /** @type {Info} */
         let info;
         return Array.isArray(constructs) /* c8 ignore next 1 */
           ? handleListOfConstructs(constructs)
           : 'tokenize' in constructs
           ? // @ts-expect-error Looks like a construct.
             handleListOfConstructs([constructs])
           : handleMapOfConstructs(constructs)

         /**
          * Handle a list of construct.
          *
          * @param {ConstructRecord} map
          * @returns {State}
          */
         function handleMapOfConstructs(map) {
           return start

           /** @type {State} */
           function start(code) {
             const def = code !== null && map[code];
             const all = code !== null && map.null;
             const list = [
               // To do: add more extension tests.
               /* c8 ignore next 2 */
               ...(Array.isArray(def) ? def : def ? [def] : []),
               ...(Array.isArray(all) ? all : all ? [all] : [])
             ];
             return handleListOfConstructs(list)(code)
           }
         }

         /**
          * Handle a list of construct.
          *
          * @param {Array<Construct>} list
          * @returns {State}
          */
         function handleListOfConstructs(list) {
           listOfConstructs = list;
           constructIndex = 0;
           if (list.length === 0) {
             return bogusState
           }
           return handleConstruct(list[constructIndex])
         }

         /**
          * Handle a single construct.
          *
          * @param {Construct} construct
          * @returns {State}
          */
         function handleConstruct(construct) {
           return start

           /** @type {State} */
           function start(code) {
             // To do: not needed to store if there is no bogus state, probably?
             // Currently doesn’t work because `inspect` in document does a check
             // w/o a bogus, which doesn’t make sense. But it does seem to help perf
             // by not storing.
             info = store();
             currentConstruct = construct;
             if (!construct.partial) {
               context.currentConstruct = construct;
             }

             // Always populated by defaults.

             if (
               construct.name &&
               context.parser.constructs.disable.null.includes(construct.name)
             ) {
               return nok()
             }
             return construct.tokenize.call(
               // If we do have fields, create an object w/ `context` as its
               // prototype.
               // This allows a “live binding”, which is needed for `interrupt`.
               fields ? Object.assign(Object.create(context), fields) : context,
               effects,
               ok,
               nok
             )(code)
           }
         }

         /** @type {State} */
         function ok(code) {
           onreturn(currentConstruct, info);
           return returnState
         }

         /** @type {State} */
         function nok(code) {
           info.restore();
           if (++constructIndex < listOfConstructs.length) {
             return handleConstruct(listOfConstructs[constructIndex])
           }
           return bogusState
         }
       }
     }

     /**
      * @param {Construct} construct
      * @param {number} from
      * @returns {void}
      */
     function addResult(construct, from) {
       if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {
         resolveAllConstructs.push(construct);
       }
       if (construct.resolve) {
         splice(
           context.events,
           from,
           context.events.length - from,
           construct.resolve(context.events.slice(from), context)
         );
       }
       if (construct.resolveTo) {
         context.events = construct.resolveTo(context.events, context);
       }
     }

     /**
      * Store state.
      *
      * @returns {Info}
      */
     function store() {
       const startPoint = now();
       const startPrevious = context.previous;
       const startCurrentConstruct = context.currentConstruct;
       const startEventsIndex = context.events.length;
       const startStack = Array.from(stack);
       return {
         restore,
         from: startEventsIndex
       }

       /**
        * Restore state.
        *
        * @returns {void}
        */
       function restore() {
         point = startPoint;
         context.previous = startPrevious;
         context.currentConstruct = startCurrentConstruct;
         context.events.length = startEventsIndex;
         stack = startStack;
         accountForPotentialSkip();
       }
     }

     /**
      * Move the current point a bit forward in the line when it’s on a column
      * skip.
      *
      * @returns {void}
      */
     function accountForPotentialSkip() {
       if (point.line in columnStart && point.column < 2) {
         point.column = columnStart[point.line];
         point.offset += columnStart[point.line] - 1;
       }
     }
   }

   /**
    * Get the chunks from a slice of chunks in the range of a token.
    *
    * @param {Array<Chunk>} chunks
    * @param {Pick<Token, 'end' | 'start'>} token
    * @returns {Array<Chunk>}
    */
   function sliceChunks(chunks, token) {
     const startIndex = token.start._index;
     const startBufferIndex = token.start._bufferIndex;
     const endIndex = token.end._index;
     const endBufferIndex = token.end._bufferIndex;
     /** @type {Array<Chunk>} */
     let view;
     if (startIndex === endIndex) {
       // @ts-expect-error `_bufferIndex` is used on string chunks.
       view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];
     } else {
       view = chunks.slice(startIndex, endIndex);
       if (startBufferIndex > -1) {
         const head = view[0];
         if (typeof head === 'string') {
           view[0] = head.slice(startBufferIndex);
         } else {
           view.shift();
         }
       }
       if (endBufferIndex > 0) {
         // @ts-expect-error `_bufferIndex` is used on string chunks.
         view.push(chunks[endIndex].slice(0, endBufferIndex));
       }
     }
     return view
   }

   /**
    * Get the string value of a slice of chunks.
    *
    * @param {Array<Chunk>} chunks
    * @param {boolean | undefined} [expandTabs=false]
    * @returns {string}
    */
   function serializeChunks(chunks, expandTabs) {
     let index = -1;
     /** @type {Array<string>} */
     const result = [];
     /** @type {boolean | undefined} */
     let atTab;
     while (++index < chunks.length) {
       const chunk = chunks[index];
       /** @type {string} */
       let value;
       if (typeof chunk === 'string') {
         value = chunk;
       } else
         switch (chunk) {
           case -5: {
             value = '\r';
             break
           }
           case -4: {
             value = '\n';
             break
           }
           case -3: {
             value = '\r' + '\n';
             break
           }
           case -2: {
             value = expandTabs ? ' ' : '\t';
             break
           }
           case -1: {
             if (!expandTabs && atTab) continue
             value = ' ';
             break
           }
           default: {
             // Currently only replacement character.
             value = String.fromCharCode(chunk);
           }
         }
       atTab = chunk === -2;
       result.push(value);
     }
     return result.join('')
   }

   /**
    * @typedef {import('micromark-util-types').Extension} Extension
    */


   /** @satisfies {Extension['document']} */
   const document$1 = {
     [42]: list$3,
     [43]: list$3,
     [45]: list$3,
     [48]: list$3,
     [49]: list$3,
     [50]: list$3,
     [51]: list$3,
     [52]: list$3,
     [53]: list$3,
     [54]: list$3,
     [55]: list$3,
     [56]: list$3,
     [57]: list$3,
     [62]: blockQuote
   };

   /** @satisfies {Extension['contentInitial']} */
   const contentInitial = {
     [91]: definition$1
   };

   /** @satisfies {Extension['flowInitial']} */
   const flowInitial = {
     [-2]: codeIndented,
     [-1]: codeIndented,
     [32]: codeIndented
   };

   /** @satisfies {Extension['flow']} */
   const flow = {
     [35]: headingAtx,
     [42]: thematicBreak$2,
     [45]: [setextUnderline, thematicBreak$2],
     [60]: htmlFlow,
     [61]: setextUnderline,
     [95]: thematicBreak$2,
     [96]: codeFenced,
     [126]: codeFenced
   };

   /** @satisfies {Extension['string']} */
   const string$1 = {
     [38]: characterReference,
     [92]: characterEscape
   };

   /** @satisfies {Extension['text']} */
   const text$3 = {
     [-5]: lineEnding,
     [-4]: lineEnding,
     [-3]: lineEnding,
     [33]: labelStartImage,
     [38]: characterReference,
     [42]: attention$1,
     [60]: [autolink, htmlText],
     [91]: labelStartLink,
     [92]: [hardBreakEscape, characterEscape],
     [93]: labelEnd,
     [95]: attention$1,
     [96]: codeText
   };

   /** @satisfies {Extension['insideSpan']} */
   const insideSpan = {
     null: [attention$1, resolver]
   };

   /** @satisfies {Extension['attentionMarkers']} */
   const attentionMarkers = {
     null: [42, 95]
   };

   /** @satisfies {Extension['disable']} */
   const disable = {
     null: []
   };

   var defaultConstructs = /*#__PURE__*/Object.freeze({
      __proto__: null,
      attentionMarkers: attentionMarkers,
      contentInitial: contentInitial,
      disable: disable,
      document: document$1,
      flow: flow,
      flowInitial: flowInitial,
      insideSpan: insideSpan,
      string: string$1,
      text: text$3
   });

   /**
    * @typedef {import('micromark-util-types').Create} Create
    * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension
    * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
    * @typedef {import('micromark-util-types').ParseContext} ParseContext
    * @typedef {import('micromark-util-types').ParseOptions} ParseOptions
    */


   /**
    * @param {ParseOptions | null | undefined} [options]
    * @returns {ParseContext}
    */
   function parse(options) {
     const settings = options || {};
     const constructs =
       /** @type {FullNormalizedExtension} */
       combineExtensions([defaultConstructs, ...(settings.extensions || [])]);

     /** @type {ParseContext} */
     const parser = {
       defined: [],
       lazy: {},
       constructs,
       content: create(content$2),
       document: create(document$2),
       flow: create(flow$1),
       string: create(string$2),
       text: create(text$4)
     };
     return parser

     /**
      * @param {InitialConstruct} initial
      */
     function create(initial) {
       return creator
       /** @type {Create} */
       function creator(from) {
         return createTokenizer(parser, initial, from)
       }
     }
   }

   /**
    * @typedef {import('micromark-util-types').Chunk} Chunk
    * @typedef {import('micromark-util-types').Code} Code
    * @typedef {import('micromark-util-types').Encoding} Encoding
    * @typedef {import('micromark-util-types').Value} Value
    */

   /**
    * @callback Preprocessor
    * @param {Value} value
    * @param {Encoding | null | undefined} [encoding]
    * @param {boolean | null | undefined} [end=false]
    * @returns {Array<Chunk>}
    */

   const search = /[\0\t\n\r]/g;

   /**
    * @returns {Preprocessor}
    */
   function preprocess() {
     let column = 1;
     let buffer = '';
     /** @type {boolean | undefined} */
     let start = true;
     /** @type {boolean | undefined} */
     let atCarriageReturn;
     return preprocessor

     /** @type {Preprocessor} */
     function preprocessor(value, encoding, end) {
       /** @type {Array<Chunk>} */
       const chunks = [];
       /** @type {RegExpMatchArray | null} */
       let match;
       /** @type {number} */
       let next;
       /** @type {number} */
       let startPosition;
       /** @type {number} */
       let endPosition;
       /** @type {Code} */
       let code;

       // @ts-expect-error `Buffer` does allow an encoding.
       value = buffer + value.toString(encoding);
       startPosition = 0;
       buffer = '';
       if (start) {
         // To do: `markdown-rs` actually parses BOMs (byte order mark).
         if (value.charCodeAt(0) === 65279) {
           startPosition++;
         }
         start = undefined;
       }
       while (startPosition < value.length) {
         search.lastIndex = startPosition;
         match = search.exec(value);
         endPosition =
           match && match.index !== undefined ? match.index : value.length;
         code = value.charCodeAt(endPosition);
         if (!match) {
           buffer = value.slice(startPosition);
           break
         }
         if (code === 10 && startPosition === endPosition && atCarriageReturn) {
           chunks.push(-3);
           atCarriageReturn = undefined;
         } else {
           if (atCarriageReturn) {
             chunks.push(-5);
             atCarriageReturn = undefined;
           }
           if (startPosition < endPosition) {
             chunks.push(value.slice(startPosition, endPosition));
             column += endPosition - startPosition;
           }
           switch (code) {
             case 0: {
               chunks.push(65533);
               column++;
               break
             }
             case 9: {
               next = Math.ceil(column / 4) * 4;
               chunks.push(-2);
               while (column++ < next) chunks.push(-1);
               break
             }
             case 10: {
               chunks.push(-4);
               column = 1;
               break
             }
             default: {
               atCarriageReturn = true;
               column = 1;
             }
           }
         }
         startPosition = endPosition + 1;
       }
       if (end) {
         if (atCarriageReturn) chunks.push(-5);
         if (buffer) chunks.push(buffer);
         chunks.push(null);
       }
       return chunks
     }
   }

   /**
    * @typedef {import('micromark-util-types').Event} Event
    */


   /**
    * @param {Array<Event>} events
    * @returns {Array<Event>}
    */
   function postprocess(events) {
     while (!subtokenize(events)) {
       // Empty
     }
     return events
   }

   /**
    * Turn the number (in string form as either hexa- or plain decimal) coming from
    * a numeric character reference into a character.
    *
    * Sort of like `String.fromCharCode(Number.parseInt(value, base))`, but makes
    * non-characters and control characters safe.
    *
    * @param {string} value
    *   Value to decode.
    * @param {number} base
    *   Numeric base.
    * @returns {string}
    *   Character.
    */
   function decodeNumericCharacterReference(value, base) {
     const code = Number.parseInt(value, base);
     if (
       // C0 except for HT, LF, FF, CR, space.
       code < 9 ||
       code === 11 ||
       (code > 13 && code < 32) ||
       // Control character (DEL) of C0, and C1 controls.
       (code > 126 && code < 160) ||
       // Lone high surrogates and low surrogates.
       (code > 55295 && code < 57344) ||
       // Noncharacters.
       (code > 64975 && code < 65008) /* eslint-disable no-bitwise */ ||
       (code & 65535) === 65535 ||
       (code & 65535) === 65534 /* eslint-enable no-bitwise */ ||
       // Out of range
       code > 1114111
     ) {
       return '\uFFFD'
     }
     return String.fromCharCode(code)
   }

   const characterEscapeOrReference =
     /\\([!-/:-@[-`{-~])|&(#(?:\d{1,7}|x[\da-f]{1,6})|[\da-z]{1,31});/gi;

   /**
    * Decode markdown strings (which occur in places such as fenced code info
    * strings, destinations, labels, and titles).
    *
    * The “string” content type allows character escapes and -references.
    * This decodes those.
    *
    * @param {string} value
    *   Value to decode.
    * @returns {string}
    *   Decoded value.
    */
   function decodeString(value) {
     return value.replace(characterEscapeOrReference, decode)
   }

   /**
    * @param {string} $0
    * @param {string} $1
    * @param {string} $2
    * @returns {string}
    */
   function decode($0, $1, $2) {
     if ($1) {
       // Escape.
       return $1
     }

     // Reference.
     const head = $2.charCodeAt(0);
     if (head === 35) {
       const head = $2.charCodeAt(1);
       const hex = head === 120 || head === 88;
       return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)
     }
     return decodeNamedCharacterReference($2) || $0
   }

   /**
    * @typedef {import('micromark-util-types').Encoding} Encoding
    * @typedef {import('micromark-util-types').Event} Event
    * @typedef {import('micromark-util-types').ParseOptions} ParseOptions
    * @typedef {import('micromark-util-types').Token} Token
    * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
    * @typedef {import('micromark-util-types').Value} Value
    *
    * @typedef {import('unist').Parent} UnistParent
    * @typedef {import('unist').Point} Point
    *
    * @typedef {import('mdast').PhrasingContent} PhrasingContent
    * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent
    * @typedef {import('mdast').Content} Content
    * @typedef {import('mdast').Break} Break
    * @typedef {import('mdast').Blockquote} Blockquote
    * @typedef {import('mdast').Code} Code
    * @typedef {import('mdast').Definition} Definition
    * @typedef {import('mdast').Emphasis} Emphasis
    * @typedef {import('mdast').Heading} Heading
    * @typedef {import('mdast').HTML} HTML
    * @typedef {import('mdast').Image} Image
    * @typedef {import('mdast').ImageReference} ImageReference
    * @typedef {import('mdast').InlineCode} InlineCode
    * @typedef {import('mdast').Link} Link
    * @typedef {import('mdast').LinkReference} LinkReference
    * @typedef {import('mdast').List} List
    * @typedef {import('mdast').ListItem} ListItem
    * @typedef {import('mdast').Paragraph} Paragraph
    * @typedef {import('mdast').Root} Root
    * @typedef {import('mdast').Strong} Strong
    * @typedef {import('mdast').Text} Text
    * @typedef {import('mdast').ThematicBreak} ThematicBreak
    * @typedef {import('mdast').ReferenceType} ReferenceType
    * @typedef {import('../index.js').CompileData} CompileData
    */

   const own$3 = {}.hasOwnProperty;

   /**
    * @param value
    *   Markdown to parse.
    * @param encoding
    *   Character encoding for when `value` is `Buffer`.
    * @param options
    *   Configuration.
    * @returns
    *   mdast tree.
    */
   const fromMarkdown =
     /**
      * @type {(
      *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &
      *   ((value: Value, options?: Options | null | undefined) => Root)
      * )}
      */

     /**
      * @param {Value} value
      * @param {Encoding | Options | null | undefined} [encoding]
      * @param {Options | null | undefined} [options]
      * @returns {Root}
      */
     function (value, encoding, options) {
       if (typeof encoding !== 'string') {
         options = encoding;
         encoding = undefined;
       }
       return compiler(options)(
         postprocess(
           parse(options).document().write(preprocess()(value, encoding, true))
         )
       )
     };

   /**
    * Note this compiler only understand complete buffering, not streaming.
    *
    * @param {Options | null | undefined} [options]
    */
   function compiler(options) {
     /** @type {Config} */
     const config = {
       transforms: [],
       canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],
       enter: {
         autolink: opener(link),
         autolinkProtocol: onenterdata,
         autolinkEmail: onenterdata,
         atxHeading: opener(heading),
         blockQuote: opener(blockQuote),
         characterEscape: onenterdata,
         characterReference: onenterdata,
         codeFenced: opener(codeFlow),
         codeFencedFenceInfo: buffer,
         codeFencedFenceMeta: buffer,
         codeIndented: opener(codeFlow, buffer),
         codeText: opener(codeText, buffer),
         codeTextData: onenterdata,
         data: onenterdata,
         codeFlowValue: onenterdata,
         definition: opener(definition),
         definitionDestinationString: buffer,
         definitionLabelString: buffer,
         definitionTitleString: buffer,
         emphasis: opener(emphasis),
         hardBreakEscape: opener(hardBreak),
         hardBreakTrailing: opener(hardBreak),
         htmlFlow: opener(html, buffer),
         htmlFlowData: onenterdata,
         htmlText: opener(html, buffer),
         htmlTextData: onenterdata,
         image: opener(image),
         label: buffer,
         link: opener(link),
         listItem: opener(listItem),
         listItemValue: onenterlistitemvalue,
         listOrdered: opener(list, onenterlistordered),
         listUnordered: opener(list),
         paragraph: opener(paragraph),
         reference: onenterreference,
         referenceString: buffer,
         resourceDestinationString: buffer,
         resourceTitleString: buffer,
         setextHeading: opener(heading),
         strong: opener(strong),
         thematicBreak: opener(thematicBreak)
       },
       exit: {
         atxHeading: closer(),
         atxHeadingSequence: onexitatxheadingsequence,
         autolink: closer(),
         autolinkEmail: onexitautolinkemail,
         autolinkProtocol: onexitautolinkprotocol,
         blockQuote: closer(),
         characterEscapeValue: onexitdata,
         characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,
         characterReferenceMarkerNumeric: onexitcharacterreferencemarker,
         characterReferenceValue: onexitcharacterreferencevalue,
         codeFenced: closer(onexitcodefenced),
         codeFencedFence: onexitcodefencedfence,
         codeFencedFenceInfo: onexitcodefencedfenceinfo,
         codeFencedFenceMeta: onexitcodefencedfencemeta,
         codeFlowValue: onexitdata,
         codeIndented: closer(onexitcodeindented),
         codeText: closer(onexitcodetext),
         codeTextData: onexitdata,
         data: onexitdata,
         definition: closer(),
         definitionDestinationString: onexitdefinitiondestinationstring,
         definitionLabelString: onexitdefinitionlabelstring,
         definitionTitleString: onexitdefinitiontitlestring,
         emphasis: closer(),
         hardBreakEscape: closer(onexithardbreak),
         hardBreakTrailing: closer(onexithardbreak),
         htmlFlow: closer(onexithtmlflow),
         htmlFlowData: onexitdata,
         htmlText: closer(onexithtmltext),
         htmlTextData: onexitdata,
         image: closer(onexitimage),
         label: onexitlabel,
         labelText: onexitlabeltext,
         lineEnding: onexitlineending,
         link: closer(onexitlink),
         listItem: closer(),
         listOrdered: closer(),
         listUnordered: closer(),
         paragraph: closer(),
         referenceString: onexitreferencestring,
         resourceDestinationString: onexitresourcedestinationstring,
         resourceTitleString: onexitresourcetitlestring,
         resource: onexitresource,
         setextHeading: closer(onexitsetextheading),
         setextHeadingLineSequence: onexitsetextheadinglinesequence,
         setextHeadingText: onexitsetextheadingtext,
         strong: closer(),
         thematicBreak: closer()
       }
     };
     configure$1(config, (options || {}).mdastExtensions || []);

     /** @type {CompileData} */
     const data = {};
     return compile

     /**
      * Turn micromark events into an mdast tree.
      *
      * @param {Array<Event>} events
      *   Events.
      * @returns {Root}
      *   mdast tree.
      */
     function compile(events) {
       /** @type {Root} */
       let tree = {
         type: 'root',
         children: []
       };
       /** @type {Omit<CompileContext, 'sliceSerialize'>} */
       const context = {
         stack: [tree],
         tokenStack: [],
         config,
         enter,
         exit,
         buffer,
         resume,
         setData,
         getData
       };
       /** @type {Array<number>} */
       const listStack = [];
       let index = -1;
       while (++index < events.length) {
         // We preprocess lists to add `listItem` tokens, and to infer whether
         // items the list itself are spread out.
         if (
           events[index][1].type === 'listOrdered' ||
           events[index][1].type === 'listUnordered'
         ) {
           if (events[index][0] === 'enter') {
             listStack.push(index);
           } else {
             const tail = listStack.pop();
             index = prepareList(events, tail, index);
           }
         }
       }
       index = -1;
       while (++index < events.length) {
         const handler = config[events[index][0]];
         if (own$3.call(handler, events[index][1].type)) {
           handler[events[index][1].type].call(
             Object.assign(
               {
                 sliceSerialize: events[index][2].sliceSerialize
               },
               context
             ),
             events[index][1]
           );
         }
       }

       // Handle tokens still being open.
       if (context.tokenStack.length > 0) {
         const tail = context.tokenStack[context.tokenStack.length - 1];
         const handler = tail[1] || defaultOnError;
         handler.call(context, undefined, tail[0]);
       }

       // Figure out `root` position.
       tree.position = {
         start: point(
           events.length > 0
             ? events[0][1].start
             : {
                 line: 1,
                 column: 1,
                 offset: 0
               }
         ),
         end: point(
           events.length > 0
             ? events[events.length - 2][1].end
             : {
                 line: 1,
                 column: 1,
                 offset: 0
               }
         )
       };

       // Call transforms.
       index = -1;
       while (++index < config.transforms.length) {
         tree = config.transforms[index](tree) || tree;
       }
       return tree
     }

     /**
      * @param {Array<Event>} events
      * @param {number} start
      * @param {number} length
      * @returns {number}
      */
     function prepareList(events, start, length) {
       let index = start - 1;
       let containerBalance = -1;
       let listSpread = false;
       /** @type {Token | undefined} */
       let listItem;
       /** @type {number | undefined} */
       let lineIndex;
       /** @type {number | undefined} */
       let firstBlankLineIndex;
       /** @type {boolean | undefined} */
       let atMarker;
       while (++index <= length) {
         const event = events[index];
         if (
           event[1].type === 'listUnordered' ||
           event[1].type === 'listOrdered' ||
           event[1].type === 'blockQuote'
         ) {
           if (event[0] === 'enter') {
             containerBalance++;
           } else {
             containerBalance--;
           }
           atMarker = undefined;
         } else if (event[1].type === 'lineEndingBlank') {
           if (event[0] === 'enter') {
             if (
               listItem &&
               !atMarker &&
               !containerBalance &&
               !firstBlankLineIndex
             ) {
               firstBlankLineIndex = index;
             }
             atMarker = undefined;
           }
         } else if (
           event[1].type === 'linePrefix' ||
           event[1].type === 'listItemValue' ||
           event[1].type === 'listItemMarker' ||
           event[1].type === 'listItemPrefix' ||
           event[1].type === 'listItemPrefixWhitespace'
         ) ; else {
           atMarker = undefined;
         }
         if (
           (!containerBalance &&
             event[0] === 'enter' &&
             event[1].type === 'listItemPrefix') ||
           (containerBalance === -1 &&
             event[0] === 'exit' &&
             (event[1].type === 'listUnordered' ||
               event[1].type === 'listOrdered'))
         ) {
           if (listItem) {
             let tailIndex = index;
             lineIndex = undefined;
             while (tailIndex--) {
               const tailEvent = events[tailIndex];
               if (
                 tailEvent[1].type === 'lineEnding' ||
                 tailEvent[1].type === 'lineEndingBlank'
               ) {
                 if (tailEvent[0] === 'exit') continue
                 if (lineIndex) {
                   events[lineIndex][1].type = 'lineEndingBlank';
                   listSpread = true;
                 }
                 tailEvent[1].type = 'lineEnding';
                 lineIndex = tailIndex;
               } else if (
                 tailEvent[1].type === 'linePrefix' ||
                 tailEvent[1].type === 'blockQuotePrefix' ||
                 tailEvent[1].type === 'blockQuotePrefixWhitespace' ||
                 tailEvent[1].type === 'blockQuoteMarker' ||
                 tailEvent[1].type === 'listItemIndent'
               ) ; else {
                 break
               }
             }
             if (
               firstBlankLineIndex &&
               (!lineIndex || firstBlankLineIndex < lineIndex)
             ) {
               listItem._spread = true;
             }

             // Fix position.
             listItem.end = Object.assign(
               {},
               lineIndex ? events[lineIndex][1].start : event[1].end
             );
             events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);
             index++;
             length++;
           }

           // Create a new list item.
           if (event[1].type === 'listItemPrefix') {
             listItem = {
               type: 'listItem',
               _spread: false,
               start: Object.assign({}, event[1].start),
               // @ts-expect-error: we’ll add `end` in a second.
               end: undefined
             };
             // @ts-expect-error: `listItem` is most definitely defined, TS...
             events.splice(index, 0, ['enter', listItem, event[2]]);
             index++;
             length++;
             firstBlankLineIndex = undefined;
             atMarker = true;
           }
         }
       }
       events[start][1]._spread = listSpread;
       return length
     }

     /**
      * Set data.
      *
      * @template {keyof CompileData} Key
      *   Field type.
      * @param {Key} key
      *   Key of field.
      * @param {CompileData[Key]} [value]
      *   New value.
      * @returns {void}
      *   Nothing.
      */
     function setData(key, value) {
       data[key] = value;
     }

     /**
      * Get data.
      *
      * @template {keyof CompileData} Key
      *   Field type.
      * @param {Key} key
      *   Key of field.
      * @returns {CompileData[Key]}
      *   Value.
      */
     function getData(key) {
       return data[key]
     }

     /**
      * Create an opener handle.
      *
      * @param {(token: Token) => Node} create
      *   Create a node.
      * @param {Handle} [and]
      *   Optional function to also run.
      * @returns {Handle}
      *   Handle.
      */
     function opener(create, and) {
       return open

       /**
        * @this {CompileContext}
        * @param {Token} token
        * @returns {void}
        */
       function open(token) {
         enter.call(this, create(token), token);
         if (and) and.call(this, token);
       }
     }

     /**
      * @this {CompileContext}
      * @returns {void}
      */
     function buffer() {
       this.stack.push({
         type: 'fragment',
         children: []
       });
     }

     /**
      * @template {Node} Kind
      *   Node type.
      * @this {CompileContext}
      *   Context.
      * @param {Kind} node
      *   Node to enter.
      * @param {Token} token
      *   Corresponding token.
      * @param {OnEnterError | undefined} [errorHandler]
      *   Handle the case where this token is open, but it is closed by something else.
      * @returns {Kind}
      *   The given node.
      */
     function enter(node, token, errorHandler) {
       const parent = this.stack[this.stack.length - 1];
       // @ts-expect-error: Assume `Node` can exist as a child of `parent`.
       parent.children.push(node);
       this.stack.push(node);
       this.tokenStack.push([token, errorHandler]);
       // @ts-expect-error: `end` will be patched later.
       node.position = {
         start: point(token.start)
       };
       return node
     }

     /**
      * Create a closer handle.
      *
      * @param {Handle} [and]
      *   Optional function to also run.
      * @returns {Handle}
      *   Handle.
      */
     function closer(and) {
       return close

       /**
        * @this {CompileContext}
        * @param {Token} token
        * @returns {void}
        */
       function close(token) {
         if (and) and.call(this, token);
         exit.call(this, token);
       }
     }

     /**
      * @this {CompileContext}
      *   Context.
      * @param {Token} token
      *   Corresponding token.
      * @param {OnExitError | undefined} [onExitError]
      *   Handle the case where another token is open.
      * @returns {Node}
      *   The closed node.
      */
     function exit(token, onExitError) {
       const node = this.stack.pop();
       const open = this.tokenStack.pop();
       if (!open) {
         throw new Error(
           'Cannot close `' +
             token.type +
             '` (' +
             stringifyPosition({
               start: token.start,
               end: token.end
             }) +
             '): it’s not open'
         )
       } else if (open[0].type !== token.type) {
         if (onExitError) {
           onExitError.call(this, token, open[0]);
         } else {
           const handler = open[1] || defaultOnError;
           handler.call(this, token, open[0]);
         }
       }
       node.position.end = point(token.end);
       return node
     }

     /**
      * @this {CompileContext}
      * @returns {string}
      */
     function resume() {
       return toString(this.stack.pop())
     }

     //
     // Handlers.
     //

     /**
      * @this {CompileContext}
      * @type {Handle}
      */
     function onenterlistordered() {
       setData('expectingFirstListItemValue', true);
     }

     /**
      * @this {CompileContext}
      * @type {Handle}
      */
     function onenterlistitemvalue(token) {
       if (getData('expectingFirstListItemValue')) {
         const ancestor = this.stack[this.stack.length - 2];
         ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);
         setData('expectingFirstListItemValue');
       }
     }

     /**
      * @this {CompileContext}
      * @type {Handle}
      */
     function onexitcodefencedfenceinfo() {
       const data = this.resume();
       const node = this.stack[this.stack.length - 1];
       node.lang = data;
     }

     /**
      * @this {CompileContext}
      * @type {Handle}
      */
     function onexitcodefencedfencemeta() {
       const data = this.resume();
       const node = this.stack[this.stack.length - 1];
       node.meta = data;
     }

     /**
      * @this {CompileContext}
      * @type {Handle}
      */
     function onexitcodefencedfence() {
       // Exit if this is the closing fence.
       if (getData('flowCodeInside')) return
       this.buffer();
       setData('flowCodeInside', true);
     }

     /**
      * @this {CompileContext}
      * @type {Handle}
      */
     function onexitcodefenced() {
       const data = this.resume();
       const node = this.stack[this.stack.length - 1];
       node.value = data.replace(/^(\r?\n|\r)|(\r?\n|\r)$/g, '');
       setData('flowCodeInside');
     }

     /**
      * @this {CompileContext}
      * @type {Handle}
      */
     function onexitcodeindented() {
       const data = this.resume();
       const node = this.stack[this.stack.length - 1];
       node.value = data.replace(/(\r?\n|\r)$/g, '');
     }

     /**
      * @this {CompileContext}
      * @type {Handle}
      */
     function onexitdefinitionlabelstring(token) {
       const label = this.resume();
       const node = this.stack[this.stack.length - 1];
       node.label = label;
       node.identifier = normalizeIdentifier(
         this.sliceSerialize(token)
       ).toLowerCase();
     }

     /**
      * @this {CompileContext}
      * @type {Handle}
      */
     function onexitdefinitiontitlestring() {
       const data = this.resume();
       const node = this.stack[this.stack.length - 1];
       node.title = data;
     }

     /**
      * @this {CompileContext}
      * @type {Handle}
      */
     function onexitdefinitiondestinationstring() {
       const data = this.resume();
       const node = this.stack[this.stack.length - 1];
       node.url = data;
     }

     /**
      * @this {CompileContext}
      * @type {Handle}
      */
     function onexitatxheadingsequence(token) {
       const node = this.stack[this.stack.length - 1];
       if (!node.depth) {
         const depth = this.sliceSerialize(token).length;
         node.depth = depth;
       }
     }

     /**
      * @this {CompileContext}
      * @type {Handle}
      */
     function onexitsetextheadingtext() {
       setData('setextHeadingSlurpLineEnding', true);
     }

     /**
      * @this {CompileContext}
      * @type {Handle}
      */
     function onexitsetextheadinglinesequence(token) {
       const node = this.stack[this.stack.length - 1];
       node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2;
     }

     /**
      * @this {CompileContext}
      * @type {Handle}
      */
     function onexitsetextheading() {
       setData('setextHeadingSlurpLineEnding');
     }

     /**
      * @this {CompileContext}
      * @type {Handle}
      */

     function onenterdata(token) {
       const node = this.stack[this.stack.length - 1];
       let tail = node.children[node.children.length - 1];
       if (!tail || tail.type !== 'text') {
         // Add a new text node.
         tail = text();
         // @ts-expect-error: we’ll add `end` later.
         tail.position = {
           start: point(token.start)
         };
         // @ts-expect-error: Assume `parent` accepts `text`.
         node.children.push(tail);
       }
       this.stack.push(tail);
     }

     /**
      * @this {CompileContext}
      * @type {Handle}
      */

     function onexitdata(token) {
       const tail = this.stack.pop();
       tail.value += this.sliceSerialize(token);
       tail.position.end = point(token.end);
     }

     /**
      * @this {CompileContext}
      * @type {Handle}
      */

     function onexitlineending(token) {
       const context = this.stack[this.stack.length - 1];
       // If we’re at a hard break, include the line ending in there.
       if (getData('atHardBreak')) {
         const tail = context.children[context.children.length - 1];
         tail.position.end = point(token.end);
         setData('atHardBreak');
         return
       }
       if (
         !getData('setextHeadingSlurpLineEnding') &&
         config.canContainEols.includes(context.type)
       ) {
         onenterdata.call(this, token);
         onexitdata.call(this, token);
       }
     }

     /**
      * @this {CompileContext}
      * @type {Handle}
      */

     function onexithardbreak() {
       setData('atHardBreak', true);
     }

     /**
      * @this {CompileContext}
      * @type {Handle}
      */

     function onexithtmlflow() {
       const data = this.resume();
       const node = this.stack[this.stack.length - 1];
       node.value = data;
     }

     /**
      * @this {CompileContext}
      * @type {Handle}
      */

     function onexithtmltext() {
       const data = this.resume();
       const node = this.stack[this.stack.length - 1];
       node.value = data;
     }

     /**
      * @this {CompileContext}
      * @type {Handle}
      */

     function onexitcodetext() {
       const data = this.resume();
       const node = this.stack[this.stack.length - 1];
       node.value = data;
     }

     /**
      * @this {CompileContext}
      * @type {Handle}
      */

     function onexitlink() {
       const node = this.stack[this.stack.length - 1];
       // Note: there are also `identifier` and `label` fields on this link node!
       // These are used / cleaned here.
       // To do: clean.
       if (getData('inReference')) {
         /** @type {ReferenceType} */
         const referenceType = getData('referenceType') || 'shortcut';
         node.type += 'Reference';
         // @ts-expect-error: mutate.
         node.referenceType = referenceType;
         // @ts-expect-error: mutate.
         delete node.url;
         delete node.title;
       } else {
         // @ts-expect-error: mutate.
         delete node.identifier;
         // @ts-expect-error: mutate.
         delete node.label;
       }
       setData('referenceType');
     }

     /**
      * @this {CompileContext}
      * @type {Handle}
      */

     function onexitimage() {
       const node = this.stack[this.stack.length - 1];
       // Note: there are also `identifier` and `label` fields on this link node!
       // These are used / cleaned here.
       // To do: clean.
       if (getData('inReference')) {
         /** @type {ReferenceType} */
         const referenceType = getData('referenceType') || 'shortcut';
         node.type += 'Reference';
         // @ts-expect-error: mutate.
         node.referenceType = referenceType;
         // @ts-expect-error: mutate.
         delete node.url;
         delete node.title;
       } else {
         // @ts-expect-error: mutate.
         delete node.identifier;
         // @ts-expect-error: mutate.
         delete node.label;
       }
       setData('referenceType');
     }

     /**
      * @this {CompileContext}
      * @type {Handle}
      */

     function onexitlabeltext(token) {
       const string = this.sliceSerialize(token);
       const ancestor = this.stack[this.stack.length - 2];
       // @ts-expect-error: stash this on the node, as it might become a reference
       // later.
       ancestor.label = decodeString(string);
       // @ts-expect-error: same as above.
       ancestor.identifier = normalizeIdentifier(string).toLowerCase();
     }

     /**
      * @this {CompileContext}
      * @type {Handle}
      */

     function onexitlabel() {
       const fragment = this.stack[this.stack.length - 1];
       const value = this.resume();
       const node = this.stack[this.stack.length - 1];
       // Assume a reference.
       setData('inReference', true);
       if (node.type === 'link') {
         /** @type {Array<StaticPhrasingContent>} */
         // @ts-expect-error: Assume static phrasing content.
         const children = fragment.children;
         node.children = children;
       } else {
         node.alt = value;
       }
     }

     /**
      * @this {CompileContext}
      * @type {Handle}
      */

     function onexitresourcedestinationstring() {
       const data = this.resume();
       const node = this.stack[this.stack.length - 1];
       node.url = data;
     }

     /**
      * @this {CompileContext}
      * @type {Handle}
      */

     function onexitresourcetitlestring() {
       const data = this.resume();
       const node = this.stack[this.stack.length - 1];
       node.title = data;
     }

     /**
      * @this {CompileContext}
      * @type {Handle}
      */

     function onexitresource() {
       setData('inReference');
     }

     /**
      * @this {CompileContext}
      * @type {Handle}
      */

     function onenterreference() {
       setData('referenceType', 'collapsed');
     }

     /**
      * @this {CompileContext}
      * @type {Handle}
      */

     function onexitreferencestring(token) {
       const label = this.resume();
       const node = this.stack[this.stack.length - 1];
       // @ts-expect-error: stash this on the node, as it might become a reference
       // later.
       node.label = label;
       // @ts-expect-error: same as above.
       node.identifier = normalizeIdentifier(
         this.sliceSerialize(token)
       ).toLowerCase();
       setData('referenceType', 'full');
     }

     /**
      * @this {CompileContext}
      * @type {Handle}
      */

     function onexitcharacterreferencemarker(token) {
       setData('characterReferenceType', token.type);
     }

     /**
      * @this {CompileContext}
      * @type {Handle}
      */
     function onexitcharacterreferencevalue(token) {
       const data = this.sliceSerialize(token);
       const type = getData('characterReferenceType');
       /** @type {string} */
       let value;
       if (type) {
         value = decodeNumericCharacterReference(
           data,
           type === 'characterReferenceMarkerNumeric' ? 10 : 16
         );
         setData('characterReferenceType');
       } else {
         const result = decodeNamedCharacterReference(data);
         value = result;
       }
       const tail = this.stack.pop();
       tail.value += value;
       tail.position.end = point(token.end);
     }

     /**
      * @this {CompileContext}
      * @type {Handle}
      */
     function onexitautolinkprotocol(token) {
       onexitdata.call(this, token);
       const node = this.stack[this.stack.length - 1];
       node.url = this.sliceSerialize(token);
     }

     /**
      * @this {CompileContext}
      * @type {Handle}
      */
     function onexitautolinkemail(token) {
       onexitdata.call(this, token);
       const node = this.stack[this.stack.length - 1];
       node.url = 'mailto:' + this.sliceSerialize(token);
     }

     //
     // Creaters.
     //

     /** @returns {Blockquote} */
     function blockQuote() {
       return {
         type: 'blockquote',
         children: []
       }
     }

     /** @returns {Code} */
     function codeFlow() {
       return {
         type: 'code',
         lang: null,
         meta: null,
         value: ''
       }
     }

     /** @returns {InlineCode} */
     function codeText() {
       return {
         type: 'inlineCode',
         value: ''
       }
     }

     /** @returns {Definition} */
     function definition() {
       return {
         type: 'definition',
         identifier: '',
         label: null,
         title: null,
         url: ''
       }
     }

     /** @returns {Emphasis} */
     function emphasis() {
       return {
         type: 'emphasis',
         children: []
       }
     }

     /** @returns {Heading} */
     function heading() {
       // @ts-expect-error `depth` will be set later.
       return {
         type: 'heading',
         depth: undefined,
         children: []
       }
     }

     /** @returns {Break} */
     function hardBreak() {
       return {
         type: 'break'
       }
     }

     /** @returns {HTML} */
     function html() {
       return {
         type: 'html',
         value: ''
       }
     }

     /** @returns {Image} */
     function image() {
       return {
         type: 'image',
         title: null,
         url: '',
         alt: null
       }
     }

     /** @returns {Link} */
     function link() {
       return {
         type: 'link',
         title: null,
         url: '',
         children: []
       }
     }

     /**
      * @param {Token} token
      * @returns {List}
      */
     function list(token) {
       return {
         type: 'list',
         ordered: token.type === 'listOrdered',
         start: null,
         spread: token._spread,
         children: []
       }
     }

     /**
      * @param {Token} token
      * @returns {ListItem}
      */
     function listItem(token) {
       return {
         type: 'listItem',
         spread: token._spread,
         checked: null,
         children: []
       }
     }

     /** @returns {Paragraph} */
     function paragraph() {
       return {
         type: 'paragraph',
         children: []
       }
     }

     /** @returns {Strong} */
     function strong() {
       return {
         type: 'strong',
         children: []
       }
     }

     /** @returns {Text} */
     function text() {
       return {
         type: 'text',
         value: ''
       }
     }

     /** @returns {ThematicBreak} */
     function thematicBreak() {
       return {
         type: 'thematicBreak'
       }
     }
   }

   /**
    * Copy a point-like value.
    *
    * @param {Point} d
    *   Point-like value.
    * @returns {Point}
    *   unist point.
    */
   function point(d) {
     return {
       line: d.line,
       column: d.column,
       offset: d.offset
     }
   }

   /**
    * @param {Config} combined
    * @param {Array<Extension | Array<Extension>>} extensions
    * @returns {void}
    */
   function configure$1(combined, extensions) {
     let index = -1;
     while (++index < extensions.length) {
       const value = extensions[index];
       if (Array.isArray(value)) {
         configure$1(combined, value);
       } else {
         extension(combined, value);
       }
     }
   }

   /**
    * @param {Config} combined
    * @param {Extension} extension
    * @returns {void}
    */
   function extension(combined, extension) {
     /** @type {keyof Extension} */
     let key;
     for (key in extension) {
       if (own$3.call(extension, key)) {
         if (key === 'canContainEols') {
           const right = extension[key];
           if (right) {
             combined[key].push(...right);
           }
         } else if (key === 'transforms') {
           const right = extension[key];
           if (right) {
             combined[key].push(...right);
           }
         } else if (key === 'enter' || key === 'exit') {
           const right = extension[key];
           if (right) {
             Object.assign(combined[key], right);
           }
         }
       }
     }
   }

   /** @type {OnEnterError} */
   function defaultOnError(left, right) {
     if (left) {
       throw new Error(
         'Cannot close `' +
           left.type +
           '` (' +
           stringifyPosition({
             start: left.start,
             end: left.end
           }) +
           '): a different token (`' +
           right.type +
           '`, ' +
           stringifyPosition({
             start: right.start,
             end: right.end
           }) +
           ') is open'
       )
     } else {
       throw new Error(
         'Cannot close document, a token (`' +
           right.type +
           '`, ' +
           stringifyPosition({
             start: right.start,
             end: right.end
           }) +
           ') is still open'
       )
     }
   }

   /**
    * @typedef {import('./types.js').Options} Options
    * @typedef {import('./types.js').State} State
    */

   /**
    * @param {State} base
    * @param {Options} extension
    * @returns {State}
    */
   function configure(base, extension) {
     let index = -1;
     /** @type {keyof Options} */
     let key;

     // First do subextensions.
     if (extension.extensions) {
       while (++index < extension.extensions.length) {
         configure(base, extension.extensions[index]);
       }
     }

     for (key in extension) {
       if (key === 'extensions') ; else if (key === 'unsafe' || key === 'join') {
         /* c8 ignore next 2 */
         // @ts-expect-error: hush.
         base[key] = [...(base[key] || []), ...(extension[key] || [])];
       } else if (key === 'handlers') {
         base[key] = Object.assign(base[key], extension[key] || {});
       } else {
         // @ts-expect-error: hush.
         base.options[key] = extension[key];
       }
     }

     return base
   }

   /**
    * @typedef {import('mdast').Blockquote} Blockquote
    * @typedef {import('../types.js').Parent} Parent
    * @typedef {import('../types.js').State} State
    * @typedef {import('../types.js').Info} Info
    * @typedef {import('../types.js').Map} Map
    */

   /**
    * @param {Blockquote} node
    * @param {Parent | undefined} _
    * @param {State} state
    * @param {Info} info
    * @returns {string}
    */
   function blockquote$1(node, _, state, info) {
     const exit = state.enter('blockquote');
     const tracker = state.createTracker(info);
     tracker.move('> ');
     tracker.shift(2);
     const value = state.indentLines(
       state.containerFlow(node, tracker.current()),
       map$1
     );
     exit();
     return value
   }

   /** @type {Map} */
   function map$1(line, _, blank) {
     return '>' + (blank ? '' : ' ') + line
   }

   /**
    * @typedef {import('../types.js').Unsafe} Unsafe
    * @typedef {import('../types.js').ConstructName} ConstructName
    */

   /**
    * @param {Array<ConstructName>} stack
    * @param {Unsafe} pattern
    * @returns {boolean}
    */
   function patternInScope(stack, pattern) {
     return (
       listInScope(stack, pattern.inConstruct, true) &&
       !listInScope(stack, pattern.notInConstruct, false)
     )
   }

   /**
    * @param {Array<ConstructName>} stack
    * @param {Unsafe['inConstruct']} list
    * @param {boolean} none
    * @returns {boolean}
    */
   function listInScope(stack, list, none) {
     if (typeof list === 'string') {
       list = [list];
     }

     if (!list || list.length === 0) {
       return none
     }

     let index = -1;

     while (++index < list.length) {
       if (stack.includes(list[index])) {
         return true
       }
     }

     return false
   }

   /**
    * @typedef {import('mdast').Break} Break
    * @typedef {import('../types.js').Parent} Parent
    * @typedef {import('../types.js').State} State
    * @typedef {import('../types.js').Info} Info
    */


   /**
    * @param {Break} _
    * @param {Parent | undefined} _1
    * @param {State} state
    * @param {Info} info
    * @returns {string}
    */
   function hardBreak$1(_, _1, state, info) {
     let index = -1;

     while (++index < state.unsafe.length) {
       // If we can’t put eols in this construct (setext headings, tables), use a
       // space instead.
       if (
         state.unsafe[index].character === '\n' &&
         patternInScope(state.stack, state.unsafe[index])
       ) {
         return /[ \t]/.test(info.before) ? '' : ' '
       }
     }

     return '\\\n'
   }

   /**
    * Get the count of the longest repeating streak of `substring` in `value`.
    *
    * @param {string} value
    *   Content to search in.
    * @param {string} substring
    *   Substring to look for, typically one character.
    * @returns {number}
    *   Count of most frequent adjacent `substring`s in `value`.
    */
   function longestStreak(value, substring) {
     const source = String(value);
     let index = source.indexOf(substring);
     let expected = index;
     let count = 0;
     let max = 0;

     if (typeof substring !== 'string') {
       throw new TypeError('Expected substring')
     }

     while (index !== -1) {
       if (index === expected) {
         if (++count > max) {
           max = count;
         }
       } else {
         count = 1;
       }

       expected = index + substring.length;
       index = source.indexOf(substring, expected);
     }

     return max
   }

   /**
    * @typedef {import('mdast').Code} Code
    * @typedef {import('../types.js').State} State
    */

   /**
    * @param {Code} node
    * @param {State} state
    * @returns {boolean}
    */
   function formatCodeAsIndented(node, state) {
     return Boolean(
       !state.options.fences &&
         node.value &&
         // If there’s no info…
         !node.lang &&
         // And there’s a non-whitespace character…
         /[^ \r\n]/.test(node.value) &&
         // And the value doesn’t start or end in a blank…
         !/^[\t ]*(?:[\r\n]|$)|(?:^|[\r\n])[\t ]*$/.test(node.value)
     )
   }

   /**
    * @typedef {import('../types.js').State} State
    * @typedef {import('../types.js').Options} Options
    */

   /**
    * @param {State} state
    * @returns {Exclude<Options['fence'], null | undefined>}
    */
   function checkFence(state) {
     const marker = state.options.fence || '`';

     if (marker !== '`' && marker !== '~') {
       throw new Error(
         'Cannot serialize code with `' +
           marker +
           '` for `options.fence`, expected `` ` `` or `~`'
       )
     }

     return marker
   }

   /**
    * @typedef {import('mdast').Code} Code
    * @typedef {import('../types.js').Parent} Parent
    * @typedef {import('../types.js').State} State
    * @typedef {import('../types.js').Info} Info
    * @typedef {import('../types.js').Map} Map
    */


   /**
    * @param {Code} node
    * @param {Parent | undefined} _
    * @param {State} state
    * @param {Info} info
    * @returns {string}
    */
   function code$1(node, _, state, info) {
     const marker = checkFence(state);
     const raw = node.value || '';
     const suffix = marker === '`' ? 'GraveAccent' : 'Tilde';

     if (formatCodeAsIndented(node, state)) {
       const exit = state.enter('codeIndented');
       const value = state.indentLines(raw, map);
       exit();
       return value
     }

     const tracker = state.createTracker(info);
     const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3));
     const exit = state.enter('codeFenced');
     let value = tracker.move(sequence);

     if (node.lang) {
       const subexit = state.enter(`codeFencedLang${suffix}`);
       value += tracker.move(
         state.safe(node.lang, {
           before: value,
           after: ' ',
           encode: ['`'],
           ...tracker.current()
         })
       );
       subexit();
     }

     if (node.lang && node.meta) {
       const subexit = state.enter(`codeFencedMeta${suffix}`);
       value += tracker.move(' ');
       value += tracker.move(
         state.safe(node.meta, {
           before: value,
           after: '\n',
           encode: ['`'],
           ...tracker.current()
         })
       );
       subexit();
     }

     value += tracker.move('\n');

     if (raw) {
       value += tracker.move(raw + '\n');
     }

     value += tracker.move(sequence);
     exit();
     return value
   }

   /** @type {Map} */
   function map(line, _, blank) {
     return (blank ? '' : '    ') + line
   }

   /**
    * @typedef {import('../types.js').State} State
    * @typedef {import('../types.js').Options} Options
    */

   /**
    * @param {State} state
    * @returns {Exclude<Options['quote'], null | undefined>}
    */
   function checkQuote(state) {
     const marker = state.options.quote || '"';

     if (marker !== '"' && marker !== "'") {
       throw new Error(
         'Cannot serialize title with `' +
           marker +
           '` for `options.quote`, expected `"`, or `\'`'
       )
     }

     return marker
   }

   /**
    * @typedef {import('mdast').Definition} Definition
    * @typedef {import('../types.js').Parent} Parent
    * @typedef {import('../types.js').State} State
    * @typedef {import('../types.js').Info} Info
    */


   /**
    * @param {Definition} node
    * @param {Parent | undefined} _
    * @param {State} state
    * @param {Info} info
    * @returns {string}
    */
   function definition(node, _, state, info) {
     const quote = checkQuote(state);
     const suffix = quote === '"' ? 'Quote' : 'Apostrophe';
     const exit = state.enter('definition');
     let subexit = state.enter('label');
     const tracker = state.createTracker(info);
     let value = tracker.move('[');
     value += tracker.move(
       state.safe(state.associationId(node), {
         before: value,
         after: ']',
         ...tracker.current()
       })
     );
     value += tracker.move(']: ');

     subexit();

     if (
       // If there’s no url, or…
       !node.url ||
       // If there are control characters or whitespace.
       /[\0- \u007F]/.test(node.url)
     ) {
       subexit = state.enter('destinationLiteral');
       value += tracker.move('<');
       value += tracker.move(
         state.safe(node.url, {before: value, after: '>', ...tracker.current()})
       );
       value += tracker.move('>');
     } else {
       // No whitespace, raw is prettier.
       subexit = state.enter('destinationRaw');
       value += tracker.move(
         state.safe(node.url, {
           before: value,
           after: node.title ? ' ' : '\n',
           ...tracker.current()
         })
       );
     }

     subexit();

     if (node.title) {
       subexit = state.enter(`title${suffix}`);
       value += tracker.move(' ' + quote);
       value += tracker.move(
         state.safe(node.title, {
           before: value,
           after: quote,
           ...tracker.current()
         })
       );
       value += tracker.move(quote);
       subexit();
     }

     exit();

     return value
   }

   /**
    * @typedef {import('../types.js').State} State
    * @typedef {import('../types.js').Options} Options
    */

   /**
    * @param {State} state
    * @returns {Exclude<Options['emphasis'], null | undefined>}
    */
   function checkEmphasis(state) {
     const marker = state.options.emphasis || '*';

     if (marker !== '*' && marker !== '_') {
       throw new Error(
         'Cannot serialize emphasis with `' +
           marker +
           '` for `options.emphasis`, expected `*`, or `_`'
       )
     }

     return marker
   }

   /**
    * @typedef {import('mdast').Emphasis} Emphasis
    * @typedef {import('../types.js').Parent} Parent
    * @typedef {import('../types.js').State} State
    * @typedef {import('../types.js').Info} Info
    */


   emphasis$1.peek = emphasisPeek;

   // To do: there are cases where emphasis cannot “form” depending on the
   // previous or next character of sequences.
   // There’s no way around that though, except for injecting zero-width stuff.
   // Do we need to safeguard against that?
   /**
    * @param {Emphasis} node
    * @param {Parent | undefined} _
    * @param {State} state
    * @param {Info} info
    * @returns {string}
    */
   function emphasis$1(node, _, state, info) {
     const marker = checkEmphasis(state);
     const exit = state.enter('emphasis');
     const tracker = state.createTracker(info);
     let value = tracker.move(marker);
     value += tracker.move(
       state.containerPhrasing(node, {
         before: value,
         after: marker,
         ...tracker.current()
       })
     );
     value += tracker.move(marker);
     exit();
     return value
   }

   /**
    * @param {Emphasis} _
    * @param {Parent | undefined} _1
    * @param {State} state
    * @returns {string}
    */
   function emphasisPeek(_, _1, state) {
     return state.options.emphasis || '*'
   }

   /**
    * @typedef {import('mdast').Heading} Heading
    * @typedef {import('../types.js').State} State
    */


   /**
    * @param {Heading} node
    * @param {State} state
    * @returns {boolean}
    */
   function formatHeadingAsSetext(node, state) {
     let literalWithBreak = false;

     // Look for literals with a line break.
     // Note that this also
     visit(node, (node) => {
       if (
         ('value' in node && /\r?\n|\r/.test(node.value)) ||
         node.type === 'break'
       ) {
         literalWithBreak = true;
         return EXIT
       }
     });

     return Boolean(
       (!node.depth || node.depth < 3) &&
         toString(node) &&
         (state.options.setext || literalWithBreak)
     )
   }

   /**
    * @typedef {import('mdast').Heading} Heading
    * @typedef {import('../types.js').Parent} Parent
    * @typedef {import('../types.js').State} State
    * @typedef {import('../types.js').Info} Info
    */


   /**
    * @param {Heading} node
    * @param {Parent | undefined} _
    * @param {State} state
    * @param {Info} info
    * @returns {string}
    */
   function heading$1(node, _, state, info) {
     const rank = Math.max(Math.min(6, node.depth || 1), 1);
     const tracker = state.createTracker(info);

     if (formatHeadingAsSetext(node, state)) {
       const exit = state.enter('headingSetext');
       const subexit = state.enter('phrasing');
       const value = state.containerPhrasing(node, {
         ...tracker.current(),
         before: '\n',
         after: '\n'
       });
       subexit();
       exit();

       return (
         value +
         '\n' +
         (rank === 1 ? '=' : '-').repeat(
           // The whole size…
           value.length -
             // Minus the position of the character after the last EOL (or
             // 0 if there is none)…
             (Math.max(value.lastIndexOf('\r'), value.lastIndexOf('\n')) + 1)
         )
       )
     }

     const sequence = '#'.repeat(rank);
     const exit = state.enter('headingAtx');
     const subexit = state.enter('phrasing');

     // Note: for proper tracking, we should reset the output positions when there
     // is no content returned, because then the space is not output.
     // Practically, in that case, there is no content, so it doesn’t matter that
     // we’ve tracked one too many characters.
     tracker.move(sequence + ' ');

     let value = state.containerPhrasing(node, {
       before: '# ',
       after: '\n',
       ...tracker.current()
     });

     if (/^[\t ]/.test(value)) {
       // To do: what effect has the character reference on tracking?
       value =
         '&#x' +
         value.charCodeAt(0).toString(16).toUpperCase() +
         ';' +
         value.slice(1);
     }

     value = value ? sequence + ' ' + value : sequence;

     if (state.options.closeAtx) {
       value += ' ' + sequence;
     }

     subexit();
     exit();

     return value
   }

   /**
    * @typedef {import('mdast').HTML} HTML
    */

   html$1.peek = htmlPeek;

   /**
    * @param {HTML} node
    * @returns {string}
    */
   function html$1(node) {
     return node.value || ''
   }

   /**
    * @returns {string}
    */
   function htmlPeek() {
     return '<'
   }

   /**
    * @typedef {import('mdast').Image} Image
    * @typedef {import('../types.js').Parent} Parent
    * @typedef {import('../types.js').State} State
    * @typedef {import('../types.js').Info} Info
    */


   image$1.peek = imagePeek;

   /**
    * @param {Image} node
    * @param {Parent | undefined} _
    * @param {State} state
    * @param {Info} info
    * @returns {string}
    */
   function image$1(node, _, state, info) {
     const quote = checkQuote(state);
     const suffix = quote === '"' ? 'Quote' : 'Apostrophe';
     const exit = state.enter('image');
     let subexit = state.enter('label');
     const tracker = state.createTracker(info);
     let value = tracker.move('![');
     value += tracker.move(
       state.safe(node.alt, {before: value, after: ']', ...tracker.current()})
     );
     value += tracker.move('](');

     subexit();

     if (
       // If there’s no url but there is a title…
       (!node.url && node.title) ||
       // If there are control characters or whitespace.
       /[\0- \u007F]/.test(node.url)
     ) {
       subexit = state.enter('destinationLiteral');
       value += tracker.move('<');
       value += tracker.move(
         state.safe(node.url, {before: value, after: '>', ...tracker.current()})
       );
       value += tracker.move('>');
     } else {
       // No whitespace, raw is prettier.
       subexit = state.enter('destinationRaw');
       value += tracker.move(
         state.safe(node.url, {
           before: value,
           after: node.title ? ' ' : ')',
           ...tracker.current()
         })
       );
     }

     subexit();

     if (node.title) {
       subexit = state.enter(`title${suffix}`);
       value += tracker.move(' ' + quote);
       value += tracker.move(
         state.safe(node.title, {
           before: value,
           after: quote,
           ...tracker.current()
         })
       );
       value += tracker.move(quote);
       subexit();
     }

     value += tracker.move(')');
     exit();

     return value
   }

   /**
    * @returns {string}
    */
   function imagePeek() {
     return '!'
   }

   /**
    * @typedef {import('mdast').ImageReference} ImageReference
    * @typedef {import('../types.js').Parent} Parent
    * @typedef {import('../types.js').State} State
    * @typedef {import('../types.js').Info} Info
    */

   imageReference$1.peek = imageReferencePeek;

   /**
    * @param {ImageReference} node
    * @param {Parent | undefined} _
    * @param {State} state
    * @param {Info} info
    * @returns {string}
    */
   function imageReference$1(node, _, state, info) {
     const type = node.referenceType;
     const exit = state.enter('imageReference');
     let subexit = state.enter('label');
     const tracker = state.createTracker(info);
     let value = tracker.move('![');
     const alt = state.safe(node.alt, {
       before: value,
       after: ']',
       ...tracker.current()
     });
     value += tracker.move(alt + '][');

     subexit();
     // Hide the fact that we’re in phrasing, because escapes don’t work.
     const stack = state.stack;
     state.stack = [];
     subexit = state.enter('reference');
     // Note: for proper tracking, we should reset the output positions when we end
     // up making a `shortcut` reference, because then there is no brace output.
     // Practically, in that case, there is no content, so it doesn’t matter that
     // we’ve tracked one too many characters.
     const reference = state.safe(state.associationId(node), {
       before: value,
       after: ']',
       ...tracker.current()
     });
     subexit();
     state.stack = stack;
     exit();

     if (type === 'full' || !alt || alt !== reference) {
       value += tracker.move(reference + ']');
     } else if (type === 'shortcut') {
       // Remove the unwanted `[`.
       value = value.slice(0, -1);
     } else {
       value += tracker.move(']');
     }

     return value
   }

   /**
    * @returns {string}
    */
   function imageReferencePeek() {
     return '!'
   }

   /**
    * @typedef {import('../types.js').Unsafe} Unsafe
    */

   /**
    * @param {Unsafe} pattern
    * @returns {RegExp}
    */
   function patternCompile(pattern) {
     if (!pattern._compiled) {
       const before =
         (pattern.atBreak ? '[\\r\\n][\\t ]*' : '') +
         (pattern.before ? '(?:' + pattern.before + ')' : '');

       pattern._compiled = new RegExp(
         (before ? '(' + before + ')' : '') +
           (/[|\\{}()[\]^$+*?.-]/.test(pattern.character) ? '\\' : '') +
           pattern.character +
           (pattern.after ? '(?:' + pattern.after + ')' : ''),
         'g'
       );
     }

     return pattern._compiled
   }

   /**
    * @typedef {import('mdast').InlineCode} InlineCode
    * @typedef {import('../types.js').Parent} Parent
    * @typedef {import('../types.js').State} State
    */


   inlineCode$1.peek = inlineCodePeek;

   /**
    * @param {InlineCode} node
    * @param {Parent | undefined} _
    * @param {State} state
    * @returns {string}
    */
   function inlineCode$1(node, _, state) {
     let value = node.value || '';
     let sequence = '`';
     let index = -1;

     // If there is a single grave accent on its own in the code, use a fence of
     // two.
     // If there are two in a row, use one.
     while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {
       sequence += '`';
     }

     // If this is not just spaces or eols (tabs don’t count), and either the
     // first or last character are a space, eol, or tick, then pad with spaces.
     if (
       /[^ \r\n]/.test(value) &&
       ((/^[ \r\n]/.test(value) && /[ \r\n]$/.test(value)) || /^`|`$/.test(value))
     ) {
       value = ' ' + value + ' ';
     }

     // We have a potential problem: certain characters after eols could result in
     // blocks being seen.
     // For example, if someone injected the string `'\n# b'`, then that would
     // result in an ATX heading.
     // We can’t escape characters in `inlineCode`, but because eols are
     // transformed to spaces when going from markdown to HTML anyway, we can swap
     // them out.
     while (++index < state.unsafe.length) {
       const pattern = state.unsafe[index];
       const expression = patternCompile(pattern);
       /** @type {RegExpExecArray | null} */
       let match;

       // Only look for `atBreak`s.
       // Btw: note that `atBreak` patterns will always start the regex at LF or
       // CR.
       if (!pattern.atBreak) continue

       while ((match = expression.exec(value))) {
         let position = match.index;

         // Support CRLF (patterns only look for one of the characters).
         if (
           value.charCodeAt(position) === 10 /* `\n` */ &&
           value.charCodeAt(position - 1) === 13 /* `\r` */
         ) {
           position--;
         }

         value = value.slice(0, position) + ' ' + value.slice(match.index + 1);
       }
     }

     return sequence + value + sequence
   }

   /**
    * @returns {string}
    */
   function inlineCodePeek() {
     return '`'
   }

   /**
    * @typedef {import('mdast').Link} Link
    * @typedef {import('../types.js').State} State
    */


   /**
    * @param {Link} node
    * @param {State} state
    * @returns {boolean}
    */
   function formatLinkAsAutolink(node, state) {
     const raw = toString(node);

     return Boolean(
       !state.options.resourceLink &&
         // If there’s a url…
         node.url &&
         // And there’s a no title…
         !node.title &&
         // And the content of `node` is a single text node…
         node.children &&
         node.children.length === 1 &&
         node.children[0].type === 'text' &&
         // And if the url is the same as the content…
         (raw === node.url || 'mailto:' + raw === node.url) &&
         // And that starts w/ a protocol…
         /^[a-z][a-z+.-]+:/i.test(node.url) &&
         // And that doesn’t contain ASCII control codes (character escapes and
         // references don’t work), space, or angle brackets…
         !/[\0- <>\u007F]/.test(node.url)
     )
   }

   /**
    * @typedef {import('mdast').Link} Link
    * @typedef {import('../types.js').Parent} Parent
    * @typedef {import('../types.js').State} State
    * @typedef {import('../types.js').Info} Info
    * @typedef {import('../types.js').Exit} Exit
    */


   link$1.peek = linkPeek;

   /**
    * @param {Link} node
    * @param {Parent | undefined} _
    * @param {State} state
    * @param {Info} info
    * @returns {string}
    */
   function link$1(node, _, state, info) {
     const quote = checkQuote(state);
     const suffix = quote === '"' ? 'Quote' : 'Apostrophe';
     const tracker = state.createTracker(info);
     /** @type {Exit} */
     let exit;
     /** @type {Exit} */
     let subexit;

     if (formatLinkAsAutolink(node, state)) {
       // Hide the fact that we’re in phrasing, because escapes don’t work.
       const stack = state.stack;
       state.stack = [];
       exit = state.enter('autolink');
       let value = tracker.move('<');
       value += tracker.move(
         state.containerPhrasing(node, {
           before: value,
           after: '>',
           ...tracker.current()
         })
       );
       value += tracker.move('>');
       exit();
       state.stack = stack;
       return value
     }

     exit = state.enter('link');
     subexit = state.enter('label');
     let value = tracker.move('[');
     value += tracker.move(
       state.containerPhrasing(node, {
         before: value,
         after: '](',
         ...tracker.current()
       })
     );
     value += tracker.move('](');
     subexit();

     if (
       // If there’s no url but there is a title…
       (!node.url && node.title) ||
       // If there are control characters or whitespace.
       /[\0- \u007F]/.test(node.url)
     ) {
       subexit = state.enter('destinationLiteral');
       value += tracker.move('<');
       value += tracker.move(
         state.safe(node.url, {before: value, after: '>', ...tracker.current()})
       );
       value += tracker.move('>');
     } else {
       // No whitespace, raw is prettier.
       subexit = state.enter('destinationRaw');
       value += tracker.move(
         state.safe(node.url, {
           before: value,
           after: node.title ? ' ' : ')',
           ...tracker.current()
         })
       );
     }

     subexit();

     if (node.title) {
       subexit = state.enter(`title${suffix}`);
       value += tracker.move(' ' + quote);
       value += tracker.move(
         state.safe(node.title, {
           before: value,
           after: quote,
           ...tracker.current()
         })
       );
       value += tracker.move(quote);
       subexit();
     }

     value += tracker.move(')');

     exit();
     return value
   }

   /**
    * @param {Link} node
    * @param {Parent | undefined} _
    * @param {State} state
    * @returns {string}
    */
   function linkPeek(node, _, state) {
     return formatLinkAsAutolink(node, state) ? '<' : '['
   }

   /**
    * @typedef {import('mdast').LinkReference} LinkReference
    * @typedef {import('../types.js').Parent} Parent
    * @typedef {import('../types.js').State} State
    * @typedef {import('../types.js').Info} Info
    */

   linkReference$1.peek = linkReferencePeek;

   /**
    * @param {LinkReference} node
    * @param {Parent | undefined} _
    * @param {State} state
    * @param {Info} info
    * @returns {string}
    */
   function linkReference$1(node, _, state, info) {
     const type = node.referenceType;
     const exit = state.enter('linkReference');
     let subexit = state.enter('label');
     const tracker = state.createTracker(info);
     let value = tracker.move('[');
     const text = state.containerPhrasing(node, {
       before: value,
       after: ']',
       ...tracker.current()
     });
     value += tracker.move(text + '][');

     subexit();
     // Hide the fact that we’re in phrasing, because escapes don’t work.
     const stack = state.stack;
     state.stack = [];
     subexit = state.enter('reference');
     // Note: for proper tracking, we should reset the output positions when we end
     // up making a `shortcut` reference, because then there is no brace output.
     // Practically, in that case, there is no content, so it doesn’t matter that
     // we’ve tracked one too many characters.
     const reference = state.safe(state.associationId(node), {
       before: value,
       after: ']',
       ...tracker.current()
     });
     subexit();
     state.stack = stack;
     exit();

     if (type === 'full' || !text || text !== reference) {
       value += tracker.move(reference + ']');
     } else if (type === 'shortcut') {
       // Remove the unwanted `[`.
       value = value.slice(0, -1);
     } else {
       value += tracker.move(']');
     }

     return value
   }

   /**
    * @returns {string}
    */
   function linkReferencePeek() {
     return '['
   }

   /**
    * @typedef {import('../types.js').State} State
    * @typedef {import('../types.js').Options} Options
    */

   /**
    * @param {State} state
    * @returns {Exclude<Options['bullet'], null | undefined>}
    */
   function checkBullet(state) {
     const marker = state.options.bullet || '*';

     if (marker !== '*' && marker !== '+' && marker !== '-') {
       throw new Error(
         'Cannot serialize items with `' +
           marker +
           '` for `options.bullet`, expected `*`, `+`, or `-`'
       )
     }

     return marker
   }

   /**
    * @typedef {import('../types.js').State} State
    * @typedef {import('../types.js').Options} Options
    */


   /**
    * @param {State} state
    * @returns {Exclude<Options['bullet'], null | undefined>}
    */
   function checkBulletOther(state) {
     const bullet = checkBullet(state);
     const bulletOther = state.options.bulletOther;

     if (!bulletOther) {
       return bullet === '*' ? '-' : '*'
     }

     if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {
       throw new Error(
         'Cannot serialize items with `' +
           bulletOther +
           '` for `options.bulletOther`, expected `*`, `+`, or `-`'
       )
     }

     if (bulletOther === bullet) {
       throw new Error(
         'Expected `bullet` (`' +
           bullet +
           '`) and `bulletOther` (`' +
           bulletOther +
           '`) to be different'
       )
     }

     return bulletOther
   }

   /**
    * @typedef {import('../types.js').State} State
    * @typedef {import('../types.js').Options} Options
    */

   /**
    * @param {State} state
    * @returns {Exclude<Options['bulletOrdered'], null | undefined>}
    */
   function checkBulletOrdered(state) {
     const marker = state.options.bulletOrdered || '.';

     if (marker !== '.' && marker !== ')') {
       throw new Error(
         'Cannot serialize items with `' +
           marker +
           '` for `options.bulletOrdered`, expected `.` or `)`'
       )
     }

     return marker
   }

   /**
    * @typedef {import('../types.js').State} State
    * @typedef {import('../types.js').Options} Options
    */


   /**
    * @param {State} state
    * @returns {Exclude<Options['bulletOrdered'], null | undefined>}
    */
   function checkBulletOrderedOther(state) {
     const bulletOrdered = checkBulletOrdered(state);
     const bulletOrderedOther = state.options.bulletOrderedOther;

     if (!bulletOrderedOther) {
       return bulletOrdered === '.' ? ')' : '.'
     }

     if (bulletOrderedOther !== '.' && bulletOrderedOther !== ')') {
       throw new Error(
         'Cannot serialize items with `' +
           bulletOrderedOther +
           '` for `options.bulletOrderedOther`, expected `*`, `+`, or `-`'
       )
     }

     if (bulletOrderedOther === bulletOrdered) {
       throw new Error(
         'Expected `bulletOrdered` (`' +
           bulletOrdered +
           '`) and `bulletOrderedOther` (`' +
           bulletOrderedOther +
           '`) to be different'
       )
     }

     return bulletOrderedOther
   }

   /**
    * @typedef {import('../types.js').State} State
    * @typedef {import('../types.js').Options} Options
    */

   /**
    * @param {State} state
    * @returns {Exclude<Options['rule'], null | undefined>}
    */
   function checkRule(state) {
     const marker = state.options.rule || '*';

     if (marker !== '*' && marker !== '-' && marker !== '_') {
       throw new Error(
         'Cannot serialize rules with `' +
           marker +
           '` for `options.rule`, expected `*`, `-`, or `_`'
       )
     }

     return marker
   }

   /**
    * @typedef {import('mdast').List} List
    * @typedef {import('../types.js').Parent} Parent
    * @typedef {import('../types.js').State} State
    * @typedef {import('../types.js').Info} Info
    */


   /**
    * @param {List} node
    * @param {Parent | undefined} parent
    * @param {State} state
    * @param {Info} info
    * @returns {string}
    */
   function list$2(node, parent, state, info) {
     const exit = state.enter('list');
     const bulletCurrent = state.bulletCurrent;
     /** @type {string} */
     let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state);
     /** @type {string} */
     const bulletOther = node.ordered
       ? checkBulletOrderedOther(state)
       : checkBulletOther(state);
     const bulletLastUsed = state.bulletLastUsed;
     let useDifferentMarker = false;

     if (
       parent &&
       // Explicit `other` set.
       (node.ordered
         ? state.options.bulletOrderedOther
         : state.options.bulletOther) &&
       bulletLastUsed &&
       bullet === bulletLastUsed
     ) {
       useDifferentMarker = true;
     }

     if (!node.ordered) {
       const firstListItem = node.children ? node.children[0] : undefined;

       // If there’s an empty first list item directly in two list items,
       // we have to use a different bullet:
       //
       // ```markdown
       // * - *
       // ```
       //
       // …because otherwise it would become one big thematic break.
       if (
         // Bullet could be used as a thematic break marker:
         (bullet === '*' || bullet === '-') &&
         // Empty first list item:
         firstListItem &&
         (!firstListItem.children || !firstListItem.children[0]) &&
         // Directly in two other list items:
         state.stack[state.stack.length - 1] === 'list' &&
         state.stack[state.stack.length - 2] === 'listItem' &&
         state.stack[state.stack.length - 3] === 'list' &&
         state.stack[state.stack.length - 4] === 'listItem' &&
         // That are each the first child.
         state.indexStack[state.indexStack.length - 1] === 0 &&
         state.indexStack[state.indexStack.length - 2] === 0 &&
         state.indexStack[state.indexStack.length - 3] === 0
       ) {
         useDifferentMarker = true;
       }

       // If there’s a thematic break at the start of the first list item,
       // we have to use a different bullet:
       //
       // ```markdown
       // * ---
       // ```
       //
       // …because otherwise it would become one big thematic break.
       if (checkRule(state) === bullet && firstListItem) {
         let index = -1;

         while (++index < node.children.length) {
           const item = node.children[index];

           if (
             item &&
             item.type === 'listItem' &&
             item.children &&
             item.children[0] &&
             item.children[0].type === 'thematicBreak'
           ) {
             useDifferentMarker = true;
             break
           }
         }
       }
     }

     if (useDifferentMarker) {
       bullet = bulletOther;
     }

     state.bulletCurrent = bullet;
     const value = state.containerFlow(node, info);
     state.bulletLastUsed = bullet;
     state.bulletCurrent = bulletCurrent;
     exit();
     return value
   }

   /**
    * @typedef {import('../types.js').State} State
    * @typedef {import('../types.js').Options} Options
    */

   /**
    * @param {State} state
    * @returns {Exclude<Options['listItemIndent'], null | undefined>}
    */
   function checkListItemIndent(state) {
     const style = state.options.listItemIndent || 'tab';

     // To do: remove in a major.
     // @ts-expect-error: deprecated.
     if (style === 1 || style === '1') {
       return 'one'
     }

     if (style !== 'tab' && style !== 'one' && style !== 'mixed') {
       throw new Error(
         'Cannot serialize items with `' +
           style +
           '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'
       )
     }

     return style
   }

   /**
    * @typedef {import('mdast').ListItem} ListItem
    * @typedef {import('../types.js').Map} Map
    * @typedef {import('../types.js').Parent} Parent
    * @typedef {import('../types.js').State} State
    * @typedef {import('../types.js').Info} Info
    */


   /**
    * @param {ListItem} node
    * @param {Parent | undefined} parent
    * @param {State} state
    * @param {Info} info
    * @returns {string}
    */
   function listItem$1(node, parent, state, info) {
     const listItemIndent = checkListItemIndent(state);
     let bullet = state.bulletCurrent || checkBullet(state);

     // Add the marker value for ordered lists.
     if (parent && parent.type === 'list' && parent.ordered) {
       bullet =
         (typeof parent.start === 'number' && parent.start > -1
           ? parent.start
           : 1) +
         (state.options.incrementListMarker === false
           ? 0
           : parent.children.indexOf(node)) +
         bullet;
     }

     let size = bullet.length + 1;

     if (
       listItemIndent === 'tab' ||
       (listItemIndent === 'mixed' &&
         ((parent && parent.type === 'list' && parent.spread) || node.spread))
     ) {
       size = Math.ceil(size / 4) * 4;
     }

     const tracker = state.createTracker(info);
     tracker.move(bullet + ' '.repeat(size - bullet.length));
     tracker.shift(size);
     const exit = state.enter('listItem');
     const value = state.indentLines(
       state.containerFlow(node, tracker.current()),
       map
     );
     exit();

     return value

     /** @type {Map} */
     function map(line, index, blank) {
       if (index) {
         return (blank ? '' : ' '.repeat(size)) + line
       }

       return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line
     }
   }

   /**
    * @typedef {import('mdast').Paragraph} Paragraph
    * @typedef {import('../types.js').Parent} Parent
    * @typedef {import('../types.js').State} State
    * @typedef {import('../types.js').Info} Info
    */

   /**
    * @param {Paragraph} node
    * @param {Parent | undefined} _
    * @param {State} state
    * @param {Info} info
    * @returns {string}
    */
   function paragraph$1(node, _, state, info) {
     const exit = state.enter('paragraph');
     const subexit = state.enter('phrasing');
     const value = state.containerPhrasing(node, info);
     subexit();
     exit();
     return value
   }

   /**
    * @typedef {import('mdast').Root} Root
    * @typedef {import('../types.js').Parent} Parent
    * @typedef {import('../types.js').State} State
    * @typedef {import('../types.js').Info} Info
    */


   /**
    * @param {Root} node
    * @param {Parent | undefined} _
    * @param {State} state
    * @param {Info} info
    * @returns {string}
    */
   function root$1(node, _, state, info) {
     // Note: `html` nodes are ambiguous.
     const hasPhrasing = node.children.some((d) => phrasing$1(d));
     const fn = hasPhrasing ? state.containerPhrasing : state.containerFlow;
     // @ts-expect-error: `root`s are supposed to have one type of content
     return fn.call(state, node, info)
   }

   /**
    * @typedef {import('../types.js').State} State
    * @typedef {import('../types.js').Options} Options
    */

   /**
    * @param {State} state
    * @returns {Exclude<Options['strong'], null | undefined>}
    */
   function checkStrong(state) {
     const marker = state.options.strong || '*';

     if (marker !== '*' && marker !== '_') {
       throw new Error(
         'Cannot serialize strong with `' +
           marker +
           '` for `options.strong`, expected `*`, or `_`'
       )
     }

     return marker
   }

   /**
    * @typedef {import('mdast').Strong} Strong
    * @typedef {import('../types.js').Parent} Parent
    * @typedef {import('../types.js').State} State
    * @typedef {import('../types.js').Info} Info
    */


   strong$1.peek = strongPeek;

   // To do: there are cases where emphasis cannot “form” depending on the
   // previous or next character of sequences.
   // There’s no way around that though, except for injecting zero-width stuff.
   // Do we need to safeguard against that?
   /**
    * @param {Strong} node
    * @param {Parent | undefined} _
    * @param {State} state
    * @param {Info} info
    * @returns {string}
    */
   function strong$1(node, _, state, info) {
     const marker = checkStrong(state);
     const exit = state.enter('strong');
     const tracker = state.createTracker(info);
     let value = tracker.move(marker + marker);
     value += tracker.move(
       state.containerPhrasing(node, {
         before: value,
         after: marker,
         ...tracker.current()
       })
     );
     value += tracker.move(marker + marker);
     exit();
     return value
   }

   /**
    * @param {Strong} _
    * @param {Parent | undefined} _1
    * @param {State} state
    * @returns {string}
    */
   function strongPeek(_, _1, state) {
     return state.options.strong || '*'
   }

   /**
    * @typedef {import('mdast').Text} Text
    * @typedef {import('../types.js').Parent} Parent
    * @typedef {import('../types.js').State} State
    * @typedef {import('../types.js').Info} Info
    */

   /**
    * @param {Text} node
    * @param {Parent | undefined} _
    * @param {State} state
    * @param {Info} info
    * @returns {string}
    */
   function text$2(node, _, state, info) {
     return state.safe(node.value, info)
   }

   /**
    * @typedef {import('../types.js').State} State
    * @typedef {import('../types.js').Options} Options
    */

   /**
    * @param {State} state
    * @returns {Exclude<Options['ruleRepetition'], null | undefined>}
    */
   function checkRuleRepetition(state) {
     const repetition = state.options.ruleRepetition || 3;

     if (repetition < 3) {
       throw new Error(
         'Cannot serialize rules with repetition `' +
           repetition +
           '` for `options.ruleRepetition`, expected `3` or more'
       )
     }

     return repetition
   }

   /**
    * @typedef {import('mdast').ThematicBreak} ThematicBreak
    * @typedef {import('../types.js').Parent} Parent
    * @typedef {import('../types.js').State} State
    */


   /**
    * @param {ThematicBreak} _
    * @param {Parent | undefined} _1
    * @param {State} state
    * @returns {string}
    */
   function thematicBreak$1(_, _1, state) {
     const value = (
       checkRule(state) + (state.options.ruleSpaces ? ' ' : '')
     ).repeat(checkRuleRepetition(state));

     return state.options.ruleSpaces ? value.slice(0, -1) : value
   }

   /**
    * Default (CommonMark) handlers.
    */
   const handle = {
     blockquote: blockquote$1,
     break: hardBreak$1,
     code: code$1,
     definition,
     emphasis: emphasis$1,
     hardBreak: hardBreak$1,
     heading: heading$1,
     html: html$1,
     image: image$1,
     imageReference: imageReference$1,
     inlineCode: inlineCode$1,
     link: link$1,
     linkReference: linkReference$1,
     list: list$2,
     listItem: listItem$1,
     paragraph: paragraph$1,
     root: root$1,
     strong: strong$1,
     text: text$2,
     thematicBreak: thematicBreak$1
   };

   /**
    * @typedef {import('./types.js').Join} Join
    */


   /** @type {Array<Join>} */
   const join = [joinDefaults];

   /** @type {Join} */
   function joinDefaults(left, right, parent, state) {
     // Indented code after list or another indented code.
     if (
       right.type === 'code' &&
       formatCodeAsIndented(right, state) &&
       (left.type === 'list' ||
         (left.type === right.type && formatCodeAsIndented(left, state)))
     ) {
       return false
     }

     // Two lists with the same marker.
     if (
       left.type === 'list' &&
       left.type === right.type &&
       Boolean(left.ordered) === Boolean(right.ordered) &&
       !(left.ordered
         ? state.options.bulletOrderedOther
         : state.options.bulletOther)
     ) {
       return false
     }

     // Join children of a list or an item.
     // In which case, `parent` has a `spread` field.
     if ('spread' in parent && typeof parent.spread === 'boolean') {
       if (
         left.type === 'paragraph' &&
         // Two paragraphs.
         (left.type === right.type ||
           right.type === 'definition' ||
           // Paragraph followed by a setext heading.
           (right.type === 'heading' && formatHeadingAsSetext(right, state)))
       ) {
         return
       }

       return parent.spread ? 1 : 0
     }
   }

   /**
    * @typedef {import('./types.js').Unsafe} Unsafe
    * @typedef {import('./types.js').ConstructName} ConstructName
    */

   /**
    * List of constructs that occur in phrasing (paragraphs, headings), but cannot
    * contain things like attention (emphasis, strong), images, or links.
    * So they sort of cancel each other out.
    * Note: could use a better name.
    *
    * @type {Array<ConstructName>}
    */
   const fullPhrasingSpans = [
     'autolink',
     'destinationLiteral',
     'destinationRaw',
     'reference',
     'titleQuote',
     'titleApostrophe'
   ];

   /** @type {Array<Unsafe>} */
   const unsafe = [
     {character: '\t', after: '[\\r\\n]', inConstruct: 'phrasing'},
     {character: '\t', before: '[\\r\\n]', inConstruct: 'phrasing'},
     {
       character: '\t',
       inConstruct: ['codeFencedLangGraveAccent', 'codeFencedLangTilde']
     },
     {
       character: '\r',
       inConstruct: [
         'codeFencedLangGraveAccent',
         'codeFencedLangTilde',
         'codeFencedMetaGraveAccent',
         'codeFencedMetaTilde',
         'destinationLiteral',
         'headingAtx'
       ]
     },
     {
       character: '\n',
       inConstruct: [
         'codeFencedLangGraveAccent',
         'codeFencedLangTilde',
         'codeFencedMetaGraveAccent',
         'codeFencedMetaTilde',
         'destinationLiteral',
         'headingAtx'
       ]
     },
     {character: ' ', after: '[\\r\\n]', inConstruct: 'phrasing'},
     {character: ' ', before: '[\\r\\n]', inConstruct: 'phrasing'},
     {
       character: ' ',
       inConstruct: ['codeFencedLangGraveAccent', 'codeFencedLangTilde']
     },
     // An exclamation mark can start an image, if it is followed by a link or
     // a link reference.
     {
       character: '!',
       after: '\\[',
       inConstruct: 'phrasing',
       notInConstruct: fullPhrasingSpans
     },
     // A quote can break out of a title.
     {character: '"', inConstruct: 'titleQuote'},
     // A number sign could start an ATX heading if it starts a line.
     {atBreak: true, character: '#'},
     {character: '#', inConstruct: 'headingAtx', after: '(?:[\r\n]|$)'},
     // Dollar sign and percentage are not used in markdown.
     // An ampersand could start a character reference.
     {character: '&', after: '[#A-Za-z]', inConstruct: 'phrasing'},
     // An apostrophe can break out of a title.
     {character: "'", inConstruct: 'titleApostrophe'},
     // A left paren could break out of a destination raw.
     {character: '(', inConstruct: 'destinationRaw'},
     // A left paren followed by `]` could make something into a link or image.
     {
       before: '\\]',
       character: '(',
       inConstruct: 'phrasing',
       notInConstruct: fullPhrasingSpans
     },
     // A right paren could start a list item or break out of a destination
     // raw.
     {atBreak: true, before: '\\d+', character: ')'},
     {character: ')', inConstruct: 'destinationRaw'},
     // An asterisk can start thematic breaks, list items, emphasis, strong.
     {atBreak: true, character: '*', after: '(?:[ \t\r\n*])'},
     {character: '*', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},
     // A plus sign could start a list item.
     {atBreak: true, character: '+', after: '(?:[ \t\r\n])'},
     // A dash can start thematic breaks, list items, and setext heading
     // underlines.
     {atBreak: true, character: '-', after: '(?:[ \t\r\n-])'},
     // A dot could start a list item.
     {atBreak: true, before: '\\d+', character: '.', after: '(?:[ \t\r\n]|$)'},
     // Slash, colon, and semicolon are not used in markdown for constructs.
     // A less than can start html (flow or text) or an autolink.
     // HTML could start with an exclamation mark (declaration, cdata, comment),
     // slash (closing tag), question mark (instruction), or a letter (tag).
     // An autolink also starts with a letter.
     // Finally, it could break out of a destination literal.
     {atBreak: true, character: '<', after: '[!/?A-Za-z]'},
     {
       character: '<',
       after: '[!/?A-Za-z]',
       inConstruct: 'phrasing',
       notInConstruct: fullPhrasingSpans
     },
     {character: '<', inConstruct: 'destinationLiteral'},
     // An equals to can start setext heading underlines.
     {atBreak: true, character: '='},
     // A greater than can start block quotes and it can break out of a
     // destination literal.
     {atBreak: true, character: '>'},
     {character: '>', inConstruct: 'destinationLiteral'},
     // Question mark and at sign are not used in markdown for constructs.
     // A left bracket can start definitions, references, labels,
     {atBreak: true, character: '['},
     {character: '[', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},
     {character: '[', inConstruct: ['label', 'reference']},
     // A backslash can start an escape (when followed by punctuation) or a
     // hard break (when followed by an eol).
     // Note: typical escapes are handled in `safe`!
     {character: '\\', after: '[\\r\\n]', inConstruct: 'phrasing'},
     // A right bracket can exit labels.
     {character: ']', inConstruct: ['label', 'reference']},
     // Caret is not used in markdown for constructs.
     // An underscore can start emphasis, strong, or a thematic break.
     {atBreak: true, character: '_'},
     {character: '_', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},
     // A grave accent can start code (fenced or text), or it can break out of
     // a grave accent code fence.
     {atBreak: true, character: '`'},
     {
       character: '`',
       inConstruct: ['codeFencedLangGraveAccent', 'codeFencedMetaGraveAccent']
     },
     {character: '`', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},
     // Left brace, vertical bar, right brace are not used in markdown for
     // constructs.
     // A tilde can start code (fenced).
     {atBreak: true, character: '~'}
   ];

   /**
    * @typedef {import('../types.js').AssociationId} AssociationId
    */


   /**
    * Get an identifier from an association to match it to others.
    *
    * Associations are nodes that match to something else through an ID:
    * <https://github.com/syntax-tree/mdast#association>.
    *
    * The `label` of an association is the string value: character escapes and
    * references work, and casing is intact.
    * The `identifier` is used to match one association to another:
    * controversially, character escapes and references don’t work in this
    * matching: `&copy;` does not match `©`, and `\+` does not match `+`.
    *
    * But casing is ignored (and whitespace) is trimmed and collapsed: ` A\nb`
    * matches `a b`.
    * So, we do prefer the label when figuring out how we’re going to serialize:
    * it has whitespace, casing, and we can ignore most useless character
    * escapes and all character references.
    *
    * @type {AssociationId}
    */
   function association(node) {
     if (node.label || !node.identifier) {
       return node.label || ''
     }

     return decodeString(node.identifier)
   }

   /**
    * @typedef {import('../types.js').Handle} Handle
    * @typedef {import('../types.js').Info} Info
    * @typedef {import('../types.js').Parent} Parent
    * @typedef {import('../types.js').PhrasingContent} PhrasingContent
    * @typedef {import('../types.js').State} State
    */

   /**
    * Serialize the children of a parent that contains phrasing children.
    *
    * These children will be joined flush together.
    *
    * @param {Parent & {children: Array<PhrasingContent>}} parent
    *   Parent of flow nodes.
    * @param {State} state
    *   Info passed around about the current state.
    * @param {Info} info
    *   Info on where we are in the document we are generating.
    * @returns {string}
    *   Serialized children, joined together.
    */
   function containerPhrasing(parent, state, info) {
     const indexStack = state.indexStack;
     const children = parent.children || [];
     /** @type {Array<string>} */
     const results = [];
     let index = -1;
     let before = info.before;

     indexStack.push(-1);
     let tracker = state.createTracker(info);

     while (++index < children.length) {
       const child = children[index];
       /** @type {string} */
       let after;

       indexStack[indexStack.length - 1] = index;

       if (index + 1 < children.length) {
         /** @type {Handle} */
         // @ts-expect-error: hush, it’s actually a `zwitch`.
         let handle = state.handle.handlers[children[index + 1].type];
         /** @type {Handle} */
         // @ts-expect-error: hush, it’s actually a `zwitch`.
         if (handle && handle.peek) handle = handle.peek;
         after = handle
           ? handle(children[index + 1], parent, state, {
               before: '',
               after: '',
               ...tracker.current()
             }).charAt(0)
           : '';
       } else {
         after = info.after;
       }

       // In some cases, html (text) can be found in phrasing right after an eol.
       // When we’d serialize that, in most cases that would be seen as html
       // (flow).
       // As we can’t escape or so to prevent it from happening, we take a somewhat
       // reasonable approach: replace that eol with a space.
       // See: <https://github.com/syntax-tree/mdast-util-to-markdown/issues/15>
       if (
         results.length > 0 &&
         (before === '\r' || before === '\n') &&
         child.type === 'html'
       ) {
         results[results.length - 1] = results[results.length - 1].replace(
           /(\r?\n|\r)$/,
           ' '
         );
         before = ' ';

         // To do: does this work to reset tracker?
         tracker = state.createTracker(info);
         tracker.move(results.join(''));
       }

       results.push(
         tracker.move(
           state.handle(child, parent, state, {
             ...tracker.current(),
             before,
             after
           })
         )
       );

       before = results[results.length - 1].slice(-1);
     }

     indexStack.pop();

     return results.join('')
   }

   /**
    * @typedef {import('../types.js').FlowContent} FlowContent
    * @typedef {import('../types.js').Node} Node
    * @typedef {import('../types.js').Parent} Parent
    * @typedef {import('../types.js').State} State
    * @typedef {import('../types.js').TrackFields} TrackFields
    */

   /**
    * @param {Parent & {children: Array<FlowContent>}} parent
    *   Parent of flow nodes.
    * @param {State} state
    *   Info passed around about the current state.
    * @param {TrackFields} info
    *   Info on where we are in the document we are generating.
    * @returns {string}
    *   Serialized children, joined by (blank) lines.
    */
   function containerFlow(parent, state, info) {
     const indexStack = state.indexStack;
     const children = parent.children || [];
     const tracker = state.createTracker(info);
     /** @type {Array<string>} */
     const results = [];
     let index = -1;

     indexStack.push(-1);

     while (++index < children.length) {
       const child = children[index];

       indexStack[indexStack.length - 1] = index;

       results.push(
         tracker.move(
           state.handle(child, parent, state, {
             before: '\n',
             after: '\n',
             ...tracker.current()
           })
         )
       );

       if (child.type !== 'list') {
         state.bulletLastUsed = undefined;
       }

       if (index < children.length - 1) {
         results.push(
           tracker.move(between(child, children[index + 1], parent, state))
         );
       }
     }

     indexStack.pop();

     return results.join('')
   }

   /**
    * @param {Node} left
    * @param {Node} right
    * @param {Parent} parent
    * @param {State} state
    * @returns {string}
    */
   function between(left, right, parent, state) {
     let index = state.join.length;

     while (index--) {
       const result = state.join[index](left, right, parent, state);

       if (result === true || result === 1) {
         break
       }

       if (typeof result === 'number') {
         return '\n'.repeat(1 + result)
       }

       if (result === false) {
         return '\n\n<!---->\n\n'
       }
     }

     return '\n\n'
   }

   /**
    * @typedef {import('../types.js').IndentLines} IndentLines
    */

   const eol$1 = /\r?\n|\r/g;

   /**
    * @type {IndentLines}
    */
   function indentLines(value, map) {
     /** @type {Array<string>} */
     const result = [];
     let start = 0;
     let line = 0;
     /** @type {RegExpExecArray | null} */
     let match;

     while ((match = eol$1.exec(value))) {
       one(value.slice(start, match.index));
       result.push(match[0]);
       start = match.index + match[0].length;
       line++;
     }

     one(value.slice(start));

     return result.join('')

     /**
      * @param {string} value
      */
     function one(value) {
       result.push(map(value, line, !value));
     }
   }

   /**
    * @typedef {import('../types.js').State} State
    * @typedef {import('../types.js').SafeConfig} SafeConfig
    */


   /**
    * Make a string safe for embedding in markdown constructs.
    *
    * In markdown, almost all punctuation characters can, in certain cases,
    * result in something.
    * Whether they do is highly subjective to where they happen and in what
    * they happen.
    *
    * To solve this, `mdast-util-to-markdown` tracks:
    *
    * * Characters before and after something;
    * * What “constructs” we are in.
    *
    * This information is then used by this function to escape or encode
    * special characters.
    *
    * @param {State} state
    *   Info passed around about the current state.
    * @param {string | null | undefined} input
    *   Raw value to make safe.
    * @param {SafeConfig} config
    *   Configuration.
    * @returns {string}
    *   Serialized markdown safe for embedding.
    */
   function safe(state, input, config) {
     const value = (config.before || '') + (input || '') + (config.after || '');
     /** @type {Array<number>} */
     const positions = [];
     /** @type {Array<string>} */
     const result = [];
     /** @type {Record<number, {before: boolean, after: boolean}>} */
     const infos = {};
     let index = -1;

     while (++index < state.unsafe.length) {
       const pattern = state.unsafe[index];

       if (!patternInScope(state.stack, pattern)) {
         continue
       }

       const expression = patternCompile(pattern);
       /** @type {RegExpExecArray | null} */
       let match;

       while ((match = expression.exec(value))) {
         const before = 'before' in pattern || Boolean(pattern.atBreak);
         const after = 'after' in pattern;
         const position = match.index + (before ? match[1].length : 0);

         if (positions.includes(position)) {
           if (infos[position].before && !before) {
             infos[position].before = false;
           }

           if (infos[position].after && !after) {
             infos[position].after = false;
           }
         } else {
           positions.push(position);
           infos[position] = {before, after};
         }
       }
     }

     positions.sort(numerical);

     let start = config.before ? config.before.length : 0;
     const end = value.length - (config.after ? config.after.length : 0);
     index = -1;

     while (++index < positions.length) {
       const position = positions[index];

       // Character before or after matched:
       if (position < start || position >= end) {
         continue
       }

       // If this character is supposed to be escaped because it has a condition on
       // the next character, and the next character is definitly being escaped,
       // then skip this escape.
       if (
         (position + 1 < end &&
           positions[index + 1] === position + 1 &&
           infos[position].after &&
           !infos[position + 1].before &&
           !infos[position + 1].after) ||
         (positions[index - 1] === position - 1 &&
           infos[position].before &&
           !infos[position - 1].before &&
           !infos[position - 1].after)
       ) {
         continue
       }

       if (start !== position) {
         // If we have to use a character reference, an ampersand would be more
         // correct, but as backslashes only care about punctuation, either will
         // do the trick
         result.push(escapeBackslashes(value.slice(start, position), '\\'));
       }

       start = position;

       if (
         /[!-/:-@[-`{-~]/.test(value.charAt(position)) &&
         (!config.encode || !config.encode.includes(value.charAt(position)))
       ) {
         // Character escape.
         result.push('\\');
       } else {
         // Character reference.
         result.push(
           '&#x' + value.charCodeAt(position).toString(16).toUpperCase() + ';'
         );
         start++;
       }
     }

     result.push(escapeBackslashes(value.slice(start, end), config.after));

     return result.join('')
   }

   /**
    * @param {number} a
    * @param {number} b
    * @returns {number}
    */
   function numerical(a, b) {
     return a - b
   }

   /**
    * @param {string} value
    * @param {string} after
    * @returns {string}
    */
   function escapeBackslashes(value, after) {
     const expression = /\\(?=[!-/:-@[-`{-~])/g;
     /** @type {Array<number>} */
     const positions = [];
     /** @type {Array<string>} */
     const results = [];
     const whole = value + after;
     let index = -1;
     let start = 0;
     /** @type {RegExpExecArray | null} */
     let match;

     while ((match = expression.exec(whole))) {
       positions.push(match.index);
     }

     while (++index < positions.length) {
       if (start !== positions[index]) {
         results.push(value.slice(start, positions[index]));
       }

       results.push('\\');
       start = positions[index];
     }

     results.push(value.slice(start));

     return results.join('')
   }

   /**
    * @typedef {import('../types.js').CreateTracker} CreateTracker
    * @typedef {import('../types.js').TrackCurrent} TrackCurrent
    * @typedef {import('../types.js').TrackMove} TrackMove
    * @typedef {import('../types.js').TrackShift} TrackShift
    */

   /**
    * Track positional info in the output.
    *
    * @type {CreateTracker}
    */
   function track(config) {
     // Defaults are used to prevent crashes when older utilities somehow activate
     // this code.
     /* c8 ignore next 5 */
     const options = config || {};
     const now = options.now || {};
     let lineShift = options.lineShift || 0;
     let line = now.line || 1;
     let column = now.column || 1;

     return {move, current, shift}

     /**
      * Get the current tracked info.
      *
      * @type {TrackCurrent}
      */
     function current() {
       return {now: {line, column}, lineShift}
     }

     /**
      * Define an increased line shift (the typical indent for lines).
      *
      * @type {TrackShift}
      */
     function shift(value) {
       lineShift += value;
     }

     /**
      * Move past some generated markdown.
      *
      * @type {TrackMove}
      */
     function move(input) {
       // eslint-disable-next-line unicorn/prefer-default-parameters
       const value = input || '';
       const chunks = value.split(/\r?\n|\r/g);
       const tail = chunks[chunks.length - 1];
       line += chunks.length - 1;
       column =
         chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift;
       return value
     }
   }

   /**
    * @typedef {import('./types.js').Enter} Enter
    * @typedef {import('./types.js').Info} Info
    * @typedef {import('./types.js').Join} Join
    * @typedef {import('./types.js').FlowContent} FlowContent
    * @typedef {import('./types.js').Node} Node
    * @typedef {import('./types.js').Options} Options
    * @typedef {import('./types.js').Parent} Parent
    * @typedef {import('./types.js').PhrasingContent} PhrasingContent
    * @typedef {import('./types.js').SafeConfig} SafeConfig
    * @typedef {import('./types.js').State} State
    * @typedef {import('./types.js').TrackFields} TrackFields
    */


   /**
    * Turn an mdast syntax tree into markdown.
    *
    * @param {Node} tree
    *   Tree to serialize.
    * @param {Options} [options]
    *   Configuration (optional).
    * @returns {string}
    *   Serialized markdown representing `tree`.
    */
   function toMarkdown(tree, options = {}) {
     /** @type {State} */
     const state = {
       enter,
       indentLines,
       associationId: association,
       containerPhrasing: containerPhrasingBound,
       containerFlow: containerFlowBound,
       createTracker: track,
       safe: safeBound,
       stack: [],
       unsafe: [],
       join: [],
       // @ts-expect-error: we’ll fill it next.
       handlers: {},
       options: {},
       indexStack: [],
       // @ts-expect-error: we’ll add `handle` later.
       handle: undefined
     };

     configure(state, {unsafe, join, handlers: handle});
     configure(state, options);

     if (state.options.tightDefinitions) {
       configure(state, {join: [joinDefinition]});
     }

     state.handle = zwitch('type', {
       invalid,
       unknown,
       handlers: state.handlers
     });

     let result = state.handle(tree, undefined, state, {
       before: '\n',
       after: '\n',
       now: {line: 1, column: 1},
       lineShift: 0
     });

     if (
       result &&
       result.charCodeAt(result.length - 1) !== 10 &&
       result.charCodeAt(result.length - 1) !== 13
     ) {
       result += '\n';
     }

     return result

     /** @type {Enter} */
     function enter(name) {
       state.stack.push(name);
       return exit

       function exit() {
         state.stack.pop();
       }
     }
   }

   /**
    * @param {unknown} value
    * @returns {never}
    */
   function invalid(value) {
     throw new Error('Cannot handle value `' + value + '`, expected node')
   }

   /**
    * @param {unknown} node
    * @returns {never}
    */
   function unknown(node) {
     // @ts-expect-error: fine.
     throw new Error('Cannot handle unknown node `' + node.type + '`')
   }

   /** @type {Join} */
   function joinDefinition(left, right) {
     // No blank line between adjacent definitions.
     if (left.type === 'definition' && left.type === right.type) {
       return 0
     }
   }

   /**
    * Serialize the children of a parent that contains phrasing children.
    *
    * These children will be joined flush together.
    *
    * @this {State}
    *   Info passed around about the current state.
    * @param {Parent & {children: Array<PhrasingContent>}} parent
    *   Parent of flow nodes.
    * @param {Info} info
    *   Info on where we are in the document we are generating.
    * @returns {string}
    *   Serialized children, joined together.
    */
   function containerPhrasingBound(parent, info) {
     return containerPhrasing(parent, this, info)
   }

   /**
    * Serialize the children of a parent that contains flow children.
    *
    * These children will typically be joined by blank lines.
    * What they are joined by exactly is defined by `Join` functions.
    *
    * @this {State}
    *   Info passed around about the current state.
    * @param {Parent & {children: Array<FlowContent>}} parent
    *   Parent of flow nodes.
    * @param {TrackFields} info
    *   Info on where we are in the document we are generating.
    * @returns {string}
    *   Serialized children, joined by (blank) lines.
    */
   function containerFlowBound(parent, info) {
     return containerFlow(parent, this, info)
   }

   /**
    * Make a string safe for embedding in markdown constructs.
    *
    * In markdown, almost all punctuation characters can, in certain cases,
    * result in something.
    * Whether they do is highly subjective to where they happen and in what
    * they happen.
    *
    * To solve this, `mdast-util-to-markdown` tracks:
    *
    * * Characters before and after something;
    * * What “constructs” we are in.
    *
    * This information is then used by this function to escape or encode
    * special characters.
    *
    * @this {State}
    *   Info passed around about the current state.
    * @param {string | null | undefined} value
    *   Raw value to make safe.
    * @param {SafeConfig} config
    *   Configuration.
    * @returns {string}
    *   Serialized markdown safe for embedding.
    */
   function safeBound(value, config) {
     return safe(this, value, config)
   }

   /**
    * @typedef {import('hast').Element} Element
    * @typedef {import('mdast').Blockquote} Blockquote
    * @typedef {import('../state.js').State} State
    */

   /**
    * Turn an mdast `blockquote` node into hast.
    *
    * @param {State} state
    *   Info passed around.
    * @param {Blockquote} node
    *   mdast node.
    * @returns {Element}
    *   hast node.
    */
   function blockquote(state, node) {
     /** @type {Element} */
     const result = {
       type: 'element',
       tagName: 'blockquote',
       properties: {},
       children: state.wrap(state.all(node), true)
     };
     state.patch(node, result);
     return state.applyData(node, result)
   }

   /**
    * @typedef {import('hast').Element} Element
    * @typedef {import('hast').Text} Text
    * @typedef {import('mdast').Break} Break
    * @typedef {import('../state.js').State} State
    */

   /**
    * Turn an mdast `break` node into hast.
    *
    * @param {State} state
    *   Info passed around.
    * @param {Break} node
    *   mdast node.
    * @returns {Array<Element | Text>}
    *   hast element content.
    */
   function hardBreak(state, node) {
     /** @type {Element} */
     const result = {type: 'element', tagName: 'br', properties: {}, children: []};
     state.patch(node, result);
     return [state.applyData(node, result), {type: 'text', value: '\n'}]
   }

   /**
    * @typedef {import('hast').Element} Element
    * @typedef {import('hast').Properties} Properties
    * @typedef {import('mdast').Code} Code
    * @typedef {import('../state.js').State} State

    */

   /**
    * Turn an mdast `code` node into hast.
    *
    * @param {State} state
    *   Info passed around.
    * @param {Code} node
    *   mdast node.
    * @returns {Element}
    *   hast node.
    */
   function code(state, node) {
     const value = node.value ? node.value + '\n' : '';
     // To do: next major, use `node.lang` w/o regex, the splitting’s been going
     // on for years in remark now.
     const lang = node.lang ? node.lang.match(/^[^ \t]+(?=[ \t]|$)/) : null;
     /** @type {Properties} */
     const properties = {};

     if (lang) {
       properties.className = ['language-' + lang];
     }

     // Create `<code>`.
     /** @type {Element} */
     let result = {
       type: 'element',
       tagName: 'code',
       properties,
       children: [{type: 'text', value}]
     };

     if (node.meta) {
       result.data = {meta: node.meta};
     }

     state.patch(node, result);
     result = state.applyData(node, result);

     // Create `<pre>`.
     result = {type: 'element', tagName: 'pre', properties: {}, children: [result]};
     state.patch(node, result);
     return result
   }

   /**
    * @typedef {import('hast').Element} Element
    * @typedef {import('mdast').Delete} Delete
    * @typedef {import('../state.js').State} State

    */

   /**
    * Turn an mdast `delete` node into hast.
    *
    * @param {State} state
    *   Info passed around.
    * @param {Delete} node
    *   mdast node.
    * @returns {Element}
    *   hast node.
    */
   function strikethrough(state, node) {
     /** @type {Element} */
     const result = {
       type: 'element',
       tagName: 'del',
       properties: {},
       children: state.all(node)
     };
     state.patch(node, result);
     return state.applyData(node, result)
   }

   /**
    * @typedef {import('hast').Element} Element
    * @typedef {import('mdast').Emphasis} Emphasis
    * @typedef {import('../state.js').State} State
    */

   /**
    * Turn an mdast `emphasis` node into hast.
    *
    * @param {State} state
    *   Info passed around.
    * @param {Emphasis} node
    *   mdast node.
    * @returns {Element}
    *   hast node.
    */
   function emphasis(state, node) {
     /** @type {Element} */
     const result = {
       type: 'element',
       tagName: 'em',
       properties: {},
       children: state.all(node)
     };
     state.patch(node, result);
     return state.applyData(node, result)
   }

   /**
    * Normalize a URL.
    *
    * Encode unsafe characters with percent-encoding, skipping already encoded
    * sequences.
    *
    * @param {string} value
    *   URI to normalize.
    * @returns {string}
    *   Normalized URI.
    */
   function normalizeUri(value) {
     /** @type {Array<string>} */
     const result = [];
     let index = -1;
     let start = 0;
     let skip = 0;
     while (++index < value.length) {
       const code = value.charCodeAt(index);
       /** @type {string} */
       let replace = '';

       // A correct percent encoded value.
       if (
         code === 37 &&
         asciiAlphanumeric(value.charCodeAt(index + 1)) &&
         asciiAlphanumeric(value.charCodeAt(index + 2))
       ) {
         skip = 2;
       }
       // ASCII.
       else if (code < 128) {
         if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {
           replace = String.fromCharCode(code);
         }
       }
       // Astral.
       else if (code > 55295 && code < 57344) {
         const next = value.charCodeAt(index + 1);

         // A correct surrogate pair.
         if (code < 56320 && next > 56319 && next < 57344) {
           replace = String.fromCharCode(code, next);
           skip = 1;
         }
         // Lone surrogate.
         else {
           replace = '\uFFFD';
         }
       }
       // Unicode.
       else {
         replace = String.fromCharCode(code);
       }
       if (replace) {
         result.push(value.slice(start, index), encodeURIComponent(replace));
         start = index + skip + 1;
         replace = '';
       }
       if (skip) {
         index += skip;
         skip = 0;
       }
     }
     return result.join('') + value.slice(start)
   }

   /**
    * @typedef {import('mdast').FootnoteReference} FootnoteReference
    * @typedef {import('hast').Element} Element
    * @typedef {import('../state.js').State} State
    */


   /**
    * Turn an mdast `footnoteReference` node into hast.
    *
    * @param {State} state
    *   Info passed around.
    * @param {FootnoteReference} node
    *   mdast node.
    * @returns {Element}
    *   hast node.
    */
   function footnoteReference(state, node) {
     const id = String(node.identifier).toUpperCase();
     const safeId = normalizeUri(id.toLowerCase());
     const index = state.footnoteOrder.indexOf(id);
     /** @type {number} */
     let counter;

     if (index === -1) {
       state.footnoteOrder.push(id);
       state.footnoteCounts[id] = 1;
       counter = state.footnoteOrder.length;
     } else {
       state.footnoteCounts[id]++;
       counter = index + 1;
     }

     const reuseCounter = state.footnoteCounts[id];

     /** @type {Element} */
     const link = {
       type: 'element',
       tagName: 'a',
       properties: {
         href: '#' + state.clobberPrefix + 'fn-' + safeId,
         id:
           state.clobberPrefix +
           'fnref-' +
           safeId +
           (reuseCounter > 1 ? '-' + reuseCounter : ''),
         dataFootnoteRef: true,
         ariaDescribedBy: ['footnote-label']
       },
       children: [{type: 'text', value: String(counter)}]
     };
     state.patch(node, link);

     /** @type {Element} */
     const sup = {
       type: 'element',
       tagName: 'sup',
       properties: {},
       children: [link]
     };
     state.patch(node, sup);
     return state.applyData(node, sup)
   }

   /**
    * @typedef {import('hast').Element} Element
    * @typedef {import('mdast').Footnote} Footnote
    * @typedef {import('../state.js').State} State
    */


   // To do: when both:
   // * <https://github.com/micromark/micromark-extension-footnote>
   // * <https://github.com/syntax-tree/mdast-util-footnote>
   // …are archived, remove this (also from mdast).
   // These inline notes are not used in GFM.

   /**
    * Turn an mdast `footnote` node into hast.
    *
    * @param {State} state
    *   Info passed around.
    * @param {Footnote} node
    *   mdast node.
    * @returns {Element}
    *   hast node.
    */
   function footnote(state, node) {
     const footnoteById = state.footnoteById;
     let no = 1;

     while (no in footnoteById) no++;

     const identifier = String(no);

     footnoteById[identifier] = {
       type: 'footnoteDefinition',
       identifier,
       children: [{type: 'paragraph', children: node.children}],
       position: node.position
     };

     return footnoteReference(state, {
       type: 'footnoteReference',
       identifier,
       position: node.position
     })
   }

   /**
    * @typedef {import('hast').Element} Element
    * @typedef {import('mdast').Heading} Heading
    * @typedef {import('../state.js').State} State
    */

   /**
    * Turn an mdast `heading` node into hast.
    *
    * @param {State} state
    *   Info passed around.
    * @param {Heading} node
    *   mdast node.
    * @returns {Element}
    *   hast node.
    */
   function heading(state, node) {
     /** @type {Element} */
     const result = {
       type: 'element',
       tagName: 'h' + node.depth,
       properties: {},
       children: state.all(node)
     };
     state.patch(node, result);
     return state.applyData(node, result)
   }

   /**
    * @typedef {import('hast').Element} Element
    * @typedef {import('mdast').HTML} Html
    * @typedef {import('../state.js').State} State
    * @typedef {import('../../index.js').Raw} Raw
    */

   /**
    * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise
    * nothing).
    *
    * @param {State} state
    *   Info passed around.
    * @param {Html} node
    *   mdast node.
    * @returns {Raw | Element | null}
    *   hast node.
    */
   function html(state, node) {
     if (state.dangerous) {
       /** @type {Raw} */
       const result = {type: 'raw', value: node.value};
       state.patch(node, result);
       return state.applyData(node, result)
     }

     // To do: next major: return `undefined`.
     return null
   }

   /**
    * @typedef {import('hast').ElementContent} ElementContent
    *
    * @typedef {import('mdast').Content} Content
    * @typedef {import('mdast').Reference} Reference
    * @typedef {import('mdast').Root} Root
    *
    * @typedef {import('./state.js').State} State
    */

   /**
    * @typedef {Root | Content} Nodes
    * @typedef {Extract<Nodes, Reference>} References
    */

   // To do: next major: always return array.

   /**
    * Return the content of a reference without definition as plain text.
    *
    * @param {State} state
    *   Info passed around.
    * @param {References} node
    *   Reference node (image, link).
    * @returns {ElementContent | Array<ElementContent>}
    *   hast content.
    */
   function revert(state, node) {
     const subtype = node.referenceType;
     let suffix = ']';

     if (subtype === 'collapsed') {
       suffix += '[]';
     } else if (subtype === 'full') {
       suffix += '[' + (node.label || node.identifier) + ']';
     }

     if (node.type === 'imageReference') {
       return {type: 'text', value: '![' + node.alt + suffix}
     }

     const contents = state.all(node);
     const head = contents[0];

     if (head && head.type === 'text') {
       head.value = '[' + head.value;
     } else {
       contents.unshift({type: 'text', value: '['});
     }

     const tail = contents[contents.length - 1];

     if (tail && tail.type === 'text') {
       tail.value += suffix;
     } else {
       contents.push({type: 'text', value: suffix});
     }

     return contents
   }

   /**
    * @typedef {import('hast').ElementContent} ElementContent
    * @typedef {import('hast').Element} Element
    * @typedef {import('hast').Properties} Properties
    * @typedef {import('mdast').ImageReference} ImageReference
    * @typedef {import('../state.js').State} State
    */


   /**
    * Turn an mdast `imageReference` node into hast.
    *
    * @param {State} state
    *   Info passed around.
    * @param {ImageReference} node
    *   mdast node.
    * @returns {ElementContent | Array<ElementContent>}
    *   hast node.
    */
   function imageReference(state, node) {
     const def = state.definition(node.identifier);

     if (!def) {
       return revert(state, node)
     }

     /** @type {Properties} */
     const properties = {src: normalizeUri(def.url || ''), alt: node.alt};

     if (def.title !== null && def.title !== undefined) {
       properties.title = def.title;
     }

     /** @type {Element} */
     const result = {type: 'element', tagName: 'img', properties, children: []};
     state.patch(node, result);
     return state.applyData(node, result)
   }

   /**
    * @typedef {import('hast').Element} Element
    * @typedef {import('hast').Properties} Properties
    * @typedef {import('mdast').Image} Image
    * @typedef {import('../state.js').State} State
    */


   /**
    * Turn an mdast `image` node into hast.
    *
    * @param {State} state
    *   Info passed around.
    * @param {Image} node
    *   mdast node.
    * @returns {Element}
    *   hast node.
    */
   function image(state, node) {
     /** @type {Properties} */
     const properties = {src: normalizeUri(node.url)};

     if (node.alt !== null && node.alt !== undefined) {
       properties.alt = node.alt;
     }

     if (node.title !== null && node.title !== undefined) {
       properties.title = node.title;
     }

     /** @type {Element} */
     const result = {type: 'element', tagName: 'img', properties, children: []};
     state.patch(node, result);
     return state.applyData(node, result)
   }

   /**
    * @typedef {import('hast').Element} Element
    * @typedef {import('hast').Text} Text
    * @typedef {import('mdast').InlineCode} InlineCode
    * @typedef {import('../state.js').State} State
    */

   /**
    * Turn an mdast `inlineCode` node into hast.
    *
    * @param {State} state
    *   Info passed around.
    * @param {InlineCode} node
    *   mdast node.
    * @returns {Element}
    *   hast node.
    */
   function inlineCode(state, node) {
     /** @type {Text} */
     const text = {type: 'text', value: node.value.replace(/\r?\n|\r/g, ' ')};
     state.patch(node, text);

     /** @type {Element} */
     const result = {
       type: 'element',
       tagName: 'code',
       properties: {},
       children: [text]
     };
     state.patch(node, result);
     return state.applyData(node, result)
   }

   /**
    * @typedef {import('hast').Element} Element
    * @typedef {import('hast').ElementContent} ElementContent
    * @typedef {import('hast').Properties} Properties
    * @typedef {import('mdast').LinkReference} LinkReference
    * @typedef {import('../state.js').State} State
    */


   /**
    * Turn an mdast `linkReference` node into hast.
    *
    * @param {State} state
    *   Info passed around.
    * @param {LinkReference} node
    *   mdast node.
    * @returns {ElementContent | Array<ElementContent>}
    *   hast node.
    */
   function linkReference(state, node) {
     const def = state.definition(node.identifier);

     if (!def) {
       return revert(state, node)
     }

     /** @type {Properties} */
     const properties = {href: normalizeUri(def.url || '')};

     if (def.title !== null && def.title !== undefined) {
       properties.title = def.title;
     }

     /** @type {Element} */
     const result = {
       type: 'element',
       tagName: 'a',
       properties,
       children: state.all(node)
     };
     state.patch(node, result);
     return state.applyData(node, result)
   }

   /**
    * @typedef {import('hast').Element} Element
    * @typedef {import('hast').Properties} Properties
    * @typedef {import('mdast').Link} Link
    * @typedef {import('../state.js').State} State
    */


   /**
    * Turn an mdast `link` node into hast.
    *
    * @param {State} state
    *   Info passed around.
    * @param {Link} node
    *   mdast node.
    * @returns {Element}
    *   hast node.
    */
   function link(state, node) {
     /** @type {Properties} */
     const properties = {href: normalizeUri(node.url)};

     if (node.title !== null && node.title !== undefined) {
       properties.title = node.title;
     }

     /** @type {Element} */
     const result = {
       type: 'element',
       tagName: 'a',
       properties,
       children: state.all(node)
     };
     state.patch(node, result);
     return state.applyData(node, result)
   }

   /**
    * @typedef {import('hast').Element} Element
    * @typedef {import('hast').ElementContent} ElementContent
    * @typedef {import('hast').Properties} Properties
    * @typedef {import('mdast').Content} Content
    * @typedef {import('mdast').ListItem} ListItem
    * @typedef {import('mdast').Parent} Parent
    * @typedef {import('mdast').Root} Root
    * @typedef {import('../state.js').State} State
    */

   /**
    * @typedef {Root | Content} Nodes
    * @typedef {Extract<Nodes, Parent>} Parents
    */

   /**
    * Turn an mdast `listItem` node into hast.
    *
    * @param {State} state
    *   Info passed around.
    * @param {ListItem} node
    *   mdast node.
    * @param {Parents | null | undefined} parent
    *   Parent of `node`.
    * @returns {Element}
    *   hast node.
    */
   function listItem(state, node, parent) {
     const results = state.all(node);
     const loose = parent ? listLoose(parent) : listItemLoose(node);
     /** @type {Properties} */
     const properties = {};
     /** @type {Array<ElementContent>} */
     const children = [];

     if (typeof node.checked === 'boolean') {
       const head = results[0];
       /** @type {Element} */
       let paragraph;

       if (head && head.type === 'element' && head.tagName === 'p') {
         paragraph = head;
       } else {
         paragraph = {type: 'element', tagName: 'p', properties: {}, children: []};
         results.unshift(paragraph);
       }

       if (paragraph.children.length > 0) {
         paragraph.children.unshift({type: 'text', value: ' '});
       }

       paragraph.children.unshift({
         type: 'element',
         tagName: 'input',
         properties: {type: 'checkbox', checked: node.checked, disabled: true},
         children: []
       });

       // According to github-markdown-css, this class hides bullet.
       // See: <https://github.com/sindresorhus/github-markdown-css>.
       properties.className = ['task-list-item'];
     }

     let index = -1;

     while (++index < results.length) {
       const child = results[index];

       // Add eols before nodes, except if this is a loose, first paragraph.
       if (
         loose ||
         index !== 0 ||
         child.type !== 'element' ||
         child.tagName !== 'p'
       ) {
         children.push({type: 'text', value: '\n'});
       }

       if (child.type === 'element' && child.tagName === 'p' && !loose) {
         children.push(...child.children);
       } else {
         children.push(child);
       }
     }

     const tail = results[results.length - 1];

     // Add a final eol.
     if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {
       children.push({type: 'text', value: '\n'});
     }

     /** @type {Element} */
     const result = {type: 'element', tagName: 'li', properties, children};
     state.patch(node, result);
     return state.applyData(node, result)
   }

   /**
    * @param {Parents} node
    * @return {Boolean}
    */
   function listLoose(node) {
     let loose = false;
     if (node.type === 'list') {
       loose = node.spread || false;
       const children = node.children;
       let index = -1;

       while (!loose && ++index < children.length) {
         loose = listItemLoose(children[index]);
       }
     }

     return loose
   }

   /**
    * @param {ListItem} node
    * @return {Boolean}
    */
   function listItemLoose(node) {
     const spread = node.spread;

     return spread === undefined || spread === null
       ? node.children.length > 1
       : spread
   }

   /**
    * @typedef {import('hast').Element} Element
    * @typedef {import('hast').Properties} Properties
    * @typedef {import('mdast').List} List
    * @typedef {import('../state.js').State} State
    */

   /**
    * Turn an mdast `list` node into hast.
    *
    * @param {State} state
    *   Info passed around.
    * @param {List} node
    *   mdast node.
    * @returns {Element}
    *   hast node.
    */
   function list$1(state, node) {
     /** @type {Properties} */
     const properties = {};
     const results = state.all(node);
     let index = -1;

     if (typeof node.start === 'number' && node.start !== 1) {
       properties.start = node.start;
     }

     // Like GitHub, add a class for custom styling.
     while (++index < results.length) {
       const child = results[index];

       if (
         child.type === 'element' &&
         child.tagName === 'li' &&
         child.properties &&
         Array.isArray(child.properties.className) &&
         child.properties.className.includes('task-list-item')
       ) {
         properties.className = ['contains-task-list'];
         break
       }
     }

     /** @type {Element} */
     const result = {
       type: 'element',
       tagName: node.ordered ? 'ol' : 'ul',
       properties,
       children: state.wrap(results, true)
     };
     state.patch(node, result);
     return state.applyData(node, result)
   }

   /**
    * @typedef {import('hast').Element} Element
    * @typedef {import('mdast').Paragraph} Paragraph
    * @typedef {import('../state.js').State} State
    */

   /**
    * Turn an mdast `paragraph` node into hast.
    *
    * @param {State} state
    *   Info passed around.
    * @param {Paragraph} node
    *   mdast node.
    * @returns {Element}
    *   hast node.
    */
   function paragraph(state, node) {
     /** @type {Element} */
     const result = {
       type: 'element',
       tagName: 'p',
       properties: {},
       children: state.all(node)
     };
     state.patch(node, result);
     return state.applyData(node, result)
   }

   /**
    * @typedef {import('hast').Root} HastRoot
    * @typedef {import('hast').Element} HastElement
    * @typedef {import('mdast').Root} MdastRoot
    * @typedef {import('../state.js').State} State
    */

   /**
    * Turn an mdast `root` node into hast.
    *
    * @param {State} state
    *   Info passed around.
    * @param {MdastRoot} node
    *   mdast node.
    * @returns {HastRoot | HastElement}
    *   hast node.
    */
   function root(state, node) {
     /** @type {HastRoot} */
     const result = {type: 'root', children: state.wrap(state.all(node))};
     state.patch(node, result);
     return state.applyData(node, result)
   }

   /**
    * @typedef {import('hast').Element} Element
    * @typedef {import('mdast').Strong} Strong
    * @typedef {import('../state.js').State} State
    */

   /**
    * Turn an mdast `strong` node into hast.
    *
    * @param {State} state
    *   Info passed around.
    * @param {Strong} node
    *   mdast node.
    * @returns {Element}
    *   hast node.
    */
   function strong(state, node) {
     /** @type {Element} */
     const result = {
       type: 'element',
       tagName: 'strong',
       properties: {},
       children: state.all(node)
     };
     state.patch(node, result);
     return state.applyData(node, result)
   }

   /**
    * @typedef {import('hast').Element} Element
    * @typedef {import('mdast').Table} Table
    * @typedef {import('../state.js').State} State
    */


   /**
    * Turn an mdast `table` node into hast.
    *
    * @param {State} state
    *   Info passed around.
    * @param {Table} node
    *   mdast node.
    * @returns {Element}
    *   hast node.
    */
   function table(state, node) {
     const rows = state.all(node);
     const firstRow = rows.shift();
     /** @type {Array<Element>} */
     const tableContent = [];

     if (firstRow) {
       /** @type {Element} */
       const head = {
         type: 'element',
         tagName: 'thead',
         properties: {},
         children: state.wrap([firstRow], true)
       };
       state.patch(node.children[0], head);
       tableContent.push(head);
     }

     if (rows.length > 0) {
       /** @type {Element} */
       const body = {
         type: 'element',
         tagName: 'tbody',
         properties: {},
         children: state.wrap(rows, true)
       };

       const start = pointStart(node.children[1]);
       const end = pointEnd(node.children[node.children.length - 1]);
       if (start.line && end.line) body.position = {start, end};
       tableContent.push(body);
     }

     /** @type {Element} */
     const result = {
       type: 'element',
       tagName: 'table',
       properties: {},
       children: state.wrap(tableContent, true)
     };
     state.patch(node, result);
     return state.applyData(node, result)
   }

   /**
    * @typedef {import('hast').Properties} Properties
    * @typedef {import('hast').Element} Element
    * @typedef {import('hast').ElementContent} ElementContent
    * @typedef {import('mdast').Content} Content
    * @typedef {import('mdast').Parent} Parent
    * @typedef {import('mdast').Root} Root
    * @typedef {import('mdast').TableRow} TableRow
    * @typedef {import('../state.js').State} State
    */

   /**
    * @typedef {Root | Content} Nodes
    * @typedef {Extract<Nodes, Parent>} Parents
    */

   /**
    * Turn an mdast `tableRow` node into hast.
    *
    * @param {State} state
    *   Info passed around.
    * @param {TableRow} node
    *   mdast node.
    * @param {Parents | null | undefined} parent
    *   Parent of `node`.
    * @returns {Element}
    *   hast node.
    */
   function tableRow(state, node, parent) {
     const siblings = parent ? parent.children : undefined;
     // Generate a body row when without parent.
     const rowIndex = siblings ? siblings.indexOf(node) : 1;
     const tagName = rowIndex === 0 ? 'th' : 'td';
     const align = parent && parent.type === 'table' ? parent.align : undefined;
     const length = align ? align.length : node.children.length;
     let cellIndex = -1;
     /** @type {Array<ElementContent>} */
     const cells = [];

     while (++cellIndex < length) {
       // Note: can also be undefined.
       const cell = node.children[cellIndex];
       /** @type {Properties} */
       const properties = {};
       const alignValue = align ? align[cellIndex] : undefined;

       if (alignValue) {
         properties.align = alignValue;
       }

       /** @type {Element} */
       let result = {type: 'element', tagName, properties, children: []};

       if (cell) {
         result.children = state.all(cell);
         state.patch(cell, result);
         result = state.applyData(node, result);
       }

       cells.push(result);
     }

     /** @type {Element} */
     const result = {
       type: 'element',
       tagName: 'tr',
       properties: {},
       children: state.wrap(cells, true)
     };
     state.patch(node, result);
     return state.applyData(node, result)
   }

   /**
    * @typedef {import('hast').Element} Element
    * @typedef {import('mdast').TableCell} TableCell
    * @typedef {import('../state.js').State} State
    */

   /**
    * Turn an mdast `tableCell` node into hast.
    *
    * @param {State} state
    *   Info passed around.
    * @param {TableCell} node
    *   mdast node.
    * @returns {Element}
    *   hast node.
    */
   function tableCell(state, node) {
     // Note: this function is normally not called: see `table-row` for how rows
     // and their cells are compiled.
     /** @type {Element} */
     const result = {
       type: 'element',
       tagName: 'td', // Assume body cell.
       properties: {},
       children: state.all(node)
     };
     state.patch(node, result);
     return state.applyData(node, result)
   }

   const tab$1 = 9; /* `\t` */
   const space$3 = 32; /* ` ` */

   /**
    * Remove initial and final spaces and tabs at the line breaks in `value`.
    * Does not trim initial and final spaces and tabs of the value itself.
    *
    * @param {string} value
    *   Value to trim.
    * @returns {string}
    *   Trimmed value.
    */
   function trimLines(value) {
     const source = String(value);
     const search = /\r?\n|\r/g;
     let match = search.exec(source);
     let last = 0;
     /** @type {Array<string>} */
     const lines = [];

     while (match) {
       lines.push(
         trimLine(source.slice(last, match.index), last > 0, true),
         match[0]
       );

       last = match.index + match[0].length;
       match = search.exec(source);
     }

     lines.push(trimLine(source.slice(last), last > 0, false));

     return lines.join('')
   }

   /**
    * @param {string} value
    *   Line to trim.
    * @param {boolean} start
    *   Whether to trim the start of the line.
    * @param {boolean} end
    *   Whether to trim the end of the line.
    * @returns {string}
    *   Trimmed line.
    */
   function trimLine(value, start, end) {
     let startIndex = 0;
     let endIndex = value.length;

     if (start) {
       let code = value.codePointAt(startIndex);

       while (code === tab$1 || code === space$3) {
         startIndex++;
         code = value.codePointAt(startIndex);
       }
     }

     if (end) {
       let code = value.codePointAt(endIndex - 1);

       while (code === tab$1 || code === space$3) {
         endIndex--;
         code = value.codePointAt(endIndex - 1);
       }
     }

     return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''
   }

   /**
    * @typedef {import('hast').Element} HastElement
    * @typedef {import('hast').Text} HastText
    * @typedef {import('mdast').Text} MdastText
    * @typedef {import('../state.js').State} State
    */


   /**
    * Turn an mdast `text` node into hast.
    *
    * @param {State} state
    *   Info passed around.
    * @param {MdastText} node
    *   mdast node.
    * @returns {HastText | HastElement}
    *   hast node.
    */
   function text$1(state, node) {
     /** @type {HastText} */
     const result = {type: 'text', value: trimLines(String(node.value))};
     state.patch(node, result);
     return state.applyData(node, result)
   }

   /**
    * @typedef {import('hast').Element} Element
    * @typedef {import('mdast').ThematicBreak} ThematicBreak
    * @typedef {import('../state.js').State} State
    */

   /**
    * Turn an mdast `thematicBreak` node into hast.
    *
    * @param {State} state
    *   Info passed around.
    * @param {ThematicBreak} node
    *   mdast node.
    * @returns {Element}
    *   hast node.
    */
   function thematicBreak(state, node) {
     /** @type {Element} */
     const result = {
       type: 'element',
       tagName: 'hr',
       properties: {},
       children: []
     };
     state.patch(node, result);
     return state.applyData(node, result)
   }

   /**
    * Default handlers for nodes.
    */
   const handlers = {
     blockquote,
     break: hardBreak,
     code,
     delete: strikethrough,
     emphasis,
     footnoteReference,
     footnote,
     heading,
     html,
     imageReference,
     image,
     inlineCode,
     linkReference,
     link,
     listItem,
     list: list$1,
     paragraph,
     root,
     strong,
     table,
     tableCell,
     tableRow,
     text: text$1,
     thematicBreak,
     toml: ignore,
     yaml: ignore,
     definition: ignore,
     footnoteDefinition: ignore
   };

   // Return nothing for nodes that are ignored.
   function ignore() {
     // To do: next major: return `undefined`.
     return null
   }

   /**
    * @typedef PointLike
    * @property {number | null | undefined} [line]
    * @property {number | null | undefined} [column]
    * @property {number | null | undefined} [offset]
    *
    * @typedef PositionLike
    * @property {PointLike | null | undefined} [start]
    * @property {PointLike | null | undefined} [end]
    *
    * @typedef NodeLike
    * @property {PositionLike | null | undefined} [position]
    */

   /**
    * Check if `node` is generated.
    *
    * @param {NodeLike | null | undefined} [node]
    *   Node to check.
    * @returns {boolean}
    *   Whether `node` is generated (does not have positional info).
    */
   function generated(node) {
     return (
       !node ||
       !node.position ||
       !node.position.start ||
       !node.position.start.line ||
       !node.position.start.column ||
       !node.position.end ||
       !node.position.end.line ||
       !node.position.end.column
     )
   }

   /**
    * @typedef {import('mdast').Root} Root
    * @typedef {import('mdast').Content} Content
    * @typedef {import('mdast').Definition} Definition
    */


   const own$2 = {}.hasOwnProperty;

   /**
    * Find definitions in `tree`.
    *
    * Uses CommonMark precedence, which means that earlier definitions are
    * preferred over duplicate later definitions.
    *
    * @param {Node} tree
    *   Tree to check.
    * @returns {GetDefinition}
    *   Getter.
    */
   function definitions(tree) {
     /** @type {Record<string, Definition>} */
     const cache = Object.create(null);

     if (!tree || !tree.type) {
       throw new Error('mdast-util-definitions expected node')
     }

     visit(tree, 'definition', (definition) => {
       const id = clean(definition.identifier);
       if (id && !own$2.call(cache, id)) {
         cache[id] = definition;
       }
     });

     return definition

     /** @type {GetDefinition} */
     function definition(identifier) {
       const id = clean(identifier);
       // To do: next major: return `undefined` when not found.
       return id && own$2.call(cache, id) ? cache[id] : null
     }
   }

   /**
    * @param {string | null | undefined} [value]
    * @returns {string}
    */
   function clean(value) {
     return String(value || '').toUpperCase()
   }

   /**
    * @typedef {import('hast').Content} HastContent
    * @typedef {import('hast').Element} HastElement
    * @typedef {import('hast').ElementContent} HastElementContent
    * @typedef {import('hast').Properties} HastProperties
    * @typedef {import('hast').Root} HastRoot
    * @typedef {import('hast').Text} HastText
    *
    * @typedef {import('mdast').Content} MdastContent
    * @typedef {import('mdast').Definition} MdastDefinition
    * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition
    * @typedef {import('mdast').Parent} MdastParent
    * @typedef {import('mdast').Root} MdastRoot
    */


   const own$1 = {}.hasOwnProperty;

   /**
    * Create `state` from an mdast tree.
    *
    * @param {MdastNodes} tree
    *   mdast node to transform.
    * @param {Options | null | undefined} [options]
    *   Configuration.
    * @returns {State}
    *   `state` function.
    */
   function createState(tree, options) {
     const settings = options || {};
     const dangerous = settings.allowDangerousHtml || false;
     /** @type {Record<string, MdastFootnoteDefinition>} */
     const footnoteById = {};

     // To do: next major: add `options` to state, remove:
     // `dangerous`, `clobberPrefix`, `footnoteLabel`, `footnoteLabelTagName`,
     // `footnoteLabelProperties`, `footnoteBackLabel`, `passThrough`,
     // `unknownHandler`.

     // To do: next major: move to `state.options.allowDangerousHtml`.
     state.dangerous = dangerous;
     // To do: next major: move to `state.options`.
     state.clobberPrefix =
       settings.clobberPrefix === undefined || settings.clobberPrefix === null
         ? 'user-content-'
         : settings.clobberPrefix;
     // To do: next major: move to `state.options`.
     state.footnoteLabel = settings.footnoteLabel || 'Footnotes';
     // To do: next major: move to `state.options`.
     state.footnoteLabelTagName = settings.footnoteLabelTagName || 'h2';
     // To do: next major: move to `state.options`.
     state.footnoteLabelProperties = settings.footnoteLabelProperties || {
       className: ['sr-only']
     };
     // To do: next major: move to `state.options`.
     state.footnoteBackLabel = settings.footnoteBackLabel || 'Back to content';
     // To do: next major: move to `state.options`.
     state.unknownHandler = settings.unknownHandler;
     // To do: next major: move to `state.options`.
     state.passThrough = settings.passThrough;

     state.handlers = {...handlers, ...settings.handlers};

     // To do: next major: replace utility with `definitionById` object, so we
     // only walk once (as we need footnotes too).
     state.definition = definitions(tree);
     state.footnoteById = footnoteById;
     /** @type {Array<string>} */
     state.footnoteOrder = [];
     /** @type {Record<string, number>} */
     state.footnoteCounts = {};

     state.patch = patch;
     state.applyData = applyData;
     state.one = oneBound;
     state.all = allBound;
     state.wrap = wrap;
     // To do: next major: remove `augment`.
     state.augment = augment;

     visit(tree, 'footnoteDefinition', (definition) => {
       const id = String(definition.identifier).toUpperCase();

       // Mimick CM behavior of link definitions.
       // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.
       if (!own$1.call(footnoteById, id)) {
         footnoteById[id] = definition;
       }
     });

     // @ts-expect-error Hush, it’s fine!
     return state

     /**
      * Finalise the created `right`, a hast node, from `left`, an mdast node.
      *
      * @param {MdastNodeWithData | PositionLike | null | undefined} left
      * @param {HastElementContent} right
      * @returns {HastElementContent}
      */
     /* c8 ignore start */
     // To do: next major: remove.
     function augment(left, right) {
       // Handle `data.hName`, `data.hProperties, `data.hChildren`.
       if (left && 'data' in left && left.data) {
         /** @type {MdastData} */
         const data = left.data;

         if (data.hName) {
           if (right.type !== 'element') {
             right = {
               type: 'element',
               tagName: '',
               properties: {},
               children: []
             };
           }

           right.tagName = data.hName;
         }

         if (right.type === 'element' && data.hProperties) {
           right.properties = {...right.properties, ...data.hProperties};
         }

         if ('children' in right && right.children && data.hChildren) {
           right.children = data.hChildren;
         }
       }

       if (left) {
         const ctx = 'type' in left ? left : {position: left};

         if (!generated(ctx)) {
           // @ts-expect-error: fine.
           right.position = {start: pointStart(ctx), end: pointEnd(ctx)};
         }
       }

       return right
     }
     /* c8 ignore stop */

     /**
      * Create an element for `node`.
      *
      * @type {HFunctionProps}
      */
     /* c8 ignore start */
     // To do: next major: remove.
     function state(node, tagName, props, children) {
       if (Array.isArray(props)) {
         children = props;
         props = {};
       }

       // @ts-expect-error augmenting an element yields an element.
       return augment(node, {
         type: 'element',
         tagName,
         properties: props || {},
         children: children || []
       })
     }
     /* c8 ignore stop */

     /**
      * Transform an mdast node into a hast node.
      *
      * @param {MdastNodes} node
      *   mdast node.
      * @param {MdastParents | null | undefined} [parent]
      *   Parent of `node`.
      * @returns {HastElementContent | Array<HastElementContent> | null | undefined}
      *   Resulting hast node.
      */
     function oneBound(node, parent) {
       // @ts-expect-error: that’s a state :)
       return one(state, node, parent)
     }

     /**
      * Transform the children of an mdast node into hast nodes.
      *
      * @param {MdastNodes} parent
      *   mdast node to compile
      * @returns {Array<HastElementContent>}
      *   Resulting hast nodes.
      */
     function allBound(parent) {
       // @ts-expect-error: that’s a state :)
       return all(state, parent)
     }
   }

   /**
    * Copy a node’s positional info.
    *
    * @param {MdastNodes} from
    *   mdast node to copy from.
    * @param {HastNodes} to
    *   hast node to copy into.
    * @returns {void}
    *   Nothing.
    */
   function patch(from, to) {
     if (from.position) to.position = position(from);
   }

   /**
    * Honor the `data` of `from` and maybe generate an element instead of `to`.
    *
    * @template {HastNodes} Type
    *   Node type.
    * @param {MdastNodes} from
    *   mdast node to use data from.
    * @param {Type} to
    *   hast node to change.
    * @returns {Type | HastElement}
    *   Nothing.
    */
   function applyData(from, to) {
     /** @type {Type | HastElement} */
     let result = to;

     // Handle `data.hName`, `data.hProperties, `data.hChildren`.
     if (from && from.data) {
       const hName = from.data.hName;
       const hChildren = from.data.hChildren;
       const hProperties = from.data.hProperties;

       if (typeof hName === 'string') {
         // Transforming the node resulted in an element with a different name
         // than wanted:
         if (result.type === 'element') {
           result.tagName = hName;
         }
         // Transforming the node resulted in a non-element, which happens for
         // raw, text, and root nodes (unless custom handlers are passed).
         // The intent is likely to keep the content around (otherwise: pass
         // `hChildren`).
         else {
           result = {
             type: 'element',
             tagName: hName,
             properties: {},
             children: []
           };

           // To do: next major: take the children from the `root`, or inject the
           // raw/text/comment or so into the element?
           // if ('children' in node) {
           //   // @ts-expect-error: assume `children` are allowed in elements.
           //   result.children = node.children
           // } else {
           //   // @ts-expect-error: assume `node` is allowed in elements.
           //   result.children.push(node)
           // }
         }
       }

       if (result.type === 'element' && hProperties) {
         result.properties = {...result.properties, ...hProperties};
       }

       if (
         'children' in result &&
         result.children &&
         hChildren !== null &&
         hChildren !== undefined
       ) {
         // @ts-expect-error: assume valid children are defined.
         result.children = hChildren;
       }
     }

     return result
   }

   /**
    * Transform an mdast node into a hast node.
    *
    * @param {State} state
    *   Info passed around.
    * @param {MdastNodes} node
    *   mdast node.
    * @param {MdastParents | null | undefined} [parent]
    *   Parent of `node`.
    * @returns {HastElementContent | Array<HastElementContent> | null | undefined}
    *   Resulting hast node.
    */
   // To do: next major: do not expose, keep bound.
   function one(state, node, parent) {
     const type = node && node.type;

     // Fail on non-nodes.
     if (!type) {
       throw new Error('Expected node, got `' + node + '`')
     }

     if (own$1.call(state.handlers, type)) {
       return state.handlers[type](state, node, parent)
     }

     if (state.passThrough && state.passThrough.includes(type)) {
       // To do: next major: deep clone.
       // @ts-expect-error: types of passed through nodes are expected to be added manually.
       return 'children' in node ? {...node, children: all(state, node)} : node
     }

     if (state.unknownHandler) {
       return state.unknownHandler(state, node, parent)
     }

     return defaultUnknownHandler(state, node)
   }

   /**
    * Transform the children of an mdast node into hast nodes.
    *
    * @param {State} state
    *   Info passed around.
    * @param {MdastNodes} parent
    *   mdast node to compile
    * @returns {Array<HastElementContent>}
    *   Resulting hast nodes.
    */
   // To do: next major: do not expose, keep bound.
   function all(state, parent) {
     /** @type {Array<HastElementContent>} */
     const values = [];

     if ('children' in parent) {
       const nodes = parent.children;
       let index = -1;
       while (++index < nodes.length) {
         const result = one(state, nodes[index], parent);

         // To do: see if we van clean this? Can we merge texts?
         if (result) {
           if (index && nodes[index - 1].type === 'break') {
             if (!Array.isArray(result) && result.type === 'text') {
               result.value = result.value.replace(/^\s+/, '');
             }

             if (!Array.isArray(result) && result.type === 'element') {
               const head = result.children[0];

               if (head && head.type === 'text') {
                 head.value = head.value.replace(/^\s+/, '');
               }
             }
           }

           if (Array.isArray(result)) {
             values.push(...result);
           } else {
             values.push(result);
           }
         }
       }
     }

     return values
   }

   /**
    * Transform an unknown node.
    *
    * @param {State} state
    *   Info passed around.
    * @param {MdastNodes} node
    *   Unknown mdast node.
    * @returns {HastText | HastElement}
    *   Resulting hast node.
    */
   function defaultUnknownHandler(state, node) {
     const data = node.data || {};
     /** @type {HastText | HastElement} */
     const result =
       'value' in node &&
       !(own$1.call(data, 'hProperties') || own$1.call(data, 'hChildren'))
         ? {type: 'text', value: node.value}
         : {
             type: 'element',
             tagName: 'div',
             properties: {},
             children: all(state, node)
           };

     state.patch(node, result);
     return state.applyData(node, result)
   }

   /**
    * Wrap `nodes` with line endings between each node.
    *
    * @template {HastContent} Type
    *   Node type.
    * @param {Array<Type>} nodes
    *   List of nodes to wrap.
    * @param {boolean | null | undefined} [loose=false]
    *   Whether to add line endings at start and end.
    * @returns {Array<Type | HastText>}
    *   Wrapped nodes.
    */
   function wrap(nodes, loose) {
     /** @type {Array<Type | HastText>} */
     const result = [];
     let index = -1;

     if (loose) {
       result.push({type: 'text', value: '\n'});
     }

     while (++index < nodes.length) {
       if (index) result.push({type: 'text', value: '\n'});
       result.push(nodes[index]);
     }

     if (loose && nodes.length > 0) {
       result.push({type: 'text', value: '\n'});
     }

     return result
   }

   /**
    * @typedef {import('hast').Element} Element
    * @typedef {import('hast').ElementContent} ElementContent
    *
    * @typedef {import('./state.js').State} State
    */


   /**
    * Generate a hast footer for called footnote definitions.
    *
    * @param {State} state
    *   Info passed around.
    * @returns {Element | undefined}
    *   `section` element or `undefined`.
    */
   function footer(state) {
     /** @type {Array<ElementContent>} */
     const listItems = [];
     let index = -1;

     while (++index < state.footnoteOrder.length) {
       const def = state.footnoteById[state.footnoteOrder[index]];

       if (!def) {
         continue
       }

       const content = state.all(def);
       const id = String(def.identifier).toUpperCase();
       const safeId = normalizeUri(id.toLowerCase());
       let referenceIndex = 0;
       /** @type {Array<ElementContent>} */
       const backReferences = [];

       while (++referenceIndex <= state.footnoteCounts[id]) {
         /** @type {Element} */
         const backReference = {
           type: 'element',
           tagName: 'a',
           properties: {
             href:
               '#' +
               state.clobberPrefix +
               'fnref-' +
               safeId +
               (referenceIndex > 1 ? '-' + referenceIndex : ''),
             dataFootnoteBackref: true,
             className: ['data-footnote-backref'],
             ariaLabel: state.footnoteBackLabel
           },
           children: [{type: 'text', value: '↩'}]
         };

         if (referenceIndex > 1) {
           backReference.children.push({
             type: 'element',
             tagName: 'sup',
             children: [{type: 'text', value: String(referenceIndex)}]
           });
         }

         if (backReferences.length > 0) {
           backReferences.push({type: 'text', value: ' '});
         }

         backReferences.push(backReference);
       }

       const tail = content[content.length - 1];

       if (tail && tail.type === 'element' && tail.tagName === 'p') {
         const tailTail = tail.children[tail.children.length - 1];
         if (tailTail && tailTail.type === 'text') {
           tailTail.value += ' ';
         } else {
           tail.children.push({type: 'text', value: ' '});
         }

         tail.children.push(...backReferences);
       } else {
         content.push(...backReferences);
       }

       /** @type {Element} */
       const listItem = {
         type: 'element',
         tagName: 'li',
         properties: {id: state.clobberPrefix + 'fn-' + safeId},
         children: state.wrap(content, true)
       };

       state.patch(def, listItem);

       listItems.push(listItem);
     }

     if (listItems.length === 0) {
       return
     }

     return {
       type: 'element',
       tagName: 'section',
       properties: {dataFootnotes: true, className: ['footnotes']},
       children: [
         {
           type: 'element',
           tagName: state.footnoteLabelTagName,
           properties: {
             // To do: use structured clone.
             ...JSON.parse(JSON.stringify(state.footnoteLabelProperties)),
             id: 'footnote-label'
           },
           children: [{type: 'text', value: state.footnoteLabel}]
         },
         {type: 'text', value: '\n'},
         {
           type: 'element',
           tagName: 'ol',
           properties: {},
           children: state.wrap(listItems, true)
         },
         {type: 'text', value: '\n'}
       ]
     }
   }

   /**
    * @typedef {import('hast').Content} HastContent
    * @typedef {import('hast').Root} HastRoot
    *
    * @typedef {import('mdast').Content} MdastContent
    * @typedef {import('mdast').Root} MdastRoot
    *
    * @typedef {import('./state.js').Options} Options
    */


   /**
    * Transform mdast to hast.
    *
    * ##### Notes
    *
    * ###### HTML
    *
    * Raw HTML is available in mdast as `html` nodes and can be embedded in hast
    * as semistandard `raw` nodes.
    * Most utilities ignore `raw` nodes but two notable ones don’t:
    *
    * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will
    *     output the raw HTML.
    *     This is typically discouraged as noted by the option name but is useful
    *     if you completely trust authors
    * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them
    *     into standard hast nodes (`element`, `text`, etc).
    *     This is a heavy task as it needs a full HTML parser, but it is the only
    *     way to support untrusted content
    *
    * ###### Footnotes
    *
    * Many options supported here relate to footnotes.
    * Footnotes are not specified by CommonMark, which we follow by default.
    * They are supported by GitHub, so footnotes can be enabled in markdown with
    * `mdast-util-gfm`.
    *
    * The options `footnoteBackLabel` and `footnoteLabel` define natural language
    * that explains footnotes, which is hidden for sighted users but shown to
    * assistive technology.
    * When your page is not in English, you must define translated values.
    *
    * Back references use ARIA attributes, but the section label itself uses a
    * heading that is hidden with an `sr-only` class.
    * To show it to sighted users, define different attributes in
    * `footnoteLabelProperties`.
    *
    * ###### Clobbering
    *
    * Footnotes introduces a problem, as it links footnote calls to footnote
    * definitions on the page through `id` attributes generated from user content,
    * which results in DOM clobbering.
    *
    * DOM clobbering is this:
    *
    * ```html
    * <p id=x></p>
    * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>
    * ```
    *
    * Elements by their ID are made available by browsers on the `window` object,
    * which is a security risk.
    * Using a prefix solves this problem.
    *
    * More information on how to handle clobbering and the prefix is explained in
    * Example: headings (DOM clobbering) in `rehype-sanitize`.
    *
    * ###### Unknown nodes
    *
    * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.
    * The default behavior for unknown nodes is:
    *
    * *   when the node has a `value` (and doesn’t have `data.hName`,
    *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`
    *     node
    * *   otherwise, create a `<div>` element (which could be changed with
    *     `data.hName`), with its children mapped from mdast to hast as well
    *
    * This behavior can be changed by passing an `unknownHandler`.
    *
    * @param {MdastNodes} tree
    *   mdast tree.
    * @param {Options | null | undefined} [options]
    *   Configuration.
    * @returns {HastNodes | null | undefined}
    *   hast tree.
    */
   // To do: next major: always return a single `root`.
   function toHast(tree, options) {
     const state = createState(tree, options);
     const node = state.one(tree, null);
     const foot = footer(state);

     if (foot) {
       // @ts-expect-error If there’s a footer, there were definitions, meaning block
       // content.
       // So assume `node` is a parent node.
       node.children.push({type: 'text', value: '\n'}, foot);
     }

     // To do: next major: always return root?
     return Array.isArray(node) ? {type: 'root', children: node} : node
   }

   const defListFromMarkdown = {
       enter: {
           defList: enterDefList,
           defListTerm: enterDefListTerm,
           defListDescription: enterDefListDescription,
       },
       exit: {
           defList: exitDefList,
           defListTerm: exitDefListTerm,
           defListDescription: exitDefListDescription,
       },
   };
   function enterDefList(token) {
       this.enter({ type: 'defList', children: [] }, token);
   }
   function exitDefList(token) {
       this.exit(token);
   }
   function enterDefListTerm(token) {
       this.enter({ type: 'defListTerm', children: [] }, token);
   }
   function exitDefListTerm(token) {
       this.exit(token);
   }
   function enterDefListDescription(token) {
       this.enter({ type: 'defListDescription', spread: Boolean(token._loose), children: [] }, token);
   }
   function exitDefListDescription(token) {
       this.exit(token);
   }

   const defListHandler = (node, _parent, state, info) => {
       const exit = state.enter('defList');
       const value = state.containerFlow(node, info);
       exit();
       return value;
   };
   const defListTermHandler = (node, _parent, state, info) => {
       const exit = state.enter('defListTerm');
       const subexit = state.enter('phrasing');
       const value = state.containerPhrasing(node, { ...info, before: '\n', after: '\n' });
       subexit();
       exit();
       return value;
   };
   const defListDescriptionHandler = (node, _parent, state, info) => {
       const exit = state.enter('defListDescription');
       const value = state.indentLines(state.containerFlow(node, info), map);
       exit();
       return value;
       function map(line, index, blank) {
           if (index) {
               return blank ? '' : ' '.repeat(4) + line;
           }
           return blank ? ':' + ' '.repeat(3) : ':' + ' '.repeat(3) + line;
       }
   };
   const joinDefItems = (left, right, parent, _state) => {
       if (parent.type !== 'defList') {
           return;
       }
       if (left.type === 'defListDescription' && right.type === 'defListTerm') {
           return 1;
       }
       return 'spread' in right && right.spread ? 1 : 0;
   };
   const defListToMarkdown = {
       join: [joinDefItems],
       unsafe: [{ character: ':', atBreak: true, after: '(?:[ \t\r\n])' }],
       handlers: {
           defList: defListHandler,
           defListTerm: defListTermHandler,
           defListDescription: defListDescriptionHandler,
       },
   };

   /**
    * @typedef {import('unist').Node} Node
    */

   /**
    * @typedef {Array<Node> | string} ChildrenOrValue
    *   List to use as `children` or value to use as `value`.
    *
    * @typedef {Record<string, unknown>} Props
    *   Other fields to add to the node.
    */

   /**
    * Build a node.
    *
    * @param type
    *   Node type.
    * @param props
    *   Fields assigned to node.
    * @param value
    *   Children of node or value of `node` (cast to string).
    * @returns
    *   Built node.
    */
   const u$1 =
     /**
      * @type {(
      *   (<T extends string>(type: T) => {type: T}) &
      *   (<T extends string, P extends Props>(type: T, props: P) => {type: T} & P) &
      *   (<T extends string>(type: T, value: string) => {type: T, value: string}) &
      *   (<T extends string, P extends Props>(type: T, props: P, value: string) => {type: T, value: string} & P) &
      *   (<T extends string, C extends Array<Node>>(type: T, children: C) => {type: T, children: C}) &
      *   (<T extends string, P extends Props, C extends Array<Node>>(type: T, props: P, children: C) => {type: T, children: C} & P)
      * )}
      */
     (
       /**
        * @param {string} type
        * @param {Props | ChildrenOrValue | null | undefined} [props]
        * @param {ChildrenOrValue | null | undefined} [value]
        * @returns {Node}
        */
       function (type, props, value) {
         /** @type {Node} */
         const node = {type: String(type)};

         if (
           (value === undefined || value === null) &&
           (typeof props === 'string' || Array.isArray(props))
         ) {
           value = props;
         } else {
           Object.assign(node, props);
         }

         if (Array.isArray(value)) {
           // @ts-expect-error: create a parent.
           node.children = value;
         } else if (value !== undefined && value !== null) {
           // @ts-expect-error: create a literal.
           node.value = String(value);
         }

         return node
       }
     );

   const tokenTypes = {
     defList: 'defList',
     defListTerm: 'defListTerm',
     defListDescriptionMarker: 'defListDescriptionMarker',
     defListDescriptionPrefix: 'defListDescriptionPrefix',
     defListDescriptionPrefixWhitespace: 'defListDescriptionPrefixWhitespace',
     defListDescription: 'defListDescription'
   };

   function analyzeDefTermFlow(flowToken) {
     const flowEvents = flowToken._tokenizer.events;
     let paraEnterIndex;
     let paraExitIndex;
     let paraStartOffset;

     for (let i = flowEvents.length - 1; i >= 0; i--) {
       const tmpEvent = flowEvents[i];

       if (tmpEvent[1].type === "paragraph") {
         if (tmpEvent[0] === 'exit') paraExitIndex = i;else {
           paraEnterIndex = i;
           paraStartOffset = tmpEvent[1].start.offset;

           for (let j = i - 1; j >= 0; j--) {
             const e = flowEvents[j];

             if (e[1].type === "content") {
               continue;
             }

             if (e[1].type === "linePrefix") {
               paraStartOffset = e[1].start.offset;
               break;
             }

             break;
           }

           break;
         }
       }
     }

     if (paraEnterIndex != null && paraExitIndex != null && paraStartOffset != null) {
       return {
         flowEvents,
         paragraph: {
           enterIndex: paraEnterIndex,
           exitIndex: paraExitIndex,
           startOffset: paraStartOffset
         }
       };
     } else {
       return {
         flowEvents
       };
     }
   }

   function getSubtokensForDefTerm(termFlowToken) {
     const flowEvents = termFlowToken._tokenizer.events;
     const leadingChildEvents = [];
     const trailingChildEvents = [];
     const termChildEvents = [];
     const removedEventIndexes = [];
     let pEnterIndex;
     let pExitIndex;
     let contentEnterIndex;
     let contentExitIndex;
     const paragraphEvents = [];
     const contentEvents = [];

     for (let i = flowEvents.length - 1; i >= 0; i--) {
       const tmpEvent = flowEvents[i];
       const tmpToken = tmpEvent[1];

       if (tmpToken.start.offset >= termFlowToken.end.offset) {
         removedEventIndexes.push(i);
         continue;
       }

       switch (tmpToken.type) {
         case "paragraph":
           if (pEnterIndex == null && tmpEvent[0] === 'enter') pEnterIndex = i;else if (pExitIndex == null && tmpEvent[0] === 'exit') pExitIndex = i;
           break;

         case "content":
           if (tmpEvent[0] === 'enter') contentEnterIndex = i;else if (tmpEvent[0] === 'exit') contentExitIndex = i;
           break;

         default:
           if (termFlowToken.start.offset <= tmpToken.start.offset && tmpToken.end.offset <= termFlowToken.end.offset) {
             if (tmpToken.type === "chunkText") {
               // unlink chunkText token
               if (tmpToken.previous && tmpToken.previous.start.offset < termFlowToken.start.offset) {
                 tmpToken.previous.next = undefined;
                 tmpToken.previous = undefined;
               }

               if (tmpToken.next && termFlowToken.end.offset < tmpToken.next.end.offset) {
                 tmpToken.next.previous = undefined;
                 tmpToken.next = undefined;
               }
             }

             if (pEnterIndex == null && pExitIndex == null) trailingChildEvents.unshift(tmpEvent);else if (pEnterIndex == null && pExitIndex != null) termChildEvents.unshift(tmpEvent);else leadingChildEvents.unshift(tmpEvent);
             removedEventIndexes.push(i);
           } else {
             if (pEnterIndex == null && pExitIndex != null) paragraphEvents.unshift(tmpEvent);
             if (contentEnterIndex == null && contentExitIndex != null) contentEvents.unshift(tmpEvent);
           }

       }

       if (tmpToken.end.offset <= termFlowToken.start.offset) break;
     } // modify paragraph and content


     if (pExitIndex != null) {
       if (paragraphEvents.length >= 1) {
         // adjust end position
         flowEvents[pExitIndex][1].end = Object.assign({}, paragraphEvents[paragraphEvents.length - 1][1].end);
       } else if (pEnterIndex != null) {
         // remove paragraph
         removedEventIndexes.push(pEnterIndex, pExitIndex);
       }
     }

     if (contentExitIndex != null) {
       if (contentEvents.length >= 1) {
         // adjust end position
         flowEvents[contentExitIndex][1].end = Object.assign({}, contentEvents[contentEvents.length - 1][1].end);
       } else if (contentEnterIndex != null) {
         // remove content
         removedEventIndexes.push(contentEnterIndex, contentExitIndex);
       }
     } // remove subtokens from original flowEvents


     removedEventIndexes.sort((a, b) => b - a);

     for (const i of removedEventIndexes) {
       splice(flowEvents, i, 1, []);
     }

     return {
       leadingChildEvents,
       termChildEvents,
       trailingChildEvents
     };
   }

   function subtokenizeDefTerm(events, flowEnterIndex, flowExitIndex) {
     /**
      * Subtokenize chunkFlow events
      */
     const termFlowToken = events[flowEnterIndex][1];

     // unlink
     if (termFlowToken.previous != null) {
       termFlowToken.previous.next = undefined;
       termFlowToken.previous = undefined;
     } // get subtokens


     const subtokens = getSubtokensForDefTerm(termFlowToken); // subtokenize chunkFlow event with childEvents

     const context = events[flowExitIndex][2];
     const childEvents = [];
     const numOfChildren = subtokens.termChildEvents.length;

     if (numOfChildren > 0) {
       const termToken = {
         type: tokenTypes.defListTerm,
         start: Object.assign({}, termFlowToken.start),
         end: Object.assign({}, termFlowToken.end)
       };
       childEvents.push(['enter', termToken, context]);
       childEvents.push(...subtokens.leadingChildEvents);
       childEvents.push(...subtokens.termChildEvents);
       childEvents.push(...subtokens.trailingChildEvents);
       childEvents.push(['exit', termToken, context]);
     } else {
       childEvents.push(...subtokens.leadingChildEvents);
       childEvents.push(...subtokens.trailingChildEvents);
     }

     splice(events, flowExitIndex, 1, []);
     splice(events, flowEnterIndex, 1, childEvents);
     return events;
   }

   const ignorablePrefixTypes = new Set(["linePrefix", "blockQuotePrefix", "blockQuoteMarker", "blockQuotePrefixWhitespace"]);
   const defListConstruct = {
     name: 'defList',
     tokenize: tokenizeDefListStart,
     continuation: {
       tokenize: tokenizeDefListContinuation
     },
     resolveAll: resolveAllDefinitionTerm,
     exit: tokenizeDefListEnd
   };
   const defListDescriptionPrefixWhitespaceConstruct = {
     tokenize: tokenizeDefListDescriptionPrefixWhitespace,
     partial: true
   };
   const indentConstruct = {
     tokenize: tokenizeIndent,
     partial: true
   };
   const defList = {
     document: {
       [58]: defListConstruct,
       null: []
     }
   };

   function resolveAllDefinitionTerm(events, context) {
     /**
      * Resolves all detList events
      *
      * @remarks
      * For each defList events, this does:
      * - create defListTerm event
      * - create defListDescription event
      *
      * And then merge adjacent lists
      *
      */
     let index = 0;

     while (index < events.length) {
       const event = events[index];

       if (event[0] === 'enter' && event[1].type === tokenTypes.defList) {
         // create defListTerms and defListDescriptions inside defList
         index += resolveDefList(index, events, context);
       }

       index++;
     } // merge definition lists


     const dlStack = [];
     index = 0;

     while (index < events.length) {
       const event = events[index];

       if (event[0] === 'enter' && event[1].type === tokenTypes.defList) {
         dlStack.push(event[1]);
       }

       if (event[0] === 'exit' && event[1].type === tokenTypes.defList) {
         let defListFound = false;
         let i = 1;

         while (index + i < events.length) {
           const forwardEvent = events[index + i];

           if (forwardEvent[0] === 'enter' && forwardEvent[1].type === tokenTypes.defList) {
             defListFound = true;
             break;
           } else if (!ignorablePrefixTypes.has(forwardEvent[1].type)) {
             break;
           }

           i++;
         }

         if (defListFound) {
           event[1].end = Object.assign({}, events[index + i][1].end);
           splice(events, index, i + 1, []);
           index -= i;
         } else {
           const token = dlStack.pop();
           event[1] = token;
         }
       }

       index++;
     }

     return events;
   }

   function resolveDefList(defList_start, events, context) {
     /**
      * Create defListTerms and defListDescriptions
      *
      * @returns Index offset to the end of current defList
      *
      */
     let indexOffset = 0;
     let defListDescriptionToken;
     let expectFirstDescription = true;
     let index = defList_start + 1;
     index += resolveDefinitionTermTo(defList_start, events);

     while (index < events.length) {
       const event = events[index];

       if (event[0] === 'enter' && event[1].type === tokenTypes.defList) {
         index += resolveDefList(index, events, context);
       }

       if (event[0] === 'exit' && event[1].type === tokenTypes.defList) {
         index += addDescriptionExit(index, events);
         defListDescriptionToken = undefined;
         indexOffset = index - defList_start;
         break;
       }

       if (event[0] === 'exit' && event[1].type === tokenTypes.defListDescriptionPrefix) {
         if (!expectFirstDescription) {
           index += addDescriptionExit(index, events);
           defListDescriptionToken = undefined;
         }

         index += addDescriptionEnter(index, events, event[1]._loose);
         expectFirstDescription = false;
       }

       if (event[0] === 'enter' && event[1].type === tokenTypes.defListDescriptionPrefix) {
         // mark loose definition description
         if (events[index - 1][1].type === "lineEndingBlank") {
           event[1]._loose = true;
         } else if (events[index - 1][1].type === "chunkFlow") {
           const flowEvents = events[index - 1][1]._tokenizer.events;

           if (flowEvents[flowEvents.length - 1][1].type === "lineEndingBlank") {
             event[1]._loose = true;
           }
         }
       }

       index++;
     }

     return indexOffset;

     function addDescriptionEnter(index, events, loose) {
       const indexOffset = 1;
       defListDescriptionToken = {
         type: tokenTypes.defListDescription,
         start: Object.assign({}, events[index + 1][1].start),
         end: Object.assign({}, events[index + 1][1].end),
         _loose: loose
       };
       splice(events, index + 1, 0, [['enter', defListDescriptionToken, context]]);
       return indexOffset;
     }

     function addDescriptionExit(index, events) {
       const indexOffset = 1;
       defListDescriptionToken.end = Object.assign({}, events[index - 1][1].end);
       splice(events, index, 0, [['exit', defListDescriptionToken, context]]);
       return indexOffset;
     }
   }

   function createDefTermEvent(events, chunkFlowIndex, defListStartIndex, flagBlockQuote) {
     /**
      * Insert defListTerm and chunkFlow subtokenized events
      *
      * @returns Index at which defList enter event should be placed
      *
      */
     const context = events[chunkFlowIndex][2];
     const flow = analyzeDefTermFlow(events[chunkFlowIndex][1]);
     const paragraphInfo = flow.paragraph;

     if (paragraphInfo == null) {
       // for some reason there's no paragraph, so create dummy term
       const defListEnterEvent = events[defListStartIndex];
       const termToken = {
         type: tokenTypes.defListTerm,
         start: Object.assign({}, defListEnterEvent[1].start),
         end: Object.assign({}, defListEnterEvent[1].start)
       };
       splice(events, defListStartIndex, 0, [['enter', termToken, context], ['exit', termToken, context]]);
       return defListStartIndex;
     }

     const lazyLines = events[chunkFlowIndex][2].parser.lazy;
     let newDefListStartIndex = 0;
     let flowExitIndex;

     for (let i = chunkFlowIndex; i >= 0; i--) {
       const event = events[i];

       if (event[1].type !== "chunkFlow") {
         newDefListStartIndex = i + 1;
         break;
       }

       if (event[1].start.offset < paragraphInfo.startOffset) {
         newDefListStartIndex = i + 1;
         break;
       }

       if (event[0] === 'exit') {
         if (flagBlockQuote && !lazyLines[event[1].start.line]) {
           newDefListStartIndex = i + 1;
           break;
         }

         flowExitIndex = i;
       } else {
         subtokenizeDefTerm(events, i, flowExitIndex);
         flowExitIndex = undefined;
       }
     }

     return newDefListStartIndex;
   }

   function resolveDefinitionTermTo(defListStartIndex, events) {
     /**
      * Create defListTerm for current defList
      *
      * @returns Index offset added by new events
      *
      */
     let flowIndex;
     let blockQuoteExit;
     let blockQuoteExitIndex;

     for (let i = defListStartIndex - 1; i >= 0; i--) {
       if (ignorablePrefixTypes.has(events[i][1].type)) continue;

       if (i === defListStartIndex - 1 && events[i][1].type === "blockQuote" && events[i][0] === 'exit') {
         blockQuoteExitIndex = i;
         blockQuoteExit = events[i];
         continue;
       }

       if (events[i][1].type === "chunkFlow") {
         flowIndex = i;
       }

       break;
     }

     // temporarily remove defList enter
     const defListEnterEvent = events[defListStartIndex];
     splice(events, defListStartIndex, 1, []); // temporarily remove blockQuote exit

     if (blockQuoteExitIndex != null) {
       splice(events, blockQuoteExitIndex, 1, []);
     } // create and insert defListTerm events


     let newDefListStartIndex = createDefTermEvent(events, flowIndex, defListStartIndex, blockQuoteExit != null); // put blockQuote exit

     if (blockQuoteExitIndex != null) {
       blockQuoteExit[1].end = Object.assign({}, events[newDefListStartIndex - 1][1].end);
       splice(events, newDefListStartIndex, 0, [blockQuoteExit]);
       newDefListStartIndex += 1;
     } // insert defList enter at right position


     defListEnterEvent[1].start = Object.assign({}, events[newDefListStartIndex][1].start);
     splice(events, newDefListStartIndex, 0, [defListEnterEvent]);
     return newDefListStartIndex - defListStartIndex;
   }

   function checkPossibleDefTerm(events) {
     var _a;

     if (events.length <= 1) return false;
     const lastEvent = events[events.length - 1];
     const lazyLines = lastEvent[2].parser.lazy;
     let flagBlockQuote = false;
     let termFlowStart;
     let flowEvents;

     for (let i = events.length - 1; i >= 0; i--) {
       const event = events[i];

       if (ignorablePrefixTypes.has(event[1].type)) {
         continue;
       }

       if (i === events.length - 1 && event[1].type === "blockQuote" && event[0] === 'exit') {
         /**
          * something like:
          *
          * ```
          * > blockquote
          * term
          * : description
          * ```
          */
         flagBlockQuote = true;
         continue;
       }

       if (event[1].type === "chunkFlow") {
         if (event[0] === 'enter') {
           flowEvents !== null && flowEvents !== void 0 ? flowEvents : flowEvents = (_a = event[1]._tokenizer) === null || _a === void 0 ? void 0 : _a.events;
           termFlowStart = event;
         }
       } else {
         break;
       }
     }

     if (flowEvents != null && termFlowStart != null) {
       let blanklines = 0;

       for (let i = flowEvents.length - 1; i >= 0; i--) {
         const flowEvent = flowEvents[i];
         const tmpToken = flowEvent[1];
         if (tmpToken.start.offset < termFlowStart[1].start.offset) break;

         if (flowEvent[0] === 'enter' && tmpToken.type === "lineEndingBlank") {
           if (blanklines >= 1) break;
           blanklines++;
         }

         if (tmpToken.type !== "lineEnding" && tmpToken.type !== "linePrefix" && tmpToken.type !== "lineEndingBlank" && tmpToken.type !== "content") {
           if (flagBlockQuote && !lazyLines[tmpToken.end.line]) {
             return false;
           }

           return tmpToken.type === "paragraph" || tmpToken.type === "chunkContent" || tmpToken.type === 'tableHead';
         }
       }
     }

     return false;
   }

   function tokenizeDefListStart(effects, ok, nok) {
     const self = this; // eslint-disable-line @typescript-eslint/no-this-alias

     if (self.containerState == null) {
       self.containerState = {};
     }

     const tail = self.events[self.events.length - 1];
     let initialSize = tail && tail[1].type === "linePrefix" ? tail[2].sliceSerialize(tail[1], true).length : 0;

     if (self.containerState.type == null) {
       // start defList only when definition term found.
       if (checkPossibleDefTerm(self.events)) {
         effects.enter(tokenTypes.defList, {
           _container: true
         });
         self.containerState.type = tokenTypes.defList;
       } else {
         return nok;
       }
     }

     return start;

     function start(code) {
       var _a;

       if (code !== 58) {
         return nok(code);
       }

       effects.enter(tokenTypes.defListDescriptionPrefix, {
         _loose: (_a = self.containerState) === null || _a === void 0 ? void 0 : _a.lastBlankLine
       });
       self.containerState.lastBlankLinke = undefined;
       effects.enter(tokenTypes.defListDescriptionMarker);
       effects.consume(code);
       effects.exit(tokenTypes.defListDescriptionMarker);
       return effects.check(blankLine$1, onBlank, effects.attempt(defListDescriptionPrefixWhitespaceConstruct, prefixEnd, otherPrefix));
     }

     function onBlank(code) {
       self.containerState.initialBlankLine = true;
       initialSize++;
       return prefixEnd(code);
     }

     function otherPrefix(code) {
       if (markdownSpace(code)) {
         effects.enter(tokenTypes.defListDescriptionPrefixWhitespace);
         effects.consume(code);
         effects.exit(tokenTypes.defListDescriptionPrefixWhitespace);
         return prefixEnd;
       }

       return nok(code);
     }

     function prefixEnd(code) {
       self.containerState.size = initialSize + self.sliceSerialize(effects.exit(tokenTypes.defListDescriptionPrefix), true).length;
       return ok(code);
     }
   }

   function tokenizeDefListContinuation(effects, ok, nok) {
     const self = this; // eslint-disable-line @typescript-eslint/no-this-alias

     self.containerState._closeFlow = undefined;
     return effects.check(blankLine$1, onBlank, notBlank);

     function onBlank(code) {
       self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;
       self.containerState.lastBlankLine = true;
       return factorySpace(effects, ok, "linePrefix", self.containerState.size + 1)(code);
     }

     function notBlank(code) {
       if (self.containerState.furtherBlankLines || !markdownSpace(code)) {
         self.containerState.furtherBlankLines = undefined;
         self.containerState.initialBlankLine = undefined;
         return notInCurrentItem(code);
       }

       self.containerState.furtherBlankLines = undefined;
       self.containerState.initialBlankLine = undefined;
       self.containerState.lastBlankLine = undefined;
       return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);
     }

     function notInCurrentItem(code) {
       self.containerState._closeFlow = true;
       self.interrupt = undefined;
       return factorySpace(effects, effects.attempt(defListConstruct, ok, nok), "linePrefix", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);
     }
   }

   function tokenizeIndent(effects, ok, nok) {
     const self = this; // eslint-disable-line @typescript-eslint/no-this-alias

     return factorySpace(effects, afterPrefix, "linePrefix", self.containerState.size + 1);

     function afterPrefix(code) {
       const tail = self.events[self.events.length - 1];
       return tail && tail[1].type === "linePrefix" && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);
     }
   }

   function tokenizeDefListDescriptionPrefixWhitespace(effects, ok, nok) {
     const self = this; // eslint-disable-line @typescript-eslint/no-this-alias

     return factorySpace(effects, afterPrefix, tokenTypes.defListDescriptionPrefixWhitespace, self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4 + 1);

     function afterPrefix(code) {
       const tail = self.events[self.events.length - 1];
       return !markdownSpace(code) && tail && tail[1].type === tokenTypes.defListDescriptionPrefixWhitespace ? ok(code) : nok(code);
     }
   }

   function tokenizeDefListEnd(effects) {
     effects.exit(tokenTypes.defList);
   }

   const mdastDefList2hast = (h, node, _parent) => {
       const items = all(h, node);
       const children = [];
       for (let i = 0; i < items.length; i++) {
           children.push(u$1('text', '\n'));
           children.push(items[i]);
       }
       if (items.length > 0) {
           children.push(u$1('text', '\n'));
       }
       return h(node, 'dl', {}, children);
   };
   const mdastDefListTerm2hast = (h, node, _parent) => {
       return h(node, 'dt', {}, all(h, node));
   };
   const mdastDefListDescription2hast = (h, node, _parent) => {
       const children = [];
       const tmpChildren = all(h, node);
       for (let i = 0; i < tmpChildren.length; i++) {
           const child = tmpChildren[i];
           if (node.spread || i !== 0 || child.type !== 'element' || child.tagName !== 'p') {
               children.push(u$1('text', '\n'));
           }
           if (!node.spread && child.type === 'element' && child.tagName === 'p') {
               children.push(...child.children);
           }
           else {
               children.push(child);
           }
       }
       const tail = children[children.length - 1];
       if (tail && (node.spread || !('tagName' in tail) || tail.tagName !== 'p')) {
           children.push(u$1('text', '\n'));
       }
       return h(node, 'dd', {}, children);
   };
   const defListHastHandlers = {
       [tokenTypes.defList]: mdastDefList2hast,
       [tokenTypes.defListTerm]: mdastDefListTerm2hast,
       [tokenTypes.defListDescription]: mdastDefListDescription2hast,
   };

   const DefList = 'defList';
   const DefListTerm = 'defListTerm';
   const DefListDescription = 'defListDescription';

   /**
    * dl element handler
    *
    * @public
    */
   const dl = (state, element, _parent) => {
       // unwrap div
       // see: https://github.com/syntax-tree/hast-util-to-mdast/blob/main/lib/handlers/dl.js
       const children = element.children.reduce((acc, child) => {
           if (child.type === "element" && child.tagName === "div") {
               return acc.concat(child.children);
           }
           return acc.concat([child]);
       }, []);
       const mdastChildren = children
           .map((child) => state.one(child, element))
           .flat()
           .filter((node) => node != null &&
           (node.type === "defListTerm" || node.type === "defListDescription"));
       const result = {
           type: DefList,
           children: mdastChildren,
       };
       state.patch(element, result);
       return result;
   };
   /**
    * dt element handler
    *
    * @public
    */
   const dt = (state, element) => {
       const children = state
           .all(element)
           .filter((node) => phrasing$1(node));
       const result = { type: DefListTerm, children };
       state.patch(element, result);
       return result;
   };
   /**
    * dd element handler
    *
    * @public
    */
   const dd = (state, element, parent) => {
       const children = state.toFlow(state.all(element));
       const spread = spreadout$1(element);
       const result = {
           type: DefListDescription,
           spread,
           children,
       };
       state.patch(element, result);
       return result;
   };
   function spreadout$1(element) {
       for (const child of element.children) {
           if (child.type !== "element")
               continue;
           if (phrasing$1(child))
               continue;
           if (child.tagName === "p" || spreadout$1(child)) {
               return true;
           }
       }
       return false;
   }
   const defListHastToMdast = {
       dl,
       dt,
       dd,
   };

   /**
    * @typedef Options
    *   Configuration (optional).
    * @property {string|null|ReadonlyArray<string|null|undefined>} [align]
    *   One style for all columns, or styles for their respective columns.
    *   Each style is either `'l'` (left), `'r'` (right), or `'c'` (center).
    *   Other values are treated as `''`, which doesn’t place the colon in the
    *   alignment row but does align left.
    *   *Only the lowercased first character is used, so `Right` is fine.*
    * @property {boolean} [padding=true]
    *   Whether to add a space of padding between delimiters and cells.
    *
    *   When `true`, there is padding:
    *
    *   ```markdown
    *   | Alpha | B     |
    *   | ----- | ----- |
    *   | C     | Delta |
    *   ```
    *
    *   When `false`, there is no padding:
    *
    *   ```markdown
    *   |Alpha|B    |
    *   |-----|-----|
    *   |C    |Delta|
    *   ```
    * @property {boolean} [delimiterStart=true]
    *   Whether to begin each row with the delimiter.
    *
    *   > 👉 **Note**: please don’t use this: it could create fragile structures
    *   > that aren’t understandable to some markdown parsers.
    *
    *   When `true`, there are starting delimiters:
    *
    *   ```markdown
    *   | Alpha | B     |
    *   | ----- | ----- |
    *   | C     | Delta |
    *   ```
    *
    *   When `false`, there are no starting delimiters:
    *
    *   ```markdown
    *   Alpha | B     |
    *   ----- | ----- |
    *   C     | Delta |
    *   ```
    * @property {boolean} [delimiterEnd=true]
    *   Whether to end each row with the delimiter.
    *
    *   > 👉 **Note**: please don’t use this: it could create fragile structures
    *   > that aren’t understandable to some markdown parsers.
    *
    *   When `true`, there are ending delimiters:
    *
    *   ```markdown
    *   | Alpha | B     |
    *   | ----- | ----- |
    *   | C     | Delta |
    *   ```
    *
    *   When `false`, there are no ending delimiters:
    *
    *   ```markdown
    *   | Alpha | B
    *   | ----- | -----
    *   | C     | Delta
    *   ```
    * @property {boolean} [alignDelimiters=true]
    *   Whether to align the delimiters.
    *   By default, they are aligned:
    *
    *   ```markdown
    *   | Alpha | B     |
    *   | ----- | ----- |
    *   | C     | Delta |
    *   ```
    *
    *   Pass `false` to make them staggered:
    *
    *   ```markdown
    *   | Alpha | B |
    *   | - | - |
    *   | C | Delta |
    *   ```
    * @property {(value: string) => number} [stringLength]
    *   Function to detect the length of table cell content.
    *   This is used when aligning the delimiters (`|`) between table cells.
    *   Full-width characters and emoji mess up delimiter alignment when viewing
    *   the markdown source.
    *   To fix this, you can pass this function, which receives the cell content
    *   and returns its “visible” size.
    *   Note that what is and isn’t visible depends on where the text is displayed.
    *
    *   Without such a function, the following:
    *
    *   ```js
    *   markdownTable([
    *     ['Alpha', 'Bravo'],
    *     ['中文', 'Charlie'],
    *     ['👩‍❤️‍👩', 'Delta']
    *   ])
    *   ```
    *
    *   Yields:
    *
    *   ```markdown
    *   | Alpha | Bravo |
    *   | - | - |
    *   | 中文 | Charlie |
    *   | 👩‍❤️‍👩 | Delta |
    *   ```
    *
    *   With [`string-width`](https://github.com/sindresorhus/string-width):
    *
    *   ```js
    *   import stringWidth from 'string-width'
    *
    *   markdownTable(
    *     [
    *       ['Alpha', 'Bravo'],
    *       ['中文', 'Charlie'],
    *       ['👩‍❤️‍👩', 'Delta']
    *     ],
    *     {stringLength: stringWidth}
    *   )
    *   ```
    *
    *   Yields:
    *
    *   ```markdown
    *   | Alpha | Bravo   |
    *   | ----- | ------- |
    *   | 中文  | Charlie |
    *   | 👩‍❤️‍👩    | Delta   |
    *   ```
    */

   /**
    * @typedef {Options} MarkdownTableOptions
    * @todo
    *   Remove next major.
    */

   /**
    * Generate a markdown ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables)) table..
    *
    * @param {ReadonlyArray<ReadonlyArray<string|null|undefined>>} table
    *   Table data (matrix of strings).
    * @param {Options} [options]
    *   Configuration (optional).
    * @returns {string}
    */
   function markdownTable(table, options = {}) {
     const align = (options.align || []).concat();
     const stringLength = options.stringLength || defaultStringLength;
     /** @type {Array<number>} Character codes as symbols for alignment per column. */
     const alignments = [];
     /** @type {Array<Array<string>>} Cells per row. */
     const cellMatrix = [];
     /** @type {Array<Array<number>>} Sizes of each cell per row. */
     const sizeMatrix = [];
     /** @type {Array<number>} */
     const longestCellByColumn = [];
     let mostCellsPerRow = 0;
     let rowIndex = -1;

     // This is a superfluous loop if we don’t align delimiters, but otherwise we’d
     // do superfluous work when aligning, so optimize for aligning.
     while (++rowIndex < table.length) {
       /** @type {Array<string>} */
       const row = [];
       /** @type {Array<number>} */
       const sizes = [];
       let columnIndex = -1;

       if (table[rowIndex].length > mostCellsPerRow) {
         mostCellsPerRow = table[rowIndex].length;
       }

       while (++columnIndex < table[rowIndex].length) {
         const cell = serialize(table[rowIndex][columnIndex]);

         if (options.alignDelimiters !== false) {
           const size = stringLength(cell);
           sizes[columnIndex] = size;

           if (
             longestCellByColumn[columnIndex] === undefined ||
             size > longestCellByColumn[columnIndex]
           ) {
             longestCellByColumn[columnIndex] = size;
           }
         }

         row.push(cell);
       }

       cellMatrix[rowIndex] = row;
       sizeMatrix[rowIndex] = sizes;
     }

     // Figure out which alignments to use.
     let columnIndex = -1;

     if (typeof align === 'object' && 'length' in align) {
       while (++columnIndex < mostCellsPerRow) {
         alignments[columnIndex] = toAlignment(align[columnIndex]);
       }
     } else {
       const code = toAlignment(align);

       while (++columnIndex < mostCellsPerRow) {
         alignments[columnIndex] = code;
       }
     }

     // Inject the alignment row.
     columnIndex = -1;
     /** @type {Array<string>} */
     const row = [];
     /** @type {Array<number>} */
     const sizes = [];

     while (++columnIndex < mostCellsPerRow) {
       const code = alignments[columnIndex];
       let before = '';
       let after = '';

       if (code === 99 /* `c` */) {
         before = ':';
         after = ':';
       } else if (code === 108 /* `l` */) {
         before = ':';
       } else if (code === 114 /* `r` */) {
         after = ':';
       }

       // There *must* be at least one hyphen-minus in each alignment cell.
       let size =
         options.alignDelimiters === false
           ? 1
           : Math.max(
               1,
               longestCellByColumn[columnIndex] - before.length - after.length
             );

       const cell = before + '-'.repeat(size) + after;

       if (options.alignDelimiters !== false) {
         size = before.length + size + after.length;

         if (size > longestCellByColumn[columnIndex]) {
           longestCellByColumn[columnIndex] = size;
         }

         sizes[columnIndex] = size;
       }

       row[columnIndex] = cell;
     }

     // Inject the alignment row.
     cellMatrix.splice(1, 0, row);
     sizeMatrix.splice(1, 0, sizes);

     rowIndex = -1;
     /** @type {Array<string>} */
     const lines = [];

     while (++rowIndex < cellMatrix.length) {
       const row = cellMatrix[rowIndex];
       const sizes = sizeMatrix[rowIndex];
       /* XTABLE: if empty header row assume headerless and skip first row */
       if (!rowIndex && !row.join('')) continue
       columnIndex = -1;
       /** @type {Array<string>} */
       const line = [];

       while (++columnIndex < mostCellsPerRow) {
         const cell = row[columnIndex] || '';
         let before = '';
         let after = '';

         if (options.alignDelimiters !== false) {
           const size =
             longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0);
           const code = alignments[columnIndex];

           if (code === 114 /* `r` */) {
             before = ' '.repeat(size);
           } else if (code === 99 /* `c` */) {
             if (size % 2) {
               before = ' '.repeat(size / 2 + 0.5);
               after = ' '.repeat(size / 2 - 0.5);
             } else {
               before = ' '.repeat(size / 2);
               after = before;
             }
           } else {
             after = ' '.repeat(size);
           }
         }

         if (options.delimiterStart !== false && !columnIndex) {
           line.push('|');
         }

         if (
           options.padding !== false &&
           // Don’t add the opening space if we’re not aligning and the cell is
           // empty: there will be a closing space.
           !(options.alignDelimiters === false && cell === '') &&
           (options.delimiterStart !== false || columnIndex)
         ) {
           line.push(' ');
         }

         if (options.alignDelimiters !== false) {
           line.push(before);
         }

         line.push(cell);

         if (options.alignDelimiters !== false) {
           line.push(after);
         }

         if (options.padding !== false) {
           line.push(' ');
         }

         if (
           options.delimiterEnd !== false ||
           columnIndex !== mostCellsPerRow - 1
         ) {
           line.push('|');
         }
       }

       lines.push(
         options.delimiterEnd === false
           ? line.join('').replace(/ +$/, '')
           : line.join('')
       );
     }

     return lines.join('\n')
   }

   /**
    * @param {string|null|undefined} [value]
    * @returns {string}
    */
   function serialize(value) {
     return value === null || value === undefined ? '' : String(value)
   }

   /**
    * @param {string} value
    * @returns {number}
    */
   function defaultStringLength(value) {
     return value.length
   }

   /**
    * @param {string|null|undefined} value
    * @returns {number}
    */
   function toAlignment(value) {
     const code = typeof value === 'string' ? value.codePointAt(0) : 0;

     return code === 67 /* `C` */ || code === 99 /* `c` */
       ? 99 /* `c` */
       : code === 76 /* `L` */ || code === 108 /* `l` */
       ? 108 /* `l` */
       : code === 82 /* `R` */ || code === 114 /* `r` */
       ? 114 /* `r` */
       : 0
   }

   /**
    * @typedef {import('mdast').Table} Table
    * @typedef {import('mdast').TableRow} TableRow
    * @typedef {import('mdast').TableCell} TableCell
    * @typedef {import('mdast').InlineCode} InlineCode
    *
    * @typedef {import('markdown-table').MarkdownTableOptions} MarkdownTableOptions
    *
    * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext
    * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension
    * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle
    *
    * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension
    * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle
    * @typedef {import('mdast-util-to-markdown').Context} ToMarkdownContext
    * @typedef {import('mdast-util-to-markdown').SafeOptions} SafeOptions
    */


   // To do: next major: use `state` and `state` utilities from `mdast-util-to-markdown`.
   // To do: next major: use `defaultHandlers.inlineCode`.
   // To do: next major: expose functions.

   /**
    * Extension for `mdast-util-from-markdown` to enable GFM tables.
    *
    * @type {FromMarkdownExtension}
    */
   const xtableFromMarkdown = {
     enter: {
       table: enterTable,
       tableData: enterCell,
       tableHeader: enterCell,
       tableRow: enterRow
     },
     exit: {
       codeText: exitCodeText,
       table: exitTable,
       tableData: exit$1,
       tableHeader: exit$1,
       tableRow: exit$1
     }
   };

   /**
    * @this {CompileContext}
    * @type {FromMarkdownHandle}
    */
   function enterTable(token) {
     /** @type {Array<'left' | 'right' | 'center' | 'none'>} */
     // @ts-expect-error: `align` is custom.
     const align = token._align;
     // @ts-expect-error: `_headless` is custom from xtable/syntax.js, used in mdast-to-hast
     const headless = token._headless ? {data: {hProperties: {headless: true}}} : {};
     this.enter(
       {
         type: 'table',
         align: align.map((d) => (d === 'none' ? null : d)),
         children: [],
         ...headless
       },
       token
     );
     this.setData('inTable', true);
   }

   /**
    * @this {CompileContext}
    * @type {FromMarkdownHandle}
    */
   function exitTable(token) {
     this.exit(token);
     this.setData('inTable');
   }

   /**
    * @this {CompileContext}
    * @type {FromMarkdownHandle}
    */
   function enterRow(token) {
     this.enter({type: 'tableRow', children: []}, token);
   }

   /**
    * @this {CompileContext}
    * @type {FromMarkdownHandle}
    */
   function exit$1(token) {
     this.exit(token);
   }

   /**
    * @this {CompileContext}
    * @type {FromMarkdownHandle}
    */
   function enterCell(token) {
     this.enter({type: 'tableCell', children: []}, token);
   }

   // Overwrite the default code text data handler to unescape escaped pipes when
   // they are in tables.
   /**
    * @this {CompileContext}
    * @type {FromMarkdownHandle}
    */
   function exitCodeText(token) {
     let value = this.resume();

     if (this.getData('inTable')) {
       value = value.replace(/\\([\\|])/g, replace);
     }

     const node = /** @type {InlineCode} */ (this.stack[this.stack.length - 1]);
     node.value = value;
     this.exit(token);
   }

   /**
    * @param {string} $0
    * @param {string} $1
    * @returns {string}
    */
   function replace($0, $1) {
     // Pipes work, backslashes don’t (but can’t escape pipes).
     return $1 === '|' ? $1 : $0
   }

   /**
    * Create an extension for `mdast-util-to-markdown` to enable GFM tables in
    * markdown.
    *
    * @param {Options | null | undefined} [options]
    *   Configuration.
    * @returns {ToMarkdownExtension}
    *   Extension for `mdast-util-to-markdown` to enable GFM tables.
    */
   function xtableToMarkdown(options) {
     const settings = options || {};
     const padding = settings.tableCellPadding;
     const alignDelimiters = settings.tablePipeAlign;
     const stringLength = settings.stringLength;
     const around = padding ? ' ' : '|';

     return {
       unsafe: [
         {character: '\r', inConstruct: 'tableCell'},
         {character: '\n', inConstruct: 'tableCell'},
         // A pipe, when followed by a tab or space (padding), or a dash or colon
         // (unpadded delimiter row), could result in a table.
         {atBreak: true, character: '|', after: '[\t :-]'},
         // A pipe in a cell must be encoded.
         {character: '|', inConstruct: 'tableCell'},
         // A colon must be followed by a dash, in which case it could start a
         // delimiter row.
         {atBreak: true, character: ':', after: '-'},
         // A delimiter row can also start with a dash, when followed by more
         // dashes, a colon, or a pipe.
         // This is a stricter version than the built in check for lists, thematic
         // breaks, and setex heading underlines though:
         // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>
         {atBreak: true, character: '-', after: '[:|-]'}
       ],
       handlers: {
         table: handleTable,
         tableRow: handleTableRow,
         tableCell: handleTableCell,
         inlineCode: inlineCodeWithTable
       }
     }

     /**
      * @type {ToMarkdownHandle}
      * @param {Table} node
      */
     function handleTable(node, _, context, safeOptions) {
       return serializeData(
         handleTableAsData(node, context, safeOptions),
         node.align
       )
     }

     /**
      * This function isn’t really used normally, because we handle rows at the
      * table level.
      * But, if someone passes in a table row, this ensures we make somewhat sense.
      *
      * @type {ToMarkdownHandle}
      * @param {TableRow} node
      */
     function handleTableRow(node, _, context, safeOptions) {
       const row = handleTableRowAsData(node, context, safeOptions);
       const value = serializeData([row]);
       // `markdown-table` will always add an align row
       return value.slice(0, value.indexOf('\n'))
     }

     /**
      * @type {ToMarkdownHandle}
      * @param {TableCell} node
      */
     function handleTableCell(node, _, context, safeOptions) {
       const exit = context.enter('tableCell');
       const subexit = context.enter('phrasing');
       const value = containerPhrasing(node, context, {
         ...safeOptions,
         before: around,
         after: around
       });
       subexit();
       exit();
       return value
     }

     /**
      * @param {Array<Array<string>>} matrix
      * @param {Array<string | null | undefined> | null | undefined} [align]
      */
     function serializeData(matrix, align) {
       return markdownTable(matrix, {
         align,
         // @ts-expect-error: `markdown-table` types should support `null`.
         alignDelimiters,
         // @ts-expect-error: `markdown-table` types should support `null`.
         padding,
         // @ts-expect-error: `markdown-table` types should support `null`.
         stringLength
       })
     }

     /**
      * @param {Table} node
      * @param {ToMarkdownContext} context
      * @param {SafeOptions} safeOptions
      */
     function handleTableAsData(node, context, safeOptions) {
       const children = node.children;
       let index = -1;
       /** @type {Array<Array<string>>} */
       const result = [];
       const subexit = context.enter('table');

       while (++index < children.length) {
         result[index] = handleTableRowAsData(
           children[index],
           context,
           safeOptions
         );
       }

       subexit();

       return result
     }

     /**
      * @param {TableRow} node
      * @param {ToMarkdownContext} context
      * @param {SafeOptions} safeOptions
      */
     function handleTableRowAsData(node, context, safeOptions) {
       const children = node.children;
       let index = -1;
       /** @type {Array<string>} */
       const result = [];
       const subexit = context.enter('tableRow');

       while (++index < children.length) {
         // Note: the positional info as used here is incorrect.
         // Making it correct would be impossible due to aligning cells?
         // And it would need copy/pasting `markdown-table` into this project.
         result[index] = handleTableCell(
           children[index],
           node,
           context,
           safeOptions
         );
       }

       subexit();

       return result
     }

     /**
      * @type {ToMarkdownHandle}
      * @param {InlineCode} node
      */
     function inlineCodeWithTable(node, parent, context) {
       let value = inlineCode$1(node, parent, context);

       if (context.stack.includes('tableCell')) {
         value = value.replace(/\|/g, '\\$&');
       }

       return value
     }
   }

   /**
    * @typedef {import('micromark-util-types').Extension} Extension
    * @typedef {import('micromark-util-types').Resolver} Resolver
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').Token} Token
    */


   /**
    * Syntax extension for micromark (passed in `extensions`).
    *
    * @type {Extension}
    */
   const xtable = {
     flow: {
       null: {
         tokenize: tokenizeTable$1,
         resolve: resolveTable$1
       }
     }
   };
   const nextPrefixedOrBlank = {
     tokenize: tokenizeNextPrefixedOrBlank,
     partial: true
   };
   /** @type {Resolver} */
   // eslint-disable-next-line complexity

   function resolveTable$1(events, context) {
     let index = -1;
     /** @type {boolean|undefined} */

     let inHead;
     /** @type {boolean|undefined} */

     let inDelimiterRow;
     /** @type {boolean|undefined} */

     let inRow;
     /** @type {number|undefined} */

     let contentStart;
     /** @type {number|undefined} */

     let contentEnd;
     /** @type {number|undefined} */

     let cellStart;
     /** @type {boolean|undefined} */

     let seenCellInRow;

     while (++index < events.length) {
       const token = events[index][1];

       if (inRow) {
         if (token.type === 'temporaryTableCellContent') {
           contentStart = contentStart || index;
           contentEnd = index;
         }

         if ( // Combine separate content parts into one.
         (token.type === 'tableCellDivider' || token.type === 'tableRow') && contentEnd) {
           const content = {
             type: 'tableContent',
             start: events[contentStart][1].start,
             end: events[contentEnd][1].end
           };
           /** @type {Token} */

           const text = {
             type: "chunkText",
             start: content.start,
             end: content.end,
             // @ts-expect-error It’s fine.
             contentType: "text"
           };
           events.splice(contentStart, contentEnd - contentStart + 1, ['enter', content, context], ['enter', text, context], ['exit', text, context], ['exit', content, context]);
           index -= contentEnd - contentStart - 3;
           contentStart = undefined;
           contentEnd = undefined;
         }
       }

       if (events[index][0] === 'exit' && cellStart !== undefined && cellStart + (seenCellInRow ? 0 : 1) < index && (token.type === 'tableCellDivider' || token.type === 'tableRow' && (cellStart + 3 < index || events[cellStart][1].type !== "whitespace"))) {
         const cell = {
           type: inDelimiterRow ? 'tableDelimiter' : inHead ? 'tableHeader' : 'tableData',
           start: events[cellStart][1].start,
           end: events[index][1].end
         };
         events.splice(index + (token.type === 'tableCellDivider' ? 1 : 0), 0, ['exit', cell, context]);
         events.splice(cellStart, 0, ['enter', cell, context]);
         index += 2;
         cellStart = index + 1;
         seenCellInRow = true;
       }

       if (token.type === 'tableRow') {
         inRow = events[index][0] === 'enter';

         if (inRow) {
           cellStart = index + 1;
           seenCellInRow = false;
         }
       }

       if (token.type === 'tableDelimiterRow') {
         inDelimiterRow = events[index][0] === 'enter';

         if (inDelimiterRow) {
           cellStart = index + 1;
           seenCellInRow = false;
         }
       }

       if (token.type === 'tableHead') {
         inHead = events[index][0] === 'enter';
       }
     }

     return events;
   }
   /** @type {Tokenizer} */


   function tokenizeTable$1(effects, ok, nok) {
     // @ts-ignore whatever
     const self = this;
     const _effects = effects;
     const _ok = ok;
     const _nok = nok;
     /** @type {Array<Align>} */

     const align = [];
     let tableHeaderCount = 0;
     /** @type {boolean|undefined} */

     let seenDelimiter;
     /** @type {boolean|undefined} */

     let hasDash;
     return startAttempt;
     /** @type {State} */

     function startAttempt(code) {
       return _effects.attempt([{
         tokenize,
         partial: false
       }, {
         tokenize: tokenizeDelimiter,
         partial: false
       }], _ok, _nok)(code);
     }
     /** @type {Tokenizer} */


     function tokenizeDelimiter(_effects, _ok, _nok) {
       effects = _effects;
       ok = _ok;
       nok = _nok;
       return startDelimiter;
     }
     /** @type {State} */


     function startDelimiter(code) {
       if (self.interrupt) return nok(code); // Abort if already in full table

       const effect = effects.enter('table'); // @ts-expect-error Custom.

       effect._align = align; // @ts-expect-error Custom.

       effect._headless = true; // Used in mdast-util-to-hast/lib/table.js

       effects.enter('tableDelimiterRow');
       return atDelimiterRowBreak(code);
     }
     /** @type {Tokenizer} */


     function tokenize(_effects, _ok, _nok) {
       effects = _effects;
       ok = _ok;
       nok = _nok;
       return start;
     }
     /** @type {State} */


     function start(code) {
       // @ts-expect-error Custom.
       effects.enter('table')._align = align;
       effects.enter('tableHead');
       effects.enter('tableRow'); // If we start with a pipe, we open a cell marker.

       if (code === 124) {
         return cellDividerHead(code);
       }

       tableHeaderCount++;
       effects.enter('temporaryTableCellContent'); // Can’t be space or eols at the start of a construct, so we’re in a cell.

       return inCellContentHead(code);
     }
     /** @type {State} */


     function cellDividerHead(code) {
       effects.enter('tableCellDivider');
       effects.consume(code);
       effects.exit('tableCellDivider');
       seenDelimiter = true;
       return cellBreakHead;
     }
     /** @type {State} */


     function cellBreakHead(code) {
       if (code === null || markdownLineEnding(code)) {
         return atRowEndHead(code);
       }

       if (markdownSpace(code)) {
         effects.enter("whitespace");
         effects.consume(code);
         return inWhitespaceHead;
       }

       if (seenDelimiter) {
         seenDelimiter = undefined;
         tableHeaderCount++;
       }

       if (code === 124) {
         return cellDividerHead(code);
       } // Anything else is cell content.


       effects.enter('temporaryTableCellContent');
       return inCellContentHead(code);
     }
     /** @type {State} */


     function inWhitespaceHead(code) {
       if (markdownSpace(code)) {
         effects.consume(code);
         return inWhitespaceHead;
       }

       effects.exit("whitespace");
       return cellBreakHead(code);
     }
     /** @type {State} */


     function inCellContentHead(code) {
       // EOF, whitespace, pipe
       if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {
         effects.exit('temporaryTableCellContent');
         return cellBreakHead(code);
       }

       effects.consume(code);
       return code === 92 ? inCellContentEscapeHead : inCellContentHead;
     }
     /** @type {State} */


     function inCellContentEscapeHead(code) {
       if (code === 92 || code === 124) {
         effects.consume(code);
         return inCellContentHead;
       } // Anything else.


       return inCellContentHead(code);
     }
     /** @type {State} */


     function atRowEndHead(code) {
       if (code === null) {
         return nok(code);
       }

       effects.exit('tableRow');
       effects.exit('tableHead');
       const originalInterrupt = self.interrupt;
       self.interrupt = true;
       return effects.attempt({
         tokenize: tokenizeRowEnd,
         partial: true
       }, function (code) {
         self.interrupt = originalInterrupt;
         effects.enter('tableDelimiterRow');
         return atDelimiterRowBreak(code);
       }, function (code) {
         self.interrupt = originalInterrupt;
         return nok(code);
       })(code);
     }
     /** @type {State} */


     function atDelimiterRowBreak(code) {
       if (code === null || markdownLineEnding(code)) {
         return rowEndDelimiter(code);
       }

       if (markdownSpace(code)) {
         effects.enter("whitespace");
         effects.consume(code);
         return inWhitespaceDelimiter;
       }

       if (code === 45) {
         effects.enter('tableDelimiterFiller');
         effects.consume(code);
         hasDash = true;
         align.push('none');
         return inFillerDelimiter;
       }

       if (code === 58) {
         effects.enter('tableDelimiterAlignment');
         effects.consume(code);
         effects.exit('tableDelimiterAlignment');
         align.push('left');
         return afterLeftAlignment;
       } // If we start with a pipe, we open a cell marker.


       if (code === 124) {
         effects.enter('tableCellDivider');
         effects.consume(code);
         effects.exit('tableCellDivider');
         return atDelimiterRowBreak;
       }

       return nok(code);
     }
     /** @type {State} */


     function inWhitespaceDelimiter(code) {
       if (markdownSpace(code)) {
         effects.consume(code);
         return inWhitespaceDelimiter;
       }

       effects.exit("whitespace");
       return atDelimiterRowBreak(code);
     }
     /** @type {State} */


     function inFillerDelimiter(code) {
       if (code === 45) {
         effects.consume(code);
         return inFillerDelimiter;
       }

       effects.exit('tableDelimiterFiller');

       if (code === 58) {
         effects.enter('tableDelimiterAlignment');
         effects.consume(code);
         effects.exit('tableDelimiterAlignment');
         align[align.length - 1] = align[align.length - 1] === 'left' ? 'center' : 'right';
         return afterRightAlignment;
       }

       return atDelimiterRowBreak(code);
     }
     /** @type {State} */


     function afterLeftAlignment(code) {
       if (code === 45) {
         effects.enter('tableDelimiterFiller');
         effects.consume(code);
         hasDash = true;
         return inFillerDelimiter;
       } // Anything else is not ok.


       return nok(code);
     }
     /** @type {State} */


     function afterRightAlignment(code) {
       if (code === null || markdownLineEnding(code)) {
         return rowEndDelimiter(code);
       }

       if (markdownSpace(code)) {
         effects.enter("whitespace");
         effects.consume(code);
         return inWhitespaceDelimiter;
       } // `|`


       if (code === 124) {
         effects.enter('tableCellDivider');
         effects.consume(code);
         effects.exit('tableCellDivider');
         return atDelimiterRowBreak;
       }

       return nok(code);
     }
     /** @type {State} */


     function rowEndDelimiter(code) {
       effects.exit('tableDelimiterRow'); // Exit if there was no dash at all, or if the header cell count is not the
       // delimiter cell count.

       if (!hasDash || tableHeaderCount !== align.length) {
         return nok(code);
       }

       if (code === null) {
         return tableClose(code);
       }

       return effects.check(nextPrefixedOrBlank, tableClose, effects.attempt({
         tokenize: tokenizeRowEnd,
         partial: true
       }, factorySpace(effects, bodyStart, "linePrefix", 4), tableClose))(code);
     }
     /** @type {State} */


     function tableClose(code) {
       effects.exit('table');
       return ok(code);
     }
     /** @type {State} */


     function bodyStart(code) {
       effects.enter('tableBody');
       return rowStartBody(code);
     }
     /** @type {State} */


     function rowStartBody(code) {
       effects.enter('tableRow'); // If we start with a pipe, we open a cell marker.

       if (code === 124) {
         return cellDividerBody(code);
       }

       effects.enter('temporaryTableCellContent'); // Can’t be space or eols at the start of a construct, so we’re in a cell.

       return inCellContentBody(code);
     }
     /** @type {State} */


     function cellDividerBody(code) {
       effects.enter('tableCellDivider');
       effects.consume(code);
       effects.exit('tableCellDivider');
       return cellBreakBody;
     }
     /** @type {State} */


     function cellBreakBody(code) {
       if (code === null || markdownLineEnding(code)) {
         return atRowEndBody(code);
       }

       if (markdownSpace(code)) {
         effects.enter("whitespace");
         effects.consume(code);
         return inWhitespaceBody;
       } // `|`


       if (code === 124) {
         return cellDividerBody(code);
       } // Anything else is cell content.


       effects.enter('temporaryTableCellContent');
       return inCellContentBody(code);
     }
     /** @type {State} */


     function inWhitespaceBody(code) {
       if (markdownSpace(code)) {
         effects.consume(code);
         return inWhitespaceBody;
       }

       effects.exit("whitespace");
       return cellBreakBody(code);
     }
     /** @type {State} */


     function inCellContentBody(code) {
       // EOF, whitespace, pipe
       if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {
         effects.exit('temporaryTableCellContent');
         return cellBreakBody(code);
       }

       effects.consume(code);
       return code === 92 ? inCellContentEscapeBody : inCellContentBody;
     }
     /** @type {State} */


     function inCellContentEscapeBody(code) {
       if (code === 92 || code === 124) {
         effects.consume(code);
         return inCellContentBody;
       } // Anything else.


       return inCellContentBody(code);
     }
     /** @type {State} */


     function atRowEndBody(code) {
       effects.exit('tableRow');

       if (code === null) {
         return tableBodyClose(code);
       }

       return effects.check(nextPrefixedOrBlank, tableBodyClose, effects.attempt({
         tokenize: tokenizeRowEnd,
         partial: true
       }, factorySpace(effects, rowStartBody, "linePrefix", 4), tableBodyClose))(code);
     }
     /** @type {State} */


     function tableBodyClose(code) {
       effects.exit('tableBody');
       return tableClose(code);
     }
     /** @type {Tokenizer} */


     function tokenizeRowEnd(effects, ok, nok) {
       return start;
       /** @type {State} */

       function start(code) {
         effects.enter("lineEnding");
         effects.consume(code);
         effects.exit("lineEnding");
         return factorySpace(effects, prefixed, "linePrefix");
       }
       /** @type {State} */


       function prefixed(code) {
         // Blank or interrupting line.
         if (self.parser.lazy[self.now().line] || code === null || markdownLineEnding(code)) {
           return nok(code);
         }

         const tail = self.events[self.events.length - 1]; // Indented code can interrupt delimiter and body rows.

         if (!self.parser.constructs.disable.null.includes('codeIndented') && tail && tail[1].type === "linePrefix" && tail[2].sliceSerialize(tail[1], true).length >= 4) {
           return nok(code);
         }

         self._gfmTableDynamicInterruptHack = true;
         return effects.check(self.parser.constructs.flow, function (code) {
           self._gfmTableDynamicInterruptHack = false;
           return nok(code);
         }, function (code) {
           self._gfmTableDynamicInterruptHack = false;
           return ok(code);
         })(code);
       }
     }
   }
   /** @type {Tokenizer} */


   function tokenizeNextPrefixedOrBlank(effects, ok, nok) {
     let size = 0;
     return start;
     /** @type {State} */

     function start(code) {
       // This is a check, so we don’t care about tokens, but we open a bogus one
       // so we’re valid.
       effects.enter('check'); // EOL.

       effects.consume(code);
       return whitespace;
     }
     /** @type {State} */


     function whitespace(code) {
       if (code === -1 || code === 32) {
         effects.consume(code);
         size++;
         return size === 4 ? ok : whitespace;
       } // EOF or whitespace


       if (code === null || markdownLineEndingOrSpace(code)) {
         return ok(code);
       } // Anything else.


       return nok(code);
     }
   }

   /**
    * @typedef {import('micromark-util-types').Event} Event
    */

   // Port of `edit_map.rs` from `markdown-rs`.
   // This should move to `markdown-js` later.

   // Deal with several changes in events, batching them together.
   //
   // Preferably, changes should be kept to a minimum.
   // Sometimes, it’s needed to change the list of events, because parsing can be
   // messy, and it helps to expose a cleaner interface of events to the compiler
   // and other users.
   // It can also help to merge many adjacent similar events.
   // And, in other cases, it’s needed to parse subcontent: pass some events
   // through another tokenizer and inject the result.

   /**
    * @typedef {[number, number, Array<Event>]} Change
    * @typedef {[number, number, number]} Jump
    */

   /**
    * Tracks a bunch of edits.
    */
   class EditMap {
     /**
      * Create a new edit map.
      */
     constructor() {
       /**
        * Record of changes.
        *
        * @type {Array<Change>}
        */
       this.map = [];
     }

     /**
      * Create an edit: a remove and/or add at a certain place.
      *
      * @param {number} index
      * @param {number} remove
      * @param {Array<Event>} add
      * @returns {void}
      */
     add(index, remove, add) {
       addImpl(this, index, remove, add);
     }

     // To do: not used here.
     // /**
     //  * Create an edit: but insert `add` before existing additions.
     //  *
     //  * @param {number} index
     //  * @param {number} remove
     //  * @param {Array<Event>} add
     //  * @returns {void}
     //  */
     // addBefore(index, remove, add) {
     //   addImpl(this, index, remove, add, true)
     // }

     /**
      * Done, change the events.
      *
      * @param {Array<Event>} events
      * @returns {void}
      */
     consume(events) {
       this.map.sort((a, b) => a[0] - b[0]);

       /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */
       if (this.map.length === 0) {
         return
       }

       // To do: if links are added in events, like they are in `markdown-rs`,
       // this is needed.
       // // Calculate jumps: where items in the current list move to.
       // /** @type {Array<Jump>} */
       // const jumps = []
       // let index = 0
       // let addAcc = 0
       // let removeAcc = 0
       // while (index < this.map.length) {
       //   const [at, remove, add] = this.map[index]
       //   removeAcc += remove
       //   addAcc += add.length
       //   jumps.push([at, removeAcc, addAcc])
       //   index += 1
       // }
       //
       // . shiftLinks(events, jumps)

       let index = this.map.length;
       /** @type {Array<Array<Event>>} */
       const vecs = [];
       while (index > 0) {
         index -= 1;
         vecs.push(events.slice(this.map[index][0] + this.map[index][1]));
         // eslint-disable-next-line unicorn/no-array-push-push
         vecs.push(this.map[index][2]);

         // Truncate rest.
         events.length = this.map[index][0];
       }
       vecs.push([...events]);
       events.length = 0;
       let slice = vecs.pop();
       while (slice) {
         events.push(...slice);
         slice = vecs.pop();
       }

       // Truncate everything.
       this.map.length = 0;
     }
   }

   /**
    * Create an edit.
    *
    * @param {EditMap} editMap
    * @param {number} at
    * @param {number} remove
    * @param {Array<Event>} add
    * @returns {void}
    */
   function addImpl(editMap, at, remove, add) {
     let index = 0;

     /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */
     if (remove === 0 && add.length === 0) {
       return
     }
     while (index < editMap.map.length) {
       if (editMap.map[index][0] === at) {
         editMap.map[index][1] += remove;

         // To do: before not used.
         // if (before) {
         //   add.push(...editMap.map[index][2])
         //   editMap.map[index][2] = add
         // } else {
         editMap.map[index][2].push(...add);
         // }

         return
       }
       index += 1;
     }
     editMap.map.push([at, remove, add]);
   }

   // /**
   //  * Shift `previous` and `next` links according to `jumps`.
   //  *
   //  * This fixes links in case there are events removed or added between them.
   //  *
   //  * @param {Array<Event>} events
   //  * @param {Array<Jump>} jumps
   //  */
   // function shiftLinks(events, jumps) {
   //   let jumpIndex = 0
   //   let index = 0
   //   let add = 0
   //   let rm = 0

   //   while (index < events.length) {
   //     const rmCurr = rm

   //     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {
   //       add = jumps[jumpIndex][2]
   //       rm = jumps[jumpIndex][1]
   //       jumpIndex += 1
   //     }

   //     // Ignore items that will be removed.
   //     if (rm > rmCurr) {
   //       index += rm - rmCurr
   //     } else {
   //       console.log('to do: links?', add, rmCurr)
   //       // ?
   //       // if let Some(link) = &events[index].link {
   //       //     if let Some(next) = link.next {
   //       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);
   //       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {
   //       //             add = jumps[jumpIndex].2;
   //       //             rm = jumps[jumpIndex].1;
   //       //             jumpIndex += 1;
   //       //         }
   //       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);
   //       //         index = next;
   //       //         continue;
   //       //     }
   //       // }
   //       index += 1
   //     }
   //   }
   // }

   /**
    * @typedef {import('micromark-util-types').Event} Event
    */

   /**
    * @typedef {'left' | 'center' | 'right' | 'none'} Align
    */

   /**
    * Figure out the alignment of a GFM table.
    *
    * @param {Array<Event>} events
    * @param {number} index
    * @returns {Array<Align>}
    */
   function gfmTableAlign(events, index) {
     let inDelimiterRow = false;
     /** @type {Array<Align>} */
     const align = [];
     while (index < events.length) {
       const event = events[index];
       if (inDelimiterRow) {
         if (event[0] === 'enter') {
           // Start of alignment value: set a new column.
           // To do: `markdown-rs` uses `tableDelimiterCellValue`.
           if (event[1].type === 'tableContent') {
             align.push(
               events[index + 1][1].type === 'tableDelimiterMarker'
                 ? 'left'
                 : 'none'
             );
           }
         }
         // Exits:
         // End of alignment value: change the column.
         // To do: `markdown-rs` uses `tableDelimiterCellValue`.
         else if (event[1].type === 'tableContent') {
           if (events[index - 1][1].type === 'tableDelimiterMarker') {
             const alignIndex = align.length - 1;
             align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right';
           }
         }
         // Done!
         else if (event[1].type === 'tableDelimiterRow') {
           break
         }
       } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {
         inDelimiterRow = true;
       }
       index += 1;
     }
     return align
   }

   /**
    * @typedef {import('micromark-util-types').Event} Event
    * @typedef {import('micromark-util-types').Extension} Extension
    * @typedef {import('micromark-util-types').Point} Point
    * @typedef {import('micromark-util-types').Resolver} Resolver
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').Token} Token
    * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    */


   // To do: next major: expose functions.

   /**
    * Extension for `micromark` that can be passed in `extensions` to enable GFM
    * table syntax.
    *
    * @type {Extension}
    */
   const gfmTable = {
     flow: {
       null: {
         tokenize: tokenizeTable,
         resolveAll: resolveTable
       }
     }
   };

   /**
    * @this {TokenizeContext}
    * @type {Tokenizer}
    */
   function tokenizeTable(effects, ok, nok) {
     const self = this;
     let size = 0;
     let sizeB = 0;
     /** @type {boolean | undefined} */
     let seen;
     return start

     /**
      * Start of a GFM table.
      *
      * If there is a valid table row or table head before, then we try to parse
      * another row.
      * Otherwise, we try to parse a head.
      *
      * ```markdown
      * > | | a |
      *     ^
      *   | | - |
      * > | | b |
      *     ^
      * ```
      * @type {State}
      */
     function start(code) {
       let index = self.events.length - 1;
       while (index > -1) {
         const type = self.events[index][1].type;
         if (
           type === 'lineEnding' ||
           // Note: markdown-rs uses `whitespace` instead of `linePrefix`
           type === 'linePrefix'
         )
           index--;
         else break
       }
       const tail = index > -1 ? self.events[index][1].type : null;
       const next =
         tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore;

       // Don’t allow lazy body rows.
       if (next === bodyRowStart && self.parser.lazy[self.now().line]) {
         return nok(code)
       }
       return next(code)
     }

     /**
      * Before table head row.
      *
      * ```markdown
      * > | | a |
      *     ^
      *   | | - |
      *   | | b |
      * ```
      *
      * @type {State}
      */
     function headRowBefore(code) {
       effects.enter('tableHead');
       effects.enter('tableRow');
       return headRowStart(code)
     }

     /**
      * Before table head row, after whitespace.
      *
      * ```markdown
      * > | | a |
      *     ^
      *   | | - |
      *   | | b |
      * ```
      *
      * @type {State}
      */
     function headRowStart(code) {
       if (code === 124) {
         return headRowBreak(code)
       }

       // To do: micromark-js should let us parse our own whitespace in extensions,
       // like `markdown-rs`:
       //
       // ```js
       // // 4+ spaces.
       // if (markdownSpace(code)) {
       //   return nok(code)
       // }
       // ```

       seen = true;
       // Count the first character, that isn’t a pipe, double.
       sizeB += 1;
       return headRowBreak(code)
     }

     /**
      * At break in table head row.
      *
      * ```markdown
      * > | | a |
      *     ^
      *       ^
      *         ^
      *   | | - |
      *   | | b |
      * ```
      *
      * @type {State}
      */
     function headRowBreak(code) {
       if (code === null) {
         // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.
         return nok(code)
       }
       if (markdownLineEnding(code)) {
         // If anything other than one pipe (ignoring whitespace) was used, it’s fine.
         if (sizeB > 1) {
           sizeB = 0;
           // To do: check if this works.
           // Feel free to interrupt:
           self.interrupt = true;
           effects.exit('tableRow');
           effects.enter('lineEnding');
           effects.consume(code);
           effects.exit('lineEnding');
           return headDelimiterStart
         }

         // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.
         return nok(code)
       }
       if (markdownSpace(code)) {
         // To do: check if this is fine.
         // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)
         // State::Retry(space_or_tab(tokenizer))
         return factorySpace(effects, headRowBreak, 'whitespace')(code)
       }
       sizeB += 1;
       if (seen) {
         seen = false;
         // Header cell count.
         size += 1;
       }
       if (code === 124) {
         effects.enter('tableCellDivider');
         effects.consume(code);
         effects.exit('tableCellDivider');
         // Whether a delimiter was seen.
         seen = true;
         return headRowBreak
       }

       // Anything else is cell data.
       effects.enter('data');
       return headRowData(code)
     }

     /**
      * In table head row data.
      *
      * ```markdown
      * > | | a |
      *       ^
      *   | | - |
      *   | | b |
      * ```
      *
      * @type {State}
      */
     function headRowData(code) {
       if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {
         effects.exit('data');
         return headRowBreak(code)
       }
       effects.consume(code);
       return code === 92 ? headRowEscape : headRowData
     }

     /**
      * In table head row escape.
      *
      * ```markdown
      * > | | a\-b |
      *         ^
      *   | | ---- |
      *   | | c    |
      * ```
      *
      * @type {State}
      */
     function headRowEscape(code) {
       if (code === 92 || code === 124) {
         effects.consume(code);
         return headRowData
       }
       return headRowData(code)
     }

     /**
      * Before delimiter row.
      *
      * ```markdown
      *   | | a |
      * > | | - |
      *     ^
      *   | | b |
      * ```
      *
      * @type {State}
      */
     function headDelimiterStart(code) {
       // Reset `interrupt`.
       self.interrupt = false;

       // Note: in `markdown-rs`, we need to handle piercing here too.
       if (self.parser.lazy[self.now().line]) {
         return nok(code)
       }
       effects.enter('tableDelimiterRow');
       // Track if we’ve seen a `:` or `|`.
       seen = false;
       if (markdownSpace(code)) {
         return factorySpace(
           effects,
           headDelimiterBefore,
           'linePrefix',
           self.parser.constructs.disable.null.includes('codeIndented')
             ? undefined
             : 4
         )(code)
       }
       return headDelimiterBefore(code)
     }

     /**
      * Before delimiter row, after optional whitespace.
      *
      * Reused when a `|` is found later, to parse another cell.
      *
      * ```markdown
      *   | | a |
      * > | | - |
      *     ^
      *   | | b |
      * ```
      *
      * @type {State}
      */
     function headDelimiterBefore(code) {
       if (code === 45 || code === 58) {
         return headDelimiterValueBefore(code)
       }
       if (code === 124) {
         seen = true;
         // If we start with a pipe, we open a cell marker.
         effects.enter('tableCellDivider');
         effects.consume(code);
         effects.exit('tableCellDivider');
         return headDelimiterCellBefore
       }

       // More whitespace / empty row not allowed at start.
       return headDelimiterNok(code)
     }

     /**
      * After `|`, before delimiter cell.
      *
      * ```markdown
      *   | | a |
      * > | | - |
      *      ^
      * ```
      *
      * @type {State}
      */
     function headDelimiterCellBefore(code) {
       if (markdownSpace(code)) {
         return factorySpace(effects, headDelimiterValueBefore, 'whitespace')(code)
       }
       return headDelimiterValueBefore(code)
     }

     /**
      * Before delimiter cell value.
      *
      * ```markdown
      *   | | a |
      * > | | - |
      *       ^
      * ```
      *
      * @type {State}
      */
     function headDelimiterValueBefore(code) {
       // Align: left.
       if (code === 58) {
         sizeB += 1;
         seen = true;
         effects.enter('tableDelimiterMarker');
         effects.consume(code);
         effects.exit('tableDelimiterMarker');
         return headDelimiterLeftAlignmentAfter
       }

       // Align: none.
       if (code === 45) {
         sizeB += 1;
         // To do: seems weird that this *isn’t* left aligned, but that state is used?
         return headDelimiterLeftAlignmentAfter(code)
       }
       if (code === null || markdownLineEnding(code)) {
         return headDelimiterCellAfter(code)
       }
       return headDelimiterNok(code)
     }

     /**
      * After delimiter cell left alignment marker.
      *
      * ```markdown
      *   | | a  |
      * > | | :- |
      *        ^
      * ```
      *
      * @type {State}
      */
     function headDelimiterLeftAlignmentAfter(code) {
       if (code === 45) {
         effects.enter('tableDelimiterFiller');
         return headDelimiterFiller(code)
       }

       // Anything else is not ok after the left-align colon.
       return headDelimiterNok(code)
     }

     /**
      * In delimiter cell filler.
      *
      * ```markdown
      *   | | a |
      * > | | - |
      *       ^
      * ```
      *
      * @type {State}
      */
     function headDelimiterFiller(code) {
       if (code === 45) {
         effects.consume(code);
         return headDelimiterFiller
       }

       // Align is `center` if it was `left`, `right` otherwise.
       if (code === 58) {
         seen = true;
         effects.exit('tableDelimiterFiller');
         effects.enter('tableDelimiterMarker');
         effects.consume(code);
         effects.exit('tableDelimiterMarker');
         return headDelimiterRightAlignmentAfter
       }
       effects.exit('tableDelimiterFiller');
       return headDelimiterRightAlignmentAfter(code)
     }

     /**
      * After delimiter cell right alignment marker.
      *
      * ```markdown
      *   | |  a |
      * > | | -: |
      *         ^
      * ```
      *
      * @type {State}
      */
     function headDelimiterRightAlignmentAfter(code) {
       if (markdownSpace(code)) {
         return factorySpace(effects, headDelimiterCellAfter, 'whitespace')(code)
       }
       return headDelimiterCellAfter(code)
     }

     /**
      * After delimiter cell.
      *
      * ```markdown
      *   | |  a |
      * > | | -: |
      *          ^
      * ```
      *
      * @type {State}
      */
     function headDelimiterCellAfter(code) {
       if (code === 124) {
         return headDelimiterBefore(code)
       }
       if (code === null || markdownLineEnding(code)) {
         // Exit when:
         // * there was no `:` or `|` at all (it’s a thematic break or setext
         //   underline instead)
         // * the header cell count is not the delimiter cell count
         if (!seen || size !== sizeB) {
           return headDelimiterNok(code)
         }

         // Note: in markdown-rs`, a reset is needed here.
         effects.exit('tableDelimiterRow');
         effects.exit('tableHead');
         // To do: in `markdown-rs`, resolvers need to be registered manually.
         // effects.register_resolver(ResolveName::GfmTable)
         return ok(code)
       }
       return headDelimiterNok(code)
     }

     /**
      * In delimiter row, at a disallowed byte.
      *
      * ```markdown
      *   | | a |
      * > | | x |
      *       ^
      * ```
      *
      * @type {State}
      */
     function headDelimiterNok(code) {
       // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.
       return nok(code)
     }

     /**
      * Before table body row.
      *
      * ```markdown
      *   | | a |
      *   | | - |
      * > | | b |
      *     ^
      * ```
      *
      * @type {State}
      */
     function bodyRowStart(code) {
       // Note: in `markdown-rs` we need to manually take care of a prefix,
       // but in `micromark-js` that is done for us, so if we’re here, we’re
       // never at whitespace.
       effects.enter('tableRow');
       return bodyRowBreak(code)
     }

     /**
      * At break in table body row.
      *
      * ```markdown
      *   | | a |
      *   | | - |
      * > | | b |
      *     ^
      *       ^
      *         ^
      * ```
      *
      * @type {State}
      */
     function bodyRowBreak(code) {
       if (code === 124) {
         effects.enter('tableCellDivider');
         effects.consume(code);
         effects.exit('tableCellDivider');
         return bodyRowBreak
       }
       if (code === null || markdownLineEnding(code)) {
         effects.exit('tableRow');
         return ok(code)
       }
       if (markdownSpace(code)) {
         return factorySpace(effects, bodyRowBreak, 'whitespace')(code)
       }

       // Anything else is cell content.
       effects.enter('data');
       return bodyRowData(code)
     }

     /**
      * In table body row data.
      *
      * ```markdown
      *   | | a |
      *   | | - |
      * > | | b |
      *       ^
      * ```
      *
      * @type {State}
      */
     function bodyRowData(code) {
       if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {
         effects.exit('data');
         return bodyRowBreak(code)
       }
       effects.consume(code);
       return code === 92 ? bodyRowEscape : bodyRowData
     }

     /**
      * In table body row escape.
      *
      * ```markdown
      *   | | a    |
      *   | | ---- |
      * > | | b\-c |
      *         ^
      * ```
      *
      * @type {State}
      */
     function bodyRowEscape(code) {
       if (code === 92 || code === 124) {
         effects.consume(code);
         return bodyRowData
       }
       return bodyRowData(code)
     }
   }

   /** @type {Resolver} */
   // eslint-disable-next-line complexity
   function resolveTable(events, context) {
     let index = -1;
     let inFirstCellAwaitingPipe = true;
     /** @type {RowKind} */
     let rowKind = 0;
     /** @type {Range} */
     let lastCell = [0, 0, 0, 0];
     /** @type {Range} */
     let cell = [0, 0, 0, 0];
     let afterHeadAwaitingFirstBodyRow = false;
     let lastTableEnd = 0;
     /** @type {Token | undefined} */
     let currentTable;
     /** @type {Token | undefined} */
     let currentBody;
     /** @type {Token | undefined} */
     let currentCell;
     const map = new EditMap();
     while (++index < events.length) {
       const event = events[index];
       const token = event[1];
       if (event[0] === 'enter') {
         // Start of head.
         if (token.type === 'tableHead') {
           afterHeadAwaitingFirstBodyRow = false;

           // Inject previous (body end and) table end.
           if (lastTableEnd !== 0) {
             flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);
             currentBody = undefined;
             lastTableEnd = 0;
           }

           // Inject table start.
           currentTable = {
             type: 'table',
             start: Object.assign({}, token.start),
             // Note: correct end is set later.
             end: Object.assign({}, token.end)
           };
           map.add(index, 0, [['enter', currentTable, context]]);
         } else if (
           token.type === 'tableRow' ||
           token.type === 'tableDelimiterRow'
         ) {
           inFirstCellAwaitingPipe = true;
           currentCell = undefined;
           lastCell = [0, 0, 0, 0];
           cell = [0, index + 1, 0, 0];

           // Inject table body start.
           if (afterHeadAwaitingFirstBodyRow) {
             afterHeadAwaitingFirstBodyRow = false;
             currentBody = {
               type: 'tableBody',
               start: Object.assign({}, token.start),
               // Note: correct end is set later.
               end: Object.assign({}, token.end)
             };
             map.add(index, 0, [['enter', currentBody, context]]);
           }
           rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1;
         }
         // Cell data.
         else if (
           rowKind &&
           (token.type === 'data' ||
             token.type === 'tableDelimiterMarker' ||
             token.type === 'tableDelimiterFiller')
         ) {
           inFirstCellAwaitingPipe = false;

           // First value in cell.
           if (cell[2] === 0) {
             if (lastCell[1] !== 0) {
               cell[0] = cell[1];
               currentCell = flushCell(
                 map,
                 context,
                 lastCell,
                 rowKind,
                 undefined,
                 currentCell
               );
               lastCell = [0, 0, 0, 0];
             }
             cell[2] = index;
           }
         } else if (token.type === 'tableCellDivider') {
           if (inFirstCellAwaitingPipe) {
             inFirstCellAwaitingPipe = false;
           } else {
             if (lastCell[1] !== 0) {
               cell[0] = cell[1];
               currentCell = flushCell(
                 map,
                 context,
                 lastCell,
                 rowKind,
                 undefined,
                 currentCell
               );
             }
             lastCell = cell;
             cell = [lastCell[1], index, 0, 0];
           }
         }
       }
       // Exit events.
       else if (token.type === 'tableHead') {
         afterHeadAwaitingFirstBodyRow = true;
         lastTableEnd = index;
       } else if (
         token.type === 'tableRow' ||
         token.type === 'tableDelimiterRow'
       ) {
         lastTableEnd = index;
         if (lastCell[1] !== 0) {
           cell[0] = cell[1];
           currentCell = flushCell(
             map,
             context,
             lastCell,
             rowKind,
             index,
             currentCell
           );
         } else if (cell[1] !== 0) {
           currentCell = flushCell(map, context, cell, rowKind, index, currentCell);
         }
         rowKind = 0;
       } else if (
         rowKind &&
         (token.type === 'data' ||
           token.type === 'tableDelimiterMarker' ||
           token.type === 'tableDelimiterFiller')
       ) {
         cell[3] = index;
       }
     }
     if (lastTableEnd !== 0) {
       flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);
     }
     map.consume(context.events);

     // To do: move this into `html`, when events are exposed there.
     // That’s what `markdown-rs` does.
     // That needs updates to `mdast-util-gfm-table`.
     index = -1;
     while (++index < context.events.length) {
       const event = context.events[index];
       if (event[0] === 'enter' && event[1].type === 'table') {
         event[1]._align = gfmTableAlign(context.events, index);
       }
     }
     return events
   }

   /// Generate a cell.
   /**
    *
    * @param {EditMap} map
    * @param {TokenizeContext} context
    * @param {Range} range
    * @param {RowKind} rowKind
    * @param {number | undefined} rowEnd
    * @param {Token | undefined} previousCell
    * @returns {Token | undefined}
    */
   // eslint-disable-next-line max-params
   function flushCell(map, context, range, rowKind, rowEnd, previousCell) {
     // `markdown-rs` uses:
     // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'
     const groupName =
       rowKind === 1
         ? 'tableHeader'
         : rowKind === 2
         ? 'tableDelimiter'
         : 'tableData';
     // `markdown-rs` uses:
     // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'
     const valueName = 'tableContent';

     // Insert an exit for the previous cell, if there is one.
     //
     // ```markdown
     // > | | aa | bb | cc |
     //          ^-- exit
     //           ^^^^-- this cell
     // ```
     if (range[0] !== 0) {
       previousCell.end = Object.assign({}, getPoint(context.events, range[0]));
       map.add(range[0], 0, [['exit', previousCell, context]]);
     }

     // Insert enter of this cell.
     //
     // ```markdown
     // > | | aa | bb | cc |
     //           ^-- enter
     //           ^^^^-- this cell
     // ```
     const now = getPoint(context.events, range[1]);
     previousCell = {
       type: groupName,
       start: Object.assign({}, now),
       // Note: correct end is set later.
       end: Object.assign({}, now)
     };
     map.add(range[1], 0, [['enter', previousCell, context]]);

     // Insert text start at first data start and end at last data end, and
     // remove events between.
     //
     // ```markdown
     // > | | aa | bb | cc |
     //            ^-- enter
     //             ^-- exit
     //           ^^^^-- this cell
     // ```
     if (range[2] !== 0) {
       const relatedStart = getPoint(context.events, range[2]);
       const relatedEnd = getPoint(context.events, range[3]);
       /** @type {Token} */
       const valueToken = {
         type: valueName,
         start: Object.assign({}, relatedStart),
         end: Object.assign({}, relatedEnd)
       };
       map.add(range[2], 0, [['enter', valueToken, context]]);
       if (rowKind !== 2) {
         // Fix positional info on remaining events
         const start = context.events[range[2]];
         const end = context.events[range[3]];
         start[1].end = Object.assign({}, end[1].end);
         start[1].type = 'chunkText';
         start[1].contentType = 'text';

         // Remove if needed.
         if (range[3] > range[2] + 1) {
           const a = range[2] + 1;
           const b = range[3] - range[2] - 1;
           map.add(a, b, []);
         }
       }
       map.add(range[3] + 1, 0, [['exit', valueToken, context]]);
     }

     // Insert an exit for the last cell, if at the row end.
     //
     // ```markdown
     // > | | aa | bb | cc |
     //                    ^-- exit
     //               ^^^^^^-- this cell (the last one contains two “between” parts)
     // ```
     if (rowEnd !== undefined) {
       previousCell.end = Object.assign({}, getPoint(context.events, rowEnd));
       map.add(rowEnd, 0, [['exit', previousCell, context]]);
       previousCell = undefined;
     }
     return previousCell
   }

   /**
    * Generate table end (and table body end).
    *
    * @param {EditMap} map
    * @param {TokenizeContext} context
    * @param {number} index
    * @param {Token} table
    * @param {Token | undefined} tableBody
    */
   // eslint-disable-next-line max-params
   function flushTableEnd(map, context, index, table, tableBody) {
     /** @type {Array<Event>} */
     const exits = [];
     const related = getPoint(context.events, index);
     if (tableBody) {
       tableBody.end = Object.assign({}, related);
       exits.push(['exit', tableBody, context]);
     }
     table.end = Object.assign({}, related);
     exits.push(['exit', table, context]);
     map.add(index + 1, 0, exits);
   }

   /**
    * @param {Array<Event>} events
    * @param {number} index
    * @returns {readonly Point}
    */
   function getPoint(events, index) {
     const event = events[index];
     const side = event[0] === 'enter' ? 'start' : 'end';
     return event[1][side]
   }

   /**
    * @typedef {import('mdast').Delete} Delete
    *
    * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext
    * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension
    * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle
    *
    * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName
    * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension
    * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle
    */


   // To do: next major: expose functions.
   // To do: next major: use `state`, state utilities.

   /**
    * List of constructs that occur in phrasing (paragraphs, headings), but cannot
    * contain strikethrough.
    * So they sort of cancel each other out.
    * Note: could use a better name.
    *
    * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>
    *
    * @type {Array<ConstructName>}
    */
   const constructsWithoutStrikethrough = [
     'autolink',
     'destinationLiteral',
     'destinationRaw',
     'reference',
     'titleQuote',
     'titleApostrophe'
   ];

   handleDelete.peek = peekDelete;

   /**
    * Extension for `mdast-util-from-markdown` to enable GFM strikethrough.
    *
    * @type {FromMarkdownExtension}
    */
   const gfmStrikethroughFromMarkdown = {
     canContainEols: ['delete'],
     enter: {strikethrough: enterStrikethrough},
     exit: {strikethrough: exitStrikethrough}
   };

   /**
    * Extension for `mdast-util-to-markdown` to enable GFM strikethrough.
    *
    * @type {ToMarkdownExtension}
    */
   const gfmStrikethroughToMarkdown = {
     unsafe: [
       {
         character: '~',
         inConstruct: 'phrasing',
         notInConstruct: constructsWithoutStrikethrough
       }
     ],
     handlers: {delete: handleDelete}
   };

   /**
    * @this {CompileContext}
    * @type {FromMarkdownHandle}
    */
   function enterStrikethrough(token) {
     this.enter({type: 'delete', children: []}, token);
   }

   /**
    * @this {CompileContext}
    * @type {FromMarkdownHandle}
    */
   function exitStrikethrough(token) {
     this.exit(token);
   }

   /**
    * @type {ToMarkdownHandle}
    * @param {Delete} node
    */
   function handleDelete(node, _, context, safeOptions) {
     const tracker = track(safeOptions);
     const exit = context.enter('strikethrough');
     let value = tracker.move('~~');
     value += containerPhrasing(node, context, {
       ...tracker.current(),
       before: value,
       after: '~'
     });
     value += tracker.move('~~');
     exit();
     return value
   }

   /** @type {ToMarkdownHandle} */
   function peekDelete() {
     return '~'
   }

   /**
    * @typedef {import('micromark-util-types').Event} Event
    * @typedef {import('micromark-util-types').Extension} Extension
    * @typedef {import('micromark-util-types').Resolver} Resolver
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').Token} Token
    * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    *
    * @typedef Options
    *   Configuration (optional).
    * @property {boolean} [singleTilde=true]
    *   Whether to support strikethrough with a single tilde.
    *
    *   Single tildes work on github.com, but are technically prohibited by the
    *   GFM spec.
    */

   /**
    * Create an extension for `micromark` to enable GFM strikethrough syntax.
    *
    * @param {Options | null | undefined} [options]
    *   Configuration.
    * @returns {Extension}
    *   Extension for `micromark` that can be passed in `extensions`, to
    *   enable GFM strikethrough syntax.
    */
   function gfmStrikethrough(options) {
     const options_ = options || {};
     let single = options_.singleTilde;
     const tokenizer = {
       tokenize: tokenizeStrikethrough,
       resolveAll: resolveAllStrikethrough
     };
     if (single === null || single === undefined) {
       single = true;
     }
     return {
       text: {
         [126]: tokenizer
       },
       insideSpan: {
         null: [tokenizer]
       },
       attentionMarkers: {
         null: [126]
       }
     }

     /**
      * Take events and resolve strikethrough.
      *
      * @type {Resolver}
      */
     function resolveAllStrikethrough(events, context) {
       let index = -1;

       // Walk through all events.
       while (++index < events.length) {
         // Find a token that can close.
         if (
           events[index][0] === 'enter' &&
           events[index][1].type === 'strikethroughSequenceTemporary' &&
           events[index][1]._close
         ) {
           let open = index;

           // Now walk back to find an opener.
           while (open--) {
             // Find a token that can open the closer.
             if (
               events[open][0] === 'exit' &&
               events[open][1].type === 'strikethroughSequenceTemporary' &&
               events[open][1]._open &&
               // If the sizes are the same:
               events[index][1].end.offset - events[index][1].start.offset ===
                 events[open][1].end.offset - events[open][1].start.offset
             ) {
               events[index][1].type = 'strikethroughSequence';
               events[open][1].type = 'strikethroughSequence';

               /** @type {Token} */
               const strikethrough = {
                 type: 'strikethrough',
                 start: Object.assign({}, events[open][1].start),
                 end: Object.assign({}, events[index][1].end)
               };

               /** @type {Token} */
               const text = {
                 type: 'strikethroughText',
                 start: Object.assign({}, events[open][1].end),
                 end: Object.assign({}, events[index][1].start)
               };

               // Opening.
               /** @type {Array<Event>} */
               const nextEvents = [
                 ['enter', strikethrough, context],
                 ['enter', events[open][1], context],
                 ['exit', events[open][1], context],
                 ['enter', text, context]
               ];
               const insideSpan = context.parser.constructs.insideSpan.null;
               if (insideSpan) {
                 // Between.
                 splice(
                   nextEvents,
                   nextEvents.length,
                   0,
                   resolveAll(insideSpan, events.slice(open + 1, index), context)
                 );
               }

               // Closing.
               splice(nextEvents, nextEvents.length, 0, [
                 ['exit', text, context],
                 ['enter', events[index][1], context],
                 ['exit', events[index][1], context],
                 ['exit', strikethrough, context]
               ]);
               splice(events, open - 1, index - open + 3, nextEvents);
               index = open + nextEvents.length - 2;
               break
             }
           }
         }
       }
       index = -1;
       while (++index < events.length) {
         if (events[index][1].type === 'strikethroughSequenceTemporary') {
           events[index][1].type = 'data';
         }
       }
       return events
     }

     /**
      * @this {TokenizeContext}
      * @type {Tokenizer}
      */
     function tokenizeStrikethrough(effects, ok, nok) {
       const previous = this.previous;
       const events = this.events;
       let size = 0;
       return start

       /** @type {State} */
       function start(code) {
         if (
           previous === 126 &&
           events[events.length - 1][1].type !== 'characterEscape'
         ) {
           return nok(code)
         }
         effects.enter('strikethroughSequenceTemporary');
         return more(code)
       }

       /** @type {State} */
       function more(code) {
         const before = classifyCharacter(previous);
         if (code === 126) {
           // If this is the third marker, exit.
           if (size > 1) return nok(code)
           effects.consume(code);
           size++;
           return more
         }
         if (size < 2 && !single) return nok(code)
         const token = effects.exit('strikethroughSequenceTemporary');
         const after = classifyCharacter(code);
         token._open = !after || (after === 2 && Boolean(before));
         token._close = !before || (before === 2 && Boolean(after));
         return ok(code)
       }
     }
   }

   /**
    * @typedef {import('mdast').Delete} Delete
    *
    * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext
    * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension
    * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle
    *
    * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName
    * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension
    * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle
    *
    * @typedef Options
    * @property {string} mdastNodeName
    * @property {string} hastNodeName
    * @property {string} char
    */


   // To do: next major: expose functions.
   // To do: next major: use `state`, state utilities.

   /**
    * List of constructs that occur in phrasing (paragraphs, headings), but cannot
    * contain strikethrough.
    * So they sort of cancel each other out.
    * Note: could use a better name.
    *
    * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>
    *
    * @type {Array<ConstructName>}
    */
   const constructsWithoutAttention = [
     'autolink',
     'destinationLiteral',
     'destinationRaw',
     'reference',
     'titleQuote',
     'titleApostrophe'
   ];

   /**
    * Extension for `mdast-util-from-markdown` to create single symbol attention (sub, sup etc).
    *
    * @param {Options} options
    *   MDAST and HAST node names
    * @returns {FromMarkdownExtension}
    *   Syntax extension for micromark (passed in `mdastExtensions`).
    */
   function attentionFromMarkdown(options) {
     return {
       canContainEols: [options.mdastNodeName],
       enter: {
         [options.mdastNodeName](token) {
           this.enter(
             {
               // @ts-expect-error Custom
               type: options.mdastNodeName,
               children: [],
               data: {hName: options.hastNodeName}
             },
             token
           );
         }
       },
       exit: {
         [options.mdastNodeName](token) {
           this.exit(token);
         }
       }
     }
   }

   /**
    * Extension for `mdast-util-to-markdown` to create single symbol attention (sub, sup etc).
    *
    * @param {Options} options
    *   MDAST and HAST node names
    * @return {ToMarkdownExtension}
    */
   function attentionToMarkdown(options) {
     const temporary = {
       unsafe: [
         {
           character: options.char,
           inConstruct: 'phrasing',
           notInConstruct: constructsWithoutAttention
         }
       ],
       handlers: {
         /**
          * @type {ToMarkdownHandle}
          * @param {Delete} node
          */
         [options.mdastNodeName](node, _, context, safeOptions) {
           const tracker = track(safeOptions);
           // @ts-expect-error Custom
           const exit = context.enter(options.mdastNodeName);
           // // @ts-expect-error Custom
           let value = tracker.move(options.char);
           value += containerPhrasing(node, context, {
             ...tracker.current(),
             before: value,
             // // @ts-expect-error Custom
             after: options.char
           });
           // // @ts-expect-error Custom
           value += tracker.move(options.char);
           exit();
           return value
         }
       }
     };
     // @ts-expect-error Custom
     temporary.handlers[options.mdastNodeName].peek = function () {
       return options.char
     };

     // @ts-expect-error Custom
     return temporary
   }

   /**
    * Extension for `mdast-util-to-markdown` to create single symbol attention (sub, sup etc).
    *
    * @param {Options} options
    *   MDAST and HAST node names
    * @return {object}
    */
   function attentionFromHast(options) {
     /**
      * Copied from https://github.com/syntax-tree/hast-util-to-mdast/blob/main/lib/handlers/del.js
      * @typedef {import('hast').Element} Element
      * @typedef {import('hast-util-to-mdast').State} State
      */

     /**
      * @param {State} state
      *   State.
      * @param {Element} node
      *   hast element to transform.
      * @returns {Delete}
      *   mdast node.
      */
     return {
       // @ts-expect-error: any is ok
       [options.hastNodeName](state, node) {
         const result = {
           type: options.mdastNodeName,
           // //@ts-expect-error: allow potentially “invalid” nodes, they might be unknown.
           // We also support straddling later.
           children: state.all(node)
         };
         state.patch(node, result);
         return result
       }
     }
   }

   /**
    * @typedef {import('micromark-util-types').Extension} Extension
    * @typedef {import('micromark-util-types').Resolver} Resolver
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').Code} Code
    *
    * @typedef Options
    * @property {string} mdastNodeName
    * @property {string} hastNodeName
    * @property {string} char
    * @property {Code} [code]
    */

   /**
    * Function that can be called to get a syntax extension for micromark (passed
    * in `extensions`).
    *
    * @param {Options} options
    *   MDAST and HAST node names
    * @returns {Extension}
    *   Syntax extension for micromark (passed in `extensions`).
    */
   function attention(options) {
     const atn = options.mdastNodeName;
     const atnTxt = `${atn}Text`;
     const atnSeq = `${options.mdastNodeName}Sequence`;
     const atnSeqTemporary = `${atnSeq}Temporary`;
     const tokenizer = {
       tokenize: tokenizeAttention,
       resolveAll: resolveAllAttention
     };
     options.code = options['char'].charCodeAt(0);
     return {
       // @ts-ignore Number
       text: {
         [options.code]: tokenizer
       },
       insideSpan: {
         null: [tokenizer]
       },
       //
       attentionMarkers: {
         null: [options.code]
       }
     };
     /**
      * Take events and resolve attention.
      *
      * @type {Resolver}
      */

     function resolveAllAttention(events, context) {
       let index = -1; // Walk through all events.

       while (++index < events.length) {
         // Find a token that can close.
         if (events[index][0] === 'enter' && events[index][1].type === atnSeqTemporary && events[index][1]._close) {
           let open = index; // Now walk back to find an opener.

           while (open--) {
             // Find a token that can open the closer.
             if (events[open][0] === 'exit' && events[open][1].type === atnSeqTemporary && events[open][1]._open && // If the sizes are the same:
             events[index][1].end.offset - events[index][1].start.offset === events[open][1].end.offset - events[open][1].start.offset) {
               events[index][1].type = atnSeq;
               events[open][1].type = atnSeq;
               const attention = {
                 type: atn,
                 start: Object.assign({}, events[open][1].start),
                 end: Object.assign({}, events[index][1].end)
               };
               const text = {
                 type: atnTxt,
                 start: Object.assign({}, events[open][1].end),
                 end: Object.assign({}, events[index][1].start)
               }; // Opening.

               const nextEvents = [['enter', attention, context], ['enter', events[open][1], context], ['exit', events[open][1], context], ['enter', text, context]]; // Between.

               splice(nextEvents, nextEvents.length, 0, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context)); // Closing.

               splice(nextEvents, nextEvents.length, 0, [['exit', text, context], ['enter', events[index][1], context], ['exit', events[index][1], context], ['exit', attention, context]]);
               splice(events, open - 1, index - open + 3, nextEvents);
               index = open + nextEvents.length - 2;
               break;
             }
           }
         }
       }

       index = -1;

       while (++index < events.length) {
         if (events[index][1].type === atnSeqTemporary) {
           events[index][1].type = "data";
         }
       }

       return events;
     }
     /** @type {Tokenizer} */


     function tokenizeAttention(effects, ok, nok) {
       // @ts-ignore Custom
       const previous = this.previous; // @ts-ignore Custom

       const events = this.events;
       let size = 0;
       return start;
       /** @type {State} */

       function start(code) {
         if (previous === options.code && events[events.length - 1][1].type !== "characterEscape") {
           return nok(code);
         }

         effects.enter(atnSeqTemporary);
         return more(code);
       }
       /** @type {State} */


       function more(code) {
         const before = classifyCharacter(previous);

         if (code === options.code) {
           // If this is the second marker, exit.
           if (size) return nok(code);
           effects.consume(code);
           size++;
           return more;
         }

         const token = effects.exit(atnSeqTemporary);
         const after = classifyCharacter(code);
         token._open = !after || after === 2 && Boolean(before);
         token._close = !before || before === 2 && Boolean(after);
         return ok(code);
       }
     }
   }

   /**
    * @typedef {import('micromark-util-types').Code} Code
    * @typedef {import('micromark-util-types').Effects} Effects
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').TokenType} TokenType
    */

   /**
    * @param {Effects} effects
    * @param {State} ok
    * @param {State} nok
    * @param {TokenType} attributesType
    * @param {TokenType} attributesMarkerType
    * @param {TokenType} attributeType
    * @param {TokenType} attributeIdType
    * @param {TokenType} attributeClassType
    * @param {TokenType} attributeNameType
    * @param {TokenType} attributeInitializerType
    * @param {TokenType} attributeValueLiteralType
    * @param {TokenType} attributeValueType
    * @param {TokenType} attributeValueMarker
    * @param {TokenType} attributeValueData
    * @param {boolean} [disallowEol=false]
    */
   /* eslint-disable-next-line max-params */
   function factoryAttributes(
     effects,
     ok,
     nok,
     attributesType,
     attributesMarkerType,
     attributeType,
     attributeIdType,
     attributeClassType,
     attributeNameType,
     attributeInitializerType,
     attributeValueLiteralType,
     attributeValueType,
     attributeValueMarker,
     attributeValueData,
     disallowEol
   ) {
     /** @type {TokenType} */
     let type;
     /** @type {Code | undefined} */
     let marker;
     return start

     /** @type {State} */
     function start(code) {
       effects.enter(attributesType);
       effects.enter(attributesMarkerType);
       effects.consume(code);
       effects.exit(attributesMarkerType);
       return between
     }

     /** @type {State} */
     function between(code) {
       if (code === 35) {
         type = attributeIdType;
         return shortcutStart(code)
       }
       if (code === 46) {
         type = attributeClassType;
         return shortcutStart(code)
       }
       if (code === 58 || code === 95 || asciiAlpha(code)) {
         effects.enter(attributeType);
         effects.enter(attributeNameType);
         effects.consume(code);
         return name
       }
       if (disallowEol && markdownSpace(code)) {
         return factorySpace(effects, between, 'whitespace')(code)
       }
       if (!disallowEol && markdownLineEndingOrSpace(code)) {
         return factoryWhitespace(effects, between)(code)
       }
       return end(code)
     }

     /** @type {State} */
     function shortcutStart(code) {
       // Assume it’s registered.
       const markerType = /** @type {TokenType} */ type + 'Marker';
       effects.enter(attributeType);
       effects.enter(type);
       effects.enter(markerType);
       effects.consume(code);
       effects.exit(markerType);
       return shortcutStartAfter
     }

     /** @type {State} */
     function shortcutStartAfter(code) {
       if (
         code === null ||
         code === 34 ||
         code === 35 ||
         code === 39 ||
         code === 46 ||
         code === 60 ||
         code === 61 ||
         code === 62 ||
         code === 96 ||
         code === 125 ||
         markdownLineEndingOrSpace(code)
       ) {
         return nok(code)
       }

       // Assume it’s registered.
       const valueType = /** @type {TokenType} */ type + 'Value';
       effects.enter(valueType);
       effects.consume(code);
       return shortcut
     }

     /** @type {State} */
     function shortcut(code) {
       if (
         code === null ||
         code === 34 ||
         code === 39 ||
         code === 60 ||
         code === 61 ||
         code === 62 ||
         code === 96
       ) {
         return nok(code)
       }
       if (
         code === 35 ||
         code === 46 ||
         code === 125 ||
         markdownLineEndingOrSpace(code)
       ) {
         // Assume it’s registered.
         const valueType = /** @type {TokenType} */ type + 'Value';
         effects.exit(valueType);
         effects.exit(type);
         effects.exit(attributeType);
         return between(code)
       }
       effects.consume(code);
       return shortcut
     }

     /** @type {State} */
     function name(code) {
       if (
         code === 45 ||
         code === 46 ||
         code === 58 ||
         code === 95 ||
         asciiAlphanumeric(code)
       ) {
         effects.consume(code);
         return name
       }
       effects.exit(attributeNameType);
       if (disallowEol && markdownSpace(code)) {
         return factorySpace(effects, nameAfter, 'whitespace')(code)
       }
       if (!disallowEol && markdownLineEndingOrSpace(code)) {
         return factoryWhitespace(effects, nameAfter)(code)
       }
       return nameAfter(code)
     }

     /** @type {State} */
     function nameAfter(code) {
       if (code === 61) {
         effects.enter(attributeInitializerType);
         effects.consume(code);
         effects.exit(attributeInitializerType);
         return valueBefore
       }

       // Attribute w/o value.
       effects.exit(attributeType);
       return between(code)
     }

     /** @type {State} */
     function valueBefore(code) {
       if (
         code === null ||
         code === 60 ||
         code === 61 ||
         code === 62 ||
         code === 96 ||
         code === 125 ||
         (disallowEol && markdownLineEnding(code))
       ) {
         return nok(code)
       }
       if (code === 34 || code === 39) {
         effects.enter(attributeValueLiteralType);
         effects.enter(attributeValueMarker);
         effects.consume(code);
         effects.exit(attributeValueMarker);
         marker = code;
         return valueQuotedStart
       }
       if (disallowEol && markdownSpace(code)) {
         return factorySpace(effects, valueBefore, 'whitespace')(code)
       }
       if (!disallowEol && markdownLineEndingOrSpace(code)) {
         return factoryWhitespace(effects, valueBefore)(code)
       }
       effects.enter(attributeValueType);
       effects.enter(attributeValueData);
       effects.consume(code);
       marker = undefined;
       return valueUnquoted
     }

     /** @type {State} */
     function valueUnquoted(code) {
       if (
         code === null ||
         code === 34 ||
         code === 39 ||
         code === 60 ||
         code === 61 ||
         code === 62 ||
         code === 96
       ) {
         return nok(code)
       }
       if (code === 125 || markdownLineEndingOrSpace(code)) {
         effects.exit(attributeValueData);
         effects.exit(attributeValueType);
         effects.exit(attributeType);
         return between(code)
       }
       effects.consume(code);
       return valueUnquoted
     }

     /** @type {State} */
     function valueQuotedStart(code) {
       if (code === marker) {
         effects.enter(attributeValueMarker);
         effects.consume(code);
         effects.exit(attributeValueMarker);
         effects.exit(attributeValueLiteralType);
         effects.exit(attributeType);
         return valueQuotedAfter
       }
       effects.enter(attributeValueType);
       return valueQuotedBetween(code)
     }

     /** @type {State} */
     function valueQuotedBetween(code) {
       if (code === marker) {
         effects.exit(attributeValueType);
         return valueQuotedStart(code)
       }
       if (code === null) {
         return nok(code)
       }

       // Note: blank lines can’t exist in content.
       if (markdownLineEnding(code)) {
         return disallowEol
           ? nok(code)
           : factoryWhitespace(effects, valueQuotedBetween)(code)
       }
       effects.enter(attributeValueData);
       effects.consume(code);
       return valueQuoted
     }

     /** @type {State} */
     function valueQuoted(code) {
       if (code === marker || code === null || markdownLineEnding(code)) {
         effects.exit(attributeValueData);
         return valueQuotedBetween(code)
       }
       effects.consume(code);
       return valueQuoted
     }

     /** @type {State} */
     function valueQuotedAfter(code) {
       return code === 125 || markdownLineEndingOrSpace(code)
         ? between(code)
         : end(code)
     }

     /** @type {State} */
     function end(code) {
       if (code === 125) {
         effects.enter(attributesMarkerType);
         effects.consume(code);
         effects.exit(attributesMarkerType);
         effects.exit(attributesType);
         return ok
       }
       return nok(code)
     }
   }

   /**
    * @typedef {import('micromark-util-types').Effects} Effects
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').Token} Token
    * @typedef {import('micromark-util-types').TokenType} TokenType
    */

   // This is a fork of:
   // <https://github.com/micromark/micromark/tree/main/packages/micromark-factory-label>
   // to allow empty labels, balanced brackets (such as for nested directives),
   // text instead of strings, and optionally disallows EOLs.

   /**
    * @param {Effects} effects
    * @param {State} ok
    * @param {State} nok
    * @param {TokenType} type
    * @param {TokenType} markerType
    * @param {TokenType} stringType
    * @param {boolean} [disallowEol=false]
    */ // eslint-disable-next-line max-params
   function factoryLabel(
     effects,
     ok,
     nok,
     type,
     markerType,
     stringType,
     disallowEol
   ) {
     let size = 0;
     let balance = 0;
     /** @type {Token|undefined} */
     let previous;
     return start

     /** @type {State} */
     function start(code) {
       effects.enter(type);
       effects.enter(markerType);
       effects.consume(code);
       effects.exit(markerType);
       return afterStart
     }

     /** @type {State} */
     function afterStart(code) {
       if (code === 93) {
         effects.enter(markerType);
         effects.consume(code);
         effects.exit(markerType);
         effects.exit(type);
         return ok
       }
       effects.enter(stringType);
       return lineStart(code)
     }

     /** @type {State} */
     function lineStart(code) {
       if (code === 93 && !balance) {
         return atClosingBrace(code)
       }
       const token = effects.enter('chunkText', {
         contentType: 'text',
         previous
       });
       if (previous) previous.next = token;
       previous = token;
       return data(code)
     }

     /** @type {State} */
     function data(code) {
       if (code === null || size > 999) {
         return nok(code)
       }
       if (code === 91 && ++balance > 32) {
         return nok(code)
       }
       if (code === 93 && !balance--) {
         effects.exit('chunkText');
         return atClosingBrace(code)
       }
       if (markdownLineEnding(code)) {
         if (disallowEol) {
           return nok(code)
         }
         effects.consume(code);
         effects.exit('chunkText');
         return lineStart
       }
       effects.consume(code);
       return code === 92 ? dataEscape : data
     }

     /** @type {State} */
     function dataEscape(code) {
       if (code === 91 || code === 92 || code === 93) {
         effects.consume(code);
         size++;
         return data
       }
       return data(code)
     }

     /** @type {State} */
     function atClosingBrace(code) {
       effects.exit(stringType);
       effects.enter(markerType);
       effects.consume(code);
       effects.exit(markerType);
       effects.exit(type);
       return ok
     }
   }

   /**
    * @typedef {import('micromark-util-types').Effects} Effects
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
    * @typedef {import('micromark-util-types').TokenType} TokenType
    */

   /**
    * @this {TokenizeContext}
    * @param {Effects} effects
    * @param {State} ok
    * @param {State} nok
    * @param {TokenType} type
    */
   function factoryName(effects, ok, nok, type) {
     const self = this;
     return start

     /** @type {State} */
     function start(code) {
       if (asciiAlpha(code)) {
         effects.enter(type);
         effects.consume(code);
         return name
       }
       return nok(code)
     }

     /** @type {State} */
     function name(code) {
       if (code === 45 || code === 95 || asciiAlphanumeric(code)) {
         effects.consume(code);
         return name
       }
       effects.exit(type);
       return self.previous === 45 || self.previous === 95 ? nok(code) : ok(code)
     }
   }

   /**
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').Token} Token
    * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    */


   /** @type {Construct} */
   const directiveContainer = {
     tokenize: tokenizeDirectiveContainer,
     concrete: true
   };
   const label$2 = {
     tokenize: tokenizeLabel$2,
     partial: true
   };
   const attributes$4 = {
     tokenize: tokenizeAttributes$2,
     partial: true
   };
   const nonLazyLine = {
     tokenize: tokenizeNonLazyLine,
     partial: true
   };

   /**
    * @this {TokenizeContext}
    * @type {Tokenizer}
    */
   function tokenizeDirectiveContainer(effects, ok, nok) {
     const self = this;
     const tail = self.events[self.events.length - 1];
     const initialSize =
       tail && tail[1].type === 'linePrefix'
         ? tail[2].sliceSerialize(tail[1], true).length
         : 0;
     let sizeOpen = 0;
     /** @type {Token} */
     let previous;
     return start

     /** @type {State} */
     function start(code) {
       effects.enter('directiveContainer');
       effects.enter('directiveContainerFence');
       effects.enter('directiveContainerSequence');
       return sequenceOpen(code)
     }

     /** @type {State} */
     function sequenceOpen(code) {
       if (code === 58) {
         effects.consume(code);
         sizeOpen++;
         return sequenceOpen
       }
       if (sizeOpen < 3) {
         return nok(code)
       }
       effects.exit('directiveContainerSequence');
       return factoryName.call(
         self,
         effects,
         afterName,
         nok,
         'directiveContainerName'
       )(code)
     }

     /** @type {State} */
     function afterName(code) {
       return code === 91
         ? effects.attempt(label$2, afterLabel, afterLabel)(code)
         : afterLabel(code)
     }

     /** @type {State} */
     function afterLabel(code) {
       return code === 123
         ? effects.attempt(attributes$4, afterAttributes, afterAttributes)(code)
         : afterAttributes(code)
     }

     /** @type {State} */
     function afterAttributes(code) {
       return factorySpace(effects, openAfter, 'whitespace')(code)
     }

     /** @type {State} */
     function openAfter(code) {
       effects.exit('directiveContainerFence');
       if (code === null) {
         return afterOpening(code)
       }
       if (markdownLineEnding(code)) {
         if (self.interrupt) {
           return ok(code)
         }
         return effects.attempt(nonLazyLine, contentStart, afterOpening)(code)
       }
       return nok(code)
     }

     /** @type {State} */
     function afterOpening(code) {
       effects.exit('directiveContainer');
       return ok(code)
     }

     /** @type {State} */
     function contentStart(code) {
       if (code === null) {
         effects.exit('directiveContainer');
         return ok(code)
       }
       effects.enter('directiveContainerContent');
       return lineStart(code)
     }

     /** @type {State} */
     function lineStart(code) {
       if (code === null) {
         return after(code)
       }
       return effects.attempt(
         {
           tokenize: tokenizeClosingFence,
           partial: true
         },
         after,
         initialSize
           ? factorySpace(effects, chunkStart, 'linePrefix', initialSize + 1)
           : chunkStart
       )(code)
     }

     /** @type {State} */
     function chunkStart(code) {
       if (code === null) {
         return after(code)
       }
       const token = effects.enter('chunkDocument', {
         contentType: 'document',
         previous
       });
       if (previous) previous.next = token;
       previous = token;
       return contentContinue(code)
     }

     /** @type {State} */
     function contentContinue(code) {
       if (code === null) {
         const t = effects.exit('chunkDocument');
         self.parser.lazy[t.start.line] = false;
         return after(code)
       }
       if (markdownLineEnding(code)) {
         return effects.check(nonLazyLine, nonLazyLineAfter, lineAfter)(code)
       }
       effects.consume(code);
       return contentContinue
     }

     /** @type {State} */
     function nonLazyLineAfter(code) {
       effects.consume(code);
       const t = effects.exit('chunkDocument');
       self.parser.lazy[t.start.line] = false;
       return lineStart
     }

     /** @type {State} */
     function lineAfter(code) {
       const t = effects.exit('chunkDocument');
       self.parser.lazy[t.start.line] = false;
       return after(code)
     }

     /** @type {State} */
     function after(code) {
       effects.exit('directiveContainerContent');
       effects.exit('directiveContainer');
       return ok(code)
     }

     /**
      * @this {TokenizeContext}
      * @type {Tokenizer}
      */
     function tokenizeClosingFence(effects, ok, nok) {
       let size = 0;
       return factorySpace(effects, closingPrefixAfter, 'linePrefix', 4)

       /** @type {State} */
       function closingPrefixAfter(code) {
         effects.enter('directiveContainerFence');
         effects.enter('directiveContainerSequence');
         return closingSequence(code)
       }

       /** @type {State} */
       function closingSequence(code) {
         if (code === 58) {
           effects.consume(code);
           size++;
           return closingSequence
         }
         if (size < sizeOpen) return nok(code)
         effects.exit('directiveContainerSequence');
         return factorySpace(effects, closingSequenceEnd, 'whitespace')(code)
       }

       /** @type {State} */
       function closingSequenceEnd(code) {
         if (code === null || markdownLineEnding(code)) {
           effects.exit('directiveContainerFence');
           return ok(code)
         }
         return nok(code)
       }
     }
   }

   /**
    * @this {TokenizeContext}
    * @type {Tokenizer}
    */
   function tokenizeLabel$2(effects, ok, nok) {
     // Always a `[`
     return factoryLabel(
       effects,
       ok,
       nok,
       'directiveContainerLabel',
       'directiveContainerLabelMarker',
       'directiveContainerLabelString',
       true
     )
   }

   /**
    * @this {TokenizeContext}
    * @type {Tokenizer}
    */
   function tokenizeAttributes$2(effects, ok, nok) {
     // Always a `{`
     return factoryAttributes(
       effects,
       ok,
       nok,
       'directiveContainerAttributes',
       'directiveContainerAttributesMarker',
       'directiveContainerAttribute',
       'directiveContainerAttributeId',
       'directiveContainerAttributeClass',
       'directiveContainerAttributeName',
       'directiveContainerAttributeInitializerMarker',
       'directiveContainerAttributeValueLiteral',
       'directiveContainerAttributeValue',
       'directiveContainerAttributeValueMarker',
       'directiveContainerAttributeValueData',
       true
     )
   }

   /**
    * @this {TokenizeContext}
    * @type {Tokenizer}
    */
   function tokenizeNonLazyLine(effects, ok, nok) {
     const self = this;
     return start

     /** @type {State} */
     function start(code) {
       effects.enter('lineEnding');
       effects.consume(code);
       effects.exit('lineEnding');
       return lineStart
     }

     /** @type {State} */
     function lineStart(code) {
       return self.parser.lazy[self.now().line] ? nok(code) : ok(code)
     }
   }

   /**
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    */


   /** @type {Construct} */
   const directiveLeaf = {
     tokenize: tokenizeDirectiveLeaf
   };
   const label$1 = {
     tokenize: tokenizeLabel$1,
     partial: true
   };
   const attributes$3 = {
     tokenize: tokenizeAttributes$1,
     partial: true
   };

   /**
    * @this {TokenizeContext}
    * @type {Tokenizer}
    */
   function tokenizeDirectiveLeaf(effects, ok, nok) {
     const self = this;
     return start

     /** @type {State} */
     function start(code) {
       effects.enter('directiveLeaf');
       effects.enter('directiveLeafSequence');
       effects.consume(code);
       return inStart
     }

     /** @type {State} */
     function inStart(code) {
       if (code === 58) {
         effects.consume(code);
         effects.exit('directiveLeafSequence');
         return factoryName.call(
           self,
           effects,
           afterName,
           nok,
           'directiveLeafName'
         )
       }
       return nok(code)
     }

     /** @type {State} */
     function afterName(code) {
       return code === 91
         ? effects.attempt(label$1, afterLabel, afterLabel)(code)
         : afterLabel(code)
     }

     /** @type {State} */
     function afterLabel(code) {
       return code === 123
         ? effects.attempt(attributes$3, afterAttributes, afterAttributes)(code)
         : afterAttributes(code)
     }

     /** @type {State} */
     function afterAttributes(code) {
       return factorySpace(effects, end, 'whitespace')(code)
     }

     /** @type {State} */
     function end(code) {
       if (code === null || markdownLineEnding(code)) {
         effects.exit('directiveLeaf');
         return ok(code)
       }
       return nok(code)
     }
   }

   /**
    * @this {TokenizeContext}
    * @type {Tokenizer}
    */
   function tokenizeLabel$1(effects, ok, nok) {
     // Always a `[`
     return factoryLabel(
       effects,
       ok,
       nok,
       'directiveLeafLabel',
       'directiveLeafLabelMarker',
       'directiveLeafLabelString',
       true
     )
   }

   /**
    * @this {TokenizeContext}
    * @type {Tokenizer}
    */
   function tokenizeAttributes$1(effects, ok, nok) {
     // Always a `{`
     return factoryAttributes(
       effects,
       ok,
       nok,
       'directiveLeafAttributes',
       'directiveLeafAttributesMarker',
       'directiveLeafAttribute',
       'directiveLeafAttributeId',
       'directiveLeafAttributeClass',
       'directiveLeafAttributeName',
       'directiveLeafAttributeInitializerMarker',
       'directiveLeafAttributeValueLiteral',
       'directiveLeafAttributeValue',
       'directiveLeafAttributeValueMarker',
       'directiveLeafAttributeValueData',
       true
     )
   }

   /**
    * @typedef {import('micromark-util-types').Construct} Construct
    * @typedef {import('micromark-util-types').Previous} Previous
    * @typedef {import('micromark-util-types').State} State
    * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
    * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
    */


   /** @type {Construct} */
   const directiveText = {
     tokenize: tokenizeDirectiveText,
     previous
   };
   const label = {
     tokenize: tokenizeLabel,
     partial: true
   };
   const attributes$2 = {
     tokenize: tokenizeAttributes,
     partial: true
   };

   /**
    * @this {TokenizeContext}
    * @type {Previous}
    */
   function previous(code) {
     // If there is a previous code, there will always be a tail.
     return (
       code !== 58 ||
       this.events[this.events.length - 1][1].type === 'characterEscape'
     )
   }

   /**
    * @this {TokenizeContext}
    * @type {Tokenizer}
    */
   function tokenizeDirectiveText(effects, ok, nok) {
     const self = this;
     return start

     /** @type {State} */
     function start(code) {
       effects.enter('directiveText');
       effects.enter('directiveTextMarker');
       effects.consume(code);
       effects.exit('directiveTextMarker');
       return factoryName.call(self, effects, afterName, nok, 'directiveTextName')
     }

     /** @type {State} */
     function afterName(code) {
       return code === 58
         ? nok(code)
         : code === 91
         ? effects.attempt(label, afterLabel, afterLabel)(code)
         : afterLabel(code)
     }

     /** @type {State} */
     function afterLabel(code) {
       return code === 123
         ? effects.attempt(attributes$2, afterAttributes, afterAttributes)(code)
         : afterAttributes(code)
     }

     /** @type {State} */
     function afterAttributes(code) {
       effects.exit('directiveText');
       return ok(code)
     }
   }

   /**
    * @this {TokenizeContext}
    * @type {Tokenizer}
    */
   function tokenizeLabel(effects, ok, nok) {
     // Always a `[`
     return factoryLabel(
       effects,
       ok,
       nok,
       'directiveTextLabel',
       'directiveTextLabelMarker',
       'directiveTextLabelString'
     )
   }

   /**
    * @this {TokenizeContext}
    * @type {Tokenizer}
    */
   function tokenizeAttributes(effects, ok, nok) {
     // Always a `{`
     return factoryAttributes(
       effects,
       ok,
       nok,
       'directiveTextAttributes',
       'directiveTextAttributesMarker',
       'directiveTextAttribute',
       'directiveTextAttributeId',
       'directiveTextAttributeClass',
       'directiveTextAttributeName',
       'directiveTextAttributeInitializerMarker',
       'directiveTextAttributeValueLiteral',
       'directiveTextAttributeValue',
       'directiveTextAttributeValueMarker',
       'directiveTextAttributeValueData'
     )
   }

   /**
    * @typedef {import('micromark-util-types').Extension} Extension
    */


   /**
    * Create an extension for `micromark` to enable directive syntax.
    *
    * @returns {Extension}
    *   Extension for `micromark` that can be passed in `extensions`, to
    *   enable directive syntax.
    */
   function directive() {
     return {
       text: {
         [58]: directiveText
       },
       flow: {
         [58]: [directiveContainer, directiveLeaf]
       }
     }
   }

   /**
    * Map of invalid numeric character references to their replacements, according to HTML.
    *
    * @type {Record<number, string>}
    */
   const characterReferenceInvalid = {
     0: '�',
     128: '€',
     130: '‚',
     131: 'ƒ',
     132: '„',
     133: '…',
     134: '†',
     135: '‡',
     136: 'ˆ',
     137: '‰',
     138: 'Š',
     139: '‹',
     140: 'Œ',
     142: 'Ž',
     145: '‘',
     146: '’',
     147: '“',
     148: '”',
     149: '•',
     150: '–',
     151: '—',
     152: '˜',
     153: '™',
     154: 'š',
     155: '›',
     156: 'œ',
     158: 'ž',
     159: 'Ÿ'
   };

   /**
    * Check if the given character code, or the character code at the first
    * character, is decimal.
    *
    * @param {string|number} character
    * @returns {boolean} Whether `character` is a decimal
    */
   function isDecimal(character) {
     const code =
       typeof character === 'string' ? character.charCodeAt(0) : character;

     return code >= 48 && code <= 57 /* 0-9 */
   }

   /**
    * Check if the given character code, or the character code at the first
    * character, is hexadecimal.
    *
    * @param {string|number} character
    * @returns {boolean} Whether `character` is hexadecimal
    */
   function isHexadecimal(character) {
     const code =
       typeof character === 'string' ? character.charCodeAt(0) : character;

     return (
       (code >= 97 /* a */ && code <= 102) /* z */ ||
       (code >= 65 /* A */ && code <= 70) /* Z */ ||
       (code >= 48 /* A */ && code <= 57) /* Z */
     )
   }

   /**
    * Check if the given character code, or the character code at the first
    * character, is alphabetical.
    *
    * @param {string|number} character
    * @returns {boolean} Whether `character` is alphabetical.
    */
   function isAlphabetical(character) {
     const code =
       typeof character === 'string' ? character.charCodeAt(0) : character;

     return (
       (code >= 97 && code <= 122) /* a-z */ ||
       (code >= 65 && code <= 90) /* A-Z */
     )
   }

   /**
    * Check if the given character code, or the character code at the first
    * character, is alphanumerical.
    *
    * @param {string|number} character
    * @returns {boolean} Whether `character` is alphanumerical.
    */
   function isAlphanumerical(character) {
     return isAlphabetical(character) || isDecimal(character)
   }

   /**
    * @typedef {import('unist').Point} Point
    * @typedef {import('unist').Position} Position
    */


   const fromCharCode = String.fromCharCode;

   // Warning messages.
   const messages = [
     '',
     /* 1: Non terminated (named) */
     'Named character references must be terminated by a semicolon',
     /* 2: Non terminated (numeric) */
     'Numeric character references must be terminated by a semicolon',
     /* 3: Empty (named) */
     'Named character references cannot be empty',
     /* 4: Empty (numeric) */
     'Numeric character references cannot be empty',
     /* 5: Unknown (named) */
     'Named character references must be known',
     /* 6: Disallowed (numeric) */
     'Numeric character references cannot be disallowed',
     /* 7: Prohibited (numeric) */
     'Numeric character references cannot be outside the permissible Unicode range'
   ];

   /**
    * Parse HTML character references.
    *
    * @param {string} value
    * @param {import('../index.js').Options} [options={}]
    */
   function parseEntities(value, options = {}) {
     const additional =
       typeof options.additional === 'string'
         ? options.additional.charCodeAt(0)
         : options.additional;
     /** @type {Array<string>} */
     const result = [];
     let index = 0;
     let lines = -1;
     let queue = '';
     /** @type {Point|undefined} */
     let point;
     /** @type {Array<number>|undefined} */
     let indent;

     if (options.position) {
       if ('start' in options.position || 'indent' in options.position) {
         // @ts-expect-error: points don’t have indent.
         indent = options.position.indent;
         // @ts-expect-error: points don’t have indent.
         point = options.position.start;
       } else {
         point = options.position;
       }
     }

     let line = (point ? point.line : 0) || 1;
     let column = (point ? point.column : 0) || 1;

     // Cache the current point.
     let previous = now();
     /** @type {number|undefined} */
     let character;

     // Ensure the algorithm walks over the first character (inclusive).
     index--;

     while (++index <= value.length) {
       // If the previous character was a newline.
       if (character === 10 /* `\n` */) {
         column = (indent ? indent[lines] : 0) || 1;
       }

       character = value.charCodeAt(index);

       if (character === 38 /* `&` */) {
         const following = value.charCodeAt(index + 1);

         // The behavior depends on the identity of the next character.
         if (
           following === 9 /* `\t` */ ||
           following === 10 /* `\n` */ ||
           following === 12 /* `\f` */ ||
           following === 32 /* ` ` */ ||
           following === 38 /* `&` */ ||
           following === 60 /* `<` */ ||
           Number.isNaN(following) ||
           (additional && following === additional)
         ) {
           // Not a character reference.
           // No characters are consumed, and nothing is returned.
           // This is not an error, either.
           queue += fromCharCode(character);
           column++;
           continue
         }

         const start = index + 1;
         let begin = start;
         let end = start;
         /** @type {string} */
         let type;

         if (following === 35 /* `#` */) {
           // Numerical reference.
           end = ++begin;

           // The behavior further depends on the next character.
           const following = value.charCodeAt(end);

           if (following === 88 /* `X` */ || following === 120 /* `x` */) {
             // ASCII hexadecimal digits.
             type = 'hexadecimal';
             end = ++begin;
           } else {
             // ASCII decimal digits.
             type = 'decimal';
           }
         } else {
           // Named reference.
           type = 'named';
         }

         let characterReferenceCharacters = '';
         let characterReference = '';
         let characters = '';
         // Each type of character reference accepts different characters.
         // This test is used to detect whether a reference has ended (as the semicolon
         // is not strictly needed).
         const test =
           type === 'named'
             ? isAlphanumerical
             : type === 'decimal'
             ? isDecimal
             : isHexadecimal;

         end--;

         while (++end <= value.length) {
           const following = value.charCodeAt(end);

           if (!test(following)) {
             break
           }

           characters += fromCharCode(following);

           // Check if we can match a legacy named reference.
           // If so, we cache that as the last viable named reference.
           // This ensures we do not need to walk backwards later.
           if (type === 'named' && characterEntitiesLegacy.includes(characters)) {
             characterReferenceCharacters = characters;
             // @ts-expect-error: always able to decode.
             characterReference = decodeNamedCharacterReference(characters);
           }
         }

         let terminated = value.charCodeAt(end) === 59; /* `;` */

         if (terminated) {
           end++;

           const namedReference =
             type === 'named' ? decodeNamedCharacterReference(characters) : false;

           if (namedReference) {
             characterReferenceCharacters = characters;
             characterReference = namedReference;
           }
         }

         let diff = 1 + end - start;
         let reference = '';

         if (!terminated && options.nonTerminated === false) ; else if (!characters) {
           // An empty (possible) reference is valid, unless it’s numeric (thus an
           // ampersand followed by an octothorp).
           if (type !== 'named') {
             warning(4 /* Empty (numeric) */, diff);
           }
         } else if (type === 'named') {
           // An ampersand followed by anything unknown, and not terminated, is
           // invalid.
           if (terminated && !characterReference) {
             warning(5 /* Unknown (named) */, 1);
           } else {
             // If there’s something after an named reference which is not known,
             // cap the reference.
             if (characterReferenceCharacters !== characters) {
               end = begin + characterReferenceCharacters.length;
               diff = 1 + end - begin;
               terminated = false;
             }

             // If the reference is not terminated, warn.
             if (!terminated) {
               const reason = characterReferenceCharacters
                 ? 1 /* Non terminated (named) */
                 : 3; /* Empty (named) */

               if (options.attribute) {
                 const following = value.charCodeAt(end);

                 if (following === 61 /* `=` */) {
                   warning(reason, diff);
                   characterReference = '';
                 } else if (isAlphanumerical(following)) {
                   characterReference = '';
                 } else {
                   warning(reason, diff);
                 }
               } else {
                 warning(reason, diff);
               }
             }
           }

           reference = characterReference;
         } else {
           if (!terminated) {
             // All nonterminated numeric references are not rendered, and emit a
             // warning.
             warning(2 /* Non terminated (numeric) */, diff);
           }

           // When terminated and numerical, parse as either hexadecimal or
           // decimal.
           let referenceCode = Number.parseInt(
             characters,
             type === 'hexadecimal' ? 16 : 10
           );

           // Emit a warning when the parsed number is prohibited, and replace with
           // replacement character.
           if (prohibited(referenceCode)) {
             warning(7 /* Prohibited (numeric) */, diff);
             reference = fromCharCode(65533 /* `�` */);
           } else if (referenceCode in characterReferenceInvalid) {
             // Emit a warning when the parsed number is disallowed, and replace by
             // an alternative.
             warning(6 /* Disallowed (numeric) */, diff);
             reference = characterReferenceInvalid[referenceCode];
           } else {
             // Parse the number.
             let output = '';

             // Emit a warning when the parsed number should not be used.
             if (disallowed(referenceCode)) {
               warning(6 /* Disallowed (numeric) */, diff);
             }

             // Serialize the number.
             if (referenceCode > 0xffff) {
               referenceCode -= 0x10000;
               output += fromCharCode((referenceCode >>> (10 & 0x3ff)) | 0xd800);
               referenceCode = 0xdc00 | (referenceCode & 0x3ff);
             }

             reference = output + fromCharCode(referenceCode);
           }
         }

         // Found it!
         // First eat the queued characters as normal text, then eat a reference.
         if (reference) {
           flush();

           previous = now();
           index = end - 1;
           column += end - start + 1;
           result.push(reference);
           const next = now();
           next.offset++;

           if (options.reference) {
             options.reference.call(
               options.referenceContext,
               reference,
               {start: previous, end: next},
               value.slice(start - 1, end)
             );
           }

           previous = next;
         } else {
           // If we could not find a reference, queue the checked characters (as
           // normal characters), and move the pointer to their end.
           // This is possible because we can be certain neither newlines nor
           // ampersands are included.
           characters = value.slice(start - 1, end);
           queue += characters;
           column += characters.length;
           index = end - 1;
         }
       } else {
         // Handle anything other than an ampersand, including newlines and EOF.
         if (character === 10 /* `\n` */) {
           line++;
           lines++;
           column = 0;
         }

         if (Number.isNaN(character)) {
           flush();
         } else {
           queue += fromCharCode(character);
           column++;
         }
       }
     }

     // Return the reduced nodes.
     return result.join('')

     // Get current position.
     function now() {
       return {
         line,
         column,
         offset: index + ((point ? point.offset : 0) || 0)
       }
     }

     /**
      * Handle the warning.
      *
      * @param {1|2|3|4|5|6|7} code
      * @param {number} offset
      */
     function warning(code, offset) {
       /** @type {ReturnType<now>} */
       let position;

       if (options.warning) {
         position = now();
         position.column += offset;
         position.offset += offset;

         options.warning.call(
           options.warningContext,
           messages[code],
           position,
           code
         );
       }
     }

     /**
      * Flush `queue` (normal text).
      * Macro invoked before each reference and at the end of `value`.
      * Does nothing when `queue` is empty.
      */
     function flush() {
       if (queue) {
         result.push(queue);

         if (options.text) {
           options.text.call(options.textContext, queue, {
             start: previous,
             end: now()
           });
         }

         queue = '';
       }
     }
   }

   /**
    * Check if `character` is outside the permissible unicode range.
    *
    * @param {number} code
    * @returns {boolean}
    */
   function prohibited(code) {
     return (code >= 0xd800 && code <= 0xdfff) || code > 0x10ffff
   }

   /**
    * Check if `character` is disallowed.
    *
    * @param {number} code
    * @returns {boolean}
    */
   function disallowed(code) {
     return (
       (code >= 0x0001 && code <= 0x0008) ||
       code === 0x000b ||
       (code >= 0x000d && code <= 0x001f) ||
       (code >= 0x007f && code <= 0x009f) ||
       (code >= 0xfdd0 && code <= 0xfdef) ||
       (code & 0xffff) === 0xffff ||
       (code & 0xffff) === 0xfffe
     )
   }

   /**
    * @typedef {import('mdast').BlockContent} BlockContent
    * @typedef {import('mdast').DefinitionContent} DefinitionContent
    * @typedef {import('mdast').Paragraph} Paragraph
    *
    * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext
    * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension
    * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle
    * @typedef {import('mdast-util-from-markdown').Token} Token
    *
    * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName
    * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle
    * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension
    * @typedef {import('mdast-util-to-markdown').State} State
    *
    * @typedef {import('../index.js').LeafDirective} LeafDirective
    * @typedef {import('../index.js').TextDirective} TextDirective
    * @typedef {import('../index.js').Directive} Directive
    */


   // To do: next major: replace `containerFlow`, `containerPhrasing`, `track`
   // with `state` methods.
   // To do: next major: expose functions.

   const own = {}.hasOwnProperty;

   const shortcut = /^[^\t\n\r "#'.<=>`}]+$/;

   handleDirective.peek = peekDirective;

   /**
    * Extension for `mdast-util-from-markdown` to enable directives.
    *
    * @type {FromMarkdownExtension}
    */
   const directiveFromMarkdown = {
     canContainEols: ['textDirective'],
     enter: {
       directiveContainer: enterContainer,
       directiveContainerAttributes: enterAttributes,
       directiveContainerLabel: enterContainerLabel,

       directiveLeaf: enterLeaf,
       directiveLeafAttributes: enterAttributes,

       directiveText: enterText,
       directiveTextAttributes: enterAttributes
     },
     exit: {
       directiveContainer: exit,
       directiveContainerAttributeClassValue: exitAttributeClassValue,
       directiveContainerAttributeIdValue: exitAttributeIdValue,
       directiveContainerAttributeName: exitAttributeName,
       directiveContainerAttributeValue: exitAttributeValue,
       directiveContainerAttributes: exitAttributes,
       directiveContainerLabel: exitContainerLabel,
       directiveContainerName: exitName,

       directiveLeaf: exit,
       directiveLeafAttributeClassValue: exitAttributeClassValue,
       directiveLeafAttributeIdValue: exitAttributeIdValue,
       directiveLeafAttributeName: exitAttributeName,
       directiveLeafAttributeValue: exitAttributeValue,
       directiveLeafAttributes: exitAttributes,
       directiveLeafName: exitName,

       directiveText: exit,
       directiveTextAttributeClassValue: exitAttributeClassValue,
       directiveTextAttributeIdValue: exitAttributeIdValue,
       directiveTextAttributeName: exitAttributeName,
       directiveTextAttributeValue: exitAttributeValue,
       directiveTextAttributes: exitAttributes,
       directiveTextName: exitName
     }
   };

   /**
    * Extension for `mdast-util-to-markdown` to enable directives.
    *
    * @type {ToMarkdownExtension}
    */
   const directiveToMarkdown = {
     unsafe: [
       {
         character: '\r',
         inConstruct: ['leafDirectiveLabel', 'containerDirectiveLabel']
       },
       {
         character: '\n',
         inConstruct: ['leafDirectiveLabel', 'containerDirectiveLabel']
       },
       {
         before: '[^:]',
         character: ':',
         after: '[A-Za-z]',
         inConstruct: ['phrasing']
       },
       {atBreak: true, character: ':', after: ':'}
     ],
     handlers: {
       containerDirective: handleDirective,
       leafDirective: handleDirective,
       textDirective: handleDirective
     }
   };

   /**
    * @this {CompileContext}
    * @type {FromMarkdownHandle}
    */
   function enterContainer(token) {
     enter.call(this, 'containerDirective', token);
   }

   /**
    * @this {CompileContext}
    * @type {FromMarkdownHandle}
    */
   function enterLeaf(token) {
     enter.call(this, 'leafDirective', token);
   }

   /**
    * @this {CompileContext}
    * @type {FromMarkdownHandle}
    */
   function enterText(token) {
     enter.call(this, 'textDirective', token);
   }

   /**
    * @this {CompileContext}
    * @param {Directive['type']} type
    * @param {Token} token
    */
   function enter(type, token) {
     this.enter({type, name: '', attributes: {}, children: []}, token);
   }

   /**
    * @this {CompileContext}
    * @param {Token} token
    */
   function exitName(token) {
     const node = /** @type {Directive} */ (this.stack[this.stack.length - 1]);
     node.name = this.sliceSerialize(token);
   }

   /**
    * @this {CompileContext}
    * @type {FromMarkdownHandle}
    */
   function enterContainerLabel(token) {
     this.enter(
       {type: 'paragraph', data: {directiveLabel: true}, children: []},
       token
     );
   }

   /**
    * @this {CompileContext}
    * @type {FromMarkdownHandle}
    */
   function exitContainerLabel(token) {
     this.exit(token);
   }

   /**
    * @this {CompileContext}
    * @type {FromMarkdownHandle}
    */
   function enterAttributes() {
     this.setData('directiveAttributes', []);
     this.buffer(); // Capture EOLs
   }

   /**
    * @this {CompileContext}
    * @type {FromMarkdownHandle}
    */
   function exitAttributeIdValue(token) {
     const list = /** @type {Array<[string, string]>} */ (
       this.getData('directiveAttributes')
     );
     list.push([
       'id',
       parseEntities(this.sliceSerialize(token), {
         attribute: true
       })
     ]);
   }

   /**
    * @this {CompileContext}
    * @type {FromMarkdownHandle}
    */
   function exitAttributeClassValue(token) {
     const list = /** @type {Array<[string, string]>} */ (
       this.getData('directiveAttributes')
     );
     list.push([
       'class',
       parseEntities(this.sliceSerialize(token), {
         attribute: true
       })
     ]);
   }

   /**
    * @this {CompileContext}
    * @type {FromMarkdownHandle}
    */
   function exitAttributeValue(token) {
     const list = /** @type {Array<[string, string]>} */ (
       this.getData('directiveAttributes')
     );
     list[list.length - 1][1] = parseEntities(this.sliceSerialize(token), {
       attribute: true
     });
   }

   /**
    * @this {CompileContext}
    * @type {FromMarkdownHandle}
    */
   function exitAttributeName(token) {
     const list = /** @type {Array<[string, string]>} */ (
       this.getData('directiveAttributes')
     );

     // Attribute names in CommonMark are significantly limited, so character
     // references can’t exist.
     list.push([this.sliceSerialize(token), '']);
   }

   /**
    * @this {CompileContext}
    * @type {FromMarkdownHandle}
    */
   function exitAttributes() {
     const list = /** @type {Array<[string, string]>} */ (
       this.getData('directiveAttributes')
     );
     /** @type {Record<string, string>} */
     const cleaned = {};
     let index = -1;

     while (++index < list.length) {
       const attribute = list[index];

       if (attribute[0] === 'class' && cleaned.class) {
         cleaned.class += ' ' + attribute[1];
       } else {
         cleaned[attribute[0]] = attribute[1];
       }
     }

     this.setData('directiveAttributes');
     this.resume(); // Drop EOLs
     const node = /** @type {Directive} */ (this.stack[this.stack.length - 1]);
     node.attributes = cleaned;
   }

   /**
    * @this {CompileContext}
    * @type {FromMarkdownHandle}
    */
   function exit(token) {
     this.exit(token);
   }

   /**
    * @type {ToMarkdownHandle}
    * @param {Directive} node
    */
   function handleDirective(node, _, state, safeOptions) {
     const tracker = track(safeOptions);
     const sequence = fence(node);
     const exit = state.enter(node.type);
     let value = tracker.move(sequence + (node.name || ''));
     /** @type {Paragraph | LeafDirective | TextDirective | undefined} */
     let label;

     if (node.type === 'containerDirective') {
       const head = (node.children || [])[0];
       label = inlineDirectiveLabel(head) ? head : undefined;
     } else {
       label = node;
     }

     if (label && label.children && label.children.length > 0) {
       const exit = state.enter('label');
       /** @type {ConstructName} */
       const labelType = `${node.type}Label`;
       const subexit = state.enter(labelType);
       value += tracker.move('[');
       value += tracker.move(
         containerPhrasing(label, state, {
           ...tracker.current(),
           before: value,
           after: ']'
         })
       );
       value += tracker.move(']');
       subexit();
       exit();
     }

     value += tracker.move(attributes$1(node, state));

     if (node.type === 'containerDirective') {
       const head = (node.children || [])[0];
       let shallow = node;

       if (inlineDirectiveLabel(head)) {
         shallow = Object.assign({}, node, {children: node.children.slice(1)});
       }

       if (shallow && shallow.children && shallow.children.length > 0) {
         value += tracker.move('\n');
         value += tracker.move(containerFlow(shallow, state, tracker.current()));
       }

       value += tracker.move('\n' + sequence);
     }

     exit();
     return value
   }

   /** @type {ToMarkdownHandle} */
   function peekDirective() {
     return ':'
   }

   /**
    * @param {Directive} node
    * @param {State} state
    * @returns {string}
    */
   function attributes$1(node, state) {
     const quote = checkQuote(state);
     const subset = node.type === 'textDirective' ? [quote] : [quote, '\n', '\r'];
     const attrs = node.attributes || {};
     /** @type {Array<string>} */
     const values = [];
     /** @type {string | undefined} */
     let classesFull;
     /** @type {string | undefined} */
     let classes;
     /** @type {string | undefined} */
     let id;
     /** @type {string} */
     let key;

     for (key in attrs) {
       if (
         own.call(attrs, key) &&
         attrs[key] !== undefined &&
         attrs[key] !== null
       ) {
         const value = String(attrs[key]);

         if (key === 'id') {
           id = shortcut.test(value) ? '#' + value : quoted('id', value);
         } else if (key === 'class') {
           const list = value.split(/[\t\n\r ]+/g);
           /** @type {Array<string>} */
           const classesFullList = [];
           /** @type {Array<string>} */
           const classesList = [];
           let index = -1;

           while (++index < list.length) {
   (shortcut.test(list[index]) ? classesList : classesFullList).push(
               list[index]
             );
           }

           classesFull =
             classesFullList.length > 0
               ? quoted('class', classesFullList.join(' '))
               : '';
           classes = classesList.length > 0 ? '.' + classesList.join('.') : '';
         } else {
           values.push(quoted(key, value));
         }
       }
     }

     if (classesFull) {
       values.unshift(classesFull);
     }

     if (classes) {
       values.unshift(classes);
     }

     if (id) {
       values.unshift(id);
     }

     return values.length > 0 ? '{' + values.join(' ') + '}' : ''

     /**
      * @param {string} key
      * @param {string} value
      * @returns {string}
      */
     function quoted(key, value) {
       return (
         key +
         (value
           ? '=' + quote + stringifyEntitiesLight(value, {subset}) + quote
           : '')
       )
     }
   }

   /**
    * @param {BlockContent | DefinitionContent} node
    * @returns {node is Paragraph & {data: {directiveLabel: boolean}}}
    */
   function inlineDirectiveLabel(node) {
     return Boolean(
       node && node.type === 'paragraph' && node.data && node.data.directiveLabel
     )
   }

   /**
    * @param {Directive} node
    * @returns {string}
    */
   function fence(node) {
     let size = 0;

     if (node.type === 'containerDirective') {
       visitParents(node, function (node, parents) {
         if (node.type === 'containerDirective') {
           let index = parents.length;
           let nesting = 0;

           while (index--) {
             if (parents[index].type === 'containerDirective') {
               nesting++;
             }
           }

           if (nesting > size) size = nesting;
         }
       });
       size += 3;
     } else if (node.type === 'leafDirective') {
       size = 2;
     } else {
       size = 1;
     }

     return ':'.repeat(size)
   }

   /**
    * Convert inline media (audio/video) hast node to mdast
    */
   function hastToMdast(state, node) {
       var _a, _b;
       if (!((_a = node === null || node === void 0 ? void 0 : node.properties) === null || _a === void 0 ? void 0 : _a.className.includes('inline-media')))
           return media(state, node);
       const props = {};
       if ('auto_front' in node.properties && node.properties.auto_front !== 'false')
           props['auto_front'] = '';
       if ('auto_back' in node.properties && node.properties.auto_back !== 'false')
           props['auto_back'] = '';
       if ((_b = node.properties) === null || _b === void 0 ? void 0 : _b.loop)
           props['loop'] = '';
       if ('mute' in node.properties && node.properties.mute !== 'false')
           props['mute'] = '';
       if (node.tagName === 'video') {
           if ('height' in node.properties && parseInt(node.properties.height) > -1)
               props['height'] = node.properties.height;
           if ('width' in node.properties && parseInt(node.properties.width) > -1)
               props['width'] = node.properties.width;
       }
       const result = {
           type: 'textDirective',
           name: node.tagName,
           attributes: props,
           children: [{ type: 'text', value: node.properties.src }]
       };
       state.patch(node, result);
       return result;
   }
   /**
    * Convert inline media (audio/video) mdast node to hast
    */
   function mdastToHast(state, node) {
       if (!(node.name === 'audio' || node.name === 'video'))
           return state.all(node);
       const parts = node.children[0].value.match(/^_(.*)\.([^.]+)$/);
       const properties = {
           id: parts[1],
           src: parts[0],
           className: 'inline-media',
           controls: 'true',
           ...node.attributes,
           oncanplay: "if(this.getRootNode().querySelector('anki-editable') === null && this.offsetParent !== null && ((this.hasAttribute('auto_front') && !document.body.classList.contains('back')) || (this.hasAttribute('auto_back') && document.body.classList.contains('back')))) {this.play();}",
           oncontextmenu: "pycmd(this.id); return true;"
       };
       if ('loop' in properties)
           properties.loop = 'true';
       const result = {
           type: 'element',
           tagName: node.name,
           properties: properties,
           children: []
       };
       state.patch(node, result);
       return result;
   }
   /**
    * hast handler for converting inline media (audio/video) directives
    * to mdast node, spread in toMdast handlers
    */
   const inlineMediaHastHandler = {
       audio: hastToMdast,
       video: hastToMdast
   };
   /**
    * mdast handler for converting inline media (audio/video) directives
    * to hast node, spread in toHast handlers
    */
   const inlineMediaMdastHandler = {
       textDirective: mdastToHast
   };

   /**
    * `toMarkdown()` extension to output double space line endings for hard breaks
    * Copied from mdast-util-to-markdown/lib/handlers/break.js
    * Only change is return `  \n` instead of `\\\n`
    */
   /**
    * @typedef {import('mdast').Break} Break
    * @typedef {import('../types.js').Parent} Parent
    * @typedef {import('../types.js').State} State
    * @typedef {import('../types.js').Info} Info
    */
   /**
    * @param {Break} _
    * @param {Parent | undefined} _1
    * @param {State} state
    * @param {Info} info
    * @returns {string}
    */
   function _breakSpaces(_, _1, state, info) {
       let index = -1;
       while (++index < state.unsafe.length) {
           // If we can’t put eols in this construct (setext headings, tables), use a
           // space instead.
           if (state.unsafe[index].character === '\n' &&
               patternInScope(state.stack, state.unsafe[index])) {
               return /[ \t]/.test(info.before) ? '' : ' ';
           }
       }
       return '  \n';
   }
   const breakSpaces = {
       handlers: {
           break: _breakSpaces
       }
   };

   function set_spread(state, list) {
       var _a, _b;
       const mdast = list$4(state, list);
       mdast.spread || (mdast.spread = ((_b = (_a = list.properties) === null || _a === void 0 ? void 0 : _a.className) === null || _b === void 0 ? void 0 : _b.includes('markdown-loose')) || false);
       return mdast;
   }
   // Add correct class
   function add_class(state, list) {
       var _a;
       const spread = list.spread || ((_a = list.children) === null || _a === void 0 ? void 0 : _a.some(li => li.spread));
       const hast = list$1(state, list);
       hast.properties.className = spread ? 'markdown-loose' : 'markdown-tight';
       return hast;
   }
   const hastToMdastListType = {
       ul: set_spread,
       ol: set_spread
   };
   const mdastToHastListType = {
       list: add_class
   };

   /**
    * Copy of https://github.com/syntax-tree/hast-util-to-mdast/blob/08be0e15246a59a426be515111012603722c2af1/lib/handlers/li.js correcting `spreadout()`
    * behaviour to correspond to commonmark behaviour with regards to spread calculation
    * of lists with nested lists (original does not respect the need for a blank line
    * between blocks to generate a loose list)
    * This extension should be removed if hast-util-to-mdast is corrected
    * The solution instead converts the bool seenSpread to a counter, requiring 2 to
    * return `true` for the function
    */
   /**
    * @typedef {import('hast').Element} Element
    * @typedef {import('mdast').ListItem} ListItem
    * @typedef {import('hast-util-to-mdast/lib/state.js').State} State // CHANGE
    */
   /**
    * @param {State} state
    *   State.
    * @param {Element} node
    *   hast element to transform.
    * @returns {ListItem}
    *   mdast node.
    */
   function li(state, node) {
       const head = node.children[0];
       /** @type {boolean | null} */
       let checked = null;
       /** @type {Element | undefined} */
       let clone;
       // Check if this node starts with a checkbox.
       if (head && head.type === 'element' && head.tagName === 'p') {
           const checkbox = head.children[0];
           if (checkbox &&
               checkbox.type === 'element' &&
               checkbox.tagName === 'input' &&
               checkbox.properties &&
               (checkbox.properties.type === 'checkbox' ||
                   checkbox.properties.type === 'radio')) {
               checked = Boolean(checkbox.properties.checked);
               clone = {
                   ...node,
                   children: [
                       { ...head, children: head.children.slice(1) },
                       ...node.children.slice(1)
                   ]
               };
           }
       }
       if (!clone)
           clone = node;
       const spread = spreadout(clone);
       const children = state.toFlow(state.all(clone));
       /** @type {ListItem} */
       const result = { type: 'listItem', spread, checked, children };
       state.patch(clone, result);
       return result;
   }
   /**
    * Check if an element should spread out.
    *
    * The reason to spread out a markdown list item is primarily whether writing
    * the equivalent in markdown, would yield a spread out item.
    *
    * A spread out item results in `<p>` and `</p>` tags.
    * Otherwise, the phrasing would be output directly.
    * We can check for that: if there’s a `<p>` element, spread it out.
    *
    * But what if there are no paragraphs?
    * In that case, we can also assume that if two “block” things were written in
    * an item, that it is spread out, because blocks are typically joined by blank
    * lines, which also means a spread item.
    *
    * Lastly, because in HTML things can be wrapped in a `<div>` or similar, we
    * delve into non-phrasing elements here to figure out if they themselves
    * contain paragraphs or 2 or more flow non-phrasing elements.
    *
    * @param {Element} node
    * @returns {boolean}
    */
   function spreadout(node) {
       let index = -1;
       let seenFlow = 0; // CHANGE
       while (++index < node.children.length) {
           const child = node.children[index];
           if (child.type === 'element') {
               if (phrasing$2(child)) {
                   seenFlow = 0; // CHANGE
                   continue;
               }
               if (child.tagName === 'p' || seenFlow > 1 || spreadout(child)) { // CHANGE
                   return true;
               }
               seenFlow++; // CHANGE
           }
       }
       return false;
   }

   /**
    * NOTES
    *
    * CYCLE
    * md → mdast: mdast-util-from-markdown
    * mdast → hast: mdast-util-to-hast
    * mutate_hast.from_markdown
    * hast → html: hast-util-to-html
    * html → hast: hast-util-from-html
    * mutate_hast.from_html
    * hast → mdast: mdast-util-from-hast
    * mdast → md: mdast-util-to-markdown
    *
    * HAST MANIPULATIONS
    * Direct hast manipulations rather than extensions - mutate_hast.from_html/from_markdown
    * Run on hast before converting to mdast or HTML.
    * - Remove `\n` between html tags
    * - Replace `<br><br>` with `<p>` from HTML and vice versa
    * - Replace `<i>/<b>` with `<em>/<strong>` from HTML and vice versa
    * - Correct Anki's behaviour of inserting nested lists _outside_ `<li>` (from_html only)
    * - Correct headless table output (from_markdown only)
    * - Replace `<br>` in tables with `symbol` and vice versa (depending on config)
    *
    * EXTENSIONS
    * gfmStrikethrough
    * gfmTable
    * attention: super/subscript, underline (based on gfmStrikethrough)
    * xTable: headless & GFM tables (based on gfmTable)
    * defintionList
    * inlineMedia - support TRIAEIOU inline media, depends on directive extension
    * breakSpaces - render hardbreak as `  \n` instead of `\\\n`
    * listType - add markdown-tight/loose class to HTML and respect in reverse
    * tmp_li_bugfix - fix li spread calculation (minor fix in hast-util-to-mdastli.js)
    *
    * MD → MDAST
    * breakSpaces: none
    * tmp_li_bugfix: none
    * mdast-util-from-markdown.fromMarkdown.options.extensions - syntax:
    *   gfmStrikethrough: micromark-extension-gfm-strikethrough.gfmStrikethrough()
    *   gfmTable: micromark-extension-gfm-table.gfmTable
    *   attention: micromark-extension-gfm-strikethrough#attention.attention()
    *   xtable: micromark-extension-gfm-table#xtable.xtable
    *   defList: micromark-extension-definition-list.defList
    *   inlineMedia: micromark-extension-directive.directive()
    *
    * mdast-util-from-markdown.fromMarkdown.options.mdastExtensions - mdast insertion:
    *   gfmStrikethrough: mdast-util-gfm-strikethrough.gfmStrikethroughFromMarkdown
    *   gfmTable: mdast-util-gfm-table#xtable.xtableFromMarkdown ← both xtable & gfm
    *   attention: mdast-util-gfm-strikethrough#attention.attentionFromMarkdown()
    *   xtable: mdast-util-gfm-table#xtable.xtableFromMarkdown
    *   defList: mdast-util-definition-list#phrasing-description-handler.defListFromMarkdown
    *   inlineMedia: mdast-util-directive.directiveFromMarkdown
    *
    * MDAST → HAST
    * gfmStrikethrough: none (hardcoded)
    * gfmTable: none (hardcoded)
    * attention: none (solved with tag names in mdast)
    * xtable: none
    * breakSpaces: none
    * tmp_li_bugfix: none
    * mdast-util-to-hast.toHast.options.handlers - hast node insertion:
    *   defList: mdast-util-defintion-list#phrasing-description-handler.defListHastHandlers
    *   inlineMedia: ./extensions/inline-media.inlineMediaMdastHandler
    *   listType: ./extensions/list-type.mdastToHastListType
    *
    * AFTER MDAST → HAST
    * mutate_hast.from_markdown
    *
    * HAST → HTML
    * gfmStrikethrough: none
    * gfmTable: none
    * attention: none
    * xtable: none
    * defList: none
    * breakSpaces: none
    * tmp_li_bugfix: none
    *
    * HTML → HAST
    * gfmStrikethrough: none
    * gfmTable: none
    * attention: none
    * xtable: none
    * defList: none
    * breakSpaces: none
    * tmp_li_bugfix: none
    *
    * AFTER HTML → HAST
    * mutate_hast.from_html
    *
    * HAST → MDAST
    * gfmStrikethrough: none (hardcoded)
    * gfmTable: none (hardcoded)
    * xtable: none
    * breakSpaces: none
    * hast-util-to-mdast.toMdast.options.handlers - mdast node insertion:
    *   attention: mdast-util-gfm-strikethrough#attention.attentionFromHast
    *   defList: hast-util-definition-list#phrasing-description-handler.definitionListHastToMdast
    *   inlineMedia: ./extensions/inline-media.inlineMediaHastHandler
    *   listType: ./extensions/list-type.hastToMdastListType
    *   tmp_li_bugfix: ./extensions/tmp-hast-to-mdast-li-bugfix.li
    *
    * MDAST → MD
    * tmp_li_bugfix: none
    * mdast-util-to-markdown.toMarkdown.options.extensions - render mdast nodes:
    *   gfmStrikethrough: mdast-util-gfm-strikethrough.gfmStrikethroughToMarkdown
    *   gfmTable: mdast-util-gfm-table#xtable.xtableToMarkdown ← both xtable & gfm
    *   attention: mdast-util-gfm-strikethrough#attention.attentionToMarkdown()
    *   xtable: mdast-util-gfm-table#xtable.xtableToMarkdown()
    *   defList: mdast-util-defintion-list#phrasing-description-handler.defListToMarkdown
    *   inlineMedia: mdast-util-directive.directiveToMarkdown
    *   breakSpaces: ./extensions/break-spaces.breakSpaces
    *
    */
   const TABLE = 'Tables';
   const NEWLINE = 'Table newline';
   const DEF_LIST = 'Definition lists';
   const INLINE_MEDIA = 'Inline media';
   const MARKDOWN = 'Markdown format';
   const EXTENSIONS = 'Markdown extensions';
   const UNDERLINE = "Underline";
   const SUPERSCRIPT = "Superscript";
   const SUBSCRIPT = "Subscript";
   const STRIKETHROUGH = "Strikethrough";
   class Converter {
       /////////////////////////////////////////////////////////////////////////////
       /** Initialize configuration for use with mardown_to_html/html_to_markdown */
       constructor(options) {
           /////////////////////////////////////////////////////////////////////////////
           /** Properties */
           this.options = { [NEWLINE]: "" };
           this.mdast_to_markdown = { options: {}, extensions: [] };
           this.markdown_to_mdast = { extensions: [], mdastExtensions: [] };
           this.mdast_to_hast = { handlers: {}, allowDangerousHtml: true };
           this.html_to_hast = { fragment: true };
           this.hast_to_html = { allowDangerousHtml: true, allowDangerousCharacters: true, characterReferences: { useNamedReferences: true } };
           this.hast_to_mdast = { handlers: {} };
           /////////////////////////////////////////////////////////////////////////////
           /** Parse out current cloze ordinal from string, 0 if none (i.e. increment one for next) */
           this.CLOZE_ORD_RE = new RegExp(String.raw `{{c(\d+)::`, 'g');
           const mdast_hast_hdl = [mdastToHastListType];
           const hast_mdast_hdl = [hastToMdastListType, li];
           if (options[MARKDOWN]['hardBreak'] === "spaces")
               this.mdast_to_markdown.extensions.push(breakSpaces);
           // Markdown extensions
           if (options[EXTENSIONS][DEF_LIST]) {
               hast_mdast_hdl.push(defListHastToMdast);
               mdast_hast_hdl.push(defListHastHandlers);
               this.mdast_to_markdown.extensions.push(defListToMarkdown);
               this.markdown_to_mdast.extensions.push(defList);
               this.markdown_to_mdast.mdastExtensions.push(defListFromMarkdown);
           }
           if (options[EXTENSIONS][INLINE_MEDIA]) {
               hast_mdast_hdl.push(inlineMediaHastHandler);
               mdast_hast_hdl.push(inlineMediaMdastHandler);
               this.mdast_to_markdown.extensions.push(directiveToMarkdown);
               this.markdown_to_mdast.extensions.push(directive());
               this.markdown_to_mdast.mdastExtensions.push(directiveFromMarkdown);
           }
           // Tables
           this.markdown_to_mdast.extensions.push(options[EXTENSIONS][TABLE] === 'extended'
               ? xtable
               : gfmTable);
           // Always push the xtable as it contains other fixes
           this.markdown_to_mdast.mdastExtensions.push(xtableFromMarkdown);
           this.mdast_to_markdown.extensions.push(xtableToMarkdown());
           // Inlines
           if (options[EXTENSIONS][STRIKETHROUGH]) {
               this.markdown_to_mdast.extensions.push(gfmStrikethrough({ singleTilde: options[EXTENSIONS][STRIKETHROUGH] === 'single' }));
               this.markdown_to_mdast.mdastExtensions.push(gfmStrikethroughFromMarkdown);
               this.mdast_to_markdown.extensions.push(gfmStrikethroughToMarkdown);
           }
           if (options[EXTENSIONS][UNDERLINE]) {
               const tmp = { mdastNodeName: 'underline', hastNodeName: 'u', char: '_' };
               this.markdown_to_mdast.extensions.push(attention(tmp));
               this.markdown_to_mdast.mdastExtensions.push(attentionFromMarkdown(tmp));
               this.mdast_to_markdown.extensions.push(attentionToMarkdown(tmp));
               hast_mdast_hdl.push(attentionFromHast(tmp));
           }
           if (options[EXTENSIONS][SUPERSCRIPT]) {
               const tmp = { mdastNodeName: 'superscript', hastNodeName: 'sup', char: '^' };
               this.markdown_to_mdast.extensions.push(attention(tmp));
               this.markdown_to_mdast.mdastExtensions.push(attentionFromMarkdown(tmp));
               this.mdast_to_markdown.extensions.push(attentionToMarkdown(tmp));
               hast_mdast_hdl.push(attentionFromHast(tmp));
           }
           if (options[EXTENSIONS][SUBSCRIPT]) {
               const tmp = { mdastNodeName: 'subscript', hastNodeName: 'sub', char: '~' };
               this.markdown_to_mdast.extensions.push(attention(tmp));
               this.markdown_to_mdast.mdastExtensions.push(attentionFromMarkdown(tmp));
               this.mdast_to_markdown.extensions.push(attentionToMarkdown(tmp));
               hast_mdast_hdl.push(attentionFromHast(tmp));
           }
           this.options[NEWLINE] = options[EXTENSIONS][NEWLINE];
           Object.assign(this.mdast_to_markdown, options[MARKDOWN]);
           this.mdast_to_hast.handlers = flatten(mdast_hast_hdl);
           this.hast_to_mdast.handlers = flatten(hast_mdast_hdl);
           /** Flatten array of objects into one object */
           function flatten(itms) {
               const res = {};
               for (const itm of itms) {
                   if (typeof itm === 'function')
                       res[itm.name] = itm;
                   else if (typeof itm === 'object')
                       for (const [k, v] of Object.entries(itm))
                           res[k] = v;
               }
               return res;
           }
       }
       /////////////////////////////////////////////////////////////////////////////
       /** Convert HTML to markdown */
       html_to_markdown(html) {
           if (!html)
               return ['', 0];
           const hast = fromHtml(html, this.html_to_hast);
           this.mutate_from_html(hast);
           const mdast = toMdast(hast, this.hast_to_mdast);
           // Strip spec mdastToMarkdown eof newline
           const md = toMarkdown(mdast, this.mdast_to_markdown).slice(0, -1);
           return [md, this.parse_cloze(md)];
       }
       /////////////////////////////////////////////////////////////////////////////
       /** Convert markdown to HTML */
       markdown_to_html(md) {
           if (!md)
               return '';
           const mdast = fromMarkdown(md, 'utf-8', this.markdown_to_mdast);
           const hast = toHast(mdast, this.mdast_to_hast);
           this.mutate_from_markdown(hast);
           let html = toHtml(hast, this.hast_to_html);
           return html;
       }
       parse_cloze(str) {
           let ord = 0;
           let match;
           while ((match = this.CLOZE_ORD_RE.exec(str)) !== null) {
               const o = parseInt(match[1]);
               if (o > ord)
                   ord = o;
           }
           return ord;
       }
       /////////////////////////////////////////////////////////////////////////////
       /**
        * MUTATE HAST
        * Run on hast before converting to mdast or HTML.
        * Issues that need to be addressed:
        * - Remove `\n` between html tags
        * - Replace `<br><br>` with `<p>` from HTML and vice versa
        * - Replace `<i>/<b>` with `<em>/<strong>` from HTML and vice versa
        * - Correct Anki's behaviour of inserting nested lists _outside_ `<li>` (from_html only)
        * - Correct headless table output (from_markdown only)
        * - Replace `<br>` in tables with `symbol` and vice versa (depending on config)
        */
       /////////////////////////////////////////////////////////////////////////////
       /**
        * Mutate hast generated from Anki style HTML to Markdown (extended)
        * compatible HTML (p-wrap, swap i for em, b for strong, table newlines etc.)
        * before conversion to mdast/markdown
        */
       mutate_from_html(hast) {
           mutate(hast, {
               table_nl: this.options[NEWLINE],
               table: 0,
               headless: 0,
               list: 0,
               heading: 0,
               deflist: 0
           });
           /** Recursion function to mutate a nodes children */
           function mutate(node, state) {
               var _a, _b;
               if (!((_a = node['children']) === null || _a === void 0 ? void 0 : _a.length))
                   return node;
               update_state(true);
               // Mutate children
               const result = [];
               let para = [];
               let brs = 0; // number of sequential <br>'s seen
               for (const child of node['children']) {
                   // discard null child and "html prettify newlines"
                   if (!child || !child.position && child.type === 'text' && child['value'] === '\n') {
                       continue;
                   }
                   const tag = child['tagName'];
                   // phrasing
                   if (phrasing$2(child)) {
                       // keep building para until after 2+ brs
                       if (tag !== 'br' && brs > 1)
                           flush_para();
                       // handle <br> including newline replacement in tables
                       if (tag === 'br') {
                           if (state['table'] && state['table_nl']) {
                               para.push({ type: 'text', value: state['table_nl'] });
                           }
                           else {
                               para.push(child);
                               brs++;
                           }
                       }
                       else {
                           brs = 0; // reset sequential <br> counter
                           // replace i/b with em/strong
                           if (tag === 'i')
                               child['tagName'] = 'em';
                           else if (tag === 'b')
                               child['tagName'] = 'strong';
                           para.push(mutate(child, state));
                       }
                   }
                   // blocks
                   else {
                       flush_para();
                       // Move nested lists inside preceding li
                       if (['ul', 'ol'].includes(tag) &&
                           ((_b = result[result.length - 1]) === null || _b === void 0 ? void 0 : _b['tagName']) === 'li') {
                           result[result.length - 1]['children'].push(mutate(child, state));
                       }
                       // unhandled, push to result
                       else {
                           result.push(mutate(child, state));
                       }
                   }
               }
               // trailing paragraph
               flush_para();
               node['children'] = result;
               update_state(false);
               return node;
               /** Flush paragraph buffer to result, wrapping in <p> as required */
               function flush_para() {
                   var _a;
                   if (!para.length)
                       return;
                   const para_ = brs ? para.slice(0, -brs) : para;
                   // p wrap everywhere except: in lists w/o two <br>'s; in tables, headings or definition lists
                   if (!phrasing$2(node) &&
                       !state['table'] &&
                       !state['heading'] &&
                       !state['deflist'] &&
                       ( // lists are special, to have text after a nested list in the same li
                       // the outer list has to be loose in markdown, so do the reverse here (p wrap)
                       !state['list'] ||
                           brs > 1 ||
                           ['ul', 'ol'].includes((_a = result[result.length - 1]) === null || _a === void 0 ? void 0 : _a['tagName'])))
                       result.push({
                           type: 'element',
                           tagName: 'p',
                           children: para_
                       });
                   else
                       result.push(...para_);
                   para = [];
                   brs = 0;
               }
               /** Incr/decr counters of block levels */
               function update_state(increment) {
                   if (node['tagName'] === 'table')
                       state['table'] += increment ? 1 : -1;
                   else if (['ul', 'ol'].includes(node['tagName']))
                       state['list'] += increment ? 1 : -1;
                   else if (['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].includes(node['tagName']))
                       state['heading'] += increment ? 1 : -1;
                   else if (node['tagName'] === 'dl')
                       state['deflist'] += increment ? 1 : -1;
               }
           }
       }
       /////////////////////////////////////////////////////////////////////////////
       /**
        * Mutate hast Markdown (extended) style to Anki compatible style before
        * conversion to HTML (p-unwrap, swap em for i, strong for b, table newlines etc.)
        */
       mutate_from_markdown(hast) {
           const br = { type: 'element', tagName: 'br' };
           mutate(hast, {
               table_nl: this.options[NEWLINE],
               table: 0,
               list: 0,
               headless: 0
           });
           function mutate(node, state) {
               var _a;
               if (!((_a = node['children']) === null || _a === void 0 ? void 0 : _a.length))
                   return node;
               update_state(true);
               // Mutate children
               const result = [];
               let prv; // preceding child or undef
               // Direct children
               let i = -1;
               for (const child of node['children']) {
                   i++;
                   // discard null child and "html prettify newlines"
                   if (!child || !child.position && child.type === 'text' && child['value'] === '\n') {
                       continue;
                   }
                   const tag = child['tagName'];
                   // phrasing
                   if (phrasing$2(child)) {
                       if (state['table'] && child.type === 'text' && child.value.includes(state['table_nl'])) {
                           const txts = child.value.split(new RegExp(`(?<!\\\\)[${state['table_nl']}]`));
                           let n = 0;
                           for (const txt of txts) {
                               if (txt)
                                   result.push({ type: 'text', value: txt });
                               if (n++ < txts.length - 1)
                                   result.push(br);
                           }
                       }
                       else {
                           // replace i/b with em/strong
                           if (tag === 'em')
                               child['tagName'] = 'i';
                           else if (tag === 'strong')
                               child['tagName'] = 'b';
                           result.push(mutate(child, state));
                       }
                   }
                   // blocks
                   else {
                       // paragraph, preced with <br><br> as needed
                       if (tag === 'p') {
                           if (prv && (prv['tagName'] === 'p' || prv.type === 'text'))
                               result.push(br, br);
                           result.push(...mutate(child, state)['children']);
                       }
                       // Fix headless tables
                       else if (state['headless']) {
                           // Move thead rows to tbody, they will be handled there
                           if (tag === 'thead') {
                               let n = i + 1;
                               while (node['children'][n]['tagName'] !== 'tbody')
                                   n++;
                               node['children'][n]['children'].unshift(...child['children']);
                           }
                           else {
                               // Convert any th to td
                               if (tag === 'th')
                                   child['tagName'] = 'td';
                               result.push(mutate(child, state));
                           }
                       }
                       // non-para, push to result
                       else {
                           result.push(mutate(child, state));
                       }
                   }
                   prv = child;
               }
               node['children'] = result;
               // ugly here but clear table headless property
               if (node['tagName'] === 'table' && node['properties']['headless'])
                   delete node['properties']['headless'];
               update_state(false);
               return node;
               /** Incr/decr counters of block levels */
               function update_state(increment) {
                   if (node['tagName'] === 'table') {
                       state['table'] += increment ? 1 : -1;
                       if (node['properties']['headless'])
                           state['headless'] += increment ? 1 : -1;
                   }
                   else if (['ul', 'ol'].includes(node['tagName']))
                       state['list'] += increment ? 1 : -1;
                   else if (['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].includes(node['tagName']))
                       state['heading'] += increment ? 1 : -1;
               }
           }
       }
   }

   const WINDOW_INPUT = "Window input";
   const WINDOW_MODE = "Mode";
   const CONVERTER = "Converter";
   const EDITOR = "CodeMirror";

   class WindowEditor {
       constructor(parent, cfg) {
           Object.assign(this, cfg);
           this.editor = new Editor({
               parent: parent,
               ...this[EDITOR]
           });
           this.converter = new Converter(this[CONVERTER]);
       }
       set_html(fields, i) {
           var _a;
           if (((_a = this[WINDOW_INPUT]) === null || _a === void 0 ? void 0 : _a[WINDOW_MODE]) === 'note') {
               let html = '';
               for (const [title, content] of fields)
                   html += `<!-- ${title} --><br><br>${content}<br><br>`;
               const [md, ord] = this.converter.html_to_markdown(html);
               this.editor.set_doc(md, ord, 'start');
           }
           else {
               const [md, ord] = this.converter.html_to_markdown(fields[i][1]);
               this.editor.set_doc(md, ord, 'end');
           }
           this.editor.cm.focus();
       }
       get_html() {
           var _a;
           if (((_a = this[WINDOW_INPUT]) === null || _a === void 0 ? void 0 : _a[WINDOW_MODE]) === 'note') {
               const fields = [];
               const md = this.editor.cm.state.doc.toString();
               for (const match of md.matchAll(/(.*?)^[ \t]*<!--[ \t]*(.*?)[ \t]*?-->[ \t]*$/gms)) {
                   if (fields.length)
                       fields[fields.length - 1][1] = this.converter.markdown_to_html(match[1].trim());
                   fields.push([match[2], '']);
               }
               return fields;
           }
           return this.converter.markdown_to_html(this.editor.cm.state.doc.toString());
       }
   }

   // This file was generated by lezer-generator. You probably shouldn't edit it.
   const whitespace$2 = 36,
     LineComment$1 = 1,
     BlockComment = 2,
     String$1 = 3,
     Number$1 = 4,
     Bool = 5,
     Null = 6,
     ParenL$2 = 7,
     ParenR$1 = 8,
     BraceL$1 = 9,
     BraceR = 10,
     BracketL$1 = 11,
     BracketR = 12,
     Semi = 13,
     Dot$1 = 14,
     Operator = 15,
     Punctuation = 16,
     SpecialVar = 17,
     Identifier$3 = 18,
     QuotedIdentifier = 19,
     Keyword = 20,
     Type = 21,
     Bits = 22,
     Bytes = 23,
     Builtin = 24;

   function isAlpha$2(ch) {
       return ch >= 65 /* Ch.A */ && ch <= 90 /* Ch.Z */ || ch >= 97 /* Ch.a */ && ch <= 122 /* Ch.z */ || ch >= 48 /* Ch._0 */ && ch <= 57 /* Ch._9 */;
   }
   function isHexDigit(ch) {
       return ch >= 48 /* Ch._0 */ && ch <= 57 /* Ch._9 */ || ch >= 97 /* Ch.a */ && ch <= 102 /* Ch.f */ || ch >= 65 /* Ch.A */ && ch <= 70 /* Ch.F */;
   }
   function readLiteral(input, endQuote, backslashEscapes) {
       for (let escaped = false;;) {
           if (input.next < 0)
               return;
           if (input.next == endQuote && !escaped) {
               input.advance();
               return;
           }
           escaped = backslashEscapes && !escaped && input.next == 92 /* Ch.Backslash */;
           input.advance();
       }
   }
   function readDoubleDollarLiteral(input) {
       for (;;) {
           if (input.next < 0 || input.peek(1) < 0)
               return;
           if (input.next == 36 /* Ch.Dollar */ && input.peek(1) == 36 /* Ch.Dollar */) {
               input.advance(2);
               return;
           }
           input.advance();
       }
   }
   function readWord(input, result) {
       for (;;) {
           if (input.next != 95 /* Ch.Underscore */ && !isAlpha$2(input.next))
               break;
           if (result != null)
               result += String.fromCharCode(input.next);
           input.advance();
       }
       return result;
   }
   function readWordOrQuoted(input) {
       if (input.next == 39 /* Ch.SingleQuote */ || input.next == 34 /* Ch.DoubleQuote */ || input.next == 96 /* Ch.Backtick */) {
           let quote = input.next;
           input.advance();
           readLiteral(input, quote, false);
       }
       else {
           readWord(input);
       }
   }
   function readBits(input, endQuote) {
       while (input.next == 48 /* Ch._0 */ || input.next == 49 /* Ch._1 */)
           input.advance();
       if (endQuote && input.next == endQuote)
           input.advance();
   }
   function readNumber(input, sawDot) {
       for (;;) {
           if (input.next == 46 /* Ch.Dot */) {
               if (sawDot)
                   break;
               sawDot = true;
           }
           else if (input.next < 48 /* Ch._0 */ || input.next > 57 /* Ch._9 */) {
               break;
           }
           input.advance();
       }
       if (input.next == 69 /* Ch.E */ || input.next == 101 /* Ch.e */) {
           input.advance();
           if (input.next == 43 /* Ch.Plus */ || input.next == 45 /* Ch.Dash */)
               input.advance();
           while (input.next >= 48 /* Ch._0 */ && input.next <= 57 /* Ch._9 */)
               input.advance();
       }
   }
   function eol(input) {
       while (!(input.next < 0 || input.next == 10 /* Ch.Newline */))
           input.advance();
   }
   function inString$2(ch, str) {
       for (let i = 0; i < str.length; i++)
           if (str.charCodeAt(i) == ch)
               return true;
       return false;
   }
   const Space$1 = " \t\r\n";
   function keywords$H(keywords, types, builtin) {
       let result = Object.create(null);
       result["true"] = result["false"] = Bool;
       result["null"] = result["unknown"] = Null;
       for (let kw of keywords.split(" "))
           if (kw)
               result[kw] = Keyword;
       for (let tp of types.split(" "))
           if (tp)
               result[tp] = Type;
       for (let kw of (builtin || "").split(" "))
           if (kw)
               result[kw] = Builtin;
       return result;
   }
   const SQLTypes = "array binary bit boolean char character clob date decimal double float int integer interval large national nchar nclob numeric object precision real smallint time timestamp varchar varying ";
   const SQLKeywords = "absolute action add after all allocate alter and any are as asc assertion at authorization before begin between both breadth by call cascade cascaded case cast catalog check close collate collation column commit condition connect connection constraint constraints constructor continue corresponding count create cross cube current current_date current_default_transform_group current_transform_group_for_type current_path current_role current_time current_timestamp current_user cursor cycle data day deallocate declare default deferrable deferred delete depth deref desc describe descriptor deterministic diagnostics disconnect distinct do domain drop dynamic each else elseif end end-exec equals escape except exception exec execute exists exit external fetch first for foreign found from free full function general get global go goto grant group grouping handle having hold hour identity if immediate in indicator initially inner inout input insert intersect into is isolation join key language last lateral leading leave left level like limit local localtime localtimestamp locator loop map match method minute modifies module month names natural nesting new next no none not of old on only open option or order ordinality out outer output overlaps pad parameter partial path prepare preserve primary prior privileges procedure public read reads recursive redo ref references referencing relative release repeat resignal restrict result return returns revoke right role rollback rollup routine row rows savepoint schema scroll search second section select session session_user set sets signal similar size some space specific specifictype sql sqlexception sqlstate sqlwarning start state static system_user table temporary then timezone_hour timezone_minute to trailing transaction translation treat trigger under undo union unique unnest until update usage user using value values view when whenever where while with without work write year zone ";
   const defaults$2 = {
       backslashEscapes: false,
       hashComments: false,
       spaceAfterDashes: false,
       slashComments: false,
       doubleQuotedStrings: false,
       doubleDollarQuotedStrings: false,
       unquotedBitLiterals: false,
       treatBitsAsBytes: false,
       charSetCasts: false,
       operatorChars: "*+\-%<>!=&|~^/",
       specialVar: "?",
       identifierQuotes: '"',
       words: /*@__PURE__*/keywords$H(SQLKeywords, SQLTypes)
   };
   function dialect(spec, kws, types, builtin) {
       let dialect = {};
       for (let prop in defaults$2)
           dialect[prop] = (spec.hasOwnProperty(prop) ? spec : defaults$2)[prop];
       if (kws)
           dialect.words = keywords$H(kws, types || "", builtin);
       return dialect;
   }
   function tokensFor(d) {
       return new ExternalTokenizer(input => {
           var _a;
           let { next } = input;
           input.advance();
           if (inString$2(next, Space$1)) {
               while (inString$2(input.next, Space$1))
                   input.advance();
               input.acceptToken(whitespace$2);
           }
           else if (next == 36 /* Ch.Dollar */ && input.next == 36 /* Ch.Dollar */ && d.doubleDollarQuotedStrings) {
               readDoubleDollarLiteral(input);
               input.acceptToken(String$1);
           }
           else if (next == 39 /* Ch.SingleQuote */ || next == 34 /* Ch.DoubleQuote */ && d.doubleQuotedStrings) {
               readLiteral(input, next, d.backslashEscapes);
               input.acceptToken(String$1);
           }
           else if (next == 35 /* Ch.Hash */ && d.hashComments ||
               next == 47 /* Ch.Slash */ && input.next == 47 /* Ch.Slash */ && d.slashComments) {
               eol(input);
               input.acceptToken(LineComment$1);
           }
           else if (next == 45 /* Ch.Dash */ && input.next == 45 /* Ch.Dash */ &&
               (!d.spaceAfterDashes || input.peek(1) == 32 /* Ch.Space */)) {
               eol(input);
               input.acceptToken(LineComment$1);
           }
           else if (next == 47 /* Ch.Slash */ && input.next == 42 /* Ch.Star */) {
               input.advance();
               for (let depth = 1;;) {
                   let cur = input.next;
                   if (input.next < 0)
                       break;
                   input.advance();
                   if (cur == 42 /* Ch.Star */ && input.next == 47 /* Ch.Slash */) {
                       depth--;
                       input.advance();
                       if (!depth)
                           break;
                   }
                   else if (cur == 47 /* Ch.Slash */ && input.next == 42 /* Ch.Star */) {
                       depth++;
                       input.advance();
                   }
               }
               input.acceptToken(BlockComment);
           }
           else if ((next == 101 /* Ch.e */ || next == 69 /* Ch.E */) && input.next == 39 /* Ch.SingleQuote */) {
               input.advance();
               readLiteral(input, 39 /* Ch.SingleQuote */, true);
           }
           else if ((next == 110 /* Ch.n */ || next == 78 /* Ch.N */) && input.next == 39 /* Ch.SingleQuote */ &&
               d.charSetCasts) {
               input.advance();
               readLiteral(input, 39 /* Ch.SingleQuote */, d.backslashEscapes);
               input.acceptToken(String$1);
           }
           else if (next == 95 /* Ch.Underscore */ && d.charSetCasts) {
               for (let i = 0;; i++) {
                   if (input.next == 39 /* Ch.SingleQuote */ && i > 1) {
                       input.advance();
                       readLiteral(input, 39 /* Ch.SingleQuote */, d.backslashEscapes);
                       input.acceptToken(String$1);
                       break;
                   }
                   if (!isAlpha$2(input.next))
                       break;
                   input.advance();
               }
           }
           else if (next == 40 /* Ch.ParenL */) {
               input.acceptToken(ParenL$2);
           }
           else if (next == 41 /* Ch.ParenR */) {
               input.acceptToken(ParenR$1);
           }
           else if (next == 123 /* Ch.BraceL */) {
               input.acceptToken(BraceL$1);
           }
           else if (next == 125 /* Ch.BraceR */) {
               input.acceptToken(BraceR);
           }
           else if (next == 91 /* Ch.BracketL */) {
               input.acceptToken(BracketL$1);
           }
           else if (next == 93 /* Ch.BracketR */) {
               input.acceptToken(BracketR);
           }
           else if (next == 59 /* Ch.Semi */) {
               input.acceptToken(Semi);
           }
           else if (d.unquotedBitLiterals && next == 48 /* Ch._0 */ && input.next == 98 /* Ch.b */) {
               input.advance();
               readBits(input);
               input.acceptToken(Bits);
           }
           else if ((next == 98 /* Ch.b */ || next == 66 /* Ch.B */) && (input.next == 39 /* Ch.SingleQuote */ || input.next == 34 /* Ch.DoubleQuote */)) {
               const quoteStyle = input.next;
               input.advance();
               if (d.treatBitsAsBytes) {
                   readLiteral(input, quoteStyle, d.backslashEscapes);
                   input.acceptToken(Bytes);
               }
               else {
                   readBits(input, quoteStyle);
                   input.acceptToken(Bits);
               }
           }
           else if (next == 48 /* Ch._0 */ && (input.next == 120 /* Ch.x */ || input.next == 88 /* Ch.X */) ||
               (next == 120 /* Ch.x */ || next == 88 /* Ch.X */) && input.next == 39 /* Ch.SingleQuote */) {
               let quoted = input.next == 39 /* Ch.SingleQuote */;
               input.advance();
               while (isHexDigit(input.next))
                   input.advance();
               if (quoted && input.next == 39 /* Ch.SingleQuote */)
                   input.advance();
               input.acceptToken(Number$1);
           }
           else if (next == 46 /* Ch.Dot */ && input.next >= 48 /* Ch._0 */ && input.next <= 57 /* Ch._9 */) {
               readNumber(input, true);
               input.acceptToken(Number$1);
           }
           else if (next == 46 /* Ch.Dot */) {
               input.acceptToken(Dot$1);
           }
           else if (next >= 48 /* Ch._0 */ && next <= 57 /* Ch._9 */) {
               readNumber(input, false);
               input.acceptToken(Number$1);
           }
           else if (inString$2(next, d.operatorChars)) {
               while (inString$2(input.next, d.operatorChars))
                   input.advance();
               input.acceptToken(Operator);
           }
           else if (inString$2(next, d.specialVar)) {
               if (input.next == next)
                   input.advance();
               readWordOrQuoted(input);
               input.acceptToken(SpecialVar);
           }
           else if (inString$2(next, d.identifierQuotes)) {
               readLiteral(input, next, false);
               input.acceptToken(QuotedIdentifier);
           }
           else if (next == 58 /* Ch.Colon */ || next == 44 /* Ch.Comma */) {
               input.acceptToken(Punctuation);
           }
           else if (isAlpha$2(next)) {
               let word = readWord(input, String.fromCharCode(next));
               input.acceptToken(input.next == 46 /* Ch.Dot */ ? Identifier$3 : (_a = d.words[word.toLowerCase()]) !== null && _a !== void 0 ? _a : Identifier$3);
           }
       });
   }
   const tokens = /*@__PURE__*/tokensFor(defaults$2);

   // This file was generated by lezer-generator. You probably shouldn't edit it.
   const parser$1$1 = /*@__PURE__*/LRParser.deserialize({
     version: 14,
     states: "%vQ]QQOOO#wQRO'#DSO$OQQO'#CwO%eQQO'#CxO%lQQO'#CyO%sQQO'#CzOOQQ'#DS'#DSOOQQ'#C}'#C}O'UQRO'#C{OOQQ'#Cv'#CvOOQQ'#C|'#C|Q]QQOOQOQQOOO'`QQO'#DOO(xQRO,59cO)PQQO,59cO)UQQO'#DSOOQQ,59d,59dO)cQQO,59dOOQQ,59e,59eO)jQQO,59eOOQQ,59f,59fO)qQQO,59fOOQQ-E6{-E6{OOQQ,59b,59bOOQQ-E6z-E6zOOQQ,59j,59jOOQQ-E6|-E6|O+VQRO1G.}O+^QQO,59cOOQQ1G/O1G/OOOQQ1G/P1G/POOQQ1G/Q1G/QP+kQQO'#C}O+rQQO1G.}O)PQQO,59cO,PQQO'#Cw",
     stateData: ",[~OtOSPOSQOS~ORUOSUOTUOUUOVROXSOZTO]XO^QO_UO`UOaPObPOcPOdUOeUOfUOgUOhUO~O^]ORvXSvXTvXUvXVvXXvXZvX]vX_vX`vXavXbvXcvXdvXevXfvXgvXhvX~OsvX~P!jOa_Ob_Oc_O~ORUOSUOTUOUUOVROXSOZTO^tO_UO`UOa`Ob`Oc`OdUOeUOfUOgUOhUO~OWaO~P$ZOYcO~P$ZO[eO~P$ZORUOSUOTUOUUOVROXSOZTO^QO_UO`UOaPObPOcPOdUOeUOfUOgUOhUO~O]hOsoX~P%zOajObjOcjO~O^]ORkaSkaTkaUkaVkaXkaZka]ka_ka`kaakabkackadkaekafkagkahka~Oska~P'kO^]O~OWvXYvX[vX~P!jOWnO~P$ZOYoO~P$ZO[pO~P$ZO^]ORkiSkiTkiUkiVkiXkiZki]ki_ki`kiakibkickidkiekifkigkihki~Oski~P)xOWkaYka[ka~P'kO]hO~P$ZOWkiYki[ki~P)xOasObsOcsO~O",
     goto: "#hwPPPPPPPPPPPPPPPPPPPPPPPPPPx||||!Y!^!d!xPPP#[TYOZeUORSTWZbdfqT[OZQZORiZSWOZQbRQdSQfTZgWbdfqQ^PWk^lmrQl_Qm`RrseVORSTWZbdfq",
     nodeNames: "⚠ LineComment BlockComment String Number Bool Null ( ) { } [ ] ; . Operator Punctuation SpecialVar Identifier QuotedIdentifier Keyword Type Bits Bytes Builtin Script Statement CompositeIdentifier Parens Braces Brackets Statement",
     maxTerm: 38,
     skippedNodes: [0,1,2],
     repeatNodeCount: 3,
     tokenData: "RORO",
     tokenizers: [0, tokens],
     topRules: {"Script":[0,25]},
     tokenPrec: 0
   });

   function tokenBefore(tree) {
       let cursor = tree.cursor().moveTo(tree.from, -1);
       while (/Comment/.test(cursor.name))
           cursor.moveTo(cursor.from, -1);
       return cursor.node;
   }
   function idName(doc, node) {
       let text = doc.sliceString(node.from, node.to);
       let quoted = /^([`'"])(.*)\1$/.exec(text);
       return quoted ? quoted[2] : text;
   }
   function plainID(node) {
       return node && (node.name == "Identifier" || node.name == "QuotedIdentifier");
   }
   function pathFor(doc, id) {
       if (id.name == "CompositeIdentifier") {
           let path = [];
           for (let ch = id.firstChild; ch; ch = ch.nextSibling)
               if (plainID(ch))
                   path.push(idName(doc, ch));
           return path;
       }
       return [idName(doc, id)];
   }
   function parentsFor(doc, node) {
       for (let path = [];;) {
           if (!node || node.name != ".")
               return path;
           let name = tokenBefore(node);
           if (!plainID(name))
               return path;
           path.unshift(idName(doc, name));
           node = tokenBefore(name);
       }
   }
   function sourceContext(state, startPos) {
       let pos = syntaxTree(state).resolveInner(startPos, -1);
       let aliases = getAliases(state.doc, pos);
       if (pos.name == "Identifier" || pos.name == "QuotedIdentifier" || pos.name == "Keyword") {
           return { from: pos.from,
               quoted: pos.name == "QuotedIdentifier" ? state.doc.sliceString(pos.from, pos.from + 1) : null,
               parents: parentsFor(state.doc, tokenBefore(pos)),
               aliases };
       }
       if (pos.name == ".") {
           return { from: startPos, quoted: null, parents: parentsFor(state.doc, pos), aliases };
       }
       else {
           return { from: startPos, quoted: null, parents: [], empty: true, aliases };
       }
   }
   const EndFrom = /*@__PURE__*/new Set(/*@__PURE__*/"where group having order union intersect except all distinct limit offset fetch for".split(" "));
   function getAliases(doc, at) {
       let statement;
       for (let parent = at; !statement; parent = parent.parent) {
           if (!parent)
               return null;
           if (parent.name == "Statement")
               statement = parent;
       }
       let aliases = null;
       for (let scan = statement.firstChild, sawFrom = false, prevID = null; scan; scan = scan.nextSibling) {
           let kw = scan.name == "Keyword" ? doc.sliceString(scan.from, scan.to).toLowerCase() : null;
           let alias = null;
           if (!sawFrom) {
               sawFrom = kw == "from";
           }
           else if (kw == "as" && prevID && plainID(scan.nextSibling)) {
               alias = idName(doc, scan.nextSibling);
           }
           else if (kw && EndFrom.has(kw)) {
               break;
           }
           else if (prevID && plainID(scan)) {
               alias = idName(doc, scan);
           }
           if (alias) {
               if (!aliases)
                   aliases = Object.create(null);
               aliases[alias] = pathFor(doc, prevID);
           }
           prevID = /Identifier$/.test(scan.name) ? scan : null;
       }
       return aliases;
   }
   function maybeQuoteCompletions(quote, completions) {
       if (!quote)
           return completions;
       return completions.map(c => (Object.assign(Object.assign({}, c), { label: quote + c.label + quote, apply: undefined })));
   }
   const Span = /^\w*$/, QuotedSpan = /^[`'"]?\w*[`'"]?$/;
   class CompletionLevel {
       constructor() {
           this.list = [];
           this.children = undefined;
       }
       child(name) {
           let children = this.children || (this.children = Object.create(null));
           return children[name] || (children[name] = new CompletionLevel);
       }
       childCompletions(type) {
           return this.children ? Object.keys(this.children).filter(x => x).map(name => ({ label: name, type })) : [];
       }
   }
   function completeFromSchema$1(schema, tables, schemas, defaultTableName, defaultSchemaName) {
       let top = new CompletionLevel;
       let defaultSchema = top.child(defaultSchemaName || "");
       for (let table in schema) {
           let dot = table.indexOf(".");
           let schemaCompletions = dot > -1 ? top.child(table.slice(0, dot)) : defaultSchema;
           let tableCompletions = schemaCompletions.child(dot > -1 ? table.slice(dot + 1) : table);
           tableCompletions.list = schema[table].map(val => typeof val == "string" ? { label: val, type: "property" } : val);
       }
       defaultSchema.list = (tables || defaultSchema.childCompletions("type"))
           .concat(defaultTableName ? defaultSchema.child(defaultTableName).list : []);
       for (let sName in top.children) {
           let schema = top.child(sName);
           if (!schema.list.length)
               schema.list = schema.childCompletions("type");
       }
       top.list = defaultSchema.list.concat(schemas || top.childCompletions("type"));
       return (context) => {
           let { parents, from, quoted, empty, aliases } = sourceContext(context.state, context.pos);
           if (empty && !context.explicit)
               return null;
           if (aliases && parents.length == 1)
               parents = aliases[parents[0]] || parents;
           let level = top;
           for (let name of parents) {
               while (!level.children || !level.children[name]) {
                   if (level == top)
                       level = defaultSchema;
                   else if (level == defaultSchema && defaultTableName)
                       level = level.child(defaultTableName);
                   else
                       return null;
               }
               level = level.child(name);
           }
           let quoteAfter = quoted && context.state.sliceDoc(context.pos, context.pos + 1) == quoted;
           let options = level.list;
           if (level == top && aliases)
               options = options.concat(Object.keys(aliases).map(name => ({ label: name, type: "constant" })));
           return {
               from,
               to: quoteAfter ? context.pos + 1 : undefined,
               options: maybeQuoteCompletions(quoted, options),
               validFor: quoted ? QuotedSpan : Span
           };
       };
   }
   function completeKeywords(keywords, upperCase) {
       let completions = Object.keys(keywords).map(keyword => ({
           label: upperCase ? keyword.toUpperCase() : keyword,
           type: keywords[keyword] == Type ? "type" : keywords[keyword] == Keyword ? "keyword" : "variable",
           boost: -1
       }));
       return ifNotIn(["QuotedIdentifier", "SpecialVar", "String", "LineComment", "BlockComment", "."], completeFromList(completions));
   }

   let parser$c = /*@__PURE__*/parser$1$1.configure({
       props: [
           /*@__PURE__*/indentNodeProp.add({
               Statement: /*@__PURE__*/continuedIndent()
           }),
           /*@__PURE__*/foldNodeProp.add({
               Statement(tree) { return { from: tree.firstChild.to, to: tree.to }; },
               BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; }
           }),
           /*@__PURE__*/styleTags({
               Keyword: tags$1.keyword,
               Type: tags$1.typeName,
               Builtin: /*@__PURE__*/tags$1.standard(tags$1.name),
               Bits: tags$1.number,
               Bytes: tags$1.string,
               Bool: tags$1.bool,
               Null: tags$1.null,
               Number: tags$1.number,
               String: tags$1.string,
               Identifier: tags$1.name,
               QuotedIdentifier: /*@__PURE__*/tags$1.special(tags$1.string),
               SpecialVar: /*@__PURE__*/tags$1.special(tags$1.name),
               LineComment: tags$1.lineComment,
               BlockComment: tags$1.blockComment,
               Operator: tags$1.operator,
               "Semi Punctuation": tags$1.punctuation,
               "( )": tags$1.paren,
               "{ }": tags$1.brace,
               "[ ]": tags$1.squareBracket
           })
       ]
   });
   /**
   Represents an SQL dialect.
   */
   class SQLDialect {
       constructor(
       /**
       @internal
       */
       dialect, 
       /**
       The language for this dialect.
       */
       language, 
       /**
       The spec used to define this dialect.
       */
       spec) {
           this.dialect = dialect;
           this.language = language;
           this.spec = spec;
       }
       /**
       Returns the language for this dialect as an extension.
       */
       get extension() { return this.language.extension; }
       /**
       Define a new dialect.
       */
       static define(spec) {
           let d = dialect(spec, spec.keywords, spec.types, spec.builtin);
           let language = LRLanguage.define({
               name: "sql",
               parser: parser$c.configure({
                   tokenizers: [{ from: tokens, to: tokensFor(d) }]
               }),
               languageData: {
                   commentTokens: { line: "--", block: { open: "/*", close: "*/" } },
                   closeBrackets: { brackets: ["(", "[", "{", "'", '"', "`"] }
               }
           });
           return new SQLDialect(d, language, spec);
       }
   }
   /**
   Returns a completion source that provides keyword completion for
   the given SQL dialect.
   */
   function keywordCompletionSource(dialect, upperCase = false) {
       return completeKeywords(dialect.dialect.words, upperCase);
   }
   /**
   FIXME remove on 1.0 @internal
   */
   function keywordCompletion(dialect, upperCase = false) {
       return dialect.language.data.of({
           autocomplete: keywordCompletionSource(dialect, upperCase)
       });
   }
   /**
   Returns a completion sources that provides schema-based completion
   for the given configuration.
   */
   function schemaCompletionSource(config) {
       return config.schema ? completeFromSchema$1(config.schema, config.tables, config.schemas, config.defaultTable, config.defaultSchema)
           : () => null;
   }
   /**
   FIXME remove on 1.0 @internal
   */
   function schemaCompletion(config) {
       return config.schema ? (config.dialect || StandardSQL).language.data.of({
           autocomplete: schemaCompletionSource(config)
       }) : [];
   }
   /**
   SQL language support for the given SQL dialect, with keyword
   completion, and, if provided, schema-based completion as extra
   extensions.
   */
   function sql$2(config = {}) {
       let lang = config.dialect || StandardSQL;
       return new LanguageSupport(lang.language, [schemaCompletion(config), keywordCompletion(lang, !!config.upperCaseKeywords)]);
   }
   /**
   The standard SQL dialect.
   */
   const StandardSQL = /*@__PURE__*/SQLDialect.define({});
   /**
   Dialect for [PostgreSQL](https://www.postgresql.org).
   */
   const PostgreSQL = /*@__PURE__*/SQLDialect.define({
       charSetCasts: true,
       doubleDollarQuotedStrings: true,
       operatorChars: "+-*/<>=~!@#%^&|`?",
       specialVar: "",
       keywords: SQLKeywords + "a abort abs absent access according ada admin aggregate alias also always analyse analyze array_agg array_max_cardinality asensitive assert assignment asymmetric atomic attach attribute attributes avg backward base64 begin_frame begin_partition bernoulli bit_length blocked bom c cache called cardinality catalog_name ceil ceiling chain char_length character_length character_set_catalog character_set_name character_set_schema characteristics characters checkpoint class class_origin cluster coalesce cobol collation_catalog collation_name collation_schema collect column_name columns command_function command_function_code comment comments committed concurrently condition_number configuration conflict connection_name constant constraint_catalog constraint_name constraint_schema contains content control conversion convert copy corr cost covar_pop covar_samp csv cume_dist current_catalog current_row current_schema cursor_name database datalink datatype datetime_interval_code datetime_interval_precision db debug defaults defined definer degree delimiter delimiters dense_rank depends derived detach detail dictionary disable discard dispatch dlnewcopy dlpreviouscopy dlurlcomplete dlurlcompleteonly dlurlcompletewrite dlurlpath dlurlpathonly dlurlpathwrite dlurlscheme dlurlserver dlvalue document dump dynamic_function dynamic_function_code element elsif empty enable encoding encrypted end_frame end_partition endexec enforced enum errcode error event every exclude excluding exclusive exp explain expression extension extract family file filter final first_value flag floor following force foreach fortran forward frame_row freeze fs functions fusion g generated granted greatest groups handler header hex hierarchy hint id ignore ilike immediately immutable implementation implicit import include including increment indent index indexes info inherit inherits inline insensitive instance instantiable instead integrity intersection invoker isnull k key_member key_type label lag last_value lead leakproof least length library like_regex link listen ln load location lock locked log logged lower m mapping matched materialized max max_cardinality maxvalue member merge message message_length message_octet_length message_text min minvalue mod mode more move multiset mumps name namespace nfc nfd nfkc nfkd nil normalize normalized nothing notice notify notnull nowait nth_value ntile nullable nullif nulls number occurrences_regex octet_length octets off offset oids operator options ordering others over overlay overriding owned owner p parallel parameter_mode parameter_name parameter_ordinal_position parameter_specific_catalog parameter_specific_name parameter_specific_schema parser partition pascal passing passthrough password percent percent_rank percentile_cont percentile_disc perform period permission pg_context pg_datatype_name pg_exception_context pg_exception_detail pg_exception_hint placing plans pli policy portion position position_regex power precedes preceding prepared print_strict_params procedural procedures program publication query quote raise range rank reassign recheck recovery refresh regr_avgx regr_avgy regr_count regr_intercept regr_r2 regr_slope regr_sxx regr_sxy regr_syy reindex rename repeatable replace replica requiring reset respect restart restore result_oid returned_cardinality returned_length returned_octet_length returned_sqlstate returning reverse routine_catalog routine_name routine_schema routines row_count row_number rowtype rule scale schema_name schemas scope scope_catalog scope_name scope_schema security selective self sensitive sequence sequences serializable server server_name setof share show simple skip slice snapshot source specific_name sqlcode sqlerror sqrt stable stacked standalone statement statistics stddev_pop stddev_samp stdin stdout storage strict strip structure style subclass_origin submultiset subscription substring substring_regex succeeds sum symmetric sysid system system_time t table_name tables tablesample tablespace temp template ties token top_level_count transaction_active transactions_committed transactions_rolled_back transform transforms translate translate_regex trigger_catalog trigger_name trigger_schema trim trim_array truncate trusted type types uescape unbounded uncommitted unencrypted unlink unlisten unlogged unnamed untyped upper uri use_column use_variable user_defined_type_catalog user_defined_type_code user_defined_type_name user_defined_type_schema vacuum valid validate validator value_of var_pop var_samp varbinary variable_conflict variadic verbose version versioning views volatile warning whitespace width_bucket window within wrapper xmlagg xmlattributes xmlbinary xmlcast xmlcomment xmlconcat xmldeclaration xmldocument xmlelement xmlexists xmlforest xmliterate xmlnamespaces xmlparse xmlpi xmlquery xmlroot xmlschema xmlserialize xmltable xmltext xmlvalidate yes",
       types: SQLTypes + "bigint int8 bigserial serial8 varbit bool box bytea cidr circle precision float8 inet int4 json jsonb line lseg macaddr macaddr8 money numeric pg_lsn point polygon float4 int2 smallserial serial2 serial serial4 text timetz timestamptz tsquery tsvector txid_snapshot uuid xml"
   });
   const MySQLKeywords = "accessible algorithm analyze asensitive authors auto_increment autocommit avg avg_row_length binlog btree cache catalog_name chain change changed checkpoint checksum class_origin client_statistics coalesce code collations columns comment committed completion concurrent consistent contains contributors convert database databases day_hour day_microsecond day_minute day_second delay_key_write delayed delimiter des_key_file dev_pop dev_samp deviance directory disable discard distinctrow div dual dumpfile enable enclosed ends engine engines enum errors escaped even event events every explain extended fast field fields flush force found_rows fulltext grants handler hash high_priority hosts hour_microsecond hour_minute hour_second ignore ignore_server_ids import index index_statistics infile innodb insensitive insert_method install invoker iterate keys kill linear lines list load lock logs low_priority master master_heartbeat_period master_ssl_verify_server_cert masters max max_rows maxvalue message_text middleint migrate min min_rows minute_microsecond minute_second mod mode modify mutex mysql_errno no_write_to_binlog offline offset one online optimize optionally outfile pack_keys parser partition partitions password phase plugin plugins prev processlist profile profiles purge query quick range read_write rebuild recover regexp relaylog remove rename reorganize repair repeatable replace require resume rlike row_format rtree schedule schema_name schemas second_microsecond security sensitive separator serializable server share show slave slow snapshot soname spatial sql_big_result sql_buffer_result sql_cache sql_calc_found_rows sql_no_cache sql_small_result ssl starting starts std stddev stddev_pop stddev_samp storage straight_join subclass_origin sum suspend table_name table_statistics tables tablespace terminated triggers truncate uncommitted uninstall unlock upgrade use use_frm user_resources user_statistics utc_date utc_time utc_timestamp variables views warnings xa xor year_month zerofill";
   const MySQLTypes = SQLTypes + "bool blob long longblob longtext medium mediumblob mediumint mediumtext tinyblob tinyint tinytext text bigint int1 int2 int3 int4 int8 float4 float8 varbinary varcharacter precision datetime unsigned signed";
   const MySQLBuiltin = "charset clear edit ego help nopager notee nowarning pager print prompt quit rehash source status system tee";
   /**
   [MySQL](https://dev.mysql.com/) dialect.
   */
   const MySQL = /*@__PURE__*/SQLDialect.define({
       operatorChars: "*+-%<>!=&|^",
       charSetCasts: true,
       doubleQuotedStrings: true,
       unquotedBitLiterals: true,
       hashComments: true,
       spaceAfterDashes: true,
       specialVar: "@?",
       identifierQuotes: "`",
       keywords: SQLKeywords + "group_concat " + MySQLKeywords,
       types: MySQLTypes,
       builtin: MySQLBuiltin
   });
   /**
   Variant of [`MySQL`](https://codemirror.net/6/docs/ref/#lang-sql.MySQL) for
   [MariaDB](https://mariadb.org/).
   */
   const MariaSQL = /*@__PURE__*/SQLDialect.define({
       operatorChars: "*+-%<>!=&|^",
       charSetCasts: true,
       doubleQuotedStrings: true,
       unquotedBitLiterals: true,
       hashComments: true,
       spaceAfterDashes: true,
       specialVar: "@?",
       identifierQuotes: "`",
       keywords: SQLKeywords + "always generated groupby_concat hard persistent shutdown soft virtual " + MySQLKeywords,
       types: MySQLTypes,
       builtin: MySQLBuiltin
   });
   /**
   SQL dialect for Microsoft [SQL
   Server](https://www.microsoft.com/en-us/sql-server).
   */
   const MSSQL = /*@__PURE__*/SQLDialect.define({
       keywords: SQLKeywords + "trigger proc view index for add constraint key primary foreign collate clustered nonclustered declare exec go if use index holdlock nolock nowait paglock pivot readcommitted readcommittedlock readpast readuncommitted repeatableread rowlock serializable snapshot tablock tablockx unpivot updlock with",
       types: SQLTypes + "bigint smallint smallmoney tinyint money real text nvarchar ntext varbinary image hierarchyid uniqueidentifier sql_variant xml",
       builtin: "binary_checksum checksum connectionproperty context_info current_request_id error_line error_message error_number error_procedure error_severity error_state formatmessage get_filestream_transaction_context getansinull host_id host_name isnull isnumeric min_active_rowversion newid newsequentialid rowcount_big xact_state object_id",
       operatorChars: "*+-%<>!=^&|/",
       specialVar: "@"
   });
   /**
   [SQLite](https://sqlite.org/) dialect.
   */
   const SQLite = /*@__PURE__*/SQLDialect.define({
       keywords: SQLKeywords + "abort analyze attach autoincrement conflict database detach exclusive fail glob ignore index indexed instead isnull notnull offset plan pragma query raise regexp reindex rename replace temp vacuum virtual",
       types: SQLTypes + "bool blob long longblob longtext medium mediumblob mediumint mediumtext tinyblob tinyint tinytext text bigint int2 int8 unsigned signed real",
       builtin: "auth backup bail changes clone databases dbinfo dump echo eqp explain fullschema headers help import imposter indexes iotrace lint load log mode nullvalue once print prompt quit restore save scanstats separator shell show stats system tables testcase timeout timer trace vfsinfo vfslist vfsname width",
       operatorChars: "*+-%<>!=&|/~",
       identifierQuotes: "`\"",
       specialVar: "@:?$"
   });
   /**
   Dialect for [Cassandra](https://cassandra.apache.org/)'s SQL-ish query language.
   */
   const Cassandra = /*@__PURE__*/SQLDialect.define({
       keywords: "add all allow alter and any apply as asc authorize batch begin by clustering columnfamily compact consistency count create custom delete desc distinct drop each_quorum exists filtering from grant if in index insert into key keyspace keyspaces level limit local_one local_quorum modify nan norecursive nosuperuser not of on one order password permission permissions primary quorum rename revoke schema select set storage superuser table three to token truncate ttl two type unlogged update use user users using values where with writetime infinity NaN",
       types: SQLTypes + "ascii bigint blob counter frozen inet list map static text timeuuid tuple uuid varint",
       slashComments: true
   });
   /**
   [PL/SQL](https://en.wikipedia.org/wiki/PL/SQL) dialect.
   */
   const PLSQL = /*@__PURE__*/SQLDialect.define({
       keywords: SQLKeywords + "abort accept access add all alter and any arraylen as asc assert assign at attributes audit authorization avg base_table begin between binary_integer body by case cast char_base check close cluster clusters colauth column comment commit compress connected constant constraint crash create current currval cursor data_base database dba deallocate debugoff debugon declare default definition delay delete desc digits dispose distinct do drop else elseif elsif enable end entry exception exception_init exchange exclusive exists external fast fetch file for force form from function generic goto grant group having identified if immediate in increment index indexes indicator initial initrans insert interface intersect into is key level library like limited local lock log logging loop master maxextents maxtrans member minextents minus mislabel mode modify multiset new next no noaudit nocompress nologging noparallel not nowait number_base of off offline on online only option or order out package parallel partition pctfree pctincrease pctused pls_integer positive positiven pragma primary prior private privileges procedure public raise range raw rebuild record ref references refresh rename replace resource restrict return returning returns reverse revoke rollback row rowid rowlabel rownum rows run savepoint schema segment select separate set share snapshot some space split sql start statement storage subtype successful synonym tabauth table tables tablespace task terminate then to trigger truncate type union unique unlimited unrecoverable unusable update use using validate value values variable view views when whenever where while with work",
       builtin: "appinfo arraysize autocommit autoprint autorecovery autotrace blockterminator break btitle cmdsep colsep compatibility compute concat copycommit copytypecheck define echo editfile embedded feedback flagger flush heading headsep instance linesize lno loboffset logsource longchunksize markup native newpage numformat numwidth pagesize pause pno recsep recsepchar repfooter repheader serveroutput shiftinout show showmode spool sqlblanklines sqlcase sqlcode sqlcontinue sqlnumber sqlpluscompatibility sqlprefix sqlprompt sqlterminator suffix tab term termout timing trimout trimspool ttitle underline verify version wrap",
       types: SQLTypes + "ascii bfile bfilename bigserial bit blob dec long number nvarchar nvarchar2 serial smallint string text uid varchar2 xml",
       operatorChars: "*/+-%<>!=~",
       doubleQuotedStrings: true,
       charSetCasts: true
   });

   var index$c = /*#__PURE__*/Object.freeze({
      __proto__: null,
      Cassandra: Cassandra,
      MSSQL: MSSQL,
      MariaSQL: MariaSQL,
      MySQL: MySQL,
      PLSQL: PLSQL,
      PostgreSQL: PostgreSQL,
      SQLDialect: SQLDialect,
      SQLite: SQLite,
      StandardSQL: StandardSQL,
      keywordCompletion: keywordCompletion,
      keywordCompletionSource: keywordCompletionSource,
      schemaCompletion: schemaCompletion,
      schemaCompletionSource: schemaCompletionSource,
      sql: sql$2
   });

   // This file was generated by lezer-generator. You probably shouldn't edit it.
   const RawString$1 = 1,
     templateArgsEndFallback = 2,
     MacroName = 3;

   const R = 82, L = 76, u = 117, U = 85,
         a = 97, z = 122, A$1 = 65, Z = 90, Underscore = 95,
         Zero$1 = 48,
         Quote$1 = 34,
         ParenL$1 = 40, ParenR = 41,
         Space = 32, GreaterThan$1 = 62;

   const rawString = new ExternalTokenizer(input => {
     // Raw string literals can start with: R, LR, uR, UR, u8R
     if (input.next == L || input.next == U) {
       input.advance();
     } else if (input.next == u) {
       input.advance();
       if (input.next == Zero$1 + 8) input.advance();
     }
     if (input.next != R) return
     input.advance();
     if (input.next != Quote$1) return
     input.advance();

     let marker = "";
     while (input.next != ParenL$1) {
       if (input.next == Space || input.next <= 13 || input.next == ParenR) return
       marker += String.fromCharCode(input.next);
       input.advance();
     }
     input.advance();

     for (;;) {
       if (input.next < 0)
         return input.acceptToken(RawString$1)
       if (input.next == ParenR) {
         let match = true;
         for (let i = 0; match && i < marker.length; i++)
           if (input.peek(i + 1) != marker.charCodeAt(i)) match = false;
         if (match && input.peek(marker.length + 1) == Quote$1)
           return input.acceptToken(RawString$1, 2 + marker.length)
       }
       input.advance();
     }
   });

   const fallback = new ExternalTokenizer(input => {
     if (input.next == GreaterThan$1) {
       // Provide a template-args-closing token when the next characters
       // are ">>", in which case the regular tokenizer will only see a
       // bit shift op.
       if (input.peek(1) == GreaterThan$1)
         input.acceptToken(templateArgsEndFallback, 1);
     } else {
       // Notice all-uppercase identifiers
       let sawLetter = false, i = 0;
       for (;; i++) {
         if (input.next >= A$1 && input.next <= Z) sawLetter = true;
         else if (input.next >= a && input.next <= z) return
         else if (input.next != Underscore && !(input.next >= Zero$1 && input.next <= Zero$1 + 9)) break
         input.advance();
       }
       if (sawLetter && i > 1) input.acceptToken(MacroName);
     }
   }, {extend: true});

   const cppHighlighting = styleTags({
     "typedef struct union enum class typename decltype auto template operator friend noexcept namespace using requires concept import export module __attribute__ __declspec __based": tags$1.definitionKeyword,
     "extern MsCallModifier MsPointerModifier extern static register thread_local inline const volatile restrict _Atomic mutable constexpr constinit consteval virtual explicit VirtualSpecifier Access": tags$1.modifier,
     "if else switch for while do case default return break continue goto throw try catch": tags$1.controlKeyword,
     "co_return co_yield co_await": tags$1.controlKeyword,
     "new sizeof delete static_assert": tags$1.operatorKeyword,
     "NULL nullptr": tags$1.null,
     this: tags$1.self,
     "True False": tags$1.bool,
     "TypeSize PrimitiveType": tags$1.standard(tags$1.typeName),
     TypeIdentifier: tags$1.typeName,
     FieldIdentifier: tags$1.propertyName,
     "CallExpression/FieldExpression/FieldIdentifier": tags$1.function(tags$1.propertyName),
     "ModuleName/Identifier": tags$1.namespace,
     "PartitionName": tags$1.labelName,
     StatementIdentifier: tags$1.labelName,
     "Identifier DestructorName": tags$1.variableName,
     "CallExpression/Identifier": tags$1.function(tags$1.variableName),
     "CallExpression/ScopedIdentifier/Identifier": tags$1.function(tags$1.variableName),
     "FunctionDeclarator/Identifier FunctionDeclarator/DestructorName": tags$1.function(tags$1.definition(tags$1.variableName)),
     NamespaceIdentifier: tags$1.namespace,
     OperatorName: tags$1.operator,
     ArithOp: tags$1.arithmeticOperator,
     LogicOp: tags$1.logicOperator,
     BitOp: tags$1.bitwiseOperator,
     CompareOp: tags$1.compareOperator,
     AssignOp: tags$1.definitionOperator,
     UpdateOp: tags$1.updateOperator,
     LineComment: tags$1.lineComment,
     BlockComment: tags$1.blockComment,
     Number: tags$1.number,
     String: tags$1.string,
     "RawString SystemLibString": tags$1.special(tags$1.string),
     CharLiteral: tags$1.character,
     EscapeSequence: tags$1.escape,
     "UserDefinedLiteral/Identifier": tags$1.literal,
     PreProcArg: tags$1.meta,
     "PreprocDirectiveName #include #ifdef #ifndef #if #define #else #endif #elif": tags$1.processingInstruction,
     MacroName: tags$1.special(tags$1.name),
     "( )": tags$1.paren,
     "[ ]": tags$1.squareBracket,
     "{ }": tags$1.brace,
     "< >": tags$1.angleBracket,
     ". ->": tags$1.derefOperator,
     ", ;": tags$1.separator
   });

   // This file was generated by lezer-generator. You probably shouldn't edit it.
   const spec_identifier$5 = {__proto__:null,bool:34, char:34, int:34, float:34, double:34, void:34, size_t:34, ssize_t:34, intptr_t:34, uintptr_t:34, charptr_t:34, int8_t:34, int16_t:34, int32_t:34, int64_t:34, uint8_t:34, uint16_t:34, uint32_t:34, uint64_t:34, char8_t:34, char16_t:34, char32_t:34, char64_t:34, const:68, volatile:70, restrict:72, _Atomic:74, mutable:76, constexpr:78, constinit:80, consteval:82, struct:86, __declspec:90, final:148, override:148, public:152, private:152, protected:152, virtual:154, extern:160, static:162, register:164, inline:166, thread_local:168, __attribute__:172, __based:178, __restrict:180, __uptr:180, __sptr:180, _unaligned:180, __unaligned:180, noexcept:194, requires:198, TRUE:786, true:786, FALSE:788, false:788, typename:218, class:220, template:234, throw:248, __cdecl:256, __clrcall:256, __stdcall:256, __fastcall:256, __thiscall:256, __vectorcall:256, try:260, catch:264, export:284, import:288, case:298, default:300, if:310, else:316, switch:320, do:324, while:326, for:332, return:336, break:340, continue:344, goto:348, co_return:352, co_yield:356, using:364, typedef:368, namespace:382, new:400, delete:402, co_await:404, concept:408, enum:412, static_assert:416, friend:424, union:426, explicit:432, operator:446, module:458, signed:520, unsigned:520, long:520, short:520, decltype:530, auto:532, sizeof:568, NULL:574, nullptr:588, this:590};
   const spec_ = {__proto__:null,"<":131};
   const spec_templateArgsEnd = {__proto__:null,">":135};
   const spec_scopedIdentifier = {__proto__:null,operator:390, new:578, delete:584};
   const parser$b = LRParser.deserialize({
     version: 14,
     states: "$;fQ!QQVOOP'gOUOOO(XOWO'#CdO,RQUO'#CgO,]QUO'#FkO-sQbO'#CwO.UQUO'#CwO0TQUO'#K[O0[QUO'#CvO0gOpO'#DvO0oQ!dO'#D]OOQR'#JP'#JPO5XQVO'#GVO5fQUO'#JWOOQQ'#JW'#JWO8zQUO'#KnO<eQUO'#KnO>{QVO'#E^O?]QUO'#E^OOQQ'#Ed'#EdOOQQ'#Ee'#EeO?bQVO'#EfO@XQVO'#EiOBUQUO'#FPOBvQUO'#FiOOQR'#Fk'#FkOB{QUO'#FkOOQR'#LR'#LROOQR'#LQ'#LQOETQVO'#KROFxQUO'#LWOGVQUO'#KrOGkQUO'#LWOH]QUO'#LYOOQR'#HV'#HVOOQR'#HW'#HWOOQR'#HX'#HXOOQR'#K}'#K}OOQR'#J`'#J`Q!QQVOOOHkQVO'#F^OIWQUO'#EhOI_QUOOOKZQVO'#HhOKkQUO'#HhONVQUO'#KrONaQUO'#KrOOQQ'#Kr'#KrO!!_QUO'#KrOOQQ'#Jr'#JrO!!lQUO'#HyOOQQ'#K['#K[O!&^QUO'#K[O!&zQUO'#KRO!(zQVO'#I^O!(zQVO'#IaOCQQUO'#KROOQQ'#Iq'#IqOOQQ'#KR'#KRO!,}QUO'#K[OOQR'#KZ'#KZO!-UQUO'#DYO!/mQUO'#KoOOQQ'#Ko'#KoO!/tQUO'#KoO!/{QUO'#ETO!0QQUO'#EWO!0VQUO'#FRO8zQUO'#FPO!QQVO'#F_O!0[Q#vO'#FaO!0gQUO'#FlO!0oQUO'#FqO!0tQVO'#FsO!0oQUO'#FvO!3sQUO'#FwO!3xQVO'#FyO!4SQUO'#F{O!4XQUO'#F}O!4^QUO'#GPO!4cQVO'#GRO!(zQVO'#GTO!4jQUO'#GqO!4xQUO'#GZO!(zQVO'#FfO!6VQUO'#FfO!6[QVO'#GaO!6cQUO'#GbO!6nQUO'#GoO!6sQUO'#GsO!6xQUO'#G{O!7jQ&lO'#HjO!:mQUO'#GvO!:}QUO'#HYO!;YQUO'#H[O!;bQUO'#DWO!;bQUO'#HvO!;bQUO'#HwO!;yQUO'#HxO!<[QUO'#H}O!=PQUO'#IOO!>uQVO'#IcO!(zQVO'#IeO!?PQUO'#IhO!?WQVO'#IkP!@}{,UO'#CbP!6n{,UO'#CbP!AY{7[O'#CbP!6n{,UO'#CbP!A_{,UO'#CbP!AjOSO'#I{POOO)CEo)CEoOOOO'#I}'#I}O!AtOWO,59OOOQR,59O,59OO!(zQVO,59UOOQQ,59W,59WO!(zQVO,5;ROOQR,5<V,5<VO!BPQUO,59YO!(zQVO,5>rOOQR'#IY'#IYOOQR'#IZ'#IZOOQR'#I['#I[OOQR'#I]'#I]O!(zQVO,5>sO!(zQVO,5>sO!(zQVO,5>sO!(zQVO,5>sO!(zQVO,5>sO!(zQVO,5>sO!(zQVO,5>sO!(zQVO,5>sO!(zQVO,5>sO!(zQVO,5>sO!DOQVO,5>{OOQQ,5?X,5?XO!EqQVO'#ChO!IjQUO'#CyOOQQ,59c,59cOOQQ,59b,59bOOQQ,5=O,5=OO!IwQ&lO,5=nO!?PQUO,5?SO!LkQVO,5?VO!LrQbO,59cO!L}QVO'#FYOOQQ,5?Q,5?QO!M_QVO,59VO!MfO`O,5:bO!MkQbO'#D^O!M|QbO'#K_O!N[QbO,59wO!NdQbO'#CwO!NuQUO'#CwO!NzQUO'#K[O# UQUO'#CvOOQR-E<}-E<}O# aQUO,5ApO# hQVO'#EfO@XQVO'#EiOBUQUO,5;kOOQR,5<q,5<qO#$aQUO'#KRO#$hQUO'#KRO!(zQVO'#IVO8zQUO,5;kO#${Q&lO'#HjO#(SQUO'#CsO#*wQbO'#CwO#*|QUO'#CvO#.jQUO'#K[OOQQ-E=U-E=UO#0}QUO,5AYO#1XQUO'#K[O#1cQUO,5AYOOQR,5Ap,5ApOOQQ,5>m,5>mO#3gQUO'#CgO#4]QUO,5>qO#6OQUO'#IfOOQR'#JO'#JOO#6WQUO,5:xO#6tQUO,5:xO#7eQUO,5:xO#8YQUO'#CtO!0QQUO'#ClOOQQ'#JX'#JXO#6tQUO,5:xO#8bQUO,5;QO!4xQUO'#C}O#9kQUO,5;QO#9pQUO,5>RO#:|QUO'#C}O#;dQUO,5>|O#;iQUO'#KxO#<rQUO,5;TO#<zQVO,5;TO#=UQUO,5;TOOQQ,5;T,5;TO#>}QUO'#L]O#?UQUO,5>VO#?ZQbO'#CwO#?fQUO'#GdO#?kQUO'#E^O#@[QUO,5;kO#@sQUO'#LOO#@{QUO,5;rOKkQUO'#HgOBUQUO'#HhO#AQQUO'#KrO!6nQUO'#HkO#AxQUO'#CtO!0tQVO,5<TOOQQ'#Cg'#CgOOQR'#Ji'#JiO#A}QVO,5=aOOQQ,5?[,5?[O#DWQbO'#CwO#DcQUO'#GdOOQQ'#Jj'#JjOOQQ-E=h-E=hOGVQUO,5ArOGkQUO,5ArO#DhQUO,5AtO#DsQUO'#G}OOQR,5Ar,5ArO#DhQUO,5ArO#EOQUO'#HPO#EWQUO,5AtOOQR,5At,5AtOOQR,5Au,5AuO#EfQVO,5AuOOQR-E=^-E=^O#G`QVO,5;xOOQR,5;j,5;jO#IaQUO'#EjO#JfQUO'#EwO#K]QVO'#ExO#MoQUO'#EvO#MwQUO'#EyO#NvQUO'#EzOOQQ'#K{'#K{O$ mQUO,5;SO$!sQUO'#EvOOQQ,5;S,5;SO$#pQUO,5;SO$%cQUO,5:yO$'|QVO,5>QO$(WQUO'#E[O$(eQUO,5>SOOQQ,5>T,5>TO$,RQVO'#C{OOQQ-E=p-E=pOOQQ,5>e,5>eOOQQ,59`,59`O$,]QUO,5>xO$.]QUO,5>{O!6nQUO,59tO$.pQUO,5;qO$.}QUO,5<|O!0QQUO,5:oOOQQ,5:r,5:rO$/YQUO,5;mO$/_QUO'#KnOBUQUO,5;kOOQR,5;y,5;yO$0OQUO'#FcO$0^QUO'#FcO$0cQUO,5;{O$3|QVO'#FnO!0tQVO,5<WO!0oQUO,5<WO!0VQUO,5<]O$4TQVO'#GVO$7PQUO,5<_O!0tQVO,5<bO$:gQVO,5<cO$:tQUO,5<eOOQR,5<e,5<eO$;}QUO,5<eOOQR,5<g,5<gOOQR,5<i,5<iOOQQ'#Fj'#FjO$<SQUO,5<kO$<XQUO,5<mOOQR,5<m,5<mO$=_QUO,5<oO$>eQUO,5<sO$>pQUO,5=]O$>uQUO,5=]O!4xQUO,5<uO$>}QUO,5<uO$?cQUO,5<QO$@iQVO,5<QO$BzQUO,5<{OOQR,5<{,5<{O$DQQVO'#F^OOQR,5<|,5<|O$>uQUO,5<|O$DXQUO,5<|O$DdQUO,5=ZO!(zQVO,5=_O!(zQVO,5=gO#NeQUO,5=nOOQQ,5>U,5>UO$FiQUO,5>UO$FsQUO,5>UO$FxQUO,5>UO$F}QUO,5>UO!6nQUO,5>UO$H{QUO'#K[O$ISQUO,5=pO$I_QUO,5=bOKkQUO,5=pO$JXQUO,5=tOOQR,5=t,5=tO$JaQUO,5=tO$LlQVO'#H]OOQQ,5=v,5=vO!;]QUO,5=vO%#gQUO'#KkO%#nQUO'#K]O%$SQUO'#KkO%$^QUO'#DyO%$oQUO'#D|O%'lQUO'#K]OOQQ'#K]'#K]O%)_QUO'#K]O%#nQUO'#K]O%)dQUO'#K]OOQQ,59r,59rOOQQ,5>b,5>bOOQQ,5>c,5>cO%)lQUO'#H{O%)tQUO,5>dOOQQ,5>d,5>dO%-`QUO,5>dO%-kQUO,5>iO%1VQVO,5>jO%1^QUO,5>}O# hQVO'#EfO%4dQUO,5>}OOQQ,5>},5>}O%5TQUO,5?PO%7XQUO,5?SO!<[QUO,5?SO%9TQUO,5?VO%<pQVO,5?VP!A_{,UO,58|P%<w{,UO,58|P%=V{7[O,58|P%=]{,UO,58|PO{O'#Jv'#JvP%=b{,UO'#LdPOOO'#Ld'#LdP%=h{,UO'#LdPOOO,58|,58|POOO,5?g,5?gP%=mOSO,5?gOOOO-E<{-E<{OOQR1G.j1G.jO%=tQUO1G.pO%>zQUO1G0mOOQQ1G0m1G0mO%@WQUO'#CoO%BgQbO'#CwO%BrQUO'#CrO%BwQUO'#CrO%B|QUO1G.tO#AxQUO'#CqOOQQ1G.t1G.tO%EPQUO1G4^O%FVQUO1G4_O%GxQUO1G4_O%IkQUO1G4_O%K^QUO1G4_O%MPQUO1G4_O%NrQUO1G4_O&!eQUO1G4_O&$WQUO1G4_O&%yQUO1G4_O&'lQUO1G4_O&)_QUO1G4_O&+QQUO'#KQO&,ZQUO'#KQO&,cQUO,59SOOQQ,5=Q,5=QO&.kQUO,5=QO&.uQUO,5=QO&.zQUO,5=QO&/PQUO,5=QO!6nQUO,5=QO#NeQUO1G3YO&/ZQUO1G4nO!<[QUO1G4nO&1VQUO1G4qO&2xQVO1G4qOOQQ1G.}1G.}OOQQ1G.|1G.|OOQQ1G2j1G2jO!IwQ&lO1G3YO&3PQUO'#LPO@XQVO'#EiO&4YQUO'#F]OOQQ'#Jb'#JbO&4_QUO'#FZO&4jQUO'#LPO&4rQUO,5;tO&4wQUO1G.qOOQQ1G.q1G.qOOQR1G/|1G/|O&6jQ!dO'#JQO&6oQbO,59xO&9QQ!eO'#D`O&9XQ!dO'#JSO&9^QbO,5@yO&9^QbO,5@yOOQR1G/c1G/cO&9iQbO1G/cO&9nQ&lO'#GfO&:lQbO,59cOOQR1G7[1G7[O#@[QUO1G1VO&:wQUO1G1^OBUQUO1G1VO&=YQUO'#CyO#*wQbO,59cO&@{QUO1G6tOOQR-E<|-E<|O&B_QUO1G0dO#6WQUO1G0dOOQQ-E=V-E=VO#6tQUO1G0dOOQQ1G0l1G0lO&CSQUO,59iOOQQ1G3m1G3mO&CjQUO,59iO&DQQUO,59iO!M_QVO1G4hO!(zQVO'#JZO&DlQUO,5AdOOQQ1G0o1G0oO!(zQVO1G0oO!6nQUO'#JoO&DtQUO,5AwOOQQ1G3q1G3qOOQR1G1V1G1VO&J]QVO'#FOO!M_QVO,5;sOOQQ,5;s,5;sOBUQUO'#JdO&JmQUO,5AjO&JuQVO'#E[OOQR1G1^1G1^O&MdQUO'#L]OOQR1G1o1G1oOOQR-E=g-E=gOOQR1G7^1G7^O#DhQUO1G7^OGVQUO1G7^O#DhQUO1G7`OOQR1G7`1G7`O&MlQUO'#HOO&MtQUO'#LXOOQQ,5=i,5=iO&NSQUO,5=kO&NXQUO,5=lOOQR1G7a1G7aO#EfQVO1G7aO&N^QUO1G7aO' dQVO,5=lOOQR1G1U1G1UO$.vQUO'#E]O'!YQUO'#E]OOQQ'#Kz'#KzO'!sQUO'#KyO'#OQUO,5;UO'#WQUO'#ElO'#kQUO'#ElO'$OQUO'#EtOOQQ'#J]'#J]O'$TQUO,5;cO'$zQUO,5;cO'%uQUO,5;dO'&{QVO,5;dOOQQ,5;d,5;dO''VQVO,5;dO'&{QVO,5;dO''^QUO,5;bO'(ZQUO,5;eO'(fQUO'#KqO'(nQUO,5:vO'(sQUO,5;fOOQQ1G0n1G0nOOQQ'#J^'#J^O''^QUO,5;bO!4xQUO'#E}OOQQ,5;b,5;bO')nQUO'#E`O'+hQUO'#E{OHrQUO1G0nO'+mQUO'#EbOOQQ'#JY'#JYO'-VQUO'#KsOOQQ'#Ks'#KsO'.PQUO1G0eO'.wQUO1G3lO'/}QVO1G3lOOQQ1G3l1G3lO'0XQVO1G3lO'0`QUO'#L`O'1lQUO'#KYO'1zQUO'#KXO'2VQUO,59gO'2_QUO1G/`O'2dQUO'#FPOOQR1G1]1G1]OOQR1G2h1G2hO$>uQUO1G2hO'2nQUO1G2hO'2yQUO1G0ZOOQR'#Ja'#JaO'3OQVO1G1XO'8wQUO'#FTO'8|QUO1G1VO!6nQUO'#JeO'9[QUO,5;}O$0^QUO,5;}OOQQ'#Fd'#FdOOQQ,5;},5;}O'9jQUO1G1gOOQR1G1g1G1gO'9rQUO,5<YO$.vQUO'#FWOBUQUO'#FWO'9yQUO,5<YO!(zQVO,5<YO':RQUO,5<YO':WQVO1G1rO!0tQVO1G1rOOQR1G1w1G1wO'?vQUO1G1yOOQR1G1|1G1|O'?{QUO1G1}OBUQUO1G2^O'AUQVO1G1}O'CjQUO1G1}O'CoQUO'#GXO8zQUO1G2^OOQR1G2P1G2POOQR1G2V1G2VOOQR1G2X1G2XOOQR1G2Z1G2ZO'CtQUO1G2_O!4xQUO1G2_OOQR1G2w1G2wO'C|QUO1G2wO$>}QUO1G2aOOQQ'#Cu'#CuO'DRQUO'#G]O'D|QUO'#G]O'ERQUO'#LSO'EaQUO'#G`OOQQ'#LT'#LTO'EoQUO1G2aO'EtQVO1G1lO'HVQVO'#GVOBUQUO'#FWOOQR'#Jf'#JfO'EtQVO1G1lO'HaQUO'#FwOOQR1G2g1G2gOOQR,5;x,5;xO'HfQVO,5;xO'HmQUO1G2hO'HrQUO'#JhO'2nQUO1G2hO!(zQVO1G2uO'HzQUO1G2yO'JTQUO1G3RO'KZQUO1G3YOOQQ1G3p1G3pO'KoQUO1G3pOOQR1G3[1G3[O'KtQUO'#K[O'2dQUO'#LUOGkQUO'#LWOOQR'#Gz'#GzO#DhQUO'#LYOOQR'#HR'#HRO'LOQUO'#GwO'$OQUO'#GvOOQR1G2|1G2|O'L{QUO1G2|O'MrQUO1G3[O'M}QUO1G3`O'NSQUO1G3`OOQR1G3`1G3`O'N[QUO'#H^OOQR'#H^'#H^O( eQUO'#H^O!(zQVO'#HaO!(zQVO'#H`OOQR'#L['#L[O( jQUO'#L[OOQR'#Jl'#JlO( oQVO,5=wOOQQ,5=w,5=wO( vQUO'#H_O(!OQUO'#H[OOQQ1G3b1G3bO(!YQUO,5@wOOQQ,5@w,5@wO%)_QUO,5@wO%)dQUO,5@wO%$^QUO,5:eO(%wQUO'#KlO(&VQUO'#KlOOQQ,5:e,5:eOOQQ'#JT'#JTO(&bQUO'#D}O(&lQUO'#KrOGkQUO'#LWO('hQUO'#D}OOQQ'#Hq'#HqOOQQ'#Hs'#HsOOQQ'#Ht'#HtOOQQ'#Km'#KmOOQQ'#JV'#JVO('rQUO,5:hOOQQ,5:h,5:hO((oQUO'#LWO((|QUO'#HuO()dQUO,5@wO()kQUO'#H|O()vQUO'#L_O(*OQUO,5>gO(*TQUO'#L^OOQQ1G4O1G4OO(-zQUO1G4OO(.RQUO1G4OO(.YQUO1G4UO(/`QUO1G4UO(/eQUO,5A}O!6nQUO1G4iO!(zQVO'#IjOOQQ1G4n1G4nO(/jQUO1G4nO(1mQVO1G4qPOOO1G.h1G.hP!A_{,UO1G.hP(3mQUO'#LfP(3x{,UO1G.hP(3}{7[O1G.hPO{O-E=t-E=tPOOO,5BO,5BOP(4V{,UO,5BOPOOO1G5R1G5RO!(zQVO7+$[O(4[QUO'#CyOOQQ,59^,59^O(4gQbO,59cO(4rQbO,59^OOQQ,59],59]OOQQ7+)x7+)xO!M_QVO'#JuO(4}QUO,5@lOOQQ1G.n1G.nOOQQ1G2l1G2lO(5VQUO1G2lO(5[QUO7+(tOOQQ7+*Y7+*YO(7pQUO7+*YO(7wQUO7+*YO(1mQVO7+*]O#NeQUO7+(tO(8UQVO'#JcO(8iQUO,5AkO(8qQUO,5;vOOQQ'#Co'#CoOOQQ,5;w,5;wO!(zQVO'#F[OOQQ-E=`-E=`O!M_QVO,5;uOOQQ1G1`1G1`OOQQ,5?l,5?lOOQQ-E=O-E=OOOQR'#Dg'#DgOOQR'#Di'#DiOOQR'#Dl'#DlO(9zQ!eO'#K`O(:RQMkO'#K`O(:YQ!eO'#K`OOQR'#K`'#K`OOQR'#JR'#JRO(:aQ!eO,59zOOQQ,59z,59zO(:hQbO,5?nOOQQ-E=Q-E=QO(:vQbO1G6eOOQR7+$}7+$}OOQR7+&q7+&qOOQR7+&x7+&xO'8|QUO7+&qO(;RQUO7+&OO#6WQUO7+&OO(;vQUO1G/TO(<^QUO1G/TO(<xQUO7+*SOOQQ7+*W7+*WO(>kQUO,5?uOOQQ-E=X-E=XO(?tQUO7+&ZOOQQ,5@Z,5@ZOOQQ-E=m-E=mO(?yQUO'#LPO@XQVO'#EiO(AVQUO1G1_OOQQ1G1_1G1_O(B`QUO,5@OOOQQ,5@O,5@OOOQQ-E=b-E=bO(BtQUO'#KqOOQR7+,x7+,xO#DhQUO7+,xOOQR7+,z7+,zO(CRQUO,5=jO#DsQUO'#JkO(CdQUO,5AsOOQR1G3V1G3VOOQR1G3W1G3WO(CrQUO7+,{OOQR7+,{7+,{O(EjQUO,5:wO(GXQUO'#EwO!(zQVO,5;VO(GzQUO,5:wO(HUQUO'#EpO(HgQUO'#EzOOQQ,5;Z,5;ZO#K]QVO'#ExO(H}QUO,5:wO(IUQUO'#EyO#GgQUO'#J[O(JnQUO,5AeOOQQ1G0p1G0pO(JyQUO,5;WO!<[QUO,5;^O(KdQUO,5;_O(KrQUO,5;WO(NUQUO,5;`OOQQ-E=Z-E=ZO(N^QUO1G0}OOQQ1G1O1G1OO) XQUO1G1OO)!_QVO1G1OO)!fQVO1G1OO)!pQUO1G0|OOQQ1G0|1G0|OOQQ1G1P1G1PO)#mQUO'#JpO)#wQUO,5A]OOQQ1G0b1G0bOOQQ-E=[-E=[O)$PQUO,5;iO!<[QUO,5;iO)$|QVO,5:zO)%TQUO,5;gO$ mQUO7+&YOOQQ7+&Y7+&YO!(zQVO'#EfO)%[QUO,5:|OOQQ'#Kt'#KtOOQQ-E=W-E=WOOQQ,5A_,5A_OOQQ'#Jm'#JmO))PQUO7+&PPOQQ7+&P7+&POOQQ7+)W7+)WO))wQUO7+)WO)*}QVO7+)WOOQQ,5>n,5>nO$)YQVO'#JtO)+UQUO,5@sOOQQ1G/R1G/ROOQQ7+$z7+$zO)+aQUO7+(SO)+fQUO7+(SOOQR7+(S7+(SO$>uQUO7+(SOOQQ7+%u7+%uOOQR-E=_-E=_O!0VQUO,5;oOOQQ,5@P,5@POOQQ-E=c-E=cO$0^QUO1G1iOOQQ1G1i1G1iOOQR7+'R7+'ROOQR1G1t1G1tOBUQUO,5;rO),SQUO,5<ZO),ZQUO1G1tO)-dQUO1G1tO!0tQVO7+'^O)-iQVO7+'^O)3XQUO7+'eO)3^QVO7+'iO)5rQUO7+'xO)5|QUO7+'iO)7SQVO7+'iOKkQUO7+'xO$>hQUO,5<sO!4xQUO7+'yO)7ZQUO7+'yOOQR7+(c7+(cO)7`QUO7+'{O)7eQUO,5<wO'DRQUO,5<wO)8]QUO,5<wO'DRQUO,5<wOOQQ,5<x,5<xO)8nQVO,5<yO'EaQUO'#JgO)8xQUO,5AnO)9QQUO,5<zOOQR7+'{7+'{O)9]QVO7+'WO)5uQUO'#LOOOQR-E=d-E=dO);nQVO,5<cOOQR1G1d1G1dOOQQ,5@S,5@SO!6nQUO,5@SOOQQ-E=f-E=fO)>VQUO7+(aO)?]QUO7+(eO)?bQVO7+(eOOQQ7+(m7+(mOOQQ7+)[7+)[O)?jQUO'#KkO)?tQUO'#KkOOQR,5=c,5=cO)@RQUO,5=cO!;bQUO,5=cO!;bQUO,5=cO!;bQUO,5=cOOQR7+(h7+(hOOQR7+(v7+(vOOQR7+(z7+(zOOQR,5=x,5=xO)@WQUO,5={O)A^QUO,5=zOOQR,5Av,5AvOOQR-E=j-E=jOOQQ1G3c1G3cO)BdQUO,5=yO)BiQVO'#EfOOQQ1G6c1G6cO%)_QUO1G6cO%)dQUO1G6cOOQQ1G0P1G0POOQQ-E=R-E=RO)EQQUO,5AWO(%wQUO'#JUO)E]QUO,5AWO)E]QUO,5AWO)EeQUO,5:iO8zQUO,5:iOOQQ,5>^,5>^O)EoQUO,5ArO)EvQUO'#EVO)GQQUO'#EVO)GkQUO,5:iO)GuQUO'#HmO)GuQUO'#HnOOQQ'#Kp'#KpO)HdQUO'#KpO!(zQVO'#HoOOQQ,5:i,5:iO)IUQUO,5:iO!M_QVO,5:iOOQQ-E=T-E=TOOQQ1G0S1G0SOOQQ,5>a,5>aO)IZQUO1G6cO!(zQVO,5>hO)LxQUO'#JsO)MTQUO,5AyOOQQ1G4R1G4RO)M]QUO,5AxOOQQ,5Ax,5AxOOQQ7+)j7+)jO*!zQUO7+)jOOQQ7+)p7+)pO*'yQVO1G7iO*){QUO7+*TO**QQUO,5?UO*+WQUO7+*]POOO7+$S7+$SP*,yQUO'#LgP*-RQUO,5BQP*-W{,UO7+$SPOOO1G7j1G7jO*-]QUO<<GvOOQQ1G.x1G.xOOQQ'#IU'#IUO*/OQUO,5@aOOQQ,5@a,5@aOOQQ-E=s-E=sOOQQ7+(W7+(WOOQQ<<Mt<<MtO*0XQUO<<MtO*2[QUO<<MwO*3}QUO<<L`O*4cQUO,5?}OOQQ,5?},5?}OOQQ-E=a-E=aOOQQ1G1b1G1bO*5lQUO,5;vO*6rQUO1G1aOOQQ1G1a1G1aOOQR,5@z,5@zO*7{Q!eO,5@zO*8SQMkO,5@zO*8ZQ!eO,5@zOOQR-E=P-E=POOQQ1G/f1G/fO*8bQ!eO'#DwOOQQ1G5Y1G5YOOQR<<J]<<J]O*8iQUO<<IjO*9^QUO7+$oOOQQ<<Iu<<IuO(8UQVO,5;ROOQR<=!d<=!dOOQQ1G3U1G3UOOQQ,5@V,5@VOOQQ-E=i-E=iOOQR<=!g<=!gO*:ZQUO1G0cO*:bQUO'#EzO*:rQUO1G0cO*:yQUO'#JOO*<aQUO1G0qO!(zQVO1G0qOOQQ,5;[,5;[OOQQ,5;],5;]OOQQ,5?v,5?vOOQQ-E=Y-E=YO!<[QUO1G0xO*=pQUO1G0xOOQQ1G0y1G0yO*>RQUO'#ElOOQQ1G0z1G0zOOQQ7+&j7+&jO*>gQUO7+&jO*?mQVO7+&jOOQQ7+&h7+&hOOQQ,5@[,5@[OOQQ-E=n-E=nO*@iQUO1G1TO*@sQUO1G1TO*A^QUO1G0fOOQQ1G0f1G0fO*BdQUO'#K|O*BlQUO1G1ROOQQ<<It<<ItOOQQ'#Hc'#HcO'+mQUO,5=|OOQQ'#He'#HeO'+mQUO,5>OOOQQ-E=k-E=kPOQQ<<Ik<<IkPOQQ-E=l-E=lOOQQ<<Lr<<LrO*BqQUO'#LbO*C}QUO'#LaOOQQ,5@`,5@`OOQQ-E=r-E=rOOQR<<Kn<<KnO$>uQUO<<KnO*D]QUO<<KnOOQR1G1Z1G1ZOOQQ7+'T7+'TO!M_QVO1G1uO*DbQUO1G1uOOQR7+'`7+'`OOQR<<Jx<<JxO!0tQVO<<JxOOQR<<KP<<KPO*DmQUO<<KTO*EsQVO<<KTOKkQUO<<KdO!M_QVO<<KdO*EzQUO<<KTO!0tQVO<<KTO*GTQUO<<KTO*GYQUO<<KdO*GeQUO<<KeOOQR<<Ke<<KeOOQR<<Kg<<KgO*GjQUO1G2cO)7eQUO1G2cO'DRQUO1G2cO*G{QUO1G2eO*IRQVO1G2eOOQQ1G2e1G2eO*I]QVO1G2eO*IdQUO,5@ROOQQ-E=e-E=eOOQQ1G2f1G2fO*IrQUO1G1}O*J{QVO1G1}O*KSQUO1G1}OOQQ1G5n1G5nOOQR<<K{<<K{OOQR<<LP<<LPO*KXQVO<<LPO*KdQUO<<LPOOQR1G2}1G2}O*KiQUO1G2}O*KpQUO1G3fOOQR1G3e1G3eOOQQ7++}7++}O%)_QUO7++}O*K{QUO1G6rO*K{QUO1G6rO(%wQUO,5?pO*LTQUO,5?pOOQQ-E=S-E=SO*L`QUO1G0TOOQQ1G0T1G0TO*LjQUO1G0TO!M_QVO1G0TO*LoQUO1G0TOOQQ1G3x1G3xO*LyQUO,5:qO)EvQUO,5:qO*MgQUO,5:qO)EvQUO,5:qO$#uQUO,5:uO*NUQVO,5>WO)GuQUO'#JqO*N`QUO1G0TO*NqQVO1G0TOOQQ1G3v1G3vO*NxQUO,5>XO+ TQUO,5>YO+ rQUO,5>ZO+!xQUO1G0TO%)dQUO7++}O+$OQUO1G4SOOQQ,5@_,5@_OOQQ-E=q-E=qOOQQ<<MU<<MUOOQQ<<Mo<<MoO+%XQUO1G4pP+'[QUO'#JwP+'dQUO,5BRPO{O1G7l1G7lPOOO<<Gn<<GnOOQQANC`ANC`OOQR1G6f1G6fO+'lQ!eO,5:cOOQQ,5:c,5:cO+'sQUO1G0mO+)PQUO7+&]O+*`QUO7+&dO+*qQUO,5;WOOQQ<<JU<<JUO++PQUO7+&oOOQQ7+&Q7+&QO!4xQUO'#J_O++zQUO,5AhOOQQ7+&m7+&mOOQQ1G3h1G3hO+,SQUO1G3jOOQQ,5>o,5>oO+/wQUOANAYOOQRANAYANAYO+/|QUO7+'aOOQRAN@dAN@dO+1YQVOAN@oO+1aQUOAN@oO!0tQVOAN@oO+2jQUOAN@oO+2oQUOANAOO+2zQUOANAOO+4QQUOANAOOOQRAN@oAN@oO!M_QVOANAOOOQRANAPANAPO+4VQUO7+'}O)7eQUO7+'}OOQQ7+(P7+(PO+4hQUO7+(PO+5nQVO7+(PO+5uQVO7+'iO+5|QUOANAkOOQR7+(i7+(iOOQR7+)Q7+)QO+6RQUO7+)QO+6WQUO7+)QOOQQ<= i<= iO+6`QUO7+,^O+6hQUO1G5[OOQQ1G5[1G5[O+6sQUO7+%oOOQQ7+%o7+%oO+7UQUO7+%oO*NqQVO7+%oOOQQ7+)b7+)bO+7ZQUO7+%oO+8aQUO7+%oO!M_QVO7+%oO+8kQUO1G0]O*LyQUO1G0]O)EvQUO1G0]OOQQ1G0a1G0aO+9YQUO1G3rO+:`QVO1G3rOOQQ1G3r1G3rO+:jQVO1G3rO+:qQUO,5@]OOQQ-E=o-E=oOOQQ1G3s1G3sO%)_QUO<= iOOQQ7+*[7+*[POQQ,5@c,5@cPOQQ-E=u-E=uOOQQ1G/}1G/}OOQQ,5?y,5?yOOQQ-E=]-E=]OOQRG26tG26tO+;YQUOG26ZO!0tQVOG26ZO+<cQUOG26ZOOQRG26ZG26ZO!M_QVOG26jO!0tQVOG26jO+<hQUOG26jO+=nQUOG26jO+=sQUO<<KiOOQQ<<Kk<<KkOOQRG27VG27VOOQR<<Ll<<LlO+>UQUO<<LlOOQQ7+*v7+*vOOQQ<<IZ<<IZO+>ZQUO<<IZO!M_QVO<<IZO+>`QUO<<IZO+?fQUO<<IZO*NqQVO<<IZOOQQ<<L|<<L|O+?wQUO7+%wO*LyQUO7+%wOOQQ7+)^7+)^O+@fQUO7+)^O+AlQVO7+)^OOQQANETANETO!0tQVOLD+uOOQRLD+uLD+uO+AsQUOLD,UO+ByQUOLD,UOOQRLD,ULD,UO!0tQVOLD,UOOQRANBWANBWOOQQAN>uAN>uO+COQUOAN>uO+DUQUOAN>uO!M_QVOAN>uO+DZQUO<<IcOOQQ<<Lx<<LxOOQR!$( a!$( aO!0tQVO!$( pOOQR!$( p!$( pOOQQG24aG24aO+DxQUOG24aO+FOQUOG24aOOQR!)9E[!)9E[OOQQLD){LD){O+FTQUO'#CgO(dQUO'#CgO+JQQUO'#CyO+LqQUO'#CyO!E{QUO'#CyO+MjQUO'#CyO+M}QUO'#CyO,#pQUO'#CyO,$QQUO'#CyO,$_QUO'#CyO,$jQbO,59cO,$uQbO,59cO,%QQbO,59cO,%]QbO'#CwO,%nQbO'#CwO,&PQbO'#CwO,&bQUO'#CgO,(uQUO'#CgO,)SQUO'#CgO,+wQUO'#CgO,.zQUO'#CgO,/[QUO'#CgO,3TQUO'#CgO,3[QUO'#CgO,4[QUO'#CgO,6eQUO,5:xO#?kQUO,5:xO#?kQUO,5:xO#=ZQUO'#L]O,7RQbO'#CwO,7^QbO'#CwO,7iQbO'#CwO,7tQbO'#CwO#6tQUO'#E^O,8PQUO'#E^O,9^QUO'#HhO,:OQbO'#CwO,:ZQbO'#CwO,:fQUO'#CvO,:kQUO'#CvO,:pQUO'#CoO,;OQbO,59cO,;ZQbO,59cO,;fQbO,59cO,;qQbO,59cO,;|QbO,59cO,<XQbO,59cO,<dQbO,59cO,6eQUO1G0dO,<oQUO1G0dO#?kQUO1G0dO,8PQUO1G0dO,>|QUO'#K[O,?^QUO'#CyO,?lQbO,59cO,6eQUO7+&OO,<oQUO7+&OO,?wQUO'#EwO,@jQUO'#EzO,AZQUO'#E^O,A`QUO'#GdO,AeQUO'#CvO,AjQUO'#CwO,AoQUO'#CwO,AtQUO'#CvO,AyQUO'#GdO,BOQUO'#K[O,BlQUO'#K[O,BvQUO'#CvO,CRQUO'#CvO,C^QUO'#CvO,<oQUO,5:xO,8PQUO,5:xO,8PQUO,5:xO,CiQUO'#K[O,C|QbO'#CwO,DXQUO'#CrO,D^QUO'#E^",
     stateData: ",ES~O(oOSSOSTOSRPQVPQ'fPQ'hPQ'iPQ'jPQ'kPQ'lPQ'mPQ'nPQ~O*[OS~OPmO]eOa!]Od!POlTOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O{#RO}!_O!TxO!VfO!X!XO!Y!WO!i!YO!opO!r!`O!s!aO!t!aO!u!bO!v!aO!x!cO!{!dO#V#QO#a#VO#b#TO#i#OO#p!xO#t!fO#v!eO$S!gO$U!hO$Z!vO$[!wO$a!iO$f!jO$h!kO$i!lO$l!mO$n!nO$p!oO$r!pO$t!qO$v!rO$x!sO$|!tO%O!uO%V!yO%`#ZO%a#[O%b#YO%d!zO%f#UO%h!{O%m#SO%p!|O%w!}O%}#PO&n!RO&s#WO&t!TO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(sRO)QYO)TaO)V|O)W{O)XiO)Y!ZO)ZXO)icO)jdO~OR#bOV#]O'f#^O'h#_O'i#`O'j#`O'k#aO'l#aO'm#_O'n#_O~OX#dO(q#dO(r#fO~O]ZX]iXdiXlgXpZXpiXriXsiXtiXuiXviXwiXxiXyiX}iX!TiX!VZX!ViX!XZX!YZX![ZX!^ZX!_ZX!aZX!bZX!cZX!eZX!fZX!gZX!hZX!riX!siX!tiX!uiX!viX!xiX!{iX%wiX&siX&tiX(siX(vZX(w$^X(xZX(yZX)TZX)TiX)UZX)VZX)ViX)WZX)WiX)XZX)YZX)kZX~O)XiX!UZX~P(dO]#}O!V#lO!X#{O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(v#gO(x#kO(y#kO)T#mO)U#oO)V#nO)W#pO)X#jO)Y#|O~Od$RO%Z$SO']$TO'`$UO(z$OO~Ol$VO~O!T$WO])OXd)OXr)OXs)OXt)OXu)OXv)OXw)OXx)OXy)OX})OX!V)OX!r)OX!s)OX!t)OX!u)OX!v)OX!x)OX!{)OX%w)OX&s)OX&t)OX(s)OX)T)OX)V)OX)W)OX)X)OX~Ol$VO~P.ZOl$VO!g$YO)k$YO~OX$ZO)[$ZO~O!R$[O)Y)RP)^)RP~OPmO]$eOa!]Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O{#RO}!_O!TxO!V$fO!X!XO!Y!WO!i!YO!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO#V#QO#a#VO#b#TO#v!eO$Z!vO$[!wO$a!iO$f!jO$h!kO$i!lO$l!mO$n!nO$p!oO$r!pO$t!qO$v!rO$x!sO%`#ZO%a#[O%b#YO%f#UO%m#SO%w$mO&n!RO&s#WO&t!TO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO)QYO)T$kO)W$kO)XiO)Y!ZO)ZXO)icO)jdO~Ol$_O#t$lO(sRO~P0zO](^Xa'zXd(^Xl'zXl(^Xr'zXr(^Xs'zXs(^Xt'zXt(^Xu'zXu(^Xv'zXv(^Xw'zXw(^Xx'zXx(^Xy'zXy(^X{'zX}'zX!V(^X!o(^X!r'zX!r(^X!s'zX!s(^X!t'zX!t(^X!u'zX!u(^X!v'zX!v(^X!x'zX!x(^X!{(^X#a'zX#b'zX%f'zX%m'zX%p(^X%w(^X&n'zX&s'zX&t'zX(s'zX(s(^X)T(^X)V(^X)W(^X~Oa!TOl$oOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O{#RO}!_O!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO#a#VO#b#TO%f#UO%m#SO&n!RO&s#WO&t!TO(s$nO~Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O}!_O!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO&s#WO&t$wO])bXd)bXl)bX!V)bX!{)bX%w)bX(s)bX)T)bX)V)bX)W)bX~O)X$vO~P:nOPmO]eOd!POr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!VfO!X!XO!Y!WO!i!YO!{!dO#V#QO%`#ZO%a#[O%b#YO%w$mO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO)TaO)V|O)W{O)Y!ZO)ZXO)icO)jdO~Oa%QOl;OO!|%RO(s$xO~P<lO)T%SO~Oa!]Ol$_O{#RO#a#VO#b#TO%f#UO%m#SO&n!RO&s#WO&t!TO(s;RO~P<lOPmO]$eOa%QOl;OO!V$fO!W%_O!X!XO!Y!WO!i!YO#V#QO%`#ZO%a#[O%b#YO%w$mO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(s$xO)T$kO)W%]O)Y!ZO)ZXO)icO)jdO)k%[O~O]%hOd!POl%bO!V%kO!{!dO%w$mO(s;SO)T%dO)V%iO)W%iO~O(w%mO~O)X#jO~O(s%nO](uX!V(uX!X(uX!Y(uX![(uX!^(uX!_(uX!a(uX!b(uX!c(uX!e(uX!f(uX!h(uX(v(uX(x(uX(y(uX)T(uX)U(uX)V(uX)W(uX)X(uX)Y(uX!g(uX)k(uX!O(uX!W(uX(w(uX!U(uXQ(uX!d(uX~OP%oO(pQO~PCQO]%hOd!POr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!V%kO!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO!{!dO%p!|O%w!}O)T;dO)V|O)W|O~Ol%rO!o%wO(s$xO~PE_O!TxO#v!eO(w%yO)k%|O])fX!V)fX~O]%hOd!POl%rO!V%kO!{!dO%w!}O(s$xO)T;dO)V|O)W|O~O!TxO#v!eO)X&PO)k&QO~O!U&TO~P!QO]&YO!TxO!V&WO)T&VO)V&ZO)W&ZO~Op&UO~PHrO]&cO!V&bO~OPmO]eOd!PO!VfO!X!XO!Y!WO!i!YO!{!dO#V#QO%`#ZO%a#[O%b#YO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO)TaO)V|O)W{O)Y!ZO)ZXO)icO)jdO~Oa%QOl;OO%w$mO(s$xO~PIgO]%hOd!POl;`O!V%kO!{!dO%w$mO(s$xO)T;dO)V|O)W|O~Op&fO](uX])fX!V(uX!V)fX!X(uX!Y(uX![(uX!^(uX!_(uX!a(uX!b(uX!c(uX!e(uX!f(uX!h(uX(v(uX(x(uX(y(uX)T(uX)U(uX)V(uX)W(uX)X(uX)Y(uX!O(uX!O)fX!U(uX~O!g$YO)k$YO~PL]O!g(uX)k(uX~PL]O](uX!V(uX!X(uX!Y(uX![(uX!^(uX!_(uX!a(uX!b(uX!c(uX!e(uX!f(uX!h(uX(v(uX(x(uX(y(uX)T(uX)U(uX)V(uX)W(uX)X(uX)Y(uX!g(uX)k(uX!O(uX!U(uX~O])fX!V)fX!O)fX~PNkOa&hO&n!RO]&mXd&mXl&mXr&mXs&mXt&mXu&mXv&mXw&mXx&mXy&mX}&mX!V&mX!r&mX!s&mX!t&mX!u&mX!v&mX!x&mX!{&mX%w&mX&s&mX&t&mX(s&mX)T&mX)V&mX)W&mX)X&mX!O&mX!T&mX!X&mX!Y&mX![&mX!^&mX!_&mX!a&mX!b&mX!c&mX!e&mX!f&mX!h&mX(v&mX(x&mX(y&mX)U&mX)Y&mX!g&mX)k&mX!W&mXQ&mX!d&mX(w&mX!U&mX#v&mX~Op&fOl)OX!O)OXQ)OX!d)OX!h)OX)Y)OX)k)OX~P.ZO!g$YO)k$YO](uX!V(uX!X(uX!Y(uX![(uX!^(uX!_(uX!a(uX!b(uX!c(uX!e(uX!f(uX!h(uX(v(uX(x(uX(y(uX)T(uX)U(uX)V(uX)W(uX)X(uX)Y(uX!O(uX!W(uX(w(uX!U(uXQ(uX!d(uX~OPmO]$eOa%QOl;OO!V$fO!X!XO!Y!WO!i!YO#V#QO%`#ZO%a#[O%b#YO%w$mO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(s$xO)T$kO)W$kO)Y!ZO)ZXO)icO)jdO~O])OXd)OXl)OXr)OXs)OXt)OXu)OXv)OXw)OXx)OXy)OX})OX!V)OX!r)OX!s)OX!t)OX!u)OX!v)OX!x)OX!{)OX%w)OX&s)OX&t)OX(s)OX)T)OX)V)OX)W)OX)X)OX!O)OXQ)OX!d)OX!h)OX)Y)OX)k)OX~O]#}O~P!*qO]&lO~O])cXa)cXd)cXl)cXr)cXs)cXt)cXu)cXv)cXw)cXx)cXy)cX{)cX})cX!V)cX!o)cX!r)cX!s)cX!t)cX!u)cX!v)cX!x)cX!{)cX#a)cX#b)cX%f)cX%m)cX%p)cX%w)cX&n)cX&s)cX&t)cX(s)cX)T)cX)V)cX)W)cX~O(pQO~P!-ZO%V&nO~P!-ZO]&oO~O]#}O~O!TxO~O$X&wO(s%nO(w&vO~O]&xOw&zO~O]&xO~OPmO]$eOa%QOl;OO!TxO!V$fO!X!XO!Y!WO!i!YO#V#QO#p!xO#v!eO$Z!vO$[!wO$a!iO$f!jO$h!kO$i!lO$l!mO$n!nO$p!oO$r!pO$t!qO$v!rO$x!sO%`#ZO%a#[O%b#YO%w$mO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(s:qO)QYO)T$kO)W$kO)XiO)Y!ZO)ZXO)icO)jdO~O]'PO~O!T$WO)X'RO~P!(zO)X'TO~O)X'UO~O(s'VO~O)X'YO~P!(zOl;bO%V'^O%f'^O(s;TO~Oa!TOl$oOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O{#RO#a#VO#b#TO%f#UO%m#SO&n!RO&s#WO&t!TO(s$nO~O(w'bO~O)X'dO~P!(zO!T'eO(s%nO)k'gO~O(s%nO~O]'jO~O]'kOd%oXl%oX!V%oX!{%oX%w%oX(s%oX)T%oX)V%oX)W%oX~O]'oO!V'pO!X'mO!g'mO%['mO%]'mO%^'mO%_'mO%`'qO%a'qO%b'mO(y'nO)k'mO)y'rO~P8zO]%hOa!TOd!POr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O{#RO}!_O!V%kO!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO!{!dO#a#VO#b#TO%f#UO%m#SO&n!RO&s#WO&t!TO)T;dO)V|O)W|O~Ol;cOp&UO%w$mO(s;UO~P!8jO(s%nO(w'wO)X'xO~O]&cO!T'zO~Ol$oO}!_O!T(RO!l(WO(s$nO(w(QO)QYO~Ol$oO{(_O!T([O#b(_O(s$nO~Oa!TOl$oO{#RO#a#VO#b#TO%f#UO%m#SO&n!RO&s#WO&t!TO(s$nO~O](aO~OPmOa%QOl;OO!V$fO!X!XO!Y!WO!i!YO#V#QO%`#ZO%a#[O%b#YO%w$mO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(s$xO)T$kO)W$kO)ZXO)icO)jdO~O](cO)Y(dO~P!=UO]#}O~P!<[OPmO]$eOa%QOl;OO!V(jO!X!XO!Y!WO!i!YO#V#QO%`#ZO%a#[O%b#YO%w$mO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(s$xO)T$kO)W$kO)Y!ZO)ZXO)icO)jdO~OY(kO(pQO(s%nO~O'g(nO~OS(rOT(oO*X(qO~O]#}O(o(uO~Q'oXX#dO(q#dO(r(wO~Od)ROl(|O&s#WO(s({O~O!Y'Ta!['Ta!^'Ta!_'Ta!a'Ta!b'Ta!c'Ta!e'Ta!f'Ta!h'Ta(v'Ta)T'Ta)U'Ta)V'Ta)W'Ta)X'Ta)Y'Ta!g'Ta)k'Ta!O'Ta!W'Ta(w'Ta!U'TaQ'Ta!d'Ta~OPmOa%QOl;OO!i!YO#V#QO%`#ZO%a#[O%b#YO%w$mO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(s$xO)ZXO)icO)jdO]'Ta!V'Ta!X'Ta(x'Ta(y'Ta~P!B_O!T$WO!O(tP~P!(zO]nX]%XXdnXlmXpnXp%XXrnXsnXtnXunXvnXwnXxnXynX}nX!TnX!VnX!V%XX!X%XX!Y%XX![%XX!^%XX!_%XX!a%XX!b%XX!c%XX!e%XX!f%XX!gmX!h%XX!rnX!snX!tnX!unX!vnX!xnX!{nX%wnX&snX&tnX(snX(v%XX(x%XX(y%XX)TnX)T%XX)U%XX)VnX)V%XX)WnX)W%XX)X%XX)Y%XX)kmX!O%XX~O)XnX!OnX!U%XX~P!E{O])eO!V)fO!X)cO!g)cO%[)cO%])cO%^)cO%_)cO%`)gO%a)gO%b)cO(y)dO)k)cO)y)hO~P8zOPmO]$eOa%QOl;OO!X!XO!Y!WO!i!YO#V#QO%`#ZO%a#[O%b#YO%w$mO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(s$xO)T$kO)W$kO)Y!ZO)ZXO)icO)jdO~O!V)mO~P!JwOd)pO%Z)qO(z$OO~O!T$WO!V)sO(x)tO!U)sP~P!JwO!T$WO~P!(zO)]){O~Ol)|O]!QX!h!QX)Y!QX)^!QX~O]*OO!h*PO)Y)RX)^)RX~O)Y*TO)^*SO~Od$RO%Z*UO']$TO'`$UO(z$OO~Ol*VO~Ol*VO!O)OX~P.ZOl*VO!g$YO)k$YO~O)X*WO~P:nOPmO]$eOa!]Ol$_Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O{#RO!V$fO!X!XO!Y!WO!i!YO#V#QO#a#VO#b#TO%`#ZO%a#[O%b#YO%f#UO%m#SO%w$mO&n!RO&s#WO&t!TO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(s;RO)T$kO)W$kO)Y!ZO)ZXO)icO)jdO~Op&fO~P!&zOp&fO!W(uX(w(uXQ(uX!d(uX~PNkO]'oO!V'pO!X'mO!g'mO%['mO%]'mO%^'mO%_'mO%`'qO%a'qO%b'mO(y'nO)k'mO)y'rO~O]iXdiXlgXpiXriXsiXtiXuiXviXwiXxiXyiX}iX!ViX!riX!siX!tiX!uiX!viX!xiX!{iX%wiX&siX&tiX(siX)TiX)ViX)WiX!TiX!hiX)YiX)kiX!OiX~O!liX(wiX)XiX!XiX!YiX![iX!^iX!_iX!aiX!biX!ciX!eiX!fiX(viX(xiX(yiX)UiX!giX!WiXQiX!diX!UiX#viX#TiX#ViX#piXaiX{iX!oiX#aiX#biX#iiX#tiX$|iX%diX%fiX%liX%miX%piX&niX)QiX~P#%yO(z*[O~Ol*]O~O])OXd)OXr)OXs)OXt)OXu)OXv)OXw)OXx)OXy)OX})OX!V)OX!r)OX!s)OX!t)OX!u)OX!v)OX!x)OX!{)OX%w)OX&s)OX&t)OX(s)OX)T)OX)V)OX)W)OX)X)OX!T)OX!X)OX!Y)OX![)OX!^)OX!_)OX!a)OX!b)OX!c)OX!e)OX!f)OX!h)OX(v)OX(x)OX(y)OX)U)OX)Y)OX!g)OX)k)OX!O)OX!W)OXQ)OX!d)OX(w)OX!U)OX#v)OX~Ol*]O~P#+ROr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O}!_O!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO])bad)bal)ba!V)ba!{)ba%w)ba(s)ba)T)ba)V)ba)W)baQ)ba!d)ba!h)ba)Y)ba)k)ba!O)ba!T)ba(w)ba)X)ba~O&s#WO&t$wO~P#.qOp&fOl)OX~P#+RO&s)ba~P#.qO]ZXlgXpZXpiX!TiX!VZX!XZX!YZX![ZX!^ZX!_ZX!aZX!bZX!cZX!eZX!fZX!gZX!hZX(vZX(xZX(yZX)TZX)UZX)VZX)WZX)XZX)YZX)kZX!OZX~O!WZX(wZX!UZXQZX!dZX~P#1jO]#}O!V#lO!X#{O(x#kO(y#kO~O!Y&ya![&ya!^&ya!_&ya!a&ya!b&ya!c&ya!e&ya!f&ya!g&ya!h&ya(v&ya)T&ya)U&ya)V&ya)W&ya)X&ya)Y&ya)k&ya!O&ya!W&ya(w&ya!U&yaQ&ya!d&ya~P#3zOl;lO!T$WO~Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O~PKkOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!|%RO~PKkO]&cO!V&bO!O#Qa!T#Qa!h#Qa#v#Qa)X#Qa)k#QaQ#Qa!d#Qa(w#Qa~Op&fO!T$WO~O!O*dO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!O*dO~O]&cO!O*fO!V&bO~O]&YOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!V&WO&s#WO&t$wO)T&VO)V&ZO)W&ZO~O!OqXQqX!dqX!hqX)YqX)XqX~P#9{O!O*iO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h*jO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!W)lX~P#3zO!W*lO!h*mO~O!W*lO!h*mO~P!(zO!W*lO~Op&fO!g$YO!h*nO)k$YO](uX!V(uX!W(uX!W*PX!X(uX!Y(uX![(uX!^(uX!_(uX!a(uX!b(uX!c(uX!e(uX!f(uX(v(uX(x(uX(y(uX)T(uX)U(uX)V(uX)W(uX)Y(uX~O!h(uX~P#=ZO!W*pO~Od$RO%Z*UO(z:vO~Ol;oO~Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!|%RO~PBUO]*wO!T*rO!V&bO!h*uO#v!eO)k*sO)X)rX~O!h*uO)X)rX~O)X*xO~Op&fO])fX!T)fX!V)fX!h)fX#v)fX)X)fX)k)fX!O)fXQ)fX!d)fX(w)fX~Op&fO~OP%oO(pQO]%ia!V%ia!X%ia!Y%ia![%ia!^%ia!_%ia!a%ia!b%ia!c%ia!e%ia!f%ia!h%ia(s%ia(v%ia(x%ia(y%ia)T%ia)U%ia)V%ia)W%ia)X%ia)Y%ia!g%ia)k%ia!O%ia!W%ia(w%ia!U%iaQ%ia!d%ia~Od$RO%Z$SO(z:sO~Ol:{O~O!TxO#v!eO)k%|O~Ol<`O&s#WO(s;kO~O$[+UO%a+VO~O!TxO#v!eO)X+WO)k+XO~OPmO]$eOa%QOl;OO!V$fO!X!XO!Y!WO!i!YO#V#QO$[+UO%`#ZO%a+ZO%b#YO%w$mO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(s$xO)T$kO)W$kO)Y!ZO)ZXO)icO)jdO~O!U+[O~P!QOa!TOl$oOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O{#RO}!_O!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO#a+bO#b+cO#i+dO%f#UO%m#SO&n!RO&s#WO&t!TO(s$nO)QYO~OQ)mP!d)mP~P#GgO]&YOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!V&WO)T&VO)V&ZO)W&ZO~O!O#kX!T#kX#v#kX)X#kX)k#kXQ#kX!d#kX!h#kX)Y#kX!x#kX(w#kX~P#IkOPmO]$eOa%QOl;OOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!V$fO!W+jO!X!XO!Y!WO!i!YO#V#QO%`#ZO%a#[O%b#YO%w$mO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(s$xO)T+kO)W$kO)Y!ZO)ZXO)icO)jdO~O]&cO!V+lO~O]&YO!V&WO)QYO)T&VO)V&ZO)W&ZO)Y+oO!O)eP~P8zO]&YO!V&WO)T&VO)V&ZO)W&ZO~O!O#nX!T#nX#v#nX)X#nX)k#nXQ#nX!d#nX!h#nX)Y#nX!x#nX(w#nX~P#NeO!TxO])oX!V)oX~Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O#T+wO#p+xO(y+uO)V+sO)W+sO~O]#jX!T#jX!V#jX!O#jX#v#jX)X#jX)k#jXQ#jX!d#jX!h#jX)Y#jX!x#jX(w#jX~P$ xO#V+zO~Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!l+{O#T+wO#V+zO#p+xO(y+uO)V+{O)W+{O])gP!T)gP!V)gP#v)gP(w)gP)k)gP!O)gP!h)gP)X)gP~O!x)gPQ)gP!d)gP~P$#uOPmO]$eOa%QOl;OOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!V$fO!X!XO!Y!WO!i!YO#V#QO%`#ZO%a#[O%b#YO%w$mO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(s$xO)W$kO)Y!ZO)ZXO)icO)jdO~O!W,RO)T,SO~P$%pO)QYO)Y+oO!O)eP~P8zO]&cO!V&bO!O&[a!T&[a!h&[a#v&[a)X&[a)k&[aQ&[a!d&[a(w&[a~OPmO]$eOa!]Ol;QOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O{#RO!V$fO!X!XO!Y!WO!i!YO#V#QO#a#VO#b#TO%`#ZO%a#[O%b#YO%f#UO%m#SO%w$mO&n!RO&s#WO&t!TO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(s;VO)T$kO)W$kO)Y!ZO)ZXO)icO)jdO~OQ({P!d({P~P$)YO]#}O!V#lO(x#kO(y#kO!X'Qa!Y'Qa!['Qa!^'Qa!_'Qa!a'Qa!b'Qa!c'Qa!e'Qa!f'Qa!h'Qa(v'Qa)T'Qa)U'Qa)V'Qa)W'Qa)X'Qa)Y'Qa!g'Qa)k'Qa!O'Qa!W'Qa(w'Qa!U'QaQ'Qa!d'Qa~O]#}O!V#lO!X#{O(x#kO(y#kO~P!B_O!T'eO#t!fO)QYO~P8zO!T'eO(s%nO)k,]O~O#x,bO~OQ)bX!d)bX!h)bX)Y)bX)k)bX!O)bX!T)bX(w)bX)X)bX~P:nO(w,fO(x,dO)Q$VX)X$VX~O(s,gO~O)QYO)X,jO~OPmO]$eOa!]Ol;POr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O{#RO}!_O!V$fO!X!XO!Y!WO!i!YO!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO#V#QO#a#VO#b#TO%`#ZO%a#[O%b#YO%f#UO%m#SO%w$mO&n!RO&s#WO&t!TO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO)QYO)T$kO)W$kO)XiO)Y!ZO)ZXO)icO)jdO~O(s;WO~P$0kOPmO]$eOa%QOl;OO!TxO!V$fO!X!XO!Y!WO!i!YO#V#QO#v!eO$Z!vO$[!wO$a!iO$f!jO$h!kO$i!lO$l!mO$n!nO$p!oO$r!pO$t!qO$v!rO$x!sO%`#ZO%a#[O%b#YO%w$mO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(s:qO)QYO)T$kO)W$kO)XiO)Y!ZO)ZXO)icO)jdO~O$i,tO~OPmO]$eOa!]Ol;POr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O{#RO}!_O!V$fO!X!XO!Y!WO!i!YO!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO#V#QO#a#VO#b#TO%O!uO%`#ZO%a#[O%b#YO%f#UO%m#SO%w$mO&n!RO&s#WO&t!TO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO)QYO)T$kO)W$kO)Y!ZO)ZXO)icO)jdO~O$|,zO(s;RO)X,xO~P$7UO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(v#gO)T#mO)U#oO)V#nO)W#pO)X,|O)Y#|O~P#3zO)X,|O~O)X,}O~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)X-OO)Y#|O~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)X-PO)Y#|O~P#3zOp&fO)QYO)k-RO~O)X-SO~Ol;bO(s;TO~O]-ZO!{!dO&s#WO&t$wO(s-VO)T-WO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO(w-^O)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!TxO$a!iO$f!jO$h!kO$i!lO$l-cO$n!nO$p!oO$r!pO$t!qO$v!rO$x!sO%O!uO(s:rOd$Ya!o$Ya!{$Ya#i$Ya#p$Ya#t$Ya#v$Ya$S$Ya$U$Ya$Z$Ya$[$Ya$|$Ya%V$Ya%d$Ya%h$Ya%p$Ya%}$Ya(l$Ya)V$Ya!U$Ya$d$Ya~P$0kO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)X-dO)Y#|O~P#3zO!U-eO~P!QOl-hO!T'eO)k,]O~O)k-jO~O]&^a!X&^a!Y&^a![&^a!^&^a!_&^a!a&^a!b&^a!c&^a!e&^a!f&^a!h&^a(v&^a(x&^a(y&^a)U&^a)V&^a)W&^a)X&^a)Y&^a!g&^a)k&^a!O&^a!W&^a!T&^a#v&^a(w&^a!U&^aQ&^a!d&^a~O)T-nO!V&^a~P$DiO!O-nO~O!W-nO~O!V-oO)T&^a~P$DiO])OXd)OXr)OXs)OXt)OXu)OXv)OXw)OXx)OXy)OX})OX!V)OX!r)OX!s)OX!t)OX!u)OX!v)OX!x)OX!{)OX%w)OX&s)OX&t)OX(s)OX)T)OX)V)OX)W)OX~Ol;qO~P$GXO]&cO!V&bO)X-pO~Ol;gO!o-sO#V+zO#i-xO#t!fO$|,zO%d!zO%l-wO%p!|O%w!}O(s;XO)QYO~P!8jO!n-|O(s,gO~O)QYO)X.OO~OPmO]$eOa%QOl;OO!T.TO!V$fO!X!XO!Y!WO!i!YO#V.[O#a.ZO%`#ZO%a#[O%b#YO%w$mO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(s$xO(y.SO)T$kO)W$kO)X.QO)Y!ZO)ZXO)icO)jdO~O!U.YO~P$JiO])_Xd)_Xr)_Xs)_Xt)_Xu)_Xv)_Xw)_Xx)_Xy)_X})_X!T)_X!V)_X!l)_X!r)_X!s)_X!t)_X!u)_X!v)_X!x)_X!{)_X%w)_X&s)_X&t)_X(s)_X(w)_X)T)_X)V)_X)W)_X)X)_X!O)_X!h)_X)Y)_X!X)_X!Y)_X![)_X!^)_X!_)_X!a)_X!b)_X!c)_X!e)_X!f)_X(v)_X(x)_X(y)_X)U)_X!g)_X)k)_X!W)_XQ)_X!d)_X#T)_X#V)_X#p)_X#v)_Xa)_X{)_X!o)_X#a)_X#b)_X#i)_X#t)_X$|)_X%d)_X%f)_X%l)_X%m)_X%p)_X&n)_X)Q)_X!U)_X~Ol*]O~P$LsOl$oO!T(RO!l.aO(s$nO(w(QO)QYO~Op&fOl)_X~P$LsOl$oO!n.fO!o.fO(s$nO)QYO~Ol;hO!U.qO!n.sO!o.rO#i-xO$|!tO%O!uO%h!{O%l-wO%p!|O%w!}O(s;ZO)QYO~P!8jO!T(RO!l.aO(w(QO])PXd)PXl)PXr)PXs)PXt)PXu)PXv)PXw)PXx)PXy)PX})PX!V)PX!r)PX!s)PX!t)PX!u)PX!v)PX!x)PX!{)PX%w)PX&s)PX&t)PX(s)PX)T)PX)V)PX)W)PX~O)X)PX!O)PX!X)PX!Y)PX![)PX!^)PX!_)PX!a)PX!b)PX!c)PX!e)PX!f)PX!h)PX(v)PX(x)PX(y)PX)U)PX)Y)PX!g)PX)k)PX!W)PXQ)PX!d)PX!U)PX#v)PX~P%%lO!T(RO~O!T(RO(w(QO~O(s%nO!U*RP~O!T([O(w.xO]&lad&lal&lar&las&lat&lau&lav&law&lax&lay&la}&la!V&la!r&la!s&la!t&la!u&la!v&la!x&la!{&la%w&la&s&la&t&la(s&la)T&la)V&la)W&la)X&la!O&la!X&la!Y&la![&la!^&la!_&la!a&la!b&la!c&la!e&la!f&la!h&la(v&la(x&la(y&la)U&la)Y&la!g&la)k&la!W&laQ&la!d&la!U&la#v&la~Ol$oO!T([O(s$nO~O&s#WO&t$wO]&qad&qal&qar&qas&qat&qau&qav&qaw&qax&qay&qa}&qa!V&qa!r&qa!s&qa!t&qa!u&qa!v&qa!x&qa!{&qa%w&qa(s&qa)T&qa)V&qa)W&qa)X&qa!O&qa!T&qa!X&qa!Y&qa![&qa!^&qa!_&qa!a&qa!b&qa!c&qa!e&qa!f&qa!h&qa(v&qa(x&qa(y&qa)U&qa)Y&qa!g&qa)k&qa!W&qaQ&qa!d&qa(w&qa!U&qa#v&qa~O&t.}O~P!(zO!Y#qO![#rO!f#zO)T#mO!^'Va!_'Va!a'Va!b'Va!c'Va!e'Va!h'Va(v'Va)U'Va)V'Va)W'Va)X'Va)Y'Va!g'Va)k'Va!O'Va!W'Va(w'Va!U'VaQ'Va!d'Va~P#3zO!V'eX!X'eX!Y'eX!['eX!^'eX!_'eX!a'eX!b'eX!c'eX!e'eX!f'eX!h'eX(v'eX(x'eX(y'eX)T'eX)U'eX)V'eX)W'eX)Y'eX!O'eX~O]/PO)X'eX!g'eX)k'eX!W'eX(w'eX!U'eXQ'eX!d'eX~P%3PO!Y#qO![#rO!f#zO)T#mO!^'Xa!_'Xa!a'Xa!b'Xa!c'Xa!e'Xa!h'Xa(v'Xa)U'Xa)V'Xa)W'Xa)X'Xa)Y'Xa!g'Xa)k'Xa!O'Xa!W'Xa(w'Xa!U'XaQ'Xa!d'Xa~P#3zO]#}O!T$WO!V/QO&s#WO&t$wO~O!X'[a!Y'[a!['[a!^'[a!_'[a!a'[a!b'[a!c'[a!e'[a!f'[a!h'[a(v'[a(x'[a(y'[a)T'[a)U'[a)V'[a)W'[a)X'[a)Y'[a!g'[a)k'[a!O'[a!W'[a(w'[a!U'[aQ'[a!d'[a~P%6vO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!h'_a)X'_a!g'_a)k'_a!O'_a!W'_a(w'_a!U'_aQ'_a!d'_a~P#3zOPmO]$eOa%QOl;OO!V$fO!X!XO!Y!WO!i!YO#V#QO%`#ZO%a#[O%b#YO%w$mO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(s$xO)T$kO)W%]O)Y!ZO)ZXO)icO)jdO)k%[O~O!W/TO~P%:vOS(rOT(oO]#}O*X(qO~O]/WO'g/XO*X/UO~OS/]OT(oO*X/[O~O]#}O~Q'oa!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO(w/_O)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O)X#Zi!O#Zi~P#3zO]cXlgXpcXpiX!VcX!XcX!YcX![cX!^cX!_cX!acX!bcX!ccX!ecX!fcX!gcX!hcX(vcX(xcX(ycX)TcX)UcX)VcX)WcX)XcX)YcX)kcX!OcX!WcX(wcX!TcX#vcX!UcXQcX!dcX~Od/aO%Z*UO(z/`O~Ol/bO~Ol/cO~Op&fO]bi!Vbi!Xbi!Ybi![bi!^bi!_bi!abi!bbi!cbi!ebi!fbi!gbi!hbi(vbi(xbi(ybi)Tbi)Ubi)Vbi)Wbi)Xbi)Ybi)kbi!Obi!Wbi(wbi!UbiQbi!dbi~O!W/eO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO![#rO)T#mO!Y&{i!^&{i!_&{i!a&{i!b&{i!c&{i!e&{i!f&{i!h&{i(v&{i)U&{i)V&{i)W&{i)X&{i)Y&{i!g&{i)k&{i!O&{i!W&{i(w&{i!U&{iQ&{i!d&{i~P#3zO!Y&{i![&{i!^&{i!_&{i!a&{i!b&{i!c&{i!e&{i!f&{i!h&{i(v&{i)T&{i)U&{i)V&{i)W&{i)X&{i)Y&{i!g&{i)k&{i!O&{i!W&{i(w&{i!U&{iQ&{i!d&{i~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO)T#mO)W#pO!h&{i(v&{i)U&{i)V&{i)X&{i)Y&{i!g&{i)k&{i!O&{i!W&{i(w&{i!U&{iQ&{i!d&{i~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO)T#mO)V#nO)W#pO!h&{i(v&{i)U&{i)X&{i)Y&{i!g&{i)k&{i!O&{i!W&{i(w&{i!U&{iQ&{i!d&{i~P#3zO!Y#qO![#rO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO)T#mO)W#pO!^&{i!h&{i(v&{i)U&{i)V&{i)X&{i)Y&{i!g&{i)k&{i!O&{i!W&{i(w&{i!U&{iQ&{i!d&{i~P#3zO!Y#qO![#rO!a#xO!b#yO!c#yO!e#yO!f#zO)T#mO)W#pO!^&{i!_&{i!h&{i(v&{i)U&{i)V&{i)X&{i)Y&{i!g&{i)k&{i!O&{i!W&{i(w&{i!U&{iQ&{i!d&{i~P#3zO!Y#qO![#rO!a#xO!b#yO!c#yO!e#yO!f#zO)T#mO!^&{i!_&{i!h&{i(v&{i)U&{i)V&{i)W&{i)X&{i)Y&{i!g&{i)k&{i!O&{i!W&{i(w&{i!U&{iQ&{i!d&{i~P#3zO!Y#qO![#rO!b#yO!c#yO!e#yO!f#zO)T#mO!^&{i!_&{i!a&{i!h&{i(v&{i)U&{i)V&{i)W&{i)X&{i)Y&{i!g&{i)k&{i!O&{i!W&{i(w&{i!U&{iQ&{i!d&{i~P#3zO!Y#qO![#rO!f#zO)T#mO!^&{i!_&{i!a&{i!b&{i!c&{i!e&{i!h&{i(v&{i)U&{i)V&{i)W&{i)X&{i)Y&{i!g&{i)k&{i!O&{i!W&{i(w&{i!U&{iQ&{i!d&{i~P#3zO!Y#qO![#rO)T#mO!^&{i!_&{i!a&{i!b&{i!c&{i!e&{i!f&{i!h&{i(v&{i)U&{i)V&{i)W&{i)X&{i)Y&{i!g&{i)k&{i!O&{i!W&{i(w&{i!U&{iQ&{i!d&{i~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO)T#mO)U#oO)V#nO)W#pO!h&{i(v&{i)X&{i)Y&{i!g&{i)k&{i!O&{i!W&{i(w&{i!U&{iQ&{i!d&{i~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h/fO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!O(tX~P#3zO!h/fO!O(tX~O!O/hO~O]%Yap%Ya!X%Ya!Y%Ya![%Ya!^%Ya!_%Ya!a%Ya!b%Ya!c%Ya!e%Ya!f%Ya!h%Ya(v%Ya(x%Ya(y%Ya)U%Ya)V%Ya)W%Ya)X%Ya)Y%Ya!g%Ya)k%Ya!O%Ya!W%Ya!T%Ya#v%Ya(w%Ya!U%YaQ%Ya!d%Ya~O)T/iO!V%Ya~P&,hO!O/iO~O!W/iO~O!V/jO)T%Ya~P&,hO!X'[i!Y'[i!['[i!^'[i!_'[i!a'[i!b'[i!c'[i!e'[i!f'[i!h'[i(v'[i(x'[i(y'[i)T'[i)U'[i)V'[i)W'[i)X'[i)Y'[i!g'[i)k'[i!O'[i!W'[i(w'[i!U'[iQ'[i!d'[i~P%6vO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!h'_i)X'_i!g'_i)k'_i!O'_i!W'_i(w'_i!U'_iQ'_i!d'_i~P#3zO!W/oO~P%:vO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h/qO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!U)sX~P#3zO(s/tO~O!V/vO(x)tO)k/xO~O!h/qO!U)sX~O!U/yO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO)T#mO)U#oO)V#nO)W#pO)Y#|O!h_i(v_i)X_i!g_i)k_i!O_i!W_i(w_i!U_iQ_i!d_i~P#3zO!R/zO~Ol)|O]!Qa!h!Qa)Y!Qa)^!Qa~OP0SO]0ROl0SO!R0SO!T0PO!V0QO!X0SO!Y0SO![0SO!^0SO!_0SO!a0SO!b0SO!c0SO!e0SO!f0SO!g0SO!h0SO!i0SO(pQO(w0SO(x0SO(y0SO)T/|O)U/}O)V/}O)W0OO)X0SO)Y0SO)ZXO~O!O0VO~P&7QO!R$[O~O!h*PO)Y)Ra)^)Ra~O)^0ZO~O])eO!V)fO!X)cO!g)cO%[)cO%])cO%^)cO%_)cO%`)gO%a)gO%b)cO(y)dO)k)cO)y)hO~Od)pO%Z*UO(z$OO~O)X0]O~O]nXdnXlmXpnXrnXsnXtnXunXvnXwnXxnXynX}nX!VnX!rnX!snX!tnX!unX!vnX!xnX!{nX%wnX&snX&tnX(snX)TnX)VnX)WnX!TnX!hnX)YnX!OnXQnX!dnX~O!lnX(wnX)XnX!XnX!YnX![nX!^nX!_nX!anX!bnX!cnX!enX!fnX(vnX(xnX(ynX)UnX!gnX)knX!WnX!UnX#vnX#TnX#VnX#pnXanX{nX!onX#anX#bnX#inX#tnX$|nX%dnX%fnX%lnX%mnX%pnX&nnX)QnX~P&:|Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O}!_O!r!aO!s!aO!t!aO!u!aO!v!aO!x!cO~O])bid)bil)bi!V)bi!{)bi%w)bi(s)bi)T)bi)V)bi)W)biQ)bi!d)bi!h)bi)Y)bi)k)bi!O)bi!T)bi&s)bi(w)bi)X)bi~P&?zO]&cO!V&bO!O#Qi!T#Qi!h#Qi#v#Qi)X#Qi)k#QiQ#Qi!d#Qi(w#Qi~O!OqaQqa!dqa!hqa)Yqa)Xqa~P#9{O!OqaQqa!dqa!hqa)Yqa)Xqa~P#IkO]&cO!V+lO!OqaQqa!dqa!hqa)Yqa)Xqa~O!h*jO!W)la~O!h*nO!W*Pa~OPmO]eOa!]Od!POlTOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O{#RO}!_O!X!XO!Y!WO!i!YO!opO!r!`O!s!aO!t!aO!u!bO!v!aO!x!cO!{!dO#V#QO#a#VO#b#TO#i#OO#p!xO#t!fO#v!eO$S!gO$U!hO$Z!vO$[!wO$a!iO$f!jO$h!kO$i!lO$l!mO$n!nO$p!oO$r!pO$t!qO$v!rO$x!sO$|!tO%O!uO%V!yO%`#ZO%a#[O%b#YO%d!zO%f#UO%h!{O%m#SO%p!|O%w!}O%}#PO&n!RO&s#WO&t!TO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(sRO)QYO)TaO)V|O)W{O)XiO)Y!ZO)ZXO)icO)jdO~O!T*rO!U&TO!V0kO(x)tO~P&D|O!h*uO)X)ra~OPmO]$eOa!]Ol;QO{#RO!T$WO!V$fO!X!XO!Y!WO!i!YO#V#QO#a#VO#b#TO%`#ZO%a#[O%b#YO%f#UO%m#SO%w$mO&n!RO&s#WO&t!TO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(s;YO)QYO)T$kO)W$kO)Y0qO)ZXO)icO)jdO!O(tP!O)eP~P&?zO!h*nO!W*PX~O]#}O!T$WO~O!h0vO!T){X#v){X)k){X~O)X0xO~O)X0yO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)X0{O)Y#|O~P#3zO)X0yO~P!?WO]1VOd!POl%bO!V1TO!{!dO%w$mO(s$xO)T0}O)Y1QO~O)V1RO)W1RO)k1OOQ#PX!d#PX!h#PX!O#PX~P' kO!h1WOQ)mX!d)mX~OQ1YO!d1YO~O)Y1]O)k1[OQ#`X!d#`X!h#`X~P!<[O)Y1]O)k1[OQ#`X!d#`X!h#`X~P!;bOp&UO~O!O#ka!T#ka#v#ka)X#ka)k#kaQ#ka!d#ka!h#ka)Y#ka!x#ka(w#ka~P#IkO]&cO!V+lO!O#ka!T#ka#v#ka)X#ka)k#kaQ#ka!d#ka!h#ka)Y#ka!x#ka(w#ka~O!W1bO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!W1bO)T1dO~P$%pO!W1bO~P!(zO]#ja!T#ja!V#ja!O#ja#v#ja)X#ja)k#jaQ#ja!d#ja!h#ja)Y#ja!x#ja(w#ja~P$ xO]&cO!O1hO!V+lO~O!h1iO!O)eX~O!O1kO~O]&cO!V+lO!O#na!T#na#v#na)X#na)k#naQ#na!d#na!h#na)Y#na!x#na(w#na~O]1oOr#SXs#SXt#SXu#SXv#SXw#SXx#SXy#SX!T#SX!V#SX#T#SX#p#SX(y#SX)V#SX)W#SX!l#SX!x#SX#V#SX#v#SX(w#SX)k#SX!O#SX!h#SX)X#SXQ#SX!d#SX)Y#SX~O]1pO~O]1sOl$oO!V$fO#V#QO(s$nO)icO)jdO~Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!l+{O#T+wO#V+zO#p+xO(y+uO)V+{O)W+{O~O])gX!T)gX!V)gX!x)gX#v)gX(w)gX)k)gX!O)gX!h)gX)X)gXQ)gX!d)gX~P',UO!x!cO]#Ri!T#Ri!V#Ri#v#Ri(w#Ri)k#Ri!O#Ri!h#Ri)X#RiQ#Ri!d#Ri~O!W1{O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!W1{O)T1}O~P$%pO!W1{O~P!(zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|OQ*SX!d*SX!h*SX~P#3zO)Y2OOQ(|X!d(|X!h(|X~O!h2POQ({X!d({X~OQ2RO!d2RO~O!O2SO~O#t$lO)QYO~P8zOl-hO!T'eO)k2WO~O!O2XO~O#x,bOP#ui]#uia#uid#uil#uir#uis#uit#uiu#uiv#uiw#uix#uiy#ui{#ui}#ui!T#ui!V#ui!X#ui!Y#ui!i#ui!o#ui!r#ui!s#ui!t#ui!u#ui!v#ui!x#ui!{#ui#V#ui#a#ui#b#ui#i#ui#p#ui#t#ui#v#ui$S#ui$U#ui$Z#ui$[#ui$a#ui$f#ui$h#ui$i#ui$l#ui$n#ui$p#ui$r#ui$t#ui$v#ui$x#ui$|#ui%O#ui%V#ui%`#ui%a#ui%b#ui%d#ui%f#ui%h#ui%m#ui%p#ui%w#ui%}#ui&n#ui&s#ui&t#ui'R#ui'S#ui'W#ui'Z#ui'b#ui'c#ui(l#ui(p#ui(s#ui)Q#ui)T#ui)V#ui)W#ui)X#ui)Y#ui)Z#ui)i#ui)j#ui!U#ui$d#ui!n#ui%l#ui~O]&cO~O]&cO!TxO!V&bO#v!eO~O(w2^O(x,dO)Q$Va)X$Va~O)QYO)X2`O~O!O2aO~P,]O!O2aO)X#jO~O!O2aO~O$d2fOP$`i]$`ia$`id$`il$`ir$`is$`it$`iu$`iv$`iw$`ix$`iy$`i{$`i}$`i!T$`i!V$`i!X$`i!Y$`i!i$`i!o$`i!r$`i!s$`i!t$`i!u$`i!v$`i!x$`i!{$`i#V$`i#a$`i#b$`i#i$`i#p$`i#t$`i#v$`i$S$`i$U$`i$Z$`i$[$`i$a$`i$f$`i$h$`i$i$`i$l$`i$n$`i$p$`i$r$`i$t$`i$v$`i$x$`i$|$`i%O$`i%V$`i%`$`i%a$`i%b$`i%d$`i%f$`i%h$`i%m$`i%p$`i%w$`i%}$`i&n$`i&s$`i&t$`i'R$`i'S$`i'W$`i'Z$`i'b$`i'c$`i(l$`i(p$`i(s$`i)Q$`i)T$`i)V$`i)W$`i)X$`i)Y$`i)Z$`i)i$`i)j$`i!U$`i~O]1sO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(v#gO)T#mO)U#oO)V#nO)W#pO)X2iO)Y#|O~P#3zOPmO]$eOa!]Ol;PO{#RO!V$fO!X!XO!Y!WO!i!YO#V#QO#a#VO#b#TO%`#ZO%a#[O%b#YO%f#UO%m#SO%w$mO&n!RO&s#WO&t!TO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(s;RO)T$kO)W$kO)X2lO)Y!ZO)ZXO)icO)jdO~P&?zO)X2iO~O(s-VO~O)QYO)k2oO~O)X2qO~O]-ZOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!{!dO!|%RO(s-VO)T-WO~O)T2vO~O]&cO!V2xO!h2yO)X)vX~O]-ZO!{!dO(s-VO)T-WO~O)X2|O~O!TxO$a!iO$f!jO$h!kO$i!lO$l-cO$n!nO$p!oO$r!pO$t!qO$v!rO$x!sO%O!uO(s:rOd$Yi!o$Yi!{$Yi#i$Yi#p$Yi#t$Yi#v$Yi$S$Yi$U$Yi$Z$Yi$[$Yi$|$Yi%V$Yi%d$Yi%h$Yi%p$Yi%}$Yi(l$Yi)V$Yi!U$Yi$d$Yi~P$0kOl;PO(s:rO~P0zO]3QO~O!U3RO~P!QO)X2VO~O!u3TO(s%nO~O!O3WO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h3XO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!O3YO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO]&cO!V+lO!T%vi#v%vi)X%vi)k%vi~O!W3ZO~Ol:}O)X)OX~P$GXOa!TOl$oO{3aO#a#VO#b3`O#t!fO%f#UO%m3bO&n!RO&s#WO&t!TO(s$nO)QYO~P&?zOl;gO!o-sO#i-xO#t!fO$|,zO%d!zO%l-wO%p!|O%w!}O(s;XO)QYO~P!8jO]&cO!V&bO)X3dO~O)X3eO~O)QYO)X3eO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(v#gO)T#mO)U#oO)V#nO)W#pO)X3fO)Y#|O~P#3zO)X3fO~O)X3iO~O!U3kO~P$JiOl$oO(s$nO~O]3mO!T'zO~P'+pO!T(RO!l3pO(w(QO])Pad)Pal)Par)Pas)Pat)Pau)Pav)Paw)Pax)Pay)Pa})Pa!V)Pa!r)Pa!s)Pa!t)Pa!u)Pa!v)Pa!x)Pa!{)Pa%w)Pa&s)Pa&t)Pa(s)Pa)T)Pa)V)Pa)W)Pa)X)Pa!O)Pa!X)Pa!Y)Pa![)Pa!^)Pa!_)Pa!a)Pa!b)Pa!c)Pa!e)Pa!f)Pa!h)Pa(v)Pa(x)Pa(y)Pa)U)Pa)Y)Pa!g)Pa)k)Pa!W)PaQ)Pa!d)Pa!U)Pa#v)Pa~Ol$oO!n.fO!o.fO(s$nO~O!h3tO)Y3vO!T)`X~O!o3xO)QYO~P8zO)X3yO~PGVO]4OOl(|O!T$WO!{!dO%w$mO&s#WO(s({O(w4SO)T3{O)V4PO)W4PO~O)X4TO)k4VO~P(&sOl;hO!U4XO!n.sO!o.rO#i-xO$|!tO%O!uO%h!{O%l-wO%p!|O%w!}O(s;ZO)QYO~P!8jOl;hO%w!}O(s;ZO~P!8jO(w4YO~Ol$oO!T(RO(s$nO(w(QO)QYO~O!l3pO~P()RO)k4[O!U&pX!h&pX~O!h4]O!U*RX~O!U4_O~Oa4aOl$oO&n!RO(s$nO~O!T([O]&lid&lil&lir&lis&lit&liu&liv&liw&lix&liy&li}&li!V&li!r&li!s&li!t&li!u&li!v&li!x&li!{&li%w&li&s&li&t&li(s&li)T&li)V&li)W&li)X&li!O&li!X&li!Y&li![&li!^&li!_&li!a&li!b&li!c&li!e&li!f&li!h&li(v&li(x&li(y&li)U&li)Y&li!g&li)k&li!W&liQ&li!d&li!U&li#v&li~O(w&li~P(*cO(w.xO~P(*cO!O4dO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!O4dO~O!O4eO~O]#}O!T$WO!V'[i!X'[i!Y'[i!['[i!^'[i!_'[i!a'[i!b'[i!c'[i!e'[i!f'[i!h'[i(v'[i(x'[i(y'[i)T'[i)U'[i)V'[i)W'[i)X'[i)Y'[i!g'[i)k'[i!O'[i!W'[i(w'[i!U'[iQ'[i!d'[i~OPmOa%QOl;OO!X!XO!Y!WO!i!YO#V#QO%`#ZO%a#[O%b#YO%w$mO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(s$xO)Y!ZO)ZXO)icO)jdO]#]ap#]a!T#]a!V#]a)T#]a)V#]a)W#]a~O(s%nO)Y4jO!O*ZP~O*X4iO~O'g4lO*X4iO~O*X4mO~OlmXpnXp&xX~Od4oO%Z*UO(z/`O~Od4oO%Z*UO(z4pO~O!h/fO!O(ta~O!W4tO~O]&cO!V+lO!T%vq#v%vq)X%vq)k%vq~O]#}O!T$WO!X'[q!Y'[q!['[q!^'[q!_'[q!a'[q!b'[q!c'[q!e'[q!f'[q!h'[q(v'[q(x'[q(y'[q)T'[q)U'[q)V'[q)W'[q)X'[q)Y'[q!g'[q)k'[q!O'[q!W'[q(w'[q!U'[qQ'[q!d'[q~O!V'[q~P(5pO!V/QO&s#WO&t$wO~P(5pO!T$WO!V)sO(x)tO!U(VX!h(VX~P!JwO!h/qO!U)sa~O!W4|O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h*jO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!U5QO~P&7QO!W5QO~P&7QO!O5QO~P&7QO!O5VO~P&7QO]5WO!h'va)Y'va)^'va~O!h*PO)Y)Ri)^)Ri~O]&cO!V&bO!O#Qq!T#Qq!h#Qq#v#Qq)X#Qq)k#QqQ#Qq!d#Qq(w#Qq~O!OqiQqi!dqi!hqi)Yqi)Xqi~P#IkO]&cO!V+lO!OqiQqi!dqi!hqi)Yqi)Xqi~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!h'Uq)X'Uq!g'Uq)k'Uq!O'Uq!W'Uq(w'Uq!U'UqQ'Uq!d'Uq~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!W'}a!h'}a~P#3zO!W5]O~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h5^O(v#gO)T#mO)U#oO)V#nO)W#pO)X#jO)Y#|O!U)sX~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!h#{i)X#{i~P#3zO]*wO!T$WO!V&bO)k*sO!h(Wa)X(Wa~O!h1iO]'eX!O)eX~P%3PO)Y5`O!T%ra!h%ra#v%ra)k%ra~O!h0vO!T){a#v){a)k){a~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)X5cO)Y#|O~P#3zO]1VOd!POl;`O!V1TO!{!dO%w$mO(s$xO)T;|O)V5eO)W5eO~OQ#Pa!d#Pa!h#Pa!O#Pa~P(DxO]1VOd!POr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!V1TO!{!dO!|%RO%w$mO(s$xOQ#kX!d#kX!h#kX!O#kX~Ol%bO)T0}O)V;}O)W;}O~P(EzO]&cOQ#Pa!d#Pa!h#Pa!O#Pa~O!V&bO)k5iO~P(GiO(s%nOQ#dX!d#dX!h#dX!O#dX~O)V;}O)W;}OQ#nX!d#nX!h#nX!O#nX~P' kO!V+lO~P(GiO]1VOa!TOd!POl;aO{#RO!V1TO!{!dO#a#VO#b#TO%f#UO%m#SO%w$mO&n!RO&s#WO&t!TO(s;UO)QYO)T;|O)V5eO)W5eO)Y+oO!O)eP~P&?zO!h1WOQ)ma!d)ma~Op&fO)k5nOQ#`al)OX!d#`a!h#`a)Y)OX~P$GXO(s-VOQ#ga!d#ga!h#ga~Op&fO)k5nOQ#`a])_Xd)_Xl)_Xr)_Xs)_Xt)_Xu)_Xv)_Xw)_Xx)_Xy)_X})_X!T)_X!V)_X!d#`a!h#`a!l)_X!r)_X!s)_X!t)_X!u)_X!v)_X!x)_X!{)_X%w)_X&s)_X&t)_X(s)_X(w)_X)T)_X)V)_X)W)_X)Y)_X~O#a5qO#b5qO~O]&cO!V+lO!O#ki!T#ki#v#ki)X#ki)k#kiQ#ki!d#ki!h#ki)Y#ki!x#ki(w#ki~O!W5sO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!W5sO~P!(zO!W5sO)T5uO~P$%pO]#ji!T#ji!V#ji!O#ji#v#ji)X#ji)k#jiQ#ji!d#ji!h#ji)Y#ji!x#ji(w#ji~P$ xO)QYO)Y5wO~P8zO!h1iO!O)ea~O&s#WO&t$wO!T#qa!x#qa#v#qa(w#qa)k#qa!O#qa!h#qa)X#qaQ#qa!d#qa)Y#qa~P#NeO!O5|O~P!(zO!O)pP~P!4xO)U6SO)V6QO]#Ua!T#Ua!V#Ua)T#Ua)W#Uar#Uas#Uat#Uau#Uav#Uaw#Uax#Uay#Ua!l#Ua!x#Ua#T#Ua#V#Ua#p#Ua#v#Ua(w#Ua(y#Ua)k#Uaa#Uad#Ual#Ua{#Ua}#Ua!o#Ua!r#Ua!s#Ua!t#Ua!u#Ua!v#Ua!{#Ua#a#Ua#b#Ua#i#Ua#t#Ua$|#Ua%d#Ua%f#Ua%l#Ua%m#Ua%p#Ua%w#Ua&n#Ua&s#Ua&t#Ua(s#Ua)Q#Ua)X#Ua!O#Ua!h#UaQ#Ua!d#Ua~O!x!cO]#Rq!T#Rq!V#Rq#v#Rq(w#Rq)k#Rq!O#Rq!h#Rq)X#RqQ#Rq!d#Rq~O!W6XO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!W6XO~P!(zO!h2POQ({a!d({a~O)X6^O~Ol-hO!T'eO)k6_O~O]*wO!T$WO!V&bO!h*uO)X)rX~O)k6cO~P)+qO!O6eO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!O6eO~O$d6gOP$`q]$`qa$`qd$`ql$`qr$`qs$`qt$`qu$`qv$`qw$`qx$`qy$`q{$`q}$`q!T$`q!V$`q!X$`q!Y$`q!i$`q!o$`q!r$`q!s$`q!t$`q!u$`q!v$`q!x$`q!{$`q#V$`q#a$`q#b$`q#i$`q#p$`q#t$`q#v$`q$S$`q$U$`q$Z$`q$[$`q$a$`q$f$`q$h$`q$i$`q$l$`q$n$`q$p$`q$r$`q$t$`q$v$`q$x$`q$|$`q%O$`q%V$`q%`$`q%a$`q%b$`q%d$`q%f$`q%h$`q%m$`q%p$`q%w$`q%}$`q&n$`q&s$`q&t$`q'R$`q'S$`q'W$`q'Z$`q'b$`q'c$`q(l$`q(p$`q(s$`q)Q$`q)T$`q)V$`q)W$`q)X$`q)Y$`q)Z$`q)i$`q)j$`q!U$`q~O)X6hO~OPmO]$eOa!]Ol;PO{#RO!V$fO!X!XO!Y!WO!i!YO#V#QO#a#VO#b#TO%`#ZO%a#[O%b#YO%f#UO%m#SO%w$mO&n!RO&s#WO&t!TO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(s;RO)T$kO)W$kO)X6jO)Y!ZO)ZXO)icO)jdO~P&?zO(w6lO)k*sO~P)+qO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)X6jO)Y#|O~P#3zO!O6nO~P!(zO)X6rO~O)X6sO~O]-ZOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!{!dO(s-VO)T-WO~O]&cO!V2xO!h%Pa)X%Pa!O%Pa~O!W6yO)T6zO~P$%pO!h2yO)X)va~O]&cO!O6}O!V2xO~O!TxO$a!iO$f!jO$h!kO$i!lO$l-cO$n!nO$p!oO$r!pO$t!qO$v!rO$x!sO%O!uO(s:rOd$Yq!o$Yq!{$Yq#i$Yq#p$Yq#t$Yq#v$Yq$S$Yq$U$Yq$Z$Yq$[$Yq$|$Yq%V$Yq%d$Yq%h$Yq%p$Yq%}$Yq(l$Yq)V$Yq!U$Yq$d$Yq~P$0kOPmO]$eOa!]Ol;PO{#RO!V$fO!X!XO!Y!WO!i!YO#V#QO#a#VO#b#TO%`#ZO%a#[O%b#YO%f#UO%m#SO%w$mO&n!RO&s#WO&t!TO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(s;RO)QYO)T$kO)W$kO)X7PO)Y!ZO)ZXO)icO)jdO~P&?zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)X7SO)Y#|O~P#3zO)X7TO~OP7UO(pQO~Ol*]O)X)_X~P$GXOp&fOl)OX)X)_X~P$GXO)X7WO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O)X&Ta~P#3zO!U7YO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO)X7ZO~OPmO]$eOa!]Ol;QO{#RO!V$fO!X!XO!Y!WO!i!YO#V#QO#a#VO#b#TO%`#ZO%a#[O%b#YO%f#UO%m#SO%w$mO&n!RO&s#WO&t!TO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(s;YO)QYO)T$kO)W$kO)Y0qO)ZXO)icO)jdO!O)eP~P&?zO!h3tO)Y7_O!T)`a~O!h3tO!T)`a~O)X7dO)k7fO~P(&sO)X7hO~PGVO]4OOl(|Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!{!dO!|%RO%w$mO&s#WO(s({O)T3{O)V4PO)W4PO~O)T7lO~O]&cO!T*rO!V7nO!h7oO#v!eO(w4SO~O)X7dO)k7qO~P)GVO]4OOl(|O!{!dO%w$mO&s#WO(s({O)T3{O)V4PO)W4PO~Op&fO])dX!T)dX!V)dX!h)dX#v)dX(w)dX)X)dX)k)dX!O)dX~O)X7dO~O!T(RO!l7wO(w(QO])Pid)Pil)Pir)Pis)Pit)Piu)Piv)Piw)Pix)Piy)Pi})Pi!V)Pi!r)Pi!s)Pi!t)Pi!u)Pi!v)Pi!x)Pi!{)Pi%w)Pi&s)Pi&t)Pi(s)Pi)T)Pi)V)Pi)W)Pi)X)Pi!O)Pi!X)Pi!Y)Pi![)Pi!^)Pi!_)Pi!a)Pi!b)Pi!c)Pi!e)Pi!f)Pi!h)Pi(v)Pi(x)Pi(y)Pi)U)Pi)Y)Pi!g)Pi)k)Pi!W)PiQ)Pi!d)Pi!U)Pi#v)Pi~O(s%nO!U(gX!h(gX~O!h4]O!U*Ra~Op&fO]*Qad*Qal*Qar*Qas*Qat*Qau*Qav*Qaw*Qax*Qay*Qa}*Qa!T*Qa!V*Qa!r*Qa!s*Qa!t*Qa!u*Qa!v*Qa!x*Qa!{*Qa%w*Qa&s*Qa&t*Qa(s*Qa)T*Qa)V*Qa)W*Qa)X*Qa!O*Qa!X*Qa!Y*Qa![*Qa!^*Qa!_*Qa!a*Qa!b*Qa!c*Qa!e*Qa!f*Qa!h*Qa(v*Qa(x*Qa(y*Qa)U*Qa)Y*Qa!g*Qa)k*Qa!W*QaQ*Qa!d*Qa(w*Qa!U*Qa#v*Qa~O!T([O]&lqd&lql&lqr&lqs&lqt&lqu&lqv&lqw&lqx&lqy&lq}&lq!V&lq!r&lq!s&lq!t&lq!u&lq!v&lq!x&lq!{&lq%w&lq&s&lq&t&lq(s&lq)T&lq)V&lq)W&lq)X&lq!O&lq!X&lq!Y&lq![&lq!^&lq!_&lq!a&lq!b&lq!c&lq!e&lq!f&lq!h&lq(v&lq(x&lq(y&lq)U&lq)Y&lq!g&lq)k&lq!W&lqQ&lq!d&lq(w&lq!U&lq#v&lq~OPmOa%QOl;OO!T$WO!i!YO#V#QO%`#ZO%a#[O%b#YO%w$mO'R!WO'S!WO'W#XO'Z![O'b![O'c![O(pQO(s$xO)ZXO)icO)jdO~O]*Vi!V*Vi!X*Vi!Y*Vi![*Vi!^*Vi!_*Vi!a*Vi!b*Vi!c*Vi!e*Vi!f*Vi!h*Vi(v*Vi(x*Vi(y*Vi)T*Vi)U*Vi)V*Vi)W*Vi)X*Vi)Y*Vi!g*Vi)k*Vi!O*Vi!W*Vi(w*Vi!U*ViQ*Vi!d*Vi~P*&fO!O7|O~O!W7}O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!h'_q)X'_q!g'_q)k'_q!O'_q!W'_q(w'_q!U'_qQ'_q!d'_q~P#3zO!h8OO!O*ZX~O!O8QO~O*X8RO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!h^y)X^y!g^y)k^y!O^y!W^y(w^y!U^yQ^y!d^y~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!O(ia!h(ia~P#3zO]#}O!T$WO!V'[y!X'[y!Y'[y!['[y!^'[y!_'[y!a'[y!b'[y!c'[y!e'[y!f'[y!h'[y(v'[y(x'[y(y'[y)T'[y)U'[y)V'[y)W'[y)X'[y)Y'[y!g'[y)k'[y!O'[y!W'[y(w'[y!U'[yQ'[y!d'[y~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!h'_y)X'_y!g'_y)k'_y!O'_y!W'_y(w'_y!U'_yQ'_y!d'_y~P#3zO]&cO!V+lO!T%vy#v%vy)X%vy)k%vy~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!U(Va!h(Va~P#3zO!W4|O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!U#}i!h#}i~P#3zO!U8TO~P&7QO!W8TO~P&7QO!O8TO~P&7QO!O8VO~P&7QO]&cO!V&bO!O#Qy!T#Qy!h#Qy#v#Qy)X#Qy)k#QyQ#Qy!d#Qy(w#Qy~O]&cO!V+lO!OqqQqq!dqq!hqq)Yqq)Xqq~O]&cOQ#Pi!d#Pi!h#Pi!O#Pi~O!V+lO~P*9xOQ#nX!d#nX!h#nX!O#nX~P(DxO!V&bO~P*9xOQ(PX](PXd'rXl'rXr(PXs(PXt(PXu(PXv(PXw(PXx(PXy(PX!V(PX!d(PX!h(PX!{'rX%w'rX(s'rX)T(PX)V(PX)W(PX!O(PX~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|OQ#_i!d#_i!h#_i!O#_i~P#3zO&s#WO&t$wOQ#fi!d#fi!h#fi~O(s-VO)Y1]O)k1[OQ#`X!d#`X!h#`X~O!W8[O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!W8[O~P!(zO!T#qi!x#qi#v#qi(w#qi)k#qi!O#qi!h#qi)X#qiQ#qi!d#qi)Y#qi~O]&cO!V+lO~P*?tO]&YO!V&WO&s#WO&t$wO)T&VO)V&ZO)W&ZO~P*?tO!O8^O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!h8_O!O)pX~O!O8aO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|OQ*UX!d*UX!h*UX~P#3zO)Y8dOQ*TX!d*TX!h*TX~O)X8fO~O!O$ci!h#{a)X#{a~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)X8iO)Y#|O~P#3zO!O8kO~P!(zO!O8kO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!O8kO~O]&cO!V&bO(w8qO~O)X8rO~O]&cO!V2xO!h%Pi)X%Pi!O%Pi~O!W8uO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!W8uO)T8wO~P$%pO!W8uO~P!(zO]&cO!V2xO!h(Za)X(Za~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(v#gO)T#mO)U#oO)V#nO)W#pO)X8xO)Y#|O~P#3zO)X2lO~P!(zO)X8xO~OP%oO!O8yO(pQO~O!O8yO~O)X8zO~P%%lO#T8}O(y.SO)X8{O~O!h3tO!T)`i~O)Y9RO!T'xa!h'xa~O)X9TO)k9VO~P)GVO)X9TO~O)X9TO)k9ZO~P(&sOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O~P)GuO]&cO!V7nO!T!ya!h!ya#v!ya(w!ya)X!ya)k!ya!O!ya~O!W9bO)T9cO~P$%pO!T$WO!h7oO(w4SO)X9TO)k9ZO~O!T$WO~P#EfO]&cO!O9fO!V7nO~O]&cO!V7nO!T&ba!h&ba#v&ba(w&ba)X&ba)k&ba!O&ba~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O)X&ca~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)X9TO)Y#|O~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!U&pi!h&pi~P#3zO!V/QO]'^i!T'^i!X'^i!Y'^i!['^i!^'^i!_'^i!a'^i!b'^i!c'^i!e'^i!f'^i!h'^i(v'^i(x'^i(y'^i)T'^i)U'^i)V'^i)W'^i)X'^i)Y'^i!g'^i)k'^i!O'^i!W'^i(w'^i!U'^iQ'^i!d'^i~O(s%nO)Y9iO~O!h8OO!O*Za~O!O9kO~P&7QO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!U(Va)X#Zi~P#3zO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|OQ#_q!d#_q!h#_q!O#_q~P#3zO&s#WO&t$wOQ#fq!d#fq!h#fq~O)k5nOQ#`a!d#`a!h#`a~O]&cO!V+lO!T#qq!x#qq#v#qq(w#qq)k#qq!O#qq!h#qq)X#qqQ#qq!d#qq)Y#qq~O!h8_O!O)pa~O)V6QO]&Wi!T&Wi!V&Wi)T&Wi)U&Wi)W&Wir&Wis&Wit&Wiu&Wiv&Wiw&Wix&Wiy&Wi!l&Wi!x&Wi#T&Wi#V&Wi#p&Wi#v&Wi(w&Wi(y&Wi)k&Wia&Wid&Wil&Wi{&Wi}&Wi!o&Wi!r&Wi!s&Wi!t&Wi!u&Wi!v&Wi!{&Wi#a&Wi#b&Wi#i&Wi#t&Wi$|&Wi%d&Wi%f&Wi%l&Wi%m&Wi%p&Wi%w&Wi&n&Wi&s&Wi&t&Wi(s&Wi)Q&Wi)X&Wi!O&Wi!h&WiQ&Wi!d&Wi~O)X9nO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O!O$cq!h#{i)X#{i~P#3zO!O9pO~P!(zO!O9pO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!O9pO~O]&cO!V&bO(w9sO~O!O9tO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!O9tO~O]&cO!V2xO!h%Pq)X%Pq!O%Pq~O!W9xO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!W9xO~P!(zO)X6jO~P!(zO)X9yO~O)X9zO~O(y.SO)X9zO~O!h3tO!T)`q~O)Y9|O!T'xi!h'xi~O!T$WO!h7oO(w4SO)X9}O)k:PO~O)X9}O~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)X9}O)Y#|O~P#3zO)X9}O)k:SO~P)GVO]&cO!V7nO!T!yi!h!yi#v!yi(w!yi)X!yi)k!yi!O!yi~O!W:WO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!W:WO)T:YO~P$%pO!W:WO~P!(zO]&cO!V7nO!T(ea!h(ea(w(ea)X(ea)k(ea~O!O:[O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO!h#iO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!O:[O~O!O:aO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!O:aO~O]&cO!V2xO!h%Py)X%Py!O%Py~O)X:bO~O)X:cO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)X:cO)Y#|O~P#3zO!T$WO!h7oO(w4SO)X:cO)k:fO~O]&cO!V7nO!T!yq!h!yq#v!yq(w!yq)X!yq)k!yq!O!yq~O!W:hO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!W:hO~P!(zO!O:jO!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)Y#|O~P#3zO!O:jO~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)X:lO)Y#|O~P#3zO)X:lO~O]&cO!V7nO!T!yy!h!yy#v!yy(w!yy)X!yy)k!yy!O!yy~O!Y#qO![#rO!^#uO!_#vO!a#xO!b#yO!c#yO!e#yO!f#zO(v#gO)T#mO)U#oO)V#nO)W#pO)X:pO)Y#|O~P#3zO)X:pO~O]ZXlgXpZXpiX!TiX!VZX!XZX!YZX![ZX!^ZX!_ZX!aZX!bZX!cZX!eZX!fZX!gZX!hZX(vZX(w$^X(xZX(yZX)TZX)UZX)VZX)WZX)XZX)YZX)kZX~O]%XXlmXpnXp%XX!TnX!V%XX!X%XX!Y%XX![%XX!^%XX!_%XX!a%XX!b%XX!c%XX!e%XX!f%XX!gmX!h%XX(v%XX(x%XX(y%XX)T%XX)U%XX)V%XX)W%XX)Y%XX)kmX!O%XXQ%XX!d%XX~O)X%XX!W%XX(w%XX!U%XX~P+HQO]nX]%XXdnXlmXpnXp%XXrnXsnXtnXunXvnXwnXxnXynX}nX!VnX!V%XX!rnX!snX!tnX!unX!vnX!xnX!{nX%wnX&snX&tnX(snX)TnX)VnX)WnX!OnX!O%XX!hnX)YnX~O)XnX)knX~P+JbO]%XXlmXpnXp%XX!V%XX!h%XXQ%XX!d%XX!O%XX~O!T%XX#v%XX)X%XX)k%XX(w%XX~P+L{OQnXQ%XX!TnX!X%XX!Y%XX![%XX!^%XX!_%XX!a%XX!b%XX!c%XX!dnX!d%XX!e%XX!f%XX!gmX!h%XX(v%XX(x%XX(y%XX)T%XX)U%XX)V%XX)W%XX)Y%XX)kmX~P+JbO]nX]%XXlmXpnXp%XXrnXsnXtnXunXvnXwnXxnXynX}nX!V%XX!rnX!snX!tnX!unX!vnX!xnX!{nX%wnX&snX&tnX(snX)TnX)VnX)WnX~O!TnX(wnX)XnX)knX~P, sOdnX!VnX)X%XX~P, sOlmXpnX)X%XX~Od)pO%Z)qO(z:sO~Od)pO%Z)qO(z:xO~Od)pO%Z)qO(z:tO~Od$RO%Z*UO']$TO'`$UO(z:sO~Od$RO%Z*UO']$TO'`$UO(z:uO~Od$RO%Z*UO']$TO'`$UO(z:wO~O]iXriXsiXtiXuiXviXwiXxiXyiX!OiX!ViX&siX&tiX)TiX)ViX)WiXdiX}iX!riX!siX!tiX!uiX!viX!xiX!{iX%wiX(siX~P#1jO]ZXlgXpZXpiX!VZX!hZX)XZX)kZX~O!TZX#vZX(wZX~P,(ZOlgXpiX)QiX)XZX)kiX~O]ZX]iXdiXlgXpZXpiXriXsiXtiXuiXviXwiXxiXyiX}iX!VZX!ViX!riX!siX!tiX!uiX!viX!xiX!{iX%wiX&siX&tiX(siX)TiX)ViX)WiX!OZX!OiX!hiX)YiX)kiX~O)XZX~P,)eO]ZX]iXlgXpZXpiXriXsiXtiXuiXviXwiXxiXyiX!TiX!VZX!ViX!XZX!YZX![ZX!^ZX!_ZX!aZX!bZX!cZX!eZX!fZX!gZX!hZX!hiX&siX&tiX(vZX(xZX(yZX)TZX)TiX)UZX)VZX)ViX)WZX)WiX)YZX)YiX)kZX~OQZXQiX!dZX!diX~P,,OO]iXdiXriXsiXtiXuiXviXwiXxiXyiX}iX!ViX!riX!siX!tiX!uiX!viX!xiX!{iX%wiX&siX&tiX(siX)TiX)ViX)WiX~P#1jO]ZX]iXdiXlgXpZXpiXriXsiXtiXuiXviXwiXxiXyiX}iX!VZX!ViX!riX!siX!tiX!uiX!viX!xiX!{iX%wiX&siX&tiX(siX)TiX)ViX)WiX~O)XiX~P,1QOdiX}iX!OZX!OiX!riX!siX!tiX!uiX!viX!xiX!{iX%wiX(siX)kiX~P,,OO]ZX]iXlgXpZXpiXriXsiXtiXuiXviXwiXxiXyiX}iX!TiX!VZX!riX!siX!tiX!uiX!viX!xiX!{iX%wiX&siX&tiX(siX(wiX)TiX)ViX)WiX)XiX)kiX~Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O~PBUOd$RO%Z*UO(z:sO~Od$RO%Z*UO(z:tO~Od$RO%Z*UO(z:zO~Od$RO%Z*UO(z:yO~O]%hOd!POl%bOr!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O!V%kO!{!dO!|%RO%w$mO(s$xO)T;eO)V;fO)W;fO~O]%hOd!POl%bO!V%kO!{!dO%w$mO(s$xO)T;eO)V;fO)W;fO~Od$RO%Z$SO(z:tO~Od$RO%Z$SO(z:xO~Ol:}O~Ol:|O~O]cXlgXpiX!TcX~Od)pO%Z*UO(z:sO~Od)pO%Z*UO(z:tO~Od)pO%Z*UO(z:uO~Od)pO%Z*UO(z:vO~Od)pO%Z*UO(z:wO~Od)pO%Z*UO(z:yO~Od)pO%Z*UO(z:zO~Or!^Os!^Ot!^Ou!^Ov!^Ow!^Ox!^Oy!^O~P,9^O])OXr)OXs)OXt)OXu)OXv)OXw)OXx)OXy)OX})OX!r)OX!s)OX!t)OX!u)OX!v)OX!x)OX!{)OX%w)OX&s)OX&t)OX(s)OX)T)OX)V)OX)W)OX)k)OX~Ol:|O!T)OX(w)OX)X)OX~P,=]O]&xXlmXpnX!T&xX~Od4oO%Z*UO(z;xO~Ol;`O)T;|O)V5eO)W5eO~P(EzOd!POl%bO!{!dO%w$mO(s$xO~O]1VO!V1TO)T0}O)V;}O)W;}OQ#nX!d#nX!h#nX!O#nX~P,@XO)T;^O~Ol;lO~Ol;mO~Ol;nO~Ol;pO~Ol;qO~Ol;rO~Ol;pO!T$WOQ)OX!d)OX!h)OX)Y)OX!O)OX)k)OX~P$GXOl;nO!T$WO~P$GXOl;lO!g$YO)k$YO~Ol;nO!g$YO)k$YO~Ol;pO!g$YO)k$YO~Ol;mO!O)OX!h)OX)Y)OX)k)OX~P$GXOd/aO%Z*UO(z;xO~Ol;yO~O)T<^O~OV'f'i'j'h(p)Z!R(sST%[!Y!['kd%]!i'S!f]'g*['l(x!^!_'m'n'm~",
     goto: "%8]*[PPPPPP*]P*`PP.W4nP7o7o:{P:{>XP>r?U?jFdMf!&l!-UP!4Q!4u!5jP!6UPPPPPPPP!6oP!8ZPP!9n!;YP!;`PPPPPP!;cP!;cPP!;cPPPPPPPPP!;o!?XP!?[PP!?x!@mPPPPP!@qP>u!BUPP>u!D_!F`!Fn!HV!IxP!JTP!Jd!Jd!Mv##X#$q#(P#+]!F`#+gPP!F`#+n#+t#+g#+g#+wP#+{#,j#,j#,j#,j!IxP#-T#-f#/lP#0SP#1qP#1u#2P#2v#3R#5a#5i#5i#5p#1uP#1uP#6U#6[P#6fPP#7T#7t#8h#7TP#9[#9hP#7TP#7TPP#7T#7TP#7TP#7TP#7TP#7TP#7TP#7TP#9k#6f#:ZP#:rP#;Z#;Z#;Z#;Z#;h#1uP#<Q#AO#AmPPPPPPPP#BeP#BuP#BuP#CT#Fd#:hPP#Bo#FxP#G_#Gj#Gp#Gp#Bo#HfP#1u#1u#1u#1u#1uP!Jd#IS#IZ#IZ#IZ#I_!Mp#Ii!Mp#Im!Fn!Fn!Fn#Ip#N[!Fn>u>u>u$%V!@m!@m!@m!@m!@m!@m!6o!6o!6o$%jP$'X$'g!6o$'mPP!6o$)}$*Q#B[$*T:{7o$-]$/W$0w$2g7oPP7o$4Z7oP7o7oP7oP$7c7oP7oPP7o$7oPPPPPPPPP*]P$:y$;P$=h$?p$?v$@^$@h$@s$AS$AY$Bj$Ci$Cp$Cw$C}$DV$Da$Dg$Dv$D|$EV$E_$Ej$Ep$Ez$FQ$F[$Fc$Ft$Fz$GQP$GW$G`$Gg$Gu$Ie$Ik$Iq$Ix$JRPPPPPPPP$JX$J]PPPPP%#a$)}%#d%&n%(xP%)V%)YPPPPPPPPPP%)f%*i%*o%*s%,l%-{%.n%.u%1W%1^PPP%1h%1s%1v%1|%3T%3W%3d%3n%3r%4x%5m%5s#BeP%6^%6p%6s%7V%7e%7i%7o%7u$)}$*Q$*Q%7x%7{P%8V%8YR#cP'dmO[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'e'j'k'z(a(c(j)m)s*i*j*m*r*s*w+X+Z+i+k+l,Q,S,o,r,x-^-_-b-f-j.S.T.X/Q/T/_/f/o/q/v/x0k1O1T1d1e1o1s1}2P2f2i2l2x2}3Q3m4S4V4[4e5^5i5u6c6g6j6l6n6x6z7P7f7n7q8i8k8q8w8x9V9Z9a9c9p9s9t:P:S:Y:[:a:f:jU%om%p7UQ&m!`Q(k#]d0S*O0P0Q0R0U5R5S5T5W8UR7U3Xf}Oaewx{!g&S'e*r-f&v$i[!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&W&b&f&x&y&|'O'P'b'j'k'z(a(c(j)m)s*i*j*m*s*w+X+Z+i+k+l,Q,S,o,r,x-^-_-b-j.S.T.X/Q/T/_/f/o/q/v/x1O1d1e1o1s1}2P2f2i2l2x2}3Q3m4S4V4[4e5^5i5u6c6g6j6l6n6x6z7P7f7n7q8i8k8q8w8x9V9Z9a9c9p9s9t:P:S:Y:[:a:f:jS%`f0k#d%jgnp|#O$g$|$}%S%d%h%i%w&s'u'v(R*Z*a*c*u+^,m,w-`-s-z.i.p.r0`0|0}1R1V2b2m5e6k;[;];^;d;e;f;s;t;u;v;z;{;|;}<[<]<^S%qm!YS&u!h#PQ']!tQ'h!yQ'i!zQ(k#`Q(l#]Q(m#^Q*y%kQ,X&lQ,^&nQ-T'^Q-g'gQ-n'rS.u([4]Q/i)hQ0h*nQ2T,]Q2[,dQ3S-hQ4f/PQ4j/WQ5j1QQ6`2WQ7R3TQ8e6_Q9i8OR;_1T$|#hS!]$y%Q%T%Z&j&k'Q'X'Z'a'c(b(f(i(x(y)S)T)U)V)W)X)Y)Z)[)])^)_)`)l)r)y+Y+h,P,T,k,v-k-l.P.|/s0c0e0j0l0z1c1|2d2k3V3g3h4g4h4n4q4w4y4}5O5h5t5{6Y6i6m6w7O7u7v7x8W8X8g8j8n8v9X9`9o9u:Q:X:^:d:mQ&p!dQ(h#ZQ(t#bQ)k$T[*t%e*X0n2c2j3OQ,_&oQ/R(gQ/V(lQ/^(uS/l)j/SQ0u+RS4u/m/nR8S4v'e![O[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'e'j'k'z(a(c(j)m)s*i*j*m*r*s*w+X+Z+i+k+l,Q,S,o,r,x-^-_-b-f-j.S.T.X/Q/T/_/f/o/q/v/x0k1O1T1d1e1o1s1}2P2f2i2l2x2}3Q3m4S4V4[4e5^5i5u6c6g6j6l6n6x6z7P7f7n7q8i8k8q8w8x9V9Z9a9c9p9s9t:P:S:Y:[:a:f:j'e!VO[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'e'j'k'z(a(c(j)m)s*i*j*m*r*s*w+X+Z+i+k+l,Q,S,o,r,x-^-_-b-f-j.S.T.X/Q/T/_/f/o/q/v/x0k1O1T1d1e1o1s1}2P2f2i2l2x2}3Q3m4S4V4[4e5^5i5u6c6g6j6l6n6x6z7P7f7n7q8i8k8q8w8x9V9Z9a9c9p9s9t:P:S:Y:[:a:f:jQ)P#kS+R%y0vQ/u)tk4R.j3w3{4O4P7g7i7j7l7o9]9^:VQ)R#kk4Q.j3w3{4O4P7g7i7j7l7o9]9^:Vl)Q#k.j3w3{4O4P7g7i7j7l7o9]9^:VT+R%y0v`UOwx!g&S'e*r-fW$`[e$e(c#l$p_!f!u!}#R#S#T#U#V#Z$S$T$l%U&U&Y&c&m'_(O(Q(V(_(h)k)q+]+b+c+u+z,Y,l,{-R-r-w.Z.[.b.c.g.t.x1W1[1i1n1p2o3`3a3b3t3x5n6R6T7`8_![%cg$g%d%i&s*Z*u+^,m,w-`0}1R2b;[;];^;e;f;s;t;u;v;z;{;}<[<]<^Y%snp%w-s.il(}#k.j3w3{4O4P7g7i7j7l7o9]9^:VS;i'u-zU;j(R.p.r&|<Paf{|!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$f$k$|$}%S%]%h%m&Q&W&b&y&|'O'j'k'v'z(a(j)m)s*a*c*i*j*m*s+X+Z+i+k+l,Q,S,o,r-j.S.T.X/Q/T/_/f/o/q/v/x0`0k0|1O1T1d1e1o1s1}2f2l2m2x4S4V4[4e5^5e5i5u6c6g6j6k6l6n6x6z7P7f7n7q8i8k8q8w8x9V9Z9a9c9p9s9t:P:S:Y:[:a:f:j;d;|Q<Q1Vd<R&x'P'b,x-^-_-b2i2}3QW<S&f*w2P3mQ<T#O[<U!t'^'g,]2W6_T<a%y0v`VOwx!g&S'e*r-fW$a[e$e(cQ$p.x!j$q_!f!u!}#V#Z$S$T$l%U&U&Y&c&m'_(h)k)q+]+b+u,Y,l,{-R-r.g1W1[1i1n1p2o3x5n8_&^$zaf{!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$f$k%]%m&Q&W&b&y&|'O'j'k'z(a(j)m)s*i*j*m*s+X+Z+i+k+l,Q,S,o,r-j.S.T.X/Q/T/_/f/o/q/v/x0k1O1T1d1e1o1s1}2f2l2x4S4V4[4e5^5i5u6c6g6j6l6n6x6z7P7f7n7q8i8k8q8w8x9V9Z9a9c9p9s9t:P:S:Y:[:a:f:j![%cg$g%d%i&s*Z*u+^,m,w-`0}1R2b;[;];^;e;f;s;t;u;v;z;{;}<[<]<^Y%snp%w-s.iQ's#O|'}#R#S#T#U(O(Q(V(_+c+z.Z.[.b.c.t3`3a3b3t6R6T7`l(}#k.j3w3{4O4P7g7i7j7l7o9]9^:VS-q'u-zQ3[-wU;w(R.p.rn<P|$|$}%S%h'v*a*c0`0|2m5e6k;d;|[<U!t'^'g,]2W6_W<V&f*w2P3md<W&x'P'b,x-^-_-b2i2}3QQ<_1VT<a%y0v!U!UO[ewx!g$e&S&f&x'P'b'e(c*r*w,x-^-_-b-f2P2i2}3Q3m!v$t_!f!u!}#O#V#Z$S$T$l%U&U&Y&c&m'_'u(R(h)k)q+]+u,Y,l,{-R-r-z.g.p.r1V1W1[1i1n1p2o3x5n8_&^%Paf{!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$f$k%]%m&Q&W&b&y&|'O'j'k'z(a(j)m)s*i*j*m*s+X+Z+i+k+l,Q,S,o,r-j.S.T.X/Q/T/_/f/o/q/v/x0k1O1T1d1e1o1s1}2f2l2x4S4V4[4e5^5i5u6c6g6j6l6n6x6z7P7f7n7q8i8k8q8w8x9V9Z9a9c9p9s9t:P:S:Y:[:a:f:j$Q%lgnp|#k$g$|$}%S%d%h%i%w%y&s'^'g'v*Z*a*c*u+^,],m,w-`-s.i.j0`0v0|0}1R2W2b2m3w3{4O4P5e6_6k7g7i7j7l7o9]9^:V;[;];^;d;e;f;s;t;u;v;z;{;|;}<[<]<^Q'[!tz(P#R#S#T#U(O(Q(V(_+z.Z.[.b.c.t3`3a3b3t6R6T7`f-['`-U-W-Z2s2t2v2y6u6v8tQ1Z+bQ1^+cQ2n,zQ3]-wQ4`.xQ5p1]R8Z5q!U!UO[ewx!g$e&S&f&x'P'b'e(c*r*w,x-^-_-b-f2P2i2}3Q3m!x$t_!f!u!}#O#V#Z$S$T$l%U&U&Y&c&m'_'u(R(h)k)q+]+b+u,Y,l,{-R-r-z.g.p.r1V1W1[1i1n1p2o3x5n8_&^%Paf{!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$f$k%]%m&Q&W&b&y&|'O'j'k'z(a(j)m)s*i*j*m*s+X+Z+i+k+l,Q,S,o,r-j.S.T.X/Q/T/_/f/o/q/v/x0k1O1T1d1e1o1s1}2f2l2x4S4V4[4e5^5i5u6c6g6j6l6n6x6z7P7f7n7q8i8k8q8w8x9V9Z9a9c9p9s9t:P:S:Y:[:a:f:j$S%lgnp|!t#k$g$|$}%S%d%h%i%w%y&s'^'g'v*Z*a*c*u+^,],m,w-`-s.i.j0`0v0|0}1R2W2b2m3w3{4O4P5e6_6k7g7i7j7l7o9]9^:V;[;];^;d;e;f;s;t;u;v;z;{;|;}<[<]<^|(P#R#S#T#U(O(Q(V(_+c+z.Z.[.b.c.t3`3a3b3t6R6T7`Q3]-wR4`.x`WOwx!g&S'e*r-fW$b[e$e(c#l$p_!f!u!}#R#S#T#U#V#Z$S$T$l%U&U&Y&c&m'_(O(Q(V(_(h)k)q+]+b+c+u+z,Y,l,{-R-r-w.Z.[.b.c.g.t.x1W1[1i1n1p2o3`3a3b3t3x5n6R6T7`8_![%cg$g%d%i&s*Z*u+^,m,w-`0}1R2b;[;];^;e;f;s;t;u;v;z;{;}<[<]<^Y%snp%w-s.il(}#k.j3w3{4O4P7g7i7j7l7o9]9^:VS;i'u-zU;j(R.p.rn<P|$|$}%S%h'v*a*c0`0|2m5e6k;d;|Q<Q1VQ<T#O[<U!t'^'g,]2W6_&^<Xaf{!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$f$k%]%m&Q&W&b&y&|'O'j'k'z(a(j)m)s*i*j*m*s+X+Z+i+k+l,Q,S,o,r-j.S.T.X/Q/T/_/f/o/q/v/x0k1O1T1d1e1o1s1}2f2l2x4S4V4[4e5^5i5u6c6g6j6l6n6x6z7P7f7n7q8i8k8q8w8x9V9Z9a9c9p9s9t:P:S:Y:[:a:f:jd<Y&x'P'b,x-^-_-b2i2}3QW<Z&f*w2P3mT<a%y0vp$PT$_$o%b%r(|;O;P;Q;`;a;b;c;g;h<`o)n$V*V*]/b:{:|:};l;m;n;o;p;q;r;yp$QT$_$o%b%r(|;O;P;Q;`;a;b;c;g;h<`o)o$V*V*]/b:{:|:};l;m;n;o;p;q;r;y^&e}!O$i$j%`%j;_d&i!U$t%P%l'[(P1Z1^3]4`V/d)P)Q4RS%Ye$eQ,U&fQ/O(cQ2p-RQ5}1pQ6Z2PQ6q2oR9l8_$R!TO[_ewx!f!g!u!}#O#V#Z$S$T$e$l%U&S&U&Y&c&f&m&x'P'_'b'e'u(R(c(h)k)q*r*w+]+b+u,Y,l,x,{-R-^-_-b-f-r-w-z.g.p.r1V1W1[1i1n1p2P2i2o2}3Q3m3x5n8_#`^O[_`wx!f!g!}#O$S$d$l$s$u&S&U&Y&c&m&r&x'P'b'e'u(R)q*^*r*w+],Y,l,x,{-^-_-b-f-r-w-z.g.p.r1V1W1i2i2}3Q3m3x_(V#R#S#T+c3`3a3b$RZO[wx!g!k#R#S#T%m&S&U&Y&c&m&w&x&y&|'O'P'['b'e'u'y(O(Q(R(V*r*w+]+c,Y,i,l,r-Q-^-_-b-f-r-w-z-}.b.g.p.t1V1W1i2f2n2}3Q3`3a3b3m6g6n8k9p9t:[:a:jQ$]YR0W*PR*R$]e0S*O0P0Q0R0U5R5S5T5W8U'd!YO[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'e'j'k'z(a(c(j)m)s*i*j*m*r*s*w+X+Z+i+k+l,Q,S,o,r,x-^-_-b-f-j.S.T.X/Q/T/_/f/o/q/v/x0k1O1T1d1e1o1s1}2P2f2i2l2x2}3Q3m4S4V4[4e5^5i5u6c6g6j6l6n6x6z7P7f7n7q8i8k8q8w8x9V9Z9a9c9p9s9t:P:S:Y:[:a:f:je0S*O0P0Q0R0U5R5S5T5W8UR5X0W^(U#R#S#T+c3`3a3bY.`(O(S(V(W7XU3o.^.a.tS7]3p4ZR9g7w^(T#R#S#T+c3`3a3b[._(O(S(U(V(W7XW3n.^.`.a.tU7[3o3p4ZS9O7]7wR:Z9gT.n(R.ph]Owx!g&S'e'u(R*r-f-z.p!v^[_`!f!}#O$S$d$l$s$u&U&Y&c&m&r&x'P'b)q*^*w+],Y,l,x,{-^-_-b-r-w.g.r1V1W1i2i2}3Q3m3xQ%tnT1x,O1y!nbOaenpwx{|!g#O$|$}%S%h%w&S'e'u'v(R*a*c*r-f-s-z.i.p.r0`0|1V2m5e6k;d;|f-X'`-U-W-Z2s2t2v2y6u6v8tj3|.j3w3{4O4P7g7i7j7l7o9]9^:Vr<Og$g%d%i&s*Z*u,m,w-`2b;[;];^;s;u;zi<b+^0}1R;e;f;t;v;{;}<[<]<^!O&^y%X&V&Y&Z'l)i*e*g+^+f+y/p0a0|0}1R1V1m5e5z;|;}z&az%O%W%e&d't*X*`,c-{0^0_0n1P2c2j3O5Z5f6p8mS'|#Q.[n+m&X*h+g+n+q-m/k0b1U1a4x5[5d5y8]Q2Z,b^2w-Y2u2{6t6{8s9we7m3}7c7k7s7t9Y9[9d:U:gS+_&U1WY+o&Y&c*w1V3mR5w1i#{!POaegnpwx{|!g#O$g$|$}%S%d%h%i%w&S&s'e'u'v(R*Z*a*c*r*u+^,m,w-`-f-s-z.i.p.r0`0|0}1R1V2b2m5e6k;[;];^;d;e;f;s;t;u;v;z;{;|;}<[<]<^doOwx!g&S'e'u*r-f-z#U!Paeg{|#O$g$|$}%S%d%h%i&s'v*Z*a*c*u+^,m,w-`0`0|0}1R1V2b2m5e6k;[;];^;d;e;f;s;t;u;v;z;{;|;}<[<]<^U%vnp-sQ+O%wS.h(R.pT3z.i.rW+s&^+m+t1fV+{&a+|7mQ+y&`U+{&a+|7mQ-z'uT.V'z.X'd![O[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'e'j'k'z(a(c(j)m)s*i*j*m*r*s*w+X+Z+i+k+l,Q,S,o,r,x-^-_-b-f-j.S.T.X/Q/T/_/f/o/q/v/x0k1O1T1d1e1o1s1}2P2f2i2l2x2}3Q3m4S4V4[4e5^5i5u6c6g6j6l6n6x6z7P7f7n7q8i8k8q8w8x9V9Z9a9c9p9s9t:P:S:Y:[:a:f:jX1u+z.[6R6T'[!VO[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'e'j'k'z(a(c(j)m)s*i*j*m*r*s*w+X+Z+i+k+l,Q,S,o,r,x-^-_-b-f-j.S.T.X/Q/_/f/q/v/x0k1O1T1d1e1o1s1}2P2f2i2l2x2}3Q3m4S4V4[5^5i5u6c6g6j6l6n6x6z7P7f7n7q8i8k8q8w8x9V9Z9a9c9p9s9t:P:S:Y:[:a:f:jW1u+z.[6R6TR2h,t![jO[wx!g!k%m&S&y&|'O'b'e*r,r-^-_-b-f2f2}6g6n8k9p9t:[:a:jY%Ve$e(c1s3mQ'S!nS(z#i5^Q,n&xQ,y'PS.R'z.XQ2e,oQ6o2lQ7Q3QQ8l6jR9q8i'[![O[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'e'j'k'z(a(c(j)m)s*i*j*m*r*s*w+X+Z+i+k+l,Q,S,o,r,x-^-_-b-f-j.S.T.X/Q/_/f/q/v/x0k1O1T1d1e1o1s1}2P2f2i2l2x2}3Q3m4S4V4[5^5i5u6c6g6j6l6n6x6z7P7f7n7q8i8k8q8w8x9V9Z9a9c9p9s9t:P:S:Y:[:a:f:jX1u+z.[6R6T'eyO[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'e'j'k'z(a(c(j)m)s*i*j*m*r*s*w+X+Z+i+k+l+z,Q,S,o,r,x-^-_-b-f-j.S.T.X.[/Q/_/f/q/v/x0k1O1T1d1e1o1s1}2P2f2i2l2x2}3Q3m4S4V4[5^5i5u6R6T6c6g6j6l6n6x6z7P7f7n7q8i8k8q8w8x9V9Z9a9c9p9s9t:P:S:Y:[:a:f:jQ&`yS'u#O-xR1_+dS+_&U1WR5r1_Q1S+^R5k1RR1S+^T+_&U1Wz&[%X&V&Y&Z'l)i*e*g+^+f/p0a0|0}1R1V1m5e5z;|;}Q&]yR1q+y!P&[y%X&V&Y&Z'l)i*e*g+^+f+y/p0a0|0}1R1V1m5e5z;|;}Q+v&^S+}&a7mS1g+m+tQ1w+|R5v1f![kO[wx!g!k%m&S&y&|'O'b'e*r,r-^-_-b-f2f2}6g6n8k9p9t:[:a:jS%zo.hS&Oq-uQ&_yQ&q!eQ*q%eU*|%v%{3zS+Q%x%}Q+r&]Q,s&{S0[*X,cS0r*}+OQ0t+PQ1r+yQ5Y0^Q5_0sQ6P1qQ6a2ZQ7r3}Q9W7cR:T9Y`uOwx!g&S'e*r-fQ,Z&mQ-y'uQ3^-wR3c-z|lOwx!g!k%m&S&y'O'e*r,r-f2f6g6n8k9p9t:[:a:jU$h[&|-_S%zo.hS&Oq-uQ*q%eU*|%v%{3zS+Q%x%}S0[*X,cS0r*}+OQ0t+PQ5Y0^Q5_0sQ7r3}Q9W7cR:T9YT,`&q,aauOwx!g&S'e*r-f`uOwx!g&S'e*r-fQ,Z&mQ,o&xQ,x'PW-a'b-^-b2}Q-y'uQ3^-wQ3c-zR7P3Q[%fg$g,m,w-`2bR0o*u^$XV!U$a$z%P<V<WQ'S!nS)a#}*wS)w$W*rQ)z$YY*t%e*X0n2j3OQ/R(gS/l)j/SS0d*i4eS0m*s6cQ0u+RQ4U.jQ4r/fS4u/m/nS4z/q5^Q5P/xQ6d2cU7e3w3}4VQ8S4vQ8o6lY9U7c7f7g7p7qQ9v8qW:O9S9V9Y9ZQ:_9sU:e:P:R:SR:n:fS)w$W*rT4z/q5^Z)u$W)v*r/q5^Q&t!gQ'f!yQ,Z&mS,[&n'hS2V,^-iR6^2UQ&w!hR'y#PS,h&v'wQ2_,fR6b2^|lOwx!g!k%m&S&y'O'e*r,r-f2f6g6n8k9p9t:[:a:jV$h[&|-_!]kO[wx!g!k%m&S&y&|'O'b'e*r,r-^-_-b-f2f2}6g6n8k9p9t:[:a:j![hO[wx!g!k%m&S&y&|'O'b'e*r,r-^-_-b-f2f2}6g6n8k9p9t:[:a:jR'W!q![kO[wx!g!k%m&S&y&|'O'b'e*r,r-^-_-b-f2f2}6g6n8k9p9t:[:a:jR,o&xQ&y!iQ&{!jQ'O!lR,r&zR,p&x|lOwx!g!k%m&S&y'O'e*r,r-f2f6g6n8k9p9t:[:a:jX-a'b-^-b2}`uOwx!g&S'e*r-fQ,{'PQ-y'uS.n(R.pR3c-z`uOwx!g&S'e*r-fQ,{'PW-a'b-^-b2}T.n(R.pg-['`-U-W-Z2s2t2v2y6u6v8t}lOwx!g!k%m&S&y'O'e*r,r-f2f6g6n8k9p9t:[:a:jf!OOaewx{!g&S'e*r-f&|$j[f!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&W&b&f&x&y&|'O'P'b'j'k'z(a(c(j)m)s*i*j*m*s*w+X+Z+i+k+l,Q,S,o,r,x-^-_-b-j.S.T.X/Q/T/_/f/o/q/v/x0k1O1T1d1e1o1s1}2P2f2i2l2x2}3Q3m4S4V4[4e5^5i5u6c6g6j6l6n6x6z7P7f7n7q8i8k8q8w8x9V9Z9a9c9p9s9t:P:S:Y:[:a:f:j#d%jgnp|#O$g$|$}%S%d%h%i%w&s'u'v(R*Z*a*c*u+^,m,w-`-s-z.i.p.r0`0|0}1R1V2b2m5e6k;[;];^;d;e;f;s;t;u;v;z;{;|;}<[<]<^Q']!tQ-T'^Q-g'gQ2T,]Q6`2WR8e6_j$RT$_%b%r;O;P;Q;`;a;b;c;g;hi)p$V*V:{:|:};l;m;n;o;p;q;rj$RT$_%b%r;O;P;Q;`;a;b;c;g;hh)p$V*V:{:|:};l;m;n;o;p;q;rS/a(|<`V4o/b/c;y`uOwx!g&S'e*r-fQ-y'uR3c-z`uOwx!g&S'e*r-fT.n(R.p'd!YO[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'e'j'k'z(a(c(j)m)s*i*j*m*r*s*w+X+Z+i+k+l,Q,S,o,r,x-^-_-b-f-j.S.T.X/Q/T/_/f/o/q/v/x0k1O1T1d1e1o1s1}2P2f2i2l2x2}3Q3m4S4V4[4e5^5i5u6c6g6j6l6n6x6z7P7f7n7q8i8k8q8w8x9V9Z9a9c9p9s9t:P:S:Y:[:a:f:jR7V3X`uOwx!g&S'e*r-fQ-y'uS.n(R.pR3c-z`pOwx!g&S'e*r-fQ%wnS-s'u-zT.i(R.pS%{o.hS*}%v3zR0s+OQ+S%yR5a0vS%zo.hS&Oq-uU*|%v%{3zS+Q%x%}S0r*}+OQ0t+PQ5_0sQ7r3}Q9W7cR:T9YdqOwx!g&S'e(R*r-f.pS%xn-sU%}p.i.rQ+P%wT-u'u-zS'{#Q.[R.]'|T.U'z.XS.V'z.XQ8|7YR9{8}T6R1t8cR6T1t#d!Pgnp|#O$g$|$}%S%d%h%i%w&s'u'v(R*Z*a*c*u+^,m,w-`-s-z.i.p.r0`0|0}1R1V2b2m5e6k;[;];^;d;e;f;s;t;u;v;z;{;|;}<[<]<^f!QOaewx{!g&S'e*r-f&}![[f!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&W&b&f&x&y&|'O'P'b'j'k'z(a(c(j)m)s*i*j*m*s*w+X+Z+i+k+l,Q,S,o,r,x-^-_-b-j.S.T.X/Q/T/_/f/o/q/v/x0k1O1T1d1e1o1s1}2P2f2i2l2x2}3Q3m4S4V4[4e5^5i5u6c6g6j6l6n6x6z7P7f7n7q8i8k8q8w8x9V9Z9a9c9p9s9t:P:S:Y:[:a:f:j#d!Pgnp|#O$g$|$}%S%d%h%i%w&s'u'v(R*Z*a*c*u+^,m,w-`-s-z.i.p.r0`0|0}1R1V2b2m5e6k;[;];^;d;e;f;s;t;u;v;z;{;|;}<[<]<^f!QOaewx{!g&S'e*r-f&|![[f!W!X!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#{#}$U$W$Y$e$f$k%]%m&Q&W&b&f&x&y&|'O'P'b'j'k'z(a(c(j)m)s*i*j*m*s*w+X+Z+i+k+l,Q,S,o,r,x-^-_-b-j.S.T.X/Q/T/_/f/o/q/v/x0k1O1T1d1e1o1s1}2P2f2i2l2x2}3Q3m4S4V4[4e5^5i5u6c6g6j6l6n6x6z7P7f7n7q8i8k8q8w8x9V9Z9a9c9p9s9t:P:S:Y:[:a:f:jk4Q.j3w3{4O4P7g7i7j7l7o9]9^:VQ4U.jS7e3w3}U9U7c7g7pS:O9S9YR:e:R$Q!TO[_ewx!f!g!u!}#O#V#Z$S$T$e$l%U&S&U&Y&c&f&m&x'P'_'b'e'u(R(c(h)k)q*r*w+]+b+u,Y,l,x,{-R-^-_-b-f-r-w-z.g.p.r1V1W1[1i1n1p2P2i2o2}3Q3m3x5n8_R4a.xQ(^#US.y(](_S4b.z.{R7{4cQ.v([R7y4]$Q!TO[_ewx!f!g!u!}#O#V#Z$S$T$e$l%U&S&U&Y&c&f&m&x'P'_'b'e'u(R(c(h)k)q*r*w+]+b+u,Y,l,x,{-R-^-_-b-f-r-w-z.g.p.r1V1W1[1i1n1p2P2i2o2}3Q3m3x5n8_p$w`$d$s%X&r'`(`(g)j*e-U/n1m5o5z8Yq)O#k%y.j0v3w3{4O4P7g7i7j7l7o9]9^:VR,V&fR6[2P']!VO[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'e'j'k'z(a(c(j)m)s*i*j*m*r*s*w+X+Z+i+k+l,Q,S,o,r,x-^-_-b-f-j.S.T.X/Q/_/f/q/v/x0k1O1T1d1e1o1s1}2P2f2i2l2x2}3Q3m4S4V4[5^5i5u6c6g6j6l6n6x6z7P7f7n7q8i8k8q8w8x9V9Z9a9c9p9s9t:P:S:Y:[:a:f:j$q#rS%T%Z'Q'X'Z'a'c(b(f(i(x(y)S)T)V)W)X)Y)Z)[)])^)_)`)l)r)y+Y+h,P,T,k,v-k-l.P.|/s0c0e0j0l0z1c1|2d2k3V3g3h4g4h4n4q4w4y4}5O5h5t5{6Y6i6m6w7O7u7v7x8W8X8g8j8n8v9X9`9o9u:Q:X:^:d:m$]#sS%T%Z'Q'X'Z'a'c(i(x(y)S)W)_)`)l)r)y+Y+h,P,T,k,v-k-l.P.|/s0c0e0j0l0z1c1|2d2k3V3g3h4g4h4n4q4w4y4}5O5h5t5{6Y6i6m6w7O7u7v7x8W8X8g8j8n8v9X9`9o9u:Q:X:^:d:m$Z#tS%T%Z'Q'X'Z'a'c(i(x(y)S)_)`)l)r)y+Y+h,P,T,k,v-k-l.P.|/s0c0e0j0l0z1c1|2d2k3V3g3h4g4h4n4q4w4y4}5O5h5t5{6Y6i6m6w7O7u7v7x8W8X8g8j8n8v9X9`9o9u:Q:X:^:d:m$c#wS%T%Z'Q'X'Z'a'c(i(x(y)S)V)W)X)Y)_)`)l)r)y+Y+h,P,T,k,v-k-l.P.|/s0c0e0j0l0z1c1|2d2k3V3g3h4g4h4n4q4w4y4}5O5h5t5{6Y6i6m6w7O7u7v7x8W8X8g8j8n8v9X9`9o9u:Q:X:^:d:m']![O[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'e'j'k'z(a(c(j)m)s*i*j*m*r*s*w+X+Z+i+k+l,Q,S,o,r,x-^-_-b-f-j.S.T.X/Q/_/f/q/v/x0k1O1T1d1e1o1s1}2P2f2i2l2x2}3Q3m4S4V4[5^5i5u6c6g6j6l6n6x6z7P7f7n7q8i8k8q8w8x9V9Z9a9c9p9s9t:P:S:Y:[:a:f:jQ/S(gQ/m)jQ4v/nR9h7}'a![O[aefwx{!W!X!g!k!n!r!s!v!x#X#Y#[#g#i#l#q#r#s#t#u#v#w#x#y#z#}$U$W$Y$e$f$k%]%m&Q&S&W&b&f&x&y&|'O'P'b'e'j'k'z(a(c(j)m)s*i*j*m*r*s*w+X+Z+i+k+l,Q,S,o,r,x-^-_-b-f-j.S.T.X/Q/T/_/f/o/q/v/x0k1O1T1d1e1o1s1}2P2f2i2l2x2}3Q3m4S4V4[5^5i5u6c6g6j6l6n6x6z7P7f7n7q8i8k8q8w8x9V9Z9a9c9p9s9t:P:S:Y:[:a:f:jQ#eQR(v#eU$|a;d;|b%Ue$e&f(c-R1p2P2o8_Q'_!u!Q*_$|%U'_*a*g+i,Q0`0a1e2s6u6x7i8t9]9a:V;[;s;t;z;{<[S*a$}%SQ*g%XS+i&W1TQ,Q&bQ0`*cQ0a*eQ1e+lQ2s-WS6u2t2vQ6x2xQ7i3{Q8t6vS9]7j7lQ9a7nQ:V9^Q;[%dS;s;];^S;t<]<^Q;z;uQ;{;vT<[0};e`[Owx!g&S'e*r-fl$c[&|(O+],Y,i,l-Q-_-r-}.b.g.tl&|!k%m&y'O,r2f6g6n8k9p9t:[:a:j^(O#R#S#T+c3`3a3b`+]&U&Y&c*w1V1W1i3mS,Y&m-wQ,i&wU,l&x'P3QS-Q'[2nW-_'b-^-b2}S-r'u-zQ-}'yQ.b(QS.g(R.pR.t(VQ)}$[R/{)}Q0U*OQ5R0PQ5S0QQ5T0RY5U0U5R5S5T8UR8U5WQ*Q$]S0X*Q0YR0Y*RS.c(Q.bS3r.c7`R7`3tQ3u.dS7^3s3vU7b3u7^9PR9P7_Q.p(RR4W.p#Q_O[wx!f!g!}#O$S$l&S&U&Y&c&m&x'P'b'e'u(R)q*r*w+],Y,l,x,{-^-_-b-f-r-w-z.g.p.r1V1W1i2i2}3Q3m3xU$r_$u*^U$u`$d&rR*^$sU$}a;d;|d*b$}*c2t6v7j9^;];u;v<]Q*c%SQ2t-WQ6v2vQ7j3{Q9^7lQ;]%dQ;u;^Q;v<^T<]0};eS+|&a7mR1v+|S*k%Z/sR0f*kQ1X+`R5m1XU+f&V0};|R1`+fQ+t&^Q1f+mT1l+t1fQ8`5}R9m8`QwOU&Rw&S-fS&Sx*rR-f'eQ,a&qR2Y,aW)v$W*r/q5^R/w)vU/r)r)w0jR4{/r[*v%e%f*X2c2j3OR0p*vQ,e&uR2],eQ-b'bQ2}-^T3P-b2}Q2z-YR6|2zQ-i'hQ2U,^T3U-i2US%pm7UR*{%phnOwx!g&S'e'u(R*r-f-z.pR%unQ0w+SR5b0wQ.X'zR3j.XQ1y,OR6U1yU*o%`*y;_R0i*oS1j+o0qR5x1jQ7p3}Q9S7cU9e7p9S:RR:R9Y$S!SO[_ewx!f!g!u!}#O#V#Z$S$T$e$l%U&S&U&Y&c&f&m&x'P'_'b'e'u(R(c(h)k)q*r*w+]+b+u,Y,l,x,{-R-^-_-b-f-r-w-z.g.p.r.x1V1W1[1i1n1p2P2i2o2}3Q3m3x5n8_R&g!SQ4^.vR7z4^Q2Q,VR6]2QS/g)`)aR4s/gW(p#a(k(l/VR/Z(pQ8P4jR9j8PT)b#}*w!YSO[wx!g!k%m&S&y&|'O'b'e,r-^-_-b-f2f2}6g6n8k9p9t:[:a:jj$ya{$k%]+k,S1d1}5u6z8w9c:YY%Te$e(c1s3mY%Zf$f(j)m*mQ&j!WQ&k!XQ'Q!nQ'X!rQ'Z!sQ'a!vQ'c!xQ(b#XQ(f#YS(i#[+ZQ(x#gQ(y#iQ)S#lQ)T#qQ)U#rQ)V#sQ)W#tQ)X#uQ)Y#vQ)Z#wQ)[#xQ)]#yQ)^#zQ)_#{S)`#}*wQ)l$UQ)r$WQ)y$YQ+Y&QS+h&W1TQ,P&bQ,T&fQ,k&xQ,v'PQ-k'jQ-l'kS.P'z.XQ.|(aS/s)s0kS0c*i4eQ0e*jQ0j*rQ0l*sQ0z+XS1c+i+lQ1|,QQ2d,oS2k,x7PQ3V-jQ3g.SQ3h.TQ4g/QQ4h/TQ4n/_Q4q/fQ4w/oQ4y/qQ4}/vQ5O/xQ5h1OQ5t1eQ5{1oQ6Y2PS6i2i8xQ6m2lQ6w2xQ7O3QQ7u4SQ7v4VQ7x4[Q8W5^Q8X5iQ8g6cQ8j6jQ8n6lQ8v6xS9X7f7qQ9`7nQ9o8iQ9u8qS:Q9V9ZQ:X9aQ:^9sS:d:P:SR:m:fR,W&fh]Owx!g&S'e'u(R*r-f-z.p!v^[_`!f!}#O$S$d$l$s$u&U&Y&c&m&r&x'P'b)q*^*w+],Y,l,x,{-^-_-b-r-w.g.r1V1W1i2i2}3Q3m3x#r${ae!u$e$|$}%S%U%X%d&W&b&f'_(c*a*c*e*g+i+l,Q-R-W0`0a1T1e1p2P2o2s2t2v2x3{6u6v6x7i7j7l7n8_8t9]9^9a:V;[;];^;d;e;s;t;u;v;z;{<[<]<^Q%tnS+e&V+fW+s&^+m+t1fU+{&a+|7mQ1n+uT5g0};|d`Owx!g&S'e'u*r-f-zS$d[-rQ$s_b%Xe$e&f(c-R1p2P2o8_!h&r!f!}#O$S$l&U&Y&c&m&x'P'b(R)q*w+],Y,l,x,{-^-_-b-w.g.p.r1V1W1i2i2}3Q3m3xQ'`!uS(`#V+bQ(g#ZS)j$T(hQ*e%UQ-U'_Q/n)kQ1m+uQ5o1[Q5z1nR8Y5nS(X#R3aS(Y#S3bV(Z#T+c3`R$^Ye0T*O0P0Q0R0U5R5S5T5W8UW(S#R#S#T+cQ(]#US.^(O(VS.d(Q.bQ.{(_W1u+z.[6R6TQ3_-wQ3l.ZQ3s.cQ4Z.tU7X3`3a3bQ7a3tR9Q7`Q.e(QR3q.bT.o(R.phgOwx!g&S&m'e'u*r-f-w-zU$g[,Y-rQ&s!fQ'l!}Q'v#OQ)i$SQ*Z$l`+^&U&Y&c*w1V1W1i3mQ,m&xQ,w'PY-`'b-^-b2}3QS.j(R.pQ/p)qQ0|+]S2b,l-_S2m,x,{S3w.g.rQ6k2iR7g3xh]Owx!g&S'e'u(R*r-f-z.p!v^[_`!f!}#O$S$d$l$s$u&U&Y&c&m&r&x'P'b)q*^*w+],Y,l,x,{-^-_-b-r-w.g.r1V1W1i2i2}3Q3m3xR%tnQ3}.jQ7c3wQ7k3{Q7s4OQ7t4PQ9Y7gU9[7i7j7lQ9d7oS:U9]9^R:g:VZ+p&Y&c*w1V3mtzOnpwx!g%w&S'e'u(R*r-f-s-z.i.p.r[%Oa%d0};d;e;|U%We%h1VQ%eg^&d{|%i1R5e;f;}Q't#OQ*X$gb*`$|$}%S;[;];^<[<]<^Q,c&sQ-{'vQ0^*Z[0_*a*c;s;t;u;vQ0n*uQ1P+^Q2c,mQ2j,wS3O-`2bU5Z0`;z;{Q5f0|Q6p2mR8m6kQ,O&aR9_7mS1t+z.[Q8b6RR8c6T[%^f$f(j)m)s0kR0g*mR+a&UQ+`&UR5l1WS&Xy+yQ*h%XU+g&V0};|S+n&Y1VW+q&Z1R5e;}Q-m'lQ/k)iS0b*e*gQ1U+^Q1a+fQ4x/pQ5[0aQ5d0|Q5y1mR8]5zR6O1p^vOwx&S'e*r-fR&t!gW%gg,m,w-`T*Y$g2bT)x$W*r`uOwx!g&S'e*r-fQ&}!kQ*z%mQ,q&yQ,u'OQ2g,rQ6f2fQ8h6gQ8p6nQ9r8kQ:]9pQ:`9tQ:i:[Q:k:aR:o:j|lOwx!g!k%m&S&y'O'e*r,r-f2f6g6n8k9p9t:[:a:jU$h[&|-_X-a'b-^-b2}Q-]'`R2r-US-Y'`-UQ2u-WQ2{-ZU6t2s2t2vQ6{2yS8s6u6vR9w8t`rOwx!g&S'e*r-fS-t'u-zT.k(R.pR+T%y`sOwx!g&S'e*r-fS-v'u-zT.l(R.p`tOwx!g&S'e*r-fT.m(R.pT.W'z.XX%af%k0k1TQ.z(]R4c.{R.w([R(e#XQ(s#aS/U(k(lR4i/VR/Y(mR4k/W",
     nodeNames: "⚠ RawString > MacroName LineComment BlockComment PreprocDirective #include String EscapeSequence SystemLibString Identifier ArgumentList ( ConditionalExpression AssignmentExpression CallExpression PrimitiveType FieldExpression FieldIdentifier DestructorName TemplateMethod ScopedFieldIdentifier NamespaceIdentifier TemplateType TypeIdentifier ScopedTypeIdentifier ScopedNamespaceIdentifier :: NamespaceIdentifier TypeIdentifier TemplateArgumentList < TypeDescriptor const volatile restrict _Atomic mutable constexpr constinit consteval StructSpecifier struct MsDeclspecModifier __declspec ) Attribute AttributeName Identifier AttributeArgs { } [ ] UpdateOp ArithOp ArithOp ArithOp LogicOp BitOp BitOp BitOp CompareOp CompareOp CompareOp > CompareOp BitOp UpdateOp , Number CharLiteral AttributeArgs VirtualSpecifier BaseClassClause Access virtual FieldDeclarationList FieldDeclaration extern static register inline thread_local AttributeSpecifier __attribute__ PointerDeclarator MsBasedModifier __based MsPointerModifier FunctionDeclarator ParameterList ParameterDeclaration PointerDeclarator FunctionDeclarator Noexcept noexcept RequiresClause requires True False ParenthesizedExpression CommaExpression LambdaExpression LambdaCaptureSpecifier TemplateParameterList OptionalParameterDeclaration TypeParameterDeclaration typename class VariadicParameterDeclaration VariadicDeclarator ReferenceDeclarator OptionalTypeParameterDeclaration VariadicTypeParameterDeclaration TemplateTemplateParameterDeclaration template AbstractFunctionDeclarator AbstractPointerDeclarator AbstractArrayDeclarator AbstractParenthesizedDeclarator AbstractReferenceDeclarator ThrowSpecifier throw TrailingReturnType CompoundStatement FunctionDefinition MsCallModifier TryStatement try CatchClause catch LinkageSpecification Declaration InitDeclarator InitializerList InitializerPair SubscriptDesignator FieldDesignator DeclarationList ExportDeclaration export ImportDeclaration import ModuleName PartitionName HeaderName CaseStatement case default LabeledStatement StatementIdentifier ExpressionStatement IfStatement if ConditionClause Declaration else SwitchStatement switch DoStatement do while WhileStatement ForStatement for ReturnStatement return BreakStatement break ContinueStatement continue GotoStatement goto CoReturnStatement co_return CoYieldStatement co_yield AttributeStatement ForRangeLoop AliasDeclaration using TypeDefinition typedef PointerDeclarator FunctionDeclarator ArrayDeclarator ParenthesizedDeclarator ThrowStatement NamespaceDefinition namespace ScopedIdentifier Identifier OperatorName operator ArithOp BitOp CompareOp LogicOp new delete co_await ConceptDefinition concept UsingDeclaration enum StaticAssertDeclaration static_assert ConcatenatedString TemplateDeclaration FriendDeclaration friend union FunctionDefinition ExplicitFunctionSpecifier explicit FieldInitializerList FieldInitializer DefaultMethodClause DeleteMethodClause FunctionDefinition OperatorCast operator TemplateInstantiation FunctionDefinition FunctionDefinition Declaration ModuleDeclaration module RequiresExpression RequirementList SimpleRequirement TypeRequirement CompoundRequirement ReturnTypeRequirement ConstraintConjuction LogicOp ConstraintDisjunction LogicOp ArrayDeclarator ParenthesizedDeclarator ReferenceDeclarator TemplateFunction OperatorName StructuredBindingDeclarator ArrayDeclarator ParenthesizedDeclarator ReferenceDeclarator BitfieldClause FunctionDefinition FunctionDefinition Declaration FunctionDefinition Declaration AccessSpecifier UnionSpecifier ClassSpecifier EnumSpecifier SizedTypeSpecifier TypeSize EnumeratorList Enumerator DependentType Decltype decltype auto PlaceholderTypeSpecifier ParameterPackExpansion ParameterPackExpansion FieldIdentifier PointerExpression SubscriptExpression BinaryExpression ArithOp LogicOp LogicOp BitOp UnaryExpression LogicOp BitOp UpdateExpression CastExpression SizeofExpression sizeof CoAwaitExpression CompoundLiteralExpression NULL NewExpression new NewDeclarator DeleteExpression delete ParameterPackExpansion nullptr this UserDefinedLiteral ParamPack #define PreprocArg #if #ifdef #ifndef #else #endif #elif PreprocDirectiveName Macro Program",
     maxTerm: 426,
     nodeProps: [
       ["group", -35,1,8,11,14,15,16,18,71,72,100,101,102,104,192,209,230,243,244,271,272,273,278,281,282,283,285,286,287,288,291,293,294,295,296,297,"Expression",-13,17,24,25,26,42,256,257,258,259,263,264,266,267,"Type",-19,126,129,148,151,153,154,159,161,164,165,167,169,171,173,175,177,179,180,189,"Statement"]
     ],
     propSources: [cppHighlighting],
     skippedNodes: [0,3,4,5,6,7,10,298,299,300,301,302,303,304,305,306,307,348,349],
     repeatNodeCount: 41,
     tokenData: "&*r7ZR!UOX$eXY({YZ.gZ]$e]^+P^p$epq({qr.}rs0}st2ktu$euv!7dvw!9bwx!;exy!<Yyz!=Tz{!>O{|!?R|}!AV}!O!BQ!O!P!DX!P!Q#+y!Q!R#Az!R![$(x![!]$Ag!]!^$Cc!^!_$D^!_!`%1W!`!a%2X!a!b%5_!b!c$e!c!n%6Y!n!o%7q!o!w%6Y!w!x%7q!x!}%6Y!}#O%:n#O#P%<g#P#Q%Kz#Q#R%Ms#R#S%6Y#S#T$e#T#i%6Y#i#j%Nv#j#o%6Y#o#p&!e#p#q&#`#q#r&%f#r#s&&a#s;'S$e;'S;=`(u<%lO$e&t$nY)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e&r%eW)[W'g&jOY%^Zw%^wx%}x#O%^#O#P&f#P;'S%^;'S;=`'x<%lO%^&j&SU'g&jOY%}Z#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}&j&kX'g&jOY%}YZ%}Z]%}]^'W^#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}&j']V'g&jOY%}YZ%}Z#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}&j'uP;=`<%l%}&r'{P;=`<%l%^&l(VW(qQ'g&jOY(OZr(Ors%}s#O(O#O#P&f#P;'S(O;'S;=`(o<%lO(O&l(rP;=`<%l(O&t(xP;=`<%l$e7Z)Y`)[W(qQ(o.o'g&j*[)`OX$eXY({YZ*[Z]$e]^+P^p$epq({qr$ers%^sw$ewx(Ox#O$e#O#P,^#P;'S$e;'S;=`(u<%lO$e.o*aT(o.oXY*[YZ*[]^*[pq*[#O#P*p.o*sQYZ*[]^*y.o*|PYZ*[4e+[`)[W(qQ(o.o'g&jOX$eXY+PYZ*[Z]$e]^+P^p$epq+Pqr$ers%^sw$ewx(Ox#O$e#O#P,^#P;'S$e;'S;=`(u<%lO$e4Z,cX'g&jOY%}YZ-OZ]%}]^-{^#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}4Z-V[(o.o'g&jOX%}XY-OYZ*[Z]%}]^-O^p%}pq-Oq#O%}#O#P,^#P;'S%};'S;=`'r<%lO%}4Z.QV'g&jOY%}YZ-OZ#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}7P.nT*X)`(o.oXY*[YZ*[]^*[pq*[#O#P*p3o/[[%_!b'RP)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox!_$e!_!`0Q!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o0_Y%^!b!a,g)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e6e1YY)[W(rQ(p/]'g&jOY%^Zr%^rs1xsw%^wx%}x#O%^#O#P&f#P;'S%^;'S;=`'x<%lO%^(U2RW)y!b)[W'g&jOY%^Zw%^wx%}x#O%^#O#P&f#P;'S%^;'S;=`'x<%lO%^4e2tf)[W(qQ'g&jOX$eXY2kZp$epq2kqr$ers%^sw$ewx(Ox!c$e!c!}4Y!}#O$e#O#P&f#P#T$e#T#W4Y#W#X5m#X#Y>u#Y#]4Y#]#^NZ#^#o4Y#o;'S$e;'S;=`(u<%lO$e4e4eb)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e4e5xd)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#X4Y#X#Y7W#Y#o4Y#o;'S$e;'S;=`(u<%lO$e4e7cd)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#Y4Y#Y#Z8q#Z#o4Y#o;'S$e;'S;=`(u<%lO$e4e8|d)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#]4Y#]#^:[#^#o4Y#o;'S$e;'S;=`(u<%lO$e4e:gd)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#b4Y#b#c;u#c#o4Y#o;'S$e;'S;=`(u<%lO$e4e<Qd)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#X4Y#X#Y=`#Y#o4Y#o;'S$e;'S;=`(u<%lO$e4e=mb)[W(qQ'f.o'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e4e?Qf)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#`4Y#`#a@f#a#b4Y#b#cHV#c#o4Y#o;'S$e;'S;=`(u<%lO$e4e@qf)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#]4Y#]#^BV#^#g4Y#g#hEV#h#o4Y#o;'S$e;'S;=`(u<%lO$e4eBbd)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#Y4Y#Y#ZCp#Z#o4Y#o;'S$e;'S;=`(u<%lO$e4eC}b)[W(qQ'g&j'm.o'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e4eEbd)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#X4Y#X#YFp#Y#o4Y#o;'S$e;'S;=`(u<%lO$e4eF}b)[W(qQ'k.o'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e4eHbd)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#W4Y#W#XIp#X#o4Y#o;'S$e;'S;=`(u<%lO$e4eI{d)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#]4Y#]#^KZ#^#o4Y#o;'S$e;'S;=`(u<%lO$e4eKfd)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#Y4Y#Y#ZLt#Z#o4Y#o;'S$e;'S;=`(u<%lO$e4eMRb)[W(qQ'g&j'l.o'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e4eNff)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#Y4Y#Y#Z! z#Z#b4Y#b#c!.[#c#o4Y#o;'S$e;'S;=`(u<%lO$e4e!!Xf)[W(qQ'h.o'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#W4Y#W#X!#m#X#b4Y#b#c!(W#c#o4Y#o;'S$e;'S;=`(u<%lO$e4e!#xd)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#X4Y#X#Y!%W#Y#o4Y#o;'S$e;'S;=`(u<%lO$e4e!%cd)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#Y4Y#Y#Z!&q#Z#o4Y#o;'S$e;'S;=`(u<%lO$e4e!'Ob)[W(qQ'i.o'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e4e!(cd)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#W4Y#W#X!)q#X#o4Y#o;'S$e;'S;=`(u<%lO$e4e!)|d)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#X4Y#X#Y!+[#Y#o4Y#o;'S$e;'S;=`(u<%lO$e4e!+gd)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#Y4Y#Y#Z!,u#Z#o4Y#o;'S$e;'S;=`(u<%lO$e4e!-Sb)[W(qQ'j.o'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e4e!.gd)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#V4Y#V#W!/u#W#o4Y#o;'S$e;'S;=`(u<%lO$e4e!0Qd)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#`4Y#`#a!1`#a#o4Y#o;'S$e;'S;=`(u<%lO$e4e!1kd)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#i4Y#i#j!2y#j#o4Y#o;'S$e;'S;=`(u<%lO$e4e!3Ud)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#W4Y#W#X!4d#X#o4Y#o;'S$e;'S;=`(u<%lO$e4e!4od)[W(qQ'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#X4Y#X#Y!5}#Y#o4Y#o;'S$e;'S;=`(u<%lO$e4e!6[b)[W(qQV.o'g&j'n.oOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![4Y![!c$e!c!}4Y!}#O$e#O#P&f#P#R$e#R#S4Y#S#T$e#T#o4Y#o;'S$e;'S;=`(u<%lO$e3o!7q[)[W(qQ%[!b![,g'g&jOY$eZr$ers%^sw$ewx(Ox!_$e!_!`!8g!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!8rY!g-y)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!9o])W,g)[W(qQ%]!b'g&jOY$eZr$ers%^sv$evw!:hwx(Ox!_$e!_!`!8g!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!:uY)V,g%_!b)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2X!;pW)]S(qQ)Z,g'g&jOY(OZr(Ors%}s#O(O#O#P&f#P;'S(O;'S;=`(o<%lO(O6i!<eY)[W(qQ]6_'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e'V!=`Y!Oa)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!>][)T,g)[W(qQ%[!b'g&jOY$eZr$ers%^sw$ewx(Ox!_$e!_!`!8g!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!?`^)[W(qQ%[!b!Y,g'g&jOY$eZr$ers%^sw$ewx(Ox{$e{|!@[|!_$e!_!`!8g!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!@gY)[W!X-y(qQ'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2a!AbY!h,k)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!B__)[W(qQ%[!b!Y,g'g&jOY$eZr$ers%^sw$ewx(Ox}$e}!O!@[!O!_$e!_!`!8g!`!a!C^!a#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o!CiY(y-y)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2a!Dd^)[W(qQ'g&j(x,gOY$eZr$ers%^sw$ewx(Ox!O$e!O!P!E`!P!Q$e!Q![!GY![#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2a!Ei[)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox!O$e!O!P!F_!P#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2a!FjY)Y,k)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2]!Gen)[W(qQ!i,g'g&jOY$eZr$ers%^sw$ewx!Icx!Q$e!Q![!GY![!g$e!g!h#$w!h!i#*Y!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#X$e#X#Y#$w#Y#Z#*Y#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2T!IjY(qQ'g&jOY(OZr(Ors%}s!Q(O!Q![!JY![#O(O#O#P&f#P;'S(O;'S;=`(o<%lO(O2T!Jcn(qQ!i,g'g&jOY(OZr(Ors%}sw(Owx!Icx!Q(O!Q![!JY![!g(O!g!h!La!h!i##`!i!n(O!n!o##`!o!r(O!r!s!La!s!w(O!w!x##`!x#O(O#O#P&f#P#X(O#X#Y!La#Y#Z##`#Z#`(O#`#a##`#a#d(O#d#e!La#e#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2T!Ljl(qQ!i,g'g&jOY(OZr(Ors%}s{(O{|!Nb|}(O}!O!Nb!O!Q(O!Q![# e![!c(O!c!h# e!h!i# e!i!n(O!n!o##`!o!w(O!w!x##`!x#O(O#O#P&f#P#T(O#T#Y# e#Y#Z# e#Z#`(O#`#a##`#a#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2T!Ni^(qQ'g&jOY(OZr(Ors%}s!Q(O!Q![# e![!c(O!c!i# e!i#O(O#O#P&f#P#T(O#T#Z# e#Z;'S(O;'S;=`(o<%lO(O2T# nj(qQ!i,g'g&jOY(OZr(Ors%}sw(Owx!Nbx!Q(O!Q![# e![!c(O!c!h# e!h!i# e!i!n(O!n!o##`!o!w(O!w!x##`!x#O(O#O#P&f#P#T(O#T#Y# e#Y#Z# e#Z#`(O#`#a##`#a#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2T##id(qQ!i,g'g&jOY(OZr(Ors%}s!h(O!h!i##`!i!n(O!n!o##`!o!w(O!w!x##`!x#O(O#O#P&f#P#Y(O#Y#Z##`#Z#`(O#`#a##`#a#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2]#%Sn)[W(qQ!i,g'g&jOY$eZr$ers%^sw$ewx(Ox{$e{|#'Q|}$e}!O#'Q!O!Q$e!Q![#(]![!c$e!c!h#(]!h!i#(]!i!n$e!n!o#*Y!o!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#Y#(]#Y#Z#(]#Z#`$e#`#a#*Y#a#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2]#'Z`)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![#(]![!c$e!c!i#(]!i#O$e#O#P&f#P#T$e#T#Z#(]#Z;'S$e;'S;=`(u<%lO$e2]#(hj)[W(qQ!i,g'g&jOY$eZr$ers%^sw$ewx!Nbx!Q$e!Q![#(]![!c$e!c!h#(]!h!i#(]!i!n$e!n!o#*Y!o!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#Y#(]#Y#Z#(]#Z#`$e#`#a#*Y#a#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2]#*ef)[W(qQ!i,g'g&jOY$eZr$ers%^sw$ewx(Ox!h$e!h!i#*Y!i!n$e!n!o#*Y!o!w$e!w!x#*Y!x#O$e#O#P&f#P#Y$e#Y#Z#*Y#Z#`$e#`#a#*Y#a#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e7Z#,W`)[W(qQ%[!b![,g'g&jOY$eZr$ers%^sw$ewx(Oxz$ez{#-Y{!P$e!P!Q#:s!Q!_$e!_!`!8g!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e7Z#-c])[W(qQ'g&jOY#-YYZ#.[Zr#-Yrs#/csw#-Ywx#5wxz#-Yz{#8j{#O#-Y#O#P#2`#P;'S#-Y;'S;=`#:m<%lO#-Y1e#._TOz#.[z{#.n{;'S#.[;'S;=`#/]<%lO#.[1e#.qVOz#.[z{#.n{!P#.[!P!Q#/W!Q;'S#.[;'S;=`#/]<%lO#.[1e#/]OT1e1e#/`P;=`<%l#.[7X#/jZ)[W'g&jOY#/cYZ#.[Zw#/cwx#0]xz#/cz{#4O{#O#/c#O#P#2`#P;'S#/c;'S;=`#5q<%lO#/c7P#0bX'g&jOY#0]YZ#.[Zz#0]z{#0}{#O#0]#O#P#2`#P;'S#0];'S;=`#3x<%lO#0]7P#1SZ'g&jOY#0]YZ#.[Zz#0]z{#0}{!P#0]!P!Q#1u!Q#O#0]#O#P#2`#P;'S#0];'S;=`#3x<%lO#0]7P#1|UT1e'g&jOY%}Z#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}7P#2eZ'g&jOY#0]YZ#0]Z]#0]]^#3W^z#0]z{#0}{#O#0]#O#P#2`#P;'S#0];'S;=`#3x<%lO#0]7P#3]X'g&jOY#0]YZ#0]Zz#0]z{#0}{#O#0]#O#P#2`#P;'S#0];'S;=`#3x<%lO#0]7P#3{P;=`<%l#0]7X#4V])[W'g&jOY#/cYZ#.[Zw#/cwx#0]xz#/cz{#4O{!P#/c!P!Q#5O!Q#O#/c#O#P#2`#P;'S#/c;'S;=`#5q<%lO#/c7X#5XW)[WT1e'g&jOY%^Zw%^wx%}x#O%^#O#P&f#P;'S%^;'S;=`'x<%lO%^7X#5tP;=`<%l#/c7R#6OZ(qQ'g&jOY#5wYZ#.[Zr#5wrs#0]sz#5wz{#6q{#O#5w#O#P#2`#P;'S#5w;'S;=`#8d<%lO#5w7R#6x](qQ'g&jOY#5wYZ#.[Zr#5wrs#0]sz#5wz{#6q{!P#5w!P!Q#7q!Q#O#5w#O#P#2`#P;'S#5w;'S;=`#8d<%lO#5w7R#7zW(qQT1e'g&jOY(OZr(Ors%}s#O(O#O#P&f#P;'S(O;'S;=`(o<%lO(O7R#8gP;=`<%l#5w7Z#8s_)[W(qQ'g&jOY#-YYZ#.[Zr#-Yrs#/csw#-Ywx#5wxz#-Yz{#8j{!P#-Y!P!Q#9r!Q#O#-Y#O#P#2`#P;'S#-Y;'S;=`#:m<%lO#-Y7Z#9}Y)[W(qQT1e'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e7Z#:pP;=`<%l#-Y7Z#;OY)[W(qQS1e'g&jOY#:sZr#:srs#;nsw#:swx#@{x#O#:s#O#P#<z#P;'S#:s;'S;=`#At<%lO#:s7X#;wW)[WS1e'g&jOY#;nZw#;nwx#<ax#O#;n#O#P#<z#P;'S#;n;'S;=`#@u<%lO#;n7P#<hUS1e'g&jOY#<aZ#O#<a#O#P#<z#P;'S#<a;'S;=`#>[<%lO#<a7P#=RXS1e'g&jOY#<aYZ%}Z]#<a]^#=n^#O#<a#O#P#>b#P;'S#<a;'S;=`#>[<%lO#<a7P#=uVS1e'g&jOY#<aYZ%}Z#O#<a#O#P#<z#P;'S#<a;'S;=`#>[<%lO#<a7P#>_P;=`<%l#<a7P#>i]S1e'g&jOY#<aYZ%}Z]#<a]^#=n^#O#<a#O#P#>b#P#b#<a#b#c#<a#c#f#<a#f#g#?b#g;'S#<a;'S;=`#>[<%lO#<a7P#?iUS1e'g&jOY#<aZ#O#<a#O#P#?{#P;'S#<a;'S;=`#>[<%lO#<a7P#@SZS1e'g&jOY#<aYZ%}Z]#<a]^#=n^#O#<a#O#P#>b#P#b#<a#b#c#<a#c;'S#<a;'S;=`#>[<%lO#<a7X#@xP;=`<%l#;n7R#AUW(qQS1e'g&jOY#@{Zr#@{rs#<as#O#@{#O#P#<z#P;'S#@{;'S;=`#An<%lO#@{7R#AqP;=`<%l#@{7Z#AwP;=`<%l#:s2]#BVt)[W(qQ!i,g'g&jOY$eZr$ers%^sw$ewx#Dgx!O$e!O!P$ m!P!Q$e!Q![$(x![!g$e!g!h#$w!h!i#*Y!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#U$e#U#V$+X#V#X$e#X#Y#$w#Y#Z#*Y#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j#l$e#l#m$=`#m;'S$e;'S;=`(u<%lO$e2T#DnY(qQ'g&jOY(OZr(Ors%}s!Q(O!Q![#E^![#O(O#O#P&f#P;'S(O;'S;=`(o<%lO(O2T#Egp(qQ!i,g'g&jOY(OZr(Ors%}sw(Owx#Dgx!O(O!O!P#Gk!P!Q(O!Q![#E^![!g(O!g!h!La!h!i##`!i!n(O!n!o##`!o!r(O!r!s!La!s!w(O!w!x##`!x#O(O#O#P&f#P#X(O#X#Y!La#Y#Z##`#Z#`(O#`#a##`#a#d(O#d#e!La#e#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2T#Gtn(qQ!i,g'g&jOY(OZr(Ors%}s!Q(O!Q![#Ir![!c(O!c!g#Ir!g!h#MS!h!i#Ir!i!n(O!n!o##`!o!r(O!r!s!La!s!w(O!w!x##`!x#O(O#O#P&f#P#T(O#T#X#Ir#X#Y#MS#Y#Z#Ir#Z#`(O#`#a##`#a#d(O#d#e!La#e#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2T#I{p(qQ!i,g'g&jOY(OZr(Ors%}sw(Owx#LPx!Q(O!Q![#Ir![!c(O!c!g#Ir!g!h#MS!h!i#Ir!i!n(O!n!o##`!o!r(O!r!s!La!s!w(O!w!x##`!x#O(O#O#P&f#P#T(O#T#X#Ir#X#Y#MS#Y#Z#Ir#Z#`(O#`#a##`#a#d(O#d#e!La#e#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2T#LW^(qQ'g&jOY(OZr(Ors%}s!Q(O!Q![#Ir![!c(O!c!i#Ir!i#O(O#O#P&f#P#T(O#T#Z#Ir#Z;'S(O;'S;=`(o<%lO(O2T#M]t(qQ!i,g'g&jOY(OZr(Ors%}sw(Owx#LPx{(O{|!Nb|}(O}!O!Nb!O!Q(O!Q![#Ir![!c(O!c!g#Ir!g!h#MS!h!i#Ir!i!n(O!n!o##`!o!r(O!r!s!La!s!w(O!w!x##`!x#O(O#O#P&f#P#T(O#T#X#Ir#X#Y#MS#Y#Z#Ir#Z#`(O#`#a##`#a#d(O#d#e!La#e#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2]$ xp)[W(qQ!i,g'g&jOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![$#|![!c$e!c!g$#|!g!h$&]!h!i$#|!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#X$#|#X#Y$&]#Y#Z$#|#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2]$$Xp)[W(qQ!i,g'g&jOY$eZr$ers%^sw$ewx#LPx!Q$e!Q![$#|![!c$e!c!g$#|!g!h$&]!h!i$#|!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#X$#|#X#Y$&]#Y#Z$#|#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2]$&ht)[W(qQ!i,g'g&jOY$eZr$ers%^sw$ewx#LPx{$e{|#'Q|}$e}!O#'Q!O!Q$e!Q![$#|![!c$e!c!g$#|!g!h$&]!h!i$#|!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#X$#|#X#Y$&]#Y#Z$#|#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2]$)Tp)[W(qQ!i,g'g&jOY$eZr$ers%^sw$ewx#Dgx!O$e!O!P$ m!P!Q$e!Q![$(x![!g$e!g!h#$w!h!i#*Y!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#X$e#X#Y#$w#Y#Z#*Y#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2]$+b_)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox!O$e!O!P$,a!P!Q$e!Q!R$-`!R![$(x![#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2]$,j[)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![!GY![#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2]$-kt)[W(qQ!i,g'g&jOY$eZr$ers%^sw$ewx#Dgx!O$e!O!P$ m!P!Q$e!Q![$(x![!g$e!g!h#$w!h!i#*Y!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#U$e#U#V$/{#V#X$e#X#Y#$w#Y#Z#*Y#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j#l$e#l#m$0z#m;'S$e;'S;=`(u<%lO$e2]$0U[)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![$(x![#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2]$1T`)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![$2V![!c$e!c!i$2V!i#O$e#O#P&f#P#T$e#T#Z$2V#Z;'S$e;'S;=`(u<%lO$e2]$2br)[W(qQ!i,g'g&jOY$eZr$ers%^sw$ewx$4lx!O$e!O!P$ m!P!Q$e!Q![$2V![!c$e!c!g$2V!g!h$:p!h!i$2V!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#X$2V#X#Y$:p#Y#Z$2V#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2T$4s^(qQ'g&jOY(OZr(Ors%}s!Q(O!Q![$5o![!c(O!c!i$5o!i#O(O#O#P&f#P#T(O#T#Z$5o#Z;'S(O;'S;=`(o<%lO(O2T$5xr(qQ!i,g'g&jOY(OZr(Ors%}sw(Owx$4lx!O(O!O!P#Gk!P!Q(O!Q![$5o![!c(O!c!g$5o!g!h$8S!h!i$5o!i!n(O!n!o##`!o!r(O!r!s!La!s!w(O!w!x##`!x#O(O#O#P&f#P#T(O#T#X$5o#X#Y$8S#Y#Z$5o#Z#`(O#`#a##`#a#d(O#d#e!La#e#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2T$8]u(qQ!i,g'g&jOY(OZr(Ors%}sw(Owx$4lx{(O{|!Nb|}(O}!O!Nb!O!P#Gk!P!Q(O!Q![$5o![!c(O!c!g$5o!g!h$8S!h!i$5o!i!n(O!n!o##`!o!r(O!r!s!La!s!w(O!w!x##`!x#O(O#O#P&f#P#T(O#T#X$5o#X#Y$8S#Y#Z$5o#Z#`(O#`#a##`#a#d(O#d#e!La#e#i(O#i#j##`#j;'S(O;'S;=`(o<%lO(O2]$:{u)[W(qQ!i,g'g&jOY$eZr$ers%^sw$ewx$4lx{$e{|#'Q|}$e}!O#'Q!O!P$ m!P!Q$e!Q![$2V![!c$e!c!g$2V!g!h$:p!h!i$2V!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#X$2V#X#Y$:p#Y#Z$2V#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j;'S$e;'S;=`(u<%lO$e2]$=ic)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox!O$e!O!P$,a!P!Q$e!Q!R$>t!R![$2V![!c$e!c!i$2V!i#O$e#O#P&f#P#T$e#T#Z$2V#Z;'S$e;'S;=`(u<%lO$e2]$?Pv)[W(qQ!i,g'g&jOY$eZr$ers%^sw$ewx$4lx!O$e!O!P$ m!P!Q$e!Q![$2V![!c$e!c!g$2V!g!h$:p!h!i$2V!i!n$e!n!o#*Y!o!r$e!r!s#$w!s!w$e!w!x#*Y!x#O$e#O#P&f#P#T$e#T#U$2V#U#V$2V#V#X$2V#X#Y$:p#Y#Z$2V#Z#`$e#`#a#*Y#a#d$e#d#e#$w#e#i$e#i#j#*Y#j#l$e#l#m$0z#m;'S$e;'S;=`(u<%lO$e4e$Ar[(w-X)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox![$e![!]$Bh!]#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3s$BsYl-})[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e2]$CnY)X,g)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e7V$Dk_p,g%^!b)[W(qQ'g&jOY$EjYZ$FlZr$Ejrs$GZsw$Ejwx%)Px!^$Ej!^!_%+w!_!`%.U!`!a%0]!a#O$Ej#O#P$Ib#P;'S$Ej;'S;=`%+q<%lO$Ej*[$Es])[W(qQ'g&jOY$EjYZ$FlZr$Ejrs$GZsw$Ejwx%)Px!`$Ej!`!a%*t!a#O$Ej#O#P$Ib#P;'S$Ej;'S;=`%+q<%lO$Ejp$FoTO!`$Fl!`!a$GO!a;'S$Fl;'S;=`$GT<%lO$Flp$GTO$Xpp$GWP;=`<%l$Fl*Y$GbZ)[W'g&jOY$GZYZ$FlZw$GZwx$HTx!`$GZ!`!a%(U!a#O$GZ#O#P$Ib#P;'S$GZ;'S;=`%(y<%lO$GZ*Q$HYX'g&jOY$HTYZ$FlZ!`$HT!`!a$Hu!a#O$HT#O#P$Ib#P;'S$HT;'S;=`$Mx<%lO$HT*Q$IOU$XpY#t'g&jOY%}Z#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}*Q$Ig['g&jOY$HTYZ$HTZ]$HT]^$J]^!`$HT!`!a$NO!a#O$HT#O#P%&n#P;'S$HT;'S;=`%'f;=`<%l%$z<%lO$HT*Q$JbX'g&jOY$HTYZ$J}Z!`$HT!`!a$Hu!a#O$HT#O#P$Ib#P;'S$HT;'S;=`$Mx<%lO$HT'[$KSX'g&jOY$J}YZ$FlZ!`$J}!`!a$Ko!a#O$J}#O#P$LY#P;'S$J};'S;=`$Mr<%lO$J}'[$KvU$Xp'g&jOY%}Z#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}'[$L_Z'g&jOY$J}YZ$J}Z]$J}]^$MQ^!`$J}!`!a$Ko!a#O$J}#O#P$LY#P;'S$J};'S;=`$Mr<%lO$J}'[$MVX'g&jOY$J}YZ$J}Z!`$J}!`!a$Ko!a#O$J}#O#P$LY#P;'S$J};'S;=`$Mr<%lO$J}'[$MuP;=`<%l$J}*Q$M{P;=`<%l$HT*Q$NVW$Xp'g&jOY$NoZ!`$No!`!a% ^!a#O$No#O#P% w#P;'S$No;'S;=`%#^<%lO$No)`$NtW'g&jOY$NoZ!`$No!`!a% ^!a#O$No#O#P% w#P;'S$No;'S;=`%#^<%lO$No)`% eUY#t'g&jOY%}Z#O%}#O#P&f#P;'S%};'S;=`'r<%lO%})`% |Y'g&jOY$NoYZ$NoZ]$No]^%!l^#O$No#O#P%#d#P;'S$No;'S;=`%$[;=`<%l%$z<%lO$No)`%!qX'g&jOY$NoYZ%}Z!`$No!`!a% ^!a#O$No#O#P% w#P;'S$No;'S;=`%#^<%lO$No)`%#aP;=`<%l$No)`%#iZ'g&jOY$NoYZ%}Z]$No]^%!l^!`$No!`!a% ^!a#O$No#O#P% w#P;'S$No;'S;=`%#^<%lO$No)`%$_XOY%$zZ!`%$z!`!a%%g!a#O%$z#O#P%%l#P;'S%$z;'S;=`%&h;=`<%l$No<%lO%$z#t%$}WOY%$zZ!`%$z!`!a%%g!a#O%$z#O#P%%l#P;'S%$z;'S;=`%&h<%lO%$z#t%%lOY#t#t%%oRO;'S%$z;'S;=`%%x;=`O%$z#t%%{XOY%$zZ!`%$z!`!a%%g!a#O%$z#O#P%%l#P;'S%$z;'S;=`%&h;=`<%l%$z<%lO%$z#t%&kP;=`<%l%$z*Q%&sZ'g&jOY$HTYZ$J}Z]$HT]^$J]^!`$HT!`!a$Hu!a#O$HT#O#P$Ib#P;'S$HT;'S;=`$Mx<%lO$HT*Q%'iXOY%$zZ!`%$z!`!a%%g!a#O%$z#O#P%%l#P;'S%$z;'S;=`%&h;=`<%l$HT<%lO%$z*Y%(aW$XpY#t)[W'g&jOY%^Zw%^wx%}x#O%^#O#P&f#P;'S%^;'S;=`'x<%lO%^*Y%(|P;=`<%l$GZ*S%)WZ(qQ'g&jOY%)PYZ$FlZr%)Prs$HTs!`%)P!`!a%)y!a#O%)P#O#P$Ib#P;'S%)P;'S;=`%*n<%lO%)P*S%*UW$XpY#t(qQ'g&jOY(OZr(Ors%}s#O(O#O#P&f#P;'S(O;'S;=`(o<%lO(O*S%*qP;=`<%l%)P*[%+RY$XpY#t)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e*[%+tP;=`<%l$Ej7V%,U^)[W(qQ%]!b!f,g'g&jOY$EjYZ$FlZr$Ejrs$GZsw$Ejwx%)Px!_$Ej!_!`%-Q!`!a%*t!a#O$Ej#O#P$Ib#P;'S$Ej;'S;=`%+q<%lO$Ej7V%-]]!g-y)[W(qQ'g&jOY$EjYZ$FlZr$Ejrs$GZsw$Ejwx%)Px!`$Ej!`!a%*t!a#O$Ej#O#P$Ib#P;'S$Ej;'S;=`%+q<%lO$Ej7V%.c]%^!b!b,g)[W(qQ'g&jOY$EjYZ$FlZr$Ejrs$GZsw$Ejwx%)Px!`$Ej!`!a%/[!a#O$Ej#O#P$Ib#P;'S$Ej;'S;=`%+q<%lO$Ej7V%/mY%^!b!b,g$XpY#t)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e)j%0hYY#t)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o%1c[)k!c)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox!_$e!_!`0Q!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o%2f]%^!b)[W(qQ!d,g'g&jOY$eZr$ers%^sw$ewx(Ox!_$e!_!`%3_!`!a%4[!a#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o%3lY%^!b!b,g)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o%4i[)[W(qQ%]!b!f,g'g&jOY$eZr$ers%^sw$ewx(Ox!_$e!_!`!8g!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e&u%5jY(vP)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e7Z%6ib)[W(zS(qQ!R,f(s%y'g&jOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![%6Y![!c$e!c!}%6Y!}#O$e#O#P&f#P#R$e#R#S%6Y#S#T$e#T#o%6Y#o;'S$e;'S;=`(u<%lO$e7Z%8Qb)[W(zS(qQ!R,f(s%y'g&jOY$eZr$ers%9Ysw$ewx%9{x!Q$e!Q![%6Y![!c$e!c!}%6Y!}#O$e#O#P&f#P#R$e#R#S%6Y#S#T$e#T#o%6Y#o;'S$e;'S;=`(u<%lO$e5P%9cW)[W(p/]'g&jOY%^Zw%^wx%}x#O%^#O#P&f#P;'S%^;'S;=`'x<%lO%^2T%:UW(qQ)Z,g'g&jOY(OZr(Ors%}s#O(O#O#P&f#P;'S(O;'S;=`(o<%lO(O3o%:yZ!V-y)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox!}$e!}#O%;l#O#P&f#P;'S$e;'S;=`(u<%lO$e&u%;wY)QP)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e4e%<la'g&jOY%=qYZ%>[Z]%=q]^%?Z^!Q%=q!Q![%?w![!w%=q!w!x%AX!x#O%=q#O#P%H_#P#i%=q#i#j%Ds#j#l%=q#l#m%IR#m;'S%=q;'S;=`%Kt<%lO%=q&t%=xUXY'g&jOY%}Z#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}4e%>e[XY(o.o'g&jOX%}XY-OYZ*[Z]%}]^-O^p%}pq-Oq#O%}#O#P,^#P;'S%};'S;=`'r<%lO%}4e%?bVXY'g&jOY%}YZ-OZ#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}&t%@OWXY'g&jOY%}Z!Q%}!Q![%@h![#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}&t%@oWXY'g&jOY%}Z!Q%}!Q![%=q![#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}&t%A^['g&jOY%}Z!Q%}!Q![%BS![!c%}!c!i%BS!i#O%}#O#P&f#P#T%}#T#Z%BS#Z;'S%};'S;=`'r<%lO%}&t%BX['g&jOY%}Z!Q%}!Q![%B}![!c%}!c!i%B}!i#O%}#O#P&f#P#T%}#T#Z%B}#Z;'S%};'S;=`'r<%lO%}&t%CS['g&jOY%}Z!Q%}!Q![%Cx![!c%}!c!i%Cx!i#O%}#O#P&f#P#T%}#T#Z%Cx#Z;'S%};'S;=`'r<%lO%}&t%C}['g&jOY%}Z!Q%}!Q![%Ds![!c%}!c!i%Ds!i#O%}#O#P&f#P#T%}#T#Z%Ds#Z;'S%};'S;=`'r<%lO%}&t%Dx['g&jOY%}Z!Q%}!Q![%En![!c%}!c!i%En!i#O%}#O#P&f#P#T%}#T#Z%En#Z;'S%};'S;=`'r<%lO%}&t%Es['g&jOY%}Z!Q%}!Q![%Fi![!c%}!c!i%Fi!i#O%}#O#P&f#P#T%}#T#Z%Fi#Z;'S%};'S;=`'r<%lO%}&t%Fn['g&jOY%}Z!Q%}!Q![%Gd![!c%}!c!i%Gd!i#O%}#O#P&f#P#T%}#T#Z%Gd#Z;'S%};'S;=`'r<%lO%}&t%Gi['g&jOY%}Z!Q%}!Q![%=q![!c%}!c!i%=q!i#O%}#O#P&f#P#T%}#T#Z%=q#Z;'S%};'S;=`'r<%lO%}&t%HfXXY'g&jOY%}YZ%}Z]%}]^'W^#O%}#O#P&f#P;'S%};'S;=`'r<%lO%}&t%IW['g&jOY%}Z!Q%}!Q![%I|![!c%}!c!i%I|!i#O%}#O#P&f#P#T%}#T#Z%I|#Z;'S%};'S;=`'r<%lO%}&t%JR['g&jOY%}Z!Q%}!Q![%Jw![!c%}!c!i%Jw!i#O%}#O#P&f#P#T%}#T#Z%Jw#Z;'S%};'S;=`'r<%lO%}&t%KO[XY'g&jOY%}Z!Q%}!Q![%Jw![!c%}!c!i%Jw!i#O%}#O#P&f#P#T%}#T#Z%Jw#Z;'S%};'S;=`'r<%lO%}&t%KwP;=`<%l%=q2a%LVZ!W,V)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P#Q%Lx#Q;'S$e;'S;=`(u<%lO$e'Y%MTY)^d)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o%NQ[)[W(qQ%]!b'g&j!_,gOY$eZr$ers%^sw$ewx(Ox!_$e!_!`!8g!`#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e7Z& Vd)[W(zS(qQ!R,f(s%y'g&jOY$eZr$ers%9Ysw$ewx%9{x!Q$e!Q!Y%6Y!Y!Z%7q!Z![%6Y![!c$e!c!}%6Y!}#O$e#O#P&f#P#R$e#R#S%6Y#S#T$e#T#o%6Y#o;'S$e;'S;=`(u<%lO$e2]&!pY!T,g)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e3o&#m^)[W(qQ%]!b'g&j!^,gOY$eZr$ers%^sw$ewx(Ox!_$e!_!`!8g!`#O$e#O#P&f#P#p$e#p#q&$i#q;'S$e;'S;=`(u<%lO$e3o&$vY)U,g%_!b)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e'V&%qY!Ua)[W(qQ'g&jOY$eZr$ers%^sw$ewx(Ox#O$e#O#P&f#P;'S$e;'S;=`(u<%lO$e(]&&nc)[W(qQ%]!b'SP'g&jOX$eXY&'yZp$epq&'yqr$ers%^sw$ewx(Ox!c$e!c!}&)_!}#O$e#O#P&f#P#R$e#R#S&)_#S#T$e#T#o&)_#o;'S$e;'S;=`(u<%lO$e&y&(Sc)[W(qQ'g&jOX$eXY&'yZp$epq&'yqr$ers%^sw$ewx(Ox!c$e!c!}&)_!}#O$e#O#P&f#P#R$e#R#S&)_#S#T$e#T#o&)_#o;'S$e;'S;=`(u<%lO$e&y&)jb)[W(qQdT'g&jOY$eZr$ers%^sw$ewx(Ox!Q$e!Q![&)_![!c$e!c!}&)_!}#O$e#O#P&f#P#R$e#R#S&)_#S#T$e#T#o&)_#o;'S$e;'S;=`(u<%lO$e",
     tokenizers: [rawString, fallback, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
     topRules: {"Program":[0,308]},
     dynamicPrecedences: {"87":1,"94":1,"119":1,"185":1,"188":-10,"241":-10,"242":1,"245":-1,"247":-10,"248":1,"263":-1,"268":2,"269":2,"307":-10,"366":3,"418":1,"419":3,"420":1,"421":1},
     specialized: [{term: 357, get: value => spec_identifier$5[value] || -1},{term: 32, get: value => spec_[value] || -1},{term: 66, get: value => spec_templateArgsEnd[value] || -1},{term: 364, get: value => spec_scopedIdentifier[value] || -1}],
     tokenPrec: 24905
   });

   /**
   A language provider based on the [Lezer C++
   parser](https://github.com/lezer-parser/cpp), extended with
   highlighting and indentation information.
   */
   const cppLanguage = /*@__PURE__*/LRLanguage.define({
       name: "cpp",
       parser: /*@__PURE__*/parser$b.configure({
           props: [
               /*@__PURE__*/indentNodeProp.add({
                   IfStatement: /*@__PURE__*/continuedIndent({ except: /^\s*({|else\b)/ }),
                   TryStatement: /*@__PURE__*/continuedIndent({ except: /^\s*({|catch)\b/ }),
                   LabeledStatement: flatIndent,
                   CaseStatement: context => context.baseIndent + context.unit,
                   BlockComment: () => null,
                   CompoundStatement: /*@__PURE__*/delimitedIndent({ closing: "}" }),
                   Statement: /*@__PURE__*/continuedIndent({ except: /^{/ })
               }),
               /*@__PURE__*/foldNodeProp.add({
                   "DeclarationList CompoundStatement EnumeratorList FieldDeclarationList InitializerList": foldInside,
                   BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; }
               })
           ]
       }),
       languageData: {
           commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
           indentOnInput: /^\s*(?:case |default:|\{|\})$/,
           closeBrackets: { stringPrefixes: ["L", "u", "U", "u8", "LR", "UR", "uR", "u8R", "R"] }
       }
   });
   /**
   Language support for C++.
   */
   function cpp$1() {
       return new LanguageSupport(cppLanguage);
   }

   var index$b = /*#__PURE__*/Object.freeze({
      __proto__: null,
      cpp: cpp$1,
      cppLanguage: cppLanguage
   });

   const javaHighlighting = styleTags({
     null: tags$1.null,
       instanceof: tags$1.operatorKeyword,
     this: tags$1.self,
     "new super assert open to with void": tags$1.keyword,
     "class interface extends implements enum var": tags$1.definitionKeyword,
     "module package import": tags$1.moduleKeyword,
     "switch while for if else case default do break continue return try catch finally throw": tags$1.controlKeyword,
     ["requires exports opens uses provides public private protected static transitive abstract final " +
      "strictfp synchronized native transient volatile throws"]: tags$1.modifier,
     IntegerLiteral: tags$1.integer,
     FloatingPointLiteral: tags$1.float,
     "StringLiteral TextBlock": tags$1.string,
     CharacterLiteral: tags$1.character,
     LineComment: tags$1.lineComment,
     BlockComment: tags$1.blockComment,
     BooleanLiteral: tags$1.bool,
     PrimitiveType: tags$1.standard(tags$1.typeName),
     TypeName: tags$1.typeName,
     Identifier: tags$1.variableName,
     "MethodName/Identifier": tags$1.function(tags$1.variableName),
     Definition: tags$1.definition(tags$1.variableName),
     ArithOp: tags$1.arithmeticOperator,
     LogicOp: tags$1.logicOperator,
     BitOp: tags$1.bitwiseOperator,
     CompareOp: tags$1.compareOperator,
     AssignOp: tags$1.definitionOperator,
     UpdateOp: tags$1.updateOperator,
     Asterisk: tags$1.punctuation,
     Label: tags$1.labelName,
     "( )": tags$1.paren,
     "[ ]": tags$1.squareBracket,
     "{ }": tags$1.brace,
     ".": tags$1.derefOperator,
     ", ;": tags$1.separator
   });

   // This file was generated by lezer-generator. You probably shouldn't edit it.
   const spec_identifier$4 = {__proto__:null,true:34, false:34, null:42, void:46, byte:48, short:48, int:48, long:48, char:48, float:48, double:48, boolean:48, extends:62, super:64, class:76, this:78, new:84, public:100, protected:102, private:104, abstract:106, static:108, final:110, strictfp:112, default:114, synchronized:116, native:118, transient:120, volatile:122, throws:150, implements:160, interface:166, enum:176, instanceof:236, open:265, module:267, requires:272, transitive:274, exports:276, to:278, opens:280, uses:282, provides:284, with:286, package:290, import:294, if:306, else:308, while:312, for:316, var:323, assert:330, switch:334, case:340, do:344, break:348, continue:352, return:356, throw:362, try:366, catch:370, finally:378};
   const parser$a = LRParser.deserialize({
     version: 14,
     states: "#!hQ]QPOOO&tQQO'#H[O(xQQO'#CbOOQO'#Cb'#CbO)PQPO'#CaO)XOSO'#CpOOQO'#Ha'#HaOOQO'#Cu'#CuO*tQPO'#D_O+_QQO'#HkOOQO'#Hk'#HkO-sQQO'#HfO-zQQO'#HfOOQO'#Hf'#HfOOQO'#He'#HeO0OQPO'#DUO0]QPO'#GlO3TQPO'#D_O3[QPO'#DzO)PQPO'#E[O3}QPO'#E[OOQO'#DV'#DVO5]QQO'#H_O7dQQO'#EeO7kQPO'#EdO7pQPO'#EfOOQO'#H`'#H`O5sQQO'#H`O8sQQO'#FgO8zQPO'#EwO9PQPO'#E|O9PQPO'#FOOOQO'#H_'#H_OOQO'#HW'#HWOOQO'#Gf'#GfOOQO'#HV'#HVO:aQPO'#FhOOQO'#HU'#HUOOQO'#Ge'#GeQ]QPOOOOQO'#Hq'#HqO:fQPO'#HqO:kQPO'#D{O:kQPO'#EVO:kQPO'#EQO:sQPO'#HnO;UQQO'#EfO)PQPO'#C`O;^QPO'#C`O)PQPO'#FbO;cQPO'#FdO;nQPO'#FjO;nQPO'#FmO:kQPO'#FrO;sQPO'#FoO9PQPO'#FvO;nQPO'#FxO]QPO'#F}O;xQPO'#GPO<TQPO'#GRO<`QPO'#GTO;nQPO'#GVO9PQPO'#GWO<gQPO'#GYOOQO'#H['#H[O=WQQO,58{OOQO'#HY'#HYOOOO'#Gg'#GgO>yOSO,59[OOQO,59[,59[OOQO'#Hg'#HgO?jQPO,59eO@lQPO,59yOOQO-E:d-E:dO)PQPO,58zOA`QPO,58zO)PQPO,5;|OAeQPO'#DQOAjQPO'#DQOOQO'#Gi'#GiOBjQQO,59jOOQO'#Dm'#DmODRQPO'#HsOD]QPO'#DlODkQPO'#HrODsQPO,5<^ODxQPO,59^OEcQPO'#CxOOQO,59c,59cOEjQPO,59bOGrQQO'#H[OJVQQO'#CbOJmQPO'#D_OKrQQO'#HkOLSQQO,59pOLZQPO'#DvOLiQPO'#HzOLqQPO,5:`OLvQPO,5:`OM^QPO,5;mOMiQPO'#IROMtQPO,5;dOMyQPO,5=WOOQO-E:j-E:jOOQO,5:f,5:fO! aQPO,5:fO! hQPO,5:vO! mQPO,5<^O)PQPO,5:vO:kQPO,5:gO:kQPO,5:qO:kQPO,5:lO:kQPO,5<^O!!^QPO,59qO9PQPO,5:}O!!eQPO,5;QO9PQPO,59TO!!sQPO'#DXOOQO,5;O,5;OOOQO'#El'#ElOOQO'#En'#EnO9PQPO,5;UO9PQPO,5;UO9PQPO,5;UO9PQPO,5;UO9PQPO,5;UO9PQPO,5;UO9PQPO,5;eOOQO,5;h,5;hOOQO,5<R,5<RO!!zQPO,5;aO!#]QPO,5;cO!!zQPO'#CyO!#dQQO'#HkO!#rQQO,5;jO]QPO,5<SOOQO-E:c-E:cOOQO,5>],5>]O!%SQPO,5:gO!%bQPO,5:qO!%jQPO,5:lO!%uQPO,5>YOLZQPO,5>YO! {QPO,59UO!&QQQO,58zO!&YQQO,5;|O!&bQQO,5<OO)PQPO,5<OO9PQPO'#DUO]QPO,5<UO]QPO,5<XO!&jQPO'#FqO]QPO,5<ZO]QPO,5<`O!&zQQO,5<bO!'UQPO,5<dO!'ZQPO,5<iOOQO'#Fi'#FiOOQO,5<k,5<kO!'`QPO,5<kOOQO,5<m,5<mO!'eQPO,5<mO!'jQQO,5<oOOQO,5<o,5<oO<jQPO,5<qO!'qQQO,5<rO!'xQPO'#GcO!)OQPO,5<tO<jQPO,5<|O)PQPO,58}O!,|QPO'#ChOOQO1G.k1G.kOOOO-E:e-E:eOOQO1G.v1G.vO!-WQPO,59jO!&QQQO1G.fO)PQPO1G.fO!-eQQO1G1hOOQO,59l,59lO!-mQPO,59lOOQO-E:g-E:gO!-rQPO,5>_O!.ZQPO,5:WO:kQPO'#GnO!.bQPO,5>^OOQO1G1x1G1xOOQO1G.x1G.xO!.{QPO'#CyO!/kQPO'#HkO!/uQPO'#CzO!0TQPO'#HjO!0]QPO,59dOOQO1G.|1G.|OEjQPO1G.|O!0sQPO,59eO!1QQQO'#H[O!1cQQO'#CbOOQO,5:b,5:bO:kQPO,5:cOOQO,5:a,5:aO!1tQQO,5:aOOQO1G/[1G/[O!1yQPO,5:bO!2[QPO'#GqO!2oQPO,5>fOOQO1G/z1G/zO!2wQPO'#DvO!3YQPO'#D_O!3aQPO1G/zO!!zQPO'#GoO!3fQPO1G1XO9PQPO1G1XO:kQPO'#GwO!3nQPO,5>mOOQO1G1O1G1OOOQO1G0Q1G0QO!3vQPO'#E]OOQO1G0b1G0bO!4gQPO1G1xO! hQPO1G0bO!%SQPO1G0RO!%bQPO1G0]O!%jQPO1G0WOOQO1G/]1G/]O!4lQQO1G.pO7kQPO1G0jO)PQPO1G0jO:sQPO'#HnO!6`QQO1G.pOOQO1G.p1G.pO!6eQQO1G0iOOQO1G0l1G0lO!6lQPO1G0lO!6wQQO1G.oO!7_QQO'#HoO!7lQPO,59sO!8{QQO1G0pO!:dQQO1G0pO!;rQQO1G0pO!<PQQO1G0pO!=UQQO1G0pO!=lQQO1G0pO!=vQQO1G1PO!=}QQO'#HkOOQO1G0{1G0{O!?QQQO1G0}OOQO1G0}1G0}OOQO1G1n1G1nO! pQPO'#DqO!ARQPO'#D[O!!zQPO'#D|O!!zQPO'#D}OOQO1G0R1G0RO!AYQPO1G0RO!A_QPO1G0RO!AgQPO1G0RO!ArQPO'#EXOOQO1G0]1G0]O!BVQPO1G0]O!B[QPO'#ETO!!zQPO'#ESOOQO1G0W1G0WO!CUQPO1G0WO!CZQPO1G0WO!CcQPO'#EhO!CjQPO'#EhOOQO'#Gv'#GvO!CrQQO1G0mO!EcQQO1G3tO7kQPO1G3tO!GbQPO'#FWOOQO1G.f1G.fOOQO1G1h1G1hO!GiQPO1G1jOOQO1G1j1G1jO!GtQQO1G1jO!G|QPO1G1pOOQO1G1s1G1sO)aQPO'#D_O+_QQO,5<aO!KtQPO,5<aO!LVQPO,5<]O!L^QPO,5<]OOQO1G1u1G1uOOQO1G1z1G1zOOQO1G1|1G1|O9PQPO1G1|O#!QQPO'#FzOOQO1G2O1G2OO;nQPO1G2TOOQO1G2V1G2VOOQO1G2X1G2XOOQO1G2Z1G2ZOOQO1G2]1G2]OOQO1G2^1G2^O#!XQQO'#H[O##SQQO'#CbO+_QQO'#HkO##}QQOOO#$kQQO'#EeO#$YQQO'#H`OLZQPO'#GdO#$rQPO,5<}OOQO'#HO'#HOO#$zQPO1G2`O#(xQPO'#G[O<jQPO'#G`OOQO1G2`1G2`O#(}QPO1G2hOOQO1G.i1G.iO#.SQQO'#EeO#.dQQO'#H^O#.tQPO'#FSOOQO'#H^'#H^O#/OQPO'#H^O#/mQPO'#IUO#/uQPO,59SOOQO7+$Q7+$QO!&QQQO7+$QOOQO7+'S7+'SOOQO1G/W1G/WO#/zQPO'#DoO#0UQQO'#HtOOQO'#Ht'#HtOOQO1G/r1G/rOOQO,5=Y,5=YOOQO-E:l-E:lO#0fQWO,58{O#0mQPO,59fOOQO,59f,59fO!!zQPO'#HmOD}QPO'#GhO#0{QPO,5>UOOQO1G/O1G/OOOQO7+$h7+$hOOQO1G/{1G/{O#1TQQO1G/{OOQO1G/}1G/}O#1YQPO1G/{OOQO1G/|1G/|O:kQPO1G/}OOQO,5=],5=]OOQO-E:o-E:oOOQO7+%f7+%fOOQO,5=Z,5=ZOOQO-E:m-E:mO9PQPO7+&sOOQO7+&s7+&sOOQO,5=c,5=cOOQO-E:u-E:uO#1_QPO'#EUO#1mQPO'#EUOOQO'#Gu'#GuO#2UQPO,5:wOOQO,5:w,5:wOOQO7+'d7+'dOOQO7+%|7+%|OOQO7+%m7+%mO!AYQPO7+%mO!A_QPO7+%mO!AgQPO7+%mOOQO7+%w7+%wO!BVQPO7+%wOOQO7+%r7+%rO!CUQPO7+%rO!CZQPO7+%rOOQO7+&U7+&UOOQO'#Ee'#EeO7kQPO7+&UO7kQPO,5>YO#2uQPO7+$[OOQO7+&T7+&TOOQO7+&W7+&WO9PQPO'#GjO#3TQPO,5>ZOOQO1G/_1G/_O9PQPO7+&kO#3`QQO,59eO#4cQPO'#DrO! pQPO'#DrO#4nQPO'#HwO#4vQPO,5:]O#5aQQO'#HgO#5|QQO'#CuO! mQPO'#HvO#6lQPO'#DpO#6vQPO'#HvO#7XQPO'#DpO#7aQPO'#IPO#7fQPO'#E`OOQO'#Hp'#HpOOQO'#Gk'#GkO#7nQPO,59vOOQO,59v,59vO#7uQPO'#HqOOQO,5:h,5:hO#9]QPO'#H|OOQO'#EP'#EPOOQO,5:i,5:iO#9hQPO'#EYO:kQPO'#EYO#9yQPO'#H}O#:UQPO,5:sO! mQPO'#HvO!!zQPO'#HvO#:^QPO'#DpOOQO'#Gs'#GsO#:eQPO,5:oOOQO,5:o,5:oOOQO,5:n,5:nOOQO,5;S,5;SO#;_QQO,5;SO#;fQPO,5;SOOQO-E:t-E:tOOQO7+&X7+&XOOQO7+)`7+)`O#;mQQO7+)`OOQO'#Gz'#GzO#=ZQPO,5;rOOQO,5;r,5;rO#=bQPO'#FXO)PQPO'#FXO)PQPO'#FXO)PQPO'#FXO#=pQPO7+'UO#=uQPO7+'UOOQO7+'U7+'UO]QPO7+'[O#>QQPO1G1{O! mQPO1G1{O#>`QQO1G1wO!!sQPO1G1wO#>gQPO1G1wO#>nQQO7+'hOOQO'#G}'#G}O#>uQPO,5<fOOQO,5<f,5<fO#>|QPO'#HqO9PQPO'#F{O#?UQPO7+'oO#?ZQPO,5=OO! mQPO,5=OO#?`QPO1G2iO#@iQPO1G2iOOQO1G2i1G2iOOQO-E:|-E:|OOQO7+'z7+'zO!2[QPO'#G^O<jQPO,5<vOOQO,5<z,5<zO#@qQPO7+(SOOQO7+(S7+(SO#DoQPO,59TO#DvQPO'#ITO#EOQPO,5;nO)PQPO'#GyO#ETQPO,5>pOOQO1G.n1G.nOOQO<<Gl<<GlO#E]QPO'#HuO#EeQPO,5:ZOOQO1G/Q1G/QOOQO,5>X,5>XOOQO,5=S,5=SOOQO-E:f-E:fO#EjQPO7+%gOOQO7+%g7+%gOOQO7+%i7+%iOOQO<<J_<<J_O#FQQPO'#H[O#FXQPO'#CbO#F`QPO,5:pO#FeQPO,5:xO#1_QPO,5:pOOQO-E:s-E:sOOQO1G0c1G0cOOQO<<IX<<IXO!AYQPO<<IXO!A_QPO<<IXOOQO<<Ic<<IcOOQO<<I^<<I^O!CUQPO<<I^OOQO<<Ip<<IpO#FjQQO<<GvO7kQPO<<IpO)PQPO<<IpOOQO<<Gv<<GvO#H^QQO,5=UOOQO-E:h-E:hO#HkQQO<<JVOOQO,5:^,5:^O!!zQPO'#DsO#IRQPO,5:^O! pQPO'#GpO#I^QPO,5>cOOQO1G/w1G/wO#IfQPO'#HsO#ImQPO,59xO#IrQPO,5>bO! mQPO,59xO#I}QPO,5:[O#7fQPO,5:zO! mQPO,5>bO!!zQPO,5>bO#7aQPO,5>kOOQO,5:[,5:[OLvQPO'#DtOOQO,5>k,5>kO#JVQPO'#EaOOQO,5:z,5:zO#MWQPO,5:zO!!zQPO'#DxOOQO-E:i-E:iOOQO1G/b1G/bOOQO,5:y,5:yO!!zQPO'#GrO#M]QPO,5>hOOQO,5:t,5:tO#MhQPO,5:tO#MvQPO,5:tO#NXQPO'#GtO#NoQPO,5>iO#NzQPO'#EZOOQO1G0_1G0_O$ RQPO1G0_O! mQPO,5:pOOQO-E:q-E:qOOQO1G0Z1G0ZOOQO1G0n1G0nO$ WQQO1G0nOOQO<<Lz<<LzOOQO-E:x-E:xOOQO1G1^1G1^O$ _QQO,5;sOOQO'#G{'#G{O#=bQPO,5;sOOQO'#IV'#IVO$ gQQO,5;sO$ xQQO,5;sOOQO<<Jp<<JpO$!QQPO<<JpOOQO<<Jv<<JvO9PQPO7+'gO$!VQPO7+'gO!!sQPO7+'cO$!eQPO7+'cO$!jQQO7+'cOOQO<<KS<<KSOOQO-E:{-E:{OOQO1G2Q1G2QOOQO,5<g,5<gO$!qQQO,5<gOOQO<<KZ<<KZO9PQPO1G2jO$!xQPO1G2jOOQO,5=l,5=lOOQO7+(T7+(TO$!}QPO7+(TOOQO-E;O-E;OO$$lQWO'#HfO$$WQWO'#HfO$$sQPO'#G_O:kQPO,5<xOLZQPO,5<xOOQO1G2b1G2bOOQO<<Kn<<KnO$%UQQO1G.oOOQO1G1Z1G1ZO$%`QPO'#GxO$%mQPO,5>oOOQO1G1Y1G1YO$%uQPO'#FTOOQO,5=e,5=eOOQO-E:w-E:wO$%zQPO'#GmO$&XQPO,5>aOOQO1G/u1G/uOOQO<<IR<<IROOQO1G0[1G0[O$&aQPO1G0dO$&fQPO1G0[O$&kQPO1G0dOOQOAN>sAN>sO!AYQPOAN>sOOQOAN>xAN>xOOQOAN?[AN?[O7kQPOAN?[O$&pQPO,5:_OOQO1G/x1G/xOOQO,5=[,5=[OOQO-E:n-E:nO$&{QPO,5>eOOQO1G/d1G/dOOQO1G3|1G3|O$'^QPO1G/dOOQO1G/v1G/vOOQO1G0f1G0fO#MWQPO1G0fO#7aQPO'#HyO$'cQPO1G3|O! mQPO1G3|OOQO1G4V1G4VOK^QPO'#DvOJmQPO'#D_OOQO,5:{,5:{O$'nQPO,5:{O$'nQPO,5:{O$'uQQO'#H_O$'|QQO'#H`O$(WQQO'#EbO$(cQPO'#EbOOQO,5:d,5:dOOQO,5=^,5=^OOQO-E:p-E:pOOQO1G0`1G0`O$(kQPO1G0`OOQO,5=`,5=`OOQO-E:r-E:rO$(yQPO,5:uOOQO7+%y7+%yOOQO7+&Y7+&YOOQO1G1_1G1_O$)QQQO1G1_OOQO-E:y-E:yO$)YQQO'#IWO$)TQPO1G1_O$ mQPO1G1_O)PQPO1G1_OOQOAN@[AN@[O$)eQQO<<KRO9PQPO<<KRO$)lQPO<<J}OOQO<<J}<<J}O!!sQPO<<J}OOQO1G2R1G2RO$)qQQO7+(UO9PQPO7+(UOOQO<<Ko<<KoP!'xQPO'#HQOLZQPO'#HPO$){QPO,5<yO$*WQPO1G2dO:kQPO1G2dOOQO,5=d,5=dOOQO-E:v-E:vO#DoQPO,5;oOOQO,5=X,5=XOOQO-E:k-E:kO$*]QPO7+&OOOQO7+%v7+%vO$*kQPO7+&OOOQOG24_G24_OOQOG24vG24vO$*pQPO1G/yO$*{QPO1G4POOQO7+%O7+%OOOQO7+&Q7+&QOOQO7+)h7+)hO$+^QPO7+)hO!0bQPO,5:aOOQO1G0g1G0gO$+iQPO1G0gO$+pQPO,59qO$,UQPO,5:|O7kQPO,5:|OOQO7+%z7+%zOOQO7+&y7+&yO)PQPO'#G|O$,ZQPO,5>rO$,cQPO7+&yO$,hQQO'#IXOOQOAN@mAN@mO$,sQQOAN@mOOQOAN@iAN@iO$,zQPOAN@iO$-PQQO<<KpO$-ZQPO,5=kOOQO-E:}-E:}OOQO7+(O7+(OO$-lQPO7+(OO$-qQPO<<IjOOQO<<Ij<<IjO#DoQPO<<IjO$-qQPO<<IjOOQO<<MS<<MSOOQO7+&R7+&RO$.PQPO1G0jO$.[QQO1G0hOOQO1G0h1G0hO$.dQPO1G0hO$.iQQO,5=hOOQO-E:z-E:zOOQO<<Je<<JeO$.tQPO,5>sOOQOG26XG26XOOQOG26TG26TOOQO<<Kj<<KjOOQOAN?UAN?UO#DoQPOAN?UO$.|QPOAN?UO$/RQPOAN?UO7kQPO7+&SO$/aQPO7+&SOOQO7+&S7+&SO$/fQPOG24pOOQOG24pG24pO#DoQPOG24pO$/kQPO<<InOOQO<<In<<InOOQOLD*[LD*[O$/pQPOLD*[OOQOAN?YAN?YOOQO!$'Mv!$'MvO)PQPO'#CaO$/uQQO'#H[O$0YQQO'#CbO!!zQPO'#Cy",
     stateData: "$0u~OPOSQOS%wOS~OZ_O_UO`UOaUObUOcUOeUOg]Oh]Op!OOvzOwjOz}O}bO!PuO!SxO!TxO!UxO!VxO!WxO!XxO!YxO!ZyO![!_O!]xO!^xO!_xO!u|O!z{O#eoO#qnO#soO#toO#x!QO#y!PO$V!RO$X!SO$_!TO$b!UO$d!WO$g!VO$k!XO$m!YO$r!ZO$t![O$v!]O$x!^O${!`O$}!aO%{SO%}QO&PPO&VTO&rcO~OWiXW&OXZ&OXuiXu&OX!P&OX!b&OX#]&OX#_&OX#a&OX#c&OX#d&OX#e&OX#f&OX#g&OX#h&OX#j&OX#n&OX#q&OX%{iX%}iX&PiX&[&OX&]iX&]&OX&l&OX&tiX&t&OX&v!aX~O#o$]X~P$wOWUXW&ZXZUXuUXu&ZX!PUX!bUX#]UX#_UX#aUX#cUX#dUX#eUX#fUX#gUX#hUX#jUX#nUX#qUX%{&ZX%}&ZX&P&ZX&[UX&]UX&]&ZX&lUX&tUX&t&ZX&v!aX~O#o$]X~P&{O%}RO&P!bO~O&U!gO&W!eO~Og]Oh]O!SxO!TxO!UxO!VxO!WxO!XxO!YxO!ZyO!]xO!^xO!_xO%{SO%}!hO&PVOg!RXh!RX$g!RX%}!RX&P!RX~O#x!mO#y!lO$V!nOv!RX!u!RX!z!RX&r!RX~P)aOW!xOu!oO%{SO%}!sO&P!sO&t&_X~OW!{Ou&YX%{&YX%}&YX&P&YX&t&YXY&YXw&YX&l&YX&o&YXZ&YXq&YX&[&YX!P&YX#_&YX#a&YX#c&YX#d&YX#e&YX#f&YX#g&YX#h&YX#j&YX#n&YX#q&YX}&YX!r&YX#o&YXs&YX|&YX~O&]!yO~P+sO&]&YX~P+sOZ_O_UO`UOaUObUOcUOeUOg]Oh]Op!OOwjOz}O!SxO!TxO!UxO!VxO!WxO!XxO!YxO!ZyO!]xO!^xO!_xO#eoO#qnO#soO#toO%{SO&VTO~O%}!}O&P!|OY&nP~P.RO%{SOg%`Xh%`Xv%`X!S%`X!T%`X!U%`X!V%`X!W%`X!X%`X!Y%`X!Z%`X!]%`X!^%`X!_%`X!u%`X!z%`X$g%`X%}%`X&P%`X&r%`X&]%`X~O!SxO!TxO!UxO!VxO!WxO!XxO!YxO!ZyO!]xO!^xO!_xOg!RXh!RXv!RX!u!RX!z!RX%}!RX&P!RX&r!RX&]!RX~O$g!RX~P1sO|#[O~P]Og]Oh]Ov#aO!u#cO!z#bO%}!hO&PVO&r#`O~O$g#dO~P3cOu#fO&t#gO!P&RX#_&RX#a&RX#c&RX#d&RX#e&RX#f&RX#g&RX#h&RX#j&RX#n&RX#q&RX&[&RX&]&RX&l&RX~OW#eOY&RX#o&RXs&RXq&RX|&RX~P4UO!b#hO#]#hOW&SXu&SX!P&SX#_&SX#a&SX#c&SX#d&SX#e&SX#f&SX#g&SX#h&SX#j&SX#n&SX#q&SX&[&SX&]&SX&l&SX&t&SXY&SX#o&SXs&SXq&SX|&SX~OZ#XX~P5sOZ#iO~O&t#gO~O#_#mO#a#nO#c#oO#d#oO#e#pO#f#qO#g#rO#h#rO#j#vO#n#sO#q#tO&[#kO&]#kO&l#lO~O!P#uO~P7uO&v#wO~OZ_O_UO`UOaUObUOcUOeUOg]Oh]Op!OOwjOz}O#eoO#qnO#soO#toO%{SO%}0iO&P0hO&VTO~O#o#{O~O![#}O~O%}!sO&P!sO~Og]Oh]O%}!hO&PVO&]!yO~OW$TO&t#gO~O#y!lO~O!W$XO%}RO&P!bO~OZ$YO~OZ$]O~O!P$dO%}$cO&P$cO~O!P$fO%}$cO&P$cO~O!P$iO~P9POZ$lO}bO~OW$oOZ$pOgTahTa%{Ta%}Ta&PTa~OvTa!STa!TTa!UTa!VTa!WTa!XTa!YTa!ZTa!]Ta!^Ta!_Ta!uTa!zTa#xTa#yTa$VTa$gTa&rTauTaYTa&]TaqTa|Ta!PTa~P<oO&U$sO&W!eO~Ou!oO%{SOqma&[maYma&lma!Pma~O&tma}ma!rma~P?RO!SxO!TxO!UxO!VxO!WxO!XxO!YxO!ZyO!]xO!^xO!_xO~Og!Rah!Rav!Ra!u!Ra!z!Ra$g!Ra%}!Ra&P!Ra&r!Ra&]!Ra~P?wO#y$vO~Os$xO~Ou$yO%{SO~Ou!oO%{ra%}ra&Pra&traYrawra&lra&ora!Pra&[raqra~OWra#_ra#ara#cra#dra#era#fra#gra#hra#jra#nra#qra&]ra#orasra|ra~PArOu!oO%{SOq&gX!P&gX!b&gX~OY&gX#o&gX~PCpO!b$|Oq!`X!P!`XY!`X~Oq$}O!P&fX~O!P%PO~Ov%QO~Og]Oh]O%{0gO%}!hO&PVO&`%TO~O&[&^P~PD}O%{SO%}!hO&PVO~OWiXW&OXY&OXZ&OXuiXu&OX!b&OX#]&OX#_&OX#a&OX#c&OX#d&OX#e&OX#f&OX#g&OX#h&OX#j&OX#n&OX#q&OX%{iX%}iX&PiX&[&OX&]iX&]&OX&l&OX&tiX&t&OX&v!aX~OYiXY!aXq!aXwiX&liX&oiX~PEuOWUXW&ZXYUXZUXuUXu&ZX!bUX#]UX#_UX#aUX#cUX#dUX#eUX#fUX#gUX#hUX#jUX#nUX#qUX%{&ZX%}&ZX&P&ZX&[UX&]UX&]&ZX&lUX&tUX&t&ZX&v!aX~OY!aXY&ZXq!aXw&ZX&l&ZX&o&ZX~PHYOg]Oh]O%{SO%}!hO&PVOg!RXh!RX%}!RX&P!RX~P?wOu!oOw%_O%{SO%}%[O&P%ZO&o%^O~OW!xOY&_X&l&_X&t&_X~PK^OY%aO~P7uOg]Oh]O%}!hO&PVO~Oq%cOY&nX~OY%eO~Og]Oh]O%{SO%}!hO&PVOY&nP~P?wOY%kO&l%iO&t#gO~Oq%lO&v#wOY&uX~OY%nO~O%{SOg%`ah%`av%`a!S%`a!T%`a!U%`a!V%`a!W%`a!X%`a!Y%`a!Z%`a!]%`a!^%`a!_%`a!u%`a!z%`a$g%`a%}%`a&P%`a&r%`a&]%`a~O|%oO~P]O}%pO~Ou!oO%{SO%}!sO&P!sO~Op%|Ow%}O%}RO&P!bO&]!yO~Oz%{O~P! {Oz&PO%}RO&P!bO&]!yO~OY&cP~P9POg]Oh]O%{SO%}!hO&PVO~O}bO~P9POW!xOu!oO%{SO&t&_X~O#q#tO!P#ra#_#ra#a#ra#c#ra#d#ra#e#ra#f#ra#g#ra#h#ra#j#ra#n#ra&[#ra&]#ra&l#raY#ra#o#ras#raq#ra|#ra~Oo&dO}&cO!r&eO&]&bO~O}&jO!r&eO~Oo&nO}&mO&]&bO~OZ#iOu&rO%{SO~OW$oO}&xO~OW$oO!P&zO~OW&{O!P&|O~O$g!VO%}0iO&P0hO!P&cP~P.RO!P'XO#o'YO~P7uO}'ZO~O$b']O~O!P'^O~O!P'_O~O!P'`O~P7uO!P'bO~P7uOZ$YO_UO`UOaUObUOcUOeUOg]Oh]Op!OOwjOz}O%{SO%}'dO&P'cO&VTO~P?wO%P'mO%T'nOZ$|a_$|a`$|aa$|ab$|ac$|ae$|ag$|ah$|ap$|av$|aw$|az$|a}$|a!P$|a!S$|a!T$|a!U$|a!V$|a!W$|a!X$|a!Y$|a!Z$|a![$|a!]$|a!^$|a!_$|a!u$|a!z$|a#e$|a#q$|a#s$|a#t$|a#x$|a#y$|a$V$|a$X$|a$_$|a$b$|a$d$|a$g$|a$k$|a$m$|a$r$|a$t$|a$v$|a$x$|a${$|a$}$|a%u$|a%{$|a%}$|a&P$|a&V$|a&r$|a|$|a$`$|a$p$|a~O}'tOY&xP~P9PO}ra!rra&|ra~PArOW$oO!P'{O~Os'|O~Ou!oO%{SOq&ga!P&ga!b&gaY&ga#o&ga~O}'}O~P9POq$}O!P&fa~Og]Oh]O%{0gO%}!hO&PVO~O&`(UO~P!.jOu!oO%{SOq&_X&[&_XY&_X&l&_X!P&_X~O}&_X!r&_X~P!/SOo(WOp(WOqnX&[nX~Oq(XO&[&^X~O&[(ZO~Ou!oOw(]O%{SO%}RO&P!bO~OYma&lma&tma~P!0bOW&OXY!aXq!aXu!aX%{!aX~OWUXY!aXq!aXu!aX%{!aX~OW(`O~Ou!oO%{SO%}!sO&P!sO&o(bO~Og]Oh]O%{SO%}!hO&PVO~P?wOq%cOY&na~Ou!oO%{SO%}!sO&P!sO&o%^O~O%{SO~P1sOY(eO~OY(hO&l%iO~Oq%lOY&ua~Og]Oh]OvzO|(pO!u|O%{SO%}!hO&PVO&rcO~P?wO!P(qO~OW^iZ#XXu^i!P^i!b^i#]^i#_^i#a^i#c^i#d^i#e^i#f^i#g^i#h^i#j^i#n^i#q^i&[^i&]^i&l^i&t^iY^i#o^is^iq^i|^i~OW)QO~Os)RO~P7uOz)SO%}RO&P!bO~O!P]iY]i#o]is]iq]i|]i~P7uOq)TOY&cX!P&cX~P7uOY)VO~O#q#tO!P#^i#_#^i#a#^i#c#^i#d#^i#e#^i#f#^i#j#^i#n#^i&[#^i&]#^i&l#^iY#^i#o#^is#^iq#^i|#^i~O#g#rO#h#rO~P!7qO#_#mO#f#qO#g#rO#h#rO#j#vO#q#tO&[#kO&]#kO!P#^i#a#^i#c#^i#d#^i#n#^i&l#^iY#^i#o#^is#^iq#^i|#^i~O#e#pO~P!9VO#_#mO#f#qO#g#rO#h#rO#j#vO#q#tO&[#kO&]#kO!P#^i#c#^i#d#^i#n#^iY#^i#o#^is#^iq#^i|#^i~O#a#nO#e#pO&l#lO~P!:kO#e#^i~P!9VO#q#tO!P#^i#a#^i#c#^i#d#^i#e#^i#f#^i#n#^i&l#^iY#^i#o#^is#^iq#^i|#^i~O#_#mO#g#rO#h#rO#j#vO&[#kO&]#kO~P!<WO#g#^i#h#^i~P!7qO#o)WO~P7uO#_&_X#a&_X#c&_X#d&_X#e&_X#f&_X#g&_X#h&_X#j&_X#n&_X#q&_X&]&_X#o&_Xs&_X|&_X~P!/SO!P#kiY#ki#o#kis#kiq#ki|#ki~P7uOg]Oh]OvzO}bO!P)fO!SxO!TxO!UxO!VxO!W)jO!XxO!YxO!ZyO!]xO!^xO!_xO!u|O!z{O%{SO%})^O&P)_O&]&bO&rcO~O|)iO~P!?hO}&cO~O}&cO!r&eO~Oo&dO}&cO!r&eO~O%{SO%}!sO&P!sO|&qP!P&qP~P?wO}&jO~Og]Oh]OvzO|)xO!P)vO!u|O!z{O%{SO%}!hO&PVO&]&bO&rcO~P?wO}&mO~Oo&nO}&mO~Os)zO~P9POu)|O%{SO~Ou&rO}'}O%{SOW#Zi!P#Zi#_#Zi#a#Zi#c#Zi#d#Zi#e#Zi#f#Zi#g#Zi#h#Zi#j#Zi#n#Zi#q#Zi&[#Zi&]#Zi&l#Zi&t#ZiY#Zi#o#Zis#Ziq#Zi|#Zi~O}&cOW&biu&bi!P&bi#_&bi#a&bi#c&bi#d&bi#e&bi#f&bi#g&bi#h&bi#j&bi#n&bi#q&bi&[&bi&]&bi&l&bi&t&biY&bi#o&bis&biq&bi|&bi~O#|*UO$O*VO$Q*VO$R*WO$S*XO~O|*TO~P!GPO$Y*YO%}RO&P!bO~OW*ZO!P*[O~O$`*]OZ$^i_$^i`$^ia$^ib$^ic$^ie$^ig$^ih$^ip$^iv$^iw$^iz$^i}$^i!P$^i!S$^i!T$^i!U$^i!V$^i!W$^i!X$^i!Y$^i!Z$^i![$^i!]$^i!^$^i!_$^i!u$^i!z$^i#e$^i#q$^i#s$^i#t$^i#x$^i#y$^i$V$^i$X$^i$_$^i$b$^i$d$^i$g$^i$k$^i$m$^i$r$^i$t$^i$v$^i$x$^i${$^i$}$^i%u$^i%{$^i%}$^i&P$^i&V$^i&r$^i|$^i$p$^i~Og]Oh]O$g#dO%}!hO&PVO~O!P*aO~P9PO!P*bO~OZ_O_UO`UOaUObUOcUOeUOg]Oh]Op!OOvzOwjOz}O}bO!PuO!SxO!TxO!UxO!VxO!WxO!XxO!YxO!Z*gO![!_O!]xO!^xO!_xO!u|O!z{O#eoO#qnO#soO#toO#x!QO#y!PO$V!RO$X!SO$_!TO$b!UO$d!WO$g!VO$k!XO$m!YO$p*hO$r!ZO$t![O$v!]O$x!^O${!`O$}!aO%{SO%}QO&PPO&VTO&rcO~O|*fO~P!LcOWiXW&OXY&OXZ&OXuiXu&OX!P&OX%{iX%}iX&PiX&]iX&tiX&t&OX~OWUXW&ZXYUXZUXuUXu&ZX!PUX%{&ZX%}&ZX&P&ZX&]&ZX&tUX&t&ZX~OW#eOu#fO&t#gO~OW&SXY%WXu&SX!P%WX&t&SX~OZ#XX~P#$YOY*nO!P*lO~O%P'mO%T'nOZ$|i_$|i`$|ia$|ib$|ic$|ie$|ig$|ih$|ip$|iv$|iw$|iz$|i}$|i!P$|i!S$|i!T$|i!U$|i!V$|i!W$|i!X$|i!Y$|i!Z$|i![$|i!]$|i!^$|i!_$|i!u$|i!z$|i#e$|i#q$|i#s$|i#t$|i#x$|i#y$|i$V$|i$X$|i$_$|i$b$|i$d$|i$g$|i$k$|i$m$|i$r$|i$t$|i$v$|i$x$|i${$|i$}$|i%u$|i%{$|i%}$|i&P$|i&V$|i&r$|i|$|i$`$|i$p$|i~OZ*qO~O%P'mO%T'nOZ%Ui_%Ui`%Uia%Uib%Uic%Uie%Uig%Uih%Uip%Uiv%Uiw%Uiz%Ui}%Ui!P%Ui!S%Ui!T%Ui!U%Ui!V%Ui!W%Ui!X%Ui!Y%Ui!Z%Ui![%Ui!]%Ui!^%Ui!_%Ui!u%Ui!z%Ui#e%Ui#q%Ui#s%Ui#t%Ui#x%Ui#y%Ui$V%Ui$X%Ui$_%Ui$b%Ui$d%Ui$g%Ui$k%Ui$m%Ui$r%Ui$t%Ui$v%Ui$x%Ui${%Ui$}%Ui%u%Ui%{%Ui%}%Ui&P%Ui&V%Ui&r%Ui|%Ui$`%Ui$p%Ui~OW&SXu&SX#_&SX#a&SX#c&SX#d&SX#e&SX#f&SX#g&SX#h&SX#j&SX#n&SX#q&SX&[&SX&]&SX&l&SX&t&SX~O!b*vO#]#hOY&SXZ#XX~P#,{OY&QXq&QX|&QX!P&QX~P7uO}'tO|&wP~P9POY&QXg%YXh%YX%{%YX%}%YX&P%YXq&QX|&QX!P&QX~Oq*yOY&xX~OY*{O~O}'}O|&iP~P9POq&hX!P&hX|&hXY&hX~P7uO&`Ta~P<oOo(WOp(WOqna&[na~Oq(XO&[&^a~OW+TO~Ow+UO~Ou!oO%{SO%}+YO&P+XO~Og]Oh]Ov#aO!u#cO%}!hO&PVO&r#`O~Og]Oh]OvzO|+_O!u|O%{SO%}!hO&PVO&rcO~P?wOw+jO%}RO&P!bO&]!yO~Oq)TOY&ca!P&ca~O#_ma#ama#cma#dma#ema#fma#gma#hma#jma#nma#qma&]ma#omasma|ma~P?ROo+oOq!fX&[!fX~Oq+qO&[&kX~O&[+sO~OW&ZXu&ZX%{&ZX%}&ZX&P&ZX&]&ZX~OZ!aX~P#4{OWiXuiX%{iX%}iX&PiX&]iX~OZ!aX~P#5hOg]Oh]Ov#aO!u#cO!z#bO&]&bO&r#`O~O%})^O&P)_O~P#6TOg]Oh]O%{SO%})^O&P)_O~O}bO!P+}O~OZ,OO~O},QO!m,TO~O|,VO~P!?hO}bOg&eXh&eXv&eX!S&eX!T&eX!U&eX!V&eX!W&eX!X&eX!Y&eX!Z&eX!]&eX!^&eX!_&eX!u&eX!z&eX%{&eX%}&eX&P&eX&]&eX&r&eX~Oq,XO}&pX!P&pX~OZ#iO}&cOq!|X|!|X!P!|X~Oq,^O|&qX!P&qX~O|,aO!P,`O~O&]&bO~P3cOg]Oh]OvzO|,eO!P)vO!u|O!z{O%{SO%}!hO&PVO&]&bO&rcO~P?wOs,fO~P7uOs,fO~P9PO}&cOW&bqu&bq!P&bq#_&bq#a&bq#c&bq#d&bq#e&bq#f&bq#g&bq#h&bq#j&bq#n&bq#q&bq&[&bq&]&bq&l&bq&t&bqY&bq#o&bqs&bqq&bq|&bq~O|,jO~P!GPO!W,nO#},nO%}RO&P!bO~O!P,qO~O$Y,rO%}RO&P!bO~O!b$|O#o,tOq!`X!P!`X~O!P,vO~P7uO!P,vO~P9PO!P,yO~P7uO|,{O~P!LcO![#}O#o,|O~O!P-OO~O!b-PO~OY-SOZ$YO_UO`UOaUObUOcUOeUOg]Oh]Op!OOwjOz}O%{SO%}'dO&P'cO&VTO~P?wOY-SO!P-TO~O%P'mO%T'nOZ%Uq_%Uq`%Uqa%Uqb%Uqc%Uqe%Uqg%Uqh%Uqp%Uqv%Uqw%Uqz%Uq}%Uq!P%Uq!S%Uq!T%Uq!U%Uq!V%Uq!W%Uq!X%Uq!Y%Uq!Z%Uq![%Uq!]%Uq!^%Uq!_%Uq!u%Uq!z%Uq#e%Uq#q%Uq#s%Uq#t%Uq#x%Uq#y%Uq$V%Uq$X%Uq$_%Uq$b%Uq$d%Uq$g%Uq$k%Uq$m%Uq$r%Uq$t%Uq$v%Uq$x%Uq${%Uq$}%Uq%u%Uq%{%Uq%}%Uq&P%Uq&V%Uq&r%Uq|%Uq$`%Uq$p%Uq~O}'tO~P9POq-`O|&wX~O|-bO~Oq*yOY&xa~Oq-fO|&iX~O|-hO~Ow-iO~Oq!aXu!aX!P!aX!b!aX%{!aX~OZ&OX~P#EoOZUX~P#EoO!P-jO~OZ-kO~OW^yZ#XXu^y!P^y!b^y#]^y#_^y#a^y#c^y#d^y#e^y#f^y#g^y#h^y#j^y#n^y#q^y&[^y&]^y&l^y&t^yY^y#o^ys^yq^y|^y~OY%^aq%^a!P%^a~P7uO!P#myY#my#o#mys#myq#my|#my~P7uOo+oOq!fa&[!fa~Oq+qO&[&ka~OZ,OO~PCpO!P-xO~O!m,TO}&ja!P&ja~O}bO!P-{O~OZ_O_UO`UOaUObUOcUOeUOg]Oh]Op.ZOvzOw.YOz}O|.UO}bO!PuO![!_O!u|O!z{O#eoO#qnO#soO#toO#x!QO#y!PO$V!RO$X!SO$_!TO$b!UO$d!WO$g!VO$k!XO$m!YO$r!ZO$t![O$v!]O$x!^O${!`O$}!aO%{SO%}QO&PPO&VTO&]!yO&rcO~P?wO},QO~Oq,XO}&pa!P&pa~O}&cOq!|a|!|a!P!|a~OZ#iO}&cOq!|a|!|a!P!|a~O%{SO%}!sO&P!sOq%hX|%hX!P%hX~P?wOq,^O|&qa!P&qa~O|!}X~P!?hO|.eO~Os.fO~P7uOW$oO!P.gO~OW$oO$P.lO%}RO&P!bO!P&zP~OW$oO$T.mO~O!P.nO~O!b$|O#o.pOq!`X!P!`X~OY.rO~O!P.sO~P7uO#o.tO~P7uO!b.vO~OY.wOZ$YO_UO`UOaUObUOcUOeUOg]Oh]Op!OOwjOz}O%{SO%}'dO&P'cO&VTO~P?wOW!{Ou&YX%{&YX%}&YX&P&YX&|&YX~O&]!yO~P$$WOu!oO%{SO&|.yO%}%RX&P%RX~OY&QXq&QX~P7uO}'tOq%lX|%lX~P9POq-`O|&wa~O!b/PO~O}'}Oq%aX|%aX~P9POq-fO|&ia~OY/SO~O!P/TO~OZ/UO~O&l%iOq!ga&[!ga~Ou!oO%{SO}&ma!P&ma!m&ma~O!P/ZO~O!m,TO}&ji!P&ji~O|/`O~P]OW/bO~P4UOZ#iO!P&SX~P#,{OW$TOZ#iO&t#gO~Op/dOw/dO~O}&cOq!|i|!|i!P!|i~O|!}a~P!?hOW$oO!P/fO~OW$oOq/gO!P&zX~OY/kO~P7uOY/mO~OY%Wq!P%Wq~P7uO&|.yO%}%Ra&P%Ra~OY/rO~Ou!oO!P/uO!Z/vO%{SO~OY/wO~O&l%iOq!gi&[!gi~Ou!oO%{SO}&mi!P&mi!m&mi~O!m,TO}&jq!P&jq~O|/yO~P]Op/{Ow%}Oz%{O%}RO&P!bO&]!yO~O!P/|O~Oq/gO!P&za~O!P0QO~OW$oOq/gO!P&{X~OY0SO~P7uOY0TO~OY%Wy!P%Wy~P7uOu!oO%{SO%}%sa&P%sa&|%sa~OY0UO~Ou!oO!P0VO!Z0WO%{SO~Op0ZO%}RO&P!bO~OW)QOZ#iO~O!P0]O~OW$oOq%pa!P%pa~Oq/gO!P&{a~O!P0_O~Ou!oO!P0_O!Z0`O%{SO~O!P0bO~O!P0cO~O!P0eO~O!P0fO~O#o&OXY&OXs&OXq&OX|&OX~P$wO#oUXYUXsUXqUX|UX~P&{O`Q_P#f&Vc~",
     goto: "#(V&|PPPP&}'b*q-tP'bPP.Y.^/rPPPPP1^P2vPP4`7P9j<T<m>bPPP>hP@|PPPAv2vPCoPPDjPEaEgPPPPPPPPPPPPFpGXPJ_JgJqKZKaKgMVMZMZMcPMrNx! k! uP!![NxP!!b!!l!!{!#TP!#r!#|!$SNx!$V!$]EaEa!$a!$k!$n2v!&Y2v2v!(RP.^P!(VP!(vPPPPPP.^P.^!)d.^PP.^P.^PP.^!*x!+SPP!+Y!+cPPPPPPPP&}P&}PP!+g!+g!+z!+gPP!+gP!+gP!,e!,hP!+g!-O!+gP!+gP!-R!-UP!+gP!+gP!+gP!+gP!+g!+gP!+gP!-YP!-`!-c!-iP!+g!-u!-x!.Q!.d!2a!2g!2m!3s!3y!4T!5X!5_!5e!5o!5u!5{!6R!6X!6_!6e!6k!6q!6w!6}!7T!7Z!7e!7k!7u!7{PPP!8R!+g!8vP!<XP!=]P!?n!@U!CQ2vPPP!Dn!HY!JwPP!Mb!MeP# n# t##b##q##w#$w#%a#&[#&e#&h#&tP#&w#'TP#'[#'cP#'fP#'oP#'r#'u#'x#'|#(SssObw!Z#]#{$Z$[$^$_'Z*]*e,Q.V.W/a'kqOWX_`bnow!X!Z!^!`!i!p!t!y!{#O#P#U#Y#]#_#f#h#i#m#n#o#p#q#r#s#v#w#x#y#{$R$Y$Z$[$]$^$_$l$p${$|%R%S%X%Y%b%c%f%g%i%k%p&]&b&c&d&e&j&m&n&r&s&u'Q'R'T'Y'Z'e't'}(W(X(h(l(o)T)W)X)Z)`)b)h)s)t)w)|*]*_*a*b*e*h*k*l*q*v+]+o+q+t+w+z+{,O,Q,T,X,^,`,c,t,v-P-T-X-`-f-w.Q.S.T.V.W.d.p.s.v.x/P/S/Y/_/a/p/t/v/w0W0Y0`0j#rgO_bnow!X!Z!^!`#]#f#h#i#m#n#o#p#q#r#s#w#{$Y$Z$[$]$^$_$|%k&r'T'Y'Z't'}(h)T)W)|*]*a*b*e*h*v,Q,t,v-P-`-f.V.W.p.s.v/P/a/v0W0`t!dS!P!R!S!l!n$X$v*U*V*W*X,m,o.l.m/g0gQ#^cS%`#P.SQ%s#`U%x#e$T/bQ&P#gW'g$l*l-T.xU'q$o&{*ZQ'r$pS(^%Y/_U(}%z+i/zQ)S&QQ+[(lQ+g)QQ-c*yR-m+]u!dS!P!R!S!l!n$X$v*U*V*W*X,m,o.l.m/g0gT$q!c(T#upO_bnow!X!Z!^!`#]#f#h#i#m#n#o#p#q#r#s#w#{$Y$Z$[$]$^$_$p$|%k&r'T'Y'Z't'}(h)T)W)|*]*a*b*e*h*v,Q,t,v-P-`-f.V.W.p.s.v/P/a/v0W0`#tkO_bnow!X!Z!^!`#]#f#h#i#m#n#o#p#q#r#s#w#{$Y$Z$[$]$^$_$p$|%k&r'T'Y'Z't'}(h)T)W)|*]*a*b*e*h*v,Q,t,v-P-`-f.V.W.p.s.v/P/a/v0W0`X'h$l*l-T.x#}UO_bnow!X!Z!^!`#]#f#h#i#m#n#o#p#q#r#s#w#{$Y$Z$[$]$^$_$l$p$|%k&r'T'Y'Z't'}(h)T)W)|*]*a*b*e*h*l*v,Q,t,v-P-T-`-f.V.W.p.s.v.x/P/a/v0W0`#}jO_bnow!X!Z!^!`#]#f#h#i#m#n#o#p#q#r#s#w#{$Y$Z$[$]$^$_$l$p$|%k&r'T'Y'Z't'}(h)T)W)|*]*a*b*e*h*l*v,Q,t,v-P-T-`-f.V.W.p.s.v.x/P/a/v0W0`%tZOW_bdnow}!X!Z!^!`!y#O#R#U#]#f#h#i#m#n#o#p#q#r#s#v#w#x#{$S$Y$Z$[$]$^$_$l$p$|%R%c%i%k%p%{&c&d&e&m&n&r'Q'S'T'Y'Z'i't'}(W(X(h(m(o)T)W)a)b)h)t)u)w)|*]*a*b*e*h*l*v+o+{,O,Q,T,X,`,t,v-P-T-`-f.T.V.W.d.p.s.v.x/P/a/v0W0`0jQ%W!{Q([%XV-V*q-Z.y%tZOW_bdnow}!X!Z!^!`!y#O#R#U#]#f#h#i#m#n#o#p#q#r#s#v#w#x#{$S$Y$Z$[$]$^$_$l$p$|%R%c%i%k%p%{&c&d&e&m&n&r'Q'S'T'Y'Z'i't'}(W(X(h(m(o)T)W)a)b)h)t)u)w)|*]*a*b*e*h*l*v+o+{,O,Q,T,X,`,t,v-P-T-`-f.T.V.W.d.p.s.v.x/P/a/v0W0`0jV-V*q-Z.y%t[OW_bdnow}!X!Z!^!`!y#O#R#U#]#f#h#i#m#n#o#p#q#r#s#v#w#x#{$S$Y$Z$[$]$^$_$l$p$|%R%c%i%k%p%{&c&d&e&m&n&r'Q'S'T'Y'Z'i't'}(W(X(h(m(o)T)W)a)b)h)t)u)w)|*]*a*b*e*h*l*v+o+{,O,Q,T,X,`,t,v-P-T-`-f.T.V.W.d.p.s.v.x/P/a/v0W0`0jV-W*q-Z.yS!zZ-VS$S}%{S%z#e$TQ&Q#gQ+i)QQ.[,QR/z/b$eYO_bnow!X!Z!^!`!y#]#f#h#i#m#n#o#p#q#r#s#v#w#{$Y$Z$[$]$^$_$l$p$|%i%k&d&e&n&r'T'Y'Z't'}(W(X(h)T)W)|*]*a*b*e*h*l*v+o,Q,T,X,t,v-P-T-`-f.V.W.p.s.v.x/P/a/v0W0`Q%U!yR+R(X%u^OW_bdnow!X!Z!^!`!y#O#R#U#]#f#h#i#m#n#o#p#q#r#s#v#w#x#{$Y$Z$[$]$^$_$l$p$|%R%c%i%k%p&c&d&e&m&n&r'Q'S'T'Y'Z'i't'}(W(X(h(m(o)T)W)a)b)h)t)u)w)|*]*a*b*e*h*l*q*v+o+{,O,Q,T,X,`,t,v-P-T-Z-`-f.T.V.W.d.p.s.v.x.y/P/a/v0W0`0j!o!qX!i!r!t#P#_#y$t${%S%Y%b%f&]'R'e(l)X)`)s*_*k+]+t+w+z,c-X-w.Q.S/S/Y/_/p/t/w0Y#|jO_bnow!X!Z!^!`#]#f#h#i#m#n#o#p#q#r#s#w#{$Y$Z$[$]$^$_$l$p$|%k&r'T'Y'Z't'}(h)T)W)|*]*a*b*e*h*l*v,Q,t,v-P-T-`-f.V.W.p.s.v.x/P/a/v0W0`Q$Z!TQ$[!UQ$a!YQ$j!_R*i']Q#jhS&v$R)PQ(|%yQ*Q&wQ+f)OQ,[)oQ-q+hQ.a,]Q/W-rS/c.Y.ZQ/}/dQ0[/{R0a0ZQ&f$OW(s%t&g&h&iQ*P&vU+`(t(u(vQ,Z)oQ,h*QS-n+a+bS.`,[,]Q/V-oR/e.aX)f&c)h,`.drdObw!Z#]#{$Z$[$^$_'Z*]*e,Q.V.W/aW#R_#U%c,OQ'S$]W'i$l*l-T.xS(m%p(oW)a&c)h,`.dS)p&j,^S)u&m)wR-Z*qh!vX!V#_#d'R(l)`)s*_+]+w,cQ(R$}Q(_%^R+V(b#rmObnow!X!Z!^!`#]#f#h#i#m#n#o#p#q#r#s#w#{$Y$Z$[$]$^$_$p$|%k&r'T'Y'Z't'}(h)T)W)|*]*a*b*e*h*v,Q,t,v-P-`-f.V.W.p.s.v/P/a/v0W0`v!tX!V#P#_#d$}%^%b%f'R'e(b(l*_*k+]-Y.S.|Q#W_Q$OzQ$P{Q$Q|Q%t#aQ%u#bQ%v#cQ(j%lS)Y&b+qY)d&c)a)h,`.dS)o&j,^Q+p)ZW+t)`)s+w,cQ+|)bQ,])pT.O+z.QU(P$|'}-fR*O&uW)f&c)h,`.dT)v&m)wQ&i$OQ&q$QQ(v%tQ({%vY)b&c)a)h,`.dV)t&m)u)wQ)[&bR-u+qQ+n)YR-t+p#tmO_bnow!X!Z!^!`#]#f#h#i#m#n#o#p#q#r#s#w#{$Y$Z$[$]$^$_$p$|%k&r'T'Y'Z't'}(h)T)W)|*]*a*b*e*h*v,Q,t,v-P-`-f.V.W.p.s.v/P/a/v0W0`Q,P)dS-w+t.OR.R+|T#U_,OU#S_#U,OR(c%cQ,S)eQ-y+vQ-}+yQ/].PR/x/^ruObw!Z#]#{$Z$[$^$_'Z*]*e,Q.V.W/aQ$m!aQ&`#wQ'a$jQ'p$nW)f&c)h,`.dQ*s'nQ+})cQ,W)jQ-[*rR-{+xrsObw!Z#]#{$Z$[$^$_'Z*]*e,Q.V.W/aS(n%p(oW)f&c)h,`.dT)v&m)wQ&h$OS(u%t&iR+b(vQ&g$OQ&l$PU(t%t&h&iQ(x%uS+a(u(vR-o+bQ)n&eR)y&nQ&p$QS(z%v&qR+e({Q&o$QU(y%v&p&qS+d(z({R-p+eS(n%p(oT)v&m)wrsObw!Z#]#{$Z$[$^$_'Z*]*e,Q.V.W/aW)f&c)h,`.dT)v&m)wQ&k$PS(w%u&lR+c(xQ)q&jR.b,^R,b)rQ%q#^R(r%sT(n%p(oQ,R)eS-|+y,SR/[-}R.W,QWj$l*l-T.x#ukO_bnow!X!Z!^!`#]#f#h#i#m#n#o#p#q#r#s#w#{$Y$Z$[$]$^$_$p$|%k&r'T'Y'Z't'}(h)T)W)|*]*a*b*e*h*v,Q,t,v-P-`-f.V.W.p.s.v/P/a/v0W0`#|hO_bnow!X!Z!^!`#]#f#h#i#m#n#o#p#q#r#s#w#{$Y$Z$[$]$^$_$l$p$|%k&r'T'Y'Z't'}(h)T)W)|*]*a*b*e*h*l*v,Q,t,v-P-T-`-f.V.W.p.s.v.x/P/a/v0W0`U%y#e$T/bS)O%z/zQ+h)QR-r+iT&t$R&u!]#ml#Q$`$h$k&O&R&S&V&W&X&Y&[&_'s(O){*`*c+k+m,g,x,}-^.o.u/l/o!V#nl#Q$`$h$k&O&R&S&W&[&_'s(O){*`*c+k+m,g,x,}-^.o.u/l/o#umO_bnow!X!Z!^!`#]#f#h#i#m#n#o#p#q#r#s#w#{$Y$Z$[$]$^$_$p$|%k&r'T'Y'Z't'}(h)T)W)|*]*a*b*e*h*v,Q,t,v-P-`-f.V.W.p.s.v/P/a/v0W0`a'u$p't*v-`/P/v0W0`Q'w$pR-d*yQ&y$UQ'y$uR*|'zT*R&x*SsuObw!Z#]#{$Z$[$^$_'Z*]*e,Q.V.W/artObw!Z#]#{$Z$[$^$_'Z*]*e,Q.V.W/aQ$e![R$g!]R$^!WruObw!Z#]#{$Z$[$^$_'Z*]*e,Q.V.W/aR'T$]R$_!WR'[$aT*d'Z*eX'k$m'l'p*tR*r'mQ-Y*qR.|-ZQ'o$mQ*p'lQ*u'pR-]*tR$n!aQ'j$lV-R*l-T.xQwOQ#]bW#|w#].V/aQ.V,QR/a.WrWObw!Z#]#{$Z$[$^$_'Z*]*e,Q.V.W/al!kW!p#O#Y#x%R%X%g&s'Q)Z+{.T0j!j!pX!i!t#P#_#y${%S%Y%b%f&]'R'e(l)X)`)s*_*k+]+t+w+z,c-X-w.Q.S/S/Y/_/p/t/w0YQ#O_Q#Y`#^#xno!X!^!`#f#h#i#m#n#o#p#q#r#s#w$Y$p$|%i%k&d&e&n&r'T'Y't'}(W(h)T)W)|*a*b*h*v+o,T,X,t,v-P-`-f.p.s.v/P/v0W0`S%R!y(XQ%X!{j%g#U%c%p&c&j&m(o)h)w*q,^,`.dS&s$R&uY'Q$]$l*l-T.xS)Z&b+qS+{)b)tQ.T,OR0j#vQ!fTR$r!fQ(Y%UR+S(Y^!rX#P#y&]'R'e)Xx$t!i#_%S%Y%b%f(l)`)s*_*k+]+w+z,c-X.Q.S/_/p[$z!r$t${/Y/t0YS${!t+tQ/Y-wQ/t/SR0Y/wQ)U&SR+l)UQ)h&cS,U)h.dR.d,`!laO_bw!Z#U#]#{$Z$[$]$^$_$l%c%p&c&j&m'Z(o)h)w*]*e*l*q,O,Q,^,`-T.V.W.d.x/aY!jW#O%g'Q.TT#Za!jQ-g*}R/R-gQ%O!vR(S%OQ%j#VS(g%j/XR/X-sQ+r)[R-v+rQ%d#SR(d%dQ,Y)lR._,YQ)w&mR,d)wQ,_)qR.c,_Q(o%pR+^(oQ&u$RR)}&uQ%m#WR(k%mQ-a*wR/O-aQ*z'wR-e*zQ*S&xR,i*SQ,m*UR.i,mQ/h.jS0P/h0RR0R/jQ*e'ZR,z*eQ'l$mS*o'l*tR*t'pQ.z-XR/q.zQ*m'jR-U*m`vObw#],Q.V.W/aQ$b!ZQ&a#{Q'O$ZQ'P$[Q'V$^Q'W$_S*d'Z*eR,s*]'YrOWX_`bnow!X!Z!^!`!i!p!t!y!{#O#P#U#Y#]#_#f#h#i#m#n#o#p#q#r#s#v#w#x#y#{$R$Y$Z$[$]$^$_$l${$|%R%S%X%Y%b%c%f%g%i%k%p&]&b&c&d&e&j&m&n&r&s&u'Q'R'T'Y'Z'e'}(W(X(h(l(o)T)W)X)Z)`)b)h)s)t)w)|*]*_*a*b*e*h*k*l*q+]+o+q+t+w+z+{,O,Q,T,X,^,`,c,t,v-P-T-X-f-w.Q.S.T.V.W.d.p.s.v.x/S/Y/_/a/p/t/w0Y0ja'v$p't*v-`/P/v0W0`Q!cSQ$U!PQ$V!RQ$W!SQ$u!lQ$w!nQ&}$XQ'z$vQ(T0gS,k*U*WQ,o*VQ,p*XQ.h,mS.j,o.lQ/j.mR0O/g%oROS_bcnow!P!R!S!X!Z!^!`!l!n#P#]#`#e#f#g#h#i#m#n#o#p#q#r#s#w#{$T$X$Y$Z$[$]$^$_$l$o$p$v$|%Y%k%z&Q&r&{'T'Y'Z't'}(h(l)Q)T)W)|*U*V*W*X*Z*]*a*b*e*h*l*v*y+]+i,Q,m,o,t,v-P-T-`-f.S.V.W.l.m.p.s.v.x/P/_/a/b/g/v/z0W0`0gQ'x$pQ*w'tS-_*v/PQ.}-`Q0X/vQ0^0WR0d0`rlObw!Z#]#{$Z$[$^$_'Z*]*e,Q.V.W/aS#Q_$YQ#tnQ#zoQ$`!XQ$h!^Q$k!`Q&O#fQ&R#hY&S#i$]*a,v.sQ&U#mQ&V#nQ&W#oQ&X#pQ&Y#qQ&Z#rQ&[#sQ&_#w^'s$p't-`/P/v0W0`U(O$|'}-fQ(i%kQ){&rQ*`'TQ*c'YQ+W(hQ+k)TQ+m)WQ,g)|Q,x*bQ,}*hQ-^*vQ.o,tQ.u-PQ/l.pR/o.v#rfO_bnow!X!Z!^!`#]#f#h#i#m#n#o#p#q#r#s#w#{$Y$Z$[$]$^$_$p$|%k&r'T'Y'Z't'}(h)T)W)|*]*a*b*e*h*v,t,v-P-`-f.V.W.p.s.v/P/a/v0W0`W'f$l*l-T.xR.X,QrXObw!Z#]#{$Z$[$^$_'Z*]*e,Q.V.W/aW!iW#x%R'QQ#P_Q#_d!|#yno!X!^!`#f#h#i#m#n#o#p#q#r#s#w$Y$p$|%k&r'T'Y't'}(h)T)W)|*a*b*h*v,t,v-P-`-f.p.s.v/P/v0W0`d%S!y%i&d&e&n(W(X+o,T,XQ%Y#OQ%b#RS%f#U%cQ&]#vQ'R$]W'e$l*l-T.xS(l%p(oQ)X0jW)`&c)h,`.dS)s&m)wQ*_'SQ*k'iQ+](mQ+w)aS+z)b)tQ,c)uS-X*q-ZQ.Q+{Q.S,OQ/_.TR/p.y%t^OW_bdnow!X!Z!^!`!y#O#R#U#]#f#h#i#m#n#o#p#q#r#s#v#w#x#{$Y$Z$[$]$^$_$l$p$|%R%c%i%k%p&c&d&e&m&n&r'Q'S'T'Y'Z'i't'}(W(X(h(m(o)T)W)a)b)h)t)u)w)|*]*a*b*e*h*l*q*v+o+{,O,Q,T,X,`,t,v-P-T-Z-`-f.T.V.W.d.p.s.v.x.y/P/a/v0W0`0jQ$R}Q&w$SR)P%{&PVOW_bdnow}!X!Z!^!`!y!{#O#R#U#]#f#h#i#m#n#o#p#q#r#s#v#w#x#{$S$Y$Z$[$]$^$_$l$p$|%R%X%c%i%k%p%{&c&d&e&m&n&r'Q'S'T'Y'Z'i't'}(W(X(h(m(o)T)W)a)b)h)t)u)w)|*]*a*b*e*h*l*q*v+o+{,O,Q,T,X,`,t,v-P-T-Z-`-f.T.V.W.d.p.s.v.x.y/P/a/v0W0`0jR%V!y#ziObnow!X!Z!^!`#]#f#h#i#m#n#o#p#q#r#s#w#{$Y$Z$[$]$^$_$l$p$|%k&r'T'Y'Z't'}(h)T)W)|*]*a*b*e*h*l*v,Q,t,v-P-T-`-f.V.W.p.s.v.x/P/a/v0W0`Q#V_Q%U!yQ&^#vQ(f%iQ)k&dU)l&e&n,TQ+Q(WQ+R(XQ-s+oR.^,XQ(V%TR+P(U#|eO_bnow!X!Z!^!`#]#f#h#i#m#n#o#p#q#r#s#w#{$Y$Z$[$]$^$_$l$p$|%k&r'T'Y'Z't'}(h)T)W)|*]*a*b*e*h*l*v,Q,t,v-P-T-`-f.V.W.p.s.v.x/P/a/v0W0`T%w#e/bQ&T#iQ'U$]Q,w*aQ.q,vR/n.sX)g&c)h,`.d!{`OW_abw!Z!j#O#U#]#{$Z$[$]$^$_$l%c%g%p&c&j&m'Q'Z(o)h)w*]*e*l*q,O,Q,^,`-T.T.V.W.d.x/aU!wX!V'RU%r#_#d*_S+Z(l)sQ+u)`S-l+],cR-z+wj!uX!V#_#d$}%^(b(l)`)s+]+w,cU%]#P%f.SQ(a%bQ*^'RQ*j'eQ,u*_Q-Q*kQ.{-YR/s.|Q(Q$|Q*}'}R/Q-fR+O'}[)c&c&m)h)w,`.dT+x)a)uR)]&bW+v)`)s+w,cQ.P+zR/^.QS#T_,OR%h#US)m&e&nR.],TR)r&jW)e&c)h,`.dR+y)aR#X_R*x'tR'x$pT,l*U,mQ.k,oR/i.lR/i.m",
     nodeNames: "⚠ LineComment BlockComment Program ModuleDeclaration MarkerAnnotation Identifier ScopedIdentifier . Annotation ) ( AnnotationArgumentList AssignmentExpression FieldAccess IntegerLiteral FloatingPointLiteral BooleanLiteral CharacterLiteral StringLiteral TextBlock null ClassLiteral void PrimitiveType TypeName ScopedTypeName GenericType TypeArguments AnnotatedType Wildcard extends super , ArrayType ] Dimension [ class this ParenthesizedExpression ObjectCreationExpression new ArgumentList } { ClassBody ; FieldDeclaration Modifiers public protected private abstract static final strictfp default synchronized native transient volatile VariableDeclarator Definition AssignOp ArrayInitializer MethodDeclaration TypeParameters TypeParameter TypeBound FormalParameters ReceiverParameter FormalParameter SpreadParameter Throws throws Block ClassDeclaration Superclass SuperInterfaces implements InterfaceTypeList InterfaceDeclaration interface ExtendsInterfaces InterfaceBody ConstantDeclaration EnumDeclaration enum EnumBody EnumConstant EnumBodyDeclarations AnnotationTypeDeclaration AnnotationTypeBody AnnotationTypeElementDeclaration StaticInitializer ConstructorDeclaration ConstructorBody ExplicitConstructorInvocation ArrayAccess MethodInvocation MethodName MethodReference ArrayCreationExpression Dimension AssignOp BinaryExpression CompareOp CompareOp LogicOp BitOp BitOp LogicOp ArithOp ArithOp ArithOp BitOp InstanceofExpression instanceof LambdaExpression InferredParameters TernaryExpression LogicOp : UpdateExpression UpdateOp UnaryExpression LogicOp BitOp CastExpression ElementValueArrayInitializer ElementValuePair open module ModuleBody ModuleDirective requires transitive exports to opens uses provides with PackageDeclaration package ImportDeclaration import Asterisk ExpressionStatement LabeledStatement Label IfStatement if else WhileStatement while ForStatement for ForSpec LocalVariableDeclaration var EnhancedForStatement ForSpec AssertStatement assert SwitchStatement switch SwitchBlock SwitchLabel case DoStatement do BreakStatement break ContinueStatement continue ReturnStatement return SynchronizedStatement ThrowStatement throw TryStatement try CatchClause catch CatchFormalParameter CatchType FinallyClause finally TryWithResourcesStatement ResourceSpecification Resource",
     maxTerm: 274,
     nodeProps: [
       ["group", -26,4,47,76,77,82,87,92,144,146,149,150,152,155,157,160,162,164,166,171,173,175,177,179,180,182,190,"Statement",-25,6,13,14,15,16,17,18,19,20,21,22,39,40,41,99,100,102,103,106,117,119,121,124,126,129,"Expression",-7,23,24,25,26,27,29,34,"Type"],
       ["openedBy", 10,"(",44,"{"],
       ["closedBy", 11,")",45,"}"]
     ],
     propSources: [javaHighlighting],
     skippedNodes: [0,1,2],
     repeatNodeCount: 28,
     tokenData: "#$`_R!_OX%QXY'fYZ)bZ^'f^p%Qpq'fqr*|rs,^st%Qtu4euv5qvw7Rwx8ixy@zyzAhz{BU{|Bz|}Db}!OEO!O!PFi!P!Q! c!Q!R!,X!R![!0P![!]!>a!]!^!?q!^!_!@_!_!`!Ax!`!a!Bl!a!b!DY!b!c!Dx!c!}!Kt!}#O!MQ#O#P%Q#P#Q!Mn#Q#R!N[#R#S4e#S#T%Q#T#o4e#o#p# O#p#q# l#q#r##U#r#s##r#s#y%Q#y#z'f#z$f%Q$f$g'f$g#BY%Q#BY#BZ'f#BZ$IS%Q$IS$I_'f$I_$I|%Q$I|$JO'f$JO$JT%Q$JT$JU'f$JU$KV%Q$KV$KW'f$KW&FU%Q&FU&FV'f&FV;'S%Q;'S;=`&s<%lO%QS%VV&WSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QS%qO&WSS%tVOY&ZYZ%lZr&Zrs&ys;'S&Z;'S;=`'`<%lO&ZS&^VOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QS&vP;=`<%l%QS&|UOY&ZYZ%lZr&Zs;'S&Z;'S;=`'`<%lO&ZS'cP;=`<%l&Z_'mk&WS%wZOX%QXY'fYZ)bZ^'f^p%Qpq'fqr%Qrs%qs#y%Q#y#z'f#z$f%Q$f$g'f$g#BY%Q#BY#BZ'f#BZ$IS%Q$IS$I_'f$I_$I|%Q$I|$JO'f$JO$JT%Q$JT$JU'f$JU$KV%Q$KV$KW'f$KW&FU%Q&FU&FV'f&FV;'S%Q;'S;=`&s<%lO%Q_)iY&WS%wZX^*Xpq*X#y#z*X$f$g*X#BY#BZ*X$IS$I_*X$I|$JO*X$JT$JU*X$KV$KW*X&FU&FV*XZ*^Y%wZX^*Xpq*X#y#z*X$f$g*X#BY#BZ*X$IS$I_*X$I|$JO*X$JT$JU*X$KV$KW*X&FU&FV*XV+TX#sP&WSOY%QYZ%lZr%Qrs%qs!_%Q!_!`+p!`;'S%Q;'S;=`&s<%lO%QU+wV#_Q&WSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QT,aXOY,|YZ%lZr,|rs3Ys#O,|#O#P2d#P;'S,|;'S;=`3S<%lO,|T-PXOY-lYZ%lZr-lrs.^s#O-l#O#P.x#P;'S-l;'S;=`2|<%lO-lT-qX&WSOY-lYZ%lZr-lrs.^s#O-l#O#P.x#P;'S-l;'S;=`2|<%lO-lT.cVcPOY&ZYZ%lZr&Zrs&ys;'S&Z;'S;=`'`<%lO&ZT.}V&WSOY-lYZ/dZr-lrs1]s;'S-l;'S;=`2|<%lO-lT/iW&WSOY0RZr0Rrs0ns#O0R#O#P0s#P;'S0R;'S;=`1V<%lO0RP0UWOY0RZr0Rrs0ns#O0R#O#P0s#P;'S0R;'S;=`1V<%lO0RP0sOcPP0vTOY0RYZ0RZ;'S0R;'S;=`1V<%lO0RP1YP;=`<%l0RT1`XOY,|YZ%lZr,|rs1{s#O,|#O#P2d#P;'S,|;'S;=`3S<%lO,|T2QUcPOY&ZYZ%lZr&Zs;'S&Z;'S;=`'`<%lO&ZT2gVOY-lYZ/dZr-lrs1]s;'S-l;'S;=`2|<%lO-lT3PP;=`<%l-lT3VP;=`<%l,|T3_VcPOY&ZYZ%lZr&Zrs3ts;'S&Z;'S;=`'`<%lO&ZT3yR&USXY4SYZ4`pq4SP4VRXY4SYZ4`pq4SP4eO&VP_4la%}Z&WSOY%QYZ%lZr%Qrs%qst%Qtu4eu!Q%Q!Q![4e![!c%Q!c!}4e!}#R%Q#R#S4e#S#T%Q#T#o4e#o;'S%Q;'S;=`&s<%lO%QU5xX#gQ&WSOY%QYZ%lZr%Qrs%qs!_%Q!_!`6e!`;'S%Q;'S;=`&s<%lO%QU6lV#]Q&WSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QV7YZ&lR&WSOY%QYZ%lZr%Qrs%qsv%Qvw7{w!_%Q!_!`6e!`;'S%Q;'S;=`&s<%lO%QU8SV#aQ&WSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QT8nZ&WSOY9aYZ%lZr9ars:Xsw9awx%Qx#O9a#O#P<a#P;'S9a;'S;=`>t<%lO9aT9fZ&WSOY9aYZ%lZr9ars:Xsw9awx;sx#O9a#O#P<a#P;'S9a;'S;=`>t<%lO9aT:[ZOY:}YZ%lZr:}rs>zsw:}wx?px#O:}#O#P@[#P;'S:};'S;=`@t<%lO:}T;QZOY9aYZ%lZr9ars:Xsw9awx;sx#O9a#O#P<a#P;'S9a;'S;=`>t<%lO9aT;zVbP&WSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QT<fV&WSOY9aYZ<{Zr9ars:Xs;'S9a;'S;=`>t<%lO9aT=QW&WSOY=jZw=jwx>Vx#O=j#O#P>[#P;'S=j;'S;=`>n<%lO=jP=mWOY=jZw=jwx>Vx#O=j#O#P>[#P;'S=j;'S;=`>n<%lO=jP>[ObPP>_TOY=jYZ=jZ;'S=j;'S;=`>n<%lO=jP>qP;=`<%l=jT>wP;=`<%l9aT>}ZOY:}YZ%lZr:}rs=jsw:}wx?px#O:}#O#P@[#P;'S:};'S;=`@t<%lO:}T?uVbPOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QT@_VOY9aYZ<{Zr9ars:Xs;'S9a;'S;=`>t<%lO9aT@wP;=`<%l:}_ARVZZ&WSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QVAoVYR&WSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QVB_X$YP&WS#fQOY%QYZ%lZr%Qrs%qs!_%Q!_!`6e!`;'S%Q;'S;=`&s<%lO%QVCRZ#eR&WSOY%QYZ%lZr%Qrs%qs{%Q{|Ct|!_%Q!_!`6e!`;'S%Q;'S;=`&s<%lO%QVC{V#qR&WSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QVDiVqR&WSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QVEV[#eR&WSOY%QYZ%lZr%Qrs%qs}%Q}!OCt!O!_%Q!_!`6e!`!aE{!a;'S%Q;'S;=`&s<%lO%QVFSV&vR&WSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%Q_FpZWY&WSOY%QYZ%lZr%Qrs%qs!O%Q!O!PGc!P!Q%Q!Q![Hq![;'S%Q;'S;=`&s<%lO%QVGhX&WSOY%QYZ%lZr%Qrs%qs!O%Q!O!PHT!P;'S%Q;'S;=`&s<%lO%QVH[V&oR&WSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QTHxc&WS`POY%QYZ%lZr%Qrs%qs!Q%Q!Q![Hq![!f%Q!f!gJT!g!hJq!h!iJT!i#R%Q#R#SNk#S#W%Q#W#XJT#X#YJq#Y#ZJT#Z;'S%Q;'S;=`&s<%lO%QTJ[V&WS`POY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QTJv]&WSOY%QYZ%lZr%Qrs%qs{%Q{|Ko|}%Q}!OKo!O!Q%Q!Q![La![;'S%Q;'S;=`&s<%lO%QTKtX&WSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![La![;'S%Q;'S;=`&s<%lO%QTLhc&WS`POY%QYZ%lZr%Qrs%qs!Q%Q!Q![La![!f%Q!f!gJT!g!h%Q!h!iJT!i#R%Q#R#SMs#S#W%Q#W#XJT#X#Y%Q#Y#ZJT#Z;'S%Q;'S;=`&s<%lO%QTMxZ&WSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![La![#R%Q#R#SMs#S;'S%Q;'S;=`&s<%lO%QTNpZ&WSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![Hq![#R%Q#R#SNk#S;'S%Q;'S;=`&s<%lO%Q_! j]&WS#fQOY%QYZ%lZr%Qrs%qsz%Qz{!!c{!P%Q!P!Q!)U!Q!_%Q!_!`6e!`;'S%Q;'S;=`&s<%lO%Q_!!hX&WSOY!!cYZ!#TZr!!crs!$psz!!cz{!&O{;'S!!c;'S;=`!'d<%lO!!c_!#YT&WSOz!#iz{!#{{;'S!#i;'S;=`!$j<%lO!#iZ!#lTOz!#iz{!#{{;'S!#i;'S;=`!$j<%lO!#iZ!$OVOz!#iz{!#{{!P!#i!P!Q!$e!Q;'S!#i;'S;=`!$j<%lO!#iZ!$jOQZZ!$mP;=`<%l!#i_!$sXOY!%`YZ!#TZr!%`rs!'jsz!%`z{!(Y{;'S!%`;'S;=`!)O<%lO!%`_!%cXOY!!cYZ!#TZr!!crs!$psz!!cz{!&O{;'S!!c;'S;=`!'d<%lO!!c_!&TZ&WSOY!!cYZ!#TZr!!crs!$psz!!cz{!&O{!P!!c!P!Q!&v!Q;'S!!c;'S;=`!'d<%lO!!c_!&}V&WSQZOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%Q_!'gP;=`<%l!!c_!'mXOY!%`YZ!#TZr!%`rs!#isz!%`z{!(Y{;'S!%`;'S;=`!)O<%lO!%`_!(]ZOY!!cYZ!#TZr!!crs!$psz!!cz{!&O{!P!!c!P!Q!&v!Q;'S!!c;'S;=`!'d<%lO!!c_!)RP;=`<%l!%`_!)]V&WSPZOY!)UYZ%lZr!)Urs!)rs;'S!)U;'S;=`!*x<%lO!)U_!)wVPZOY!*^YZ%lZr!*^rs!+Os;'S!*^;'S;=`!,R<%lO!*^_!*cVPZOY!)UYZ%lZr!)Urs!)rs;'S!)U;'S;=`!*x<%lO!)U_!*{P;=`<%l!)U_!+TVPZOY!*^YZ%lZr!*^rs!+js;'S!*^;'S;=`!,R<%lO!*^Z!+oSPZOY!+jZ;'S!+j;'S;=`!+{<%lO!+jZ!,OP;=`<%l!+j_!,UP;=`<%l!*^T!,`u&WS_POY%QYZ%lZr%Qrs%qs!O%Q!O!P!.s!P!Q%Q!Q![!0P![!d%Q!d!e!3Z!e!f%Q!f!gJT!g!hJq!h!iJT!i!n%Q!n!o!1u!o!q%Q!q!r!5X!r!z%Q!z!{!7P!{#R%Q#R#S!2c#S#U%Q#U#V!3Z#V#W%Q#W#XJT#X#YJq#Y#ZJT#Z#`%Q#`#a!1u#a#c%Q#c#d!5X#d#l%Q#l#m!7P#m;'S%Q;'S;=`&s<%lO%QT!.za&WS`POY%QYZ%lZr%Qrs%qs!Q%Q!Q![Hq![!f%Q!f!gJT!g!hJq!h!iJT!i#W%Q#W#XJT#X#YJq#Y#ZJT#Z;'S%Q;'S;=`&s<%lO%QT!0Wi&WS_POY%QYZ%lZr%Qrs%qs!O%Q!O!P!.s!P!Q%Q!Q![!0P![!f%Q!f!gJT!g!hJq!h!iJT!i!n%Q!n!o!1u!o#R%Q#R#S!2c#S#W%Q#W#XJT#X#YJq#Y#ZJT#Z#`%Q#`#a!1u#a;'S%Q;'S;=`&s<%lO%QT!1|V&WS_POY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QT!2hZ&WSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![!0P![#R%Q#R#S!2c#S;'S%Q;'S;=`&s<%lO%QT!3`Y&WSOY%QYZ%lZr%Qrs%qs!Q%Q!Q!R!4O!R!S!4O!S;'S%Q;'S;=`&s<%lO%QT!4V`&WS_POY%QYZ%lZr%Qrs%qs!Q%Q!Q!R!4O!R!S!4O!S!n%Q!n!o!1u!o#R%Q#R#S!3Z#S#`%Q#`#a!1u#a;'S%Q;'S;=`&s<%lO%QT!5^X&WSOY%QYZ%lZr%Qrs%qs!Q%Q!Q!Y!5y!Y;'S%Q;'S;=`&s<%lO%QT!6Q_&WS_POY%QYZ%lZr%Qrs%qs!Q%Q!Q!Y!5y!Y!n%Q!n!o!1u!o#R%Q#R#S!5X#S#`%Q#`#a!1u#a;'S%Q;'S;=`&s<%lO%QT!7U_&WSOY%QYZ%lZr%Qrs%qs!O%Q!O!P!8T!P!Q%Q!Q![!:c![!c%Q!c!i!:c!i#T%Q#T#Z!:c#Z;'S%Q;'S;=`&s<%lO%QT!8Y]&WSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![!9R![!c%Q!c!i!9R!i#T%Q#T#Z!9R#Z;'S%Q;'S;=`&s<%lO%QT!9Wc&WSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![!9R![!c%Q!c!i!9R!i!r%Q!r!sJq!s#R%Q#R#S!8T#S#T%Q#T#Z!9R#Z#d%Q#d#eJq#e;'S%Q;'S;=`&s<%lO%QT!:ji&WS_POY%QYZ%lZr%Qrs%qs!O%Q!O!P!<X!P!Q%Q!Q![!:c![!c%Q!c!i!:c!i!n%Q!n!o!1u!o!r%Q!r!sJq!s#R%Q#R#S!=c#S#T%Q#T#Z!:c#Z#`%Q#`#a!1u#a#d%Q#d#eJq#e;'S%Q;'S;=`&s<%lO%QT!<^a&WSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![!9R![!c%Q!c!i!9R!i!r%Q!r!sJq!s#T%Q#T#Z!9R#Z#d%Q#d#eJq#e;'S%Q;'S;=`&s<%lO%QT!=h]&WSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![!:c![!c%Q!c!i!:c!i#T%Q#T#Z!:c#Z;'S%Q;'S;=`&s<%lO%QV!>hX#oR&WSOY%QYZ%lZr%Qrs%qs![%Q![!]!?T!];'S%Q;'S;=`&s<%lO%QV!?[V&tR&WSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QV!?xV!PR&WSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%Q_!@fY&]Z&WSOY%QYZ%lZr%Qrs%qs!^%Q!^!_!AU!_!`+p!`;'S%Q;'S;=`&s<%lO%QU!A]X#hQ&WSOY%QYZ%lZr%Qrs%qs!_%Q!_!`6e!`;'S%Q;'S;=`&s<%lO%QV!BPX!bR&WSOY%QYZ%lZr%Qrs%qs!_%Q!_!`+p!`;'S%Q;'S;=`&s<%lO%QV!BsY&[R&WSOY%QYZ%lZr%Qrs%qs!_%Q!_!`+p!`!a!Cc!a;'S%Q;'S;=`&s<%lO%QU!CjY#hQ&WSOY%QYZ%lZr%Qrs%qs!_%Q!_!`6e!`!a!AU!a;'S%Q;'S;=`&s<%lO%Q_!DcV&`X#nQ&WSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%Q_!EPX%{Z&WSOY%QYZ%lZr%Qrs%qs#]%Q#]#^!El#^;'S%Q;'S;=`&s<%lO%QV!EqX&WSOY%QYZ%lZr%Qrs%qs#b%Q#b#c!F^#c;'S%Q;'S;=`&s<%lO%QV!FcX&WSOY%QYZ%lZr%Qrs%qs#h%Q#h#i!GO#i;'S%Q;'S;=`&s<%lO%QV!GTX&WSOY%QYZ%lZr%Qrs%qs#X%Q#X#Y!Gp#Y;'S%Q;'S;=`&s<%lO%QV!GuX&WSOY%QYZ%lZr%Qrs%qs#f%Q#f#g!Hb#g;'S%Q;'S;=`&s<%lO%QV!HgX&WSOY%QYZ%lZr%Qrs%qs#Y%Q#Y#Z!IS#Z;'S%Q;'S;=`&s<%lO%QV!IXX&WSOY%QYZ%lZr%Qrs%qs#T%Q#T#U!It#U;'S%Q;'S;=`&s<%lO%QV!IyX&WSOY%QYZ%lZr%Qrs%qs#V%Q#V#W!Jf#W;'S%Q;'S;=`&s<%lO%QV!JkX&WSOY%QYZ%lZr%Qrs%qs#X%Q#X#Y!KW#Y;'S%Q;'S;=`&s<%lO%QV!K_V&rR&WSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%Q_!K{a&PZ&WSOY%QYZ%lZr%Qrs%qst%Qtu!Ktu!Q%Q!Q![!Kt![!c%Q!c!}!Kt!}#R%Q#R#S!Kt#S#T%Q#T#o!Kt#o;'S%Q;'S;=`&s<%lO%Q_!MXVuZ&WSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QV!MuVsR&WSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QU!NcX#cQ&WSOY%QYZ%lZr%Qrs%qs!_%Q!_!`6e!`;'S%Q;'S;=`&s<%lO%QV# VV}R&WSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%Q_# uZ&|X#cQ&WSOY%QYZ%lZr%Qrs%qs!_%Q!_!`6e!`#p%Q#p#q#!h#q;'S%Q;'S;=`&s<%lO%QU#!oV#dQ&WSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QV##]V|R&WSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QT##yV#tP&WSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%Q",
     tokenizers: [0, 1, 2, 3],
     topRules: {"Program":[0,3]},
     dynamicPrecedences: {"27":1,"230":-1,"241":-1},
     specialized: [{term: 229, get: value => spec_identifier$4[value] || -1}],
     tokenPrec: 7067
   });

   /**
   A language provider based on the [Lezer Java
   parser](https://github.com/lezer-parser/java), extended with
   highlighting and indentation information.
   */
   const javaLanguage = /*@__PURE__*/LRLanguage.define({
       name: "java",
       parser: /*@__PURE__*/parser$a.configure({
           props: [
               /*@__PURE__*/indentNodeProp.add({
                   IfStatement: /*@__PURE__*/continuedIndent({ except: /^\s*({|else\b)/ }),
                   TryStatement: /*@__PURE__*/continuedIndent({ except: /^\s*({|catch|finally)\b/ }),
                   LabeledStatement: flatIndent,
                   SwitchBlock: context => {
                       let after = context.textAfter, closed = /^\s*\}/.test(after), isCase = /^\s*(case|default)\b/.test(after);
                       return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;
                   },
                   Block: /*@__PURE__*/delimitedIndent({ closing: "}" }),
                   BlockComment: () => null,
                   Statement: /*@__PURE__*/continuedIndent({ except: /^{/ })
               }),
               /*@__PURE__*/foldNodeProp.add({
                   ["Block SwitchBlock ClassBody ElementValueArrayInitializer ModuleBody EnumBody " +
                       "ConstructorBody InterfaceBody ArrayInitializer"]: foldInside,
                   BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; }
               })
           ]
       }),
       languageData: {
           commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
           indentOnInput: /^\s*(?:case |default:|\{|\})$/
       }
   });
   /**
   Java language support.
   */
   function java$1() {
       return new LanguageSupport(javaLanguage);
   }

   var index$a = /*#__PURE__*/Object.freeze({
      __proto__: null,
      java: java$1,
      javaLanguage: javaLanguage
   });

   const jsonHighlighting = styleTags({
     String: tags$1.string,
     Number: tags$1.number,
     "True False": tags$1.bool,
     PropertyName: tags$1.propertyName,
     Null: tags$1.null,
     ",": tags$1.separator,
     "[ ]": tags$1.squareBracket,
     "{ }": tags$1.brace
   });

   // This file was generated by lezer-generator. You probably shouldn't edit it.
   const parser$9 = LRParser.deserialize({
     version: 14,
     states: "$bOVQPOOOOQO'#Cb'#CbOnQPO'#CeOvQPO'#CjOOQO'#Cp'#CpQOQPOOOOQO'#Cg'#CgO}QPO'#CfO!SQPO'#CrOOQO,59P,59PO![QPO,59PO!aQPO'#CuOOQO,59U,59UO!iQPO,59UOVQPO,59QOqQPO'#CkO!nQPO,59^OOQO1G.k1G.kOVQPO'#ClO!vQPO,59aOOQO1G.p1G.pOOQO1G.l1G.lOOQO,59V,59VOOQO-E6i-E6iOOQO,59W,59WOOQO-E6j-E6j",
     stateData: "#O~OcOS~OQSORSOSSOTSOWQO]ROePO~OVXOeUO~O[[O~PVOg^O~Oh_OVfX~OVaO~OhbO[iX~O[dO~Oh_OVfa~OhbO[ia~O",
     goto: "!kjPPPPPPkPPkqwPPk{!RPPP!XP!ePP!hXSOR^bQWQRf_TVQ_Q`WRg`QcZRicQTOQZRQe^RhbRYQR]R",
     nodeNames: "⚠ JsonText True False Null Number String } { Object Property PropertyName ] [ Array",
     maxTerm: 25,
     nodeProps: [
       ["openedBy", 7,"{",12,"["],
       ["closedBy", 8,"}",13,"]"]
     ],
     propSources: [jsonHighlighting],
     skippedNodes: [0],
     repeatNodeCount: 2,
     tokenData: "(p~RaXY!WYZ!W]^!Wpq!Wrs!]|}$i}!O$n!Q!R$w!R![&V![!]&h!}#O&m#P#Q&r#Y#Z&w#b#c'f#h#i'}#o#p(f#q#r(k~!]Oc~~!`Upq!]qr!]rs!rs#O!]#O#P!w#P~!]~!wOe~~!zXrs!]!P!Q!]#O#P!]#U#V!]#Y#Z!]#b#c!]#f#g!]#h#i!]#i#j#g~#jR!Q![#s!c!i#s#T#Z#s~#vR!Q![$P!c!i$P#T#Z$P~$SR!Q![$]!c!i$]#T#Z$]~$`R!Q![!]!c!i!]#T#Z!]~$nOh~~$qQ!Q!R$w!R![&V~$|RT~!O!P%V!g!h%k#X#Y%k~%YP!Q![%]~%bRT~!Q![%]!g!h%k#X#Y%k~%nR{|%w}!O%w!Q![%}~%zP!Q![%}~&SPT~!Q![%}~&[ST~!O!P%V!Q![&V!g!h%k#X#Y%k~&mOg~~&rO]~~&wO[~~&zP#T#U&}~'QP#`#a'T~'WP#g#h'Z~'^P#X#Y'a~'fOR~~'iP#i#j'l~'oP#`#a'r~'uP#`#a'x~'}OS~~(QP#f#g(T~(WP#i#j(Z~(^P#X#Y(a~(fOQ~~(kOW~~(pOV~",
     tokenizers: [0],
     topRules: {"JsonText":[0,1]},
     tokenPrec: 0
   });

   /**
   Calls
   [`JSON.parse`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse)
   on the document and, if that throws an error, reports it as a
   single diagnostic.
   */
   const jsonParseLinter = () => (view) => {
       try {
           JSON.parse(view.state.doc.toString());
       }
       catch (e) {
           if (!(e instanceof SyntaxError))
               throw e;
           const pos = getErrorPosition(e, view.state.doc);
           return [{
                   from: pos,
                   message: e.message,
                   severity: 'error',
                   to: pos
               }];
       }
       return [];
   };
   function getErrorPosition(error, doc) {
       let m;
       if (m = error.message.match(/at position (\d+)/))
           return Math.min(+m[1], doc.length);
       if (m = error.message.match(/at line (\d+) column (\d+)/))
           return Math.min(doc.line(+m[1]).from + (+m[2]) - 1, doc.length);
       return 0;
   }

   /**
   A language provider that provides JSON parsing.
   */
   const jsonLanguage = /*@__PURE__*/LRLanguage.define({
       name: "json",
       parser: /*@__PURE__*/parser$9.configure({
           props: [
               /*@__PURE__*/indentNodeProp.add({
                   Object: /*@__PURE__*/continuedIndent({ except: /^\s*\}/ }),
                   Array: /*@__PURE__*/continuedIndent({ except: /^\s*\]/ })
               }),
               /*@__PURE__*/foldNodeProp.add({
                   "Object Array": foldInside
               })
           ]
       }),
       languageData: {
           closeBrackets: { brackets: ["[", "{", '"'] },
           indentOnInput: /^\s*[\}\]]$/
       }
   });
   /**
   JSON language support.
   */
   function json$1() {
       return new LanguageSupport(jsonLanguage);
   }

   var index$9 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      json: json$1,
      jsonLanguage: jsonLanguage,
      jsonParseLinter: jsonParseLinter
   });

   // This file was generated by lezer-generator. You probably shouldn't edit it.
   const descendantOp$1 = 110,
     Unit$1 = 1,
     openArgList = 2;

   const space$2 = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8193, 8194, 8195, 8196, 8197,
       8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288];
   function isAlpha$1(ch) { return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122 || ch >= 161; }
   function isDigit$2(ch) { return ch >= 48 && ch <= 57; }
   const argList = /*@__PURE__*/new ExternalTokenizer((input, stack) => {
       if (input.next == 40 /* Ch.parenL */) {
           let prev = input.peek(-1);
           if (isAlpha$1(prev) || isDigit$2(prev) || prev == 95 /* Ch.underscore */ || prev == 45 /* Ch.dash */)
               input.acceptToken(openArgList, 1);
       }
   });
   const descendant$1 = /*@__PURE__*/new ExternalTokenizer(input => {
       if (space$2.indexOf(input.peek(-1)) > -1) {
           let { next } = input;
           if (isAlpha$1(next) || next == 95 /* Ch.underscore */ || next == 35 /* Ch.hash */ || next == 46 /* Ch.period */ ||
               next == 91 /* Ch.bracketL */ || next == 58 /* Ch.colon */ || next == 45 /* Ch.dash */)
               input.acceptToken(descendantOp$1);
       }
   });
   const unitToken$1 = /*@__PURE__*/new ExternalTokenizer(input => {
       if (space$2.indexOf(input.peek(-1)) < 0) {
           let { next } = input;
           if (next == 37 /* Ch.percent */) {
               input.advance();
               input.acceptToken(Unit$1);
           }
           if (isAlpha$1(next)) {
               do {
                   input.advance();
               } while (isAlpha$1(input.next));
               input.acceptToken(Unit$1);
           }
       }
   });

   const lessHighlighting = /*@__PURE__*/styleTags({
       "import charset namespace keyframes media supports when": tags$1.definitionKeyword,
       "from to selector": tags$1.keyword,
       NamespaceName: tags$1.namespace,
       KeyframeName: tags$1.labelName,
       TagName: tags$1.tagName,
       ClassName: tags$1.className,
       PseudoClassName: /*@__PURE__*/tags$1.constant(tags$1.className),
       IdName: tags$1.labelName,
       "FeatureName PropertyName PropertyVariable": tags$1.propertyName,
       AttributeName: tags$1.attributeName,
       NumberLiteral: tags$1.number,
       KeywordQuery: tags$1.keyword,
       UnaryQueryOp: tags$1.operatorKeyword,
       "CallTag ValueName": tags$1.atom,
       VariableName: tags$1.variableName,
       "AtKeyword Interpolation": /*@__PURE__*/tags$1.special(tags$1.variableName),
       Callee: tags$1.operatorKeyword,
       Unit: tags$1.unit,
       "UniversalSelector NestingSelector": tags$1.definitionOperator,
       MatchOp: tags$1.compareOperator,
       "ChildOp SiblingOp, LogicOp": tags$1.logicOperator,
       BinOp: tags$1.arithmeticOperator,
       Important: tags$1.modifier,
       "Comment LineComment": tags$1.blockComment,
       ColorLiteral: tags$1.color,
       "ParenthesizedContent StringLiteral": tags$1.string,
       Escape: /*@__PURE__*/tags$1.special(tags$1.string),
       ": ...": tags$1.punctuation,
       "PseudoOp #": tags$1.derefOperator,
       "; ,": tags$1.separator,
       "( )": tags$1.paren,
       "[ ]": tags$1.squareBracket,
       "{ }": tags$1.brace
   });

   // This file was generated by lezer-generator. You probably shouldn't edit it.
   const spec_identifier$3 = {__proto__:null,lang:40, "nth-child":40, "nth-last-child":40, "nth-of-type":40, "nth-last-of-type":40, dir:40, "host-context":40, and:244, or:244, not:74, only:74, url:86, "url-prefix":86, domain:86, regexp:86, when:117, selector:142, from:172, to:174};
   const spec_AtKeyword$1 = {__proto__:null,"@import":126, "@plugin":126, "@media":152, "@charset":156, "@namespace":160, "@keyframes":166, "@supports":178};
   const parser$8 = /*@__PURE__*/LRParser.deserialize({
     version: 14,
     states: "@^O!gQWOOO!nQaO'#CeOOQP'#Cd'#CdO$RQWO'#CgO$xQaO'#EaO%cQWO'#CiO%kQWO'#DZO%pQWO'#D^O%uQaO'#DfOOQP'#Es'#EsO'YQWO'#DlO'yQWO'#DyO(QQWO'#D{O(xQWO'#D}O)TQWO'#EQO'bQWO'#EWO)YQ`O'#FTO)]Q`O'#FTO)hQ`O'#FTO)vQWO'#EYOOQO'#Er'#ErOOQO'#FV'#FVOOQO'#Ec'#EcO){QWO'#EqO*WQWO'#EqQOQWOOOOQP'#Ch'#ChOOQP,59R,59RO$RQWO,59RO*bQWO'#EdO+PQWO,58|O+_QWO,59TO%kQWO,59uO%pQWO,59xO*bQWO,59{O*bQWO,59}OOQO'#De'#DeO*bQWO,5:OO,bQpO'#E}O,iQWO'#DkOOQO,58|,58|O(QQWO,58|O,pQWO,5:{OOQO,5:{,5:{OOQT'#Cl'#ClO-UQeO,59TO.cQ[O,59TOOQP'#D]'#D]OOQP,59u,59uOOQO'#D_'#D_O.hQpO,59xOOQO'#EZ'#EZO.pQ`O,5;oOOQO,5;o,5;oO/OQWO,5:WO/VQWO,5:WOOQS'#Dn'#DnO/rQWO'#DsO/yQ!fO'#FRO0eQWO'#DtOOQS'#FS'#FSO+YQWO,5:eO'bQWO'#DrOOQS'#Cu'#CuO(QQWO'#CwO0jQ!hO'#CyO2^Q!fO,5:gO2oQWO'#DWOOQS'#Ex'#ExO(QQWO'#DQOOQO'#EP'#EPO2tQWO,5:iO2yQWO,5:iOOQO'#ES'#ESO3RQWO,5:lO3WQ!fO,5:rO3iQ`O'#EkO.pQ`O,5;oOOQO,5:|,5:|O3zQWO,5:tOOQO,5:},5:}O4XQWO,5;]OOQO-E8a-E8aOOQP1G.m1G.mOOQP'#Ce'#CeO5RQaO,5;OOOQP'#Df'#DfOOQO-E8b-E8bOOQO1G.h1G.hO(QQWO1G.hO5fQWO1G.hO5nQeO1G.oO.cQ[O1G.oOOQP1G/a1G/aO6{QpO1G/dO7fQaO1G/gO8cQaO1G/iO9`QaO1G/jO:]Q!fO'#FOO:yQ!fO'#ExOOQO'#FO'#FOOOQO,5;i,5;iO<^QWO,5;iO<iQWO,5:VO<nQ!fO1G.hOOQO1G0g1G0gO=PQWO'#CnOOQP1G.o1G.oO=WQWO'#CqOOQP1G/d1G/dO(QQWO1G/dO=_Q`O1G1ZOOQO1G1Z1G1ZO=mQWO1G/rO=rQ!fO'#FQO>WQWO1G/rO>]Q!fO'#DnO>qQWO,5:ZO>vQ!fO,5:_OOQO'#DP'#DPO'bQWO,5:]O?XQWO'#DwOOQS,5:b,5:bO?`QWO,5:dO'bQWO'#EiO?gQWO,5;mO*bQWO,5:`OOQO1G0P1G0PO?uQ!fO,5:^O@aQ!fO,59cOOQS,59e,59eO(QQWO,59iOOQS,59n,59nO@rQWO,59pOOQO1G0R1G0RO@yQ#tO,59rOARQ!fO,59lOOQO1G0T1G0TOBrQWO1G0TOBwQWO'#ETOOQO1G0W1G0WOOQO1G0^1G0^OOQO,5;V,5;VOOQO-E8i-E8iOCVQ!fO1G0bOCvQWO1G0`O%kQWO'#E_O$RQWO'#E`OEZQWO'#E^OOQO1G0b1G0bPEkQWO'#EcO<nQ!fO7+$SOOQO7+$S7+$SO(QQWO7+$SOOQP7+$Z7+$ZOOQP7+%O7+%OO(QQWO7+%OOEpQ!fO'#EeOF}QWO,5;jO(QQWO,5;jOOQO,5;j,5;jO+gQpO'#EgOG[QWO1G1TOOQO1G1T1G1TOOQO1G/q1G/qOGgQaO'#EvOGnQWO,59YOGsQWO'#EwOG}QWO,59]OHSQ!fO7+%OOOQO7+&u7+&uOOQO7+%^7+%^O(QQWO'#EhOHeQWO,5;lOHmQWO7+%^O(QQWO1G/uOOQS1G/y1G/yOOQS1G/w1G/wOHrQWO,5:cOHwQ!fO1G0OOOQS1G0O1G0OOIYQ!fO,5;TOOQO-E8g-E8gOItQaO1G/zOOQS1G.}1G.}OOQS1G/T1G/TOI{Q!fO1G/[OOQS1G/[1G/[OJ^QWO1G/^OOQO7+%o7+%oOJcQYO'#CyO+YQWO'#EjOJkQWO,5:oOOQO,5:o,5:oOJyQ!fO'#ElO(QQWO'#ElOL^QWO7+%|OOQO7+%|7+%|OOQO7+%z7+%zOOQO,5:y,5:yOOQO,5:z,5:zOLqQaO,5:xOOQO,5:x,5:xOOQO<<Gn<<GnO<nQ!fO<<GnOMRQ!fO<<HjOOQO-E8c-E8cOMdQWO1G1UOOQO,5;R,5;ROOQO-E8e-E8eOOQO7+&o7+&oOMqQWO,5;bOOQP1G.t1G.tO(QQWO'#EfOMyQWO,5;cOOQT1G.w1G.wOOQP<<Hj<<HjONRQ!fO,5;SOOQO-E8f-E8fO/OQWO<<HxONgQWO7+%aOOQS1G/}1G/}OOQS7+%j7+%jOOQS7+%f7+%fOOQS7+$v7+$vOOQS7+$x7+$xOOQO,5;U,5;UOOQO-E8h-E8hOOQO1G0Z1G0ZONnQ!fO,5;WOOQO-E8j-E8jOOQO<<Ih<<IhOOQO1G0d1G0dOOQOAN=YAN=YOOQPAN>UAN>UO!!RQWO,5;QOOQO-E8d-E8dO!!]QWOAN>dOOQS<<H{<<H{OOQOG24OG24O",
     stateData: "!!n~O#dOSROSSOS~OVXOYXO^TO_TOfaOgbOoaOpWOyVO!OUO!aYO!nZO!p[O!r]O!u^O!{_O#hPO#iRO~O#a#eP~P]O^XX^!}X_XXcXXjXXp!}XyXX!OXX!UXX!ZXX![XX!^XX#PXX#aXX#bXX#iXX#oXX#pXX#p!}X#x!}X!]XX~O#hjO~O^oO_oOcmOyqO!OpO!UrO#bsO#ilO#otO#ptO~OjvO![yO!^wO#P{O!Z#TX#a#TX!]#TX~P$WOd!OO#h|O~O#h!PO~O#h!RO~O#h!TO#p!VO#x!VO^!YX^#wX_!YXc!YXj!YXy!YX!O!YX!U!YX!Z!YX![!YX!^!YX#P!YX#a!YX#b!YX#i!YX#o!YX#p!YX!]!YX~Oj!XOn!WO~Og!^Oj!ZOo!^Op!^Ou!`O!i!]O#h!YO~O!^#uP~P'bOf!fOg!fOh!fOj!bOl!fOn!fOo!fOp!fOu!gO{!eO#h!aO#m!cO~On!iO{!eO#h!hO~O#h!kO~Op!nO#p!VO#x!VO^#wX~OjvO#p!VO#x!VO^#wX~O^!qO~O!Z!rO#a#eX!]#eX~O#a#eX!]#eX~P]OVXOYXO^TO_TOp!xOyVO!OUO#h!vO#iRO~OcmOjvO![!{O!^wO~Od#OO#h|O~Of!fOg#VOh!fOj!bOl!fOn!fOo!fOp!fOu!gO{!eO#h!aO#m!cO#s#WO~Oa#XO~P+gO!]#eP~P]O![!{O!^wO#P#]O!Z#Ta#a#Ta!]#Ta~OQ#^O^]a_]ac]aj]ay]a!O]a!U]a!Z]a![]a!^]a#P]a#a]a#b]a#i]a#o]a#p]a!]]aa]a~OQ#`O~Ow#aO!S#bO~Op!nO#p#dO#x#dO^#wa~O!Z#uP~P'bOa#tP~P(QOg!^Oj!ZOo!^Op!^Ou!`O!i!]O~O#h#hO~P/^OQ#mOc#pOr#lOy#oO#n#kO!^#uX!Z#uXa#uX~Oj#rO~OP#vOQmXrmXymX!ZmX#nmX^mXamXcmXfmXgmXhmXjmXlmXnmXomXpmXumX{mX#hmX#mmX!^mX#PmX#amXwmX!]mX~OQ#`Or#wOy#yO!Z#zO#n#kO~Oj#{O~O!Z#}O~On$OO{!eO~O!^$PO~OQ#mOr#lOy#oO!^wO#n#kO~O#h!TO^#_Xp#_X#p#_X#x#_X~O!O$WO!^wO#i$XO~P(QO!Z!rO#a#ea!]#ea~O^oO_oOyqO!OpO!UrO#bsO#ilO#otO#ptO~Oc#Waj#Wa![#Wa!^#Waa#Wa~P4dO![$_O!^wO~OQ#^O^]i_]ic]ij]iy]i!O]i!U]i!Z]i![]i!^]i#P]i#a]i#b]i#i]i#o]i#p]i!]]ia]i~Ow$aO!S$bO~O^oO_oOyqO!OpO#ilO~Oc!Tij!Ti!U!Ti!Z!Ti![!Ti!^!Ti#P!Ti#a!Ti#b!Ti#o!Ti#p!Ti!]!Tia!Ti~P7TOc!Vij!Vi!U!Vi!Z!Vi![!Vi!^!Vi#P!Vi#a!Vi#b!Vi#o!Vi#p!Vi!]!Via!Vi~P7TOc!Wij!Wi!U!Wi!Z!Wi![!Wi!^!Wi#P!Wi#a!Wi#b!Wi#o!Wi#p!Wi!]!Wia!Wi~P7TOQ#`O^$eOr#wOy#yO#n#kOa#rXc#rX!Z#rX~P(QO#s$fOQ#lX^#lXa#lXc#lXf#lXg#lXh#lXj#lXl#lXn#lXo#lXp#lXr#lXu#lXy#lX{#lX!Z#lX#h#lX#m#lX#n#lX~Oa$iOc$gO!Z$gO~O!]$jO~OQ#`Or#wOy#yO!^wO#n#kO~Oa#jP~P*bOa#kP~P(QOp!nO#p$pO#x$pO^#wi~O!Z$qO~OQ#`Oc$rOr#wOy#yO#n#kOa#tX~Oa$tO~OQ!bX^!dXa!bXr!bXy!bX#n!bX~O^$uO~OQ#mOa$vOr#lOy#oO#n#kO~Oa#uP~P'bOw$zO~P(QOc#pO!^#ua!Z#uaa#ua~OQ#mOr#lOy#oO#n#kOc!fa!^!fa!Z!faa!fa~OQ#`Oa%OOr#wOy#yO#n#kO~Ow%RO~P(QOn%SO|%SO~OQ#`Or#wOy#yO#n#kO!Zta^taatactaftagtahtajtaltantaotaptauta{ta#hta#mta!^ta#Pta#atawta!]ta~O!Z%TO~O!]%XO!x%VO!y%VO#m%UO~OQ#`Oc%ZOr#wOy#yO#P%]O#n#kO!Z#Oi#a#Oi!]#Oi~P(QO!Z%^OV!|iY!|i^!|i_!|if!|ig!|io!|ip!|iy!|i!O!|i!a!|i!n!|i!p!|i!r!|i!u!|i!{!|i#a!|i#h!|i#i!|i!]!|i~OjvO!Z#QX#a#QX!]#QX~P*bO!Z!rO~OQ#`Or#wOy#yO#n#kOa#XXc#XXf#XXg#XXh#XXj#XXl#XXn#XXo#XXp#XXu#XX{#XX!Z#XX#h#XX#m#XX~Oa#rac#ra!Z#ra~P(QOa%jOc$gO!Z$gO~Oa#jX~P$WOa%lO~Oc%mOa#kX~P(QOa%oO~OQ#`Or#wOw%pOy#yO#n#kO~Oc$rOa#ta~On%sO~Oa%uO~OQ#`Or#wOw%vOy#yO#n#kO~OQ#mOr#lOy#oO#n#kOc#]a!^#]a!Z#]aa#]a~Oa%wO~P4dOQ#`Or#wOw%xOy#yO#n#kO~Oa%yO~OP#vO!^mX~O!]%|O!x%VO!y%VO#m%UO~OQ#`Or#wOy#yO#n#kOc#`Xf#`Xg#`Xh#`Xj#`Xl#`Xn#`Xo#`Xp#`Xu#`X{#`X!Z#`X#P#`X#a#`X#h#`X#m#`X!]#`X~Oc%ZO#P&PO!Z#Oq#a#Oq!]#Oq~P(QOjvO!Z#Qa#a#Qa!]#Qa~P4dOQ#`Or#wOw&SOy#yO#n#kO~Oa#ric#ri!Z#ri~P(QOcmOa#ja~Oc%mOa#ka~OQ#`Or#wOy#yO#n#kOa#[ac#[a~Oa&WO~P(QOQ#`Or#wOy#yO#n#kOc#`af#`ag#`ah#`aj#`al#`an#`ao#`ap#`au#`a{#`a!Z#`a#P#`a#a#`a#h#`a#m#`a!]#`a~Oa#Yac#Ya~P(QO!Z&XO~Of#dpg#m|#iRSRr~",
     goto: "0^#zPPPPPP#{P$Q$^P$Q$j$QPP$sP$yPP%PPPP%jP%jP&ZPPP%jP'O%jP%jP%jP'jPP$QP(a$Q(jP$QP$Q$Q(p$QPPPP(w#{P)f)f)q)f)f)f)fP)f)t)f#{P#{P#{P){#{P*O*RPP#{P#{*U*aP*f*i*i*a*a*l*s*}+e+k+q+w+},T,_PPPP,e,k,pPP-[-_-bPPPP.u/UP/[/_/k0QP0VVdOhweXOhmrsuw#^#r$YeQOhmrsuw#^#r$YQkRQ!ulR%`$XQ}TR!}oQ#_}R$`!}Q#_!Or#x!d#U#[#f#u#|$U$]$c$o$y%Q%Y%d%e%q%}R$`#O!]!f[vy!X!b!g!q!{#U#`#b#o#w#y$U$_$b$d$e$g$m$r$u%Z%[%g%m%t&T![!f[vy!X!b!g!q!{#U#`#b#o#w#y$U$_$b$d$e$g$m$r$u%Z%[%g%m%t&TT%V$P%WY#l![!m#j#t${s#w!d#U#[#f#u#|$U$]$c$o$y%Q%Y%d%e%q%}![!f[vy!X!b!g!q!{#U#`#b#o#w#y$U$_$b$d$e$g$m$r$u%Z%[%g%m%t&TQ!i]R$O!jQ!QUQ#PpR%_$WQ!SVR#QqZuS!w$k$}%aQxSS!znzQ#s!_Q$R!mQ$V!qS$^!|#[Q%c$]Q%z%VR&R%dc!^Z_!W!Z!`#l#m#p%sR#i!ZZ#n![!m#j#t${R!j]R!l^R$Q!lU`OhwQ!UWR$S!nVeOhwR$Z!qR$Y!qShOwR!thQnSS!yn%kR%k$kQ$d#UQ$m#`Y%f$d$m%g%t&TQ%g$eQ%t$uR&T%mQ%n$mR&U%nQ$h#YR%i$hQ$s#fR%r$sQ#q![R$|#qQ%W$PR%{%WQ!o`Q#c!UT$T!o#cQ%[$UR&O%[QiOR#ZwVfOhwUSOhwQ!wmQ#RrQ#SsQ#TuQ$k#^Q$}#rR%a$YR$l#^R$n#`Q!d[S#Uv$gQ#[yQ#f!XQ#u!bQ#|!gQ$U!qQ$]!{d$c#U#`$d$e$m$u%g%m%t&TQ$o#bQ$y#oQ%P#wQ%Q#yS%Y$U%[Q%d$_Q%e$bQ%q$rR%}%ZQzSQ!pbQ!|nQ%b$YR&Q%aQ#YvR%h$gR#g!XQ!_ZQ#e!WQ$x#mR&V%sW![Z!W#m%sQ!m_Q#j!ZQ#t!`Q$w#lR${#pVcOhwSgOwR!sh",
     nodeNames: "⚠ Unit ( Comment LineComment StyleSheet RuleSet UniversalSelector TagSelector TagName NestingSelector ClassSelector ClassName PseudoClassSelector : :: PseudoClassName ) ArgList , PseudoClassName ArgList VariableName AtKeyword PropertyVariable ValueName ( ParenthesizedValue ColorLiteral NumberLiteral StringLiteral Escape Interpolation BinaryExpression BinOp LogicOp UnaryExpression UnaryQueryOp CallExpression ] SubscriptExpression [ CallLiteral CallTag ParenthesizedContent IdSelector # IdName AttributeSelector AttributeName MatchOp ChildSelector ChildOp DescendantSelector SiblingSelector SiblingOp InterpolatedSelector ; when } { Block ImportStatement import KeywordQuery FeatureQuery FeatureName BinaryQuery UnaryQuery ParenthesizedQuery SelectorQuery selector CallQuery ArgList SubscriptQuery MediaStatement media CharsetStatement charset NamespaceStatement namespace NamespaceName KeyframesStatement keyframes KeyframeName KeyframeList from to SupportsStatement supports DetachedRuleSet PropertyName Declaration Important Inclusion IdSelector ClassSelector Inclusion CallExpression",
     maxTerm: 133,
     nodeProps: [
       ["openedBy", 17,"(",59,"{"],
       ["closedBy", 26,")",60,"}"]
     ],
     propSources: [lessHighlighting],
     skippedNodes: [0,3,4],
     repeatNodeCount: 10,
     tokenData: "!2q~R!ZOX$tX^%l^p$tpq%lqr)Ors-xst/ltu6Zuv$tvw8^wx:Uxy;syz<Uz{<Z{|<t|}BQ}!OBc!O!PDo!P!QFY!Q![Jw![!]Kr!]!^Ln!^!_MP!_!`M{!`!aNl!a!b$t!b!c! m!c!}!&R!}#O!'y#O#P$t#P#Q!([#Q#R!(m#R#T$t#T#o!&R#o#p!)S#p#q!(m#q#r!)e#r#s!)v#s#y$t#y#z%l#z$f$t$f$g%l$g#BY$t#BY#BZ%l#BZ$IS$t$IS$I_%l$I_$I|$t$I|$JO%l$JO$JT$t$JT$JU%l$JU$KV$t$KV$KW%l$KW&FU$t&FU&FV%l&FV;'S$t;'S;=`!2k<%lO$t`$wSOy%Tz;'S%T;'S;=`%f<%lO%T`%YS|`Oy%Tz;'S%T;'S;=`%f<%lO%T`%iP;=`<%l%T~%qh#d~OX%TX^']^p%Tpq']qy%Tz#y%T#y#z']#z$f%T$f$g']$g#BY%T#BY#BZ']#BZ$IS%T$IS$I_']$I_$I|%T$I|$JO']$JO$JT%T$JT$JU']$JU$KV%T$KV$KW']$KW&FU%T&FU&FV']&FV;'S%T;'S;=`%f<%lO%T~'dh#d~|`OX%TX^']^p%Tpq']qy%Tz#y%T#y#z']#z$f%T$f$g']$g#BY%T#BY#BZ']#BZ$IS%T$IS$I_']$I_$I|%T$I|$JO']$JO$JT%T$JT$JU']$JU$KV%T$KV$KW']$KW&FU%T&FU&FV']&FV;'S%T;'S;=`%f<%lO%Tk)RUOy%Tz#]%T#]#^)e#^;'S%T;'S;=`%f<%lO%Tk)jU|`Oy%Tz#a%T#a#b)|#b;'S%T;'S;=`%f<%lO%Tk*RU|`Oy%Tz#d%T#d#e*e#e;'S%T;'S;=`%f<%lO%Tk*jU|`Oy%Tz#c%T#c#d*|#d;'S%T;'S;=`%f<%lO%Tk+RU|`Oy%Tz#f%T#f#g+e#g;'S%T;'S;=`%f<%lO%Tk+jU|`Oy%Tz#h%T#h#i+|#i;'S%T;'S;=`%f<%lO%Tk,RU|`Oy%Tz#T%T#T#U,e#U;'S%T;'S;=`%f<%lO%Tk,jU|`Oy%Tz#b%T#b#c,|#c;'S%T;'S;=`%f<%lO%Tk-RU|`Oy%Tz#h%T#h#i-e#i;'S%T;'S;=`%f<%lO%Tk-lS#PZ|`Oy%Tz;'S%T;'S;=`%f<%lO%T~-{WOY-xZr-xrs.es#O-x#O#P.j#P;'S-x;'S;=`/f<%lO-x~.jOn~~.mRO;'S-x;'S;=`.v;=`O-x~.yXOY-xZr-xrs.es#O-x#O#P.j#P;'S-x;'S;=`/f;=`<%l-x<%lO-x~/iP;=`<%l-xo/qY!OROy%Tz!Q%T!Q![0a![!c%T!c!i0a!i#T%T#T#Z0a#Z;'S%T;'S;=`%f<%lO%Tm0fY|`Oy%Tz!Q%T!Q![1U![!c%T!c!i1U!i#T%T#T#Z1U#Z;'S%T;'S;=`%f<%lO%Tm1ZY|`Oy%Tz!Q%T!Q![1y![!c%T!c!i1y!i#T%T#T#Z1y#Z;'S%T;'S;=`%f<%lO%Tm2QYl]|`Oy%Tz!Q%T!Q![2p![!c%T!c!i2p!i#T%T#T#Z2p#Z;'S%T;'S;=`%f<%lO%Tm2wYl]|`Oy%Tz!Q%T!Q![3g![!c%T!c!i3g!i#T%T#T#Z3g#Z;'S%T;'S;=`%f<%lO%Tm3lY|`Oy%Tz!Q%T!Q![4[![!c%T!c!i4[!i#T%T#T#Z4[#Z;'S%T;'S;=`%f<%lO%Tm4cYl]|`Oy%Tz!Q%T!Q![5R![!c%T!c!i5R!i#T%T#T#Z5R#Z;'S%T;'S;=`%f<%lO%Tm5WY|`Oy%Tz!Q%T!Q![5v![!c%T!c!i5v!i#T%T#T#Z5v#Z;'S%T;'S;=`%f<%lO%Tm5}Sl]|`Oy%Tz;'S%T;'S;=`%f<%lO%Tm6^YOy%Tz!_%T!_!`6|!`!c%T!c!}7a!}#T%T#T#o7a#o;'S%T;'S;=`%f<%lO%Td7TS!SS|`Oy%Tz;'S%T;'S;=`%f<%lO%Tm7h[h]|`Oy%Tz}%T}!O7a!O!Q%T!Q![7a![!c%T!c!}7a!}#T%T#T#o7a#o;'S%T;'S;=`%f<%lO%Ta8c[YPOy%Tz}%T}!O9X!O!Q%T!Q![9X![!c%T!c!}9X!}#T%T#T#o9X#o;'S%T;'S;=`%f<%lO%Ta9`[YP|`Oy%Tz}%T}!O9X!O!Q%T!Q![9X![!c%T!c!}9X!}#T%T#T#o9X#o;'S%T;'S;=`%f<%lO%T~:XWOY:UZw:Uwx.ex#O:U#O#P:q#P;'S:U;'S;=`;m<%lO:U~:tRO;'S:U;'S;=`:};=`O:U~;QXOY:UZw:Uwx.ex#O:U#O#P:q#P;'S:U;'S;=`;m;=`<%l:U<%lO:U~;pP;=`<%l:Uo;xSj_Oy%Tz;'S%T;'S;=`%f<%lO%T~<ZOa~m<bUVPrWOy%Tz!_%T!_!`6|!`;'S%T;'S;=`%f<%lO%To<{Y#pQrWOy%Tz!O%T!O!P=k!P!Q%T!Q![@p![#R%T#R#SAm#S;'S%T;'S;=`%f<%lO%Tm=pU|`Oy%Tz!Q%T!Q![>S![;'S%T;'S;=`%f<%lO%Tm>ZY#m]|`Oy%Tz!Q%T!Q![>S![!g%T!g!h>y!h#X%T#X#Y>y#Y;'S%T;'S;=`%f<%lO%Tm?OY|`Oy%Tz{%T{|?n|}%T}!O?n!O!Q%T!Q![@V![;'S%T;'S;=`%f<%lO%Tm?sU|`Oy%Tz!Q%T!Q![@V![;'S%T;'S;=`%f<%lO%Tm@^U#m]|`Oy%Tz!Q%T!Q![@V![;'S%T;'S;=`%f<%lO%Tm@w[#m]|`Oy%Tz!O%T!O!P>S!P!Q%T!Q![@p![!g%T!g!h>y!h#X%T#X#Y>y#Y;'S%T;'S;=`%f<%lO%TbAtS#xQ|`Oy%Tz;'S%T;'S;=`%f<%lO%TkBVScZOy%Tz;'S%T;'S;=`%f<%lO%TmBhXrWOy%Tz}%T}!OCT!O!P=k!P!Q%T!Q![@p![;'S%T;'S;=`%f<%lO%TmCYW|`Oy%Tz!c%T!c!}Cr!}#T%T#T#oCr#o;'S%T;'S;=`%f<%lO%TmCy[f]|`Oy%Tz}%T}!OCr!O!Q%T!Q![Cr![!c%T!c!}Cr!}#T%T#T#oCr#o;'S%T;'S;=`%f<%lO%ToDtW#iROy%Tz!O%T!O!PE^!P!Q%T!Q![>S![;'S%T;'S;=`%f<%lO%TlEcU|`Oy%Tz!O%T!O!PEu!P;'S%T;'S;=`%f<%lO%TlE|S#s[|`Oy%Tz;'S%T;'S;=`%f<%lO%T~F_VrWOy%Tz{Ft{!P%T!P!QIl!Q;'S%T;'S;=`%f<%lO%T~FyU|`OyFtyzG]z{Hd{;'SFt;'S;=`If<%lOFt~G`TOzG]z{Go{;'SG];'S;=`H^<%lOG]~GrVOzG]z{Go{!PG]!P!QHX!Q;'SG];'S;=`H^<%lOG]~H^OR~~HaP;=`<%lG]~HiW|`OyFtyzG]z{Hd{!PFt!P!QIR!Q;'SFt;'S;=`If<%lOFt~IYS|`R~Oy%Tz;'S%T;'S;=`%f<%lO%T~IiP;=`<%lFt~IsV|`S~OYIlYZ%TZyIlyzJYz;'SIl;'S;=`Jq<%lOIl~J_SS~OYJYZ;'SJY;'S;=`Jk<%lOJY~JnP;=`<%lJY~JtP;=`<%lIlmJ|[#m]Oy%Tz!O%T!O!P>S!P!Q%T!Q![@p![!g%T!g!h>y!h#X%T#X#Y>y#Y;'S%T;'S;=`%f<%lO%TkKwU^ZOy%Tz![%T![!]LZ!];'S%T;'S;=`%f<%lO%TcLbS_R|`Oy%Tz;'S%T;'S;=`%f<%lO%TkLsS!ZZOy%Tz;'S%T;'S;=`%f<%lO%ThMUUrWOy%Tz!_%T!_!`Mh!`;'S%T;'S;=`%f<%lO%ThMoS|`rWOy%Tz;'S%T;'S;=`%f<%lO%TlNSW!SSrWOy%Tz!^%T!^!_Mh!_!`%T!`!aMh!a;'S%T;'S;=`%f<%lO%TjNsV!UQrWOy%Tz!_%T!_!`Mh!`!a! Y!a;'S%T;'S;=`%f<%lO%Tb! aS!UQ|`Oy%Tz;'S%T;'S;=`%f<%lO%To! rYg]Oy%Tz!b%T!b!c!!b!c!}!#R!}#T%T#T#o!#R#o#p!$O#p;'S%T;'S;=`%f<%lO%Tm!!iWg]|`Oy%Tz!c%T!c!}!#R!}#T%T#T#o!#R#o;'S%T;'S;=`%f<%lO%Tm!#Y[g]|`Oy%Tz}%T}!O!#R!O!Q%T!Q![!#R![!c%T!c!}!#R!}#T%T#T#o!#R#o;'S%T;'S;=`%f<%lO%To!$TW|`Oy%Tz!c%T!c!}!$m!}#T%T#T#o!$m#o;'S%T;'S;=`%f<%lO%To!$r^|`Oy%Tz}%T}!O!$m!O!Q%T!Q![!$m![!c%T!c!}!$m!}#T%T#T#o!$m#o#q%T#q#r!%n#r;'S%T;'S;=`%f<%lO%To!%uSp_|`Oy%Tz;'S%T;'S;=`%f<%lO%To!&W[#h_Oy%Tz}%T}!O!&|!O!Q%T!Q![!&|![!c%T!c!}!&|!}#T%T#T#o!&|#o;'S%T;'S;=`%f<%lO%To!'T[#h_|`Oy%Tz}%T}!O!&|!O!Q%T!Q![!&|![!c%T!c!}!&|!}#T%T#T#o!&|#o;'S%T;'S;=`%f<%lO%Tk!(OSyZOy%Tz;'S%T;'S;=`%f<%lO%Tm!(aSw]Oy%Tz;'S%T;'S;=`%f<%lO%Td!(pUOy%Tz!_%T!_!`6|!`;'S%T;'S;=`%f<%lO%Tk!)XS!^ZOy%Tz;'S%T;'S;=`%f<%lO%Tk!)jS!]ZOy%Tz;'S%T;'S;=`%f<%lO%To!){Y#oQOr%Trs!*ksw%Twx!.wxy%Tz!_%T!_!`6|!`;'S%T;'S;=`%f<%lO%Tm!*pZ|`OY!*kYZ%TZr!*krs!+csy!*kyz!+vz#O!*k#O#P!-j#P;'S!*k;'S;=`!.q<%lO!*km!+jSo]|`Oy%Tz;'S%T;'S;=`%f<%lO%T]!+yWOY!+vZr!+vrs!,cs#O!+v#O#P!,h#P;'S!+v;'S;=`!-d<%lO!+v]!,hOo]]!,kRO;'S!+v;'S;=`!,t;=`O!+v]!,wXOY!+vZr!+vrs!,cs#O!+v#O#P!,h#P;'S!+v;'S;=`!-d;=`<%l!+v<%lO!+v]!-gP;=`<%l!+vm!-oU|`Oy!*kyz!+vz;'S!*k;'S;=`!.R;=`<%l!+v<%lO!*km!.UXOY!+vZr!+vrs!,cs#O!+v#O#P!,h#P;'S!+v;'S;=`!-d;=`<%l!*k<%lO!+vm!.tP;=`<%l!*km!.|Z|`OY!.wYZ%TZw!.wwx!+cxy!.wyz!/oz#O!.w#O#P!1^#P;'S!.w;'S;=`!2e<%lO!.w]!/rWOY!/oZw!/owx!,cx#O!/o#O#P!0[#P;'S!/o;'S;=`!1W<%lO!/o]!0_RO;'S!/o;'S;=`!0h;=`O!/o]!0kXOY!/oZw!/owx!,cx#O!/o#O#P!0[#P;'S!/o;'S;=`!1W;=`<%l!/o<%lO!/o]!1ZP;=`<%l!/om!1cU|`Oy!.wyz!/oz;'S!.w;'S;=`!1u;=`<%l!/o<%lO!.wm!1xXOY!/oZw!/owx!,cx#O!/o#O#P!0[#P;'S!/o;'S;=`!1W;=`<%l!.w<%lO!/om!2hP;=`<%l!.w`!2nP;=`<%l$t",
     tokenizers: [descendant$1, unitToken$1, argList, 0, 1, 2, 3, 4],
     topRules: {"StyleSheet":[0,5]},
     specialized: [{term: 116, get: value => spec_identifier$3[value] || -1},{term: 23, get: value => spec_AtKeyword$1[value] || -1}],
     tokenPrec: 2180
   });

   /**
   A language provider for Less style sheets.
   */
   const lessLanguage = /*@__PURE__*/LRLanguage.define({
       name: "less",
       parser: /*@__PURE__*/parser$8.configure({
           props: [
               /*@__PURE__*/indentNodeProp.add({
                   Declaration: /*@__PURE__*/continuedIndent()
               }),
               /*@__PURE__*/foldNodeProp.add({
                   Block: foldInside
               })
           ]
       }),
       languageData: {
           commentTokens: { block: { open: "/*", close: "*/" }, line: "//" },
           indentOnInput: /^\s*\}$/,
           wordChars: "@-"
       }
   });
   /**
   Property, variable, @-variable, and value keyword completion
   source.
   */
   const lessCompletionSource = /*@__PURE__*/defineCSSCompletionSource(node => node.name == "VariableName" || node.name == "AtKeyword");
   /**
   Language support for Less.
   */
   function less$1() {
       return new LanguageSupport(lessLanguage, lessLanguage.data.of({ autocomplete: lessCompletionSource }));
   }

   var index$8 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      less: less$1,
      lessCompletionSource: lessCompletionSource,
      lessLanguage: lessLanguage
   });

   // This file was generated by lezer-generator. You probably shouldn't edit it.
   const castOpen = 1,
     HeredocString = 2,
     interpolatedStringContent = 263,
     EscapeSequence = 3,
     afterInterpolation = 264,
     automaticSemicolon = 265,
     eof$2 = 266,
     abstract = 4,
     and = 5,
     array = 6,
     as = 7,
     Boolean$1 = 8,
     _break = 9,
     _case = 10,
     _catch = 11,
     clone = 12,
     _const = 13,
     _continue = 14,
     _default = 15,
     declare = 16,
     _do = 17,
     echo = 18,
     _else = 19,
     elseif = 20,
     enddeclare = 21,
     endfor = 22,
     endforeach = 23,
     endif = 24,
     endswitch = 25,
     endwhile = 26,
     _enum = 27,
     _extends = 28,
     final = 29,
     _finally = 30,
     fn = 31,
     _for = 32,
     foreach = 33,
     from$1 = 34,
     _function = 35,
     global = 36,
     goto = 37,
     _if = 38,
     _implements = 39,
     include = 40,
     include_once = 41,
     _instanceof = 42,
     insteadof = 43,
     _interface = 44,
     list = 45,
     match = 46,
     namespace = 47,
     _new = 48,
     _null = 49,
     or = 50,
     print = 51,
     _require = 52,
     require_once = 53,
     _return = 54,
     _switch = 55,
     _throw = 56,
     trait = 57,
     _try = 58,
     unset = 59,
     use = 60,
     _var = 61,
     Visibility = 62,
     _while = 63,
     xor = 64,
     _yield = 65;

   const keywordMap = {
     abstract,
     and,
     array,
     as,
     true: Boolean$1,
     false: Boolean$1,
     break: _break,
     case: _case,
     catch: _catch,
     clone,
     const: _const,
     continue: _continue,
     declare,
     default: _default,
     do: _do,
     echo,
     else: _else,
     elseif,
     enddeclare,
     endfor,
     endforeach,
     endif,
     endswitch,
     endwhile,
     enum: _enum,
     extends: _extends,
     final,
     finally: _finally,
     fn,
     for: _for,
     foreach,
     from: from$1,
     function: _function,
     global,
     goto,
     if: _if,
     implements: _implements,
     include,
     include_once,
     instanceof: _instanceof,
     insteadof,
     interface: _interface,
     list,
     match,
     namespace,
     new: _new,
     null: _null,
     or,
     print,
     require: _require,
     require_once,
     return: _return,
     switch: _switch,
     throw: _throw,
     trait,
     try: _try,
     unset,
     use,
     var: _var,
     public: Visibility,
     private: Visibility,
     protected: Visibility,
     while: _while,
     xor,
     yield: _yield,
     __proto__: null,
   };

   function keywords$G(name) {
     let found = keywordMap[name.toLowerCase()];
     return found == null ? -1 : found
   }

   function isSpace$1(ch) {
     return ch == 9 || ch == 10 || ch == 13 || ch == 32
   }

   function isASCIILetter(ch) {
     return ch >= 97 && ch <= 122 || ch >= 65 && ch <= 90
   }

   function isIdentifierStart(ch) {
     return ch == 95 || ch >= 0x80 || isASCIILetter(ch)
   }

   function isHex(ch) {
     return ch >= 48 && ch <= 55 || ch >= 97 && ch <= 102 || ch >= 65 && ch <= 70 /* 0-9, a-f, A-F */
   }

   const castTypes = {
     int: true, integer: true, bool: true, boolean: true,
     float: true, double: true, real: true, string: true,
     array: true, object: true, unset: true,
     __proto__: null
   };

   const expression$1 = new ExternalTokenizer(input => {
     if (input.next == 40 /* '(' */) {
       input.advance();
       let peek = 0;
       while (isSpace$1(input.peek(peek))) peek++;
       let name = "", next;
       while (isASCIILetter(next = input.peek(peek))) {
         name += String.fromCharCode(next);
         peek++;
       }
       while (isSpace$1(input.peek(peek))) peek++;
       if (input.peek(peek) == 41 /* ')' */ && castTypes[name.toLowerCase()])
         input.acceptToken(castOpen);
     } else if (input.next == 60 /* '<' */ && input.peek(1) == 60 && input.peek(2) == 60) {
       for (let i = 0; i < 3; i++) input.advance();
       while (input.next == 32 /* ' ' */ || input.next == 9 /* '\t' */) input.advance();
       let quoted = input.next == 39; /* "'" */
       if (quoted) input.advance();
       if (!isIdentifierStart(input.next)) return
       let tag = String.fromCharCode(input.next);
       for (;;) {
         input.advance();
         if (!isIdentifierStart(input.next) && !(input.next >= 48 && input.next <= 55) /* 0-9 */) break
         tag += String.fromCharCode(input.next);
       }
       if (quoted) {
         if (input.next != 39) return
         input.advance();
       }
       if (input.next != 10 /* '\n' */ && input.next != 13 /* '\r' */) return
       for (;;) {
         let lineStart = input.next == 10 || input.next == 13;
         input.advance();
         if (input.next < 0) return
         if (lineStart) {
           while (input.next == 32 /* ' ' */ || input.next == 9 /* '\t' */) input.advance();
           let match = true;
           for (let i = 0; i < tag.length; i++) {
             if (input.next != tag.charCodeAt(i)) { match = false; break }
             input.advance();
           }
           if (match) return input.acceptToken(HeredocString)
         }
       }
     }
   });

   const eofToken = new ExternalTokenizer(input => {
     if (input.next < 0) input.acceptToken(eof$2);
   });

   const semicolon = new ExternalTokenizer((input, stack) => {
     if (input.next == 63 /* '?' */ && stack.canShift(automaticSemicolon) && input.peek(1) == 62 /* '>' */)
       input.acceptToken(automaticSemicolon);
   });

   function scanEscape(input) {
     let after = input.peek(1);
     if (after == 110 /* 'n' */ || after == 114 /* 'r' */ || after == 116 /* 't' */ ||
         after == 118 /* 'v' */ || after == 101 /* 'e' */ || after == 102 /* 'f' */ ||
         after == 92 /* '\\' */ || after == 36 /* '"' */ || after == 34 /* '$' */ ||
         after == 123 /* '{' */)
       return 2

     if (after >= 48 && after <= 55 /* '0'-'7' */) {
       let size = 2, next;
       while (size < 5 && (next = input.peek(size)) >= 48 && next <= 55) size++;
       return size
     }

     if (after == 120 /* 'x' */ && isHex(input.peek(2))) {
       return isHex(input.peek(3)) ? 4 : 3
     }

     if (after == 117 /* 'u' */ && input.peek(2) == 123 /* '{' */) {
       for (let size = 3;; size++) {
         let next = input.peek(size);
         if (next == 125 /* '}' */) return size == 2 ? 0 : size + 1
         if (!isHex(next)) break
       }
     }

     return 0
   }

   const interpolated = new ExternalTokenizer((input, stack) => {
     let content = false;
     for (;; content = true) {
       if (input.next == 34 /* '"' */ || input.next < 0 ||
           input.next == 36 /* '$' */ && (isIdentifierStart(input.peek(1)) || input.peek(1) == 123 /* '{' */) ||
           input.next == 123 /* '{' */ && input.peek(1) == 36 /* '$' */) {
         break
       } else if (input.next == 92 /* '\\' */) {
         let escaped = scanEscape(input);
         if (escaped) {
           if (content) break
           else return input.acceptToken(EscapeSequence, escaped)
         }
       } else if (!content && (
         input.next == 91 /* '[' */ ||
         input.next == 45 /* '-' */ && input.peek(1) == 62 /* '>' */ && isIdentifierStart(input.peek(2)) ||
         input.next == 63 /* '?' */ && input.peek(1) == 45 && input.peek(2) == 62 && isIdentifierStart(input.peek(3))
       ) && stack.canShift(afterInterpolation)) {
         break
       }
       input.advance();
     }
     if (content) input.acceptToken(interpolatedStringContent);
   });

   const phpHighlighting = styleTags({
     "Visibility abstract final static": tags$1.modifier,
     "for foreach while do if else elseif switch try catch finally return throw break continue default case": tags$1.controlKeyword,
     "endif endfor endforeach endswitch endwhile declare enddeclare goto match": tags$1.controlKeyword,
     "and or xor yield unset clone instanceof insteadof": tags$1.operatorKeyword,
     "function fn class trait implements extends const enum global interface use var": tags$1.definitionKeyword,
     "include include_once require require_once namespace": tags$1.moduleKeyword,
     "new from echo print array list as": tags$1.keyword,
     null: tags$1.null,
     Boolean: tags$1.bool,
     VariableName: tags$1.variableName,
     "NamespaceName/...": tags$1.namespace,
     "NamedType/...": tags$1.typeName,
     Name: tags$1.name,
     "CallExpression/Name": tags$1.function(tags$1.variableName),
     "LabelStatement/Name": tags$1.labelName,
     "MemberExpression/Name": tags$1.propertyName,
     "MemberExpression/VariableName": tags$1.special(tags$1.propertyName),
     "ScopedExpression/ClassMemberName/Name": tags$1.propertyName,
     "ScopedExpression/ClassMemberName/VariableName": tags$1.special(tags$1.propertyName),
     "CallExpression/MemberExpression/Name": tags$1.function(tags$1.propertyName),
     "CallExpression/ScopedExpression/ClassMemberName/Name": tags$1.function(tags$1.propertyName),
     "MethodDeclaration/Name": tags$1.function(tags$1.definition(tags$1.variableName)),
     "FunctionDefinition/Name": tags$1.function(tags$1.definition(tags$1.variableName)),
     "ClassDeclaration/Name": tags$1.definition(tags$1.className),
     UpdateOp: tags$1.updateOperator,
     ArithOp: tags$1.arithmeticOperator,
     LogicOp: tags$1.logicOperator,
     BitOp: tags$1.bitwiseOperator,
     CompareOp: tags$1.compareOperator,
     ControlOp: tags$1.controlOperator,
     AssignOp: tags$1.definitionOperator,
     "$ ConcatOp": tags$1.operator,
     LineComment: tags$1.lineComment,
     BlockComment: tags$1.blockComment,
     Integer: tags$1.integer,
     Float: tags$1.float,
     String: tags$1.string,
     ShellExpression: tags$1.special(tags$1.string),
     "=> ->": tags$1.punctuation,
     "( )": tags$1.paren,
     "#[ [ ]": tags$1.squareBracket,
     "${ { }": tags$1.brace,
     "-> ?->": tags$1.derefOperator,
     ", ; :: : \\": tags$1.separator,
     "PhpOpen PhpClose": tags$1.processingInstruction,
   });

   // This file was generated by lezer-generator. You probably shouldn't edit it.
   const spec_Name = {__proto__:null,static:311, STATIC:311, class:333, CLASS:333};
   const parser$7 = LRParser.deserialize({
     version: 14,
     states: "$GSQ`OWOOQhQaOOP%oO`OOOOO#t'#H_'#H_O%tO#|O'#DtOOO#u'#Dw'#DwQ&SOWO'#DwO&XO$VOOOOQ#u'#Dx'#DxO&lQaO'#D|O(mQdO'#E}O(tQdO'#EQO*kQaO'#EWO,zQ`O'#ETO-PQ`O'#E^O/nQaO'#E^O/uQ`O'#EfO/zQ`O'#EoO*kQaO'#EoO0VQ`O'#HhO0[Q`O'#E{O0[Q`O'#E{OOQS'#Ic'#IcO0aQ`O'#EvOOQS'#IZ'#IZO2oQdO'#IWO6tQeO'#FUO*kQaO'#FeO*kQaO'#FfO*kQaO'#FgO*kQaO'#FhO*kQaO'#FhO*kQaO'#FkOOQO'#Id'#IdO7RQ`O'#FqOOQO'#Hi'#HiO7ZQ`O'#HOO7uQ`O'#FlO8QQ`O'#H]O8]Q`O'#FvO8eQaO'#FwO*kQaO'#GVO*kQaO'#GYO8}OrO'#G]OOQS'#Iq'#IqOOQS'#Ip'#IpOOQS'#IW'#IWO,zQ`O'#GdO,zQ`O'#GfO,zQ`O'#GkOhQaO'#GmO9UQ`O'#GnO9ZQ`O'#GqO9`Q`O'#GtO9eQeO'#GuO9eQeO'#GvO9eQeO'#GwO9oQ`O'#GxO9tQ`O'#GzO9yQaO'#G{O<YQ`O'#G|O<_Q`O'#G}O<dQ`O'#G}O9oQ`O'#HOO<iQ`O'#HQO<nQ`O'#HRO<sQ`O'#HSO<xQ`O'#HVO=TQ`O'#HWO9yQaO'#H[OOQ#u'#IV'#IVOOQ#u'#Ha'#HaQhQaOOO=fQ`O'#HPO7pQ`O'#HPO=kO#|O'#DrPOOO)CCw)CCwOOO#t-E;]-E;]OOO#u,5:c,5:cOOO#u'#H`'#H`O&XO$VOOO=vQ$VO'#IUOOOO'#IU'#IUQOOOOOOOQ#y,5:h,5:hO=}QaO,5:hOOQ#u,5:j,5:jO@eQaO,5:mO@lQaO,5;UO*kQaO,5;UO@sQ`O,5;VOCbQaO'#EsOOQS,5;^,5;^OCiQ`O,5;jOOQP'#F]'#F]O*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qO*kQaO,5;qOOQ#u'#Im'#ImOOQS,5<q,5<qOOQ#u,5:l,5:lOEbQ`O,5:rOEiQdO'#E}OF]Q`O'#FlOFeQ`O'#FlOFmQ`O,5:oOFrQaO'#E_OOQS,5:x,5:xOHyQ`O'#I]O9yQaO'#EaO9yQaO'#I]OOQS'#I]'#I]OIQQ`O'#I[OIYQ`O,5:xO-UQaO,5:xOI_QaO'#EgOOQS,5;Q,5;QOOQS,5;Z,5;ZOIiQ`O,5;ZOOQO,5>S,5>SOJ[QdO,5;gOOQO-E;f-E;fOL^Q`O,5;gOLcQpO,5;bO0aQ`O'#EyOLkQtO'#E}OOQS'#Ez'#EzOOQS'#Ib'#IbOM`QaO,5:wO*kQaO,5;nOOQS,5;p,5;pO*kQaO,5;pOMgQdO,5<POMwQdO,5<QONXQdO,5<RONiQdO,5<SO!!sQdO,5<SO!!zQdO,5<VO!#[Q`O'#FrO!#gQ`O'#IgO!#oQ`O,5<]OOQO-E;g-E;gO!#tQ`O'#IoO<_Q`O,5=iO!#|Q`O,5=iO9oQ`O,5=jO!$RQ`O,5=nO!$WQ`O,5=kO!$]Q`O,5=kO!$bQ`O'#FnO!$xQ`O,5<WO!%TQ`O,5<WO!%WQ`O,5?ZO!%]Q`O,5<WO!%eQ`O,5<bO!%mQdO'#GPO!%{QdO'#InO!&WQdO,5=wO!&`Q`O,5<bO!%WQ`O,5<bO!&hQdO,5<cO!&xQ`O,5<cO!'lQdO,5<qO!)nQdO,5<tO!*OOrO'#HsOOOQ'#It'#ItO*kQaO'#GbOOOQ'#Hs'#HsO!*pOrO,5<wOOQS,5<w,5<wO!*wQaO,5=OO!+OQ`O,5=QO!+WQeO,5=VO!+bQ`O,5=XO!+gQaO'#GoO!+WQeO,5=YO9yQaO'#GrO!+WQeO,5=]O!&WQdO,5=`O(tQdO,5=aOOQ#u,5=a,5=aO(tQdO,5=bOOQ#u,5=b,5=bO(tQdO,5=cOOQ#u,5=c,5=cO!+nQ`O,5=dO!+vQ`O,5=fO!+{QdO'#IvOOQS'#Iv'#IvO!&WQdO,5=gO>UQaO,5=hO!-eQ`O'#F}O!-jQdO'#IlO!&WQdO,5=iOOQ#u,5=j,5=jO!-uQ`O,5=lO!-xQ`O,5=mO!-}Q`O,5=nO!.YQdO,5=qOOQ#u,5=q,5=qO!.eQ`O,5=rO!.eQ`O,5=rO!.mQdO'#IwO!.{Q`O'#HXO!&WQdO,5=rO!/ZQ`O,5=rO!/fQdO'#IYO!&WQdO,5=vOOQ#u-E;_-E;_O!1RQ`O,5=kOOO#u,5:^,5:^O!1^O#|O,5:^OOO#u-E;^-E;^OOOO,5>p,5>pOOQ#y1G0S1G0SO!1fQ`O1G0XO*kQaO1G0XO!2xQ`O1G0pOOQS1G0p1G0pO!4[Q`O1G0pOOQS'#I_'#I_O*kQaO'#I_OOQS1G0q1G0qO!4cQ`O'#IaO!7lQ`O'#E}O!7yQaO'#EuOOQO'#Ia'#IaO!8TQ`O'#I`O!8]Q`O,5;_OOQS'#FQ'#FQOOQS1G1U1G1UO!8bQdO1G1]O!:dQdO1G1]O!<PQdO1G1]O!=lQdO1G1]O!?XQdO1G1]O!@tQdO1G1]O!BaQdO1G1]O!C|QdO1G1]O!EiQdO1G1]O!GUQdO1G1]O!HqQdO1G1]O!J^QdO1G1]O!KyQdO1G1]O!MfQdO1G1]O# RQdO1G1]O#!nQdO1G1]OOQT1G0^1G0^O!%WQ`O,5<WO#$ZQaO'#EXOOQS1G0Z1G0ZO#$bQ`O,5:yOFuQaO,5:yO#$gQaO,5:}O#$nQdO,5:{O#&jQdO,5>wO#(fQaO'#HdO#(vQ`O,5>vOOQS1G0d1G0dO#)OQ`O1G0dO#)TQ`O'#I^O#*mQ`O'#I^O#*uQ`O,5;ROIbQaO,5;ROOQS1G0u1G0uPOQO'#E}'#E}O#+fQdO1G1RO0aQ`O'#HgO#-hQtO,5;cO#.YQaO1G0|OOQS,5;e,5;eO#0iQtO,5;gO#0vQdO1G0cO*kQaO1G0cO#2cQdO1G1YO#4OQdO1G1[OOQO,5<^,5<^O#4`Q`O'#HjO#4nQ`O,5?ROOQO1G1w1G1wO#4vQ`O,5?ZO!&WQdO1G3TO<_Q`O1G3TOOQ#u1G3U1G3UO#4{Q`O1G3YO!1RQ`O1G3VO#5WQ`O1G3VO#5]QpO'#FoO#5kQ`O'#FoO#5{Q`O'#FoO#6WQ`O'#FoO#6`Q`O'#FsO#6eQ`O'#FtOOQO'#If'#IfO#6lQ`O'#IeO#6tQ`O,5<YOOQS1G1r1G1rO0aQ`O1G1rO#6yQ`O1G1rO#7OQ`O1G1rO!%WQ`O1G4uO#7ZQdO1G4uO!%WQ`O1G1rO#7iQ`O1G1|O!%WQ`O1G1|O9yQaO,5<kO#7qQdO'#HqO#8PQdO,5?YOOQ#u1G3c1G3cO*kQaO1G1|O0aQ`O1G1|O#8[QdO1G1}O7RQ`O'#FyO7RQ`O'#FzO#:nQ`O'#F{OOQS1G1}1G1}O!-xQ`O1G1}O!1UQ`O1G1}O!1RQ`O1G1}O#;eO`O,5<xO#;jO`O,5<xO#;uO!bO,5<yO#<TQ`O,5<|OOOQ-E;q-E;qOOQS1G2c1G2cO#<[QaO'#GeO#<uQ$VO1G2jO#AuQ`O1G2jO#BQQ`O'#GgO#B]Q`O'#GjOOQ#u1G2l1G2lO#BhQ`O1G2lOOQ#u'#Gl'#GlOOQ#u'#Iu'#IuOOQ#u1G2q1G2qO#BmQ`O1G2qO,zQ`O1G2sO#BrQaO,5=ZO#ByQ`O,5=ZOOQ#u1G2t1G2tO#COQ`O1G2tO#CTQ`O,5=^OOQ#u1G2w1G2wO#DgQ`O1G2wOOQ#u1G2z1G2zOOQ#u1G2{1G2{OOQ#u1G2|1G2|OOQ#u1G2}1G2}O#DlQ`O'#HxO9oQ`O'#HxO#DqQ$VO1G3OO#IwQ`O1G3QO9yQaO'#HwO#I|QdO,5=[OOQ#u1G3R1G3RO#JXQ`O1G3SO9yQaO,5<iO#J^QdO'#HpO#JlQdO,5?WOOQ#u1G3T1G3TOOQ#u1G3W1G3WO!-xQ`O1G3WOOQ#u1G3X1G3XO#KfQ`O'#HTOOQ#u1G3Y1G3YO#KmQ`O1G3YO0aQ`O1G3YOOQ#u1G3]1G3]O!&WQdO1G3^O#KrQ`O1G3^O#KzQdO'#HzO#L]QdO,5?cO#LhQ`O,5?cO#LmQ`O'#HYO7RQ`O'#HYO#LxQ`O'#IxO#MQQ`O,5=sOOQ#u1G3^1G3^O!.eQ`O1G3^O!.eQ`O1G3^O#MVQeO'#HbO#MgQdO,5>tOOQ#u1G3b1G3bOOQ#u1G3V1G3VO!-xQ`O1G3VO!1UQ`O1G3VOOO#u1G/x1G/xO*kQaO7+%sO#MuQdO7+%sOOQS7+&[7+&[O$ bQ`O,5>yO>UQaO,5;`O$ iQ`O,5;aO$#OQaO'#HfO$#YQ`O,5>zOOQS1G0y1G0yO$#bQ`O'#EYO$#gQ`O'#IXO$#oQ`O,5:sOOQS1G0e1G0eO$#tQ`O1G0eO$#yQ`O1G0iO9yQaO1G0iOOQO,5>O,5>OOOQO-E;b-E;bOOQS7+&O7+&OO>UQaO,5;SO$%`QaO'#HeO$%jQ`O,5>xOOQS1G0m1G0mO$%rQ`O1G0mOOQS,5>R,5>ROOQS-E;e-E;eO$%wQdO7+&hO$'yQtO1G1RO$(WQdO7+%}OOQS1G0i1G0iOOQO,5>U,5>UOOQO-E;h-E;hOOQ#u7+(o7+(oO!&WQdO7+(oOOQ#u7+(t7+(tO#KmQ`O7+(tO0aQ`O7+(tOOQ#u7+(q7+(qO!-xQ`O7+(qO!1UQ`O7+(qO!1RQ`O7+(qO$)sQ`O,5<ZO$*OQ`O,5<ZO$*WQ`O,5<_O$*]QpO,5<ZO>UQaO,5<ZOOQO,5<_,5<_O$*kQpO,5<`O$*sQ`O,5<`O$+OQ`O'#HkO$+iQ`O,5?POOQS1G1t1G1tO$+qQpO7+'^O$+yQ`O'#FuO$,UQ`O7+'^OOQS7+'^7+'^O0aQ`O7+'^O#6yQ`O7+'^O$,^QdO7+*aO0aQ`O7+*aO$,lQ`O7+'^O*kQaO7+'hO0aQ`O7+'hO$,wQ`O7+'hO$-PQdO1G2VOOQS,5>],5>]OOQS-E;o-E;oO$.iQdO7+'hO$.yQpO7+'hO$/RQdO'#IiOOQO,5<e,5<eOOQO,5<f,5<fO$/dQpO'#GOO$/lQ`O'#GOOOQO'#Ik'#IkOOQO'#Ho'#HoO$0]Q`O'#GOO<_Q`O'#F|O!&WQdO'#GOO!.YQdO'#GQO7RQ`O'#GROOQO'#Ij'#IjOOQO'#Hn'#HnO$0yQ`O,5<gOOQ#y,5<g,5<gOOQS7+'i7+'iO!-xQ`O7+'iO!1UQ`O7+'iOOOQ1G2d1G2dO$1pO`O1G2dO$1uO!bO1G2eO$2TO`O'#G`O$2YO`O1G2eOOOQ1G2h1G2hO$2_QaO,5=PO,zQ`O'#HtO$2xQ$VO7+(UOhQaO7+(UO,zQ`O'#HuO$7xQ`O7+(UO!&WQdO7+(UO$8TQ`O7+(UO$8YQaO'#GhO$:iQ`O'#GiOOQO'#Hv'#HvO$:qQ`O,5=ROOQ#u,5=R,5=RO$:|Q`O,5=UO!&WQdO7+(WO!&WQdO7+(]O!&WQdO7+(_O$;XQaO1G2uO$;`Q`O1G2uO$;eQaO1G2uO!&WQdO7+(`O9yQaO1G2xO!&WQdO7+(cO0aQ`O'#GyO9oQ`O,5>dOOQ#u,5>d,5>dOOQ#u-E;v-E;vO$;lQaO7+(lO$<TQdO,5>cOOQS-E;u-E;uO!&WQdO7+(nO$=mQdO1G2TOOQS,5>[,5>[OOQS-E;n-E;nOOQ#u7+(r7+(rO$?nQ`O'#GQO$?uQ`O'#GQO$@ZQ`O'#HUOOQO'#Hy'#HyO$@`Q`O,5=oOOQ#u,5=o,5=oO$@gQpO7+(tOOQ#u7+(x7+(xO!&WQdO7+(xO$@rQdO,5>fOOQS-E;x-E;xO$AQQdO1G4}O$A]Q`O,5=tO$AbQ`O,5=tO$AmQ`O'#H{O$BRQ`O,5?dOOQS1G3_1G3_O#KrQ`O7+(xO$BZQdO,5=|OOQS-E;`-E;`O$CvQdO<<I_OOQS1G4e1G4eO$EcQ`O1G0zOOQO,5>Q,5>QOOQO-E;d-E;dO$8YQaO,5:tO$FxQaO'#HcO$GVQ`O,5>sOOQS1G0_1G0_OOQS7+&P7+&PO$G_Q`O7+&TO$HtQ`O1G0nO$JZQ`O,5>POOQO,5>P,5>POOQO-E;c-E;cOOQS7+&X7+&XOOQS7+&T7+&TOOQ#u<<LZ<<LZOOQ#u<<L`<<L`O$@gQpO<<L`OOQ#u<<L]<<L]O!-xQ`O<<L]O!1UQ`O<<L]O>UQaO1G1uO$KsQ`O1G1uO$LOQ`O1G1yOOQO1G1y1G1yO$LTQ`O1G1uO$L]Q`O1G1uO$MrQ`O1G1zO>UQaO1G1zOOQO,5>V,5>VOOQO-E;i-E;iOOQS<<Jx<<JxO$M}Q`O'#IhO$NVQ`O'#IhO$N[Q`O,5<aO0aQ`O<<JxO$+qQpO<<JxO$NaQ`O<<JxO0aQ`O<<M{O$NiQtO<<M{O#6yQ`O<<JxO$NwQdO<<KSO% XQpO<<KSO*kQaO<<KSO0aQ`O<<KSO% aQdO'#HmO% xQdO,5?TO!&WQdO,5<jO$/dQpO,5<jO%!ZQ`O,5<jO<_Q`O,5<hO!.YQdO,5<lOOQO-E;m-E;mO!&WQdO,5<hOOQO,5<j,5<jOOQO,5<l,5<lO%!tQdO,5<mOOQO-E;l-E;lOOQ#y1G2R1G2ROOQS<<KT<<KTO!-xQ`O<<KTOOOQ7+(O7+(OO%#PO`O7+(POOOO,5<z,5<zOOOQ7+(P7+(POhQaO,5>`OOQ#u-E;r-E;rOhQaO<<KpOOQ#u<<Kp<<KpO$8TQ`O,5>aOOQO-E;s-E;sO!&WQdO<<KpO$8TQ`O<<KpO%#UQ`O<<KpO%#ZQ`O,5=SO%$pQaO,5=TOOQO-E;t-E;tOOQ#u1G2m1G2mOOQ#u<<Kr<<KrOOQ#u<<Kw<<KwOOQ#u<<Ky<<KyOOQT7+(a7+(aO%%QQ`O7+(aO%%VQaO7+(aO%%^Q`O7+(aOOQ#u<<Kz<<KzO%%cQ`O7+(dO%&xQ`O7+(dOOQ#u<<K}<<K}O%&}QpO,5=eOOQ#u1G4O1G4OO%'YQ`O<<LWOOQ#u<<LY<<LYO$?uQ`O,5<lO%'_Q`O,5=pO%'dQdO,5=pOOQO-E;w-E;wOOQ#u1G3Z1G3ZO#KmQ`O<<L`OOQ#u<<Ld<<LdO%'oQ`O1G4QO%'tQdO7+*iOOQO1G3`1G3`O%(PQ`O1G3`O%(UQ`O'#HZO7RQ`O'#HZOOQO,5>g,5>gOOQO-E;y-E;yO!&WQdO<<LdO%(aQ`O1G0`OOQO,5=},5=}OOQO-E;a-E;aO>UQaO,5;TOOQ#uANAzANAzO#KmQ`OANAzOOQ#uANAwANAwO!-xQ`OANAwO%)vQ`O7+'aO>UQaO7+'aOOQO7+'e7+'eO%+]Q`O7+'aO%+hQ`O7+'eO>UQaO7+'fO%+mQ`O7+'fO%-SQ`O'#HlO%-bQ`O,5?SO%-bQ`O,5?SOOQO1G1{1G1{O$+qQpOAN@dOOQSAN@dAN@dO0aQ`OAN@dO%-jQtOANCgO%-xQ`OAN@dO*kQaOAN@nO%.QQdOAN@nO%.bQpOAN@nOOQS,5>X,5>XOOQS-E;k-E;kOOQO1G2U1G2UO!&WQdO1G2UO$/dQpO1G2UO<_Q`O1G2SO!.YQdO1G2WO!&WQdO1G2SOOQO1G2W1G2WOOQO1G2S1G2SO%.jQaO'#GSOOQO1G2X1G2XOOQSAN@oAN@oOOOQ<<Kk<<KkOOQ#u1G3z1G3zOOQ#uANA[ANA[OOQO1G3{1G3{O%0iQ`OANA[O!&WQdOANA[O%0nQaO1G2nO%1OQaO1G2oOOQT<<K{<<K{O%1`Q`O<<K{O%1eQaO<<K{O*kQaO,5=_OOQT<<LO<<LOOOQO1G3P1G3PO%1lQ`O1G3PO!+WQeOANArO%1qQdO1G3[OOQO1G3[1G3[O%1|Q`O1G3[OOQS7+)l7+)lOOQO7+(z7+(zO%2UQ`O,5=uO%2ZQ`O,5=uOOQ#uANBOANBOO%2fQ`O1G0oOOQ#uG27fG27fOOQ#uG27cG27cO%3{Q`O<<J{O>UQaO<<J{OOQO<<KP<<KPO%5bQ`O<<KQOOQO,5>W,5>WO%6wQ`O,5>WOOQO-E;j-E;jO%6|Q`O1G4nOOQSG26OG26OO$+qQpOG26OO0aQ`OG26OO%7UQdOG26YO*kQaOG26YOOQO7+'p7+'pO!&WQdO7+'pO!&WQdO7+'nOOQO7+'r7+'rOOQO7+'n7+'nO%7fQ`OLD+tO%8uQ`O'#E}O%9PQ`O'#IZO!&WQdO'#HrO%:|QaO,5<nOOQO,5<n,5<nO!&WQdOG26vOOQ#uG26vG26vO%<{QaO7+(YOOQTANAgANAgO%=]Q`OANAgO%=bQ`O1G2yOOQO7+(k7+(kOOQ#uG27^G27^O%=iQ`OG27^OOQO7+(v7+(vO%=nQ`O7+(vO!&WQdO7+(vOOQO1G3a1G3aO%=vQ`O1G3aO%={Q`OAN@gOOQO1G3r1G3rOOQSLD+jLD+jO$+qQpOLD+jO%?bQdOLD+tOOQO<<K[<<K[OOQO<<KY<<KYO%?rQ`O,5<oO%?wQ`O,5<pOOQP,5>^,5>^OOQP-E;p-E;pOOQO1G2Y1G2YOOQ#uLD,bLD,bOOQTG27RG27RO!&WQdOLD,xO!&WQdO<<LbOOQO<<Lb<<LbOOQO7+({7+({OOQS!$( U!$( UOOQS1G2Z1G2ZOOQS1G2[1G2[O%@PQdO1G2[OOQ#u!$(!d!$(!dOOQOANA|ANA|OOQS7+'v7+'vO%@[Q`O'#E{O%@[Q`O'#E{O%@aQ`O,5;gO%@fQdO,5<cO%BbQaO,5:}O*kQaO1G0iO%BiQaO'#FwO#.YQaO'#GVO#.YQaO'#GYO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO#.YQaO,5;qO%BpQdO'#I]O%D`QdO'#I]O#.YQaO'#EaO#.YQaO'#I]O%FbQaO,5:wO#.YQaO,5;nO#.YQaO,5;pO%FiQdO,5<PO%HeQdO,5<QO%JaQdO,5<RO%L]QdO,5<SO%NXQdO,5<SO%NoQdO,5<VO&!kQdO,5<tO#.YQaO1G0XO&$gQdO1G1]O&&cQdO1G1]O&(_QdO1G1]O&*ZQdO1G1]O&,VQdO1G1]O&.RQdO1G1]O&/}QdO1G1]O&1yQdO1G1]O&3uQdO1G1]O&5qQdO1G1]O&7mQdO1G1]O&9iQdO1G1]O&;eQdO1G1]O&=aQdO1G1]O&?]QdO1G1]O&AXQdO,5:{O&CTQdO,5>wO&EPQdO1G0cO#.YQaO1G0cO&F{QdO1G1YO&HwQdO1G1[O#.YQaO1G1|O#.YQaO7+%sO&JsQdO7+%sO&LoQdO7+%}O#.YQaO7+'hO&NkQdO7+'hO'!gQdO<<I_O'$cQdO<<KSO#.YQaO<<KSO#.YQaOAN@nO'&_QdOAN@nO'(ZQdOG26YO#.YQaOG26YO'*VQdOLD+tO',RQaO,5:}O'.QQaO1G0iO'/|QdO'#IWO'0aQeO'#FUO'4aQeO'#FUO#.YQaO'#FeO'.QQaO'#FeO#.YQaO'#FfO'.QQaO'#FfO#.YQaO'#FgO'.QQaO'#FgO#.YQaO'#FhO'.QQaO'#FhO#.YQaO'#FhO'.QQaO'#FhO#.YQaO'#FkO'.QQaO'#FkO'8gQaO,5:mO'8nQ`O,5<bO'8vQ`O1G0XO'.QQaO1G0|O':YQ`O1G1|O':bQ`O7+'hO':jQpO7+'hO':rQpO<<KSO':zQpOAN@nO';SQaO'#FwO'.QQaO'#GVO'.QQaO'#GYO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO,5;qO'.QQaO'#EaO'.QQaO'#I]O'=RQaO,5:wO'.QQaO,5;nO'.QQaO,5;pO'?QQdO,5<PO'ASQdO,5<QO'CUQdO,5<RO'EWQdO,5<SO'GYQdO,5<SO'GvQdO,5<VO'IxQdO,5<tO'.QQaO1G0XO'KzQdO1G1]O'M|QdO1G1]O(!OQdO1G1]O($QQdO1G1]O(&SQdO1G1]O((UQdO1G1]O(*WQdO1G1]O(,YQdO1G1]O(.[QdO1G1]O(0^QdO1G1]O(2`QdO1G1]O(4bQdO1G1]O(6dQdO1G1]O(8fQdO1G1]O(:hQdO1G1]O(<jQdO,5:{O(>lQdO,5>wO(@nQdO1G0cO'.QQaO1G0cO(BpQdO1G1YO(DrQdO1G1[O'.QQaO1G1|O'.QQaO7+%sO(FtQdO7+%sO(HvQdO7+%}O'.QQaO7+'hO(JxQdO7+'hO(LzQdO<<I_O(N|QdO<<KSO'.QQaO<<KSO'.QQaOAN@nO)#OQdOAN@nO)%QQdOG26YO'.QQaOG26YO)'SQdOLD+tO))UQaO,5:}O#.YQaO1G0iO))]Q`O'#FvO))eQpO,5;bO))mQ`O,5<bO!%WQ`O,5<bO!%WQ`O1G1|O0aQ`O1G1|O0aQ`O7+'hO0aQ`O<<KSO))uQdO,5<cO)+wQdO'#I]O)-vQdO'#IWO).aQaO,5:mO).hQ`O,5<bO).pQ`O1G0XO)0SQ`O1G1|O)0[Q`O7+'hO)0dQpO7+'hO)0lQpO<<KSO)0tQpOAN@nO0aQ`O'#EvO9yQaO'#FeO9yQaO'#FfO9yQaO'#FgO9yQaO'#FhO9yQaO'#FhO9yQaO'#FkO)0|QaO'#FwO9yQaO'#GVO9yQaO'#GYO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO9yQaO,5;qO)1TQ`O'#FlO*kQaO'#EaO*kQaO'#I]O)1]QaO,5:wO9yQaO,5;nO9yQaO,5;pO)1dQdO,5<PO)3`QdO,5<QO)5[QdO,5<RO)7WQdO,5<SO)9SQdO,5<SO)9jQdO,5<VO);fQdO,5<cO)=bQdO,5<tO)?^Q`O'#IvO)@sQ`O'#IYO9yQaO1G0XO)BYQdO1G1]O)DUQdO1G1]O)FQQdO1G1]O)G|QdO1G1]O)IxQdO1G1]O)KtQdO1G1]O)MpQdO1G1]O* lQdO1G1]O*#hQdO1G1]O*%dQdO1G1]O*'`QdO1G1]O*)[QdO1G1]O*+WQdO1G1]O*-SQdO1G1]O*/OQdO1G1]O*0zQaO,5:}O*1RQdO,5:{O*1cQdO,5>wO*1sQaO'#HdO*2TQ`O,5>vO*2]QdO1G0cO9yQaO1G0cO*4XQdO1G1YO*6TQdO1G1[O9yQaO1G1|O>UQaO'#HwO*8PQ`O,5=[O*8XQaO'#HbO*8cQ`O,5>tO9yQaO7+%sO*8kQdO7+%sO*:gQ`O1G0iO>UQaO1G0iO*;|QdO7+%}O9yQaO7+'hO*=xQdO7+'hO*?tQ`O,5>cO*AZQ`O,5=|O*BpQdO<<I_O*DlQ`O7+&TO*FRQdO<<KSO9yQaO<<KSO9yQaOAN@nO*G}QdOAN@nO*IyQdOG26YO9yQaOG26YO*KuQdOLD+tO*MqQaO,5:}O9yQaO1G0iO*MxQdO'#I]O*NcQ`O'#FvO*NkQ`O,5<bO!%WQ`O,5<bO!%WQ`O1G1|O0aQ`O1G1|O0aQ`O7+'hO0aQ`O<<KSO*NsQdO'#IWO+ ^QeO'#FUO+ zQaO'#FUO+#sQaO'#FUO+%`QaO'#FUO>UQaO'#FeO>UQaO'#FfO>UQaO'#FgO>UQaO'#FhO>UQaO'#FhO>UQaO'#FkO+'XQaO'#FwO>UQaO'#GVO>UQaO'#GYO+'`QaO,5:mO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO>UQaO,5;qO+'gQ`O'#I]O$8YQaO'#EaO+)PQaOG26YO$8YQaO'#I]O+*{Q`O'#I[O++TQaO,5:wO>UQaO,5;nO>UQaO,5;pO++[Q`O,5<PO+,wQ`O,5<QO+.dQ`O,5<RO+0PQ`O,5<SO+1lQ`O,5<SO+3XQ`O,5<VO+4tQ`O,5<bO+4|Q`O,5<cO+6iQ`O,5<tO+8UQ`O1G0XO>UQaO1G0XO+9hQ`O1G1]O+;TQ`O1G1]O+<pQ`O1G1]O+>]Q`O1G1]O+?xQ`O1G1]O+AeQ`O1G1]O+CQQ`O1G1]O+DmQ`O1G1]O+FYQ`O1G1]O+GuQ`O1G1]O+IbQ`O1G1]O+J}Q`O1G1]O+LjQ`O1G1]O+NVQ`O1G1]O, rQ`O1G1]O,#_Q`O1G0cO>UQaO1G0cO,$zQ`O1G1YO,&gQ`O1G1[O,(SQ`O1G1|O>UQaO1G1|O>UQaO7+%sO,([Q`O7+%sO,)wQ`O7+%}O>UQaO7+'hO,+dQ`O7+'hO,+lQ`O7+'hO,-XQpO7+'hO,-aQ`O<<I_O,.|Q`O<<KSO,0iQpO<<KSO>UQaO<<KSO>UQaOAN@nO,0qQ`OAN@nO,2^QpOAN@nO,2fQ`OG26YO>UQaOG26YO,4RQ`OLD+tO,5nQaO,5:}O>UQaO1G0iO,5uQ`O'#I]O$8YQaO'#FeO$8YQaO'#FfO$8YQaO'#FgO$8YQaO'#FhO$8YQaO'#FhO+)PQaO'#FhO$8YQaO'#FkO,6SQaO'#FwO,6ZQaO'#FwO$8YQaO'#GVO+)PQaO'#GVO$8YQaO'#GYO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO$8YQaO,5;qO+)PQaO,5;qO,8YQ`O'#FlO>UQaO'#EaO>UQaO'#I]O,8bQaO,5:wO,8iQaO,5:wO$8YQaO,5;nO+)PQaO,5;nO$8YQaO,5;pO,:hQ`O,5<PO,<TQ`O,5<QO,=pQ`O,5<RO,?]Q`O,5<SO,@xQ`O,5<SO,BeQ`O,5<SO,CtQ`O,5<VO,EaQ`O,5<cO%7fQ`O,5<cO,F|Q`O,5<tO$8YQaO1G0XO+)PQaO1G0XO,HiQ`O1G1]O,JUQ`O1G1]O,KeQ`O1G1]O,MQQ`O1G1]O,NaQ`O1G1]O- |Q`O1G1]O-#]Q`O1G1]O-$xQ`O1G1]O-&XQ`O1G1]O-'tQ`O1G1]O-)TQ`O1G1]O-*pQ`O1G1]O-,PQ`O1G1]O--lQ`O1G1]O-.{Q`O1G1]O-0hQ`O1G1]O-1wQ`O1G1]O-3dQ`O1G1]O-4sQ`O1G1]O-6`Q`O1G1]O-7oQ`O1G1]O-9[Q`O1G1]O-:kQ`O1G1]O-<WQ`O1G1]O-=gQ`O1G1]O-?SQ`O1G1]O-@cQ`O1G1]O-BOQ`O1G1]O-C_Q`O1G1]O-DzQ`O1G1]O-FZQ`O,5:{O-GvQ`O,5>wO-IcQ`O1G0cO-KOQ`O1G0cO$8YQaO1G0cO+)PQaO1G0cO-L_Q`O1G1YO-MzQ`O1G1YO. ZQ`O1G1[O$8YQaO1G1|O$8YQaO7+%sO+)PQaO7+%sO.!vQ`O7+%sO.$cQ`O7+%sO.%rQ`O7+%}O.'_Q`O7+%}O$8YQaO7+'hO.(nQ`O7+'hO.*ZQ`O<<I_O.+vQ`O<<I_O.-VQ`O<<KSO$8YQaO<<KSO$8YQaOAN@nO..rQ`OAN@nO.0_Q`OG26YO$8YQaOG26YO.1zQ`OLD+tO.3gQaO,5:}O.3nQaO,5:}O$8YQaO1G0iO+)PQaO1G0iO.5mQ`O'#I]O.7PQ`O'#I]O.:fQ`O'#IWO.:vQ`O'#FvO.;OQaO,5:mO.;VQ`O,5<bO.;_Q`O,5<bO!%WQ`O,5<bO.;gQ`O1G0XO.<yQ`O,5:{O.>fQ`O,5>wO.@RQ`O1G1|O!%WQ`O1G1|O0aQ`O1G1|O0aQ`O7+'hO.@ZQ`O7+'hO.@cQpO7+'hO.@kQpO<<KSO0aQ`O<<KSO.@sQpOAN@nO.@{Q`O'#IWO.A]Q`O'#IWO.CSQaO,5:mO.CZQaO,5:mO.CbQ`O,5<bO.CjQ`O7+'hO.CrQ`O1G0XO.EUQ`O1G0XO.FhQ`O1G1|O.FpQ`O7+'hO.FxQpO7+'hO.GQQpOAN@nO.GYQpO<<KSO.GbQpOAN@nO.GjQ`O'#FvO.GrQ`O'#FlO.GzQ`O,5<bO!%WQ`O,5<bO!%WQ`O1G1|O0aQ`O1G1|O0aQ`O7+'hO0aQ`O<<KSO.HSQ`O'#FvO.H[Q`O,5<bO.HdQ`O,5<bO!%WQ`O,5<bO!%WQ`O1G1|O!%WQ`O1G1|O0aQ`O1G1|O0aQ`O<<KSO0aQ`O7+'hO0aQ`O<<KSO.HlQ`O'#FlO.HtQ`O'#FlO.H|Q`O'#Fl",
     stateData: ".Ic~O!dOS!eOS&vOS!gQQ~O!iTO&wRO~OPgOQ|OS!lOU^OW}OX!XO[mO]!_O^!WO`![Oa!SOb!]Ok!dOm!lOowOp!TOq!UOsuOt!gOu!VOv!POxkOykO|!bO}`O!O]O!P!eO!QxO!R}O!TpO!UlO!VlO!W!YO!X!QO!YzO!Z!cO![!ZO!]!^O!^!fO!`!`O!a!RO!cjO!mWO!oXO!sYO!y[O#W_O#bhO#daO#ebO#peO$ToO$]nO$^oO$aqO$drO$l!kO$zyO${!OO$}}O%O}O%V|O'g{O~O!g!mO~O&wRO!i!hX&p!hX&t!hX~O!i!pO~O!d!qO!e!qO!g!mO&t!tO&v!qO~PhO!n!vO~PhOT'VXz'VX!S'VX!b'VX!m'VX!o'VX!v'VX!y'VX#S'VX#W'VX#`'VX#a'VX#p#qX#s'VX#z'VX#{'VX#|'VX#}'VX$O'VX$Q'VX$R'VX$S'VX$T'VX$U'VX$V'VX$W'VX$z'VX&s'VX~O!q!xO~P&sOT#TOz#RO!S#UO!b#VO!m#cO!o!{O!v!yO!y!}O#S#QO#W!zO#`!|O#a!|O#s#PO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dO&s#cO~OPgOQ|OU^OW}O[mOowOs#hOxkOykO}`O!O]O!QxO!R}O!TpO!UlO!VlO!YzO!cjO!s#gO!y[O#W_O#bhO#daO#ebO#peO$ToO$]nO$^oO$aqO$zyO${!OO$}}O%O}O%V|O'g{O~O!y[O~O!y#kO~OP6]OQ|OU^OW}O[6`Oo=YOs#hOx6^Oy6^O}`O!O]O!Q6dO!R}O!T6cO!U6_O!V6_O!Y6fO!c8fO!s#gO!y[O#S#oO#U#nO#W_O#bhO#daO#ebO#peO$T6bO$]6aO$^6bO$aqO$z6eO${!OO$}}O%O}O%V|O'g{O#X'OP~O!}#sO~P-UO!y#tO~O#b#vO#daO#ebO~O#p#xO~O!s#yO~OU$PO!R$PO!s$OO!v#}O#p2XO~OT&zXz&zX!S&zX!b&zX!m&zX!o&zX!v&zX!y&zX#S&zX#W&zX#`&zX#a&zX#s&zX#z&zX#{&zX#|&zX#}&zX$O&zX$Q&zX$R&zX$S&zX$T&zX$U&zX$V&zX$W&zX$z&zX&s&zX!x&zX!n&zX~O#u$RO#w$SO~P0rOP6]OQ|OU^OW}O[6`Oo=YOs#hOx6^Oy6^O}`O!O]O!Q6dO!R}O!T6cO!U6_O!V6_O!Y6fO!c8fO!s#gO!y[O#W_O#bhO#daO#ebO#peO$T6bO$]6aO$^6bO$aqO$z6eO${!OO$}}O%O}O%V|O'g{OT#xXz#xX!S#xX!b#xX!m#xX!o#xX!v#xX#`#xX#a#xX#s#xX#z#xX#{#xX#|#xX#}#xX$O#xX$Q#xX$R#xX$S#xX$U#xX$V#xX$W#xX&s#xX!x#xX!n#xX~Or$UO#S6yO#U6xO~P2yO!s#gO#peO~OS$gO]$bOk$eOm$gOs$aO!`$cO$drO$l$fO~O!s$kO!y$hO#S$jO~Oo$mOs$lO#b$nO~O!y$hO#S$rO~O$l$tO~P*kOR$zO!o$yO#b$xO#e$yO&q$zO~O'f$|O~P8lO!y%RO~O!y%TO~O!s%VO~O!m#cO&s#cO~P*kO!oXO~O!y%_O~OP6]OQ|OU^OW}O[6`Oo=YOs#hOx6^Oy6^O}`O!O]O!Q6dO!R}O!T6cO!U6_O!V6_O!Y6fO!c8fO!s#gO!y[O#W_O#bhO#daO#ebO#peO$T6bO$]6aO$^6bO$aqO$z6eO${!OO$}}O%O}O%V|O'g{O~O!y%cO~O!s%dO~O]$bO~O!s%hO~O!s%iO~O!s%jO~O!oXO!s#gO#peO~O]%rOs%rO!o%pO!s#gO#p%nO~O!s%vO~O!i%wO&t%wO&wRO~O&t%zO~PhO!n%{O~PhOPgOQ|OU^OW}O[8lOo=yOs#hOx8jOy8jO}`O!O]O!Q8pO!R}O!T8oO!U8kO!V8kO!Y8rO!c8iO!s#gO!y[O#W_O#bhO#daO#ebO#peO$T8nO$]8mO$^8nO$aqO$z8qO${!OO$}}O%O}O%V|O'g{O~O!q%}O~P>UO#X&PO~P>UO!o&SO!s&RO#b&RO~OPgOQ|OU^OW}O[8lOo=yOs#hOx8jOy8jO}`O!O]O!Q8pO!R}O!T8oO!U8kO!V8kO!Y8rO!c8iO!s&VO!y[O#U&WO#W_O#bhO#daO#ebO#peO$T8nO$]8mO$^8nO$aqO$z8qO${!OO$}}O%O}O%V|O'g{O~O!x'SP~PAOO!s&[O#b&[O~OT#TOz#RO!S#UO!b#VO!o!{O!v!yO!y!}O#S#QO#W!zO#`!|O#a!|O#s#PO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dO~O!x&nO~PCqO!x'VX!}'VX#O'VX#X'VX!n'VXV'VX!q'VX#u'VX#w'VXw'VX~P&sO!y$hO#S&oO~Oo$mOs$lO~O!o&pO~O!}&sO#S;dO#U;cO!x'OP~P9yOT6iOz6gO!S6jO!b6kO!o!{O!v8sO!y!}O#S#QO#W!zO#`!|O#a!|O#s#PO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}'PX#X'PX~O#O&tO~PGSO!}&wO#X'OX~O#X&yO~O!}'OO!x'QP~P9yO!n'PO~PCqO!m#oa!o#oa#S#oa#p#qX&s#oa!x#oa#O#oaw#oa~OT#oaz#oa!S#oa!b#oa!v#oa!y#oa#W#oa#`#oa#a#oa#s#oa#z#oa#{#oa#|#oa#}#oa$O#oa$Q#oa$R#oa$S#oa$T#oa$U#oa$V#oa$W#oa$z#oa!}#oa#X#oa!n#oaV#oa!q#oa#u#oa#w#oa~PIpO!s'RO~O!x'UO#l'SO~O!x'VX#l'VX#p#qX#S'VX#U'VX#b'VX!o'VX#O'VXw'VX!m'VX&s'VX~O#S'YO~P*kO!m$Xa&s$Xa!x$Xa!n$Xa~PCqO!m$Ya&s$Ya!x$Ya!n$Ya~PCqO!m$Za&s$Za!x$Za!n$Za~PCqO!m$[a&s$[a!x$[a!n$[a~PCqO!o!{O!y!}O#W!zO#`!|O#a!|O#s#PO$z#dOT$[a!S$[a!b$[a!m$[a!v$[a#S$[a#z$[a#{$[a#|$[a#}$[a$O$[a$Q$[a$R$[a$S$[a$T$[a$U$[a$V$[a$W$[a&s$[a!x$[a!n$[a~Oz#RO~PNyO!m$_a&s$_a!x$_a!n$_a~PCqO!y!}O!}$fX#X$fX~O!}'^O#X'ZX~O#X'`O~O!s$kO#S'aO~O]'cO~O!s'eO~O!s'fO~O$l'gO~O!`'mO#S'kO#U'lO#b'jO$drO!x'XP~P0aO!^'sO!oXO!q'rO~O!s'uO!y$hO~O!y$hO#S'wO~O!y$hO#S'yO~O#u'zO!m$sX!}$sX&s$sX~O!}'{O!m'bX&s'bX~O!m#cO&s#cO~O!q(PO#O(OO~O!m$ka&s$ka!x$ka!n$ka~PCqOl(ROw(SO!o(TO!y!}O~O!o!{O!y!}O#W!zO#`!|O#a!|O#s#PO~OT$yaz$ya!S$ya!b$ya!m$ya!v$ya#S$ya#z$ya#{$ya#|$ya#}$ya$O$ya$Q$ya$R$ya$S$ya$T$ya$U$ya$V$ya$W$ya$z$ya&s$ya!x$ya!}$ya#O$ya#X$ya!n$ya!q$yaV$ya#u$ya#w$ya~P!'WO!m$|a&s$|a!x$|a!n$|a~PCqO#W([O#`(YO#a(YO&r(ZOR&gX!o&gX#b&gX#e&gX&q&gX'f&gX~O'f(_O~P8lO!q(`O~PhO!o(cO!q(dO~O!q(`O&s(gO~PhO!a(kO~O!m(lO~P9yOZ(wOn(xO~O!s(zO~OT6iOz6gO!S6jO!b6kO!v8sO!}({O#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!m'jX&s'jX~P!'WO#u)PO~O!})QO!m'`X&s'`X~Ol(RO!o(TO~Ow(SO!o)WO!q)ZO~O!m#cO!oXO&s#cO~O!o%pO!s#yO~OV)aO!})_O!m'kX&s'kX~O])cOs)cO!s#gO#peO~O!o%pO!s#gO#p)hO~OT6iOz6gO!S6jO!b6kO!v8sO!})iO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!m&|X&s&|X#O&|X~P!'WOl(ROw(SO!o(TO~O!i)oO&t)oO~OT8vOz8tO!S8wO!b8xO!q)pO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#X)rO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO~P!'WO!n)rO~PCqOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x'TX!}'TX~P!'WOT'VXz'VX!S'VX!b'VX!o'VX!v'VX!y'VX#S'VX#W'VX#`'VX#a'VX#p#qX#s'VX#z'VX#{'VX#|'VX#}'VX$O'VX$Q'VX$R'VX$S'VX$T'VX$U'VX$V'VX$W'VX$z'VX~O!q)tO!x'VX!}'VX~P!5xO!x#iX!}#iX~P>UO!})vO!x'SX~O!x)xO~O$z#dOT#yiz#yi!S#yi!b#yi!m#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi$V#yi$W#yi&s#yi!x#yi!}#yi#O#yi#X#yi!n#yi!q#yiV#yi#u#yi#w#yi~P!'WOz#RO#S#QO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi&s#yi!x#yi!n#yi~P!'WOz#RO!v!yO#S#QO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi&s#yi!x#yi!n#yi~P!'WOT#TOz#RO!b#VO!v!yO#S#QO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dO!S#yi!m#yi&s#yi!x#yi!n#yi~P!'WOT#TOz#RO!v!yO#S#QO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dO!S#yi!b#yi!m#yi&s#yi!x#yi!n#yi~P!'WOz#RO#S#QO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#z#yi#{#yi&s#yi!x#yi!n#yi~P!'WOz#RO#S#QO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#z#yi#{#yi#|#yi&s#yi!x#yi!n#yi~P!'WOz#RO#S#QO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#z#yi#{#yi#|#yi#}#yi&s#yi!x#yi!n#yi~P!'WOz#RO#S#QO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#z#yi#{#yi#|#yi#}#yi$O#yi&s#yi!x#yi!n#yi~P!'WOz#RO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi&s#yi!x#yi!n#yi~P!'WOz#RO$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi&s#yi!x#yi!n#yi~P!'WOz#RO$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi&s#yi!x#yi!n#yi~P!'WOz#RO$T#`O$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$U#yi&s#yi!x#yi!n#yi~P!'WOz#RO$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi&s#yi!x#yi!n#yi~P!'WOz#RO$S#_O$T#`O$V#bO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$U#yi&s#yi!x#yi!n#yi~P!'WOz#RO$W#bO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi$V#yi&s#yi!x#yi!n#yi~P!'WO_)yO~P9yO!x)|O~O#S*PO~P9yOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}#Ta#X#Ta#O#Ta!m#Ta&s#Ta!x#Ta!n#TaV#Ta!q#Ta~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}'Pa#X'Pa#O'Pa!m'Pa&s'Pa!x'Pa!n'PaV'Pa!q'Pa~P!'WO#S#oO#U#nO!}&WX#X&WX~P9yO!}&wO#X'Oa~O#X*SO~OT6iOz6gO!S6jO!b6kO!v8sO!}*UO#O*TO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!x'QX~P!'WO!}*UO!x'QX~O!x*WO~O!m#oi!o#oi#S#oi#p#qX&s#oi!x#oi#O#oiw#oi~OT#oiz#oi!S#oi!b#oi!v#oi!y#oi#W#oi#`#oi#a#oi#s#oi#z#oi#{#oi#|#oi#}#oi$O#oi$Q#oi$R#oi$S#oi$T#oi$U#oi$V#oi$W#oi$z#oi!}#oi#X#oi!n#oiV#oi!q#oi#u#oi#w#oi~P#*zO#l'SO!x#ka#S#ka#U#ka#b#ka!o#ka#O#kaw#ka!m#ka&s#ka~OPgOQ|OU^OW}O[4OOo5xOs#hOx3zOy3zO}`O!O]O!Q2^O!R}O!T4UO!U3|O!V3|O!Y2`O!c3xO!s#gO!y[O#W_O#bhO#daO#ebO#peO$T4SO$]4QO$^4SO$aqO$z2_O${!OO$}}O%O}O%V|O'g{O~O#l#oa#U#oa#b#oa~PIpOz#RO!v!yO#S#QO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#Pi!S#Pi!b#Pi!m#Pi&s#Pi!x#Pi!n#Pi~P!'WOz#RO!v!yO#S#QO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#vi!S#vi!b#vi!m#vi&s#vi!x#vi!n#vi~P!'WO!m#xi&s#xi!x#xi!n#xi~PCqO!s#gO#peO!}&^X#X&^X~O!}'^O#X'Za~O!s'uO~Ow(SO!o)WO!q*fO~O!s*jO~O#S*lO#U*mO#b*kO#l'SO~O#S*lO#U*mO#b*kO$drO~P0aO#u*oO!x$cX!}$cX~O#U*mO#b*kO~O#b*pO~O#b*rO~P0aO!}*sO!x'XX~O!x*uO~O!y*wO~O!^*{O!oXO!q*zO~O!q*}O!o'ci!m'ci&s'ci~O!q+QO#O+PO~O#b$nO!m&eX!}&eX&s&eX~O!}'{O!m'ba&s'ba~OT$kiz$ki!S$ki!b$ki!m$ki!o$ki!v$ki!y$ki#S$ki#W$ki#`$ki#a$ki#s$ki#u#fa#w#fa#z$ki#{$ki#|$ki#}$ki$O$ki$Q$ki$R$ki$S$ki$T$ki$U$ki$V$ki$W$ki$z$ki&s$ki!x$ki!}$ki#O$ki#X$ki!n$ki!q$kiV$ki~OS+^O]+aOm+^Os$aO!^+dO!_+^O!`+^O!n+hO#b$nO$aqO$drO~P0aO!s+lO~O#W+nO#`+mO#a+mO~O!s+pO#b+pO$}+pO%T+oO~O!n+qO~PCqOc%XXd%XXh%XXj%XXf%XXg%XXe%XX~PhOc+uOd+sOP%WiQ%WiS%WiU%WiW%WiX%Wi[%Wi]%Wi^%Wi`%Wia%Wib%Wik%Wim%Wio%Wip%Wiq%Wis%Wit%Wiu%Wiv%Wix%Wiy%Wi|%Wi}%Wi!O%Wi!P%Wi!Q%Wi!R%Wi!T%Wi!U%Wi!V%Wi!W%Wi!X%Wi!Y%Wi!Z%Wi![%Wi!]%Wi!^%Wi!`%Wi!a%Wi!c%Wi!m%Wi!o%Wi!s%Wi!y%Wi#W%Wi#b%Wi#d%Wi#e%Wi#p%Wi$T%Wi$]%Wi$^%Wi$a%Wi$d%Wi$l%Wi$z%Wi${%Wi$}%Wi%O%Wi%V%Wi&p%Wi'g%Wi&t%Wi!n%Wih%Wij%Wif%Wig%WiY%Wi_%Wii%Wie%Wi~Oc+yOd+vOh+xO~OY+zO_+{O!n,OO~OY+zO_+{Oi%^X~Oi,QO~Oj,RO~O!m,TO~P9yO!m,VO~Of,WO~OT6iOV,XOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO~P!'WOg,YO~O!y,ZO~OZ(wOn(xOP%liQ%liS%liU%liW%liX%li[%li]%li^%li`%lia%lib%lik%lim%lio%lip%liq%lis%lit%liu%liv%lix%liy%li|%li}%li!O%li!P%li!Q%li!R%li!T%li!U%li!V%li!W%li!X%li!Y%li!Z%li![%li!]%li!^%li!`%li!a%li!c%li!m%li!o%li!s%li!y%li#W%li#b%li#d%li#e%li#p%li$T%li$]%li$^%li$a%li$d%li$l%li$z%li${%li$}%li%O%li%V%li&p%li'g%li&t%li!n%lic%lid%lih%lij%lif%lig%liY%li_%lii%lie%li~O#u,_O~O!}({O!m%da&s%da~O!x,bO~O!s%dO!m&dX!}&dX&s&dX~O!})QO!m'`a&s'`a~OS+^OY,iOm+^Os$aO!^+dO!_+^O!`+^O$aqO$drO~O!n,lO~P#JwO!o)WO~O!o%pO!s'RO~O!s#gO#peO!m&nX!}&nX&s&nX~O!})_O!m'ka&s'ka~O!s,rO~OV,sO!n%|X!}%|X~O!},uO!n'lX~O!n,wO~O!m&UX!}&UX&s&UX#O&UX~P9yO!})iO!m&|a&s&|a#O&|a~Oz#RO#S#QO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT!uq!S!uq!b!uq!m!uq!v!uq&s!uq!x!uq!n!uq~P!'WO!n,|O~PCqOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x#ia!}#ia~P!'WO!x&YX!}&YX~PAOO!})vO!x'Sa~O#O-QO~O!}-RO!n&{X~O!n-TO~O!x-UO~OT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}#Vi#X#Vi~P!'WO!x&XX!}&XX~P9yO!}*UO!x'Qa~O!x-[O~OT#jqz#jq!S#jq!b#jq!m#jq!v#jq#S#jq#u#jq#w#jq#z#jq#{#jq#|#jq#}#jq$O#jq$Q#jq$R#jq$S#jq$T#jq$U#jq$V#jq$W#jq$z#jq&s#jq!x#jq!}#jq#O#jq#X#jq!n#jq!q#jqV#jq~P!'WO#l#oi#U#oi#b#oi~P#*zOz#RO!v!yO#S#QO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT#Pq!S#Pq!b#Pq!m#Pq&s#Pq!x#Pq!n#Pq~P!'WO#u-dO!x$ca!}$ca~O#U-fO#b-eO~O#b-gO~O#S-hO#U-fO#b-eO#l'SO~O#b-jO#l'SO~O#u-kO!x$ha!}$ha~O!`'mO#S'kO#U'lO#b'jO$drO!x&_X!}&_X~P0aO!}*sO!x'Xa~O!oXO#l'SO~O#S-pO#b-oO!x'[P~O!oXO!q-rO~O!q-uO!o'cq!m'cq&s'cq~O!^-wO!oXO!q-rO~O!q-{O#O-zO~OT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!m$si!}$si&s$si~P!'WO!m$jq&s$jq!x$jq!n$jq~PCqO#O-zO#l'SO~O!}-|Ow']X!o']X!m']X&s']X~O#b$nO#l'SO~OS+^O].ROm+^Os$aO!_+^O!`+^O#b$nO$aqO$drO~P0aOS+^O].ROm+^Os$aO!_+^O!`+^O#b$nO$aqO~P0aOS+^O]+aOm+^Os$aO!^+dO!_+^O!`+^O!n.ZO#b$nO$aqO$drO~P0aO!s.^O~O!s._O#b._O$}._O%T+oO~O$}.`O~O#X.aO~Oc%Xad%Xah%Xaj%Xaf%Xag%Xae%Xa~PhOc.dOd+sOP%WqQ%WqS%WqU%WqW%WqX%Wq[%Wq]%Wq^%Wq`%Wqa%Wqb%Wqk%Wqm%Wqo%Wqp%Wqq%Wqs%Wqt%Wqu%Wqv%Wqx%Wqy%Wq|%Wq}%Wq!O%Wq!P%Wq!Q%Wq!R%Wq!T%Wq!U%Wq!V%Wq!W%Wq!X%Wq!Y%Wq!Z%Wq![%Wq!]%Wq!^%Wq!`%Wq!a%Wq!c%Wq!m%Wq!o%Wq!s%Wq!y%Wq#W%Wq#b%Wq#d%Wq#e%Wq#p%Wq$T%Wq$]%Wq$^%Wq$a%Wq$d%Wq$l%Wq$z%Wq${%Wq$}%Wq%O%Wq%V%Wq&p%Wq'g%Wq&t%Wq!n%Wqh%Wqj%Wqf%Wqg%WqY%Wq_%Wqi%Wqe%Wq~Oc.iOd+vOh.hO~O!q(`O~OP6]OQ|OU^OW}O[:fOo>ROs#hOx:dOy:dO}`O!O]O!Q:kO!R}O!T:jO!U:eO!V:eO!Y:oO!c8gO!s#gO!y[O#W_O#bhO#daO#ebO#peO$T:hO$]:gO$^:hO$aqO$z:mO${!OO$}}O%O}O%V|O'g{O~O!m.lO!q.lO~OY+zO_+{O!n.nO~OY+zO_+{Oi%^a~O!x.rO~P>UO!m.tO~O!m.tO~P9yOQ|OW}O!R}O$}}O%O}O%V|O'g{O~OT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!m&ka!}&ka&s&ka~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!m$qi!}$qi&s$qi~P!'WOS+^Om+^Os$aO!_+^O!`+^O$aqO$drO~OY/PO~P$?VOS+^Om+^Os$aO!_+^O!`+^O$aqO~O!s/QO~O!n/SO~P#JwOw(SO!o)WO#l'SO~OV/VO!m&na!}&na&s&na~O!})_O!m'ki&s'ki~O!s/XO~OV/YO!n%|a!}%|a~O]/[Os/[O!s#gO#peO!n&oX!}&oX~O!},uO!n'la~OT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!m&Ua!}&Ua&s&Ua#O&Ua~P!'WOz#RO#S#QO#z#SO#{#WO#|#XO#}#YO$O#ZO$Q#]O$R#^O$S#_O$T#`O$U#aO$V#bO$W#bO$z#dOT!uy!S!uy!b!uy!m!uy!v!uy&s!uy!x!uy!n!uy~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x#hi!}#hi~P!'WO_)yO!n&VX!}&VX~P9yO!}-RO!n&{a~OT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}#Vq#X#Vq~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x#[i!}#[i~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#O/cO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!x&Xa!}&Xa~P!'WO#u/iO!x$ci!}$ci~O#b/jO~O#U/lO#b/kO~OT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x$ci!}$ci~P!'WO#u/mO!x$hi!}$hi~O!}/oO!x'[X~O#b/qO~O!x/rO~O!oXO!q/uO~O#l'SO!o'cy!m'cy&s'cy~O!m$jy&s$jy!x$jy!n$jy~PCqO#O/xO#l'SO~O!s#gO#peOw&aX!o&aX!}&aX!m&aX&s&aX~O!}-|Ow']a!o']a!m']a&s']a~OU$PO]0QO!R$PO!s$OO!v#}O#b$nO#p2XO~P$?uO!m#cO!o0VO&s#cO~O#X0YO~Oh0_O~OT:tOz:pO!S:vO!b:xO!m0`O!q0`O!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO~P!'WOY%]a_%]a!n%]ai%]a~PhO!x0bO~O!x0bO~P>UO!m0dO~OT6iOz6gO!S6jO!b6kO!v8sO!x0fO#O0eO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO~P!'WO!x0fO~O!x0gO#b0hO#l'SO~O!x0iO~O!s0jO~O!m#cO#u0lO&s#cO~O!s0mO~O!})_O!m'kq&s'kq~O!s0nO~OV0oO!n%}X!}%}X~OT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!n!|i!}!|i~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x$cq!}$cq~P!'WO#u0vO!x$cq!}$cq~O#b0wO~OT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x$hq!}$hq~P!'WO#S0zO#b0yO!x&`X!}&`X~O!}/oO!x'[a~O#l'SO!o'c!R!m'c!R&s'c!R~O!oXO!q1PO~O!m$j!R&s$j!R!x$j!R!n$j!R~PCqO#O1RO#l'SO~OP6]OU^O[9WOo>SOs#hOx9WOy9WO}`O!O]O!Q:lO!T9WO!U9WO!V9WO!Y9WO!c8hO!n1^O!s1YO!y[O#W_O#bhO#daO#ebO#peO$T:iO$]9WO$^:iO$aqO$z:nO${!OO~P$;lOh1_O~OY%[i_%[i!n%[ii%[i~PhOY%]i_%]i!n%]ii%]i~PhO!x1bO~O!x1bO~P>UO!x1eO~O!m#cO#u1iO&s#cO~O$}1jO%V1jO~O!s1kO~OV1lO!n%}a!}%}a~OT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x#]i!}#]i~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x$cy!}$cy~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x$hy!}$hy~P!'WO#b1nO~O!}/oO!x'[i~O!m$j!Z&s$j!Z!x$j!Z!n$j!Z~PCqOT:uOz:qO!S:wO!b:yO!v=nO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dO~P!'WOV1uO{1tO~P!5xOV1uO{1tOT&}Xz&}X!S&}X!b&}X!o&}X!v&}X!y&}X#S&}X#W&}X#`&}X#a&}X#s&}X#u&}X#w&}X#z&}X#{&}X#|&}X#}&}X$O&}X$Q&}X$R&}X$S&}X$T&}X$U&}X$V&}X$W&}X$z&}X~OP6]OU^O[9WOo>SOs#hOx9WOy9WO}`O!O]O!Q:lO!T9WO!U9WO!V9WO!Y9WO!c8hO!n1xO!s1YO!y[O#W_O#bhO#daO#ebO#peO$T:iO$]9WO$^:iO$aqO$z:nO${!OO~P$;lOY%[q_%[q!n%[qi%[q~PhO!x1zO~O!x%gi~PCqOe1{O~O$}1|O%V1|O~O!s2OO~OT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x$c!R!}$c!R~P!'WO!m$j!c&s$j!c!x$j!c!n$j!c~PCqO!s2QO~O!`2SO!s2RO~O!s2VO!m$xi&s$xi~O!s'WO~O!s*]O~OT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$ka#u$ka#w$ka&s$ka!x$ka!n$ka!q$ka#X$ka!}$ka~P!'WO#S2]O~P*kO$l$tO~P#.YOT6iOz6gO!S6jO!b6kO!v8sO#O2[O#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!m'PX&s'PX!x'PX!n'PX~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#O3uO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}'PX#X'PX#u'PX#w'PX!m'PX&s'PX!x'PX!n'PXV'PX!q'PX~P!'WO#S3dO~P#.YOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$Xa#u$Xa#w$Xa&s$Xa!x$Xa!n$Xa!q$Xa#X$Xa!}$Xa~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$Ya#u$Ya#w$Ya&s$Ya!x$Ya!n$Ya!q$Ya#X$Ya!}$Ya~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$Za#u$Za#w$Za&s$Za!x$Za!n$Za!q$Za#X$Za!}$Za~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$[a#u$[a#w$[a&s$[a!x$[a!n$[a!q$[a#X$[a!}$[a~P!'WOz2aO#u$[a#w$[a!q$[a#X$[a!}$[a~PNyOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$_a#u$_a#w$_a&s$_a!x$_a!n$_a!q$_a#X$_a!}$_a~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$|a#u$|a#w$|a&s$|a!x$|a!n$|a!q$|a#X$|a!}$|a~P!'WOz2aO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#u#yi#w#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi#u#yi#w#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOT2cOz2aO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!S#yi!m#yi#u#yi#w#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOT2cOz2aO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!S#yi!b#yi!m#yi#u#yi#w#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO#S#QO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#u#yi#w#yi#z#yi#{#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO#S#QO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#u#yi#w#yi#z#yi#{#yi#|#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO#S#QO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO#S#QO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO$T2nO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$U#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO$S2mO$T2nO$V2pO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$U#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOz2aO$W2pO$z#dOT#yi!S#yi!b#yi!m#yi!v#yi#S#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi$V#yi&s#yi!x#yi!n#yi!q#yi#X#yi!}#yi~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m#Ta#u#Ta#w#Ta&s#Ta!x#Ta!n#Ta!q#Ta#X#Ta!}#Ta~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m'Pa#u'Pa#w'Pa&s'Pa!x'Pa!n'Pa!q'Pa#X'Pa!}'Pa~P!'WOz2aO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#Pi!S#Pi!b#Pi!m#Pi#u#Pi#w#Pi&s#Pi!x#Pi!n#Pi!q#Pi#X#Pi!}#Pi~P!'WOz2aO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#vi!S#vi!b#vi!m#vi#u#vi#w#vi&s#vi!x#vi!n#vi!q#vi#X#vi!}#vi~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m#xi#u#xi#w#xi&s#xi!x#xi!n#xi!q#xi#X#xi!}#xi~P!'WOz2aO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT!uq!S!uq!b!uq!m!uq!v!uq#u!uq#w!uq&s!uq!x!uq!n!uq!q!uq#X!uq!}!uq~P!'WOz2aO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT#Pq!S#Pq!b#Pq!m#Pq#u#Pq#w#Pq&s#Pq!x#Pq!n#Pq!q#Pq#X#Pq!}#Pq~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$jq#u$jq#w$jq&s$jq!x$jq!n$jq!q$jq#X$jq!}$jq~P!'WOz2aO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dOT!uy!S!uy!b!uy!m!uy!v!uy#u!uy#w!uy&s!uy!x!uy!n!uy!q!uy#X!uy!}!uy~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$jy#u$jy#w$jy&s$jy!x$jy!n$jy!q$jy#X$jy!}$jy~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$j!R#u$j!R#w$j!R&s$j!R!x$j!R!n$j!R!q$j!R#X$j!R!}$j!R~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$j!Z#u$j!Z#w$j!Z&s$j!Z!x$j!Z!n$j!Z!q$j!Z#X$j!Z!}$j!Z~P!'WOT2cOz2aO!S2dO!b2eO!v4WO#S#QO#z2bO#{2fO#|2gO#}2hO$O2iO$Q2kO$R2lO$S2mO$T2nO$U2oO$V2pO$W2pO$z#dO!m$j!c#u$j!c#w$j!c&s$j!c!x$j!c!n$j!c!q$j!c#X$j!c!}$j!c~P!'WOP6]OU^O[4POo8^Os#hOx3{Oy3{O}`O!O]O!Q4aO!T4VO!U3}O!V3}O!Y4cO!c3yO!s#gO!y[O#S3vO#W_O#bhO#daO#ebO#peO$T4TO$]4RO$^4TO$aqO$z4bO${!OO~P$;lOP6]OU^O[4POo8^Os#hOx3{Oy3{O}`O!O]O!Q4aO!T4VO!U3}O!V3}O!Y4cO!c3yO!s#gO!y[O#W_O#bhO#daO#ebO#peO$T4TO$]4RO$^4TO$aqO$z4bO${!OO~P$;lO#u2uO#w2vO!q&zX#X&zX!}&zX~P0rOP6]OU^O[4POo8^Or2wOs#hOx3{Oy3{O}`O!O]O!Q4aO!T4VO!U3}O!V3}O!Y4cO!c3yO!s#gO!y[O#S2tO#U2sO#W_O#bhO#daO#ebO#peO$T4TO$]4RO$^4TO$aqO$z4bO${!OOT#xXz#xX!S#xX!b#xX!m#xX!o#xX!v#xX#`#xX#a#xX#s#xX#u#xX#w#xX#z#xX#{#xX#|#xX#}#xX$O#xX$Q#xX$R#xX$S#xX$U#xX$V#xX$W#xX&s#xX!x#xX!n#xX!q#xX#X#xX!}#xX~P$;lOP6]OU^O[4POo8^Or4xOs#hOx3{Oy3{O}`O!O]O!Q4aO!T4VO!U3}O!V3}O!Y4cO!c3yO!s#gO!y[O#S4uO#U4tO#W_O#bhO#daO#ebO#peO$T4TO$]4RO$^4TO$aqO$z4bO${!OOT#xXz#xX!S#xX!b#xX!o#xX!v#xX!}#xX#O#xX#X#xX#`#xX#a#xX#s#xX#u#xX#w#xX#z#xX#{#xX#|#xX#}#xX$O#xX$Q#xX$R#xX$S#xX$U#xX$V#xX$W#xX!m#xX&s#xX!x#xX!n#xXV#xX!q#xX~P$;lO!q3PO~P>UO!q5}O#O3gO~OT8vOz8tO!S8wO!b8xO!q3hO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO~P!'WO!q6OO#O3kO~O!q6PO#O3oO~O#O3oO#l'SO~O#O3pO#l'SO~O#O3sO#l'SO~OP6]OU^O[4POo8^Os#hOx3{Oy3{O}`O!O]O!Q4aO!T4VO!U3}O!V3}O!Y4cO!c3yO!s#gO!y[O#W_O#bhO#daO#ebO#peO$T4TO$]4RO$^4TO$aqO$l$tO$z4bO${!OO~P$;lOP6]OU^O[4POo8^Os#hOx3{Oy3{O}`O!O]O!Q4aO!T4VO!U3}O!V3}O!Y4cO!c3yO!s#gO!y[O#S5eO#W_O#bhO#daO#ebO#peO$T4TO$]4RO$^4TO$aqO$z4bO${!OO~P$;lOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$Xa#O$Xa#X$Xa#u$Xa#w$Xa!m$Xa&s$Xa!x$Xa!n$XaV$Xa!q$Xa~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$Ya#O$Ya#X$Ya#u$Ya#w$Ya!m$Ya&s$Ya!x$Ya!n$YaV$Ya!q$Ya~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$Za#O$Za#X$Za#u$Za#w$Za!m$Za&s$Za!x$Za!n$ZaV$Za!q$Za~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$[a#O$[a#X$[a#u$[a#w$[a!m$[a&s$[a!x$[a!n$[aV$[a!q$[a~P!'WOz4dO!}$[a#O$[a#X$[a#u$[a#w$[aV$[a!q$[a~PNyOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$_a#O$_a#X$_a#u$_a#w$_a!m$_a&s$_a!x$_a!n$_aV$_a!q$_a~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$|a#O$|a#X$|a#u$|a#w$|a!m$|a&s$|a!x$|a!n$|aV$|a!q$|a~P!'WOz4dO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi#u#yi#w#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!}#yi#O#yi#X#yi#u#yi#w#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOT4fOz4dO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!S#yi!}#yi#O#yi#X#yi#u#yi#w#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOT4fOz4dO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!S#yi!b#yi!}#yi#O#yi#X#yi#u#yi#w#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO#S#QO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi#u#yi#w#yi#z#yi#{#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO#S#QO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO#S#QO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO#S#QO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO$T4qO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$U#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO$S4pO$T4qO$V4sO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$U#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz4dO$W4sO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#u#yi#w#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi$V#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}#Ta#O#Ta#X#Ta#u#Ta#w#Ta!m#Ta&s#Ta!x#Ta!n#TaV#Ta!q#Ta~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}'Pa#O'Pa#X'Pa#u'Pa#w'Pa!m'Pa&s'Pa!x'Pa!n'PaV'Pa!q'Pa~P!'WOz4dO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#Pi!S#Pi!b#Pi!}#Pi#O#Pi#X#Pi#u#Pi#w#Pi!m#Pi&s#Pi!x#Pi!n#PiV#Pi!q#Pi~P!'WOz4dO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#vi!S#vi!b#vi!}#vi#O#vi#X#vi#u#vi#w#vi!m#vi&s#vi!x#vi!n#viV#vi!q#vi~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}#xi#O#xi#X#xi#u#xi#w#xi!m#xi&s#xi!x#xi!n#xiV#xi!q#xi~P!'WOz4dO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT!uq!S!uq!b!uq!v!uq!}!uq#O!uq#X!uq#u!uq#w!uq!m!uq&s!uq!x!uq!n!uqV!uq!q!uq~P!'WOz4dO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT#Pq!S#Pq!b#Pq!}#Pq#O#Pq#X#Pq#u#Pq#w#Pq!m#Pq&s#Pq!x#Pq!n#PqV#Pq!q#Pq~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$jq#O$jq#X$jq#u$jq#w$jq!m$jq&s$jq!x$jq!n$jqV$jq!q$jq~P!'WOz4dO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dOT!uy!S!uy!b!uy!v!uy!}!uy#O!uy#X!uy#u!uy#w!uy!m!uy&s!uy!x!uy!n!uyV!uy!q!uy~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$jy#O$jy#X$jy#u$jy#w$jy!m$jy&s$jy!x$jy!n$jyV$jy!q$jy~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$j!R#O$j!R#X$j!R#u$j!R#w$j!R!m$j!R&s$j!R!x$j!R!n$j!RV$j!R!q$j!R~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$j!Z#O$j!Z#X$j!Z#u$j!Z#w$j!Z!m$j!Z&s$j!Z!x$j!Z!n$j!ZV$j!Z!q$j!Z~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$j!c#O$j!c#X$j!c#u$j!c#w$j!c!m$j!c&s$j!c!x$j!c!n$j!cV$j!c!q$j!c~P!'WO#S5wO~P#.YO!y$hO#S5{O~O!x4ZO#l'SO~O!y$hO#S5|O~OT4fOz4dO!S4gO!b4hO!v6TO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!}$ka#O$ka#X$ka#u$ka#w$ka!m$ka&s$ka!x$ka!n$kaV$ka!q$ka~P!'WOT4fOz4dO!S4gO!b4hO!v6TO#O5vO#S#QO#z4eO#{4iO#|4jO#}4kO$O4lO$Q4nO$R4oO$S4pO$T4qO$U4rO$V4sO$W4sO$z#dO!m'PX#u'PX#w'PX&s'PX!x'PX!n'PX!q'PX#X'PX!}'PX~P!'WO#u4vO#w4wO!}&zX#O&zX#X&zXV&zX!q&zX~P0rO!q5QO~P>UO!q8bO#O5hO~OT8vOz8tO!S8wO!b8xO!q5iO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO~P!'WO!q8cO#O5lO~O!q8dO#O5pO~O#O5pO#l'SO~O#O5qO#l'SO~O#O5tO#l'SO~O$l$tO~P9yOo5zOs$lO~O#S7oO~P9yOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$Xa#O$Xa#X$Xa!m$Xa&s$Xa!x$Xa!n$XaV$Xa!q$Xa~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$Ya#O$Ya#X$Ya!m$Ya&s$Ya!x$Ya!n$YaV$Ya!q$Ya~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$Za#O$Za#X$Za!m$Za&s$Za!x$Za!n$ZaV$Za!q$Za~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$[a#O$[a#X$[a!m$[a&s$[a!x$[a!n$[aV$[a!q$[a~P!'WOz6gO!}$[a#O$[a#X$[aV$[a!q$[a~PNyOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$_a#O$_a#X$_a!m$_a&s$_a!x$_a!n$_aV$_a!q$_a~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$ka#O$ka#X$ka!m$ka&s$ka!x$ka!n$kaV$ka!q$ka~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$|a#O$|a#X$|a!m$|a&s$|a!x$|a!n$|aV$|a!q$|a~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO!}7sO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x'jX~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO!}7uO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x&|X~P!'WOz6gO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!}#yi#O#yi#X#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOT6iOz6gO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!S#yi!}#yi#O#yi#X#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOT6iOz6gO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!S#yi!b#yi!}#yi#O#yi#X#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO#S#QO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi#z#yi#{#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO#S#QO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi#z#yi#{#yi#|#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO#S#QO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi#z#yi#{#yi#|#yi#}#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO#S#QO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#X#yi#z#yi#{#yi#|#yi#}#yi$O#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#z#yi#{#yi#|#yi#}#yi$O#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO$T6tO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$U#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO$S6sO$T6tO$V6vO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$U#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WOz6gO$W6vO$z#dOT#yi!S#yi!b#yi!v#yi!}#yi#O#yi#S#yi#X#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi$V#yi!m#yi&s#yi!x#yi!n#yiV#yi!q#yi~P!'WO#S7zO~P>UO!m#Ta&s#Ta!x#Ta!n#Ta~PCqO!m'Pa&s'Pa!x'Pa!n'Pa~PCqO#S;dO#U;cO!x&WX!}&WX~P9yO!}7lO!x'Oa~Oz6gO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#Pi!S#Pi!b#Pi!}#Pi#O#Pi#X#Pi!m#Pi&s#Pi!x#Pi!n#PiV#Pi!q#Pi~P!'WOz6gO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#vi!S#vi!b#vi!}#vi#O#vi#X#vi!m#vi&s#vi!x#vi!n#viV#vi!q#vi~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}#xi#O#xi#X#xi!m#xi&s#xi!x#xi!n#xiV#xi!q#xi~P!'WO!}7sO!x%da~O!x&UX!}&UX~P>UO!}7uO!x&|a~Oz6gO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT!uq!S!uq!b!uq!v!uq!}!uq#O!uq#X!uq!m!uq&s!uq!x!uq!n!uqV!uq!q!uq~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x#Vi!}#Vi~P!'WOz6gO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT#Pq!S#Pq!b#Pq!}#Pq#O#Pq#X#Pq!m#Pq&s#Pq!x#Pq!n#PqV#Pq!q#Pq~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$jq#O$jq#X$jq!m$jq&s$jq!x$jq!n$jqV$jq!q$jq~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x&ka!}&ka~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x&Ua!}&Ua~P!'WOz6gO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dOT!uy!S!uy!b!uy!v!uy!}!uy#O!uy#X!uy!m!uy&s!uy!x!uy!n!uyV!uy!q!uy~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x#Vq!}#Vq~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$jy#O$jy#X$jy!m$jy&s$jy!x$jy!n$jyV$jy!q$jy~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$j!R#O$j!R#X$j!R!m$j!R&s$j!R!x$j!R!n$j!RV$j!R!q$j!R~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$j!Z#O$j!Z#X$j!Z!m$j!Z&s$j!Z!x$j!Z!n$j!ZV$j!Z!q$j!Z~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!}$j!c#O$j!c#X$j!c!m$j!c&s$j!c!x$j!c!n$j!cV$j!c!q$j!c~P!'WO#S8[O~P9yO#O8ZO!m'PX&s'PX!x'PX!n'PXV'PX!q'PX~PGSO!y$hO#S8`O~O!y$hO#S8aO~O#u6zO#w6{O!}&zX#O&zX#X&zXV&zX!q&zX~P0rOr6|O#S#oO#U#nO!}#xX#O#xX#X#xXV#xX!q#xX~P2yOr;iO#S9XO#U9VOT#xXz#xX!S#xX!b#xX!m#xX!o#xX!q#xX!v#xX#`#xX#a#xX#s#xX#z#xX#{#xX#|#xX#}#xX$O#xX$Q#xX$R#xX$S#xX$U#xX$V#xX$W#xX!n#xX!}#xX~P9yOr9WO#S9WO#U9WOT#xXz#xX!S#xX!b#xX!o#xX!v#xX#`#xX#a#xX#s#xX#z#xX#{#xX#|#xX#}#xX$O#xX$Q#xX$R#xX$S#xX$U#xX$V#xX$W#xX~P9yOr9]O#S;dO#U;cOT#xXz#xX!S#xX!b#xX!o#xX!q#xX!v#xX#`#xX#a#xX#s#xX#z#xX#{#xX#|#xX#}#xX$O#xX$Q#xX$R#xX$S#xX$U#xX$V#xX$W#xX#X#xX!x#xX!}#xX~P9yO$l$tO~P>UO!q7XO~P>UOT6iOz6gO!S6jO!b6kO!v8sO#O7iO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!x'PX!}'PX~P!'WOP6]OU^O[9WOo>SOs#hOx9WOy9WO}`O!O]O!Q:lO!T9WO!U9WO!V9WO!Y9WO!c8hO!s#gO!y[O#W_O#bhO#daO#ebO#peO$T:iO$]9WO$^:iO$aqO$z:nO${!OO~P$;lO!}7lO!x'OX~O#S9yO~P>UOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$Xa#X$Xa!x$Xa!}$Xa~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$Ya#X$Ya!x$Ya!}$Ya~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$Za#X$Za!x$Za!}$Za~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$[a#X$[a!x$[a!}$[a~P!'WOz8tO$z#dOT$[a!S$[a!b$[a!q$[a!v$[a#S$[a#z$[a#{$[a#|$[a#}$[a$O$[a$Q$[a$R$[a$S$[a$T$[a$U$[a$V$[a$W$[a#X$[a!x$[a!}$[a~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$_a#X$_a!x$_a!}$_a~P!'WO!q=dO#O7rO~OT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$ka#X$ka!x$ka!}$ka~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$|a#X$|a!x$|a!}$|a~P!'WOT8vOz8tO!S8wO!b8xO!q7wO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO~P!'WOz8tO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#X#yi!x#yi!}#yi~P!'WOz8tO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi#X#yi!x#yi!}#yi~P!'WOT8vOz8tO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!S#yi!q#yi#X#yi!x#yi!}#yi~P!'WOT8vOz8tO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!S#yi!b#yi!q#yi#X#yi!x#yi!}#yi~P!'WOz8tO#S#QO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#z#yi#{#yi#X#yi!x#yi!}#yi~P!'WOz8tO#S#QO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#z#yi#{#yi#|#yi#X#yi!x#yi!}#yi~P!'WOz8tO#S#QO$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#z#yi#{#yi#|#yi#}#yi#X#yi!x#yi!}#yi~P!'WOz8tO#S#QO$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#z#yi#{#yi#|#yi#}#yi$O#yi#X#yi!x#yi!}#yi~P!'WOz8tO$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi#X#yi!x#yi!}#yi~P!'WOz8tO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi#X#yi!x#yi!}#yi~P!'WOz8tO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi#X#yi!x#yi!}#yi~P!'WOz8tO$T9RO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$U#yi#X#yi!x#yi!}#yi~P!'WOz8tO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi#X#yi!x#yi!}#yi~P!'WOz8tO$S9QO$T9RO$V9TO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$U#yi#X#yi!x#yi!}#yi~P!'WOz8tO$W9TO$z#dOT#yi!S#yi!b#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi$V#yi#X#yi!x#yi!}#yi~P!'WOz8tO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#Pi!S#Pi!b#Pi!q#Pi#X#Pi!x#Pi!}#Pi~P!'WOz8tO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#vi!S#vi!b#vi!q#vi#X#vi!x#vi!}#vi~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q#xi#X#xi!x#xi!}#xi~P!'WO!q=eO#O7|O~Oz8tO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT!uq!S!uq!b!uq!q!uq!v!uq#X!uq!x!uq!}!uq~P!'WOz8tO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT#Pq!S#Pq!b#Pq!q#Pq#X#Pq!x#Pq!}#Pq~P!'WO!q=iO#O8TO~OT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$jq#X$jq!x$jq!}$jq~P!'WO#O8TO#l'SO~Oz8tO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dOT!uy!S!uy!b!uy!q!uy!v!uy#X!uy!x!uy!}!uy~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$jy#X$jy!x$jy!}$jy~P!'WO#O8UO#l'SO~OT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$j!R#X$j!R!x$j!R!}$j!R~P!'WO#O8XO#l'SO~OT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$j!Z#X$j!Z!x$j!Z!}$j!Z~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!q$j!c#X$j!c!x$j!c!}$j!c~P!'WO#S:bO~P>UO#O:aO!q'PX!x'PX~PGSO$l$tO~P$8YOP6]OU^O[9WOo>SOs#hOx9WOy9WO}`O!O]O!Q:lO!T9WO!U9WO!V9WO!Y9WO!c8hO!s#gO!y[O#W_O#bhO#daO#ebO#peO$T:iO$]9WO$^:iO$aqO$l$tO$z:nO${!OO~P$;lOo8_Os$lO~O#S<jO~P$8YOP6]OU^O[9WOo>SOs#hOx9WOy9WO}`O!O]O!Q:lO!T9WO!U9WO!V9WO!Y9WO!c8hO!s#gO!y[O#S<kO#W_O#bhO#daO#ebO#peO$T:iO$]9WO$^:iO$aqO$z:nO${!OO~P$;lOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$Xa!q$Xa!n$Xa!}$Xa~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$Ya!q$Ya!n$Ya!}$Ya~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$Za!q$Za!n$Za!}$Za~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$[a!q$[a!n$[a!}$[a~P!'WOz:pO$z#dOT$[a!S$[a!b$[a!m$[a!q$[a!v$[a#S$[a#z$[a#{$[a#|$[a#}$[a$O$[a$Q$[a$R$[a$S$[a$T$[a$U$[a$V$[a$W$[a!n$[a!}$[a~P!'WOz:qO$z#dOT$[a!S$[a!b$[a!v$[a#S$[a#z$[a#{$[a#|$[a#}$[a$O$[a$Q$[a$R$[a$S$[a$T$[a$U$[a$V$[a$W$[a~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$_a!q$_a!n$_a!}$_a~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$ka!q$ka!n$ka!}$ka~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$|a!q$|a!n$|a!}$|a~P!'WOz:pO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi!n#yi!}#yi~P!'WOz:qO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi~P!'WOz:pO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!n#yi!}#yi~P!'WOz:qO!v=nO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi~P!'WOT:tOz:pO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!S#yi!m#yi!q#yi!n#yi!}#yi~P!'WOT:uOz:qO!b:yO!v=nO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dO!S#yi~P!'WOT:tOz:pO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!S#yi!b#yi!m#yi!q#yi!n#yi!}#yi~P!'WOT:uOz:qO!v=nO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dO!S#yi!b#yi~P!'WOz:pO#S#QO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#z#yi#{#yi!n#yi!}#yi~P!'WOz:qO#S#QO#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#z#yi#{#yi~P!'WOz:pO#S#QO#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#z#yi#{#yi#|#yi!n#yi!}#yi~P!'WOz:qO#S#QO#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#z#yi#{#yi#|#yi~P!'WOz:pO#S#QO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#z#yi#{#yi#|#yi#}#yi!n#yi!}#yi~P!'WOz:qO#S#QO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#z#yi#{#yi#|#yi#}#yi~P!'WOz:pO#S#QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#z#yi#{#yi#|#yi#}#yi$O#yi!n#yi!}#yi~P!'WOz:qO#S#QO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#z#yi#{#yi#|#yi#}#yi$O#yi~P!'WOz:pO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi!n#yi!}#yi~P!'WOz:qO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi~P!'WOz:pO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi!n#yi!}#yi~P!'WOz:qO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi~P!'WOz:pO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi!n#yi!}#yi~P!'WOz:qO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi~P!'WOz:pO$T;[O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$U#yi!n#yi!}#yi~P!'WOz:qO$T;]O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$U#yi~P!'WOz:pO$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi!n#yi!}#yi~P!'WOz:qO$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi~P!'WOz:pO$S;YO$T;[O$V;`O$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$U#yi!n#yi!}#yi~P!'WOz:qO$S;ZO$T;]O$V;aO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$U#yi~P!'WOz:pO$W;`O$z#dOT#yi!S#yi!b#yi!m#yi!q#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi$V#yi!n#yi!}#yi~P!'WOz:qO$W;aO$z#dOT#yi!S#yi!b#yi!v#yi#S#yi#z#yi#{#yi#|#yi#}#yi$O#yi$Q#yi$R#yi$S#yi$T#yi$U#yi$V#yi~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x#Ta!}#Ta!q#Ta#X#Ta~P!'WOT8vOz8tO!S8wO!b8xO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO!x'Pa!}'Pa!q'Pa#X'Pa~P!'WOz:pO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#Pi!S#Pi!b#Pi!m#Pi!q#Pi!n#Pi!}#Pi~P!'WOz:qO!v=nO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#Pi!S#Pi!b#Pi~P!'WOz:pO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#vi!S#vi!b#vi!m#vi!q#vi!n#vi!}#vi~P!'WOz:qO!v=nO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#vi!S#vi!b#vi~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m#xi!q#xi!n#xi!}#xi~P!'WOz:pO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT!uq!S!uq!b!uq!m!uq!q!uq!v!uq!n!uq!}!uq~P!'WOz:qO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT!uq!S!uq!b!uq!v!uq~P!'WOz:pO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT#Pq!S#Pq!b#Pq!m#Pq!q#Pq!n#Pq!}#Pq~P!'WOz:qO!v=nO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT#Pq!S#Pq!b#Pq~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$jq!q$jq!n$jq!}$jq~P!'WOz:pO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dOT!uy!S!uy!b!uy!m!uy!q!uy!v!uy!n!uy!}!uy~P!'WOz:qO#S#QO#z:sO#{:{O#|:}O#};PO$O;RO$Q;VO$R;XO$S;ZO$T;]O$U;_O$V;aO$W;aO$z#dOT!uy!S!uy!b!uy!v!uy~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$jy!q$jy!n$jy!}$jy~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$j!R!q$j!R!n$j!R!}$j!R~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$j!Z!q$j!Z!n$j!Z!}$j!Z~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m$j!c!q$j!c!n$j!c!}$j!c~P!'WO#S=TO~P$8YOP6]OU^O[9WOo>SOs#hOx9WOy9WO}`O!O]O!Q:lO!T9WO!U9WO!V9WO!Y9WO!c8hO!s#gO!y[O#S=UO#W_O#bhO#daO#ebO#peO$T:iO$]9WO$^:iO$aqO$z:nO${!OO~P$;lOT6iOz6gO!S6jO!b6kO!v8sO#O=SO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO~P!'WOT6iOz6gO!S6jO!b6kO!v8sO#O=RO#S#QO#z6hO#{6lO#|6mO#}6nO$O6oO$Q6qO$R6rO$S6sO$T6tO$U6uO$V6vO$W6vO$z#dO!m'PX!q'PX!n'PX!}'PX~P!'WOT&zXz&zX!S&zX!b&zX!o&zX!q&zX!v&zX!y&zX#S&zX#W&zX#`&zX#a&zX#s&zX#z&zX#{&zX#|&zX#}&zX$O&zX$Q&zX$R&zX$S&zX$T&zX$U&zX$V&zX$W&zX$z&zX!}&zX~O#u9ZO#w9[O#X&zX!x&zX~P.8oO!y$hO#S=^O~O!q9hO~P>UO!y$hO#S=cO~O!q>OO#O9}O~OT8vOz8tO!S8wO!b8xO!q:OO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m#Ta!q#Ta!n#Ta!}#Ta~P!'WOT:tOz:pO!S:vO!b:xO!v=mO#S#QO#z:rO#{:zO#|:|O#};OO$O;QO$Q;UO$R;WO$S;YO$T;[O$U;^O$V;`O$W;`O$z#dO!m'Pa!q'Pa!n'Pa!}'Pa~P!'WO!q>PO#O:RO~O!q>QO#O:YO~O#O:YO#l'SO~O#O:ZO#l'SO~O#O:_O#l'SO~O#u;eO#w;gO!m&zX!n&zX~P.8oO#u;fO#w;hOT&zXz&zX!S&zX!b&zX!o&zX!v&zX!y&zX#S&zX#W&zX#`&zX#a&zX#s&zX#z&zX#{&zX#|&zX#}&zX$O&zX$Q&zX$R&zX$S&zX$T&zX$U&zX$V&zX$W&zX$z&zX~O!q;tO~P>UO!q;uO~P>UO!q>XO#O<oO~O!q>YO#O9WO~OT8vOz8tO!S8wO!b8xO!q<pO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO~P!'WOT8vOz8tO!S8wO!b8xO!q<qO!v=ZO#S#QO#z8uO#{8yO#|8zO#}8{O$O8|O$Q9OO$R9PO$S9QO$T9RO$U9SO$V9TO$W9TO$z#dO~P!'WO!q>ZO#O<vO~O!q>[O#O<{O~O#O<{O#l'SO~O#O9WO#l'SO~O#O<|O#l'SO~O#O=PO#l'SO~O!y$hO#S=|O~Oo=[Os$lO~O!y$hO#S=}O~O!y$hO#S>UO~O!y$hO#S>VO~O!y$hO#S>WO~Oo={Os$lO~Oo>TOs$lO~Oo>SOs$lO~O%O$U$}$d!d$V#b%V#e'g!s#d~",
     goto: "%&y'mPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP'nP'uPP'{(OPPP(hP(OP(O*ZP*ZPP2W:j:mPP*Z:sBpPBsPBsPP:sCSCVCZ:s:sPPPC^PP:sK^!$S!$S:s!$WP!$W!$W!%UP!.]!7pP!?oP*ZP*Z*ZPPPPP!?rPPPPPPP*Z*Z*Z*ZPP*Z*ZP!E]!GRP!GV!Gy!GR!GR!HP*Z*ZP!HY!Hl!Ib!J`!Jd!J`!Jo!J}!J}!KV!KY!KY*ZPP*ZPP!K^#%[#%[#%`P#%fP(O#%j(O#&S#&V#&V#&](O#&`(O(O#&f#&i(O#&r#&u(O(O(O(O(O#&x(O(O(O(O(O(O(O(O(O#&{!KR(O(O#'_#'o#'r(O(OP#'u#'|#(S#(o#(y#)P#)Z#)b#)h#*d#4X#5T#5Z#5a#5k#5q#5w#6]#6c#6i#6o#6u#6{#7R#7]#7g#7m#7s#7}PPPPPPPP#8T#8X#8}#NO#NR#N]$(f$(r$)X$)_$)b$)e$)k$,X$5v$>_$>b$>h$>k$>n$>w$>{$?X$?k$Bk$CO$C{$K{PP%%y%%}%&Z%&p%&vQ!nQT!qV!rQUOR%x!mRVO}!hPVX!S!j!r!s!w$}%P%S%U(`+r+u.b.d.l0`0a0i1a|!hPVX!S!j!r!s!w$}%P%S%U(`+r+u.b.d.l0`0a0i1aQ%^!ZQ%g!aQ%l!eQ'd$dQ'q$iQ)[%kQ*y'tQ,](xU-n*v*x+OQ.W+cQ.{,[S/t-s-tQ0T.SS0}/s/wQ1V0RQ1o1OR2P1p0u!OPVX[_bjklmnopxyz!S!W!X!Y!]!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%}&S&W&p&s&t&w'O'U'Y'z(O(`(l({)P)i)p)t)v*P*T*U*o+P+r+u+z,T,V,X-Q-R-d-k-z.b.d.l.t/c/i/m/x0V0`0a0d0e0i0v1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=n0t!OPVX[_bjklmnopxyz!S!W!X!Y!]!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%}&S&W&p&s&t&w'O'U'Y'z(O(`(l({)P)i)p)t)v*P*T*U*o+P+r+u+z,T,V,X-Q-R-d-k-z.b.d.l.t/c/i/m/x0V0`0a0d0e0i0v1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=nQ#j]Q$}!PQ%O!QQ%P!RQ,S(kQ.b+sR.f+vR&q#jQ)z&pR/a-R0uhPVX[_bjklmnopxyz!S!W!X!Y!]!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%}&S&W&p&s&t&w'O'U'Y'z(O(`(l({)P)i)p)t)v*P*T*U*o+P+r+u+z,T,V,X-Q-R-d-k-z.b.d.l.t/c/i/m/x0V0`0a0d0e0i0v1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=nR#l^k#p_j#k#s&s&w3x3y7l8f8g8h8iR#u`T&|#t'OR-Y*U0thPVX[_bjklmnopxyz!S!W!X!Y!]!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%}&S&W&p&s&t&w'O'U'Y'z(O(`(l({)P)i)p)t)v*P*T*U*o+P+r+u+z,T,V,X-Q-R-d-k-z.b.d.l.t/c/i/m/x0V0`0a0d0e0i0v1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=nR#va-r#OZ#f#m#w$V$W$X$Y$Z$[$u$v%W%Y%[%`%s%|&O&Q&U&^&_&`&a&b&c&d&e&f&g&h&i&j&k&l&m&u&v&{'X'Z'[(](p)q)s)u*O*[*^+S+V,`,c,y,{,}-V-W-X-i-x.k.w/`/h/n/y0r0u0x1Q1X1d1m1q2q2r2x2y2z2{2|2}3O3Q3R3S3T3U3V3W3X3Y3Z3[3]3^3_3`3a3b3c3e3f3i3j3l3m3n3q3r3t4Y4y4z4{4|4}5O5P5R5S5T5U5V5W5X5Y5Z5[5]5^5_5`5a5b5c5d5f5g5j5k5m5n5o5r5s5u6R6V6}7O7P7Q7R7S7U7V7W7Y7Z7[7]7^7_7`7a7b7c7d7e7f7g7h7j7k7n7p7q7x7y7{7}8O8P8Q8R8S8V8W8Y8]9U9^9_9`9a9b9c9f9g9i9j9k9l9m9n9o9p9q9r9s9t9u9v9w9x9z9{:P:Q:T:V:W:[:^:`:c;j;k;l;m;n;o;p;s;v;w;x;y;z;{;|;}<O<P<Q<R<S<T<U<V<W<X<Y<Z<[<]<^<_<`<a<b<c<d<e<f<g<h<i<l<m<n<r<s<t<u<w<x<y<z<}=O=Q=V=W=_=`=a=q=rQ']$]Y(Q$s7T9e;q;rS(U2Z6QR(X$tT&X!})v!w$Qg#}$h'S'i'm'r(P(T)Z*f*s*z*}+Q+]+`+g,Z-r-u-{.Q/u1P5}6O6P6]8b8c8d=d=e=i>O>P>Q>X>Y>Z>[3ZfPVX[_bgjklmnoprxyz!S!W!X!Y!]!e!f!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t#}$R$S$U$h$y$}%P%R%S%T%U%c%p%r%}&S&W&p&s&t&w'O'S'U'Y'^'i'm'r'z(O(P(R(S(T(`(l({)P)Z)_)c)i)p)t)v*P*T*U*f*o*s*z*}+P+Q+]+`+d+g+r+u+z,T,V,X,Z,u-Q-R-d-k-r-u-z-{-|.Q.b.d.l.t/[/c/i/m/u/x0V0`0a0d0e0i0v1P1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w5}6O6P6T6]6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8b8c8d8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=d=e=i=m=n>O>P>Q>X>Y>Z>[3scPVX[_bdegjklmnoprxyz!S!W!X!Y!]!e!f!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t#{#}$R$S$U$h$y$}%P%R%S%T%U%c%m%n%p%r%}&S&W&p&s&t&w'O'S'U'Y'^'i'm'r'z(O(P(R(S(T(`(l({)P)Z)^)_)c)g)h)i)p)t)v*P*T*U*f*o*s*z*}+P+Q+]+`+d+g+r+u+z,T,V,X,Z,u,x-Q-R-d-k-r-u-z-{-|.Q.b.d.l.t/[/c/i/m/u/x0V0`0a0d0e0i0v1P1R1]1a2W2X2Y2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w5}6O6P6T6]6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8b8c8d8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=d=e=i=m=n>O>P>Q>X>Y>Z>[0phPVX[_bjklmnopxyz!S!W!X!Y!]!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%}&S&W&p&s&t&w'O'U'Y'z(O(`(l({)P)i)p)t)v*P*T*U*o+P+r+u+z,T,V,X-Q-R-d-k-z.b.d.l.t/c/i/m/x0`0a0d0e0i0v1R1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=nT1Z0V1]R&]#P!n#[Z#f#w$V$W$X$Y$[$s$v%W%Y%[&Q&_&`&a&b&c&d&e&f'X'Z'[(])q)s*^+V,{-x/y1Q1d1q7j7k!Y2j2Z2x2y2z2{2}3O3Q3R3S3T3U3V3W3X3a3b3c3e3f3i3j3l3m3n3q3r3t!^4m2r4y4z4{4|5O5P5R5S5T5U5V5W5X5Y5b5c5d5f5g5j5k5m5n5o5r5s5u6Q6R#Q6p#m%`%s&u&v&{(p*O+S,`,c,y-V-X.w2q6}7O7P7Q7S7T7U7Y7Z7[7]7^7_7`7a7n7p7q7x7{7}8Q8S8V8W8Y8]9U:c=V=W#^8}%|&O&U)u,}-W-i/h/n0r0u0x1m4Y6V7V7W7y8O8P8R9^9_9`9a9c9e9f9g9i9j9k9l9m9n9o9p9x9z9{:P:Q:T:V:W:[:^:`<f<g=_=q=r!^;S.k/`;j;k;l;m;p;q;s;v;x;z;|<O<Q<S<U<h<l<n<r<t<w<x<z<}=O=Q=`=ao;T1X;r;w;y;{;}<P<R<T<V<i<m<s<u<yS$iu#hQ$qwU't$j$l&oQ'v$kS'x$m$rQ*|'uQ+O'wQ+R'yQ4X5xS4[5z5{Q4]5|Q6U8^S6W8_8`Q6X8aQ9d=YS9|=[=^Q:S=cQ=]=yS=b={=|Q=f=}Q=o>RS=p>S>VS=s>T>UR=t>WT'n$h*s!csPVXt!S!j!r!s!w$h$}%P%S%U'i(T(`)W*s+]+g+r+u,g,k.b.d.l0`0a0i1aQ$^rR*`'^Q*x'sQ-t*{R/w-wQ(W$tQ)U%hQ)n%vQ*i'fQ+k(XR-c*jQ(V$tQ)Y%jQ)m%vQ*e'eS*h'f)nS+j(W(XS-b*i*jQ.]+kQ/T,mQ/e-`R/g-cQ(U$tQ)T%hQ)V%iQ)l%vU*g'f)m)nU+i(V(W(XQ,f)UU-a*h*i*jS.[+j+kS/f-b-cQ0X.]R0t/gT+e(T+g[%e!_$b'c+a.R0QR,d)Qb$ov(T+[+]+`+g.P.Q0PR+T'{S+e(T+gT,j)W,kR0W.XT1[0V1]0w|PVX[_bjklmnopxyz!S!W!X!Y!]!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%}&S&W&p&s&t&w'O'U'Y'z(O(`(l({)P)i)p)t)v*P*T*U*o+P+r+u+z,T,V,X,_-Q-R-d-k-z.b.d.l.t/c/i/m/x0V0`0a0d0e0i0v1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=nT$x{${Q+p([R._+nT$z{${Q(b$}Q(j%PQ(o%SQ(r%UQ.j+yQ0].fQ0^.iR1g0iR(e%OX+|(c(d+},PR(f%OX(h%P%S%U0iR%S!T_%a!]%R(l,T,V.t0dR%U!UR.x,XR,[(wQ)X%jS*d'e)YS-_*e,mS/d-`/TR0s/eQ%q!fU)]%m%n%rU,o)^)g)hR/_,xR)d%pR/],uSSO!mR!oSQ!rVR%y!rQ!jPS!sV!rQ!wX[%u!j!s!w+r0a1aQ+r(`Q0a.lR1a0`Q)j%sS,z)j7vR7v7WQ-S)zR/b-SQ&x#qS*R&x7mR7m9YS*V&{&|R-Z*VQ)w&YR-P)w!l'T#|'h*n*q*v+W+[,m-`-s-v-y.P.z/s/v/z0P1O1p4^4_4`5y6Y6Z6[:U:X:]=g=h=j=u=v=w=xR*Z'T1^dPVX[_bjklmnoprxyz!S!W!X!Y!]!e!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%p%}&S&W&p&s&t&w'O'U'Y'^'z(O(R(S(`(l({)P)_)c)i)p)t)v*P*T*U*o+P+d+r+u+z,T,V,X,u-Q-R-d-k-z-|.b.d.l.t/[/c/i/m/x0V0`0a0d0e0i0v1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=n`#zd#{%m)^)g,x2W2YQ#{eQ%m!fQ)^%nQ)g%rQ,x)h!v2Wg#}$h'S'i'm'r(P(T)Z*f*s*z*}+Q+]+`+g,Z-r-u-{.Q/u1P5}6O6P6]8b8c8d=d=e=i>O>P>Q>X>Y>Z>[R2Y2X|tPVX!S!j!r!s!w$}%P%S%U(`+r+u.b.d.l0`0a0i1aW$`t'i+],gS'i$h*sS+](T+gT,g)W,kQ'_$^R*a'_Q*t'oR-m*tQ/p-oS0{/p0|R0|/qQ-}+XR/|-}Q+g(TR.Y+gS+`(T+gS,h)W,kQ.Q+]W.T+`,h.Q/OR/O,gQ)R%eR,e)RQ'|$oR+U'|Q1]0VR1w1]Q${{R(^${Q+t(aR.c+tQ+w(bR.g+wQ+}(cQ,P(dT.m+},PQ(|%`S,a(|7tR7t7VQ(y%^R,^(yQ,k)WR/R,kQ)`%oS,q)`/WR/W,rQ,v)dR/^,vT!uV!rj!iPVX!j!r!s!w(`+r.l0`0a1aQ%Q!SQ(a$}W(h%P%S%U0iQ.e+uQ0Z.bR0[.d|ZPVX!S!j!r!s!w$}%P%S%U(`+r+u.b.d.l0`0a0i1aQ#f[U#m_#s&wQ#wbQ$VkQ$WlQ$XmQ$YnQ$ZoQ$[pQ$sx^$uy2_4b6e8q:m:nQ$vzQ%W!WQ%Y!XQ%[!YW%`!]%R(l,VU%s!g&p-RQ%|!yQ&O!zQ&Q!{S&U!})v^&^#R2a4d6g8t:p:qQ&_#SQ&`#TQ&a#UQ&b#VQ&c#WQ&d#XQ&e#YQ&f#ZQ&g#[Q&h#]Q&i#^Q&j#_Q&k#`Q&l#aQ&m#bQ&u#nQ&v#oS&{#t'OQ'X$RQ'Z$SQ'[$UQ(]$yQ(p%TQ)q%}Q)s&SQ)u&WQ*O&tS*['U4ZQ*^'Y^*_2[3u5v8Z:a=R=SQ+S'zQ+V(OQ,`({Q,c)PQ,y)iQ,{)pQ,})tQ-V*PQ-W*TQ-X*U^-]2]3v5w8[:b=T=UQ-i*oQ-x+PQ.k+zQ.w,XQ/`-QQ/h-dQ/n-kQ/y-zQ0r/cQ0u/iQ0x/mQ1Q/xU1X0V1]9WQ1d0eQ1m0vQ1q1RQ2Z2^Q2qjQ2r3yQ2x3zQ2y3|Q2z4OQ2{4QQ2|4SQ2}4UQ3O2`Q3Q2bQ3R2cQ3S2dQ3T2eQ3U2fQ3V2gQ3W2hQ3X2iQ3Y2jQ3Z2kQ3[2lQ3]2mQ3^2nQ3_2oQ3`2pQ3a2sQ3b2tQ3c2uQ3e2vQ3f2wQ3i3PQ3j3dQ3l3gQ3m3hQ3n3kQ3q3oQ3r3pQ3t3sQ4Y4WQ4y3{Q4z3}Q4{4PQ4|4RQ4}4TQ5O4VQ5P4cQ5R4eQ5S4fQ5T4gQ5U4hQ5V4iQ5W4jQ5X4kQ5Y4lQ5Z4mQ5[4nQ5]4oQ5^4pQ5_4qQ5`4rQ5a4sQ5b4tQ5c4uQ5d4vQ5f4wQ5g4xQ5j5QQ5k5eQ5m5hQ5n5iQ5o5lQ5r5pQ5s5qQ5u5tQ6Q4aQ6R3xQ6V6TQ6}6^Q7O6_Q7P6`Q7Q6aQ7R6bQ7S6cQ7T6dQ7U6fU7V,T.t0dQ7W%cQ7Y6hQ7Z6iQ7[6jQ7]6kQ7^6lQ7_6mQ7`6nQ7a6oQ7b6pQ7c6qQ7d6rQ7e6sQ7f6tQ7g6uQ7h6vQ7j6xQ7k6yQ7n6zQ7p6{Q7q6|Q7x7XQ7y7iQ7{7oQ7}7rQ8O7sQ8P7uQ8Q7wQ8R7zQ8S7|Q8V8TQ8W8UQ8Y8XQ8]8fU9U#k&s7lQ9^8jQ9_8kQ9`8lQ9a8mQ9b8nQ9c8oQ9e8pQ9f8rQ9g8sQ9i8uQ9j8vQ9k8wQ9l8xQ9m8yQ9n8zQ9o8{Q9p8|Q9q8}Q9r9OQ9s9PQ9t9QQ9u9RQ9v9SQ9w9TQ9x9ZQ9z9[Q9{9]Q:P9hQ:Q9yQ:T9}Q:V:OQ:W:RQ:[:YQ:^:ZQ:`:_Q:c8iQ;j:dQ;k:eQ;l:fQ;m:gQ;n:hQ;o:iQ;p:jQ;q:kQ;r:lQ;s:oQ;v:rQ;w:sQ;x:tQ;y:uQ;z:vQ;{:wQ;|:xQ;}:yQ<O:zQ<P:{Q<Q:|Q<R:}Q<S;OQ<T;PQ<U;QQ<V;RQ<W;SQ<X;TQ<Y;UQ<Z;VQ<[;WQ<];XQ<^;YQ<_;ZQ<`;[Q<a;]Q<b;^Q<c;_Q<d;`Q<e;aQ<f;cQ<g;dQ<h;eQ<i;fQ<l;gQ<m;hQ<n;iQ<r;tQ<s;uQ<t<jQ<u<kQ<w<oQ<x<pQ<y<qQ<z<vQ<}<{Q=O<|Q=Q=PQ=V8hQ=W8gQ=_=ZQ=`9VQ=a9XQ=q=mR=r=nR){&pQ%t!gQ)O%cT)y&p-R$SiPVX[bklmnopxyz!S!W!X!Y!j!r!s!w!{#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b$R$S$U$y$}%P%S%U%}&S'Y(O(`)p+P+r+u-z.b.d.l/x0`0a0e0i1R1a2[2]6x6y!t3w'U2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3z3|4O4Q4S4U5v5w!x6S3u3v3x3y3{3}4P4R4T4V4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t$O8e_j!]!g#k#n#o#s#t%R%T&p&s&t&w'O'z(l({)P)i*P*U,V,X-R6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6z6{6|7X7l7o7r7w7|8T8U8X8Z8[8f8g8h8i#|=X!y!z!}%c&W)t)v*T*o,T-d-k.t/c/i/m0d0v4W6T7i7s7u7z8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9Z9[9]9h9y9}:O:R:Y:Z:_:a:b;c;d=Z=m=n!v=k+z-Q9V9X:d:e:f:g:h:j:k:m:o:p:r:t:v:x:z:|;O;Q;S;U;W;Y;[;^;`;e;g;i;t<j<o<p<v<{<|=P=R=T!]=l0V1]9W:i:l:n:q:s:u:w:y:{:};P;R;T;V;X;Z;];_;a;f;h;u<k<q=S=UQ#r_Q&r#kQ&z#sR)}&sS#q_#s^$Tj3x3y8f8g8h8iS*Q&w7lT9Y#k&sQ&}#tR*X'OR&T!|R&Z!}Q&Y!}R-O)vQ#|gQ'V#}S'h$h*sQ*Y'SQ*n'iQ*q'mQ*v'rQ+W(PS+[(T+gQ,m)ZQ-`*fQ-s*zQ-v*}Q-y+QS.P+]+`Q.z,ZQ/s-rQ/v-uQ/z-{Q0P.QQ1O/uQ1p1PQ4^5}Q4_6OQ4`6PQ5y6]Q6Y8bQ6Z8cQ6[8dQ:U=dQ:X=eQ:]=iQ=g>OQ=h>PQ=j>QQ=u>XQ=v>YQ=w>ZR=x>[0t!OPVX[_bjklmnopxyz!S!W!X!Y!]!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%}&S&W&p&s&t&w'O'U'Y'z(O(`(l({)P)i)p)t)v*P*T*U*o+P+r+u+z,T,V,X-Q-R-d-k-z.b.d.l.t/c/i/m/x0V0`0a0d0e0i0v1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=n!v$Pg#}$h'S'i'm'r(P(T)Z*f*s*z*}+Q+]+`+g,Z-r-u-{.Q/u1P5}6O6P6]8b8c8d=d=e=i>O>P>Q>X>Y>Z>[S$]r'^Q%k!eS%o!f%rQ)b%pU+X(R(S+dQ,p)_Q,t)cQ/Z,uQ/{-|R0p/[|vPVX!S!j!r!s!w$}%P%S%U(`+r+u.b.d.l0`0a0i1a#U#i[bklmnopxyz!W!X!Y!{#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b$R$S$U$y%}&S'Y(O)p+P-z/x0e1R2[2]6x6yd+^(T)W+]+`+g,g,h,k.Q/O!t6w'U2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3z3|4O4Q4S4U5v5w!x;b3u3v3x3y3{3}4P4R4T4V4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t$O=z_j!]!g#k#n#o#s#t%R%T&p&s&t&w'O'z(l({)P)i*P*U,V,X-R6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6z6{6|7X7l7o7r7w7|8T8U8X8Z8[8f8g8h8i#|>]!y!z!}%c&W)t)v*T*o,T-d-k.t/c/i/m0d0v4W6T7i7s7u7z8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9Z9[9]9h9y9}:O:R:Y:Z:_:a:b;c;d=Z=m=n!v>^+z-Q9V9X:d:e:f:g:h:j:k:m:o:p:r:t:v:x:z:|;O;Q;S;U;W;Y;[;^;`;e;g;i;t<j<o<p<v<{<|=P=R=T!]>_0V1]9W:i:l:n:q:s:u:w:y:{:};P;R;T;V;X;Z;];_;a;f;h;u<k<q=S=UR'p$hQ'o$hR-l*sR$_rR-q*wQ+Y(RQ+Z(SR.X+dT+f(T+ge+_(T)W+]+`+g,g,h,k.Q/OQ%f!_Q'b$bQ*c'cQ.U+aQ0S.RR1U0QQ#eZQ%X!WQ%Z!XQ%]!YQ'}$pQ(s%VQ(t%WQ(u%YQ(v%[Q(}%bQ)S%fQ)[%kQ)f%qQ)k%tQ*b'bQ,n)]Q-^*cQ.V+bQ.W+cQ.e+xQ.o,QQ.p,RQ.q,SQ.v,WQ.y,YQ.},bQ/U,oQ/}.OQ0T.SQ0U.UQ0W.XQ0[.hQ0k/QQ0q/_Q1S0OQ1V0RQ1W0SQ1`0_Q1h0jQ1r1TQ1s1UQ1v1[Q1y1_Q1}1jQ2T1{R2U1|Q$pvS+b(T+gU.O+[+]+`S0O.P.QR1T0P|!aPVX!S!j!r!s!w$}%P%S%U(`+r+u.b.d.l0`0a0i1aQ$dtW+c(T)W+g,kW.S+]+`,g,hT0R.Q/O0t!OPVX[_bjklmnopxyz!S!W!X!Y!]!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%}&S&W&p&s&t&w'O'U'Y'z(O(`(l({)P)i)p)t)v*P*T*U*o+P+r+u+z,T,V,X-Q-R-d-k-z.b.d.l.t/c/i/m/x0V0`0a0d0e0i0v1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=nR.|,_0w}PVX[_bjklmnopxyz!S!W!X!Y!]!g!j!r!s!w!y!z!{!}#R#S#T#U#V#W#X#Y#Z#[#]#^#_#`#a#b#k#n#o#s#t$R$S$U$y$}%P%R%S%T%U%c%}&S&W&p&s&t&w'O'U'Y'z(O(`(l({)P)i)p)t)v*P*T*U*o+P+r+u+z,T,V,X,_-Q-R-d-k-z.b.d.l.t/c/i/m/x0V0`0a0d0e0i0v1R1]1a2[2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2s2t2u2v2w3P3d3g3h3k3o3p3s3u3v3x3y3z3{3|3}4O4P4Q4R4S4T4U4V4W4Z4a4b4c4d4e4f4g4h4i4j4k4l4m4n4o4p4q4r4s4t4u4v4w4x5Q5e5h5i5l5p5q5t5v5w6T6^6_6`6a6b6c6d6e6f6g6h6i6j6k6l6m6n6o6p6q6r6s6t6u6v6x6y6z6{6|7X7i7l7o7r7s7u7w7z7|8T8U8X8Z8[8f8g8h8i8j8k8l8m8n8o8p8q8r8s8t8u8v8w8x8y8z8{8|8}9O9P9Q9R9S9T9V9W9X9Z9[9]9h9y9}:O:R:Y:Z:_:a:b:d:e:f:g:h:i:j:k:l:m:n:o:p:q:r:s:t:u:v:w:x:y:z:{:|:};O;P;Q;R;S;T;U;V;W;X;Y;Z;[;];^;_;`;a;c;d;e;f;g;h;i;t;u<j<k<o<p<q<v<{<|=P=R=S=T=U=Z=m=nT$w{${Q(i%PQ(n%SQ(q%UR1f0iQ%b!]Q(m%RQ,U(lQ.s,TQ.u,VQ0c.tR1c0dQ%q!fR)]%rR)e%p",
     nodeNames: "⚠ ( HeredocString EscapeSequence abstract LogicOp array as Boolean break case catch clone const continue default declare do echo else elseif enddeclare endfor endforeach endif endswitch endwhile enum extends final finally fn for foreach from function global goto if implements include include_once LogicOp insteadof interface list match namespace new null LogicOp print require require_once return switch throw trait try unset use var Visibility while LogicOp yield LineComment BlockComment TextInterpolation PhpClose Text PhpOpen Template TextInterpolation EmptyStatement ; } { Block : LabelStatement Name ExpressionStatement ConditionalExpression LogicOp MatchExpression ) ( ParenthesizedExpression MatchBlock MatchArm , => AssignmentExpression ArrayExpression ValueList & VariadicUnpacking ... Pair [ ] ListExpression ValueList Pair Pair SubscriptExpression MemberExpression -> ?-> VariableName DynamicVariable $ ${ CallExpression ArgList NamedArgument SpreadArgument CastExpression UnionType LogicOp OptionalType NamedType QualifiedName \\ NamespaceName ScopedExpression :: ClassMemberName AssignOp UpdateExpression UpdateOp YieldExpression BinaryExpression LogicOp LogicOp LogicOp BitOp BitOp BitOp CompareOp CompareOp BitOp ArithOp ConcatOp ArithOp ArithOp IncludeExpression RequireExpression CloneExpression UnaryExpression ControlOp LogicOp PrintIntrinsic FunctionExpression static ParamList Parameter #[ Attributes Attribute VariadicParameter PropertyParameter UseList ArrowFunction NewExpression class BaseClause ClassInterfaceClause DeclarationList ConstDeclaration VariableDeclarator PropertyDeclaration VariableDeclarator MethodDeclaration UseDeclaration UseList UseInsteadOfClause UseAsClause UpdateExpression ArithOp ShellExpression ThrowExpression Integer Float String MemberExpression SubscriptExpression UnaryExpression ArithOp Interpolation String IfStatement ColonBlock SwitchStatement Block CaseStatement DefaultStatement ColonBlock WhileStatement EmptyStatement DoStatement ForStatement ForSpec SequenceExpression ForeachStatement ForSpec Pair GotoStatement ContinueStatement BreakStatement ReturnStatement TryStatement CatchDeclarator DeclareStatement EchoStatement UnsetStatement ConstDeclaration FunctionDefinition ClassDeclaration InterfaceDeclaration TraitDeclaration EnumDeclaration EnumBody EnumCase NamespaceDefinition NamespaceUseDeclaration UseGroup UseClause UseClause GlobalDeclaration FunctionStaticDeclaration Program",
     maxTerm: 304,
     nodeProps: [
       ["group", -36,2,8,49,81,83,85,88,93,94,102,106,107,110,111,114,118,123,126,130,132,133,147,148,149,150,153,154,164,165,179,181,182,183,184,185,191,"Expression",-28,74,78,80,82,192,194,199,201,202,205,208,209,210,211,212,214,215,216,217,218,219,220,221,222,225,226,230,231,"Statement",-3,119,121,122,"Type"],
       ["openedBy", 69,"phpOpen",76,"{",86,"(",101,"#["],
       ["closedBy", 71,"phpClose",77,"}",87,")",158,"]"]
     ],
     propSources: [phpHighlighting],
     skippedNodes: [0],
     repeatNodeCount: 29,
     tokenData: "!F|_R!]OX$zXY&^YZ'sZ]$z]^&^^p$zpq&^qr)Rrs+Pst+otu2buv5evw6rwx8Vxy>]yz>yz{?g{|@}|}Bb}!OCO!O!PDh!P!QKT!Q!R!!o!R![!$q![!]!,P!]!^!-a!^!_!-}!_!`!1S!`!a!2d!a!b!3t!b!c!7^!c!d!7z!d!e!9W!e!}!7z!}#O!;^#O#P!;z#P#Q!<h#Q#R!=U#R#S!7z#S#T!=u#T#U!7z#U#V!9W#V#o!7z#o#p!Co#p#q!D]#q#r!Er#r#s!F`#s$f$z$f$g&^$g&j!7z&j$I_$z$I_$I`&^$I`$KW$z$KW$KX&^$KX;'S$z;'S;=`&W<%l?HT$z?HT?HU&^?HUO$zP%PV&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zP%kO&wPP%nWOY$zYZ%fZ!a$z!b;'S$z;'S;=`&W<%l~$z~O$z~~%fP&ZP;=`<%l$zV&ed&wP&vUOX$zXY&^YZ'sZ]$z]^&^^p$zpq&^q!^$z!^!_%k!_$f$z$f$g&^$g$I_$z$I_$I`&^$I`$KW$z$KW$KX&^$KX;'S$z;'S;=`&W<%l?HT$z?HT?HU&^?HUO$zV'zW&wP&vUXY(dYZ(d]^(dpq(d$f$g(d$I_$I`(d$KW$KX(d?HT?HU(dU(iW&vUXY(dYZ(d]^(dpq(d$f$g(d$I_$I`(d$KW$KX(d?HT?HU(dR)YW$^Q&wPOY$zYZ%fZ!^$z!^!_%k!_!`)r!`;'S$z;'S;=`&W<%lO$zR)yW$QQ&wPOY$zYZ%fZ!^$z!^!_%k!_!`*c!`;'S$z;'S;=`&W<%lO$zR*jV$QQ&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV+YV'fS&wP'gQOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV+v]&wP!dUOY,oYZ%fZ],o]^$z^!^,o!^!_-i!_!a,o!a!b/y!b!},o!}#O1f#O;'S,o;'S;=`/s<%lO,oV,vZ&wP!dUOY,oYZ%fZ],o]^$z^!^,o!^!_-i!_!a,o!a!b/y!b;'S,o;'S;=`/s<%lO,oV-nZ!dUOY,oYZ%fZ],o]^$z^!a,o!a!b.a!b;'S,o;'S;=`/s<%l~,o~O,o~~%fU.dWOY.|YZ/nZ].|]^/n^!`.|!a;'S.|;'S;=`/h<%lO.|U/RV!dUOY.|Z].|^!a.|!a!b.a!b;'S.|;'S;=`/h<%lO.|U/kP;=`<%l.|U/sO!dUV/vP;=`<%l,oV0OZ&wPOY,oYZ0qZ],o]^0x^!^,o!^!_-i!_!`,o!`!a$z!a;'S,o;'S;=`/s<%lO,oV0xO&wP!dUV1PV&wP!dUOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV1oZ&wP$dQ!dUOY,oYZ%fZ],o]^$z^!^,o!^!_-i!_!a,o!a!b/y!b;'S,o;'S;=`/s<%lO,o_2i`&wP#dQOY$zYZ%fZ!^$z!^!_%k!_!c$z!c!}3k!}#R$z#R#S3k#S#T$z#T#o3k#o#p4w#p$g$z$g&j3k&j;'S$z;'S;=`&W<%lO$z_3ra&wP#b^OY$zYZ%fZ!Q$z!Q![3k![!^$z!^!_%k!_!c$z!c!}3k!}#R$z#R#S3k#S#T$z#T#o3k#o$g$z$g&j3k&j;'S$z;'S;=`&W<%lO$zV5OV&wP#eUOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR5lW&wP$VQOY$zYZ%fZ!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zR6]V#wQ&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV6yY#SU&wPOY$zYZ%fZv$zvw7iw!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zR7pV#|Q&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR8^Z&wP%VQOY8VYZ9PZw8Vwx;_x!^8V!^!_;{!_#O8V#O#P<y#P;'S8V;'S;=`>V<%lO8VR9WV&wP%VQOw9mwx:Xx#O9m#O#P:^#P;'S9m;'S;=`;X<%lO9mQ9rV%VQOw9mwx:Xx#O9m#O#P:^#P;'S9m;'S;=`;X<%lO9mQ:^O%VQQ:aRO;'S9m;'S;=`:j;=`O9mQ:oW%VQOw9mwx:Xx#O9m#O#P:^#P;'S9m;'S;=`;X;=`<%l9m<%lO9mQ;[P;=`<%l9mR;fV&wP%VQOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR<Q]%VQOY8VYZ9PZw8Vwx;_x!a8V!a!b9m!b#O8V#O#P<y#P;'S8V;'S;=`>V<%l~8V~O8V~~%fR=OW&wPOY8VYZ9PZ!^8V!^!_;{!_;'S8V;'S;=`=h;=`<%l9m<%lO8VR=mW%VQOw9mwx:Xx#O9m#O#P:^#P;'S9m;'S;=`;X;=`<%l8V<%lO9mR>YP;=`<%l8VR>dV!yQ&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV?QV!xU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR?nY&wP$VQOY$zYZ%fZz$zz{@^{!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zR@eW$WQ&wPOY$zYZ%fZ!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zRAUY$TQ&wPOY$zYZ%fZ{$z{|At|!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zRA{V$zQ&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zRBiV!}Q&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$z_CXZ$TQ%TW&wPOY$zYZ%fZ}$z}!OAt!O!^$z!^!_%k!_!`6U!`!aCz!a;'S$z;'S;=`&W<%lO$zVDRV#`U&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zVDo[&wP$UQOY$zYZ%fZ!O$z!O!PEe!P!Q$z!Q![Fs![!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zVEjX&wPOY$zYZ%fZ!O$z!O!PFV!P!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zVF^V#UU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zRFz_&wP%OQOY$zYZ%fZ!Q$z!Q![Fs![!^$z!^!_%k!_!g$z!g!hGy!h#R$z#R#SJc#S#X$z#X#YGy#Y;'S$z;'S;=`&W<%lO$zRHO]&wPOY$zYZ%fZ{$z{|Hw|}$z}!OHw!O!Q$z!Q![Ii![!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zRH|X&wPOY$zYZ%fZ!Q$z!Q![Ii![!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zRIpZ&wP%OQOY$zYZ%fZ!Q$z!Q![Ii![!^$z!^!_%k!_#R$z#R#SHw#S;'S$z;'S;=`&W<%lO$zRJhX&wPOY$zYZ%fZ!Q$z!Q![Fs![!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zVK[[&wP$VQOY$zYZ%fZz$zz{LQ{!P$z!P!Q,o!Q!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zVLVX&wPOYLQYZLrZzLQz{N_{!^LQ!^!_! s!_;'SLQ;'S;=`!!i<%lOLQVLwT&wPOzMWz{Mj{;'SMW;'S;=`NX<%lOMWUMZTOzMWz{Mj{;'SMW;'S;=`NX<%lOMWUMmVOzMWz{Mj{!PMW!P!QNS!Q;'SMW;'S;=`NX<%lOMWUNXO!eUUN[P;=`<%lMWVNdZ&wPOYLQYZLrZzLQz{N_{!PLQ!P!Q! V!Q!^LQ!^!_! s!_;'SLQ;'S;=`!!i<%lOLQV! ^V!eU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV! vZOYLQYZLrZzLQz{N_{!aLQ!a!bMW!b;'SLQ;'S;=`!!i<%l~LQ~OLQ~~%fV!!lP;=`<%lLQZ!!vm&wP$}YOY$zYZ%fZ!O$z!O!PFs!P!Q$z!Q![!$q![!^$z!^!_%k!_!d$z!d!e!&o!e!g$z!g!hGy!h!q$z!q!r!(a!r!z$z!z!{!){!{#R$z#R#S!%}#S#U$z#U#V!&o#V#X$z#X#YGy#Y#c$z#c#d!(a#d#l$z#l#m!){#m;'S$z;'S;=`&W<%lO$zZ!$xa&wP$}YOY$zYZ%fZ!O$z!O!PFs!P!Q$z!Q![!$q![!^$z!^!_%k!_!g$z!g!hGy!h#R$z#R#S!%}#S#X$z#X#YGy#Y;'S$z;'S;=`&W<%lO$zZ!&SX&wPOY$zYZ%fZ!Q$z!Q![!$q![!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zZ!&tY&wPOY$zYZ%fZ!Q$z!Q!R!'d!R!S!'d!S!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zZ!'k[&wP$}YOY$zYZ%fZ!Q$z!Q!R!'d!R!S!'d!S!^$z!^!_%k!_#R$z#R#S!&o#S;'S$z;'S;=`&W<%lO$zZ!(fX&wPOY$zYZ%fZ!Q$z!Q!Y!)R!Y!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zZ!)YZ&wP$}YOY$zYZ%fZ!Q$z!Q!Y!)R!Y!^$z!^!_%k!_#R$z#R#S!(a#S;'S$z;'S;=`&W<%lO$zZ!*Q]&wPOY$zYZ%fZ!Q$z!Q![!*y![!^$z!^!_%k!_!c$z!c!i!*y!i#T$z#T#Z!*y#Z;'S$z;'S;=`&W<%lO$zZ!+Q_&wP$}YOY$zYZ%fZ!Q$z!Q![!*y![!^$z!^!_%k!_!c$z!c!i!*y!i#R$z#R#S!){#S#T$z#T#Z!*y#Z;'S$z;'S;=`&W<%lO$zR!,WX!qQ&wPOY$zYZ%fZ![$z![!]!,s!]!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR!,zV#sQ&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV!-hV!mU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR!.S[$RQOY$zYZ%fZ!^$z!^!_!.x!_!`!/i!`!a*c!a!b!0]!b;'S$z;'S;=`&W<%l~$z~O$z~~%fR!/PW$SQ&wPOY$zYZ%fZ!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zR!/pX$RQ&wPOY$zYZ%fZ!^$z!^!_%k!_!`$z!`!a*c!a;'S$z;'S;=`&W<%lO$zP!0bR!iP!_!`!0k!r!s!0p#d#e!0pP!0pO!iPP!0sQ!j!k!0y#[#]!0yP!0|Q!r!s!0k#d#e!0kV!1ZX#uQ&wPOY$zYZ%fZ!^$z!^!_%k!_!`)r!`!a!1v!a;'S$z;'S;=`&W<%lO$zV!1}V#OU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR!2kX$RQ&wPOY$zYZ%fZ!^$z!^!_%k!_!`!3W!`!a!.x!a;'S$z;'S;=`&W<%lO$zR!3_V$RQ&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV!3{[!vQ&wPOY$zYZ%fZ}$z}!O!4q!O!^$z!^!_%k!_!`$z!`!a!6P!a!b!6m!b;'S$z;'S;=`&W<%lO$zV!4vX&wPOY$zYZ%fZ!^$z!^!_%k!_!`$z!`!a!5c!a;'S$z;'S;=`&W<%lO$zV!5jV#aU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV!6WV!gU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR!6tW#zQ&wPOY$zYZ%fZ!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zR!7eV$]Q&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$z_!8Ra&wP!s^OY$zYZ%fZ!Q$z!Q![!7z![!^$z!^!_%k!_!c$z!c!}!7z!}#R$z#R#S!7z#S#T$z#T#o!7z#o$g$z$g&j!7z&j;'S$z;'S;=`&W<%lO$z_!9_e&wP!s^OY$zYZ%fZr$zrs!:psw$zwx8Vx!Q$z!Q![!7z![!^$z!^!_%k!_!c$z!c!}!7z!}#R$z#R#S!7z#S#T$z#T#o!7z#o$g$z$g&j!7z&j;'S$z;'S;=`&W<%lO$zR!:wV&wP'gQOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV!;eV#WU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV!<RV#pU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR!<oV#XQ&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR!=]W$OQ&wPOY$zYZ%fZ!^$z!^!_%k!_!`6U!`;'S$z;'S;=`&W<%lO$zR!=zZ&wPOY!=uYZ!>mZ!^!=u!^!_!@u!_#O!=u#O#P!Aq#P#S!=u#S#T!B{#T;'S!=u;'S;=`!Ci<%lO!=uR!>rV&wPO#O!?X#O#P!?q#P#S!?X#S#T!@j#T;'S!?X;'S;=`!@o<%lO!?XQ!?[VO#O!?X#O#P!?q#P#S!?X#S#T!@j#T;'S!?X;'S;=`!@o<%lO!?XQ!?tRO;'S!?X;'S;=`!?};=`O!?XQ!@QWO#O!?X#O#P!?q#P#S!?X#S#T!@j#T;'S!?X;'S;=`!@o;=`<%l!?X<%lO!?XQ!@oO${QQ!@rP;=`<%l!?XR!@x]OY!=uYZ!>mZ!a!=u!a!b!?X!b#O!=u#O#P!Aq#P#S!=u#S#T!B{#T;'S!=u;'S;=`!Ci<%l~!=u~O!=u~~%fR!AvW&wPOY!=uYZ!>mZ!^!=u!^!_!@u!_;'S!=u;'S;=`!B`;=`<%l!?X<%lO!=uR!BcWO#O!?X#O#P!?q#P#S!?X#S#T!@j#T;'S!?X;'S;=`!@o;=`<%l!=u<%lO!?XR!CSV${Q&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR!ClP;=`<%l!=uV!CvV!oU&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zV!DfY#}Q#lS&wPOY$zYZ%fZ!^$z!^!_%k!_!`6U!`#p$z#p#q!EU#q;'S$z;'S;=`&W<%lO$zR!E]V#{Q&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR!EyV!nQ&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$zR!FgV$^Q&wPOY$zYZ%fZ!^$z!^!_%k!_;'S$z;'S;=`&W<%lO$z",
     tokenizers: [expression$1, interpolated, semicolon, 0, 1, 2, 3, eofToken],
     topRules: {"Template":[0,72],"Program":[1,232]},
     dynamicPrecedences: {"284":1},
     specialized: [{term: 81, get: (value, stack) => (keywords$G(value) << 1), external: keywords$G},{term: 81, get: value => spec_Name[value] || -1}],
     tokenPrec: 29354
   });

   /**
   A language provider based on the [Lezer PHP
   parser](https://github.com/lezer-parser/php), extended with
   highlighting and indentation information.
   */
   const phpLanguage = /*@__PURE__*/LRLanguage.define({
       name: "php",
       parser: /*@__PURE__*/parser$7.configure({
           props: [
               /*@__PURE__*/indentNodeProp.add({
                   IfStatement: /*@__PURE__*/continuedIndent({ except: /^\s*({|else\b|elseif\b|endif\b)/ }),
                   TryStatement: /*@__PURE__*/continuedIndent({ except: /^\s*({|catch\b|finally\b)/ }),
                   SwitchBody: context => {
                       let after = context.textAfter, closed = /^\s*\}/.test(after), isCase = /^\s*(case|default)\b/.test(after);
                       return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;
                   },
                   ColonBlock: cx => cx.baseIndent + cx.unit,
                   "Block EnumBody DeclarationList": /*@__PURE__*/delimitedIndent({ closing: "}" }),
                   ArrowFunction: cx => cx.baseIndent + cx.unit,
                   "String BlockComment": () => null,
                   Statement: /*@__PURE__*/continuedIndent({ except: /^({|end(for|foreach|switch|while)\b)/ })
               }),
               /*@__PURE__*/foldNodeProp.add({
                   "Block EnumBody DeclarationList SwitchBody ArrayExpression ValueList": foldInside,
                   ColonBlock(tree) { return { from: tree.from + 1, to: tree.to }; },
                   BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; }
               })
           ]
       }),
       languageData: {
           commentTokens: { block: { open: "/*", close: "*/" }, line: "//" },
           indentOnInput: /^\s*(?:case |default:|end(?:if|for(?:each)?|switch|while)|else(?:if)?|\{|\})$/,
           wordChars: "$",
           closeBrackets: { stringPrefixes: ["b", "B"] }
       }
   });
   /**
   PHP language support.
   */
   function php(config = {}) {
       let support = [], base;
       if (config.baseLanguage === null) ;
       else if (config.baseLanguage) {
           base = config.baseLanguage;
       }
       else {
           let htmlSupport = html$6({ matchClosingTags: false });
           support.push(htmlSupport.support);
           base = htmlSupport.language;
       }
       return new LanguageSupport(phpLanguage.configure({
           wrap: base && parseMixed(node => {
               if (!node.type.isTop)
                   return null;
               return {
                   parser: base.parser,
                   overlay: node => node.name == "Text"
               };
           }),
           top: config.plain ? "Program" : "Template"
       }), support);
   }

   var index$7 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      php: php,
      phpLanguage: phpLanguage
   });

   // This file was generated by lezer-generator. You probably shouldn't edit it.
   const printKeyword = 1,
     indent$3 = 196,
     dedent$3 = 197,
     newline$1 = 198,
     blankLineStart$1 = 199,
     newlineBracketed = 200,
     eof$1 = 201,
     formatString1Content = 202,
     formatString1Brace = 2,
     formatString1End = 203,
     formatString2Content = 204,
     formatString2Brace = 3,
     formatString2End = 205,
     formatString1lContent = 206,
     formatString1lBrace = 4,
     formatString1lEnd = 207,
     formatString2lContent = 208,
     formatString2lBrace = 5,
     formatString2lEnd = 209,
     ParenL = 26,
     ParenthesizedExpression = 27,
     TupleExpression = 51,
     ComprehensionExpression = 52,
     BracketL = 57,
     ArrayExpression = 58,
     ArrayComprehensionExpression = 59,
     BraceL = 61,
     DictionaryExpression = 62,
     DictionaryComprehensionExpression = 63,
     SetExpression = 64,
     SetComprehensionExpression = 65,
     ArgList = 67,
     subscript = 246,
     FormatString = 74,
     importList = 265,
     ParamList = 129,
     SequencePattern = 150,
     MappingPattern = 151,
     PatternArgList = 154;

   const newline$2 = 10, carriageReturn = 13, space$1 = 32, tab = 9, hash$1 = 35, parenOpen = 40, dot = 46,
         braceOpen = 123, singleQuote$1 = 39, doubleQuote$1 = 34, backslash = 92;

   const bracketed$1 = new Set([
     ParenthesizedExpression, TupleExpression, ComprehensionExpression, importList, ArgList, ParamList,
     ArrayExpression, ArrayComprehensionExpression, subscript,
     SetExpression, SetComprehensionExpression, FormatString,
     DictionaryExpression, DictionaryComprehensionExpression,
     SequencePattern, MappingPattern, PatternArgList
   ]);

   function isLineBreak(ch) {
     return ch == newline$2 || ch == carriageReturn
   }

   const newlines = new ExternalTokenizer((input, stack) => {
     let prev;
     if (input.next < 0) {
       input.acceptToken(eof$1);
     } else if (stack.context.depth < 0) {
       if (isLineBreak(input.next)) input.acceptToken(newlineBracketed, 1);
     } else if (((prev = input.peek(-1)) < 0 || isLineBreak(prev)) &&
                stack.canShift(blankLineStart$1)) {
       let spaces = 0;
       while (input.next == space$1 || input.next == tab) { input.advance(); spaces++; }
       if (input.next == newline$2 || input.next == carriageReturn || input.next == hash$1)
         input.acceptToken(blankLineStart$1, -spaces);
     } else if (isLineBreak(input.next)) {
       input.acceptToken(newline$1, 1);
     }
   }, {contextual: true});

   const indentation$1 = new ExternalTokenizer((input, stack) => {
     let cDepth = stack.context.depth;
     if (cDepth < 0) return
     let prev = input.peek(-1);
     if (prev == newline$2 || prev == carriageReturn) {
       let depth = 0, chars = 0;
       for (;;) {
         if (input.next == space$1) depth++;
         else if (input.next == tab) depth += 8 - (depth % 8);
         else break
         input.advance();
         chars++;
       }
       if (depth != cDepth &&
           input.next != newline$2 && input.next != carriageReturn && input.next != hash$1) {
         if (depth < cDepth) input.acceptToken(dedent$3, -chars);
         else input.acceptToken(indent$3);
       }
     }
   });

   function IndentLevel$1(parent, depth) {
     this.parent = parent;
     // -1 means this is not an actual indent level but a set of brackets
     this.depth = depth;
     this.hash = (parent ? parent.hash + parent.hash << 8 : 0) + depth + (depth << 4);
   }

   const topIndent$1 = new IndentLevel$1(null, 0);

   function countIndent(space) {
     let depth = 0;
     for (let i = 0; i < space.length; i++)
       depth += space.charCodeAt(i) == tab ? 8 - (depth % 8) : 1;
     return depth
   }

   const trackIndent$1 = new ContextTracker({
     start: topIndent$1,
     reduce(context, term) {
       return context.depth < 0 && bracketed$1.has(term) ? context.parent : context
     },
     shift(context, term, stack, input) {
       if (term == indent$3) return new IndentLevel$1(context, countIndent(input.read(input.pos, stack.pos)))
       if (term == dedent$3) return context.parent
       if (term == ParenL || term == BracketL || term == BraceL) return new IndentLevel$1(context, -1)
       return context
     },
     hash(context) { return context.hash }
   });

   const legacyPrint = new ExternalTokenizer(input => {
     for (let i = 0; i < 5; i++) {
       if (input.next != "print".charCodeAt(i)) return
       input.advance();
     }
     if (/\w/.test(String.fromCharCode(input.next))) return
     for (let off = 0;; off++) {
       let next = input.peek(off);
       if (next == space$1 || next == tab) continue
       if (next != parenOpen && next != dot && next != newline$2 && next != carriageReturn && next != hash$1)
         input.acceptToken(printKeyword);
       return
     }
   });

   function formatString(quote, len, content, brace, end) {
     return new ExternalTokenizer(input => {
       let start = input.pos;
       for (;;) {
         if (input.next < 0) {
           break
         } else if (input.next == braceOpen) {
           if (input.peek(1) == braceOpen) {
             input.advance(2);
           } else {
             if (input.pos == start) {
               input.acceptToken(brace, 1);
               return
             }
             break
           }
         } else if (input.next == backslash) {
           input.advance();
           if (input.next >= 0) input.advance();
         } else if (input.next == quote && (len == 1 || input.peek(1) == quote && input.peek(2) == quote)) {
           if (input.pos == start) {
             input.acceptToken(end, len);
             return
           }
           break
         } else {
           input.advance();
         }
       }
       if (input.pos > start) input.acceptToken(content);
     })
   }

   const formatString1 = formatString(singleQuote$1, 1, formatString1Content, formatString1Brace, formatString1End);
   const formatString2 = formatString(doubleQuote$1, 1, formatString2Content, formatString2Brace, formatString2End);
   const formatString1l = formatString(singleQuote$1, 3, formatString1lContent, formatString1lBrace, formatString1lEnd);
   const formatString2l = formatString(doubleQuote$1, 3, formatString2lContent, formatString2lBrace, formatString2lEnd);

   const pythonHighlighting = styleTags({
     "async \"*\" \"**\" FormatConversion FormatSpec": tags$1.modifier,
     "for while if elif else try except finally return raise break continue with pass assert await yield match case": tags$1.controlKeyword,
     "in not and or is del": tags$1.operatorKeyword,
     "from def class global nonlocal lambda": tags$1.definitionKeyword,
     import: tags$1.moduleKeyword,
     "with as print": tags$1.keyword,
     Boolean: tags$1.bool,
     None: tags$1.null,
     VariableName: tags$1.variableName,
     "CallExpression/VariableName": tags$1.function(tags$1.variableName),
     "FunctionDefinition/VariableName": tags$1.function(tags$1.definition(tags$1.variableName)),
     "ClassDefinition/VariableName": tags$1.definition(tags$1.className),
     PropertyName: tags$1.propertyName,
     "CallExpression/MemberExpression/PropertyName": tags$1.function(tags$1.propertyName),
     Comment: tags$1.lineComment,
     Number: tags$1.number,
     String: tags$1.string,
     FormatString: tags$1.special(tags$1.string),
     UpdateOp: tags$1.updateOperator,
     "ArithOp!": tags$1.arithmeticOperator,
     BitOp: tags$1.bitwiseOperator,
     CompareOp: tags$1.compareOperator,
     AssignOp: tags$1.definitionOperator,
     Ellipsis: tags$1.punctuation,
     At: tags$1.meta,
     "( )": tags$1.paren,
     "[ ]": tags$1.squareBracket,
     "{ }": tags$1.brace,
     ".": tags$1.derefOperator,
     ", ;": tags$1.separator
   });

   // This file was generated by lezer-generator. You probably shouldn't edit it.
   const spec_identifier$2 = {__proto__:null,await:48, or:58, and:60, in:64, not:66, is:68, if:74, else:76, lambda:80, yield:98, from:100, async:106, for:108, None:168, True:170, False:170, del:184, pass:188, break:192, continue:196, return:200, raise:208, import:212, as:214, global:218, nonlocal:220, assert:224, elif:234, while:238, try:244, except:246, finally:248, with:252, def:256, class:266, match:277, case:283};
   const parser$6 = LRParser.deserialize({
     version: 14,
     states: "#!OO`Q#yOOP$_OSOOO%hQ&nO'#H^OOQS'#Cq'#CqOOQS'#Cr'#CrO'WQ#xO'#CpO(yQ&nO'#H]OOQS'#H^'#H^OOQS'#DW'#DWOOQS'#H]'#H]O)gQ#xO'#DaO)zQ#xO'#DhO*[Q#xO'#DlOOQS'#Dw'#DwO*oO,UO'#DwO*wO7[O'#DwO+POWO'#DxO+[O`O'#DxO+gOpO'#DxO+rO!bO'#DxO-tQ&nO'#G}OOQS'#G}'#G}O'WQ#xO'#G|O/WQ&nO'#G|OOQS'#Ee'#EeO/oQ#xO'#EfOOQS'#G{'#G{O/yQ#xO'#GzOOQV'#Gz'#GzO0UQ#xO'#FXOOQS'#G`'#G`O0ZQ#xO'#FWOOQV'#IS'#ISOOQV'#Gy'#GyOOQV'#Fp'#FpQ`Q#yOOO'WQ#xO'#CsO0iQ#xO'#DPO0pQ#xO'#DTO1OQ#xO'#HbO1`Q&nO'#EYO'WQ#xO'#EZOOQS'#E]'#E]OOQS'#E_'#E_OOQS'#Ea'#EaO1tQ#xO'#EcO2[Q#xO'#EgO0UQ#xO'#EiO2oQ&nO'#EiO0UQ#xO'#ElO/oQ#xO'#EoO/oQ#xO'#EsO/oQ#xO'#EvO2zQ#xO'#ExO3RQ#xO'#E}O3^Q#xO'#EyO/oQ#xO'#E}O0UQ#xO'#FPO0UQ#xO'#FUO3cQ#xO'#FZP3jO#xO'#GxPOOO)CBl)CBlOOQS'#Cg'#CgOOQS'#Ch'#ChOOQS'#Ci'#CiOOQS'#Cj'#CjOOQS'#Ck'#CkOOQS'#Cl'#ClOOQS'#Cn'#CnO'WQ#xO,59QO'WQ#xO,59QO'WQ#xO,59QO'WQ#xO,59QO'WQ#xO,59QO'WQ#xO,59QO3uQ#xO'#DqOOQS,5:[,5:[O4YQ#xO'#HlOOQS,5:_,5:_O4gQMlO,5:_O4lQ&nO,59[O0iQ#xO,59dO0iQ#xO,59dO0iQ#xO,59dO7[Q#xO,59dO7aQ#xO,59dO7hQ#xO,59lO7oQ#xO'#H]O8uQ#xO'#H[OOQS'#H['#H[OOQS'#D^'#D^O9^Q#xO,59cO'WQ#xO,59cO9lQ#xO,59cOOQS,59{,59{O9qQ#xO,5:TO'WQ#xO,5:TOOQS,5:S,5:SO:PQ#xO,5:SO:UQ#xO,5:ZO'WQ#xO,5:ZO'WQ#xO,5:XOOQS,5:W,5:WO:gQ#xO,5:WO:lQ#xO,5:YOOOO'#Fx'#FxO:qO,UO,5:cOOQS,5:c,5:cOOOO'#Fy'#FyO:yO7[O,5:cO;RQ#xO'#DyOOOW'#Fz'#FzO;cOWO,5:dOOQS,5:d,5:dO;RQ#xO'#D}OOO`'#F}'#F}O;nO`O,5:dO;RQ#xO'#EOOOOp'#GO'#GOO;yOpO,5:dO;RQ#xO'#EPOOO!b'#GP'#GPO<UO!bO,5:dOOQS'#GQ'#GQO<aQ&nO,5:lO?RQ&nO,5=hO?lQ!LUO,5=hO@]Q&nO,5=hOOQS,5;Q,5;QO@tQ#yO'#GYOBTQ#xO,5;]OOQV,5=f,5=fOB`Q&nO'#IOOBwQ#xO,5;sOOQS-E:^-E:^OOQV,5;r,5;rO3XQ#xO'#FPOOQV-E9n-E9nOCPQ&nO,59_OEWQ&nO,59kOEqQ#xO'#H_OE|Q#xO'#H_O0UQ#xO'#H_OFXQ#xO'#DVOFaQ#xO,59oOFfQ#xO'#HcO'WQ#xO'#HcO/oQ#xO,5=|OOQS,5=|,5=|O/oQ#xO'#EUOOQS'#EV'#EVOGTQ#xO'#GSOGeQ#xO,59OOGeQ#xO,59OO)mQ#xO,5:rOGsQ&nO'#HeOOQS,5:u,5:uOOQS,5:},5:}OHWQ#xO,5;ROHiQ#xO,5;TOOQS'#GV'#GVOHwQ&nO,5;TOIVQ#xO,5;TOI[Q#xO'#IROOQS,5;W,5;WOIjQ#xO'#H}OOQS,5;Z,5;ZO3^Q#xO,5;_O3^Q#xO,5;bOI{Q&nO'#ITO'WQ#xO'#ITOJVQ#xO,5;dO2zQ#xO,5;dO/oQ#xO,5;iO0UQ#xO,5;kOJ[Q#yO'#EtOKeQ#{O,5;eONvQ#xO'#IUO3^Q#xO,5;iO! RQ#xO,5;kO! WQ#xO,5;pO! `Q&nO,5;uO'WQ#xO,5;uPOOO,5=d,5=dP! gOSO,5=dP! lO#xO,5=dO!$aQ&nO1G.lO!$hQ&nO1G.lO!'XQ&nO1G.lO!'cQ&nO1G.lO!)|Q&nO1G.lO!*aQ&nO1G.lO!*tQ#xO'#HkO!+SQ&nO'#G}O/oQ#xO'#HkO!+^Q#xO'#HjOOQS,5:],5:]O!+fQ#xO,5:]O!+kQ#xO'#HmO!+vQ#xO'#HmO!,ZQ#xO,5>WOOQS'#Du'#DuOOQS1G/y1G/yOOQS1G/O1G/OO!-ZQ&nO1G/OO!-bQ&nO1G/OO0iQ#xO1G/OO!-}Q#xO1G/WOOQS'#D]'#D]O/oQ#xO,59vOOQS1G.}1G.}O!.UQ#xO1G/gO!.fQ#xO1G/gO!.nQ#xO1G/hO'WQ#xO'#HdO!.sQ#xO'#HdO!.xQ&nO1G.}O!/YQ#xO,59kO!0`Q#xO,5>SO!0pQ#xO,5>SO!0xQ#xO1G/oO!0}Q&nO1G/oOOQS1G/n1G/nO!1_Q#xO,5=}O!2UQ#xO,5=}O/oQ#xO1G/sO!2sQ#xO1G/uO!2xQ&nO1G/uO!3YQ&nO1G/sOOQS1G/r1G/rOOQS1G/t1G/tOOOO-E9v-E9vOOQS1G/}1G/}OOOO-E9w-E9wO!3jQ#xO'#HwO/oQ#xO'#HwO!3xQ#xO,5:eOOOW-E9x-E9xOOQS1G0O1G0OO!4TQ#xO,5:iOOO`-E9{-E9{O!4`Q#xO,5:jOOOp-E9|-E9|O!4kQ#xO,5:kOOO!b-E9}-E9}OOQS-E:O-E:OO!4vQ!LUO1G3SO!5gQ&nO1G3SO'WQ#xO,5<mOOQS,5<m,5<mOOQS-E:P-E:POOQS,5<t,5<tOOQS-E:W-E:WOOQV1G0w1G0wO0UQ#xO'#GUO!6OQ&nO,5>jOOQS1G1_1G1_O!6gQ#xO1G1_OOQS'#DX'#DXO/oQ#xO,5=yOOQS,5=y,5=yO!6lQ#xO'#FqO!6wQ#xO,59qO!7PQ#xO1G/ZO!7ZQ&nO,5=}OOQS1G3h1G3hOOQS,5:p,5:pO!7zQ#xO'#G|OOQS,5<n,5<nOOQS-E:Q-E:QO!8]Q#xO1G.jOOQS1G0^1G0^O!8kQ#xO,5>PO!8{Q#xO,5>PO/oQ#xO1G0mO/oQ#xO1G0mO0UQ#xO1G0oOOQS-E:T-E:TO!9^Q#xO1G0oO!9iQ#xO1G0oO!9nQ#xO,5>mO!9|Q#xO,5>mO!:[Q#xO,5>iO!:rQ#xO,5>iO!;TQ#{O1G0yO!>cQ#{O1G0|O!AnQ#xO,5>oO!AxQ#xO,5>oO!BQQ&nO,5>oO/oQ#xO1G1OO!B[Q#xO1G1OO3^Q#xO1G1TO! RQ#xO1G1VOOQV,5;`,5;`O!BaQ#zO,5;`O!BfQ#{O1G1PO!EwQ#xO'#G]O3^Q#xO1G1PO3^Q#xO1G1PO!FUQ#xO,5>pO!FcQ#xO,5>pO0UQ#xO,5>pOOQV1G1T1G1TO!FkQ#xO'#FRO!F|QMlO1G1VOOQV1G1[1G1[O3^Q#xO1G1[O!GUQ#xO'#F]OOQV1G1a1G1aO! `Q&nO1G1aPOOO1G3O1G3OP!GZOSO1G3OOOQS,5>V,5>VOOQS'#Dr'#DrO/oQ#xO,5>VO!G`Q#xO,5>UO!GsQ#xO,5>UOOQS1G/w1G/wO!G{Q#xO,5>XO!H]Q#xO,5>XO!HeQ#xO,5>XO!HxQ#xO,5>XO!IYQ#xO,5>XOOQS1G3r1G3rOOQS7+$j7+$jO!7PQ#xO7+$rO!J{Q#xO1G/OO!KSQ#xO1G/OOOQS1G/b1G/bOOQS,5<_,5<_O'WQ#xO,5<_OOQS7+%R7+%RO!KZQ#xO7+%ROOQS-E9q-E9qOOQS7+%S7+%SO!KkQ#xO,5>OO'WQ#xO,5>OOOQS7+$i7+$iO!KpQ#xO7+%RO!KxQ#xO7+%SO!K}Q#xO1G3nOOQS7+%Z7+%ZO!L_Q#xO1G3nO!LgQ#xO7+%ZOOQS,5<^,5<^O'WQ#xO,5<^O!LlQ#xO1G3iOOQS-E9p-E9pO!McQ#xO7+%_OOQS7+%a7+%aO!MqQ#xO1G3iO!N`Q#xO7+%aO!NeQ#xO1G3oO!NuQ#xO1G3oO!N}Q#xO7+%_O# SQ#xO,5>cO# jQ#xO,5>cO# jQ#xO,5>cO# xO$ISO'#D{O#!TO#tO'#HxOOOW1G0P1G0PO#!YQ#xO1G0POOO`1G0T1G0TO#!bQ#xO1G0TOOOp1G0U1G0UO#!jQ#xO1G0UOOO!b1G0V1G0VO#!rQ#xO1G0VO#!zQ!LUO7+(nO##kQ&nO1G2XP#$UQ#xO'#GROOQS,5<p,5<pOOQS-E:S-E:SOOQS7+&y7+&yOOQS1G3e1G3eOOQS,5<],5<]OOQS-E9o-E9oOOQS7+$u7+$uO#$cQ#xO,5=hO#$|Q#xO,5=hO#%_Q&nO,5<`O#%rQ#xO1G3kOOQS-E9r-E9rOOQS7+&X7+&XO#&SQ#xO7+&XOOQS7+&Z7+&ZO#&bQ#xO'#IQO0UQ#xO'#IPO#&vQ#xO7+&ZOOQS,5<s,5<sO#'RQ#xO1G4XOOQS-E:V-E:VOOQS,5<o,5<oO#'aQ#xO1G4TOOQS-E:R-E:RO#'wQ#{O7+&eO!EwQ#xO'#GZO3^Q#xO7+&eO3^Q#xO7+&hO#+VQ&nO,5<vO'WQ#xO,5<vO#+aQ#xO1G4ZOOQS-E:Y-E:YO#+kQ#xO1G4ZO3^Q#xO7+&jO/oQ#xO7+&jOOQV7+&o7+&oO!F|QMlO7+&qO`Q#yO1G0zOOQV-E:Z-E:ZO3^Q#xO7+&kO3^Q#xO7+&kOOQV,5<w,5<wO#+sQ#xO,5<wOOQV7+&k7+&kO#,OQ#{O7+&kO#/ZQ#xO,5<xO#/fQ#xO1G4[OOQS-E:[-E:[O#/sQ#xO1G4[O#/{Q#xO'#IWO#0ZQ#xO'#IWO0UQ#xO'#IWOOQS'#IW'#IWO#0fQ#xO'#IVOOQS,5;m,5;mO#0nQ#xO,5;mO/oQ#xO'#FTOOQV7+&q7+&qO3^Q#xO7+&qOOQV7+&v7+&vO#0sQ#zO,5;wOOQV7+&{7+&{POOO7+(j7+(jOOQS1G3q1G3qOOQS,5<b,5<bO#0xQ#xO1G3pOOQS-E9t-E9tO#1]Q#xO,5<cO#1hQ#xO,5<cO#1{Q#xO1G3sOOQS-E9u-E9uO#2]Q#xO1G3sO#2eQ#xO1G3sO#2uQ#xO1G3sO#2]Q#xO1G3sOOQS<<H^<<H^O#3QQ&nO1G1yOOQS<<Hm<<HmP#3_Q#xO'#FsO7hQ#xO1G3jO#3lQ#xO1G3jO#3qQ#xO<<HmOOQS<<Hn<<HnO#4RQ#xO7+)YOOQS<<Hu<<HuO#4cQ&nO1G1xP#5SQ#xO'#FrO#5aQ#xO7+)ZO#5qQ#xO7+)ZO#5yQ#xO<<HyO#6OQ#xO7+)TOOQS<<H{<<H{O#6uQ#xO,5<aO'WQ#xO,5<aOOQS-E9s-E9sOOQS<<Hy<<HyOOQS,5<g,5<gO/oQ#xO,5<gO#6zQ#xO1G3}OOQS-E9y-E9yO#7bQ#xO1G3}O;RQ#xO'#D|OOOO'#F|'#F|O#7pO$ISO,5:gOOO#l,5>d,5>dOOOW7+%k7+%kOOO`7+%o7+%oOOOp7+%p7+%pOOO!b7+%q7+%qO#7{Q#xO1G3SO#8fQ#xO1G3SP'WQ#xO'#FtO/oQ#xO<<IsO#8wQ#xO,5>lO#9YQ#xO,5>lO0UQ#xO,5>lO#9kQ#xO,5>kOOQS<<Iu<<IuP0UQ#xO'#GXP/oQ#xO'#GTOOQV-E:X-E:XO3^Q#xO<<JPOOQV,5<u,5<uO3^Q#xO,5<uOOQV<<JP<<JPOOQV<<JS<<JSO#9pQ&nO1G2bP#9zQ#xO'#G[O#:RQ#xO7+)uO#:]Q#{O<<JUO3^Q#xO<<JUOOQV<<J]<<J]O3^Q#xO<<J]O#=hQ#{O7+&fOOQV<<JV<<JVO#=rQ#{O<<JVOOQV1G2c1G2cO0UQ#xO1G2cO3^Q#xO<<JVO0UQ#xO1G2dP/oQ#xO'#G^O#@}Q#xO7+)vO#A[Q#xO7+)vOOQS'#FS'#FSO/oQ#xO,5>rO#AdQ#xO,5>rOOQS,5>r,5>rO#AoQ#xO,5>qO#BQQ#xO,5>qOOQS1G1X1G1XOOQS,5;o,5;oO#BYQ#xO1G1cP#B_Q#xO'#FvO#BoQ#xO1G1}O#CSQ#xO1G1}O#CdQ#xO1G1}P#CoQ#xO'#FwO#C|Q#xO7+)_O#D^Q#xO7+)_O#D^Q#xO7+)_O#DfQ#xO7+)_O#DvQ#xO7+)UO7hQ#xO7+)UOOQSAN>XAN>XO#EaQ#xO<<LuOOQSAN>eAN>eO/oQ#xO1G1{O#EqQ&nO1G1{P#E{Q#xO'#FuOOQS1G2R1G2RP#FYQ#xO'#F{O#FgQ#xO7+)iO#F}Q#xO,5:hOOOO-E9z-E9zO#GYQ#xO7+(nOOQSAN?_AN?_O#GsQ#xO,5<rO#HXQ#xO1G4WOOQS-E:U-E:UO#HjQ#xO1G4WOOQS1G4V1G4VOOQVAN?kAN?kOOQV1G2a1G2aO3^Q#xOAN?pO#H{Q#{OAN?pOOQVAN?wAN?wOOQV<<JQ<<JQO3^Q#xOAN?qO3^Q#xO7+'}OOQVAN?qAN?qOOQS7+(O7+(OO#LWQ#xO<<MbOOQS1G4^1G4^O/oQ#xO1G4^OOQS,5<y,5<yO#LeQ#xO1G4]OOQS-E:]-E:]OOQU'#Ga'#GaO#LvQ#zO7+&}O#MRQ#xO'#F^O#MyQ#xO7+'iO#NZQ#xO7+'iOOQS7+'i7+'iO#NfQ#xO<<LyO#NvQ#xO<<LyO#NvQ#xO<<LyO$ OQ#xO'#HfOOQS<<Lp<<LpO$ YQ#xO<<LpOOQS7+'g7+'gOOOO1G0S1G0SO$ sQ#xO1G0SO0UQ#xO1G2^P0UQ#xO'#GWO$ {Q#xO7+)rO$!^Q#xO7+)rOOQVG25[G25[O3^Q#xOG25[OOQVG25]G25]OOQV<<Ki<<KiOOQS7+)x7+)xP$!oQ#xO'#G_OOQU-E:_-E:_OOQV<<Ji<<JiO$#cQ&nO'#F`OOQS'#Fb'#FbO$#sQ#xO'#FaO$$eQ#xO'#FaOOQS'#Fa'#FaO$$jQ#xO'#IYO#MRQ#xO'#FhO#MRQ#xO'#FhO$%RQ#xO'#FiO#MRQ#xO'#FjO$%YQ#xO'#IZOOQS'#IZ'#IZO$%wQ#xO,5;xOOQS<<KT<<KTO$&PQ#xO<<KTO$&aQ#xOANBeO$&qQ#xOANBeO$&yQ#xO'#HgOOQS'#Hg'#HgO0pQ#xO'#DeO$'dQ#xO,5>QOOQSANB[ANB[OOOO7+%n7+%nOOQS7+'x7+'xO$'{Q#xO<<M^OOQVLD*vLD*vO4gQMlO'#GcO$(^Q&nO,5<RO#MRQ#xO'#FlOOQS,5<V,5<VOOQS'#Fc'#FcO$)OQ#xO,5;{O$)TQ#xO,5;{OOQS'#Ff'#FfO#MRQ#xO'#GbO$)uQ#xO,5<PO$*aQ#xO,5>tO$*qQ#xO,5>tO0UQ#xO,5<OO$+SQ#xO,5<SO$+XQ#xO,5<SO#MRQ#xO'#I[O$+^Q#xO'#I[O$+cQ#xO,5<TOOQS,5<U,5<UO'WQ#xO'#FoOOQU1G1d1G1dO3^Q#xO1G1dOOQSAN@oAN@oO$+hQ#xOG28PO$+xQ#xO,5:POOQS1G3l1G3lOOQS,5<},5<}OOQS-E:a-E:aO$+}Q&nO'#F`O$,UQ#xO'#I]O$,dQ#xO'#I]O$,lQ#xO,5<WOOQS1G1g1G1gO$,qQ#xO1G1gO$,vQ#xO,5<|OOQS-E:`-E:`O$-bQ#xO,5=QO$-yQ#xO1G4`OOQS-E:d-E:dOOQS1G1j1G1jOOQS1G1n1G1nO$.ZQ#xO,5>vO#MRQ#xO,5>vOOQS1G1o1G1oO$.iQ&nO,5<ZOOQU7+'O7+'OO$ OQ#xO1G/kO#MRQ#xO,5<XO$.pQ#xO,5>wO$.wQ#xO,5>wOOQS1G1r1G1rOOQS7+'R7+'RP#MRQ#xO'#GfO$/PQ#xO1G4bO$/ZQ#xO1G4bO$/cQ#xO1G4bOOQS7+%V7+%VO$/qQ#xO1G1sO$0PQ&nO'#F`O$0WQ#xO,5=POOQS,5=P,5=PO$0fQ#xO1G4cOOQS-E:c-E:cO#MRQ#xO,5=OO$0mQ#xO,5=OO$0rQ#xO7+)|OOQS-E:b-E:bO$0|Q#xO7+)|O#MRQ#xO,5<YP#MRQ#xO'#GeO$1UQ#xO1G2jO#MRQ#xO1G2jP$1dQ#xO'#GdO$1kQ#xO<<MhO$1uQ#xO1G1tO$2TQ#xO7+(UO7hQ#xO'#DPO7hQ#xO,59dO7hQ#xO,59dO7hQ#xO,59dO$2cQ&nO,5=hO7hQ#xO1G/OO/oQ#xO1G/ZO/oQ#xO7+$rP$2vQ#xO'#GRO'WQ#xO'#G|O$3TQ#xO,59dO$3YQ#xO,59dO$3aQ#xO,59oO$3fQ#xO1G/WO0pQ#xO'#DTO7hQ#xO,59l",
     stateData: "$3w~O%kOS%`OSUOS%_PQ~OPiOXfOhtOjYOquOu!TOxvO!RwO!S!QO!V!WO!W!VO!ZZO!_[O!jeO!ueO!veO!weO#OyO#QzO#S{O#U|O#W}O#[!OO#^!PO#a!RO#b!RO#d!SO#k!UO#n!XO#r!YO#t!ZO#y![O#|mO$O!]O%wRO%xRO%|SO%}WO&c]O&d^O&g_O&j`O&naO&obO&pcO~O%_!^O~OX!eOa!eOc!fOj!mO!Z!oO!h!qO%r!`O%s!aO%t!bO%u!cO%v!cO%w!dO%x!dO%y!eO%z!eO%{!eO~Om&QXn&QXo&QXp&QXq&QXr&QXu&QX|&QX}&QX!{&QX#f&QX%^&QX%a&QX&S&QXi&QX!V&QX!W&QX&T&QX!Y&QX!^&QX!S&QX#_&QXv&QX!n&QX~P$dOhtOjYO!ZZO!_[O!jeO!ueO!veO!weO%wRO%xRO%|SO%}WO&c]O&d^O&g_O&j`O&naO&obO&pcO~O|&PX}&PX#f&PX%^&PX%a&PX&S&PX~Om!tOn!uOo!sOp!sOq!vOr!wOu!xO!{&PX~P(eOX#OOi#QOq0VOx0eO!RwO~P'WOX#SOq0VOx0eO!Y#TO~P'WOX#WOc#XOq0VOx0eO!^#YO~P'WO&e#]O&f#_O~O&h#`O&i#_O~OQ#bO%b#cO%c#eO~OR#fO%d#gO%e#eO~OS#iO%f#jO%g#eO~OT#lO%h#mO%i#eO~OX%qXa%qXc%qXj%qXm%qXn%qXo%qXp%qXq%qXr%qXu%qX|%qX!Z%qX!h%qX%r%qX%s%qX%t%qX%u%qX%v%qX%w%qX%x%qX%y%qX%z%qX%{%qXi%qX!V%qX!W%qX~O&c]O&d^O&g_O&j`O&naO&obO&pcO}%qX!{%qX#f%qX%^%qX%a%qX&S%qX&T%qX!Y%qX!^%qX!S%qX#_%qXv%qX!n%qX~P+}O|#rO}%pX!{%pX#f%pX%^%pX%a%pX&S%pX~Oq0VOx0eO~P'WO#f#uO%^#wO%a#wO~O%}WO~O!V#|O#t!ZO#y![O#|mO~OquO~P'WOX$ROc$SO%}WO}yP~OX$WOq0VOx0eO!S$XO~P'WO}$ZO!{$`O&S$[O#f!|X%^!|X%a!|X~OX$WOq0VOx0eO#f#VX%^#VX%a#VX~P'WOq0VOx0eO#f#ZX%^#ZX%a#ZX~P'WO!h$fO!u$fO%}WO~OX$pO~P'WO!W$rO#r$sO#t$tO~O}$uO~OX$|O~P'WOU%OO%^$}O%k%PO~OX%YOc%YOi%[Oq0VOx0eO~P'WOq0VOx0eO}%_O~P'WO&b%aO~Oc!fOj!mO!Z!oO!h!qOXdaadamdandaodapdaqdardauda|da}da!{da#fda%^da%ada%rda%sda%tda%uda%vda%wda%xda%yda%zda%{da&Sdaida!Vda!Wda&Tda!Yda!^da!Sda#_davda!nda~Op%fO~Oq%fO~P'WOq0VO~P'WOm0XOn0YOo0WOp0WOq0aOr0bOu0fOi&PX!V&PX!W&PX&T&PX!Y&PX!^&PX!S&PX#_&PX!n&PX~P(eO&T%hOi&OX|&OX!V&OX!W&OX!Y&OX}&OX~Oi%jO|%kO!V%oO!W%nO~Oi%jO~O|%rO!V%oO!W%nO!Y&[X~O!Y%vO~O|%wO}%yO!V%oO!W%nO!^&VX~O!^%}O~O!^&OO~O&e#]O&f&QO~O&h#`O&i&QO~OX&TOq0VOx0eO!RwO~P'WOQ#bO%b#cO%c&WO~OR#fO%d#gO%e&WO~OS#iO%f#jO%g&WO~OT#lO%h#mO%i&WO~OX!taa!tac!taj!tam!tan!tao!tap!taq!tar!tau!ta|!ta}!ta!Z!ta!h!ta!{!ta#f!ta%^!ta%a!ta%r!ta%s!ta%t!ta%u!ta%v!ta%w!ta%x!ta%y!ta%z!ta%{!ta&S!tai!ta!V!ta!W!ta&T!ta!Y!ta!^!ta!S!ta#_!tav!ta!n!ta~P#vO|&`O}%pa!{%pa#f%pa%^%pa%a%pa&S%pa~P$dOX&bOquOxvO}%pa!{%pa#f%pa%^%pa%a%pa&S%pa~P'WO|&`O}%pa!{%pa#f%pa%^%pa%a%pa&S%pa~OPiOXfOquOxvO!RwO!S!QO#OyO#QzO#S{O#U|O#W}O#[!OO#^!PO#a!RO#b!RO#d!SO#f$|X%^$|X%a$|X~P'WO#f#uO%^&gO%a&gO~O!h&hOj&rX%^&rX#_&rX#f&rX%a&rX#^&rX~Oj!mO%^&jO~Omgangaogapgaqgargauga|ga}ga!{ga#fga%^ga%aga&Sgaiga!Vga!Wga&Tga!Yga!^ga!Sga#_gavga!nga~P$dOusa|sa}sa#fsa%^sa%asa&Ssa~Om!tOn!uOo!sOp!sOq!vOr!wO!{sa~PDoO&S&lO|&RX}&RX~O%}WO|&RX}&RX~O|&oO}yX~O}&qO~O|%wO#f&VX%^&VX%a&VXi&VX}&VX!^&VX!n&VX&S&VX~OX0`Oq0VOx0eO!RwO~P'WO&S$[O#fWa%^Wa%aWa~O|&zO#f&XX%^&XX%a&XXp&XX~P$dO|&}O!S&|O#f#Za%^#Za%a#Za~O#_'OO#f#]a%^#]a%a#]a~O!h$fO!u$fO#^'QO%}WO~O#^'QO~O|'SO#f&uX%^&uX%a&uX~O|'UO#f&qX%^&qX%a&qX}&qX~O|'YOp&wX~P$dOp']O~OPiOXfOquOxvO!RwO!S!QO#OyO#QzO#S{O#U|O#W}O#[!OO#^!PO#a!RO#b!RO#d!SO%^'bO~P'WOv'fO#o'dO#p'eOP#maX#mah#maj#maq#mau#max#ma!R#ma!S#ma!V#ma!W#ma!Z#ma!_#ma!j#ma!u#ma!v#ma!w#ma#O#ma#Q#ma#S#ma#U#ma#W#ma#[#ma#^#ma#a#ma#b#ma#d#ma#k#ma#n#ma#r#ma#t#ma#y#ma#|#ma$O#ma%Z#ma%w#ma%x#ma%|#ma%}#ma&c#ma&d#ma&g#ma&j#ma&n#ma&o#ma&p#ma%]#ma%a#ma~O|'gO#_'iO}&xX~Oj'kO~Oj!mO}$uO~O}'oO~P$dO%^'rO~OU'sO%^'rO~OX!eOa!eOc!fOj!mO!Z!oO!h!qO%t!bO%u!cO%v!cO%w!dO%x!dO%y!eO%z!eO%{!eOmYinYioYipYiqYirYiuYi|Yi}Yi!{Yi#fYi%^Yi%aYi%rYi&SYiiYi!VYi!WYi&TYi!YYi!^Yi!SYi#_YivYi!nYi~O%s!aO~P! tO%sYi~P! tOX!eOa!eOc!fOj!mO!Z!oO!h!qO%w!dO%x!dO%y!eO%z!eO%{!eOmYinYioYipYiqYirYiuYi|Yi}Yi!{Yi#fYi%^Yi%aYi%rYi%sYi%tYi&SYiiYi!VYi!WYi&TYi!YYi!^Yi!SYi#_YivYi!nYi~O%u!cO%v!cO~P!$oO%uYi%vYi~P!$oOc!fOj!mO!Z!oO!h!qOmYinYioYipYiqYirYiuYi|Yi}Yi!{Yi#fYi%^Yi%aYi%rYi%sYi%tYi%uYi%vYi%wYi%xYi&SYiiYi!VYi!WYi&TYi!YYi!^Yi!SYi#_YivYi!nYi~OX!eOa!eO%y!eO%z!eO%{!eO~P!'mOXYiaYi%yYi%zYi%{Yi~P!'mO!V%oO!W%nOi&_X|&_X~O&S'uO&T'uO~P+}O|'wOi&^X~Oi'yO~O|'zO}'|O!Y&aX~Oq0VOx0eO|'zO}'}O!Y&aX~P'WO!Y(PO~Oo!sOp!sOq!vOr!wOmliuli|li}li!{li#fli%^li%ali&Sli~On!uO~P!,`Onli~P!,`Om0XOn0YOo0WOp0WOq0aOr0bO~Ov(RO~P!-iOX(WOi(XOq0VOx0eO~P'WOi(XO|(YO~Oi([O~O!W(^O~Oi(_O|(YO!V%oO!W%nO~P$dOm0XOn0YOo0WOp0WOq0aOr0bOisa!Vsa!Wsa&Tsa!Ysa!^sa!Ssa#_savsa!nsa~PDoOX(WOq0VOx0eO!Y&[a~P'WO|(bO!Y&[a~O!Y(cO~O|(bO!V%oO!W%nO!Y&[a~P$dOX(gOq0VOx0eO!^&Va#f&Va%^&Va%a&Vai&Va}&Va!n&Va&S&Va~P'WO|(hO!^&Va#f&Va%^&Va%a&Vai&Va}&Va!n&Va&S&Va~O!^(kO~O|(hO!V%oO!W%nO!^&Va~P$dO|(nO!V%oO!W%nO!^&]a~P$dO|(qO}&kX!^&kX!n&kX~O}(tO!^(vO!n(wO~O}(tO!^(xO!n(yO~O}(tO!^(zO!n({O~O}(tO!^(|O!n(}O~OX&bOquOxvO}%pi!{%pi#f%pi%^%pi%a%pi&S%pi~P'WO|)OO}%pi!{%pi#f%pi%^%pi%a%pi&S%pi~O!h&hOj&ra%^&ra#_&ra#f&ra%a&ra#^&ra~O%^)TO~OX$ROc$SO%}WO~O|&oO}ya~OquOxvO~P'WO|(hO#f&Va%^&Va%a&Vai&Va}&Va!^&Va!n&Va&S&Va~P$dO|)YO#f%pX%^%pX%a%pX&S%pX~O&S$[O#fWi%^Wi%aWi~O#f&Xa%^&Xa%a&Xap&Xa~P'WO|)]O#f&Xa%^&Xa%a&Xap&Xa~OX)aOj)cO%}WO~O#^)dO~O%}WO#f&ua%^&ua%a&ua~O|)fO#f&ua%^&ua%a&ua~Oq0VOx0eO#f&qa%^&qa%a&qa}&qa~P'WO|)iO#f&qa%^&qa%a&qa}&qa~Ov)mO#i)lOP#giX#gih#gij#giq#giu#gix#gi!R#gi!S#gi!V#gi!W#gi!Z#gi!_#gi!j#gi!u#gi!v#gi!w#gi#O#gi#Q#gi#S#gi#U#gi#W#gi#[#gi#^#gi#a#gi#b#gi#d#gi#k#gi#n#gi#r#gi#t#gi#y#gi#|#gi$O#gi%Z#gi%w#gi%x#gi%|#gi%}#gi&c#gi&d#gi&g#gi&j#gi&n#gi&o#gi&p#gi%]#gi%a#gi~Ov)nOP#jiX#jih#jij#jiq#jiu#jix#ji!R#ji!S#ji!V#ji!W#ji!Z#ji!_#ji!j#ji!u#ji!v#ji!w#ji#O#ji#Q#ji#S#ji#U#ji#W#ji#[#ji#^#ji#a#ji#b#ji#d#ji#k#ji#n#ji#r#ji#t#ji#y#ji#|#ji$O#ji%Z#ji%w#ji%x#ji%|#ji%}#ji&c#ji&d#ji&g#ji&j#ji&n#ji&o#ji&p#ji%]#ji%a#ji~OX)pOp&wa~P'WO|)qOp&wa~O|)qOp&wa~P$dOp)uO~O%[)xO~Ov){O#o'dO#p)zOP#miX#mih#mij#miq#miu#mix#mi!R#mi!S#mi!V#mi!W#mi!Z#mi!_#mi!j#mi!u#mi!v#mi!w#mi#O#mi#Q#mi#S#mi#U#mi#W#mi#[#mi#^#mi#a#mi#b#mi#d#mi#k#mi#n#mi#r#mi#t#mi#y#mi#|#mi$O#mi%Z#mi%w#mi%x#mi%|#mi%}#mi&c#mi&d#mi&g#mi&j#mi&n#mi&o#mi&p#mi%]#mi%a#mi~Oq0VOx0eO}$uO~P'WOq0VOx0eO}&xa~P'WO|*RO}&xa~OX*VOc*WOi*ZO%y*XO%}WO~O}$uO&{*]O~O%^*aO~O%^*cO~OX%YOc%YOq0VOx0eOi&^a~P'WO|*fOi&^a~Oq0VOx0eO}*iO!Y&aa~P'WO|*jO!Y&aa~Oq0VOx0eO|*jO}*mO!Y&aa~P'WOq0VOx0eO|*jO!Y&aa~P'WO|*jO}*mO!Y&aa~Oo0WOp0WOq0aOr0bOilimliuli|li!Vli!Wli&Tli!Yli}li!^li#fli%^li%ali!Sli#_livli!nli&Sli~On0YO~P!IeOnli~P!IeOX(WOi*rOq0VOx0eO~P'WOp*tO~Oi*rO|*vO~Oi*wO~OX(WOq0VOx0eO!Y&[i~P'WO|*xO!Y&[i~O!Y*yO~OX(gOq0VOx0eO!^&Vi#f&Vi%^&Vi%a&Vii&Vi}&Vi!n&Vi&S&Vi~P'WO|*|O!V%oO!W%nO!^&]i~O|+PO!^&Vi#f&Vi%^&Vi%a&Vii&Vi}&Vi!n&Vi&S&Vi~O!^+QO~Oc+SOq0VOx0eO!^&]i~P'WO|*|O!^&]i~O!^+UO~OX+WOq0VOx0eO}&ka!^&ka!n&ka~P'WO|+XO}&ka!^&ka!n&ka~O!_+[O&m+]O!^!oX~O!^+_O~O}(tO!^+`O~O}(tO!^+aO~O}(tO!^+bO~O}(tO!^+cO~OX&bOquOxvO}%pq!{%pq#f%pq%^%pq%a%pq&S%pq~P'WO|$ui}$ui!{$ui#f$ui%^$ui%a$ui&S$ui~P$dOX&bOquOxvO~P'WOX&bOq0VOx0eO#f%pa%^%pa%a%pa&S%pa~P'WO|+dO#f%pa%^%pa%a%pa&S%pa~O|$ha#f$ha%^$ha%a$hap$ha~P$dO#f&Xi%^&Xi%a&Xip&Xi~P'WO|+gO#f#Zq%^#Zq%a#Zq~O|+hO#_+jO#f&tX%^&tX%a&tXi&tX~OX+lOj)cO%}WO~O%}WO#f&ui%^&ui%a&ui~Oq0VOx0eO#f&qi%^&qi%a&qi}&qi~P'WOv+pO#i)lOP#gqX#gqh#gqj#gqq#gqu#gqx#gq!R#gq!S#gq!V#gq!W#gq!Z#gq!_#gq!j#gq!u#gq!v#gq!w#gq#O#gq#Q#gq#S#gq#U#gq#W#gq#[#gq#^#gq#a#gq#b#gq#d#gq#k#gq#n#gq#r#gq#t#gq#y#gq#|#gq$O#gq%Z#gq%w#gq%x#gq%|#gq%}#gq&c#gq&d#gq&g#gq&j#gq&n#gq&o#gq&p#gq%]#gq%a#gq~Op%Oa|%Oa~P$dOX)pOp&wi~P'WO|+wOp&wi~O|,QO}$uO#_,QO~O#p,ROP#mqX#mqh#mqj#mqq#mqu#mqx#mq!R#mq!S#mq!V#mq!W#mq!Z#mq!_#mq!j#mq!u#mq!v#mq!w#mq#O#mq#Q#mq#S#mq#U#mq#W#mq#[#mq#^#mq#a#mq#b#mq#d#mq#k#mq#n#mq#r#mq#t#mq#y#mq#|#mq$O#mq%Z#mq%w#mq%x#mq%|#mq%}#mq&c#mq&d#mq&g#mq&j#mq&n#mq&o#mq&p#mq%]#mq%a#mq~O#_,SO|%Qa}%Qa~Oq0VOx0eO}&xi~P'WO|,UO}&xi~O}$ZO&S,WOi&zX|&zX~O%}WOi&zX|&zX~O|,[Oi&yX~Oi,^O~O%[,`O~OX%YOc%YOq0VOx0eOi&^i~P'WO},bO|$ka!Y$ka~Oq0VOx0eO},cO|$ka!Y$ka~P'WOq0VOx0eO}*iO!Y&ai~P'WO|,fO!Y&ai~Oq0VOx0eO|,fO!Y&ai~P'WO|,fO},iO!Y&ai~Oi$gi|$gi!Y$gi~P$dOX(WOq0VOx0eO~P'WOp,kO~OX(WOi,lOq0VOx0eO~P'WOX(WOq0VOx0eO!Y&[q~P'WO|$fi!^$fi#f$fi%^$fi%a$fii$fi}$fi!n$fi&S$fi~P$dOX(gOq0VOx0eO~P'WOc+SOq0VOx0eO!^&]q~P'WO|,mO!^&]q~O!^,nO~OX(gOq0VOx0eO!^&Vq#f&Vq%^&Vq%a&Vqi&Vq}&Vq!n&Vq&S&Vq~P'WO},oO~OX+WOq0VOx0eO}&ki!^&ki!n&ki~P'WO|,tO}&ki!^&ki!n&ki~O!_+[O&m+]O!^!oa~OX&bOq0VOx0eO#f%pi%^%pi%a%pi&S%pi~P'WO|,wO#f%pi%^%pi%a%pi&S%pi~O%}WO#f&ta%^&ta%a&tai&ta~O|,zO#f&ta%^&ta%a&tai&ta~Oi,}O~Op%Oi|%Oi~P$dOX)pO~P'WOX)pOp&wq~P'WOv-QOP#lyX#lyh#lyj#lyq#lyu#lyx#ly!R#ly!S#ly!V#ly!W#ly!Z#ly!_#ly!j#ly!u#ly!v#ly!w#ly#O#ly#Q#ly#S#ly#U#ly#W#ly#[#ly#^#ly#a#ly#b#ly#d#ly#k#ly#n#ly#r#ly#t#ly#y#ly#|#ly$O#ly%Z#ly%w#ly%x#ly%|#ly%}#ly&c#ly&d#ly&g#ly&j#ly&n#ly&o#ly&p#ly%]#ly%a#ly~O%]-TO%a-TO~P`O#p-UOP#myX#myh#myj#myq#myu#myx#my!R#my!S#my!V#my!W#my!Z#my!_#my!j#my!u#my!v#my!w#my#O#my#Q#my#S#my#U#my#W#my#[#my#^#my#a#my#b#my#d#my#k#my#n#my#r#my#t#my#y#my#|#my$O#my%Z#my%w#my%x#my%|#my%}#my&c#my&d#my&g#my&j#my&n#my&o#my&p#my%]#my%a#my~Oq0VOx0eO}&xq~P'WO|-YO}&xq~O&S,WOi&za|&za~OX*VOc*WO%y*XO%}WOi&ya~O|-^Oi&ya~O$R-bO~OX%YOc%YOq0VOx0eO~P'WOq0VOx0eO}-cO|$ki!Y$ki~P'WOq0VOx0eO|$ki!Y$ki~P'WO}-cO|$ki!Y$ki~Oq0VOx0eO}*iO~P'WOq0VOx0eO}*iO!Y&aq~P'WO|-fO!Y&aq~Oq0VOx0eO|-fO!Y&aq~P'WOu-iO!V%oO!W%nOi&Wq!Y&Wq!^&Wq|&Wq~P!-iOc+SOq0VOx0eO!^&]y~P'WO|$ii!^$ii~P$dOc+SOq0VOx0eO~P'WOX+WOq0VOx0eO~P'WOX+WOq0VOx0eO}&kq!^&kq!n&kq~P'WO}(tO!^-mO!n-nO~OX&bOq0VOx0eO#f%pq%^%pq%a%pq&S%pq~P'WO#_-oO|$za#f$za%^$za%a$zai$za~O%}WO#f&ti%^&ti%a&tii&ti~O|-qO#f&ti%^&ti%a&tii&ti~Ov-tOP#l!RX#l!Rh#l!Rj#l!Rq#l!Ru#l!Rx#l!R!R#l!R!S#l!R!V#l!R!W#l!R!Z#l!R!_#l!R!j#l!R!u#l!R!v#l!R!w#l!R#O#l!R#Q#l!R#S#l!R#U#l!R#W#l!R#[#l!R#^#l!R#a#l!R#b#l!R#d#l!R#k#l!R#n#l!R#r#l!R#t#l!R#y#l!R#|#l!R$O#l!R%Z#l!R%w#l!R%x#l!R%|#l!R%}#l!R&c#l!R&d#l!R&g#l!R&j#l!R&n#l!R&o#l!R&p#l!R%]#l!R%a#l!R~Oq0VOx0eO}&xy~P'WOX*VOc*WO%y*XO%}WOi&yi~O$R-bO%]-zO%a-zO~OX.UOj.SO!Z.RO!_.TO!j-}O!v.PO!w.PO%x-|O%}WO&c]O&d^O&g_O~Oq0VOx0eO|$kq!Y$kq~P'WO}.ZO|$kq!Y$kq~Oq0VOx0eO}*iO!Y&ay~P'WO|.[O!Y&ay~Oq0VOx.`O~P'WOu-iO!V%oO!W%nOi&Wy!Y&Wy!^&Wy|&Wy~P!-iO}(tO!^.cO~O%}WO#f&tq%^&tq%a&tqi&tq~O|.eO#f&tq%^&tq%a&tqi&tq~OX*VOc*WO%y*XO%}WO~Oj.iO!h.gO|$SX#_$SX%r$SXi$SX~Ou$SX}$SX!Y$SX!^$SX~P$!}O%w.kO%x.kOu$TX|$TX}$TX#_$TX%r$TX!Y$TXi$TX!^$TX~O!j.mO~O|.qO#_.sO%r.nOu&|X}&|X!Y&|Xi&|X~Oc.vO~P#M_Oj.iOu&}X|&}X}&}X#_&}X%r&}X!Y&}Xi&}X!^&}X~Ou.zO}$uO~Oq0VOx0eO|$ky!Y$ky~P'WOq0VOx0eO}*iO!Y&a!R~P'WO|/OO!Y&a!R~Oi&ZXu&ZX!V&ZX!W&ZX!Y&ZX!^&ZX|&ZX~P!-iOu-iO!V%oO!W%nOi&Ya!Y&Ya!^&Ya|&Ya~O%}WO#f&ty%^&ty%a&tyi&ty~O!h.gOj$Zau$Za|$Za}$Za#_$Za%r$Za!Y$Zai$Za!^$Za~O!j/XO~O%w.kO%x.kOu$Ta|$Ta}$Ta#_$Ta%r$Ta!Y$Tai$Ta!^$Ta~O%r.nOu$Xa|$Xa}$Xa#_$Xa!Y$Xai$Xa!^$Xa~Ou&|a}&|a!Y&|ai&|a~P#MRO|/^Ou&|a}&|a!Y&|ai&|a~O!Y/aO~Oi/aO~O}/cO~O!^/dO~Oq0VOx0eO}*iO!Y&a!Z~P'WO}/gO~O&S/hO~P$!}O|/iO#_.sO%r.nOi'PX~O|/iOi'PX~Oi/kO~O!j/lO~O#_.sOu%Ua|%Ua}%Ua%r%Ua!Y%Uai%Ua!^%Ua~O#_.sO%r.nOu%Ya|%Ya}%Ya!Y%Yai%Ya~Ou&|i}&|i!Y&|ii&|i~P#MRO|/nO#_.sO%r.nO!^'Oa~O}$ca~P$dOi'Pa~P#MRO|/vOi'Pa~Oc/xO!^'Oi~P#M_O|/zO!^'Oi~O|/zO#_.sO%r.nO!^'Oi~O#_.sO%r.nOi$ai|$ai~O&S/}O~P$!}O#_.sO%r.nOi%Xa|%Xa~Oi'Pi~P#MRO}0QO~Oc/xO!^'Oq~P#M_O|0SO!^'Oq~O#_.sO%r.nO|%Wi!^%Wi~Oc/xO~P#M_Oc/xO!^'Oy~P#M_O#_.sO%r.nOi$bi|$bi~O#_.sO%r.nO|%Wq!^%Wq~O|+dO#f%pa%^%pa%a%pa&S%pa~P$dOX&bOq0VOx0eO~P'WOp0[O~Oq0[O~P'WO}0]O~Ov0^O~P!-iO&d&g&o&p&c&j&n%}&c~",
     goto: "!<w'QPPPPPPPP'RP'Z*s+]+v,b,}-kP.YP'Z.y.y'ZPPP'Z2cPPPPPP2c5VPP5VP7g7p=pPP=s>e>hPP'Z'ZPP?QPP'Z'ZPP'Z'Z'Z'Z'Z?U?{'ZP@OP@UD]GyPG}HZH_HcHg'ZPPPHkHq'RP'R'RP'RP'RP'RP'RP'R'R'RP'RPP'RPP'RPHwPIOIUPIOPIOIOPPPIOPKTPK^KdKjKTPIOKpPIOPKwK}PLRLgMUMoLRLRMuNSLRLRLRLRNhNnNqNvNy! T! Z! g! y!!P!!Z!!a!!}!#T!#Z!#a!#k!#q!#w!#}!$T!$Z!$m!$w!$}!%T!%Z!%e!%k!%q!%w!&R!&X!&c!&i!&r!&x!'X!'a!'k!'rPPPPPPPPPPPPPPPPP!'x!'{!(R!([!(f!(qPPPPPPPPPPPP!-e!.y!2s!6TPP!6]!6o!6x!7n!7e!7w!7}!8Q!8T!8W!8`!9PPPPPPPPPP!9S!9cPPPP!:R!:_!:k!:q!:z!:}!;T!;Z!;a!;dP!;l!;u!<q!<t]jOs#u$u)x+|'}eOTYZ[fistuwy}!O!S!T!U!V!Y!]!g!h!i!j!k!l!m!o!s!t!u!w!x#O#S#W#X#b#f#i#l#r#u$W$X$Z$]$`$p$r$s$u$|%Y%_%f%i%k%n%r%w%y&T&`&b&m&q&z&|&}'U'Y']'d'g'v'w'z'|'}(R(W(Y(^(b(g(h(n(q)O)Q)Y)])i)l)p)q)u)x*R*]*f*i*j*m*s*t*v*x*{*|+P+S+W+X+[+d+f+g+n+v+w+|,T,U,X,a,b,c,e,f,i,k,m,o,q,s,t,w-Y-[-c-f-i.Z.[.z/O/g0V0W0X0Y0[0]0^0_0`0b0f}!gQ#q$O$a$o${%p%u%{%|&r'['q)P)[)o*q*z+u,p/e0Z!P!hQ#q$O$a$o${%Q%p%u%{%|&r'['q)P)[)o*q*z+u,p/e0Z!R!iQ#q$O$a$o${%Q%R%p%u%{%|&r'['q)P)[)o*q*z+u,p/e0Z!T!jQ#q$O$a$o${%Q%R%S%p%u%{%|&r'['q)P)[)o*q*z+u,p/e0Z!V!kQ#q$O$a$o${%Q%R%S%T%p%u%{%|&r'['q)P)[)o*q*z+u,p/e0Z!X!lQ#q$O$a$o${%Q%R%S%T%U%p%u%{%|&r'['q)P)[)o*q*z+u,p/e0Z!]!lQ!r#q$O$a$o${%Q%R%S%T%U%V%p%u%{%|&r'['q)P)[)o*q*z+u,p/e0Z'}TOTYZ[fistuwy}!O!S!T!U!V!Y!]!g!h!i!j!k!l!m!o!s!t!u!w!x#O#S#W#X#b#f#i#l#r#u$W$X$Z$]$`$p$r$s$u$|%Y%_%f%i%k%n%r%w%y&T&`&b&m&q&z&|&}'U'Y']'d'g'v'w'z'|'}(R(W(Y(^(b(g(h(n(q)O)Q)Y)])i)l)p)q)u)x*R*]*f*i*j*m*s*t*v*x*{*|+P+S+W+X+[+d+f+g+n+v+w+|,T,U,X,a,b,c,e,f,i,k,m,o,q,s,t,w-Y-[-c-f-i.Z.[.z/O/g0V0W0X0Y0[0]0^0_0`0b0f&cVOYZ[isuw}!O!S!T!U!Y!m!o!s!t!u!w!x#b#f#i#l#r#u$X$Z$]$`$s$u%Y%_%f%i%k%r%w%y&T&`&m&q&|&}'U']'d'g'v'w'z'|'}(R(Y(b(h(n(q)O)Q)Y)i)l)u)x*R*]*f*i*j*m*s*t*v*x*{*|+P+W+X+[+d+g+n+|,T,U,X,a,b,c,e,f,i,k,m,o,q,s,t,w-Y-[-c-f-i.Z.[/O/g0V0W0X0Y0[0]0^0_0b0f%mXOYZ[isw}!O!S!T!U!Y!m!o#b#f#i#l#r#u$X$Z$]$`$s$u%Y%_%i%k%r%w%y&T&`&m&q&|&}'U']'d'g'v'w'z'|'}(R(Y(b(h(n(q)O)Q)Y)i)l)u)x*R*]*f*i*j*m*s*v*x*{*|+P+W+X+[+d+g+n+|,T,U,X,a,b,c,e,f,i,m,o,q,s,t,w-Y-[-c-f.Z.[/O0]0^0_Q$UvQ/P.`R0c0e'teOTYZ[fistuwy}!O!S!T!U!V!Y!]!g!h!i!j!k!l!o!s!t!u!w!x#O#S#W#X#b#f#i#l#r#u$W$X$Z$]$`$p$r$s$u$|%Y%_%f%i%k%n%r%w%y&T&`&b&m&q&z&|&}'U'Y']'d'g'v'z'|'}(R(W(Y(^(b(g(h(n(q)O)Q)Y)])i)l)p)q)u)x*R*]*i*j*m*s*t*v*x*{*|+P+S+W+X+[+d+f+g+n+v+w+|,T,U,X,b,c,e,f,i,k,m,o,q,s,t,w-Y-[-c-f-i.Z.[.z/O/g0V0W0X0Y0[0]0^0_0`0b0fW#xm!P!Q$gW$Qv&o.`0eQ$i!RQ$y!ZQ$z![W%X!m'w*f,aS&n$R$SQ'`$tQ)R&hQ)a'OU)b'Q)c)dU)e'S)f+mQ*T'iW*U'k,[-^-xS,Z*V*WY,y+h,z-p-q.eQ,|+jQ-V,QQ-X,Sl-{-b.R.S.U.o.q.v/^/c/h/m/x/}0QQ.d-oQ.w.TQ/T.iQ/`.sU/s/i/v0OX/y/n/z0R0SR&m$Q!_!{YZ!T!U!o%_%k%r'z'|'}(Y(b)l*i*j*m*s*v*x,b,c,e,f,i-c-f.Z.[/OR%i!zQ#PYQ&U#bQ&X#fQ&Z#iQ&]#lQ&v$]Q&y$`R,u+[T._-i/g![!nQ!r#q$O$a$o${%Q%R%S%T%U%V%p%u%{%|&r'['q)P)[)o*q*z+u,p/e0ZQ&k#yR'n$zR'v%XQ%b!qR/R.g'|dOTYZ[fistuwy}!O!S!T!U!V!Y!]!g!h!i!j!k!l!m!o!s!t!u!w!x#O#S#W#X#b#f#i#l#r#u$W$X$Z$]$`$p$r$s$u$|%Y%_%f%i%k%n%r%w%y&T&`&b&m&q&z&|&}'U'Y']'d'g'v'w'z'|'}(R(W(Y(^(b(g(h(n(q)O)Q)Y)])i)l)p)q)u)x*R*]*f*i*j*m*s*t*v*x*{*|+P+S+W+X+[+d+f+g+n+v+w+|,T,U,X,a,b,c,e,f,i,k,m,o,q,s,t,w-Y-[-c-f-i.Z.[.z/O/g0V0W0X0Y0[0]0^0_0`0b0fS#od#p!P.P-b.R.S.T.U.i.o.q.v/^/c/h/i/m/n/v/x/z/}0O0Q0R0S'|dOTYZ[fistuwy}!O!S!T!U!V!Y!]!g!h!i!j!k!l!m!o!s!t!u!w!x#O#S#W#X#b#f#i#l#r#u$W$X$Z$]$`$p$r$s$u$|%Y%_%f%i%k%n%r%w%y&T&`&b&m&q&z&|&}'U'Y']'d'g'v'w'z'|'}(R(W(Y(^(b(g(h(n(q)O)Q)Y)])i)l)p)q)u)x*R*]*f*i*j*m*s*t*v*x*{*|+P+S+W+X+[+d+f+g+n+v+w+|,T,U,X,a,b,c,e,f,i,k,m,o,q,s,t,w-Y-[-c-f-i.Z.[.z/O/g0V0W0X0Y0[0]0^0_0`0b0fT#od#pT#c`#de(u&U&X&Z&](w(y({(},u-nT+](t+^T#ga#hT#jb#kT#mc#nQ$_xR,Y*UX$]x$^$_&xZlOs$u)x+|XpOs)x+|Q$v!XQ'W$mQ'X$nQ'j$xQ'm$zQ)v'_Q)|'dQ*O'eQ*P'fQ*^'lQ*`'nQ+q)lQ+s)mQ+t)nQ+x)tS+z)w*_Q+})zQ,O){Q,P)}Q-O+pQ-P+rQ-R+yQ-S+{Q-W,RQ-s-QQ-u-UQ-v-VQ.f-tQ.{.XR/f.|WpOs)x+|R#{oQ'l$yR)w'`Q,X*UR-[,YQ*_'lR+{)wZnOos)x+|Q'p${R*b'qT-`,`-au.W-b.R.S.U.i.o.q.v/^/c/h/i/m/v/x/}0O0Qt.W-b.R.S.U.i.o.q.v/^/c/h/i/m/v/x/}0O0QQ.w.TX/y/n/z0R0S!P.O-b.R.S.T.U.i.o.q.v/^/c/h/i/m/n/v/x/z/}0O0Q0R0SQ.l-}R/Y.mg.o.Q.p/U/]/b/p/r/t0P0T0Uu.V-b.R.S.U.i.o.q.v/^/c/h/i/m/v/x/}0O0QX.j-{.V/T/sR/V.iV/u/i/v0OR.|.XQsOS#}s+|R+|)xQ&p$TR)W&pS%x#V$VS(i%x(lT(l%{&rQ%l!}Q%s#RW(Z%l%s(`(dQ(`%pR(d%uQ&{$aR)^&{Q(o%|Q*}(jT+T(o*}Q'x%ZR*g'xS'{%^%_Y*k'{*l,g-g.]U*l'|'}(OU,g*m*n*oS-g,h,iR.]-hQ#^^R&P#^Q#a_R&R#aQ#d`R&V#dQ(r&SS+Y(r+ZR+Z(sQ+^(tR,v+^Q#haR&Y#hQ#kbR&[#kQ#ncR&^#nQ#pdR&_#pQ#sgQ&a#qW&d#s&a)Z+eQ)Z&uR+e0ZQ$^xS&w$^&xR&x$_Q'V$kR)j'VQ&i#xR)S&iQ$g!QR'P$gQ+i)bS,{+i-rR-r,|Q'T$iR)g'TQ#vkR&f#vQ)k'WR+o)kQ'Z$oS)r'Z)sR)s'[Q'c$vR)y'cQ'h$wS*S'h,VR,V*TQ,]*YR-_,]WoOs)x+|R#zoQ-a,`R-y-ad.p.Q/U/]/b/p/r/t0P0T0UR/[.pU.h-{/T/sR/S.hQ/o/bS/{/o/|R/|/pS/j/U/VR/w/jQ.r.QR/_.rR!_PXrOs)x+|WqOs)x+|R'a$uYkOs$u)x+|R&e#u[xOs#u$u)x+|R&v$]&bQOYZ[isuw}!O!S!T!U!Y!m!o!s!t!u!w!x#b#f#i#l#r#u$X$Z$]$`$s$u%Y%_%f%i%k%r%w%y&T&`&m&q&|&}'U']'d'g'v'w'z'|'}(R(Y(b(h(n(q)O)Q)Y)i)l)u)x*R*]*f*i*j*m*s*t*v*x*{*|+P+W+X+[+d+g+n+|,T,U,X,a,b,c,e,f,i,k,m,o,q,s,t,w-Y-[-c-f-i.Z.[/O/g0V0W0X0Y0[0]0^0_0b0fQ!rTQ#qfQ$OtU$ay%n(^S$o!V$rQ${!]Q%Q!gQ%R!hQ%S!iQ%T!jQ%U!kQ%V!lQ%p#OQ%u#SQ%{#WQ%|#XQ&r$WQ'[$pQ'q$|Q)P&bU)[&z)]+fW)o'Y)q+v+wQ*q(WQ*z(gQ+u)pQ,p+SQ/e.zR0Z0`Q!}YQ#RZQ$m!TQ$n!UQ%^!oQ(O%_^(V%k%r(Y(b*s*v*x^*h'z*j,e,f-f.[/OQ*n'|Q*o'}Q+r)lQ,d*iQ,h*mQ-d,bQ-e,cQ-h,iQ.Y-cR.}.Z[gOs#u$u)x+|!^!zYZ!T!U!o%_%k%r'z'|'}(Y(b)l*i*j*m*s*v*x,b,c,e,f,i-c-f.Z.[/OQ#V[Q#tiS$Vw}Q$d!OW$k!S$`'])uS$w!Y$sW%W!m'w*f,aY&S#b#f#i#l+[`&c#r&`)O)Q)Y+d,w0_Q&s$XQ&t$ZQ&u$]Q't%YQ(U%iW(f%w(h*{+PQ(j%yQ(s&TQ)U&mS)X&q0]Q)_&|Q)`&}U)h'U)i+nQ)}'dY*Q'g*R,T,U-YQ*d'vS*p(R0^W+R(n*|,m,qW+V(q+X,s,tQ,_*]Q,r+WQ,x+gQ-Z,XQ-l,oR-w-[hUOs#r#u$u&`&q(R)O)Q)x+|%S!yYZ[iw}!O!S!T!U!Y!m!o#b#f#i#l$X$Z$]$`$s%Y%_%i%k%r%w%y&T&m&|&}'U']'d'g'v'w'z'|'}(Y(b(h(n(q)Y)i)l)u*R*]*f*i*j*m*s*v*x*{*|+P+W+X+[+d+g+n,T,U,X,a,b,c,e,f,i,m,o,q,s,t,w-Y-[-c-f.Z.[/O0]0^0_Q$PuW%c!s!w0W0bQ%d!tQ%e!uQ%g!xQ%q0VS(Q%f0[Q(S0XQ(T0YQ,j*tQ-k,kS.^-i/gR0d0fU$Tv.`0eR)V&o[hOs#u$u)x+|a!|Y#b#f#i#l$]$`+[Q#[[Q$YwR$c}Q%m!}Q%t#RQ%z#VQ't%WQ(a%pQ(e%uQ(m%{Q(p%|Q+O(jQ-j,jQ.b-kR/Q.aQ$byQ(]%nR*u(^Q.a-iR/q/gR#UZR#Z[R%]!mQ%Z!mV*e'w*f,a!]!pQ!r#q$O$a$o${%Q%R%S%T%U%V%p%u%{%|&r'['q)P)[)o*q*z+u,p/e0ZR%`!oQ&U#bQ&X#fQ&Z#iQ&]#lR,u+[Q(v&UQ(x&XQ(z&ZQ(|&]Q+`(wQ+a(yQ+b({Q+c(}Q-m,uR.c-nQ$l!SQ&y$`Q)t']R+y)uQ#ymQ$e!PQ$h!QR'R$gQ)a'QR+l)dQ)a'QQ+k)cR+l)dR$j!RXqOs)x+|Q$q!VR'^$rQ$x!YR'_$sR*['kQ*Y'kV-],[-^-xQ.X-bQ.t.RR.u.SU.Q-b.R.SQ.y.UQ/U.iQ/Z.oU/].q/^/mQ/b.vQ/p/cQ/r/hU/t/i/v0OQ0P/xQ0T/}R0U0QR.x.TR/W.i",
     nodeNames: "⚠ print { { { { Comment Script AssignStatement * BinaryExpression BitOp BitOp BitOp BitOp ArithOp ArithOp @ ArithOp ** UnaryExpression ArithOp BitOp AwaitExpression await ) ( ParenthesizedExpression BinaryExpression or and CompareOp in not is UnaryExpression ConditionalExpression if else LambdaExpression lambda ParamList VariableName AssignOp , : NamedExpression AssignOp YieldExpression yield from TupleExpression ComprehensionExpression async for LambdaExpression ] [ ArrayExpression ArrayComprehensionExpression } { DictionaryExpression DictionaryComprehensionExpression SetExpression SetComprehensionExpression CallExpression ArgList AssignOp MemberExpression . PropertyName Number String FormatString FormatReplacement FormatConversion FormatSpec FormatReplacement FormatReplacement FormatReplacement FormatReplacement ContinuedString Ellipsis None Boolean TypeDef AssignOp UpdateStatement UpdateOp ExpressionStatement DeleteStatement del PassStatement pass BreakStatement break ContinueStatement continue ReturnStatement return YieldStatement PrintStatement RaiseStatement raise ImportStatement import as ScopeStatement global nonlocal AssertStatement assert StatementGroup ; IfStatement Body elif WhileStatement while ForStatement TryStatement try except finally WithStatement with FunctionDefinition def ParamList AssignOp TypeDef ClassDefinition class DecoratedStatement Decorator At MatchStatement match MatchBody MatchClause case CapturePattern LiteralPattern ArithOp ArithOp AsPattern OrPattern LogicOp AttributePattern SequencePattern MappingPattern StarPattern ClassPattern PatternArgList KeywordPattern KeywordPattern Guard",
     maxTerm: 277,
     context: trackIndent$1,
     nodeProps: [
       ["group", -14,8,88,90,91,93,95,97,99,101,102,103,105,108,111,"Statement Statement",-22,10,20,23,27,42,51,52,58,59,62,63,64,65,66,69,72,73,74,82,83,84,85,"Expression",-10,113,115,118,120,121,125,127,132,134,137,"Statement",-9,142,143,146,147,149,150,151,152,153,"Pattern"],
       ["openedBy", 25,"(",56,"[",60,"{"],
       ["closedBy", 26,")",57,"]",61,"}"]
     ],
     propSources: [pythonHighlighting],
     skippedNodes: [0,6],
     repeatNodeCount: 37,
     tokenData: "%-W#sR!`OX%TXY=|Y[%T[]=|]p%Tpq=|qr@_rsDOst!+|tu%Tuv!Nnvw#!|wx#$Wxy#:Uyz#;Yz{#<^{|#>x|}#@S}!O#AW!O!P#Ci!P!Q#N_!Q!R$!y!R![$&w![!]$1e!]!^$3s!^!_$4w!_!`$7c!`!a$8m!a!b%T!b!c$;U!c!d$<b!d!e$>W!e!h$<b!h!i$H[!i!t$<b!t!u%#r!u!w$<b!w!x$Fl!x!}$<b!}#O%%z#O#P?d#P#Q%'O#Q#R%(S#R#S$<b#S#T%T#T#U$<b#U#V$>W#V#Y$<b#Y#Z$H[#Z#f$<b#f#g%#r#g#i$<b#i#j$Fl#j#o$<b#o#p%)^#p#q%*S#q#r%+^#r#s%,S#s$g%T$g;'S$<b;'S;=`$>Q<%lO$<b!n%^]&m!b&eS&hWOr%Trs&Vsw%Twx/Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T!n&^]&m!b&eSOr%Trs'Vsw%Twx/Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T!n'^]&m!b&eSOr%Trs(Vsw%Twx/Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T!f(^Z&m!b&eSOw(Vwx)Px#O(V#O#P+Z#P#o(V#o#p+x#p#q(V#q#r+x#r;'S(V;'S;=`/R<%lO(V!f)UZ&m!bOw(Vwx)wx#O(V#O#P+Z#P#o(V#o#p+x#p#q(V#q#r+x#r;'S(V;'S;=`/R<%lO(V!f)|Z&m!bOw(Vwx*ox#O(V#O#P+Z#P#o(V#o#p+x#p#q(V#q#r+x#r;'S(V;'S;=`/R<%lO(V!b*tT&m!bO#o*o#p#q*o#r;'S*o;'S;=`+T<%lO*o!b+WP;=`<%l*o!f+`W&m!bO#o(V#o#p+x#p#q(V#q#r+x#r;'S(V;'S;=`.d;=`<%l+x<%lO(VS+}V&eSOw+xwx,dx#O+x#O#P-c#P;'S+x;'S;=`.^<%lO+xS,gVOw+xwx,|x#O+x#O#P-c#P;'S+x;'S;=`.^<%lO+xS-PUOw+xx#O+x#O#P-c#P;'S+x;'S;=`.^<%lO+xS-fRO;'S+x;'S;=`-o;=`O+xS-tW&eSOw+xwx,dx#O+x#O#P-c#P;'S+x;'S;=`.^;=`<%l+x<%lO+xS.aP;=`<%l+x!f.iW&eSOw+xwx,dx#O+x#O#P-c#P;'S+x;'S;=`.^;=`<%l(V<%lO+x!f/UP;=`<%l(V!n/`]&m!b&hWOr%Trs&Vsw%Twx0Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T!n0`]&m!b&hWOr%Trs&Vsw%Twx1Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T!j1`Z&m!b&hWOr1Xrs2Rs#O1X#O#P3q#P#o1X#o#p4`#p#q1X#q#r4`#r;'S1X;'S;=`7i<%lO1X!j2WZ&m!bOr1Xrs2ys#O1X#O#P3q#P#o1X#o#p4`#p#q1X#q#r4`#r;'S1X;'S;=`7i<%lO1X!j3OZ&m!bOr1Xrs*os#O1X#O#P3q#P#o1X#o#p4`#p#q1X#q#r4`#r;'S1X;'S;=`7i<%lO1X!j3vW&m!bO#o1X#o#p4`#p#q1X#q#r4`#r;'S1X;'S;=`6z;=`<%l4`<%lO1XW4eV&hWOr4`rs4zs#O4`#O#P5y#P;'S4`;'S;=`6t<%lO4`W4}VOr4`rs5ds#O4`#O#P5y#P;'S4`;'S;=`6t<%lO4`W5gUOr4`s#O4`#O#P5y#P;'S4`;'S;=`6t<%lO4`W5|RO;'S4`;'S;=`6V;=`O4`W6[W&hWOr4`rs4zs#O4`#O#P5y#P;'S4`;'S;=`6t;=`<%l4`<%lO4`W6wP;=`<%l4`!j7PW&hWOr4`rs4zs#O4`#O#P5y#P;'S4`;'S;=`6t;=`<%l1X<%lO4`!j7lP;=`<%l1X!n7tW&m!bO#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=P;=`<%l8^<%lO%T[8eX&eS&hWOr8^rs9Qsw8^wx:dx#O8^#O#P;v#P;'S8^;'S;=`<y<%lO8^[9VX&eSOr8^rs9rsw8^wx:dx#O8^#O#P;v#P;'S8^;'S;=`<y<%lO8^[9wX&eSOr8^rs+xsw8^wx:dx#O8^#O#P;v#P;'S8^;'S;=`<y<%lO8^[:iX&hWOr8^rs9Qsw8^wx;Ux#O8^#O#P;v#P;'S8^;'S;=`<y<%lO8^[;ZX&hWOr8^rs9Qsw8^wx4`x#O8^#O#P;v#P;'S8^;'S;=`<y<%lO8^[;yRO;'S8^;'S;=`<S;=`O8^[<ZY&eS&hWOr8^rs9Qsw8^wx:dx#O8^#O#P;v#P;'S8^;'S;=`<y;=`<%l8^<%lO8^[<|P;=`<%l8^!n=WY&eS&hWOr8^rs9Qsw8^wx:dx#O8^#O#P;v#P;'S8^;'S;=`<y;=`<%l%T<%lO8^!n=yP;=`<%l%T#s>Xc&m!b&eS&hW%k!TOX%TXY=|Y[%T[]=|]p%Tpq=|qr%Trs&Vsw%Twx/Xx#O%T#O#P?d#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#s?i[&m!bOY%TYZ=|Z]%T]^=|^#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=P;=`<%l8^<%lO%T!q@hd&m!b&eS&hWOr%Trs&Vsw%Twx/Xx!_%T!_!`Av!`#O%T#O#P7o#P#T%T#T#UBz#U#f%T#f#gBz#g#hBz#h#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T!qBR]oR&m!b&eS&hWOr%Trs&Vsw%Twx/Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T!qCV]!nR&m!b&eS&hWOr%Trs&Vsw%Twx/Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#cDXa&m!b&eS&csOYE^YZ%TZ]E^]^%T^rE^rs!)|swE^wxGpx#OE^#O#P!!u#P#oE^#o#p!#d#p#qE^#q#r!#d#r;'SE^;'S;=`!)v<%lOE^#cEia&m!b&eS&hW&csOYE^YZ%TZ]E^]^%T^rE^rsFnswE^wxGpx#OE^#O#P!!u#P#oE^#o#p!#d#p#qE^#q#r!#d#r;'SE^;'S;=`!)v<%lOE^#cFw]&m!b&eS&csOr%Trs'Vsw%Twx/Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#cGya&m!b&hW&csOYE^YZ%TZ]E^]^%T^rE^rsFnswE^wxIOx#OE^#O#P!!u#P#oE^#o#p!#d#p#qE^#q#r!#d#r;'SE^;'S;=`!)v<%lOE^#cIXa&m!b&hW&csOYE^YZ%TZ]E^]^%T^rE^rsFnswE^wxJ^x#OE^#O#P!!u#P#oE^#o#p!#d#p#qE^#q#r!#d#r;'SE^;'S;=`!)v<%lOE^#_Jg_&m!b&hW&csOYJ^YZ1XZ]J^]^1X^rJ^rsKfs#OJ^#O#PL`#P#oJ^#o#pL}#p#qJ^#q#rL}#r;'SJ^;'S;=`!!o<%lOJ^#_KmZ&m!b&csOr1Xrs2ys#O1X#O#P3q#P#o1X#o#p4`#p#q1X#q#r4`#r;'S1X;'S;=`7i<%lO1X#_LeW&m!bO#oJ^#o#pL}#p#qJ^#q#rL}#r;'SJ^;'S;=`! r;=`<%lL}<%lOJ^{MUZ&hW&csOYL}YZ4`Z]L}]^4`^rL}rsMws#OL}#O#PNc#P;'SL};'S;=`! l<%lOL}{M|V&csOr4`rs5ds#O4`#O#P5y#P;'S4`;'S;=`6t<%lO4`{NfRO;'SL};'S;=`No;=`OL}{Nv[&hW&csOYL}YZ4`Z]L}]^4`^rL}rsMws#OL}#O#PNc#P;'SL};'S;=`! l;=`<%lL}<%lOL}{! oP;=`<%lL}#_! y[&hW&csOYL}YZ4`Z]L}]^4`^rL}rsMws#OL}#O#PNc#P;'SL};'S;=`! l;=`<%lJ^<%lOL}#_!!rP;=`<%lJ^#c!!zW&m!bO#oE^#o#p!#d#p#qE^#q#r!#d#r;'SE^;'S;=`!(q;=`<%l!#d<%lOE^!P!#m]&eS&hW&csOY!#dYZ8^Z]!#d]^8^^r!#drs!$fsw!#dwx!%Yx#O!#d#O#P!'Y#P;'S!#d;'S;=`!(k<%lO!#d!P!$mX&eS&csOr8^rs9rsw8^wx:dx#O8^#O#P;v#P;'S8^;'S;=`<y<%lO8^!P!%a]&hW&csOY!#dYZ8^Z]!#d]^8^^r!#drs!$fsw!#dwx!&Yx#O!#d#O#P!'Y#P;'S!#d;'S;=`!(k<%lO!#d!P!&a]&hW&csOY!#dYZ8^Z]!#d]^8^^r!#drs!$fsw!#dwxL}x#O!#d#O#P!'Y#P;'S!#d;'S;=`!(k<%lO!#d!P!']RO;'S!#d;'S;=`!'f;=`O!#d!P!'o^&eS&hW&csOY!#dYZ8^Z]!#d]^8^^r!#drs!$fsw!#dwx!%Yx#O!#d#O#P!'Y#P;'S!#d;'S;=`!(k;=`<%l!#d<%lO!#d!P!(nP;=`<%l!#d#c!(z^&eS&hW&csOY!#dYZ8^Z]!#d]^8^^r!#drs!$fsw!#dwx!%Yx#O!#d#O#P!'Y#P;'S!#d;'S;=`!(k;=`<%lE^<%lO!#d#c!)yP;=`<%lE^#c!*V]&m!b&eS&csOr%Trs!+Osw%Twx/Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#c!+ZZ&iW&m!b&eS&gsOw(Vwx)Px#O(V#O#P+Z#P#o(V#o#p+x#p#q(V#q#r+x#r;'S(V;'S;=`/R<%lO(V#s!,XaU!T&m!b&eS&hWOY!+|YZ%TZ]!+|]^%T^r!+|rs!-^sw!+|wx!:hx#O!+|#O#P!FW#P#o!+|#o#p!GT#p#q!+|#q#r!GT#r;'S!+|;'S;=`!Nh<%lO!+|#s!-gaU!T&m!b&eSOY!+|YZ%TZ]!+|]^%T^r!+|rs!.lsw!+|wx!:hx#O!+|#O#P!FW#P#o!+|#o#p!GT#p#q!+|#q#r!GT#r;'S!+|;'S;=`!Nh<%lO!+|#s!.uaU!T&m!b&eSOY!+|YZ%TZ]!+|]^%T^r!+|rs!/zsw!+|wx!:hx#O!+|#O#P!FW#P#o!+|#o#p!GT#p#q!+|#q#r!GT#r;'S!+|;'S;=`!Nh<%lO!+|#k!0T_U!T&m!b&eSOY!/zYZ(VZ]!/z]^(V^w!/zwx!1Sx#O!/z#O#P!4z#P#o!/z#o#p!5w#p#q!/z#q#r!5w#r;'S!/z;'S;=`!:b<%lO!/z#k!1Z_U!T&m!bOY!/zYZ(VZ]!/z]^(V^w!/zwx!2Yx#O!/z#O#P!4z#P#o!/z#o#p!5w#p#q!/z#q#r!5w#r;'S!/z;'S;=`!:b<%lO!/z#k!2a_U!T&m!bOY!/zYZ(VZ]!/z]^(V^w!/zwx!3`x#O!/z#O#P!4z#P#o!/z#o#p!5w#p#q!/z#q#r!5w#r;'S!/z;'S;=`!:b<%lO!/z#g!3gZU!T&m!bOY!3`YZ*oZ]!3`]^*o^#o!3`#o#p!4Y#p#q!3`#q#r!4Y#r;'S!3`;'S;=`!4t<%lO!3`!T!4_TU!TOY!4YZ]!4Y^;'S!4Y;'S;=`!4n<%lO!4Y!T!4qP;=`<%l!4Y#g!4wP;=`<%l!3`#k!5R[U!T&m!bOY!/zYZ(VZ]!/z]^(V^#o!/z#o#p!5w#p#q!/z#q#r!5w#r;'S!/z;'S;=`!9s;=`<%l+x<%lO!/z!X!6OZU!T&eSOY!5wYZ+xZ]!5w]^+x^w!5wwx!6qx#O!5w#O#P!8a#P;'S!5w;'S;=`!9m<%lO!5w!X!6vZU!TOY!5wYZ+xZ]!5w]^+x^w!5wwx!7ix#O!5w#O#P!8a#P;'S!5w;'S;=`!9m<%lO!5w!X!7nZU!TOY!5wYZ+xZ]!5w]^+x^w!5wwx!4Yx#O!5w#O#P!8a#P;'S!5w;'S;=`!9m<%lO!5w!X!8fWU!TOY!5wYZ+xZ]!5w]^+x^;'S!5w;'S;=`!9O;=`<%l+x<%lO!5w!X!9TW&eSOw+xwx,dx#O+x#O#P-c#P;'S+x;'S;=`.^;=`<%l!5w<%lO+x!X!9pP;=`<%l!5w#k!9xW&eSOw+xwx,dx#O+x#O#P-c#P;'S+x;'S;=`.^;=`<%l!/z<%lO+x#k!:eP;=`<%l!/z#s!:qaU!T&m!b&hWOY!+|YZ%TZ]!+|]^%T^r!+|rs!-^sw!+|wx!;vx#O!+|#O#P!FW#P#o!+|#o#p!GT#p#q!+|#q#r!GT#r;'S!+|;'S;=`!Nh<%lO!+|#s!<PaU!T&m!b&hWOY!+|YZ%TZ]!+|]^%T^r!+|rs!-^sw!+|wx!=Ux#O!+|#O#P!FW#P#o!+|#o#p!GT#p#q!+|#q#r!GT#r;'S!+|;'S;=`!Nh<%lO!+|#o!=__U!T&m!b&hWOY!=UYZ1XZ]!=U]^1X^r!=Urs!>^s#O!=U#O#P!@j#P#o!=U#o#p!Ag#p#q!=U#q#r!Ag#r;'S!=U;'S;=`!FQ<%lO!=U#o!>e_U!T&m!bOY!=UYZ1XZ]!=U]^1X^r!=Urs!?ds#O!=U#O#P!@j#P#o!=U#o#p!Ag#p#q!=U#q#r!Ag#r;'S!=U;'S;=`!FQ<%lO!=U#o!?k_U!T&m!bOY!=UYZ1XZ]!=U]^1X^r!=Urs!3`s#O!=U#O#P!@j#P#o!=U#o#p!Ag#p#q!=U#q#r!Ag#r;'S!=U;'S;=`!FQ<%lO!=U#o!@q[U!T&m!bOY!=UYZ1XZ]!=U]^1X^#o!=U#o#p!Ag#p#q!=U#q#r!Ag#r;'S!=U;'S;=`!Ec;=`<%l4`<%lO!=U!]!AnZU!T&hWOY!AgYZ4`Z]!Ag]^4`^r!Agrs!Bas#O!Ag#O#P!DP#P;'S!Ag;'S;=`!E]<%lO!Ag!]!BfZU!TOY!AgYZ4`Z]!Ag]^4`^r!Agrs!CXs#O!Ag#O#P!DP#P;'S!Ag;'S;=`!E]<%lO!Ag!]!C^ZU!TOY!AgYZ4`Z]!Ag]^4`^r!Agrs!4Ys#O!Ag#O#P!DP#P;'S!Ag;'S;=`!E]<%lO!Ag!]!DUWU!TOY!AgYZ4`Z]!Ag]^4`^;'S!Ag;'S;=`!Dn;=`<%l4`<%lO!Ag!]!DsW&hWOr4`rs4zs#O4`#O#P5y#P;'S4`;'S;=`6t;=`<%l!Ag<%lO4`!]!E`P;=`<%l!Ag#o!EhW&hWOr4`rs4zs#O4`#O#P5y#P;'S4`;'S;=`6t;=`<%l!=U<%lO4`#o!FTP;=`<%l!=U#s!F_[U!T&m!bOY!+|YZ%TZ]!+|]^%T^#o!+|#o#p!GT#p#q!+|#q#r!GT#r;'S!+|;'S;=`!Mq;=`<%l8^<%lO!+|!a!G^]U!T&eS&hWOY!GTYZ8^Z]!GT]^8^^r!GTrs!HVsw!GTwx!JVx#O!GT#O#P!LV#P;'S!GT;'S;=`!Mk<%lO!GT!a!H^]U!T&eSOY!GTYZ8^Z]!GT]^8^^r!GTrs!IVsw!GTwx!JVx#O!GT#O#P!LV#P;'S!GT;'S;=`!Mk<%lO!GT!a!I^]U!T&eSOY!GTYZ8^Z]!GT]^8^^r!GTrs!5wsw!GTwx!JVx#O!GT#O#P!LV#P;'S!GT;'S;=`!Mk<%lO!GT!a!J^]U!T&hWOY!GTYZ8^Z]!GT]^8^^r!GTrs!HVsw!GTwx!KVx#O!GT#O#P!LV#P;'S!GT;'S;=`!Mk<%lO!GT!a!K^]U!T&hWOY!GTYZ8^Z]!GT]^8^^r!GTrs!HVsw!GTwx!Agx#O!GT#O#P!LV#P;'S!GT;'S;=`!Mk<%lO!GT!a!L[WU!TOY!GTYZ8^Z]!GT]^8^^;'S!GT;'S;=`!Lt;=`<%l8^<%lO!GT!a!L{Y&eS&hWOr8^rs9Qsw8^wx:dx#O8^#O#P;v#P;'S8^;'S;=`<y;=`<%l!GT<%lO8^!a!MnP;=`<%l!GT#s!MxY&eS&hWOr8^rs9Qsw8^wx:dx#O8^#O#P;v#P;'S8^;'S;=`<y;=`<%l!+|<%lO8^#s!NkP;=`<%l!+|#b!Ny_%zQ&m!b&eS&hWOr%Trs&Vsw%Twx/Xx!_%T!_!`# x!`#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#b#!T]!{r&m!b&eS&hWOr%Trs&Vsw%Twx/Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#b##X_%tQ&m!b&eS&hWOr%Trs&Vsw%Twx/Xx!_%T!_!`# x!`#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#c#$aa&m!b&hW&csOY#%fYZ%TZ]#%f]^%T^r#%frs#&vsw#%fwx#8Ux#O#%f#O#P#0}#P#o#%f#o#p#1l#p#q#%f#q#r#1l#r;'S#%f;'S;=`#8O<%lO#%f#c#%qa&m!b&eS&hW&csOY#%fYZ%TZ]#%f]^%T^r#%frs#&vsw#%fwx#/{x#O#%f#O#P#0}#P#o#%f#o#p#1l#p#q#%f#q#r#1l#r;'S#%f;'S;=`#8O<%lO#%f#c#'Pa&m!b&eS&csOY#%fYZ%TZ]#%f]^%T^r#%frs#(Usw#%fwx#/{x#O#%f#O#P#0}#P#o#%f#o#p#1l#p#q#%f#q#r#1l#r;'S#%f;'S;=`#8O<%lO#%f#c#(_a&m!b&eS&csOY#%fYZ%TZ]#%f]^%T^r#%frs#)dsw#%fwx#/{x#O#%f#O#P#0}#P#o#%f#o#p#1l#p#q#%f#q#r#1l#r;'S#%f;'S;=`#8O<%lO#%f#Z#)m_&m!b&eS&csOY#)dYZ(VZ]#)d]^(V^w#)dwx#*lx#O#)d#O#P#+f#P#o#)d#o#p#,T#p#q#)d#q#r#,T#r;'S#)d;'S;=`#/u<%lO#)d#Z#*sZ&m!b&csOw(Vwx)wx#O(V#O#P+Z#P#o(V#o#p+x#p#q(V#q#r+x#r;'S(V;'S;=`/R<%lO(V#Z#+kW&m!bO#o#)d#o#p#,T#p#q#)d#q#r#,T#r;'S#)d;'S;=`#.x;=`<%l#,T<%lO#)dw#,[Z&eS&csOY#,TYZ+xZ]#,T]^+x^w#,Twx#,}x#O#,T#O#P#-i#P;'S#,T;'S;=`#.r<%lO#,Tw#-SV&csOw+xwx,|x#O+x#O#P-c#P;'S+x;'S;=`.^<%lO+xw#-lRO;'S#,T;'S;=`#-u;=`O#,Tw#-|[&eS&csOY#,TYZ+xZ]#,T]^+x^w#,Twx#,}x#O#,T#O#P#-i#P;'S#,T;'S;=`#.r;=`<%l#,T<%lO#,Tw#.uP;=`<%l#,T#Z#/P[&eS&csOY#,TYZ+xZ]#,T]^+x^w#,Twx#,}x#O#,T#O#P#-i#P;'S#,T;'S;=`#.r;=`<%l#)d<%lO#,T#Z#/xP;=`<%l#)d#c#0U]&m!b&hW&csOr%Trs&Vsw%Twx0Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#c#1SW&m!bO#o#%f#o#p#1l#p#q#%f#q#r#1l#r;'S#%f;'S;=`#6y;=`<%l#1l<%lO#%f!P#1u]&eS&hW&csOY#1lYZ8^Z]#1l]^8^^r#1lrs#2nsw#1lwx#4nx#O#1l#O#P#5b#P;'S#1l;'S;=`#6s<%lO#1l!P#2u]&eS&csOY#1lYZ8^Z]#1l]^8^^r#1lrs#3nsw#1lwx#4nx#O#1l#O#P#5b#P;'S#1l;'S;=`#6s<%lO#1l!P#3u]&eS&csOY#1lYZ8^Z]#1l]^8^^r#1lrs#,Tsw#1lwx#4nx#O#1l#O#P#5b#P;'S#1l;'S;=`#6s<%lO#1l!P#4uX&hW&csOr8^rs9Qsw8^wx;Ux#O8^#O#P;v#P;'S8^;'S;=`<y<%lO8^!P#5eRO;'S#1l;'S;=`#5n;=`O#1l!P#5w^&eS&hW&csOY#1lYZ8^Z]#1l]^8^^r#1lrs#2nsw#1lwx#4nx#O#1l#O#P#5b#P;'S#1l;'S;=`#6s;=`<%l#1l<%lO#1l!P#6vP;=`<%l#1l#c#7S^&eS&hW&csOY#1lYZ8^Z]#1l]^8^^r#1lrs#2nsw#1lwx#4nx#O#1l#O#P#5b#P;'S#1l;'S;=`#6s;=`<%l#%f<%lO#1l#c#8RP;=`<%l#%f#c#8_]&m!b&hW&csOr%Trs&Vsw%Twx#9Wx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#c#9cZ&fS&m!b&hW&dsOr1Xrs2Rs#O1X#O#P3q#P#o1X#o#p4`#p#q1X#q#r4`#r;'S1X;'S;=`7i<%lO1X#c#:a]js&m!b&eS&hWOr%Trs&Vsw%Twx/Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T!q#;e]iR&m!b&eS&hWOr%Trs&Vsw%Twx/Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#c#<iaXs&m!b&eS&hWOr%Trs&Vsw%Twx/Xxz%Tz{#=n{!_%T!_!`# x!`#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#c#=y_cR&m!b&eS&hWOr%Trs&Vsw%Twx/Xx!_%T!_!`# x!`#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#c#?T_%ws&m!b&eS&hWOr%Trs&Vsw%Twx/Xx!_%T!_!`# x!`#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T!q#@_]|R&m!b&eS&hWOr%Trs&Vsw%Twx/Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#s#Ac`%xs&m!b&eS&hWOr%Trs&Vsw%Twx/Xx!_%T!_!`# x!`!a#Be!a#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#O#Bp]&{`&m!b&eS&hWOr%Trs&Vsw%Twx/Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#c#Cta!hQ&m!b&eS&hWOr%Trs&Vsw%Twx/Xx!O%T!O!P#Dy!P!Q%T!Q![#GV![#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#c#ES_&m!b&eS&hWOr%Trs&Vsw%Twx/Xx!O%T!O!P#FR!P#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#c#F^]!us&m!b&eS&hWOr%Trs&Vsw%Twx/Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#a#Gbi!jq&m!b&eS&hWOr%Trs&Vsw%Twx/Xx!Q%T!Q![#GV![!g%T!g!h#IP!h!l%T!l!m#MZ!m#O%T#O#P7o#P#R%T#R#S#GV#S#X%T#X#Y#IP#Y#^%T#^#_#MZ#_#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#a#IYc&m!b&eS&hWOr%Trs&Vsw%Twx/Xx{%T{|#Je|}%T}!O#Je!O!Q%T!Q![#Km![#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#a#Jn_&m!b&eS&hWOr%Trs&Vsw%Twx/Xx!Q%T!Q![#Km![#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#a#Kxe!jq&m!b&eS&hWOr%Trs&Vsw%Twx/Xx!Q%T!Q![#Km![!l%T!l!m#MZ!m#O%T#O#P7o#P#R%T#R#S#Km#S#^%T#^#_#MZ#_#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#a#Mf]!jq&m!b&eS&hWOr%Trs&Vsw%Twx/Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#c#Nja%yR&m!b&eS&hWOr%Trs&Vsw%Twx/Xx!P%T!P!Q$ o!Q!_%T!_!`# x!`#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#b$ z_%{Q&m!b&eS&hWOr%Trs&Vsw%Twx/Xx!_%T!_!`# x!`#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#a$#Uw!jq&m!b&eS&hWOr%Trs&Vsw%Twx/Xx!O%T!O!P$%o!P!Q%T!Q![$&w![!d%T!d!e$(w!e!g%T!g!h#IP!h!l%T!l!m#MZ!m!q%T!q!r$+m!r!z%T!z!{$.]!{#O%T#O#P7o#P#R%T#R#S$&w#S#U%T#U#V$(w#V#X%T#X#Y#IP#Y#^%T#^#_#MZ#_#c%T#c#d$+m#d#l%T#l#m$.]#m#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#a$%x_&m!b&eS&hWOr%Trs&Vsw%Twx/Xx!Q%T!Q![#GV![#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#a$'Sk!jq&m!b&eS&hWOr%Trs&Vsw%Twx/Xx!O%T!O!P$%o!P!Q%T!Q![$&w![!g%T!g!h#IP!h!l%T!l!m#MZ!m#O%T#O#P7o#P#R%T#R#S$&w#S#X%T#X#Y#IP#Y#^%T#^#_#MZ#_#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#a$)Qb&m!b&eS&hWOr%Trs&Vsw%Twx/Xx!Q%T!Q!R$*Y!R!S$*Y!S#O%T#O#P7o#P#R%T#R#S$*Y#S#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#a$*eb!jq&m!b&eS&hWOr%Trs&Vsw%Twx/Xx!Q%T!Q!R$*Y!R!S$*Y!S#O%T#O#P7o#P#R%T#R#S$*Y#S#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#a$+va&m!b&eS&hWOr%Trs&Vsw%Twx/Xx!Q%T!Q!Y$,{!Y#O%T#O#P7o#P#R%T#R#S$,{#S#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#a$-Wa!jq&m!b&eS&hWOr%Trs&Vsw%Twx/Xx!Q%T!Q!Y$,{!Y#O%T#O#P7o#P#R%T#R#S$,{#S#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#a$.fe&m!b&eS&hWOr%Trs&Vsw%Twx/Xx!Q%T!Q![$/w![!c%T!c!i$/w!i#O%T#O#P7o#P#R%T#R#S$/w#S#T%T#T#Z$/w#Z#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#a$0Se!jq&m!b&eS&hWOr%Trs&Vsw%Twx/Xx!Q%T!Q![$/w![!c%T!c!i$/w!i#O%T#O#P7o#P#R%T#R#S$/w#S#T%T#T#Z$/w#Z#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#s$1p_}!T&m!b&eS&hWOr%Trs&Vsw%Twx/Xx!_%T!_!`$2o!`#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T!q$2z]&TR&m!b&eS&hWOr%Trs&Vsw%Twx/Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#c$4O]#fs&m!b&eS&hWOr%Trs&Vsw%Twx/Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#c$5SaoR&m!b&eS&hWOr%Trs&Vsw%Twx/Xx!^%T!^!_$6X!_!`Av!`!aAv!a#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#b$6d_%uQ&m!b&eS&hWOr%Trs&Vsw%Twx/Xx!_%T!_!`# x!`#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#c$7n_&Ss&m!b&eS&hWOr%Trs&Vsw%Twx/Xx!_%T!_!`Av!`#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#c$8x`oR&m!b&eS&hWOr%Trs&Vsw%Twx/Xx!_%T!_!`Av!`!a$9z!a#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#b$:V_%vQ&m!b&eS&hWOr%Trs&Vsw%Twx/Xx!_%T!_!`# x!`#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#c$;c_aQ#|P&m!b&eS&hWOr%Trs&Vsw%Twx/Xx!_%T!_!`# x!`#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#s$<oe&m!b&eS&hW&b`%}sOr%Trs&Vsw%Twx/Xx!Q%T!Q![$<b![!c%T!c!}$<b!}#O%T#O#P7o#P#R%T#R#S$<b#S#T%T#T#o$<b#o#p8^#p#q%T#q#r8^#r$g%T$g;'S$<b;'S;=`$>Q<%lO$<b#s$>TP;=`<%l$<b#s$>ei&m!b&eS&hW&b`%}sOr%Trs$@Ssw%Twx$C`x!Q%T!Q![$<b![!c%T!c!t$<b!t!u$Fl!u!}$<b!}#O%T#O#P7o#P#R%T#R#S$<b#S#T%T#T#f$<b#f#g$Fl#g#o$<b#o#p8^#p#q%T#q#r8^#r$g%T$g;'S$<b;'S;=`$>Q<%lO$<b#c$@]a&m!b&eS&csOYE^YZ%TZ]E^]^%T^rE^rs$AbswE^wxGpx#OE^#O#P!!u#P#oE^#o#p!#d#p#qE^#q#r!#d#r;'SE^;'S;=`!)v<%lOE^#c$Ak]&m!b&eS&csOr%Trs$Bdsw%Twx/Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#Z$BmZ&m!b&eS&gsOw(Vwx)Px#O(V#O#P+Z#P#o(V#o#p+x#p#q(V#q#r+x#r;'S(V;'S;=`/R<%lO(V#c$Cia&m!b&hW&csOY#%fYZ%TZ]#%f]^%T^r#%frs#&vsw#%fwx$Dnx#O#%f#O#P#0}#P#o#%f#o#p#1l#p#q#%f#q#r#1l#r;'S#%f;'S;=`#8O<%lO#%f#c$Dw]&m!b&hW&csOr%Trs&Vsw%Twx$Epx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#_$EyZ&m!b&hW&dsOr1Xrs2Rs#O1X#O#P3q#P#o1X#o#p4`#p#q1X#q#r4`#r;'S1X;'S;=`7i<%lO1X#s$Fye&m!b&eS&hW&b`%}sOr%Trs$@Ssw%Twx$C`x!Q%T!Q![$<b![!c%T!c!}$<b!}#O%T#O#P7o#P#R%T#R#S$<b#S#T%T#T#o$<b#o#p8^#p#q%T#q#r8^#r$g%T$g;'S$<b;'S;=`$>Q<%lO$<b#s$Hii&m!b&eS&hW&b`%}sOr%Trs$JWsw%Twx$MUx!Q%T!Q![$<b![!c%T!c!t$<b!t!u%!S!u!}$<b!}#O%T#O#P7o#P#R%T#R#S$<b#S#T%T#T#f$<b#f#g%!S#g#o$<b#o#p8^#p#q%T#q#r8^#r$g%T$g;'S$<b;'S;=`$>Q<%lO$<b#c$Ja]&m!b&eS&nsOr%Trs$KYsw%Twx/Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#c$Ka]&m!b&eSOr%Trs$LYsw%Twx/Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#Z$LcZ&m!b&eS&psOw(Vwx)Px#O(V#O#P+Z#P#o(V#o#p+x#p#q(V#q#r+x#r;'S(V;'S;=`/R<%lO(V#c$M_]&m!b&hW&jsOr%Trs&Vsw%Twx$NWx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#c$N_]&m!b&hWOr%Trs&Vsw%Twx% Wx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#_% aZ&m!b&hW&osOr1Xrs2Rs#O1X#O#P3q#P#o1X#o#p4`#p#q1X#q#r4`#r;'S1X;'S;=`7i<%lO1X#s%!ae&m!b&eS&hW&b`%}sOr%Trs$JWsw%Twx$MUx!Q%T!Q![$<b![!c%T!c!}$<b!}#O%T#O#P7o#P#R%T#R#S$<b#S#T%T#T#o$<b#o#p8^#p#q%T#q#r8^#r$g%T$g;'S$<b;'S;=`$>Q<%lO$<b#s%$Pm&m!b&eS&hW&b`%}sOr%Trs$@Ssw%Twx$C`x!Q%T!Q![$<b![!c%T!c!h$<b!h!i%!S!i!t$<b!t!u$Fl!u!}$<b!}#O%T#O#P7o#P#R%T#R#S$<b#S#T%T#T#U$<b#U#V$Fl#V#Y$<b#Y#Z%!S#Z#o$<b#o#p8^#p#q%T#q#r8^#r$g%T$g;'S$<b;'S;=`$>Q<%lO$<b#c%&V]!Zs&m!b&eS&hWOr%Trs&Vsw%Twx/Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T!q%'Z]!YR&m!b&eS&hWOr%Trs&Vsw%Twx/Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#b%(__%sQ&m!b&eS&hWOr%Trs&Vsw%Twx/Xx!_%T!_!`# x!`#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T#a%)gX!_#T&eS&hWOr8^rs9Qsw8^wx:dx#O8^#O#P;v#P;'S8^;'S;=`<y<%lO8^#c%*__%rR&m!b&eS&hWOr%Trs&Vsw%Twx/Xx!_%T!_!`# x!`#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T!q%+gX!^!e&eS&hWOr8^rs9Qsw8^wx:dx#O8^#O#P;v#P;'S8^;'S;=`<y<%lO8^#a%,_]%|q&m!b&eS&hWOr%Trs&Vsw%Twx/Xx#O%T#O#P7o#P#o%T#o#p8^#p#q%T#q#r8^#r;'S%T;'S;=`=v<%lO%T",
     tokenizers: [legacyPrint, indentation$1, newlines, formatString1, formatString2, formatString1l, formatString2l, 0, 1, 2, 3, 4, 5, 6],
     topRules: {"Script":[0,7]},
     specialized: [{term: 229, get: value => spec_identifier$2[value] || -1}],
     tokenPrec: 7205
   });

   const cache = /*@__PURE__*/new NodeWeakMap();
   const ScopeNodes = /*@__PURE__*/new Set([
       "Script", "Body",
       "FunctionDefinition", "ClassDefinition", "LambdaExpression",
       "ForStatement", "MatchClause"
   ]);
   function defID(type) {
       return (node, def, outer) => {
           if (outer)
               return false;
           let id = node.node.getChild("VariableName");
           if (id)
               def(id, type);
           return true;
       };
   }
   const gatherCompletions = {
       FunctionDefinition: /*@__PURE__*/defID("function"),
       ClassDefinition: /*@__PURE__*/defID("class"),
       ForStatement(node, def, outer) {
           if (outer)
               for (let child = node.node.firstChild; child; child = child.nextSibling) {
                   if (child.name == "VariableName")
                       def(child, "variable");
                   else if (child.name == "in")
                       break;
               }
       },
       ImportStatement(_node, def) {
           var _a, _b;
           let { node } = _node;
           let isFrom = ((_a = node.firstChild) === null || _a === void 0 ? void 0 : _a.name) == "from";
           for (let ch = node.getChild("import"); ch; ch = ch.nextSibling) {
               if (ch.name == "VariableName" && ((_b = ch.nextSibling) === null || _b === void 0 ? void 0 : _b.name) != "as")
                   def(ch, isFrom ? "variable" : "namespace");
           }
       },
       AssignStatement(node, def) {
           for (let child = node.node.firstChild; child; child = child.nextSibling) {
               if (child.name == "VariableName")
                   def(child, "variable");
               else if (child.name == ":" || child.name == "AssignOp")
                   break;
           }
       },
       ParamList(node, def) {
           for (let prev = null, child = node.node.firstChild; child; child = child.nextSibling) {
               if (child.name == "VariableName" && (!prev || !/\*|AssignOp/.test(prev.name)))
                   def(child, "variable");
               prev = child;
           }
       },
       CapturePattern: /*@__PURE__*/defID("variable"),
       AsPattern: /*@__PURE__*/defID("variable"),
       __proto__: null
   };
   function getScope(doc, node) {
       let cached = cache.get(node);
       if (cached)
           return cached;
       let completions = [], top = true;
       function def(node, type) {
           let name = doc.sliceString(node.from, node.to);
           completions.push({ label: name, type });
       }
       node.cursor(IterMode.IncludeAnonymous).iterate(node => {
           if (node.name) {
               let gather = gatherCompletions[node.name];
               if (gather && gather(node, def, top) || !top && ScopeNodes.has(node.name))
                   return false;
               top = false;
           }
           else if (node.to - node.from > 8192) {
               // Allow caching for bigger internal nodes
               for (let c of getScope(doc, node.node))
                   completions.push(c);
               return false;
           }
       });
       cache.set(node, completions);
       return completions;
   }
   const Identifier$2 = /^[\w\xa1-\uffff][\w\d\xa1-\uffff]*$/;
   const dontComplete = ["String", "FormatString", "Comment", "PropertyName"];
   /**
   Completion source that looks up locally defined names in
   Python code.
   */
   function localCompletionSource(context) {
       let inner = syntaxTree(context.state).resolveInner(context.pos, -1);
       if (dontComplete.indexOf(inner.name) > -1)
           return null;
       let isWord = inner.name == "VariableName" ||
           inner.to - inner.from < 20 && Identifier$2.test(context.state.sliceDoc(inner.from, inner.to));
       if (!isWord && !context.explicit)
           return null;
       let options = [];
       for (let pos = inner; pos; pos = pos.parent) {
           if (ScopeNodes.has(pos.name))
               options = options.concat(getScope(context.state.doc, pos));
       }
       return {
           options,
           from: isWord ? inner.from : context.pos,
           validFor: Identifier$2
       };
   }
   const globals = /*@__PURE__*/[
       "__annotations__", "__builtins__", "__debug__", "__doc__", "__import__", "__name__",
       "__loader__", "__package__", "__spec__",
       "False", "None", "True"
   ].map(n => ({ label: n, type: "constant" })).concat(/*@__PURE__*/[
       "ArithmeticError", "AssertionError", "AttributeError", "BaseException", "BlockingIOError",
       "BrokenPipeError", "BufferError", "BytesWarning", "ChildProcessError", "ConnectionAbortedError",
       "ConnectionError", "ConnectionRefusedError", "ConnectionResetError", "DeprecationWarning",
       "EOFError", "Ellipsis", "EncodingWarning", "EnvironmentError", "Exception", "FileExistsError",
       "FileNotFoundError", "FloatingPointError", "FutureWarning", "GeneratorExit", "IOError",
       "ImportError", "ImportWarning", "IndentationError", "IndexError", "InterruptedError",
       "IsADirectoryError", "KeyError", "KeyboardInterrupt", "LookupError", "MemoryError",
       "ModuleNotFoundError", "NameError", "NotADirectoryError", "NotImplemented", "NotImplementedError",
       "OSError", "OverflowError", "PendingDeprecationWarning", "PermissionError", "ProcessLookupError",
       "RecursionError", "ReferenceError", "ResourceWarning", "RuntimeError", "RuntimeWarning",
       "StopAsyncIteration", "StopIteration", "SyntaxError", "SyntaxWarning", "SystemError",
       "SystemExit", "TabError", "TimeoutError", "TypeError", "UnboundLocalError", "UnicodeDecodeError",
       "UnicodeEncodeError", "UnicodeError", "UnicodeTranslateError", "UnicodeWarning", "UserWarning",
       "ValueError", "Warning", "ZeroDivisionError"
   ].map(n => ({ label: n, type: "type" }))).concat(/*@__PURE__*/[
       "bool", "bytearray", "bytes", "classmethod", "complex", "float", "frozenset", "int", "list",
       "map", "memoryview", "object", "range", "set", "staticmethod", "str", "super", "tuple", "type"
   ].map(n => ({ label: n, type: "class" }))).concat(/*@__PURE__*/[
       "abs", "aiter", "all", "anext", "any", "ascii", "bin", "breakpoint", "callable", "chr",
       "compile", "delattr", "dict", "dir", "divmod", "enumerate", "eval", "exec", "exit", "filter",
       "format", "getattr", "globals", "hasattr", "hash", "help", "hex", "id", "input", "isinstance",
       "issubclass", "iter", "len", "license", "locals", "max", "min", "next", "oct", "open",
       "ord", "pow", "print", "property", "quit", "repr", "reversed", "round", "setattr", "slice",
       "sorted", "sum", "vars", "zip"
   ].map(n => ({ label: n, type: "function" })));
   const snippets = [
       /*@__PURE__*/snippetCompletion("def ${name}(${params}):\n\t${}", {
           label: "def",
           detail: "function",
           type: "keyword"
       }),
       /*@__PURE__*/snippetCompletion("for ${name} in ${collection}:\n\t${}", {
           label: "for",
           detail: "loop",
           type: "keyword"
       }),
       /*@__PURE__*/snippetCompletion("while ${}:\n\t${}", {
           label: "while",
           detail: "loop",
           type: "keyword"
       }),
       /*@__PURE__*/snippetCompletion("try:\n\t${}\nexcept ${error}:\n\t${}", {
           label: "try",
           detail: "/ except block",
           type: "keyword"
       }),
       /*@__PURE__*/snippetCompletion("if ${}:\n\t\n", {
           label: "if",
           detail: "block",
           type: "keyword"
       }),
       /*@__PURE__*/snippetCompletion("if ${}:\n\t${}\nelse:\n\t${}", {
           label: "if",
           detail: "/ else block",
           type: "keyword"
       }),
       /*@__PURE__*/snippetCompletion("class ${name}:\n\tdef __init__(self, ${params}):\n\t\t\t${}", {
           label: "class",
           detail: "definition",
           type: "keyword"
       }),
       /*@__PURE__*/snippetCompletion("import ${module}", {
           label: "import",
           detail: "statement",
           type: "keyword"
       }),
       /*@__PURE__*/snippetCompletion("from ${module} import ${names}", {
           label: "from",
           detail: "import",
           type: "keyword"
       })
   ];
   /**
   Autocompletion for built-in Python globals and keywords.
   */
   const globalCompletion = /*@__PURE__*/ifNotIn(dontComplete, /*@__PURE__*/completeFromList(/*@__PURE__*/globals.concat(snippets)));

   function indentBody(context, node) {
       let base = context.lineIndent(node.from);
       let line = context.lineAt(context.pos, -1), to = line.from + line.text.length;
       // Don't consider blank, deindented lines at the end of the
       // block part of the block
       if (/^\s*($|#)/.test(line.text) &&
           context.node.to < to + 100 &&
           !/\S/.test(context.state.sliceDoc(to, context.node.to)) &&
           context.lineIndent(context.pos, -1) <= base)
           return null;
       // A normally deindenting keyword that appears at a higher
       // indentation than the block should probably be handled by the next
       // level
       if (/^\s*(else:|elif |except |finally:)/.test(context.textAfter) && context.lineIndent(context.pos, -1) > base)
           return null;
       return base + context.unit;
   }
   /**
   A language provider based on the [Lezer Python
   parser](https://github.com/lezer-parser/python), extended with
   highlighting and indentation information.
   */
   const pythonLanguage = /*@__PURE__*/LRLanguage.define({
       name: "python",
       parser: /*@__PURE__*/parser$6.configure({
           props: [
               /*@__PURE__*/indentNodeProp.add({
                   Body: context => { var _a; return (_a = indentBody(context, context.node)) !== null && _a !== void 0 ? _a : context.continue(); },
                   IfStatement: cx => /^\s*(else:|elif )/.test(cx.textAfter) ? cx.baseIndent : cx.continue(),
                   TryStatement: cx => /^\s*(except |finally:|else:)/.test(cx.textAfter) ? cx.baseIndent : cx.continue(),
                   "TupleExpression ComprehensionExpression ParamList ArgList ParenthesizedExpression": /*@__PURE__*/delimitedIndent({ closing: ")" }),
                   "DictionaryExpression DictionaryComprehensionExpression SetExpression SetComprehensionExpression": /*@__PURE__*/delimitedIndent({ closing: "}" }),
                   "ArrayExpression ArrayComprehensionExpression": /*@__PURE__*/delimitedIndent({ closing: "]" }),
                   "String FormatString": () => null,
                   Script: context => {
                       if (context.pos + /\s*/.exec(context.textAfter)[0].length >= context.node.to) {
                           let endBody = null;
                           for (let cur = context.node, to = cur.to;;) {
                               cur = cur.lastChild;
                               if (!cur || cur.to != to)
                                   break;
                               if (cur.type.name == "Body")
                                   endBody = cur;
                           }
                           if (endBody) {
                               let bodyIndent = indentBody(context, endBody);
                               if (bodyIndent != null)
                                   return bodyIndent;
                           }
                       }
                       return context.continue();
                   }
               }),
               /*@__PURE__*/foldNodeProp.add({
                   "ArrayExpression DictionaryExpression SetExpression TupleExpression": foldInside,
                   Body: (node, state) => ({ from: node.from + 1, to: node.to - (node.to == state.doc.length ? 0 : 1) })
               })
           ],
       }),
       languageData: {
           closeBrackets: {
               brackets: ["(", "[", "{", "'", '"', "'''", '"""'],
               stringPrefixes: ["f", "fr", "rf", "r", "u", "b", "br", "rb",
                   "F", "FR", "RF", "R", "U", "B", "BR", "RB"]
           },
           commentTokens: { line: "#" },
           indentOnInput: /^\s*([\}\]\)]|else:|elif |except |finally:)$/
       }
   });
   /**
   Python language support.
   */
   function python$2() {
       return new LanguageSupport(pythonLanguage, [
           pythonLanguage.data.of({ autocomplete: localCompletionSource }),
           pythonLanguage.data.of({ autocomplete: globalCompletion }),
       ]);
   }

   var index$6 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      globalCompletion: globalCompletion,
      localCompletionSource: localCompletionSource,
      python: python$2,
      pythonLanguage: pythonLanguage
   });

   // This file was generated by lezer-generator. You probably shouldn't edit it.
   const closureParamDelim = 1,
     tpOpen = 2,
     tpClose = 3,
     RawString = 4,
     Float = 5;

   const _b = 98, _e = 101, _f = 102, _r = 114, _E = 69, Zero = 48,
         Dot = 46, Plus = 43, Minus = 45, Hash = 35, Quote = 34, Pipe = 124, LessThan = 60, GreaterThan = 62;

   function isNum(ch) { return ch >= 48 && ch <= 57 }
   function isNum_(ch) { return isNum(ch) || ch == 95 }

   const literalTokens = new ExternalTokenizer((input, stack) => {
     if (isNum(input.next)) {
       let isFloat = false;
       do { input.advance(); } while (isNum_(input.next))
       if (input.next == Dot) {
         isFloat = true;
         input.advance();
         if (isNum(input.next)) {
           do { input.advance(); } while (isNum_(input.next))
         } else if (input.next == Dot || input.next > 0x7f || /\w/.test(String.fromCharCode(input.next))) {
           return
         }
       }
       if (input.next == _e || input.next == _E) {
         isFloat = true;
         input.advance();
         if (input.next == Plus || input.next == Minus) input.advance();
         if (!isNum_(input.next)) return
         do { input.advance(); } while (isNum_(input.next))
       }
       if (input.next == _f) {
         let after = input.peek(1);
         if (after == Zero + 3 && input.peek(2) == Zero + 2 ||
             after == Zero + 6 && input.peek(2) == Zero + 4) {
           input.advance(3);
           isFloat = true;
         } else {
           return
         }
       }
       if (isFloat) input.acceptToken(Float);
     } else if (input.next == _b || input.next == _r) {
       if (input.next == _b) input.advance();
       if (input.next != _r) return
       input.advance();
       let count = 0;
       while (input.next == Hash) { count++; input.advance(); }
       if (input.next != Quote) return
       input.advance();
       content: for (;;) {
         if (input.next < 0) return
         let isQuote = input.next == Quote;
         input.advance();
         if (isQuote) {
           for (let i = 0; i < count; i++) {
             if (input.next != Hash) continue content
             input.advance();
           }
           input.acceptToken(RawString);
           return
         }
       }
     }
   });

   const closureParam = new ExternalTokenizer(input => {
     if (input.next == Pipe) input.acceptToken(closureParamDelim, 1);
   });

   const tpDelim = new ExternalTokenizer(input => {
     if (input.next == LessThan) input.acceptToken(tpOpen, 1);
     else if (input.next == GreaterThan) input.acceptToken(tpClose, 1);
   });

   const rustHighlighting = styleTags({
     "const macro_rules struct union enum type fn impl trait let static": tags$1.definitionKeyword,
     "mod use crate": tags$1.moduleKeyword,
     "pub unsafe async mut extern default move": tags$1.modifier,
     "for if else loop while match continue break return await": tags$1.controlKeyword,
     "as in ref": tags$1.operatorKeyword,
     "where _ crate super dyn": tags$1.keyword,
     "self": tags$1.self,
     String: tags$1.string,
     Char: tags$1.character,
     RawString: tags$1.special(tags$1.string),
     Boolean: tags$1.bool,
     Identifier: tags$1.variableName,
     "CallExpression/Identifier": tags$1.function(tags$1.variableName),
     BoundIdentifier: tags$1.definition(tags$1.variableName),
     "FunctionItem/BoundIdentifier": tags$1.function(tags$1.definition(tags$1.variableName)),
     LoopLabel: tags$1.labelName,
     FieldIdentifier: tags$1.propertyName,
     "CallExpression/FieldExpression/FieldIdentifier": tags$1.function(tags$1.propertyName),
     Lifetime: tags$1.special(tags$1.variableName),
     ScopeIdentifier: tags$1.namespace,
     TypeIdentifier: tags$1.typeName,
     "MacroInvocation/Identifier MacroInvocation/ScopedIdentifier/Identifier": tags$1.macroName,
     "MacroInvocation/TypeIdentifier MacroInvocation/ScopedIdentifier/TypeIdentifier": tags$1.macroName,
     "\"!\"": tags$1.macroName,
     UpdateOp: tags$1.updateOperator,
     LineComment: tags$1.lineComment,
     BlockComment: tags$1.blockComment,
     Integer: tags$1.integer,
     Float: tags$1.float,
     ArithOp: tags$1.arithmeticOperator,
     LogicOp: tags$1.logicOperator,
     BitOp: tags$1.bitwiseOperator,
     CompareOp: tags$1.compareOperator,
     "=": tags$1.definitionOperator,
     ".. ... => ->": tags$1.punctuation,
     "( )": tags$1.paren,
     "[ ]": tags$1.squareBracket,
     "{ }": tags$1.brace,
     ". DerefOp": tags$1.derefOperator,
     "&": tags$1.operator,
     ", ; ::": tags$1.separator,
     "Attribute/...": tags$1.meta,
   });

   // This file was generated by lezer-generator. You probably shouldn't edit it.
   const spec_identifier$1 = {__proto__:null,self:28, super:32, crate:34, impl:46, true:72, false:72, pub:88, in:92, const:96, unsafe:104, async:108, move:110, if:114, let:118, ref:142, mut:144, _:198, else:200, match:204, as:248, return:252, await:262, break:270, continue:276, while:312, loop:316, for:320, macro_rules:327, mod:334, extern:342, struct:346, where:364, union:379, enum:382, type:390, default:395, fn:396, trait:412, use:420, static:438, dyn:476};
   const parser$5 = LRParser.deserialize({
     version: 14,
     states: "$2xQ]Q_OOP$wOWOOO&sQWO'#CnO)WQWO'#I`OOQP'#I`'#I`OOQQ'#Ie'#IeO)hO`O'#C}OOQR'#Ih'#IhO)sQWO'#IuOOQO'#Hk'#HkO)xQWO'#DpOOQR'#Iw'#IwO)xQWO'#DpO*ZQWO'#DpOOQO'#Iv'#IvO,SQWO'#J`O,ZQWO'#EiOOQV'#Hp'#HpO,cQYO'#F{OOQV'#El'#ElOOQV'#Em'#EmOOQV'#En'#EnO.YQ_O'#EkO0_Q_O'#EoO2gQWOOO4QQ_O'#FPO7hQWO'#J`OOQV'#FY'#FYO7{Q_O'#F^O:WQ_O'#FaOOQO'#F`'#F`O=sQ_O'#FcO=}Q_O'#FbO@VQWO'#FgOOQO'#J`'#J`OOQV'#Io'#IoOA]Q_O'#InOEPQWO'#InOOQV'#Fw'#FwOF[QWO'#JuOFcQWO'#F|OOQO'#IO'#IOOGrQWO'#GhOOQV'#Im'#ImOOQV'#Il'#IlOOQV'#Hj'#HjQGyQ_OOOKeQ_O'#DUOKlQYO'#CqOOQP'#I_'#I_OOQV'#Hg'#HgQ]Q_OOOLuQWO'#I`ONsQYO'#DXO!!eQWO'#JuO!!lQWO'#JuO!!vQ_O'#DfO!%]Q_O'#E}O!(sQ_O'#FWO!,ZQWO'#FZO!.^QXO'#FbO!.cQ_O'#EeO!!vQ_O'#FmO!0uQWO'#FoO!0zQWO'#FoO!1PQ^O'#FqO!1WQWO'#JuO!1_QWO'#FtO!1dQWO'#FxO!2WQWO'#JjO!2_QWO'#GOO!2_QWO'#G`O!2_QWO'#GbO!2_QWO'#GsOOQO'#Ju'#JuO!2dQWO'#GhO!2lQYO'#GpO!2_QWO'#GqO!3uQ^O'#GtO!3|QWO'#GuO!4hQWO'#HOP!4sOpO'#CcPOOO)CC})CC}OOOO'#Hi'#HiO!5OO`O,59iOOQV,59i,59iO!5ZQYO,5?aOOQO-E;i-E;iOOQO,5:[,5:[OOQP,59Z,59ZO)xQWO,5:[O)xQWO,5:[O!5oQWO,5?kO!5zQYO,5;qO!6PQYO,5;TO!6hQWO,59QO!7kQXO'#CnO!7xQXO'#I`O!9SQWO'#CoO,^QWO'#EiOOQV-E;n-E;nO!9eQWO'#FsOOQV,5<g,5<gO!9SQWO'#CoO!9jQWO'#CoO!9oQWO'#I`O! yQWO'#JuO!9yQWO'#J`O!:aQWO,5;VOOQO'#In'#InO!0zQWO'#DaO!<aQWO'#DcO!<iQWO,5;ZO.YQ_O,5;ZOOQO,5;[,5;[OOQV'#Er'#ErOOQV'#Es'#EsOOQV'#Et'#EtOOQV'#Eu'#EuOOQV'#Ev'#EvOOQV'#Ew'#EwOOQV'#Ex'#ExOOQV'#Ey'#EyO.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;]O.YQ_O,5;fO!=PQ_O,5;kO!@gQ_O'#FROOQO,5;l,5;lO!BrQWO,5;pO.YQ_O,5;wOKlQYO,5;gO!D_QWO,5;kO!EOQWO,5;xOOQO,5;x,5;xO!E]QWO,5;xO!EbQ_O,5;xO!GmQWO'#CfO!GrQWO,5<QO!G|Q_O,5<QOOQO,5;{,5;{O!JjQXO'#CnO!K{QXO'#I`OOQS'#Dk'#DkOOQP'#Ir'#IrO!LuQ[O'#IrO!L}QXO'#DjO!M{QWO'#DnO!M{QWO'#DnO!N^QWO'#DnOOQP'#It'#ItO!NcQXO'#ItO# ^Q^O'#DoO# hQWO'#DrO# pQ^O'#DzO# zQ^O'#D|O#!RQWO'#EPO#!^QXO'#FdOOQP'#ES'#ESOOQP'#Iq'#IqO#!lQXO'#JfOOQP'#Je'#JeO#!tQXO,5;}O#!yQXO'#I`O!1PQ^O'#DyO!1PQ^O'#FdO##sQWO,5;|OOQO,5;|,5;|OKlQYO,5;|O#$ZQWO'#FhOOQO,5<R,5<ROOQV,5=l,5=lO#&`QYO'#FzOOQV,5<h,5<hO#&gQWO,5<hO#&nQWO,5=SO!1WQWO,59rO!1dQWO,5<dO#&uQWO,5=iO!2_QWO,5<jO!2_QWO,5<zO!2_QWO,5<|O!2_QWO,5=QO#&|QWO,5=]O#'TQWO,5=SO!2_QWO,5=]O!3|QWO,5=aO#']QWO,5=jOOQO-E;|-E;|O#'hQWO'#JjOOQV-E;h-E;hO#(PQWO'#HRO#(WQ_O,59pOOQV,59p,59pO#(_QWO,59pO#(dQ_O,59pO#)SQZO'#CuO#+[QZO'#CvOOQV'#C|'#C|O#-wQWO'#HTO#.OQYO'#IdOOQO'#Hh'#HhO#.WQWO'#CwO#.WQWO'#CwO#.iQWO'#CwOOQR'#Ic'#IcO#.nQZO'#IbO#1TQYO'#HTO#1qQYO'#H[O#2}QYO'#H_OKlQYO'#H`OOQR'#Hb'#HbO#4ZQWO'#HeO#4`QYO,59]OOQR'#Ib'#IbO#5PQZO'#CtO#7[QYO'#HUO#7aQWO'#HTO#7fQYO'#CrO#8VQWO'#H]O#7fQYO'#HcOOQV-E;e-E;eO#8_QWO,59sOOQV,59{,59{O#8mQYO,5=[OOQV,59},59}O!0zQWO,59}O#;aQWO'#IpOOQO'#Ip'#IpO!1PQ^O'#DhO!0zQWO,5:QO#;hQWO,5;iO#<OQWO,5;rO#<fQ_O,5;rOOQO,5;u,5;uO#@PQ_O,5;|O#BXQWO,5;PO!0zQWO,5<XO#B`QWO,5<ZOOQV,5<Z,5<ZO#BkQWO,5<]O!1PQ^O'#EOOOQQ'#D_'#D_O#BsQWO,59rO#BxQWO,5<`O#B}QWO,5<dOOQO,5@U,5@UO#CVQWO,5=iOOQQ'#Cv'#CvO#C[QYO,5<jO#CmQYO,5<zO#CxQYO,5<|O#DTQYO,5=_O#DcQYO,5=SO#E{QYO'#GQO#FYQYO,5=[O#FmQWO,5=[O#F{QYO,5=[O#HUQYO,5=]O#HdQWO,5=`O!1PQ^O,5=`O#HrQWO'#CnO#ITQWO'#I`OOQO'#Jy'#JyO#IfQWO'#IQO#IkQWO'#GwOOQO'#Jz'#JzO#JSQWO'#GzOOQO'#G|'#G|OOQO'#Jx'#JxO#IkQWO'#GwO#JZQWO'#GxO#J`QWO,5=aO#JeQWO,5=jO!1dQWO,5=jO#'`QWO,5=jPOOO'#Hf'#HfP#JjOpO,58}POOO,58},58}OOOO-E;g-E;gOOQV1G/T1G/TO#JuQWO1G4{O#JzQ^O'#CyPOQQ'#Cx'#CxOOQO1G/v1G/vOOQP1G.u1G.uO)xQWO1G/vO#NTQ!fO'#ETO#N[Q!fO'#EaO#NcQ!fO'#EbO$ kQWO1G1yO$!_Q_O1G1yOOQP1G5V1G5VOOQO1G1]1G1]O$&RQWO1G0oO$&WQWO'#CiO!7xQXO'#I`O!6PQYO1G.lO!5oQWO,5<_O!9SQWO,59ZO!9SQWO,59ZO!5oQWO,5?kO$&iQWO1G0uO$(vQWO1G0wO$*nQWO1G0wO$+UQWO1G0wO$-YQWO1G0wO$-aQWO1G0wO$/bQWO1G0wO$/iQWO1G0wO$1jQWO1G0wO$1qQWO1G0wO$3YQWO1G1QO$5ZQWO1G1VO$5zQ_O'#JcO$8SQWO'#JcOOQO'#Jb'#JbO$8^QWO,5;mOOQO'#Dw'#DwOOQO1G1[1G1[OOQO1G1Y1G1YO$8cQWO1G1cOOQO1G1R1G1RO$8jQ_O'#HrO$:xQWO,5@OO.YQ_O1G1dOOQO1G1d1G1dO$;QQWO1G1dO$;_QWO1G1dO$;dQWO1G1eOOQO1G1l1G1lO$;lQWO1G1lOOQP,5?^,5?^O$;vQ^O,5:kO$<aQXO,5:YO!M{QWO,5:YO!M{QWO,5:YO!1PQ^O,5:gO$=bQWO'#IyOOQO'#Ix'#IxO$=pQWO,5:ZO# ^Q^O,5:ZO$=uQWO'#DsOOQP,5:^,5:^O$>WQWO,5:fOOQP,5:h,5:hO!1PQ^O,5:hO!1PQ^O,5:mO$>]QYO,5<OO$>gQ_O'#HsO$>tQXO,5@QOOQV1G1i1G1iOOQP,5:e,5:eO$>|QXO,5<OO$?[QWO1G1hO$?dQWO'#CnO$?oQWO'#FiOOQO'#Fi'#FiO$?wQWO'#FjO.YQ_O'#FkOOQO'#Ji'#JiO$?|QWO'#JhOOQO'#Jg'#JgO$@UQWO,5<SOOQQ'#Hv'#HvO$@ZQYO,5<fOOQV,5<f,5<fO$@bQYO,5<fOOQV1G2S1G2SO$@iQWO1G2nO$@qQWO1G/^O$@vQWO1G2OO#CVQWO1G3TO$AOQYO1G2UO#CmQYO1G2fO#CxQYO1G2hO$AaQYO1G2lO!2_QWO1G2wO#DcQYO1G2nO#HUQYO1G2wO$AiQWO1G2{O$AnQWO1G3UO!1dQWO1G3UO$AsQWO1G3UOOQV1G/[1G/[O$A{QWO1G/[O$BQQ_O1G/[O#7aQWO,5=oO$BXQYO,5?OO$BmQWO,5?OO$BrQZO'#IeOOQO-E;f-E;fOOQR,59c,59cO#.WQWO,59cO#.WQWO,59cOOQR,5=n,5=nO$E_QYO'#HVO$FwQZO,5=oO!5oQWO,5={O$IZQWO,5=oO$IbQZO,5=vO$KqQYO,5=vO$>]QYO,5=vO$LRQWO'#KRO$L^QWO,5=xOOQR,5=y,5=yO$LcQWO,5=zO$>]QYO,5>PO$>]QYO,5>POOQO1G.w1G.wO$>]QYO1G.wO$LnQYO,5=pO$LvQZO,59^OOQR,59^,59^O$>]QYO,5=wO% YQZO,5=}OOQR,5=},5=}O%#lQWO1G/_O!6PQYO1G/_O#FYQYO1G2vO%#qQWO1G2vO%$PQYO1G2vOOQV1G/i1G/iO%%YQWO,5:SO%%bQ_O1G/lO%*kQWO1G1^O%+RQWO1G1hOOQO1G1h1G1hO$>]QYO1G1hO%+iQ^O'#EgOOQV1G0k1G0kOOQV1G1s1G1sO!!vQ_O1G1sO!0zQWO1G1uO!1PQ^O1G1wO!.cQ_O1G1wOOQP,5:j,5:jO$>]QYO1G/^OOQO'#Cn'#CnO%+vQWO1G1zOOQV1G2O1G2OO%,OQWO'#CnO%,WQWO1G3TO%,]QWO1G3TO%,bQYO'#GQO%,sQWO'#G]O%-UQYO'#G_O%.hQYO'#GXOOQV1G2U1G2UO%/wQWO1G2UO%/|QWO1G2UO$ARQWO1G2UOOQV1G2f1G2fO%/wQWO1G2fO#CpQWO1G2fO%0UQWO'#GdOOQV1G2h1G2hO%0gQWO1G2hO#C{QWO1G2hO%0lQYO'#GSO$>]QYO1G2lO$AdQWO1G2lOOQV1G2y1G2yO%1xQWO1G2yO%3hQ^O'#GkO%3rQWO1G2nO#DfQWO1G2nO%4QQYO,5<lO%4[QYO,5<lO%4jQYO,5<lO%5XQYO,5<lOOQQ,5<l,5<lO!1WQWO'#JuO%5dQYO,5<lO%5lQWO1G2vOOQV1G2v1G2vO%5tQWO1G2vO$>]QYO1G2vOOQV1G2w1G2wO%5tQWO1G2wO%5yQWO1G2wO#HXQWO1G2wOOQV1G2z1G2zO.YQ_O1G2zO$>]QYO1G2zO%6RQWO1G2zOOQO,5>l,5>lOOQO-E<O-E<OOOQO,5=c,5=cOOQO,5=e,5=eOOQO,5=g,5=gOOQO,5=h,5=hO%6aQWO'#J|OOQO'#J{'#J{O%6iQWO,5=fO%6nQWO,5=cO!1dQWO,5=dOOQV1G2{1G2{O$>]QYO1G3UPOOO-E;d-E;dPOOO1G.i1G.iOOQO7+*g7+*gO%7VQYO'#IcO%7nQYO'#IfO%7yQYO'#IfO%8RQYO'#IfO%8^QYO,59eOOQO7+%b7+%bOOQP7+$a7+$aO%8cQ!fO'#JTOOQS'#EX'#EXOOQS'#EY'#EYOOQS'#EZ'#EZOOQS'#JT'#JTO%;UQWO'#EWOOQS'#E`'#E`OOQS'#JR'#JROOQS'#Hn'#HnO%;ZQ!fO,5:oOOQV,5:o,5:oOOQV'#JQ'#JQO%;bQ!fO,5:{OOQV,5:{,5:{O%;iQ!fO,5:|OOQV,5:|,5:|OOQV7+'e7+'eOOQV7+&Z7+&ZO%;pQ!fO,59TOOQO,59T,59TO%>YQWO7+$WO%>_QWO1G1yOOQV1G1y1G1yO!9SQWO1G.uO%>dQWO,5?}O%>nQ_O'#HqO%@|QWO,5?}OOQO1G1X1G1XOOQO7+&}7+&}O%AUQWO,5>^OOQO-E;p-E;pO%AcQWO7+'OO.YQ_O7+'OOOQO7+'O7+'OOOQO7+'P7+'PO%AjQWO7+'POOQO7+'W7+'WOOQP1G0V1G0VO%ArQXO1G/tO!M{QWO1G/tO%BsQXO1G0RO%CkQ^O'#HlO%C{QWO,5?eOOQP1G/u1G/uO%DWQWO1G/uO%D]QWO'#D_OOQO'#Dt'#DtO%DhQWO'#DtO%DmQWO'#I{OOQO'#Iz'#IzO%DuQWO,5:_O%DzQWO'#DtO%EPQWO'#DtOOQP1G0Q1G0QOOQP1G0S1G0SOOQP1G0X1G0XO%EXQXO1G1jO%EdQXO'#FeOOQP,5>_,5>_O!1PQ^O'#FeOOQP-E;q-E;qO$>]QYO1G1jOOQO7+'S7+'SOOQO,5<T,5<TO%ErQWO,5<UO.YQ_O,5<UO%EwQWO,5<VO%FRQWO'#HtO%FdQWO,5@SOOQO1G1n1G1nOOQQ-E;t-E;tOOQV1G2Q1G2QO%FlQYO1G2QO#DcQYO7+(YO$>]QYO7+$xOOQV7+'j7+'jO%FsQWO7+(oO%FxQWO7+(oOOQV7+'p7+'pO%/wQWO7+'pO%F}QWO7+'pO%GVQWO7+'pOOQV7+(Q7+(QO%/wQWO7+(QO#CpQWO7+(QOOQV7+(S7+(SO%0gQWO7+(SO#C{QWO7+(SO$>]QYO7+(WO%GeQWO7+(WO#HUQYO7+(cO%GjQWO7+(YO#DfQWO7+(YOOQV7+(c7+(cO%5tQWO7+(cO%5yQWO7+(cO#HXQWO7+(cOOQV7+(g7+(gO$>]QYO7+(pO%GxQWO7+(pO!1dQWO7+(pOOQV7+$v7+$vO%G}QWO7+$vO%HSQZO1G3ZO%JfQWO1G4jOOQO1G4j1G4jOOQR1G.}1G.}O#.WQWO1G.}O%JkQWO'#KQOOQO'#HW'#HWO%J|QWO'#HXO%KXQWO'#KQOOQO'#KP'#KPO%KaQWO,5=qO%KfQYO'#H[O%LrQWO'#GmO%L}QYO'#CtO%MXQWO'#GmO$>]QYO1G3ZOOQR1G3g1G3gO#7aQWO1G3ZO%M^QZO1G3bO$>]QYO1G3bO& mQYO'#IVO& }QWO,5@mOOQR1G3d1G3dOOQR1G3f1G3fO.YQ_O1G3fOOQR1G3k1G3kO&!VQYO7+$cO&!_QYO'#KOOOQQ'#J}'#J}O&!gQYO1G3[O&!lQZO1G3cOOQQ7+$y7+$yO&${QWO7+$yO&%QQWO7+(bOOQV7+(b7+(bO%5tQWO7+(bO$>]QYO7+(bO#FYQYO7+(bO&%YQWO7+(bO!.cQ_O1G/nO&%hQWO7+%WO$?[QWO7+'SO&%pQWO'#EhO&%{Q^O'#EhOOQU'#Ho'#HoO&%{Q^O,5;ROOQV,5;R,5;RO&&VQWO,5;RO&&[Q^O,5;RO!0zQWO7+'_OOQV7+'a7+'aO&&iQWO7+'cO&&qQWO7+'cO&&xQWO7+$xO&'TQ!fO7+'fO&'[Q!fO7+'fOOQV7+(o7+(oO!1dQWO7+(oO&'cQYO,5<lO&'nQYO,5<lO!1dQWO'#GWO&'|QWO'#JpO&([QWO'#G^O!BxQWO'#G^O&(aQWO'#JpOOQO'#Jo'#JoO&(iQWO,5<wOOQO'#DX'#DXO&(nQYO'#JrO&)}QWO'#JrO$>]QYO'#JrOOQO'#Jq'#JqO&*YQWO,5<yO&*_QWO'#GZO#D^QWO'#G[O&*gQWO'#G[O&*oQWO'#JmOOQO'#Jl'#JlO&*zQYO'#GTOOQO,5<s,5<sO&+PQWO7+'pO&+UQWO'#JtO&+dQWO'#GeO#BxQWO'#GeO&+uQWO'#JtOOQO'#Js'#JsO&+}QWO,5=OO$>]QYO'#GUO&,SQYO'#JkOOQQ,5<n,5<nO&,kQWO7+(WOOQV7+(e7+(eO&.TQ^O'#D|O&._QWO'#GlO&.gQ^O'#JwOOQO'#Gn'#GnO&.nQWO'#JwOOQO'#Jv'#JvO&.vQWO,5=VO&.{QWO'#I`O&/]Q^O'#GmO&/dQWO'#IqO&/rQWO'#GmOOQV7+(Y7+(YO&/zQWO7+(YO$>]QYO7+(YO&0SQYO'#HxO&0hQYO1G2WOOQQ1G2W1G2WOOQQ,5<m,5<mO$>]QYO,5<qO&0pQWO,5<rO&0uQWO7+(bO&1QQWO7+(fO&1XQWO7+(fOOQV7+(f7+(fO.YQ_O7+(fO$>]QYO7+(fO&1dQWO'#IRO&1nQWO,5@hOOQO1G3Q1G3QOOQO1G2}1G2}OOQO1G3P1G3POOQO1G3R1G3ROOQO1G3S1G3SOOQO1G3O1G3OO&1vQWO7+(pO$>]QYO,59fO&2RQ^O'#ISO&2xQYO,5?QOOQR1G/P1G/PO&3QQ!bO,5:pO&3VQ!fO,5:rOOQS-E;l-E;lOOQV1G0Z1G0ZOOQV1G0g1G0gOOQV1G0h1G0hO&3^QWO'#JTOOQO1G.o1G.oOOQV<<Gr<<GrO&3iQWO1G5iO$5zQ_O,5>]O&3qQWO,5>]OOQO-E;o-E;oOOQO<<Jj<<JjO&3{QWO<<JjOOQO<<Jk<<JkO&4SQXO7+%`O&5TQWO,5>WOOQO-E;j-E;jOOQP7+%a7+%aO!1PQ^O,5:`O&5cQWO'#HmO&5wQWO,5?gOOQP1G/y1G/yOOQO,5:`,5:`O&6PQWO,5:`O%DzQWO,5:`O$>]QYO,5<PO&6UQXO,5<PO&6dQXO7+'UO.YQ_O1G1pO&6oQWO1G1pOOQO,5>`,5>`OOQO-E;r-E;rOOQV7+'l7+'lO&6yQWO<<KtO#DfQWO<<KtO&7XQWO<<HdOOQV<<LZ<<LZO!1dQWO<<LZOOQV<<K[<<K[O&7dQWO<<K[O%/wQWO<<K[O&7iQWO<<K[OOQV<<Kl<<KlO%/wQWO<<KlOOQV<<Kn<<KnO%0gQWO<<KnO&7qQWO<<KrO$>]QYO<<KrOOQV<<K}<<K}O%5tQWO<<K}O%5yQWO<<K}O#HXQWO<<K}OOQV<<Kt<<KtO&7yQWO<<KtO$>]QYO<<KtO&8RQWO<<L[O$>]QYO<<L[O&8^QWO<<L[OOQV<<Hb<<HbO$>]QYO7+(uOOQO7+*U7+*UOOQR7+$i7+$iO&8cQWO,5@lOOQO'#Gm'#GmO&8kQWO'#GmO&8vQYO'#IUO&8cQWO,5@lOOQR1G3]1G3]O&:cQYO,5=vO&;rQYO,5=XO&;|QWO,5=XOOQO,5=X,5=XOOQR7+(u7+(uO&<RQZO7+(uO&>eQZO7+(|O&@tQWO,5>qOOQO-E<T-E<TO&APQWO7+)QOOQO<<G}<<G}O&AWQYO'#ITO&AcQYO,5@jOOQQ7+(v7+(vOOQQ<<He<<HeO$>]QYO<<K|OOQV<<K|<<K|O&0uQWO<<K|O&AkQWO<<K|O%5tQWO<<K|O&AsQWO7+%YOOQV<<Hr<<HrOOQO<<Jn<<JnO.YQ_O,5;SO&AzQWO,5;SO.YQ_O'#EjO&BPQWO,5;SOOQU-E;m-E;mO&B[QWO1G0mOOQV1G0m1G0mO&%{Q^O1G0mOOQV<<Jy<<JyO!.cQ_O<<J}OOQV<<J}<<J}OOQV<<Hd<<HdO.YQ_O<<HdO&BaQWO'#FvO&BfQWO<<KQO&BnQ!fO<<KQO&BuQWO<<KQO&BzQWO<<KQO&CSQ!fO<<KQOOQV<<KQ<<KQO&CZQWO<<LZO&C`QWO,5@[O$>]QYO,5<xO&ChQWO,5<xO&CmQWO'#H{O&C`QWO,5@[OOQV1G2c1G2cO&DRQWO,5@^O$>]QYO,5@^O&D^QYO'#H|O&EsQWO,5@^OOQO1G2e1G2eO%,nQWO,5<uOOQO,5<v,5<vO&E{QYO'#HzO&G_QWO,5@XO%,bQYO,5=pO$>]QYO,5<oO&GjQWO,5@`O.YQ_O,5=PO&GrQWO,5=PO&G}QWO,5=PO&H`QWO'#H}O&GjQWO,5@`OOQV1G2j1G2jO&HtQYO,5<pO%0lQYO,5>PO&I]QYO,5@VOOQV<<Kr<<KrO&ItQWO,5=XO&KfQ^O,5:hO&KmQWO,5=XO$>]QYO,5=WO&KuQWO,5@cO&K}QWO,5@cO&MvQ^O'#IPO&KuQWO,5@cOOQO1G2q1G2qO&NTQWO,5=WO&N]QWO<<KtO&NkQYO,5>oO&NvQYO,5>dO' UQYO,5>dOOQQ,5>d,5>dOOQQ-E;v-E;vOOQQ7+'r7+'rO' aQYO1G2]O$>]QYO1G2^OOQV<<LQ<<LQO.YQ_O<<LQO' lQWO<<LQO' sQWO<<LQOOQO,5>m,5>mOOQO-E<P-E<POOQV<<L[<<L[O.YQ_O<<L[O'!OQYO1G/QO'!ZQYO,5>nOOQQ,5>n,5>nO'!fQYO,5>nOOQQ-E<Q-E<QOOQS1G0[1G0[O'$tQ!fO1G0^O'%RQ!fO1G0^O'%YQWO1G3wOOQOAN@UAN@UO'%dQWO1G/zOOQO,5>X,5>XOOQO-E;k-E;kO!1PQ^O1G/zOOQO1G/z1G/zO'%oQWO1G/zO'%tQXO1G1kO$>]QYO1G1kO'&PQWO7+'[OOQVANA`ANA`O'&ZQWOANA`O$>]QYOANA`O'&cQWOANA`OOQVAN>OAN>OO.YQ_OAN>OO'&qQWOANAuOOQVAN@vAN@vO'&vQWOAN@vOOQVANAWANAWOOQVANAYANAYOOQVANA^ANA^O'&{QWOANA^OOQVANAiANAiO%5tQWOANAiO%5yQWOANAiO''TQWOANA`OOQVANAvANAvO.YQ_OANAvO''cQWOANAvO$>]QYOANAvOOQR<<La<<LaO''nQWO1G6WO%JkQWO,5>pOOQO'#HY'#HYO''vQWO'#HZOOQO,5>p,5>pOOQO-E<S-E<SO'(RQYO1G2sO'(]QWO1G2sOOQO1G2s1G2sO$>]QYO<<LaOOQR<<Ll<<LlOOQQ,5>o,5>oOOQQ-E<R-E<RO&0uQWOANAhOOQVANAhANAhO%5tQWOANAhO$>]QYOANAhO'(bQWO1G1rO')UQ^O1G0nO.YQ_O1G0nO'*zQWO,5;UO'+RQWO1G0nP'+WQWO'#ERP&%{Q^O'#HpOOQV7+&X7+&XO'+cQWO7+&XO&&qQWOAN@iO'+hQWOAN>OO!5oQWO,5<bOOQS,5>a,5>aO'+oQWOAN@lO'+tQWOAN@lOOQS-E;s-E;sOOQVAN@lAN@lO'+|QWOAN@lOOQVANAuANAuO',UQWO1G5vO',^QWO1G2dO$>]QYO1G2dO&'|QWO,5>gOOQO,5>g,5>gOOQO-E;y-E;yO',iQWO1G5xO',qQWO1G5xO&(nQYO,5>hO',|QWO,5>hO$>]QYO,5>hOOQO-E;z-E;zO'-XQWO'#JnOOQO1G2a1G2aOOQO,5>f,5>fOOQO-E;x-E;xO&'cQYO,5<lO'-gQYO1G2ZO'.RQWO1G5zO'.ZQWO1G2kO.YQ_O1G2kO'.eQWO1G2kO&+UQWO,5>iOOQO,5>i,5>iOOQO-E;{-E;{OOQQ,5>c,5>cOOQQ-E;u-E;uO'.pQWO1G2sO'/QQWO1G2rO'/]QWO1G5}O'/eQ^O,5>kOOQO'#Go'#GoOOQO,5>k,5>kO'/lQWO,5>kOOQO-E;}-E;}O$>]QYO1G2rO'/zQYO7+'xO'0VQWOANAlOOQVANAlANAlO.YQ_OANAlO'0^QWOANAvOOQS7+%x7+%xO'0eQWO7+%xO'0pQ!fO7+%xO'0}QWO7+%fO!1PQ^O7+%fO'1YQXO7+'VOOQVG26zG26zO'1eQWOG26zO'1sQWOG26zO$>]QYOG26zO'1{QWOG23jOOQVG27aG27aOOQVG26bG26bOOQVG26xG26xOOQVG27TG27TO%5tQWOG27TO'2SQWOG27bOOQVG27bG27bO.YQ_OG27bO'2ZQWOG27bOOQO1G4[1G4[OOQO7+(_7+(_OOQRANA{ANA{OOQVG27SG27SO%5tQWOG27SO&0uQWOG27SO'2fQ^O7+&YO'4PQWO7+'^O'4sQ^O7+&YO.YQ_O7+&YP.YQ_O,5;SP'6PQWO,5;SP'6UQWO,5;SOOQV<<Is<<IsOOQVG26TG26TOOQVG23jG23jOOQO1G1|1G1|OOQVG26WG26WO'6aQWOG26WP&B}QWO'#HuO'6fQWO7+(OOOQO1G4R1G4RO'6qQWO7++dO'6yQWO1G4SO$>]QYO1G4SO%,nQWO'#HyO'7UQWO,5@YO'7dQWO7+(VO.YQ_O7+(VOOQO1G4T1G4TOOQO1G4V1G4VO'7nQWO1G4VO'7|QWO7+(^OOQVG27WG27WO'8XQWOG27WOOQS<<Id<<IdO'8`QWO<<IdO'8kQWO<<IQOOQVLD,fLD,fO'8vQWOLD,fO'9OQWOLD,fOOQVLD)ULD)UOOQVLD,oLD,oOOQVLD,|LD,|O'9^QWOLD,|O.YQ_OLD,|OOQVLD,nLD,nO%5tQWOLD,nO'9eQ^O<<ItO';OQWO<<JxO';rQ^O<<ItP'=OQWO1G0nP'=oQ^O1G0nP.YQ_O1G0nP'?bQWO1G0nOOQVLD+rLD+rO'?gQWO7+)nOOQO,5>e,5>eOOQO-E;w-E;wO'?rQWO<<KqOOQVLD,rLD,rOOQSAN?OAN?OOOQV!$(!Q!$(!QO'?|QWO!$(!QOOQV!$(!h!$(!hO'@UQWO!$(!hOOQV!$(!Y!$(!YO'@]Q^OAN?`POQU7+&Y7+&YP'AvQWO7+&YP'BgQ^O7+&YP.YQ_O7+&YOOQV!)9El!)9ElOOQV!)9FS!)9FSPOQU<<It<<ItP'DYQWO<<ItP'DyQ^O<<ItPOQUAN?`AN?`O'FlQWO'#CnO'FsQXO'#CnO'GlQWO'#I`O'IRQXO'#I`O'IxQWO'#DpO'IxQWO'#DpO!.cQ_O'#EkO'JZQ_O'#EoO'JbQ_O'#FPO'MfQ_O'#FbO'MmQXO'#I`O'NdQ_O'#E}O( gQ_O'#FWO'IxQWO,5:[O'IxQWO,5:[O!.cQ_O,5;ZO!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;]O!.cQ_O,5;fO(!jQ_O,5;kO(%nQWO,5;kO(&OQWO,5;|O(&VQYO'#CuO(&bQYO'#CvO(&mQWO'#CwO(&mQWO'#CwO('OQYO'#CtO('ZQWO,5;iO('bQWO,5;rO('iQ_O,5;rO((oQ_O,5;|O'IxQWO1G/vO((vQWO1G0uO(*eQWO1G0wO(*oQWO1G0wO(,dQWO1G0wO(,kQWO1G0wO(.]QWO1G0wO(.dQWO1G0wO(0UQWO1G0wO(0]QWO1G0wO(0dQWO1G1QO(0tQWO1G1VO(1UQYO'#IeO(&mQWO,59cO(&mQWO,59cO(1aQWO1G1^O(1hQWO1G1hO(&mQWO1G.}O(1oQWO'#DpO!.^QXO'#FbO(1tQWO,5;ZO(1{QWO'#Cw",
     stateData: "(2_~O&|OSUOS&}PQ~OPoOQ!QOSVOTVOZeO[lO^RO_RO`ROa!UOd[Og!nOsVOtVOuVOw!POyvO|!VO}mO!Q!dO!U!WO!W!XO!X!^O!Z!YO!]!pO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO$i!eO$m!fO$q!gO$s!hO%T!iO%V!jO%Z!kO%]!lO%^!mO%f!oO%j!qO%s!rO'Q`O'TQO'ZkO'^UO'gcO'qiO(QdO~O&}!sO~OZbX[bXdbXdlXobXwjX}bX!lbX!qbX!tbX#ObX#PbX#pbX'gbX'qbX'rbX'xbX'ybX'zbX'{bX'|bX'}bX(ObX(PbX(QbX(RbX(TbX~OybXXbX!ebX!PbXvbX#RbX~P$|OZ'SX['SXd'SXd'XXo'SXw'kXy'SX}'SX!l'SX!q'SX!t'SX#O'SX#P'SX#p'SX'g'SX'q'SX'r'SX'x'SX'y'SX'z'SX'{'SX'|'SX'}'SX(O'SX(P'SX(Q'SX(R'SX(T'SXv'SX~OX'SX!e'SX!P'SX#R'SX~P'ZOr!uO']!wO'_!uO~Od!xO~O^RO_RO`ROaRO'TQO~Od!}O~Od#PO[(SXo(SXy(SX}(SX!l(SX!q(SX!t(SX#O(SX#P(SX#p(SX'g(SX'q(SX'r(SX'x(SX'y(SX'z(SX'{(SX'|(SX'}(SX(O(SX(P(SX(Q(SX(R(SX(T(SXv(SX~OZ#OO~P*`OZ#RO[#QO~OQ!QO^#TO_#TO`#TOa#]Od#ZOg!nOyvO|!VO!Q!dO!U#^O!W!lO!]!pO$i!eO$m!fO$q!gO$s!hO%T!iO%V!jO%Z!kO%]!lO%^!mO%f!oO%j!qO%s!rO'Q#VO'T#SO~OPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO'gcO'qiO(QdO~P)xOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!j#eO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO'gcO'qiO(QdO~P)xO[#}Oo#xO}#zO!l#yO!q#jO!t#yO#O#xO#P#uO#p$OO'g#gO'q#yO'r#lO'x#hO'y#iO'z#iO'{#kO'|#nO'}#mO(O#|O(P#gO(Q#hO(R#fO(T#hO~OPoOQ!QOSVOTVOZeOd[OsVOtVOuVOw!PO!U#bO!W#cO!X!^O!Z!YO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO[#sXo#sXy#sX}#sX!l#sX!q#sX!t#sX#O#sX#P#sX#p#sX'g#sX'q#sX'r#sX'x#sX'y#sX'z#sX'{#sX'|#sX'}#sX(O#sX(P#sX(Q#sX(R#sX(T#sXX#sX!e#sX!P#sXv#sX#R#sX~P)xOX(SX!e(SX!P(SXw(SX#R(SX~P*`OPoOQ!QOSVOTVOX$ROZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'Q$UO'ZkO'^UO'gcO'qiO(QdO~P)xOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!P$XO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'Q$UO'ZkO'^UO'gcO'qiO(QdO~P)xOQ!QOSVOTVO[$gO^$pO_$ZO`9yOa9yOd$aOsVOtVOuVO}$eO!i$qO!l$lO!q$hO#V$lO'T$YO'^UO'g$[O~O!j$rOP(XP~P<cOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Q$uO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO'gcO'qiO(QdO~P)xOw$vO~Oo'bX#O'bX#P'bX#p'bX'r'bX'x'bX'y'bX'z'bX'{'bX'|'bX'}'bX(O'bX(P'bX(R'bX(T'bX~OP%tXQ%tXS%tXT%tXZ%tX[%tX^%tX_%tX`%tXa%tXd%tXg%tXs%tXt%tXu%tXw%tXy%tX|%tX}%tX!Q%tX!U%tX!W%tX!X%tX!Z%tX!]%tX!l%tX!q%tX!t%tX#Y%tX#r%tX#{%tX$O%tX$b%tX$d%tX$f%tX$i%tX$m%tX$q%tX$s%tX%T%tX%V%tX%Z%tX%]%tX%^%tX%f%tX%j%tX%s%tX&z%tX'Q%tX'T%tX'Z%tX'^%tX'g%tX'q%tX(Q%tXv%tX~P@[Oy$xO['bX}'bX!l'bX!q'bX!t'bX'g'bX'q'bX(Q'bXv'bX~P@[Ow$yO!Q(iX!U(iX!W(iX$q(iX%](iX%^(iX~Oy$zO~PEsO!Q$}O!U%UO!W!lO$m%OO$q%PO$s%QO%T%RO%V%SO%Z%TO%]!lO%^%VO%f%WO%j%XO%s%YO~O!Q!lO!U!lO!W!lO$q%[O%]!lO~O%^%VO~PGaOPoOQ!QOSVOTVOZeO[lO^RO_RO`ROa!UOd[Og!nOsVOtVOuVOw!POyvO|!VO}mO!Q!dO!U!WO!W!XO!X!^O!Z!YO!]!pO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO$i!eO$m!fO$q!gO$s!hO%T!iO%V!jO%Z!kO%]!lO%^!mO%f!oO%j!qO%s!rO'Q#VO'TQO'ZkO'^UO'gcO'qiO(QdO~Ov%`O~P]OQ!QOZ%rO[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f%wO%^%xO&W%{O'T%dO'Z%eO(Q%zO~PGaO!Q{X!U{X!W{X$m{X$q{X$s{X%T{X%V{X%Z{X%]{X%^{X%f{X%j{X%s{X~P'ZO!Q{X!U{X!W{X$m{X$q{X$s{X%T{X%V{X%Z{X%]{X%^{X%f{X%j{X%s{X~O}%}O'T{XQ{XZ{X[{X^{X_{X`{Xa{Xd{Xg{X!q{X$f{X&W{X'Z{X(Q{X~PMuOg&PO%f%WO!Q(iX!U(iX!W(iX$q(iX%](iX%^(iX~Ow!PO~P! yOw!PO!X&RO~PEvOPoOQ!QOSVOTVOZeO[lO^9qO_9qO`9qOa9qOd9tOsVOtVOuVOw!PO}mO!U#bO!W#cO!X:zO!Z!YO!]&UO!l9wO!q9vO!t9wO#Y!_O#r9zO#{9{O$O!]O$b!`O$d!bO$f!cO'T9oO'ZkO'^UO'gcO'q9wO(QdO~OPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO'gcO'qiO(QdOo#qXy#qX#O#qX#P#qX#p#qX'r#qX'x#qX'y#qX'z#qX'{#qX'|#qX'}#qX(O#qX(P#qX(R#qX(T#qXX#qX!e#qX!P#qXv#qX#R#qX~P)xOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO'gcO'qiO(QdOo#zXy#zX#O#zX#P#zX#p#zX'r#zX'x#zX'y#zX'z#zX'{#zX'|#zX'}#zX(O#zX(P#zX(R#zX(T#zXX#zX!e#zX!P#zXv#zX#R#zX~P)xO'ZkO[#}Xo#}Xy#}X}#}X!l#}X!q#}X!t#}X#O#}X#P#}X#p#}X'g#}X'q#}X'r#}X'x#}X'y#}X'z#}X'{#}X'|#}X'}#}X(O#}X(P#}X(Q#}X(R#}X(T#}XX#}X!e#}X!P#}Xv#}Xw#}X#R#}X~OPoO~OPoOQ!QOSVOTVOZeO[lO^9qO_9qO`9qOa9qOd9tOsVOtVOuVOw!PO}mO!U#bO!W#cO!X:zO!Z!YO!l9wO!q9vO!t9wO#Y!_O#r9zO#{9{O$O!]O$b!`O$d!bO$f!cO'T9oO'ZkO'^UO'gcO'q9wO(QdO~O!S&_O~Ow!PO~O!j&bO~P<cO'T&cO~PEvOZ&eO~O'T&cO~O'^UOw(^Xy(^X!Q(^X!U(^X!W(^X$q(^X%](^X%^(^X~Oa&hO~P!1iO'T&iO~O_&nO'T&cO~OQ&oOZ&pO[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f%wO%^%xO&W%{O'T%dO'Z%eO(Q%zO~PGaO!j&uO~P<cO^&wO_&wO`&wOa&wOd'POw&|O'T&vO(Q&}O~O!i'UO!j'TO'T&cO~O&}!sO'O'VO'P'XO~Or!uO']'ZO'_!uO~OQ']O^'ia_'ia`'iaa'ia'T'ia~O['cOw'dO}'bO~OQ']O~OQ!QO^#TO_#TO`#TOa'kOd#ZO'T#SO~O['lO~OZbXdlXXbXobXPbX!SbX!ebX'rbX!PbX!ObXybX!ZbX#RbXvbX~O[bXwbX}bX~P!6mOZ'SXd'XXX'SX['SXo'SXw'SX}'SX#p'SXP'SX!S'SX!e'SX'r'SX!P'SX!O'SXy'SX!Z'SX#R'SXv'SX~O^#TO_#TO`#TOa'kO'T#SO~OZ'mO~Od'oO~OZ'SXd'XX~PMuOZ'pOX(SX!e(SX!P(SXw(SX#R(SX~P*`O[#}O}#zO(O#|O(R#fOo#_ay#_a!l#_a!q#_a!t#_a#O#_a#P#_a#p#_a'g#_a'q#_a'r#_a'x#_a'y#_a'z#_a'{#_a'|#_a'}#_a(P#_a(Q#_a(T#_aX#_a!e#_a!P#_av#_aw#_a#R#_a~Ow!PO!X&RO~Oy#caX#ca!e#ca!P#cav#ca#R#ca~P2gOPoOQ!QOSVOTVOZeOd[OsVOtVOuVOw!PO!U#bO!W#cO!X!^O!Z!YO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO[#sao#say#sa}#sa!l#sa!q#sa!t#sa#O#sa#P#sa#p#sa'g#sa'q#sa'r#sa'x#sa'y#sa'z#sa'{#sa'|#sa'}#sa(O#sa(P#sa(Q#sa(R#sa(T#saX#sa!e#sa!P#sav#sa#R#sa~P)xOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'Q#VO'ZkO'^UO'gcO'qiO(QdO!P(UP~P)xOu(SO#w(TO'T(RO~O[#}O}#zO!q#jO'g#gO'r#lO'x#hO'y#iO'z#iO'{#kO'|#nO'}#mO(O#|O(P#gO(Q#hO(R#fO(T#hO!l#sa!t#sa#p#sa'q#sa~Oo#xO#O#xO#P#uOy#saX#sa!e#sa!P#sav#sa#R#sa~P!B}Oy(YO!e(WOX(WX~P2gOX(ZO~OPoOQ!QOSVOTVOX(ZOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'Q$UO'ZkO'^UO'gcO'qiO(QdO~P)xOZ#RO~O!P(_O!e(WO~P2gOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'Q$UO'ZkO'^UO'gcO'qiO(QdO~P)xOZbXdlXwjX}jX!tbX'qbX~OP!RX!S!RX!e!RX'p!RX'r!RX!O!RXo!RXy!RX!P!RXX!RX!Z!RX#R!RXv!RX~P!JUOZ'SXd'XXw'kX}'kX!t'SX'q'SX~OP!`X!S!`X!e!`X'r!`X!O!`Xo!`Xy!`X!P!`XX!`X!Z!`X#R!`Xv!`X~P!KgOT(aOu(aO~O!t(bO'q(bOP!^X!S!^X!e!^X'r!^X!O!^Xo!^Xy!^X!P!^XX!^X!Z!^X#R!^Xv!^X~O^9rO_9rO`9yOa9yO'T9pO~Od(eO~O'p(fOP'hX!S'hX!e'hX'r'hX!O'hXo'hXy'hX!P'hXX'hX!Z'hX#R'hXv'hX~O!j&bO!P'lP~P<cOw(kO}(jO~O!j&bOX'lP~P<cO!j(oO~P<cOZ'pO!t(bO'q(bO~O!S(qO'r(pOP$WX!e$WX~O!e(rOP(YX~OP(tO~OP!aX!S!aX!e!aX'r!aX!O!aXo!aXy!aX!P!aXX!aX!Z!aX#R!aXv!aX~P!KgOy$UaX$Ua!e$Ua!P$Uav$Ua#R$Ua~P2gO!l(|O'Q#VO'T(xOv(ZP~OQ!QO^#TO_#TO`#TOa#]Od#ZOg!nOyvO|!VO!Q!dO!U#^O!W!lO!]!pO$i!eO$m!fO$q!gO$s!hO%T!iO%V!jO%Z!kO%]!lO%^!mO%f!oO%j!qO%s!rO'Q`O'T#SO~Ov)TO~P#$iOy)VO~PEsO%^)WO~PGaOa)ZO~P!1iO%f)`O~PEvO_)aO'T&cO~O!i)fO!j)eO'T&cO~O'^UO!Q(^X!U(^X!W(^X$q(^X%](^X%^(^X~Ov%uX~P2gOv)gO~PGyOv)gO~Ov)gO~P]OQiXQ'XXZiXd'XX}iX#piX(PiX~ORiXwiX$fiX$|iX[iXoiXyiX!liX!qiX!tiX#OiX#PiX'giX'qiX'riX'xiX'yiX'ziX'{iX'|iX'}iX(OiX(QiX(RiX(TiX!PiX!eiXXiXPiXviX!SiX#RiX~P#(kOQjXQlXRjXZjXdlX}jX#pjX(PjXwjX$fjX$|jX[jXojXyjX!ljX!qjX!tjX#OjX#PjX'gjX'qjX'rjX'xjX'yjX'zjX'{jX'|jX'}jX(OjX(QjX(RjX(TjX!PjX!ejXXjX!SjXPjXvjX#RjX~O%^)jO~PGaOQ']Od)kO~O^)mO_)mO`)mOa)mO'T%dO~Od)qO~OQ']OZ)uO})sOR'UX#p'UX(P'UXw'UX$f'UX$|'UX['UXo'UXy'UX!l'UX!q'UX!t'UX#O'UX#P'UX'g'UX'q'UX'r'UX'x'UX'y'UX'z'UX'{'UX'|'UX'}'UX(O'UX(Q'UX(R'UX(T'UX!P'UX!e'UXX'UXP'UXv'UX!S'UX#R'UX~OQ!QO^:bO_:^O`TOaTOd:aO%^)jO'T:_O~PGaOQ!QOZ%rO[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!j)yO!q%oO$f%wO%^%xO&W%{O'T%dO'Z%eO(Q%zO~PGaOQ!QOZ%rO[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!P)|O!q%oO$f%wO%^%xO&W%{O'T%dO'Z%eO(Q%zO~PGaO(P*OO~OR*QO#p*RO(P*PO~OQhXQ'XXZhXd'XX}hX(PhX~ORhX#phXwhX$fhX$|hX[hXohXyhX!lhX!qhX!thX#OhX#PhX'ghX'qhX'rhX'xhX'yhX'zhX'{hX'|hX'}hX(OhX(QhX(RhX(ThX!PhX!ehXXhXPhXvhX!ShX#RhX~P#4kOQ*SO~O})sO~OQ!QO^%vO_%cO`TOaTOd%jO$f%wO%^%xO'T%dO~PGaO!Q*VO!j*VO~O^*YO`*YOa*YO!O*ZO~OQ&oOZ*[O[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f%wO%^%xO&W%{O'T%dO'Z%eO(Q%zO~PGaO[#}Oo:YO}#zO!l:ZO!q#jO!t:ZO#O:YO#P:VO#p$OO'g#gO'q:ZO'r#lO'x#hO'y#iO'z#iO'{#kO'|#nO'}#mO(O#|O(P#gO(Q#hO(R#fO(T#hO~Ow'dX~P#9vOy#qaX#qa!e#qa!P#qav#qa#R#qa~P2gOy#zaX#za!e#za!P#zav#za#R#za~P2gOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!S&_O!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO'gcO'qiO(QdOo#zay#za#O#za#P#za#p#za'r#za'x#za'y#za'z#za'{#za'|#za'}#za(O#za(P#za(R#za(T#zaX#za!e#za!P#zav#za#R#za~P)xOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Q*eO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO'gcO'qiO(QdO~P)xOw*fO~P#9vO$b*iO$d*jO$f*kO~O!O*lO'r(pO~O!S*nO~O'T*oO~Ow$yOy*qO~O'T*rO~OQ*uOw*vOy*yO}*wO$|*xO~OQ*uOw*vO$|*xO~OQ*uOw+QO$|*xO~OQ*uOo+VOy+XO!S+UO~OQ*uO}+ZO~OQ!QOZ%rO[%qO^%vO`TOaTOd%jOg%yO}%pO!U!lO!W!lO!q%oO$f%wO$q%[O%]!lO%^%xO&W%{O'T%dO'Z%eO(Q%zO~OR+bO_+^O!Q+cO~P#DkO_%cO!Q!lOw&UX$|&UX(P&UX~P#DkOw$yO$f+hO$|*xO(P*PO~OQ!QOZ*[O[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f%wO%^%xO&W%{O'T%dO'Z%eO(Q%zO~PGaOQ*uOw$yO!S+UO$|*xO~Oo+nOy+mO!S+oO'r(pO~OdlXy!RX#pbXv!RX!e!RX~Od'XXy(mX#p'SXv(mX!e(mX~Od+qO~O^#TO_#TO`#TOa'kOw&|O'T&vO(Q+vO~Ov(oP~P!3|O#p+{O~Oy+|O~O!S+}O~O&}!sO'O'VO'P,PO~Od,QO~OSVOTVO_%cOsVOtVOuVOw!PO!Q!lO'^UO~P#DkOS,^OT,^OZ,^O['cO_,YOd,^Oo,^Os,^Ou,^Ow'dOy,^O}'bO!S,^O!e,^O!l,^O!q,[O!t,^O!y,^O#O,^O#P,^O#Q,^O#R,^O'Q,^O'Z%eO'^UO'g,ZO'r,[O'v,_O'x,ZO'y,[O'z,[O'{,[O'|,]O'},]O(O,^O(P,`O(Q,`O(R,aO~O!P,dO~P#KkOX,gO~P#KkOv,iO~P#KkOo'tX#O'tX#P'tX#p'tX'r'tX'x'tX'y'tX'z'tX'{'tX'|'tX'}'tX(O'tX(P'tX(R'tX(T'tX~Oy,jO['tX}'tX!l'tX!q'tX!t'tX'g'tX'q'tX(Q'tXv'tX~P#NjOP$giQ$giS$giT$giZ$gi[$gi^$gi_$gi`$gia$gid$gig$gis$git$giu$giw$giy$gi|$gi}$gi!Q$gi!U$gi!W$gi!X$gi!Z$gi!]$gi!l$gi!q$gi!t$gi#Y$gi#r$gi#{$gi$O$gi$b$gi$d$gi$f$gi$i$gi$m$gi$q$gi$s$gi%T$gi%V$gi%Z$gi%]$gi%^$gi%f$gi%j$gi%s$gi&z$gi'Q$gi'T$gi'Z$gi'^$gi'g$gi'q$gi(Q$giv$gi~P#NjOX,kO~O['cOo,lOw'dO}'bOX]X~Oy#ciX#ci!e#ci!P#civ#ci#R#ci~P2gO[#}O}#zO'x#hO(O#|O(Q#hO(R#fO(T#hOo#eiy#ei!l#ei!q#ei!t#ei#O#ei#P#ei#p#ei'q#ei'r#ei'y#ei'z#ei'{#ei'|#ei'}#eiX#ei!e#ei!P#eiv#ei#R#ei~O'g#ei(P#ei~P$'PO[#}O}#zO(O#|O(R#fOo#eiy#ei!l#ei!q#ei!t#ei#O#ei#P#ei#p#ei'q#ei'r#ei'y#ei'z#ei'{#ei'|#ei'}#eiX#ei!e#ei!P#eiv#ei#R#ei~O'g#ei'x#ei(P#ei(Q#ei(T#eiw#ei~P$)QO'g#gO(P#gO~P$'PO[#}O}#zO'g#gO'x#hO'y#iO'z#iO(O#|O(P#gO(Q#hO(R#fO(T#hOo#eiy#ei!l#ei!t#ei#O#ei#P#ei#p#ei'q#ei'r#ei'{#ei'|#ei'}#eiX#ei!e#ei!P#eiv#ei#R#ei~O!q#ei~P$+`O!q#jO~P$+`O[#}O}#zO!q#jO'g#gO'x#hO'y#iO'z#iO'{#kO(O#|O(P#gO(Q#hO(R#fO(T#hOo#eiy#ei!l#ei!t#ei#O#ei#P#ei#p#ei'q#ei'|#ei'}#eiX#ei!e#ei!P#eiv#ei#R#ei~O'r#ei~P$-hO'r#lO~P$-hO[#}O}#zO!q#jO#P#uO'g#gO'r#lO'x#hO'y#iO'z#iO'{#kO(O#|O(P#gO(Q#hO(R#fO(T#hOo#eiy#ei!l#ei!t#ei#O#ei#p#ei'q#ei'|#eiX#ei!e#ei!P#eiv#ei#R#ei~O'}#ei~P$/pO'}#mO~P$/pO[#}O}#zO!q#jO'g#gO'r#lO'x#hO'y#iO'z#iO'{#kO'|#nO'}#mO(O#|O(P#gO(Q#hO(R#fO(T#hO!l#ni!t#ni#p#ni'q#ni~Oo#xO#O#xO#P#uOy#niX#ni!e#ni!P#niv#ni#R#ni~P$1xO[#}O}#zO!q#jO'g#gO'r#lO'x#hO'y#iO'z#iO'{#kO'|#nO'}#mO(O#|O(P#gO(Q#hO(R#fO(T#hO!l#si!t#si#p#si'q#si~Oo#xO#O#xO#P#uOy#siX#si!e#si!P#siv#si#R#si~P$3yOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'Q#VO'ZkO'^UO'gcO'qiO(QdO~P)xO!e,sO!P(VX~P2gO!P,uO~OX,vO~P2gOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO'gcO'qiO(QdOX&fX!e&fX!P&fX~P)xO!e(WOX(Wa~Oy,zO!e(WOX(WX~P2gOX,{O~O!P,|O!e(WO~O!P-OO!e(WO~P2gOSVOTVOsVOtVOuVO'^UO'g$[O~P!6POP!baZca!S!ba!e!ba!tca'qca'r!ba!O!bao!bay!ba!P!baX!ba!Z!ba#R!bav!ba~O!e-TO'r(pO!P'mXX'mX~O!P-VO~O!i-`O!j-_O!l-[O'T-XOv'nP~OX-aO~O_%cO!Q!lO~P#DkO!j-gOP&gX!e&gX~P<cO!e(rOP(Ya~O!S-iO'r(pOP$Wa!e$Wa~Ow!PO(P*PO~OvbX!S!kX!ebX~O'Q#VO'T(xO~O!S-mO~O!e-oOv([X~Ov-qO~Ov-sO~P,cOv-sO~P#$iO_-uO'T&cO~O!S-vO~Ow$yOy-wO~OQ*uOw*vOy-zO}*wO$|*xO~OQ*uOo.UO~Oy._O~O!S.`O~O!j.bO'T&cO~Ov.cO~Ov.cO~PGyOQ']O^'Wa_'Wa`'Waa'Wa'T'Wa~Od.gO~OQ'XXQ'kXR'kXZ'kXd'XX}'kX#p'kX(P'kXw'kX$f'kX$|'kX['kXo'kXy'kX!l'kX!q'kX!t'kX#O'kX#P'kX'g'kX'q'kX'r'kX'x'kX'y'kX'z'kX'{'kX'|'kX'}'kX(O'kX(Q'kX(R'kX(T'kX!P'kX!e'kXX'kXP'kXv'kX!S'kX#R'kX~OQ!QOZ%rO[%qO^.rO_%cO`TOaTOd%jOg%yO}%pO!j.sO!q.pO!t.kO#V.mO$f%wO%^%xO&W%{O'Q#VO'T%dO'Z%eO(Q%zO!P(sP~PGaO#Q.tOR%wa#p%wa(P%waw%wa$f%wa$|%wa[%wao%way%wa}%wa!l%wa!q%wa!t%wa#O%wa#P%wa'g%wa'q%wa'r%wa'x%wa'y%wa'z%wa'{%wa'|%wa'}%wa(O%wa(Q%wa(R%wa(T%wa!P%wa!e%waX%waP%wav%wa!S%wa#R%wa~O%^.vO~PGaO(P*POR&Oa#p&Oaw&Oa$f&Oa$|&Oa[&Oao&Oay&Oa}&Oa!l&Oa!q&Oa!t&Oa#O&Oa#P&Oa'g&Oa'q&Oa'r&Oa'x&Oa'y&Oa'z&Oa'{&Oa'|&Oa'}&Oa(O&Oa(Q&Oa(R&Oa(T&Oa!P&Oa!e&OaX&OaP&Oav&Oa!S&Oa#R&Oa~O_%cO!Q!lO!j.xO(P*OO~P#DkO!e.yO(P*PO!P(uX~O!P.{O~OX.|Oy.}O(P*PO~O'Z%eOR(qP~OQ']O})sORfa#pfa(Pfawfa$ffa$|fa[faofayfa!lfa!qfa!tfa#Ofa#Pfa'gfa'qfa'rfa'xfa'yfa'zfa'{fa'|fa'}fa(Ofa(Qfa(Rfa(Tfa!Pfa!efaXfaPfavfa!Sfa#Rfa~OQ']O})sOR&Va#p&Va(P&Vaw&Va$f&Va$|&Va[&Vao&Vay&Va!l&Va!q&Va!t&Va#O&Va#P&Va'g&Va'q&Va'r&Va'x&Va'y&Va'z&Va'{&Va'|&Va'}&Va(O&Va(Q&Va(R&Va(T&Va!P&Va!e&VaX&VaP&Vav&Va!S&Va#R&Va~O!P/UO~Ow$yO$f/ZO$|*xO(P*PO~OQ!QOZ/[O[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f%wO%^%xO&W%{O'T%dO'Z%eO(Q%zO~PGaOo/^O'r(pO~O#W/_OP!YiQ!YiS!YiT!YiZ!Yi[!Yi^!Yi_!Yi`!Yia!Yid!Yig!Yio!Yis!Yit!Yiu!Yiw!Yiy!Yi|!Yi}!Yi!Q!Yi!U!Yi!W!Yi!X!Yi!Z!Yi!]!Yi!l!Yi!q!Yi!t!Yi#O!Yi#P!Yi#Y!Yi#p!Yi#r!Yi#{!Yi$O!Yi$b!Yi$d!Yi$f!Yi$i!Yi$m!Yi$q!Yi$s!Yi%T!Yi%V!Yi%Z!Yi%]!Yi%^!Yi%f!Yi%j!Yi%s!Yi&z!Yi'Q!Yi'T!Yi'Z!Yi'^!Yi'g!Yi'q!Yi'r!Yi'x!Yi'y!Yi'z!Yi'{!Yi'|!Yi'}!Yi(O!Yi(P!Yi(Q!Yi(R!Yi(T!YiX!Yi!e!Yi!P!Yiv!Yi!i!Yi!j!Yi#V!Yi#R!Yi~Oy#ziX#zi!e#zi!P#ziv#zi#R#zi~P2gOy$UiX$Ui!e$Ui!P$Uiv$Ui#R$Ui~P2gOv/eO!j&bO'Q`O~P<cOw/nO}/mO~Oy!RX#pbX~Oy/oO~O#p/pO~OR+bO_+dO!Q/sO'T&iO'Z%eO~Oa/zO|!VO'Q#VO'T(ROv(cP~OQ!QOZ%rO[%qO^%vO_%cO`TOa/zOd%jOg%yO|!VO}%pO!q%oO$f%wO%^%xO&W%{O'Q#VO'T%dO'Z%eO(Q%zO!P(eP~PGaOQ!QOZ%rO[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f0VO%^%xO&W%{O'T%dO'Z%eO(Q%zOw(`Py(`P~PGaOw*vO~Oy-zO$|*xO~Oa/zO|!VO'Q#VO'T*oOv(gP~Ow+QO~OQ!QOZ%rO[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f0VO%^%xO&W%{O'T%dO'Z%eO(Q%zO(R0`O~PGaOy0dO~OQ!QOSVOTVO[$gO^0lO_$ZO`9yOa9yOd$aOsVOtVOuVO}$eO!i$qO!j0mO!l$lO!q0eO!t0hO'Q#VO'T$YO'Z%eO'^UO'g$[O~O#V0nO!P(jP~P%1}Ow!POy0pO#Q0rO$|*xO~OR0uO!e0sO~P#(kOR0uO!S+UO!e0sO(P*OO~OR0uOo0wO!S+UO!e0sOQ'VXZ'VX}'VX#p'VX(P'VX~OR0uOo0wO!e0sO~OR0uO!e0sO~O$f/ZO(P*PO~Ow$yO~Ow$yO$|*xO~Oo0}Oy0|O!S1OO'r(pO~O!e1POv(pX~Ov1RO~O^#TO_#TO`#TOa'kOw&|O'T&vO(Q1VO~Oo1YOQ'VXR'VXZ'VX}'VX!e'VX(P'VX~O!e1ZO(P*POR'YX~O!e1ZOR'YX~O!e1ZO(P*OOR'YX~OR1]O~O!S1^OS'wXT'wXZ'wX['wX_'wXd'wXo'wXs'wXu'wXw'wXy'wX}'wX!P'wX!e'wX!l'wX!q'wX!t'wX!y'wX#O'wX#P'wX#Q'wX#R'wX'Q'wX'Z'wX'^'wX'g'wX'r'wX'v'wX'x'wX'y'wX'z'wX'{'wX'|'wX'}'wX(O'wX(P'wX(Q'wX(R'wXX'wXv'wX~O}1_O~O!P1aO~P#KkOX1bO~P#KkOv1cO~P#KkOS,^OT,^OZ,^O['cO_1dOd,^Oo,^Os,^Ou,^Ow'dOy,^O}'bO!S,^O!e,^O!l,^O!q,[O!t,^O!y,^O#O,^O#P,^O#Q,^O#R,^O'Q,^O'Z%eO'^UO'g,ZO'r,[O'v,_O'x,ZO'y,[O'z,[O'{,[O'|,]O'},]O(O,^O(P,`O(Q,`O(R,aO~OX1fO~Oy,jO~O!e,sO!P(Va~P2gOPoOQ!QOSVOTVOZeO[lOd[OsVOtVOuVOw!PO}mO!U#bO!W#cO!X!^O!Z!YO!liO!qgO!tiO#Y!_O#r!ZO#{![O$O!]O$b!`O$d!bO$f!cO'Q#VO'ZkO'^UO'gcO'qiO(QdO!P&eX!e&eX~P)xO!e,sO!P(Va~OX&fa!e&fa!P&fa~P2gOX1kO~P2gO!P1mO!e(WO~OP!biZci!S!bi!e!bi!tci'qci'r!bi!O!bio!biy!bi!P!biX!bi!Z!bi#R!biv!bi~O'r(pOP!oi!S!oi!e!oi!O!oio!oiy!oi!P!oiX!oi!Z!oi#R!oiv!oi~O!j&bO!P&`X!e&`XX&`X~P<cO!e-TO!P'maX'ma~O!P1qO~Ov!RX!S!kX!e!RX~O!S1rO~O!e1sOv'oX~Ov1uO~O'T-XO~O!j1xO'T-XO~O(P*POP$Wi!e$Wi~O!S1yO'r(pOP$XX!e$XX~O!S1|O~Ov$_a!e$_a~P2gO!l(|O'Q#VO'T(xOv&hX!e&hX~O!e-oOv([a~Ov2QO~P,cOy2UO~O#p2VO~Oy2WO$|*xO~Ow*vOy2WO}*wO$|*xO~Oo2aO~Ow!POy2fO#Q2hO$|*xO~O!S2jO~Ov2lO~O#Q2mOR%wi#p%wi(P%wiw%wi$f%wi$|%wi[%wio%wiy%wi}%wi!l%wi!q%wi!t%wi#O%wi#P%wi'g%wi'q%wi'r%wi'x%wi'y%wi'z%wi'{%wi'|%wi'}%wi(O%wi(Q%wi(R%wi(T%wi!P%wi!e%wiX%wiP%wiv%wi!S%wi#R%wi~Od2nO~O^2qO!j.sO!q2rO'Q#VO'Z%eO~O(P*PO!P%{X!e%{X~O!e2sO!P(tX~O!P2uO~OQ!QOZ%rO[%qO^2wO_%cO`TOaTOd%jOg%yO}%pO!j2xO!q%oO$f%wO%^%xO&W%{O'T%dO'Z%eO(Q%zO~PGaO^2yO!j2xO(P*OO~O!P%aX!e%aX~P#4kO^2yO~O(P*POR&Oi#p&Oiw&Oi$f&Oi$|&Oi[&Oio&Oiy&Oi}&Oi!l&Oi!q&Oi!t&Oi#O&Oi#P&Oi'g&Oi'q&Oi'r&Oi'x&Oi'y&Oi'z&Oi'{&Oi'|&Oi'}&Oi(O&Oi(Q&Oi(R&Oi(T&Oi!P&Oi!e&OiX&OiP&Oiv&Oi!S&Oi#R&Oi~O_%cO!Q!lO!P&yX!e&yX~P#DkO!e.yO!P(ua~OR3QO(P*PO~O!e3ROR(rX~OR3TO~O(P*POR&Pi#p&Piw&Pi$f&Pi$|&Pi[&Pio&Piy&Pi}&Pi!l&Pi!q&Pi!t&Pi#O&Pi#P&Pi'g&Pi'q&Pi'r&Pi'x&Pi'y&Pi'z&Pi'{&Pi'|&Pi'}&Pi(O&Pi(Q&Pi(R&Pi(T&Pi!P&Pi!e&PiX&PiP&Piv&Pi!S&Pi#R&Pi~O!P3UO~O$f3VO(P*PO~Ow$yO$f3VO$|*xO(P*PO~Ow!PO!Z!YO~O!Z3aO#R3_O'r(pO~O!j&bO'Q#VO~P<cOv3eO~Ov3eO!j&bO'Q`O~P<cO!O3hO'r(pO~Ow!PO~P#9vOo3kOy3jO(P*PO~O!P3oO~P%;pOv3rO~P%;pOR0uO!S+UO!e0sO~OR0uOo0wO!S+UO!e0sO~Oa/zO|!VO'Q#VO'T(RO~O!S3uO~O!e3wOv(dX~Ov3yO~OQ!QOZ%rO[%qO^%vO_%cO`TOa/zOd%jOg%yO|!VO}%pO!q%oO$f%wO%^%xO&W%{O'Q#VO'T%dO'Z%eO(Q%zO~PGaO!e3|O(P*PO!P(fX~O!P4OO~O!S4PO(P*OO~O!S+UO(P*PO~O!e4ROw(aXy(aX~OQ4TO~Oy2WO~Oa/zO|!VO'Q#VO'T*oO~Oo4WOw*vO}*wOv%XX!e%XX~O!e4ZOv(hX~Ov4]O~O(P4_Oy(_Xw(_X$|(_XR(_Xo(_X!e(_X~Oy4aO(P*PO~OQ!QOSVOTVO[$gO^4bO_$ZO`9yOa9yOd$aOsVOtVOuVO}$eO!i$qO!l$lO!q$hO#V$lO'T$YO'^UO'g$[O~O!j4cO'Z%eO~P&,sO!S4eO'r(pO~O#V4gO~P%1}O!e4hO!P(kX~O!P4jO~O!P%aX!S!aX!e%aX'r!aX~P!KgO!j&bO~P&,sO!e4hO!P(kX!S'eX'r'eX~O^2yO!j2xO~Ow!POy2fO~O_4pO!Q/sO'T&iO'Z%eOR&lX!e&lX~OR4rO!e0sO~O!S4tO~Ow$yO$|*xO(P*PO~Oy4uO~P2gOo4vOy4uO(P*PO~Ov&uX!e&uX~P!3|O!e1POv(pa~Oo4|Oy4{O(P*PO~OSVOTVO_%cOsVOtVOuVOw!PO!Q!lO'^UOR&vX!e&vX~P#DkO!e1ZOR'Ya~O!y5SO~O!P5TO~P#KkO!S1^OX'wX#R'wX~O!e,sO!P(Vi~O!P&ea!e&ea~P2gOX5WO~P2gOP!bqZcq!S!bq!e!bq!tcq'qcq'r!bq!O!bqo!bqy!bq!P!bqX!bq!Z!bq#R!bqv!bq~O'r(pO!P&`a!e&`aX&`a~O!i-`O!j-_O!l5YO'T-XOv&aX!e&aX~O!e1sOv'oa~O!S5[O~O!S5`O'r(pOP$Xa!e$Xa~O(P*POP$Wq!e$Wq~Ov$^i!e$^i~P2gOw!POy5bO#Q5dO$|*xO~Oo5gOy5fO(P*PO~Oy5iO~Oy5iO$|*xO~Oy5mO(P*PO~Ow!POy5bO~Oo5tOy5sO(P*PO~O!S5vO~O!e2sO!P(ta~O^2yO!j2xO'Z%eO~OQ!QOZ%rO[%qO^.rO_%cO`TOaTOd%jOg%yO}%pO!j.sO!q.pO!t5zO#V5|O$f%wO%^%xO&W%{O'Q#VO'T%dO'Z%eO(Q%zO!P&xX!e&xX~PGaOQ!QOZ%rO[%qO^6OO_%cO`TOaTOd%jOg%yO}%pO!j6PO!q%oO$f%wO%^%xO&W%{O'T%dO'Z%eO(P*OO(Q%zO~PGaO!P%aa!e%aa~P#4kO^6QO~O#Q6ROR%wq#p%wq(P%wqw%wq$f%wq$|%wq[%wqo%wqy%wq}%wq!l%wq!q%wq!t%wq#O%wq#P%wq'g%wq'q%wq'r%wq'x%wq'y%wq'z%wq'{%wq'|%wq'}%wq(O%wq(Q%wq(R%wq(T%wq!P%wq!e%wqX%wqP%wqv%wq!S%wq#R%wq~O(P*POR&Oq#p&Oqw&Oq$f&Oq$|&Oq[&Oqo&Oqy&Oq}&Oq!l&Oq!q&Oq!t&Oq#O&Oq#P&Oq'g&Oq'q&Oq'r&Oq'x&Oq'y&Oq'z&Oq'{&Oq'|&Oq'}&Oq(O&Oq(Q&Oq(R&Oq(T&Oq!P&Oq!e&OqX&OqP&Oqv&Oq!S&Oq#R&Oq~O(P*PO!P&ya!e&ya~OX6SO~P2gO'Z%eOR&wX!e&wX~O!e3ROR(ra~O$f6YO(P*PO~Ow![q~P#9vO#R6]O~O!Z3aO#R6]O'r(pO~Ov6bO~O#R6fO~Oy6gO!P6hO~O!P6hO~P%;pOy6kO~Ov6kOy6gO~Ov6kO~P%;pOy6mO~O!e3wOv(da~O!S6pO~Oa/zO|!VO'Q#VO'T(ROv&oX!e&oX~O!e3|O(P*PO!P(fa~OQ!QOZ%rO[%qO^%vO_%cO`TOa/zOd%jOg%yO|!VO}%pO!q%oO$f%wO%^%xO&W%{O'Q#VO'T%dO'Z%eO(Q%zO!P&pX!e&pX~PGaO!e3|O!P(fa~OQ!QOZ%rO[%qO^%vO_%cO`TOaTOd%jOg%yO}%pO!q%oO$f0VO%^%xO&W%{O'T%dO'Z%eO(Q%zOw&nX!e&nXy&nX~PGaO!e4ROw(aay(aa~O!e4ZOv(ha~Oo7SOv%Xa!e%Xa~Oo7SOw*vO}*wOv%Xa!e%Xa~Oa/zO|!VO'Q#VO'T*oOv&qX!e&qX~O(P*POy$xaw$xa$|$xaR$xao$xa!e$xa~O(P4_Oy(_aw(_a$|(_aR(_ao(_a!e(_a~O!P%aa!S!aX!e%aa'r!aX~P!KgOQ!QOSVOTVO[$gO_$ZO`9yOa9yOd$aOsVOtVOuVO}$eO!i$qO!j&bO!l$lO!q$hO#V$lO'T$YO'^UO'g$[O~O^7ZO~P&JUO^6QO!j6PO~O!e4hO!P(ka~O!e4hO!P(ka!S'eX'r'eX~OQ!QOSVOTVO[$gO^0lO_$ZO`9yOa9yOd$aOsVOtVOuVO}$eO!i$qO!j0mO!l$lO!q0eO!t7_O'Q#VO'T$YO'Z%eO'^UO'g$[O~O#V7aO!P&sX!e&sX~P&L]O!S7cO'r(pO~Ow!POy5bO$|*xO(P*PO~O!S+UOR&la!e&la~Oo0wO!S+UOR&la!e&la~Oo0wOR&la!e&la~O(P*POR$yi!e$yi~Oy7fO~P2gOo7gOy7fO(P*PO~O(P*PORni!eni~O(P*POR&va!e&va~O(P*OOR&va!e&va~OS,^OT,^OZ,^O_,^Od,^Oo,^Os,^Ou,^Oy,^O!S,^O!e,^O!l,^O!q,[O!t,^O!y,^O#O,^O#P,^O#Q,^O#R,^O'Q,^O'Z%eO'^UO'g,ZO'r,[O'x,ZO'y,[O'z,[O'{,[O'|,]O'},]O(O,^O~O(P7iO(Q7iO(R7iO~P'!qO!P7kO~P#KkO!P&ei!e&ei~P2gO'r(pOv!hi!e!hi~O!S7mO~O(P*POP$Xi!e$Xi~Ov$^q!e$^q~P2gOw!POy7oO~Ow!POy7oO#Q7rO$|*xO~Oy7tO~Oy7uO~Oy7vO(P*PO~Ow!POy7oO$|*xO(P*PO~Oo7{Oy7zO(P*PO~O!e2sO!P(ti~O(P*PO!P%}X!e%}X~O!P%ai!e%ai~P#4kO^8OO~O!e8TO['bXv$`i}'bX!l'bX!q'bX!t'bX'g'bX'q'bX(Q'bX~P@[OQ#[iS#[iT#[i[#[i^#[i_#[i`#[ia#[id#[is#[it#[iu#[iv$`i}#[i!i#[i!j#[i!l#[i!q#[i!t'bX#V#[i'Q#[i'T#[i'^#[i'g#[i'q'bX(Q'bX~P@[O#R#^a~P2gO#R8WO~O!Z3aO#R8XO'r(pO~Ov8[O~Oy8^O~P2gOy8`O~Oy6gO!P8aO~Ov8`Oy6gO~O!e3wOv(di~O(P*POv%Qi!e%Qi~O!e3|O!P(fi~O!e3|O(P*PO!P(fi~O(P*PO!P&pa!e&pa~O(P8hOw(bX!e(bXy(bX~O(P*PO!S$wiy$wiw$wi$|$wiR$wio$wi!e$wi~O!e4ZOv(hi~Ov%Xi!e%Xi~P2gOo8kOv%Xi!e%Xi~O!P%ai!S!aX!e%ai'r!aX~P!KgO(P*PO!P%`i!e%`i~O!e4hO!P(ki~O#V8nO~P&L]O!P&sa!S'eX!e&sa'r'eX~O(P*POR$zq!e$zq~Oy8pO~P2gOy7zO~P2gO(P8rO(Q8rO(R8rO~O(P8rO(Q8rO(R8rO~P'!qO'r(pOv!hq!e!hq~O(P*POP$Xq!e$Xq~Ow!POy8uO$|*xO(P*PO~Ow!POy8uO~Oy8xO~P2gOy8zO~P2gOo8|Oy8zO(P*PO~OQ#[qS#[qT#[q[#[q^#[q_#[q`#[qa#[qd#[qs#[qt#[qu#[qv$`q}#[q!i#[q!j#[q!l#[q!q#[q#V#[q'Q#[q'T#[q'^#[q'g#[q~O!e9PO['bXv$`q}'bX!l'bX!q'bX!t'bX'g'bX'q'bX(Q'bX~P@[Oo'bX!t'bX#O'bX#P'bX#p'bX'q'bX'r'bX'x'bX'y'bX'z'bX'{'bX'|'bX'}'bX(O'bX(P'bX(Q'bX(R'bX(T'bX~P'2fO#R9UO~O!Z3aO#R9UO'r(pO~Oy9WO~O(P*POv%Qq!e%Qq~O!e3|O!P(fq~O(P*PO!P&pi!e&pi~O(P8hOw(ba!e(bay(ba~Ov%Xq!e%Xq~P2gO!P&si!S'eX!e&si'r'eX~O(P*PO!P%`q!e%`q~Oy9]O~P2gO(P9^O(Q9^O(R9^O~O'r(pOv!hy!e!hy~Ow!POy9_O~Ow!POy9_O$|*xO(P*PO~Oy9aO~P2gOQ#[yS#[yT#[y[#[y^#[y_#[y`#[ya#[yd#[ys#[yt#[yu#[yv$`y}#[y!i#[y!j#[y!l#[y!q#[y#V#[y'Q#[y'T#[y'^#[y'g#[y~O!e9dO['bXv$`y}'bX!l'bX!q'bX!t'bX'g'bX'q'bX(Q'bX~P@[Oo'bX!t'bX#O'bX#P'bX#p'bX'q'bX'r'bX'x'bX'y'bX'z'bX'{'bX'|'bX'}'bX(O'bX(P'bX(Q'bX(R'bX(T'bX~P'9eO!e9eO['bX}'bX!l'bX!q'bX!t'bX'g'bX'q'bX(Q'bX~P@[OQ#[iS#[iT#[i[#[i^#[i_#[i`#[ia#[id#[is#[it#[iu#[i}#[i!i#[i!j#[i!l#[i!q#[i!t'bX#V#[i'Q#[i'T#[i'^#[i'g#[i'q'bX(Q'bX~P@[O#R9hO~O(P*PO!P&pq!e&pq~Ov%Xy!e%Xy~P2gOw!POy9iO~Oy9jO~P2gOQ#[!RS#[!RT#[!R[#[!R^#[!R_#[!R`#[!Ra#[!Rd#[!Rs#[!Rt#[!Ru#[!Rv$`!R}#[!R!i#[!R!j#[!R!l#[!R!q#[!R#V#[!R'Q#[!R'T#[!R'^#[!R'g#[!R~O!e9kO['bX}'bX!l'bX!q'bX!t'bX'g'bX'q'bX(Q'bX~P@[OQ#[qS#[qT#[q[#[q^#[q_#[q`#[qa#[qd#[qs#[qt#[qu#[q}#[q!i#[q!j#[q!l#[q!q#[q!t'bX#V#[q'Q#[q'T#[q'^#[q'g#[q'q'bX(Q'bX~P@[O!e9nO['bX}'bX!l'bX!q'bX!t'bX'g'bX'q'bX(Q'bX~P@[OQ#[yS#[yT#[y[#[y^#[y_#[y`#[ya#[yd#[ys#[yt#[yu#[y}#[y!i#[y!j#[y!l#[y!q#[y!t'bX#V#[y'Q#[y'T#[y'^#[y'g#[y'q'bX(Q'bX~P@[OwbX~P$|OwjX}jX!tbX'qbX~P!6mOZ'SXd'XXo'SXw'kX!t'SX'q'SX'r'SX~O['SXd'SXw'SX}'SX!l'SX!q'SX#O'SX#P'SX#p'SX'g'SX'x'SX'y'SX'z'SX'{'SX'|'SX'}'SX(O'SX(P'SX(Q'SX(R'SX(T'SX~P'GTOP'SX}'kX!S'SX!e'SX!O'SXy'SX!P'SXX'SX!Z'SX#R'SXv'SX~P'GTO^9qO_9qO`9qOa9qO'T9oO~O!j:OO~P!.cOPoOQ!QOSVOTVOZeOd9tOsVOtVOuVO!U#bO!W#cO!X:zO!Z!YO#Y!_O#r9zO#{9{O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO[#sXo#sXw#sX}#sX!l#sX!q#sX!t#sX#O#sX#P#sX#p#sX'g#sX'q#sX'r#sX'x#sX'y#sX'z#sX'{#sX'|#sX'}#sX(O#sX(P#sX(Q#sX(R#sX(T#sX~P'IxO#Q$uO~P!.cO}'kXP'SX!S'SX!e'SX!O'SXy'SX!P'SXX'SX!Z'SX#R'SXv'SX~P'GTOo#qX#O#qX#P#qX#p#qX'r#qX'x#qX'y#qX'z#qX'{#qX'|#qX'}#qX(O#qX(P#qX(R#qX(T#qX~P!.cOo#zX#O#zX#P#zX#p#zX'r#zX'x#zX'y#zX'z#zX'{#zX'|#zX'}#zX(O#zX(P#zX(R#zX(T#zX~P!.cOPoOQ!QOSVOTVOZeOd9tOsVOtVOuVO!U#bO!W#cO!X:zO!Z!YO#Y!_O#r9zO#{9{O$O!]O$b!`O$d!bO$f!cO'ZkO'^UO[#sao#saw#sa}#sa!l#sa!q#sa!t#sa#O#sa#P#sa#p#sa'g#sa'q#sa'r#sa'x#sa'y#sa'z#sa'{#sa'|#sa'}#sa(O#sa(P#sa(Q#sa(R#sa(T#sa~P'IxOo:YO#O:YO#P:VOw#sa~P!B}Ow$Ua~P#9vOQ'XXd'XX}iX~OQlXdlX}jX~O^:sO_:sO`:sOa:sO'T:_O~OQ'XXd'XX}hX~Ow#qa~P#9vOw#za~P#9vO!S&_Oo#za#O#za#P#za#p#za'r#za'x#za'y#za'z#za'{#za'|#za'}#za(O#za(P#za(R#za(T#za~P!.cO#Q*eO~P!.cOw#ci~P#9vO[#}O}#zO'x#hO(O#|O(Q#hO(R#fO(T#hOo#eiw#ei!l#ei!q#ei!t#ei#O#ei#P#ei#p#ei'q#ei'r#ei'y#ei'z#ei'{#ei'|#ei'}#ei~O'g#ei(P#ei~P((}O'g#gO(P#gO~P((}O[#}O}#zO'g#gO'x#hO'y#iO'z#iO(O#|O(P#gO(Q#hO(R#fO(T#hOo#eiw#ei!l#ei!t#ei#O#ei#P#ei#p#ei'q#ei'r#ei'{#ei'|#ei'}#ei~O!q#ei~P(*yO!q#jO~P(*yO[#}O}#zO!q#jO'g#gO'x#hO'y#iO'z#iO'{#kO(O#|O(P#gO(Q#hO(R#fO(T#hOo#eiw#ei!l#ei!t#ei#O#ei#P#ei#p#ei'q#ei'|#ei'}#ei~O'r#ei~P(,rO'r#lO~P(,rO[#}O}#zO!q#jO#P:VO'g#gO'r#lO'x#hO'y#iO'z#iO'{#kO(O#|O(P#gO(Q#hO(R#fO(T#hOo#eiw#ei!l#ei!t#ei#O#ei#p#ei'q#ei'|#ei~O'}#ei~P(.kO'}#mO~P(.kOo:YO#O:YO#P:VOw#ni~P$1xOo:YO#O:YO#P:VOw#si~P$3yOQ'XXd'XX}'kX~Ow#zi~P#9vOw$Ui~P#9vOd9}O~Ow#ca~P#9vOd:uO~OU'x_'v'P'O'^s!y'^'T'Z~",
     goto: "$Ku(vPPPPPPP(wPP)OPP)^PPPP)d-hP0f5aP7R7R8v7R>wD_DpPDvHQPPPPPPK`P! P! _PPPPP!!VP!$oP!$oPP!&oP!(rP!(w!)n!*f!*f!*f!(w!+]P!(w!.Q!.TPP!.ZP!(w!(w!(w!(wP!(w!(wP!(w!(w!.y!/dP!/dJ}J}J}PPPP!/d!.y!/sPP!$oP!0^!0a!0g!1h!1t!3t!3t!5r!7t!1t!1t!9p!;_!=O!>k!@U!Am!CS!De!1t!1tP!1tP!1t!1t!Et!1tP!Ge!1t!1tP!Ie!1tP!1t!7t!7t!1t!7t!1t!Kl!Mt!Mw!7t!1t!Mz!M}!M}!M}!NR!$oP!$oP!$oP! P! PP!N]! P! PP!Ni# }! PP! PP#!^##c##k#$Z#$_#$e#$e#$mP#&s#&s#&y#'o#'{! PP! PP#(]#(l! PP! PPP#(x#)W#)d#)|#)^! P! PP! P! P! PP#*S#*S#*Y#*`#*S#*S! P! PP#*m#*v#+Q#+Q#,x#.l#.x#.x#.{#.{5a5a5a5a5a5a5a5aP5a#/O#/U#/p#1{#2R#2b#6^#6d#6j#6|#7W#8w#9R#9b#9h#9n#9x#:S#:Y#:g#:m#:s#:}#;]#;g#=u#>R#>`#>f#>n#>u#?PPPPPPPP#?V#BaP#F^#Jx#Ls#Nr$&^P$&aPPP$)_$)h$)z$/U$1d$1m$3fP!(w$4`$7r$:i$>T$>^$>c$>fPPP$>i$A`$A|P$BaPPPPPPPPPP$BvP$EU$EX$E[$Eb$Ee$Eh$Ek$En$Et$HO$HR$HU$HX$H[$H_$Hb$He$Hh$Hk$Hn$Jt$Jw$Jz#*S$KW$K^$Ka$Kd$Kh$Kl$Ko$KrQ!tPT'V!s'Wi!SOlm!P!T$T$W$y%b)U*f/gQ'i#QR,n'l(OSOY[bfgilmop!O!P!T!Y!Z![!_!`!c!p!q!|!}#Q#U#Z#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$`$a$e$g$h$q$r$y%X%_%b&U&Y&[&b&u&z&|'P'a'l'n'o'}(W(Y(b(d(e(f(j(o(p(r(|)S)U)i*Z*f*i*k*l+Z+n+z,q,s,z-R-T-g-m-t.}/^/b/d/g0e0g0m0}1P1h1r1|3_3a3f3h3k4W4c4h4v4|5[5g5t6]6a7S7^7g7m7{8W8X8k8|9U9h9s9t9u9v9w9x9z9{9|9}:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f:gS(z$v-oQ*p&eQ*t&hQ-k(yQ-y)ZW0Z+Q0Y4Z7UR4Y0[&w!RObfgilmop!O!P!T!Y!Z![!_!`!c!p#Q#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$e$g$h$q$r$y%_%b&U&Y&[&b&u'l'}(W(Y(b(f(j(o(p(r(|)S)U)i*Z*f*i*k*l+Z+n,s,z-T-g-m-t.}/^/b/d/g0e0g0m0}1h1r1|3_3a3f3h3k4W4c4h4v4|5[5g5t6]6a7S7^7g7m7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f#r]Ofgilmp!O!P!T!Z![#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i+n,s,z-m.}0}1h1|3_3a3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9hb#[b#Q$y'l(b)S)U*Z-t!h$bo!c!p$e$g$h$q$r&U&b&u(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7m$b%k!Q!n$O$u%o%p%q%y%{&P&o&p&r'](q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8g!W:y!Y!_!`*i*l/^3h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:fR:|%n$_%u!Q!n$O$u%o%p%q&P&o&p&r'](q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8g$e%l!Q!n$O$u%n%o%p%q%y%{&P&o&p&r'](q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8g'hZOY[fgilmop!O!P!T!Y!Z![!_!`!c!p!|!}#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$`$a$e$g$h$q$r%_%b%i%j&U&Y&[&b&u'a'}(W(Y(d(e(f(j(o(p(r(|)i)p)q*f*i*k*l+Z+n,s,z-R-T-g-m.i.}/^/b/d/g0e0g0m0}1h1r1|3_3a3f3h3k4W4c4h4v4|5[5g5t6]6a7S7^7g7m7{8W8X8k8|9U9h9s9t9u9v9w9x9z9{9|9}:O:P:Q:R:S:T:U:V:W:X:Y:Z:`:a:e:f:g:t:u:x$^%l!Q!n$O$u%n%o%p%q%y%{&P&p&r(q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8gQ&j!hQ&k!iQ&l!jQ&m!kQ&s!oQ)[%QQ)]%RQ)^%SQ)_%TQ)b%WQ+`&oS,R']1ZQ.W)`S/r*u4TR4n0s+yTOY[bfgilmop!O!P!Q!T!Y!Z![!_!`!c!n!p!q!|!}#Q#U#Z#e#o#p#q#r#s#t#u#v#w#x#y#z#}$O$T$W$`$a$e$g$h$q$r$u$y%X%_%b%i%j%n%o%p%q%y%{&P&U&Y&[&b&o&p&r&u&z&|'P']'a'l'n'o'}(W(Y(b(d(e(f(j(o(p(q(r(|)S)U)i)p)q)s)x)y*O*P*R*V*Z*[*^*e*f*i*k*l*n*w*x+U+V+Z+h+n+o+z+},q,s,z-R-T-g-i-m-t-v.U.`.i.p.t.x.y.}/Z/[/^/b/d/g/{/}0`0e0g0m0r0w0}1O1P1Y1Z1h1r1y1|2a2h2j2m2s2v3V3_3a3f3h3k3u3{3|4R4U4W4_4c4e4h4t4v4|5[5`5d5g5t5v6R6Y6]6a6p6v6x7S7^7c7g7m7r7{8W8X8g8k8|9U9h9s9t9u9v9w9x9z9{9|9}:O:P:Q:R:S:T:U:V:W:X:Y:Z:`:a:e:f:g:t:u:xQ'[!xQ'h#PQ)l%gU)r%m*T*WR.f)kQ,T']R5P1Z#t%s!Q!n$O$u%p%q&P&p&r(q)x)y*O*R*V*[*^*e*n*w+V+h+o+}-i-v.U.`.t.x.y/Z/[/{/}0`0r0w1O1Y1y2a2h2j2m2v3V3u3{3|4U4e4t5`5d5v6R6Y6p6v6x7c7r8gQ)x%oQ+_&oQ,U']n,^'b'c'd,c,f,h,l/m/n1_3n3q5T5U7kS.q)s2sQ/O*PQ/Q*SQ/q*uS0Q*x4RQ0a+U[0o+Z.j0g4h5y7^Q2v.pS4d0e2rQ4m0sQ5Q1ZQ6T3RQ6z4PQ7O4TQ7X4_R9Y8h&jVOfgilmop!O!P!T!Y!Z![!_!`!c!p#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$e$g$h$q$r%_%b&U&Y&[&b&u']'}(W(Y(b(f(j(o(p(r(|)i*f*i*k*l+Z+n,s,z-T-g-m.}/^/b/d/g0e0g0m0}1Z1h1r1|3_3a3f3h3k4W4c4h4v4|5[5g5t6]6a7S7^7g7m7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:fU&g!g%P%[o,^'b'c'd,c,f,h,l/m/n1_3n3q5T5U7k$nsOfgilm!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y'}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9z9{:O:P:Q:R:S:T:U:V:W:X:Y:eS$tp9xS&O!W#bS&Q!X#cQ&`!bQ*_&RQ*a&VS*d&[:fQ*h&^Q,T']Q-j(wQ/i*jQ0p+[S2f.X0qQ3]/_Q3^/`Q3g/hQ3i/kQ5P1ZU5b2R2g4lU7o5c5e5rQ8]6dS8u7p7qS9_8v8wR9i9`i{Ob!O!P!T$y%_%b)S)U)i-thxOb!O!P!T$y%_%b)S)U)i-tW/v*v/t3w6qQ/}*wW0[+Q0Y4Z7UQ3{/{Q6x3|R8g6v!h$do!c!p$e$g$h$q$r&U&b&u(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7mQ&d!dQ&f!fQ&n!mW&x!q%X&|1PQ'S!rQ)X$}Q)Y%OQ)a%VU)d%Y'T'UQ*s&hS+s&z'PS-Y(k1sQ-u)WQ-x)ZS.a)e)fS0x+c/sQ1S+zQ1W+{S1v-_-`Q2k.bQ3s/pQ5]1xR5h2V${sOfgilmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f$zsOfgilmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:fR3]/_V&T!Y!`*i!i$lo!c!p$e$g$h$q$r&U&b&u(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7m!k$^o!c!p$e$g$h$q$r&U&b&u(b(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7m!i$co!c!p$e$g$h$q$r&U&b&u(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7m&e^Ofgilmop!O!P!T!Y!Z![!_!`!c!p#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$e$g$h$q$r%_%b&U&Y&[&b&u'}(W(Y(f(j(o(p(r(|)i*f*i*k*l+Z+n,s,z-T-g-m.}/^/b/d/g0e0g0m0}1h1r1|3_3a3f3h3k4W4c4h4v4|5[5g5t6]6a7S7^7g7m7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:fR(l$fQ-[(kR5Y1sQ(S#|S({$v-oS-Z(k1sQ-l(yW/u*v/t3w6qS1w-_-`Q3v/vR5^1xQ'e#Or,e'b'c'd'j'p)u,c,f,h,l/m/n1_3n3q5U6fR,o'mk,a'b'c'd,c,f,h,l/m/n1_3n3q5UQ'f#Or,e'b'c'd'j'p)u,c,f,h,l/m/n1_3n3q5U6fR,p'mR*g&]X/c*f/d/g3f!}aOb!O!P!T#z$v$y%_%b'}(y)S)U)i)s*f*v*w+Q+Z,s-o-t.j/b/d/g/t/{0Y0g1h2s3f3w3|4Z4h5y6a6q6v7U7^Q3`/aQ6_3bQ8Y6`R9V8Z${rOfgilmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f#nfOfglmp!O!P!T!Z![#e#o#p#q#r#s#t#u#v#w#x#z#}$T$W%_%b&Y&['}(W(Y(|)i+n,s,z-m.}0}1h1|3_3a3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h!T9u!Y!_!`*i*l/^3h9u9v9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:e:f#rfOfgilmp!O!P!T!Z![#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i+n,s,z-m.}0}1h1|3_3a3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h!X9u!Y!_!`*i*l/^3h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f$srOfglmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#z#}$T$W%_%b&Y&['}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:e:f#U#oh#d$P$Q$V$s%^&W&X'q't'u'v'w'x'y'z'{'|(O(U([(`*b*c,r,w,y-n0z1i1l1}3P4w5V5a6^6e7R7e7h7s7y8j8q8{9[9b}:P&S&]/k3[6d:[:]:c:d:h:j:k:l:m:n:o:p:q:r:v:w:{#W#ph#d$P$Q$V$s%^&W&X'q'r't'u'v'w'x'y'z'{'|(O(U([(`*b*c,r,w,y-n0z1i1l1}3P4w5V5a6^6e7R7e7h7s7y8j8q8{9[9b!P:Q&S&]/k3[6d:[:]:c:d:h:i:j:k:l:m:n:o:p:q:r:v:w:{#S#qh#d$P$Q$V$s%^&W&X'q'u'v'w'x'y'z'{'|(O(U([(`*b*c,r,w,y-n0z1i1l1}3P4w5V5a6^6e7R7e7h7s7y8j8q8{9[9b{:R&S&]/k3[6d:[:]:c:d:h:k:l:m:n:o:p:q:r:v:w:{#Q#rh#d$P$Q$V$s%^&W&X'q'v'w'x'y'z'{'|(O(U([(`*b*c,r,w,y-n0z1i1l1}3P4w5V5a6^6e7R7e7h7s7y8j8q8{9[9by:S&S&]/k3[6d:[:]:c:d:h:l:m:n:o:p:q:r:v:w:{#O#sh#d$P$Q$V$s%^&W&X'q'w'x'y'z'{'|(O(U([(`*b*c,r,w,y-n0z1i1l1}3P4w5V5a6^6e7R7e7h7s7y8j8q8{9[9bw:T&S&]/k3[6d:[:]:c:d:h:m:n:o:p:q:r:v:w:{!|#th#d$P$Q$V$s%^&W&X'q'x'y'z'{'|(O(U([(`*b*c,r,w,y-n0z1i1l1}3P4w5V5a6^6e7R7e7h7s7y8j8q8{9[9bu:U&S&]/k3[6d:[:]:c:d:h:n:o:p:q:r:v:w:{!x#vh#d$P$Q$V$s%^&W&X'q'z'{'|(O(U([(`*b*c,r,w,y-n0z1i1l1}3P4w5V5a6^6e7R7e7h7s7y8j8q8{9[9bq:W&S&]/k3[6d:[:]:c:d:h:p:q:r:v:w:{!v#wh#d$P$Q$V$s%^&W&X'q'{'|(O(U([(`*b*c,r,w,y-n0z1i1l1}3P4w5V5a6^6e7R7e7h7s7y8j8q8{9[9bo:X&S&]/k3[6d:[:]:c:d:h:q:r:v:w:{$]#{h#`#d$P$Q$V$s%^&S&W&X&]'q'r's't'u'v'w'x'y'z'{'|(O(U([(`*b*c,r,w,y-n/k0z1i1l1}3P3[4w5V5a6^6d6e7R7e7h7s7y8j8q8{9[9b:[:]:c:d:h:i:j:k:l:m:n:o:p:q:r:v:w:{${jOfgilmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f$v!aOfgilmp!O!P!T!Y!Z!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9w9x9z:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:fQ&Y![Q&Z!]R:e9{#rpOfgilmp!O!P!T!Z![#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i+n,s,z-m.}0}1h1|3_3a3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9hQ&[!^!W9x!Y!_!`*i*l/^3h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:fR:f:zR$moR-f(rR$wqT(}$v-oQ/f*fS3d/d/gR6c3fQ3m/mQ3p/nQ6i3nR6l3qQ$zwQ)V${Q*q&fQ+f&qQ+i&sQ-w)YW.Z)b+j+k+lS/X*]+gW2b.W.[.].^U3W/Y/]0yU5o2c2d2eS6W3X3ZS7w5p5qS8Q6V6XQ8y7xS8}8R8SR9c9O^|O!O!P!T%_%b)iX)R$y)S)U-tQ&r!nQ*^&PQ*|&jQ+P&kQ+T&lQ+W&mQ+]&nQ+l&sQ-})[Q.Q)]Q.T)^Q.V)_Q.Y)aQ.^)bQ2S-uQ2e.WR4U0VU+a&o*u4TR4o0sQ+Y&mQ+k&sS.])b+l^0v+_+`/q/r4m4n7OS2d.W.^S4Q0R0SR5q2eS0R*x4RQ0a+UR7X4_U+d&o*u4TR4p0sQ*z&jQ+O&kQ+S&lQ+g&qQ+j&sS-{)[*|S.P)]+PS.S)^+TU.[)b+k+lQ/Y*]Q0X*{Q0q+[Q2X-|Q2Y-}Q2].QQ2_.TU2c.W.].^Q2g.XS3Z/]0yS5c2R4lQ5j2ZS5p2d2eQ6X3XS7q5e5rQ7x5qQ8R6VQ8v7pQ9O8SR9`8wQ0T*xR6|4RQ*y&jQ*}&kU-z)[*z*|U.O)]+O+PS2W-{-}S2[.P.QQ4X0ZQ5i2YQ5k2]R7T4YQ/w*vQ3t/tQ6r3wR8d6qQ*{&jS-|)[*|Q2Z-}Q4X0ZR7T4YQ+R&lU.R)^+S+TS2^.S.TR5l2_Q0]+QQ4V0YQ7V4ZR8l7UQ+[&nS.X)a+]S2R-u.YR5e2SQ0i+ZQ4f0gQ7`4hR8m7^Q.m)sQ0i+ZQ2p.jQ4f0gQ5|2sQ7`4hQ7}5yR8m7^Q0i+ZR4f0gX'O!q%X&|1PX&{!q%X&|1PW'O!q%X&|1PS+u&z'PR1U+z_|O!O!P!T%_%b)iQ%a!PS)h%_%bR.d)i$^%u!Q!n$O$u%o%p%q&P&o&p&r'](q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8gQ*U%yR*X%{$c%n!Q!n$O$u%o%p%q%y%{&P&o&p&r'](q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8gW)t%m%x*T*WQ.e)jR2{.vR.m)sR5|2sQ'W!sR,O'WQ!TOQ$TlQ$WmQ%b!P[%|!T$T$W%b)U/gQ)U$yR/g*f$b%i!Q!n$O$u%o%p%q%y%{&P&o&p&r'](q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8g[)n%i)p.i:`:t:xQ)p%jQ.i)qQ:`%nQ:t:aR:x:uQ!vUR'Y!vS!OO!TU%]!O%_)iQ%_!PR)i%b#rYOfgilmp!O!P!T!Z![#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i+n,s,z-m.}0}1h1|3_3a3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9hh!yY!|#U$`'a'n(d,q-R9s9|:gQ!|[b#Ub#Q$y'l(b)S)U*Z-t!h$`o!c!p$e$g$h$q$r&U&b&u(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7mQ'a!}Q'n#ZQ(d$aQ,q'oQ-R(e!W9s!Y!_!`*i*l/^3h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:fQ9|9tR:g9}Q-U(gR1p-UQ1t-[R5Z1tQ,c'bQ,f'cQ,h'dW1`,c,f,h5UR5U1_Q/d*fS3c/d3fR3f/gfbO!O!P!T$y%_%b)S)U)i-tp#Wb'}(y.j/b/t/{0Y0g1h5y6a6q6v7U7^Q'}#zS(y$v-oQ.j)sW/b*f/d/g3fQ/t*vQ/{*wQ0Y+QQ0g+ZQ1h,sQ5y2sQ6q3wQ6v3|Q7U4ZR7^4hQ,t(OQ1g,rT1j,t1gS(X$Q([Q(^$VU,x(X(^,}R,}(`Q(s$mR-h(sQ-p)OR2P-pQ3n/mQ3q/nT6j3n3qQ)S$yS-r)S-tR-t)UQ4`0aR7Y4``0t+^+_+`+a+d/q/r7OR4q0tQ8i6zR9Z8iQ4S0TR6}4SQ3x/wQ6n3tT6s3x6nQ3}/|Q6t3zU6y3}6t8eR8e6uQ4[0]Q7Q4VT7W4[7QhzOb!O!P!T$y%_%b)S)U)i-tQ$|xW%Zz$|%f)v$b%f!Q!n$O$u%o%p%q%y%{&P&o&p&r'](q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8gR)v%nS4i0i0nS7]4f4gT7b4i7]W&z!q%X&|1PS+r&z+zR+z'PQ1Q+wR4z1QU1[,S,T,UR5R1[S3S/Q7OR6U3SQ2t.mQ5x2pT5}2t5xQ.z)zR3O.z^_O!O!P!T%_%b)iY#Xb$y)S)U-t$l#_fgilmp!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W&Y&['}(W(Y(|*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f!h$io!c!p$e$g$h$q$r&U&b&u(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7mS'j#Q'lQ-P(bR/V*Z&v!RObfgilmop!O!P!T!Y!Z![!_!`!c!p#Q#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$e$g$h$q$r$y%_%b&U&Y&[&b&u'l'}(W(Y(b(f(j(o(p(r(|)S)U)i*Z*f*i*k*l+Z+n,s,z-T-g-m-t.}/^/b/d/g0e0g0m0}1h1r1|3_3a3f3h3k4W4c4h4v4|5[5g5t6]6a7S7^7g7m7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f[!{Y[#U#Z9s9tW&{!q%X&|1P['`!|!}'n'o9|9}S(c$`$aS+t&z'PU,X'a,q:gS-Q(d(eQ1T+zR1n-RS%t!Q&oQ&q!nQ(V$OQ(w$uS)w%o.pQ)z%pQ)}%qS*]&P&rQ+e&pQ,S']Q-d(qQ.l)sU.w)x)y2vS/O*O*PQ/P*RQ/T*VQ/W*[Q/]*^Q/`*eQ/l*nQ/|*wS0S*x4RQ0a+UQ0c+VQ0y+hQ0{+oQ1X+}Q1{-iQ2T-vQ2`.UQ2i.`Q2z.tQ2|.xQ2}.yQ3X/ZQ3Y/[S3z/{/}Q4^0`Q4l0rQ4s0wQ4x1OQ4}1YQ5O1ZQ5_1yQ5n2aQ5r2hQ5u2jQ5w2mQ5{2sQ6V3VQ6o3uQ6u3{Q6w3|Q7P4UQ7X4_Q7[4eQ7d4tQ7n5`Q7p5dQ7|5vQ8P6RQ8S6YQ8c6pS8f6v6xQ8o7cQ8w7rR9X8g$^%m!Q!n$O$u%o%p%q&P&o&p&r'](q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8gQ)j%nQ*T%yR*W%{$y%h!Q!n$O$u%i%j%n%o%p%q%y%{&P&o&p&r'](q)p)q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.i.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8g:`:a:t:u:x'pWOY[bfgilmop!O!P!T!Y!Z![!_!`!c!p!|!}#Q#U#Z#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$`$a$e$g$h$q$r$y%_%b&U&Y&[&b&u'a'l'n'o'}(W(Y(b(d(e(f(j(o(p(r(|)S)U)i*Z*f*i*k*l+Z+n,q,s,z-R-T-g-m-t.}/^/b/d/g0e0g0m0}1h1r1|3_3a3f3h3k4W4c4h4v4|5[5g5t6]6a7S7^7g7m7{8W8X8k8|9U9h9s9t9u9v9w9x9z9{9|9}:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f:g$x%g!Q!n$O$u%i%j%n%o%p%q%y%{&P&o&p&r'](q)p)q)s)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.i.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8g:`:a:t:u:x_&y!q%X&z&|'P+z1PR,V']$zrOfgilmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f!j$]o!c!p$e$g$h$q$r&U&b&u(b(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7mQ,T']R5P1Z_}O!O!P!T%_%b)i^|O!O!P!T%_%b)iQ#YbX)R$y)S)U-tbhO!O!T3_6]8W8X9U9hS#`f9uQ#dgQ$PiQ$QlQ$VmQ$spW%^!P%_%b)iU&S!Y!`*iQ&W!ZQ&X![Q&]!_Q'q#eQ'r#oS's#p:QQ't#qQ'u#rQ'v#sQ'w#tQ'x#uQ'y#vQ'z#wQ'{#xQ'|#yQ(O#zQ(U#}Q([$TQ(`$WQ*b&YQ*c&[Q,r'}Q,w(WQ,y(YQ-n(|Q/k*lQ0z+nQ1i,sQ1l,zQ1}-mQ3P.}Q3[/^Q4w0}Q5V1hQ5a1|Q6^3aQ6d3hQ6e3kQ7R4WQ7e4vQ7h4|Q7s5gQ7y5tQ8j7SQ8q7gQ8{7{Q9[8kQ9b8|Q:[9wQ:]9xQ:c9zQ:d9{Q:h:OQ:i:PQ:j:RQ:k:SQ:l:TQ:m:UQ:n:VQ:o:WQ:p:XQ:q:YQ:r:ZQ:v:eQ:w:fR:{9v^tO!O!P!T%_%b)i$`#afgilmp!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W&Y&['}(W(Y(|*i*l+n,s,z-m.}/^0}1h1|3a3h3k4W4v4|5g5t7S7g7{8k8|9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:fQ6[3_Q8V6]Q9R8WQ9T8XQ9g9UR9m9hQ&V!YQ&^!`R/h*iQ$joQ&a!cQ&t!pU(g$e$g(jS(n$h0eQ(u$qQ(v$rQ*`&UQ*m&bQ+p&uQ-S(fS-b(o4cQ-c(pQ-e(rW/a*f/d/g3fQ/j*kW0f+Z0g4h7^Q1o-TQ1z-gQ3b/bQ4k0mQ5X1rQ7l5[Q8Z6aR8t7m!h$_o!c!p$e$g$h$q$r&U&b&u(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7mR-P(b'qXOY[bfgilmop!O!P!T!Y!Z![!_!`!c!p!|!}#Q#U#Z#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$`$a$e$g$h$q$r$y%_%b&U&Y&[&b&u'a'l'n'o'}(W(Y(b(d(e(f(j(o(p(r(|)S)U)i*Z*f*i*k*l+Z+n,q,s,z-R-T-g-m-t.}/^/b/d/g0e0g0m0}1h1r1|3_3a3f3h3k4W4c4h4v4|5[5g5t6]6a7S7^7g7m7{8W8X8k8|9U9h9s9t9u9v9w9x9z9{9|9}:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f:g$zqOfgilmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f!i$fo!c!p$e$g$h$q$r&U&b&u(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7m&d^Ofgilmop!O!P!T!Y!Z![!_!`!c!p#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W$e$g$h$q$r%_%b&U&Y&[&b&u'}(W(Y(f(j(o(p(r(|)i*f*i*k*l+Z+n,s,z-T-g-m.}/^/b/d/g0e0g0m0}1h1r1|3_3a3f3h3k4W4c4h4v4|5[5g5t6]6a7S7^7g7m7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f[!zY[$`$a9s9t['_!|!}(d(e9|9}W)o%i%j:`:aU,W'a-R:gW.h)p)q:t:uT2o.i:xQ(i$eQ(m$gR-W(jV(h$e$g(jR-^(kR-](k$znOfgilmp!O!P!T!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W%_%b&Y&['}(W(Y(|)i*i*l+n,s,z-m.}/^0}1h1|3_3a3h3k4W4v4|5g5t6]7S7g7{8W8X8k8|9U9h9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:f!i$ko!c!p$e$g$h$q$r&U&b&u(f(j(o(p(r*f*k+Z-T-g/b/d/g0e0g0m1r3f4c4h5[6a7^7mS'g#O'pj,a'b'c'd,c,f,h,l/m/n1_3n3q5UQ,m'jQ.u)uR8_6f`,b'b'c'd,c,f,h1_5UQ1e,lX3l/m/n3n3qj,a'b'c'd,c,f,h,l/m/n1_3n3q5UQ7j5TR8s7k^uO!O!P!T%_%b)i$`#afgilmp!Y!Z![!_!`#e#o#p#q#r#s#t#u#v#w#x#y#z#}$T$W&Y&['}(W(Y(|*i*l+n,s,z-m.}/^0}1h1|3a3h3k4W4v4|5g5t7S7g7{8k8|9u9v9w9x9z9{:O:P:Q:R:S:T:U:V:W:X:Y:Z:e:fQ6Z3_Q8U6]Q9Q8WQ9S8XQ9f9UR9l9hR(Q#zR(P#zQ$SlR(]$TR$ooR$noR)Q$vR)P$vQ)O$vR2O-ohwOb!O!P!T$y%_%b)S)U)i-t$l!lz!Q!n$O$u$|%f%n%o%p%q%y%{&P&o&p&r'](q)s)v)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8gR${xR0b+UR0W*xR0U*xR6{4PR/y*vR/x*vR0P*wR0O*wR0_+QR0^+Q%XyObxz!O!P!Q!T!n$O$u$y$|%_%b%f%n%o%p%q%y%{&P&o&p&r'](q)S)U)i)s)v)x)y*O*P*R*V*[*^*e*n*w*x+U+V+h+o+}-i-t-v.U.`.p.t.x.y/Z/[/{/}0`0r0w1O1Y1Z1y2a2h2j2m2s2v3V3u3{3|4R4U4_4e4t5`5d5v6R6Y6p6v6x7c7r8gR0k+ZR0j+ZQ'R!qQ)c%XQ+w&|R4y1PX'Q!q%X&|1PR+y&|R+x&|T/S*S4TT/R*S4TR.o)sR.n)sR){%p",
     nodeNames: "⚠ | < > RawString Float LineComment BlockComment SourceFile ] InnerAttribute ! [ MetaItem self Metavariable super crate Identifier ScopedIdentifier :: QualifiedScope AbstractType impl SelfType MetaType TypeIdentifier ScopedTypeIdentifier ScopeIdentifier TypeArgList TypeBinding = Lifetime String Escape Char Boolean Integer } { Block ; ConstItem Vis pub ( in ) const BoundIdentifier : UnsafeBlock unsafe AsyncBlock async move IfExpression if LetDeclaration let LiteralPattern ArithOp MetaPattern SelfPattern ScopedIdentifier TuplePattern ScopedTypeIdentifier , StructPattern FieldPatternList FieldPattern ref mut FieldIdentifier .. RefPattern SlicePattern CapturedPattern ReferencePattern & MutPattern RangePattern ... OrPattern MacroPattern ParenthesizedTokens TokenBinding Identifier TokenRepetition ArithOp BitOp LogicOp UpdateOp CompareOp -> => ArithOp BracketedTokens BracedTokens _ else MatchExpression match MatchBlock MatchArm Attribute Guard UnaryExpression ArithOp DerefOp LogicOp ReferenceExpression TryExpression BinaryExpression ArithOp ArithOp BitOp BitOp BitOp BitOp LogicOp LogicOp AssignmentExpression TypeCastExpression as ReturnExpression return RangeExpression CallExpression ArgList AwaitExpression await FieldExpression GenericFunction BreakExpression break LoopLabel ContinueExpression continue IndexExpression ArrayExpression TupleExpression MacroInvocation UnitExpression ClosureExpression ParamList Parameter Parameter ParenthesizedExpression StructExpression FieldInitializerList ShorthandFieldInitializer FieldInitializer BaseFieldInitializer MatchArm WhileExpression while LoopExpression loop ForExpression for MacroInvocation MacroDefinition macro_rules MacroRule EmptyStatement ModItem mod DeclarationList AttributeItem ForeignModItem extern StructItem struct TypeParamList ConstrainedTypeParameter TraitBounds HigherRankedTraitBound RemovedTraitBound OptionalTypeParameter ConstParameter WhereClause where LifetimeClause TypeBoundClause FieldDeclarationList FieldDeclaration OrderedFieldDeclarationList UnionItem union EnumItem enum EnumVariantList EnumVariant TypeItem type FunctionItem default fn ParamList Parameter SelfParameter VariadicParameter VariadicParameter ImplItem TraitItem trait AssociatedType LetDeclaration UseDeclaration use ScopedIdentifier UseAsClause ScopedIdentifier UseList ScopedUseList UseWildcard ExternCrateDeclaration StaticItem static ExpressionStatement ExpressionStatement GenericType FunctionType ForLifetimes ParamList VariadicParameter Parameter VariadicParameter Parameter ReferenceType PointerType TupleType UnitType ArrayType MacroInvocation EmptyType DynamicType dyn BoundedType",
     maxTerm: 359,
     nodeProps: [
       ["group", -42,4,5,14,15,16,17,18,19,33,35,36,37,40,51,53,56,101,107,111,112,113,122,123,125,127,128,130,132,133,134,137,139,140,141,142,143,144,148,149,155,157,159,"Expression",-16,22,24,25,26,27,222,223,230,231,232,233,234,235,236,237,239,"Type",-20,42,161,162,165,166,169,170,172,188,190,194,196,204,205,207,208,209,217,218,220,"Statement",-17,49,60,62,63,64,65,68,74,75,76,77,78,80,81,83,84,99,"Pattern"],
       ["openedBy", 9,"[",38,"{",47,"("],
       ["closedBy", 12,"]",39,"}",45,")"]
     ],
     propSources: [rustHighlighting],
     skippedNodes: [0,6,7,240],
     repeatNodeCount: 32,
     tokenData: "#?|_R!VOX$hXY1_YZ2ZZ]$h]^1_^p$hpq1_qr2srs4qst5Ztu6Vuv9lvw;jwx=nxy!!ayz!#]z{!$X{|!&R|}!'T}!O!(P!O!P!*Q!P!Q!-|!Q!R!6X!R![!7|![!]!Jw!]!^!Lu!^!_!Mq!_!`# x!`!a##y!a!b#&Q!b!c#&|!c!}#'x!}#O#)o#O#P#*k#P#Q#1b#Q#R#2^#R#S#'x#S#T$h#T#U#'x#U#V#3`#V#f#'x#f#g#6s#g#o#'x#o#p#<Q#p#q#<|#q#r#?Q#r${$h${$|#'x$|4w$h4w5b#'x5b5i$h5i6S#'x6S~$hU$oZ'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$hU%iT'_Q'OSOz%xz{&^{!P%x!P!Q'S!Q~%xS%}T'OSOz%xz{&^{!P%x!P!Q'S!Q~%xS&aTOz&pz{&^{!P&p!P!Q({!Q~&pS&sTOz%xz{&^{!P%x!P!Q'S!Q~%xS'VSOz&p{!P&p!P!Q'c!Q~&pS'fSOz'r{!P'r!P!Q'c!Q~'rS'uTOz(Uz{(l{!P(U!P!Q'c!Q~(US(]T'PS'OSOz(Uz{(l{!P(U!P!Q'c!Q~(US(oSOz'rz{(l{!P'r!Q~'rS)QO'PSU)VZ'_QOY)xYZ+hZr)xrs&psz)xz{)Q{!P)x!P!Q0w!Q#O)x#O#P&p#P~)xU)}Z'_QOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$hU*uZ'_QOY)xYZ+hZr)xrs&psz)xz{+|{!P)x!P!Q,g!Q#O)x#O#P&p#P~)xU+mT'_QOz%xz{&^{!P%x!P!Q'S!Q~%xQ,RT'_QOY+|YZ,bZr+|s#O+|#P~+|Q,gO'_QU,lZ'_QOY-_YZ0cZr-_rs'rsz-_z{+|{!P-_!P!Q,g!Q#O-_#O#P'r#P~-_U-dZ'_QOY.VYZ/RZr.Vrs(Usz.Vz{/k{!P.V!P!Q,g!Q#O.V#O#P(U#P~.VU.`Z'_Q'PS'OSOY.VYZ/RZr.Vrs(Usz.Vz{/k{!P.V!P!Q,g!Q#O.V#O#P(U#P~.VU/[T'_Q'PS'OSOz(Uz{(l{!P(U!P!Q'c!Q~(UU/pZ'_QOY-_YZ0cZr-_rs'rsz-_z{/k{!P-_!P!Q+|!Q#O-_#O#P'r#P~-_U0hT'_QOz(Uz{(l{!P(U!P!Q'c!Q~(UU1OT'_Q'PSOY+|YZ,bZr+|s#O+|#P~+|_1hZ'_Q&|X'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_2dT'_Q&|X'OSOz%xz{&^{!P%x!P!Q'S!Q~%x_2|]ZX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!_$h!_!`3u!`#O$h#O#P%x#P~$h_4OZ#PX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_4zT']Q'OS'^XOz%xz{&^{!P%x!P!Q'S!Q~%x_5dZ'QX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_6`g'_Q'vW'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!c$h!c!}7w!}#O$h#O#P%x#P#R$h#R#S7w#S#T$h#T#o7w#o${$h${$|7w$|4w$h4w5b7w5b5i$h5i6S7w6S~$h_8Qh'_Q_X'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q![7w![!c$h!c!}7w!}#O$h#O#P%x#P#R$h#R#S7w#S#T$h#T#o7w#o${$h${$|7w$|4w$h4w5b7w5b5i$h5i6S7w6S~$h_9u](TP'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!_$h!_!`:n!`#O$h#O#P%x#P~$h_:wZ#OX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_;s_!qX'_Q'OSOY$hYZ%bZr$hrs%xsv$hvw<rwz$hz{)Q{!P$h!P!Q*p!Q!_$h!_!`:n!`#O$h#O#P%x#P~$h_<{Z'}X'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_=ui'_Q'OSOY?dYZA`Zr?drsBdsw?dwx@dxz?dz{CO{!P?d!P!QDv!Q!c?d!c!}Et!}#O?d#O#PId#P#R?d#R#SEt#S#T?d#T#oEt#o${?d${$|Et$|4w?d4w5bEt5b5i?d5i6SEt6S~?d_?k]'_Q'OSOY$hYZ%bZr$hrs%xsw$hwx@dxz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_@mZ'_Q'OSsXOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_AgV'_Q'OSOw%xwxA|xz%xz{&^{!P%x!P!Q'S!Q~%x]BTT'OSsXOz%xz{&^{!P%x!P!Q'S!Q~%x]BiV'OSOw%xwxA|xz%xz{&^{!P%x!P!Q'S!Q~%x_CT]'_QOY)xYZ+hZr)xrs&psw)xwxC|xz)xz{)Q{!P)x!P!Q0w!Q#O)x#O#P&p#P~)x_DTZ'_QsXOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_D{]'_QOY)xYZ+hZr)xrs&psw)xwxC|xz)xz{+|{!P)x!P!Q,g!Q#O)x#O#P&p#P~)x_E}j'_Q'OS'ZXOY$hYZ%bZr$hrs%xsw$hwx@dxz$hz{)Q{!P$h!P!Q*p!Q![Go![!c$h!c!}Go!}#O$h#O#P%x#P#R$h#R#SGo#S#T$h#T#oGo#o${$h${$|Go$|4w$h4w5bGo5b5i$h5i6SGo6S~$h_Gxh'_Q'OS'ZXOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q![Go![!c$h!c!}Go!}#O$h#O#P%x#P#R$h#R#SGo#S#T$h#T#oGo#o${$h${$|Go$|4w$h4w5bGo5b5i$h5i6SGo6S~$h]IiX'OSOzBdz{JU{!PBd!P!QKS!Q#iBd#i#jKi#j#lBd#l#mMX#m~Bd]JXVOw&pwxJnxz&pz{&^{!P&p!P!Q({!Q~&p]JsTsXOz%xz{&^{!P%x!P!Q'S!Q~%x]KVUOw&pwxJnxz&p{!P&p!P!Q'c!Q~&p]Kn['OSOz%xz{&^{!P%x!P!Q'S!Q![Ld![!c%x!c!iLd!i#T%x#T#ZLd#Z#o%x#o#pNq#p~%x]LiY'OSOz%xz{&^{!P%x!P!Q'S!Q![MX![!c%x!c!iMX!i#T%x#T#ZMX#Z~%x]M^Y'OSOz%xz{&^{!P%x!P!Q'S!Q![M|![!c%x!c!iM|!i#T%x#T#ZM|#Z~%x]NRY'OSOz%xz{&^{!P%x!P!Q'S!Q![Bd![!c%x!c!iBd!i#T%x#T#ZBd#Z~%x]NvY'OSOz%xz{&^{!P%x!P!Q'S!Q![! f![!c%x!c!i! f!i#T%x#T#Z! f#Z~%x]! k['OSOz%xz{&^{!P%x!P!Q'S!Q![! f![!c%x!c!i! f!i#T%x#T#Z! f#Z#q%x#q#rBd#r~%x_!!jZ}X'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_!#fZ!PX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_!$`](QX'_QOY)xYZ+hZr)xrs&psz)xz{)Q{!P)x!P!Q0w!Q!_)x!_!`!%X!`#O)x#O#P&p#P~)x_!%`Z#OX'_QOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_!&[](PX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!_$h!_!`:n!`#O$h#O#P%x#P~$h_!'^Z!eX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_!(Y^'gX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!_$h!_!`:n!`!a!)U!a#O$h#O#P%x#P~$h_!)_Z#QX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_!*Z[(OX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!O$h!O!P!+P!P!Q*p!Q#O$h#O#P%x#P~$h_!+Y^!lX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!O$h!O!P!,U!P!Q*p!Q!_$h!_!`!-Q!`#O$h#O#P%x#P~$h_!,_Z!tX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$hV!-ZZ'qP'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_!.T]'_Q'xXOY)xYZ+hZr)xrs&psz)xz{!.|{!P)x!P!Q!/d!Q!_)x!_!`!%X!`#O)x#O#P&p#P~)x_!/TT&}]'_QOY+|YZ,bZr+|s#O+|#P~+|_!/kZ'_QUXOY!0^YZ0cZr!0^rs!3`sz!0^z{!5k{!P!0^!P!Q!/d!Q#O!0^#O#P!3`#P~!0^_!0eZ'_QUXOY!1WYZ/RZr!1Wrs!2Usz!1Wz{!4q{!P!1W!P!Q!/d!Q#O!1W#O#P!2U#P~!1W_!1cZ'_QUX'PS'OSOY!1WYZ/RZr!1Wrs!2Usz!1Wz{!4q{!P!1W!P!Q!/d!Q#O!1W#O#P!2U#P~!1W]!2_VUX'PS'OSOY!2UYZ(UZz!2Uz{!2t{!P!2U!P!Q!3z!Q~!2U]!2yVUXOY!3`YZ'rZz!3`z{!2t{!P!3`!P!Q!4f!Q~!3`]!3eVUXOY!2UYZ(UZz!2Uz{!2t{!P!2U!P!Q!3z!Q~!2U]!4PVUXOY!3`YZ'rZz!3`z{!4f{!P!3`!P!Q!3z!Q~!3`X!4kQUXOY!4fZ~!4f_!4xZ'_QUXOY!0^YZ0cZr!0^rs!3`sz!0^z{!4q{!P!0^!P!Q!5k!Q#O!0^#O#P!3`#P~!0^Z!5rV'_QUXOY!5kYZ,bZr!5krs!4fs#O!5k#O#P!4f#P~!5k_!6bhuX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q![!7|![#O$h#O#P%x#P#R$h#R#S!7|#S#U$h#U#V!By#V#]$h#]#^!9_#^#c$h#c#d!Ee#d#i$h#i#j!9_#j#l$h#l#m!Gy#m~$h_!8VbuX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q![!7|![#O$h#O#P%x#P#R$h#R#S!7|#S#]$h#]#^!9_#^#i$h#i#j!9_#j~$h_!9fe'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!R$h!R!S!:w!S!T$h!T!U!=y!U!W$h!W!X!>y!X!Y$h!Y!Z!<}!Z#O$h#O#P%x#P#g$h#g#h!?y#h~$h_!;O_'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!S$h!S!T!;}!T!W$h!W!X!<}!X#O$h#O#P%x#P~$h_!<U]'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!Y$h!Y!Z!<}!Z#O$h#O#P%x#P~$h_!=WZuX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_!>Q]'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!S$h!S!T!<}!T#O$h#O#P%x#P~$h_!?Q]'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!U$h!U!V!<}!V#O$h#O#P%x#P~$h_!@Q]'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P#]$h#]#^!@y#^~$h_!AQ]'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P#n$h#n#o!Ay#o~$h_!BQ]'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P#X$h#X#Y!<}#Y~$h_!CQ_'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!R!DP!R!S!DP!S#O$h#O#P%x#P#R$h#R#S!DP#S~$h_!DYcuX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!R!DP!R!S!DP!S#O$h#O#P%x#P#R$h#R#S!DP#S#]$h#]#^!9_#^#i$h#i#j!9_#j~$h_!El^'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!Y!Fh!Y#O$h#O#P%x#P#R$h#R#S!Fh#S~$h_!FqbuX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!Y!Fh!Y#O$h#O#P%x#P#R$h#R#S!Fh#S#]$h#]#^!9_#^#i$h#i#j!9_#j~$h_!HQb'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q![!IY![!c$h!c!i!IY!i#O$h#O#P%x#P#R$h#R#S!IY#S#T$h#T#Z!IY#Z~$h_!IcfuX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q![!IY![!c$h!c!i!IY!i#O$h#O#P%x#P#R$h#R#S!IY#S#T$h#T#Z!IY#Z#]$h#]#^!9_#^#i$h#i#j!9_#j~$h_!KQ]!SX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q![$h![!]!Ky!]#O$h#O#P%x#P~$h_!LSZdX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_!MOZyX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_!Mz^#PX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!^$h!^!_!Nv!_!`3u!`#O$h#O#P%x#P~$h_# P]'yX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!_$h!_!`:n!`#O$h#O#P%x#P~$h_#!R^oX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!_$h!_!`3u!`!a#!}!a#O$h#O#P%x#P~$h_##WZ#RX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_#$S^#PX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!_$h!_!`3u!`!a#%O!a#O$h#O#P%x#P~$h_#%X]'zX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!_$h!_!`:n!`#O$h#O#P%x#P~$h_#&ZZ(RX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$hV#'VZ'pP'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_#(Th'_Q'OS!yW'TPOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q![#'x![!c$h!c!}#'x!}#O$h#O#P%x#P#R$h#R#S#'x#S#T$h#T#o#'x#o${$h${$|#'x$|4w$h4w5b#'x5b5i$h5i6S#'x6S~$h_#)xZ[X'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$hU#*pX'OSOz#+]z{#+s{!P#+]!P!Q#,X!Q#i#+]#i#j#,j#j#l#+]#l#m#.Y#m~#+]U#+dTrQ'OSOz%xz{&^{!P%x!P!Q'S!Q~%xU#+xTrQOz&pz{&^{!P&p!P!Q({!Q~&pU#,^SrQOz&p{!P&p!P!Q'c!Q~&pU#,o['OSOz%xz{&^{!P%x!P!Q'S!Q![#-e![!c%x!c!i#-e!i#T%x#T#Z#-e#Z#o%x#o#p#/r#p~%xU#-jY'OSOz%xz{&^{!P%x!P!Q'S!Q![#.Y![!c%x!c!i#.Y!i#T%x#T#Z#.Y#Z~%xU#._Y'OSOz%xz{&^{!P%x!P!Q'S!Q![#.}![!c%x!c!i#.}!i#T%x#T#Z#.}#Z~%xU#/SY'OSOz%xz{&^{!P%x!P!Q'S!Q![#+]![!c%x!c!i#+]!i#T%x#T#Z#+]#Z~%xU#/wY'OSOz%xz{&^{!P%x!P!Q'S!Q![#0g![!c%x!c!i#0g!i#T%x#T#Z#0g#Z~%xU#0l['OSOz%xz{&^{!P%x!P!Q'S!Q![#0g![!c%x!c!i#0g!i#T%x#T#Z#0g#Z#q%x#q#r#+]#r~%x_#1kZXX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_#2g]'{X'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!_$h!_!`:n!`#O$h#O#P%x#P~$h_#3kj'_Q'OS!yW'TPOY$hYZ%bZr$hrs#5]sw$hwx#5sxz$hz{)Q{!P$h!P!Q*p!Q![#'x![!c$h!c!}#'x!}#O$h#O#P%x#P#R$h#R#S#'x#S#T$h#T#o#'x#o${$h${$|#'x$|4w$h4w5b#'x5b5i$h5i6S#'x6S~$h]#5dT'OS'^XOz%xz{&^{!P%x!P!Q'S!Q~%x_#5z]'_Q'OSOY?dYZA`Zr?drsBdsw?dwx@dxz?dz{CO{!P?d!P!QDv!Q#O?d#O#PId#P~?d_#7Oi'_Q'OS!yW'TPOY$hYZ%bZr$hrs%xst#8mtz$hz{)Q{!P$h!P!Q*p!Q![#'x![!c$h!c!}#'x!}#O$h#O#P%x#P#R$h#R#S#'x#S#T$h#T#o#'x#o${$h${$|#'x$|4w$h4w5b#'x5b5i$h5i6S#'x6S~$hV#8tg'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!c$h!c!}#:]!}#O$h#O#P%x#P#R$h#R#S#:]#S#T$h#T#o#:]#o${$h${$|#:]$|4w$h4w5b#:]5b5i$h5i6S#:]6S~$hV#:fh'_Q'OS'TPOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q![#:]![!c$h!c!}#:]!}#O$h#O#P%x#P#R$h#R#S#:]#S#T$h#T#o#:]#o${$h${$|#:]$|4w$h4w5b#:]5b5i$h5i6S#:]6S~$h_#<ZZwX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_#=V_'rX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q!_$h!_!`:n!`#O$h#O#P%x#P#p$h#p#q#>U#q~$h_#>_Z'|X'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h_#?ZZvX'_Q'OSOY$hYZ%bZr$hrs%xsz$hz{)Q{!P$h!P!Q*p!Q#O$h#O#P%x#P~$h",
     tokenizers: [closureParam, tpDelim, literalTokens, 0, 1, 2, 3],
     topRules: {"SourceFile":[0,8]},
     specialized: [{term: 281, get: value => spec_identifier$1[value] || -1}],
     tokenPrec: 15596
   });

   /**
   A syntax provider based on the [Lezer Rust
   parser](https://github.com/lezer-parser/rust), extended with
   highlighting and indentation information.
   */
   const rustLanguage = /*@__PURE__*/LRLanguage.define({
       name: "rust",
       parser: /*@__PURE__*/parser$5.configure({
           props: [
               /*@__PURE__*/indentNodeProp.add({
                   IfExpression: /*@__PURE__*/continuedIndent({ except: /^\s*({|else\b)/ }),
                   "String BlockComment": () => null,
                   "AttributeItem": cx => cx.continue(),
                   "Statement MatchArm": /*@__PURE__*/continuedIndent()
               }),
               /*@__PURE__*/foldNodeProp.add(type => {
                   if (/(Block|edTokens|List)$/.test(type.name))
                       return foldInside;
                   if (type.name == "BlockComment")
                       return tree => ({ from: tree.from + 2, to: tree.to - 2 });
                   return undefined;
               })
           ]
       }),
       languageData: {
           commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
           indentOnInput: /^\s*(?:\{|\})$/,
           closeBrackets: { stringPrefixes: ["b", "r", "br"] }
       }
   });
   /**
   Rust language support
   */
   function rust() {
       return new LanguageSupport(rustLanguage);
   }

   var index$5 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      rust: rust,
      rustLanguage: rustLanguage
   });

   // This file was generated by lezer-generator. You probably shouldn't edit it.
   const indent$2 = 146,
     dedent$2 = 147,
     descendantOp = 148,
     InterpolationEnd = 1,
     InterpolationContinue = 2,
     Unit = 3,
     callee = 149,
     identifier$2 = 150,
     VariableName = 4,
     InterpolationStart = 5,
     newline = 151,
     blankLineStart = 152,
     eof = 153,
     whitespace$1 = 154,
     LineComment = 6,
     Comment = 7,
     IndentedMixin = 8,
     IndentedInclude = 9,
     Dialect_indented = 0;

   /* Hand-written tokenizers for CSS tokens that can't be
      expressed by Lezer's built-in tokenizer. */

   const space = [9, 10, 11, 12, 13, 32, 133, 160, 5760, 8192, 8193, 8194, 8195, 8196, 8197,
                  8198, 8199, 8200, 8201, 8202, 8232, 8233, 8239, 8287, 12288];
   const colon = 58, parenL = 40, underscore = 95, bracketL = 91, dash = 45, period = 46,
         hash = 35, percent = 37, braceL = 123, braceR = 125, slash = 47, asterisk$2 = 42,
         newlineChar = 10, equals = 61, plus = 43;

   function isAlpha(ch) { return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122 || ch >= 161 }

   function isDigit$1(ch) { return ch >= 48 && ch <= 57 }

   function startOfComment(input) {
     let next;
     return input.next == slash && ((next = input.peek(1)) == slash || next == asterisk$2)
   }

   const spaces = new ExternalTokenizer((input, stack) => {
     if (stack.dialectEnabled(Dialect_indented)) {
       let prev;
       if (input.next < 0 && stack.canShift(eof)) {
         input.acceptToken(eof);
       } else if (((prev = input.peek(-1)) == newlineChar || prev < 0) && stack.canShift(blankLineStart)) {
         let spaces = 0;
         while (input.next != newlineChar && space.includes(input.next)) { input.advance(); spaces++; }
         if (input.next == newlineChar || startOfComment(input))
           input.acceptToken(blankLineStart, -spaces);
         else if (spaces)
           input.acceptToken(whitespace$1);
       } else if (input.next == newlineChar) {
         input.acceptToken(newline, 1);
       } else if (space.includes(input.next)) {
         input.advance();
         while (input.next != newlineChar && space.includes(input.next)) input.advance();
         input.acceptToken(whitespace$1);
       }
     } else {
       let length = 0;
       while (space.includes(input.next)) {
         input.advance();
         length++;
       }
       if (length) input.acceptToken(whitespace$1);
     }
   }, {contextual: true});

   const comments = new ExternalTokenizer((input, stack) => {
     if (!startOfComment(input)) return
     input.advance();
     if (stack.dialectEnabled(Dialect_indented)) {
       let indentedComment = -1;
       for (let off = 1;; off++) {
         let prev = input.peek(-off - 1);
         if (prev == newlineChar || prev < 0) {
           indentedComment = off + 1;
           break
         } else if (!space.includes(prev)) {
           break
         }
       }
       if (indentedComment > -1) { // Weird indented-style comment
         let block = input.next == asterisk$2, end = 0;
         input.advance();
         while (input.next >= 0) {
           if (input.next == newlineChar) {
             input.advance();
             let indented = 0;
             while (input.next != newlineChar && space.includes(input.next)) {
               indented++;
               input.advance();
             }
             if (indented < indentedComment) {
               end = -indented - 1;
               break
             }
           } else if (block && input.next == asterisk$2 && input.peek(1) == slash) {
             end = 2;
             break
           } else {
             input.advance();
           }
         }
         input.acceptToken(block ? Comment : LineComment, end);
         return
       }
     }
     if (input.next == slash) {
       while (input.next != newlineChar && input.next >= 0) input.advance();
       input.acceptToken(LineComment);
     } else {
       input.advance();
       while (input.next >= 0) {
         let {next} = input;
         input.advance();
         if (next == asterisk$2 && input.next == slash) {
           input.advance();
           break
         }
       }
       input.acceptToken(Comment);
     }
   });

   const indentedMixins = new ExternalTokenizer((input, stack) => {
     if ((input.next == plus || input.next == equals) && stack.dialectEnabled(Dialect_indented))
       input.acceptToken(input.next == equals ? IndentedMixin : IndentedInclude, 1);
   });

   const indentation = new ExternalTokenizer((input, stack) => {
     if (!stack.dialectEnabled(Dialect_indented)) return
     let cDepth = stack.context.depth;
     if (input.next < 0 && cDepth) {
       input.acceptToken(dedent$2);
       return
     }
     let prev = input.peek(-1);
     if (prev == newlineChar) {
       let depth = 0;
       while (input.next != newlineChar && space.includes(input.next)) {
         input.advance();
         depth++;
       }
       if (depth != cDepth &&
           input.next != newlineChar && !startOfComment(input)) {
         if (depth < cDepth) input.acceptToken(dedent$2, -depth);
         else input.acceptToken(indent$2);
       }
     }
   });

   const identifiers$9 = new ExternalTokenizer((input, stack) => {
     for (let inside = false, dashes = 0, i = 0;; i++) {
       let {next} = input;
       if (isAlpha(next) || next == dash || next == underscore || (inside && isDigit$1(next))) {
         if (!inside && (next != dash || i > 0)) inside = true;
         if (dashes === i && next == dash) dashes++;
         input.advance();
       } else if (next == hash && input.peek(1) == braceL) {
         input.acceptToken(InterpolationStart, 2);
         break
       } else {
         if (inside)
           input.acceptToken(next == parenL ? callee : dashes == 2 && stack.canShift(VariableName) ? VariableName : identifier$2);
         break
       }
     }
   });

   const interpolationEnd = new ExternalTokenizer(input => {
     if (input.next == braceR) {
       input.advance();
       while (isAlpha(input.next) || input.next == dash || input.next == underscore || isDigit$1(input.next))
         input.advance();
       if (input.next == hash && input.peek(1) == braceL)
         input.acceptToken(InterpolationContinue, 2);
       else
         input.acceptToken(InterpolationEnd);
     }
   });

   const descendant = new ExternalTokenizer(input => {
     if (space.includes(input.peek(-1))) {
       let {next} = input;
       if (isAlpha(next) || next == underscore || next == hash || next == period ||
           next == bracketL || next == colon || next == dash)
         input.acceptToken(descendantOp);
     }
   });

   const unitToken = new ExternalTokenizer(input => {
     if (!space.includes(input.peek(-1))) {
       let {next} = input;
       if (next == percent) { input.advance(); input.acceptToken(Unit); }
       if (isAlpha(next)) {
         do { input.advance(); } while (isAlpha(input.next))
         input.acceptToken(Unit);
       }
     }
   });

   function IndentLevel(parent, depth) {
     this.parent = parent;
     this.depth = depth;
     this.hash = (parent ? parent.hash + parent.hash << 8 : 0) + depth + (depth << 4);
   }

   const topIndent = new IndentLevel(null, 0);

   const trackIndent = new ContextTracker({
     start: topIndent,
     shift(context, term, stack, input) {
       if (term == indent$2) return new IndentLevel(context, stack.pos - input.pos)
       if (term == dedent$2) return context.parent
       return context
     },
     hash(context) { return context.hash }
   });

   const cssHighlighting = styleTags({
     "AtKeyword import charset namespace keyframes media supports include mixin use forward extend at-root": tags$1.definitionKeyword,
     "Keyword selector": tags$1.keyword,
     "ControlKeyword": tags$1.controlKeyword,
     NamespaceName: tags$1.namespace,
     KeyframeName: tags$1.labelName,
     TagName: tags$1.tagName,
     ClassName: tags$1.className,
     PseudoClassName: tags$1.constant(tags$1.className),
     IdName: tags$1.labelName,
     "FeatureName PropertyName": tags$1.propertyName,
     AttributeName: tags$1.attributeName,
     NumberLiteral: tags$1.number,
     KeywordQuery: tags$1.keyword,
     UnaryQueryOp: tags$1.operatorKeyword,
     "CallTag ValueName": tags$1.atom,
     VariableName: tags$1.variableName,
     SassVariableName: tags$1.special(tags$1.variableName),
     Callee: tags$1.operatorKeyword,
     Unit: tags$1.unit,
     "UniversalSelector NestingSelector IndentedMixin IndentedInclude": tags$1.definitionOperator,
     MatchOp: tags$1.compareOperator,
     "ChildOp SiblingOp, LogicOp": tags$1.logicOperator,
     BinOp: tags$1.arithmeticOperator,
     "Important Global Default": tags$1.modifier,
     Comment: tags$1.blockComment,
     LineComment: tags$1.lineComment,
     ParenthesizedContent: tags$1.special(tags$1.name),
     ColorLiteral: tags$1.color,
     StringLiteral: tags$1.string,
     "InterpolationStart InterpolationContinue InterpolationEnd": tags$1.meta,
     ": \"...\"": tags$1.punctuation,
     "PseudoOp #": tags$1.derefOperator,
     "; ,": tags$1.separator,
     "( )": tags$1.paren,
     "[ ]": tags$1.squareBracket,
     "{ }": tags$1.brace
   });

   // This file was generated by lezer-generator. You probably shouldn't edit it.
   const spec_identifier = {__proto__:null,not:58, only:58, using:169, with:179, without:179, hide:193, show:193, from:216, to:218, if:231, through:237, in:243};
   const spec_callee = {__proto__:null,url:76, "url-prefix":76, domain:76, regexp:76, lang:90, "nth-child":90, "nth-last-child":90, "nth-of-type":90, "nth-last-of-type":90, dir:90, "host-context":90, selector:162};
   const spec_AtKeyword = {__proto__:null,"@import":146, "@include":166, "@mixin":172, "@function":172, "@use":176, "@extend":182, "@at-root":186, "@forward":190, "@media":196, "@charset":200, "@namespace":204, "@keyframes":210, "@supports":222, "@if":226, "@else":228, "@for":234, "@each":240, "@while":246, "@debug":250, "@warn":250, "@error":250, "@return":250};
   const parser$4 = LRParser.deserialize({
     version: 14,
     states: "HzQ`Q+tOOO#cQ+tOOP#jOpOOO#oQ(pO'#CjOOQ#U'#Ci'#CiO$gQ.jO'#ClO%_Q#dO'#DUO&UQ(pO'#CgO&]Q)OO'#DWO&hQ#dO'#D_O&mQ#dO'#DcOOQ#U'#Fp'#FpO&rQ(pO'#FpO'jQ(nO'#DnO$gQ.jO'#DuO$gQ.jO'#EQO$gQ.jO'#ETO$gQ.jO'#EVO'oQ)OO'#EYO(^Q)OO'#E[O$gQ.jO'#E^O(kQ)OO'#EaO$gQ.jO'#EcO)VQ)OO'#EeO)bQ#dO'#EhO)gQ)OO'#EnO){Q)OO'#FOOOQ&Z'#Fo'#FoOOQ&Y'#FR'#FRO*VQ(nO'#FRQ`Q+tOOO$gQ.jO'#EpO*bQ(nO'#EtO*gQ)OO'#EwO$gQ.jO'#EzO$gQ.jO'#E|OOQ&Z'#FY'#FYO*oQ+uO'#FwO*|Q(oO'#FwQOQ#SOOP+bO#SO'#FnPOOO)CAc)CAcOOQ#i'#Cn'#CnO$gQ.jO'#CqO+pQ.wO'#CsO.YQ.^O,59WO$gQ.jO'#CxOOQ#S'#C|'#C|O.kQ(nO'#DROOQ#i'#Fq'#FqO.pQ(nO'#C{OOQ#U'#DV'#DVOOQ#U,59p,59pO%_Q#dO,59pO.uQ)OO,59rO&hQ#dO,59yO&mQ#dO,59}O'oQ)OO,5:RO'oQ)OO,5:TO'oQ)OO,5:UO'oQ)OO'#FXO/QQ(nO,59RO/]Q+tO'#DlO/dQ#TO'#DlOOQ&Z,59R,59ROOQ#U'#DY'#DYOOQ#S'#D]'#D]OOQ#U,59r,59rO/iQ(nO,59rO/nQ(nO,59rOOQ#U'#Da'#DaOOQ#U,59y,59yOOQ#S'#De'#DeO/sQ9`O,59}O/{Q.jO,5:YO0VQ.jO,5:aO1OQ.jO,5:lO1]Q.YO,5:oO1nQ.jO,5:qOOQ#U'#Cj'#CjO2dQ(pO,5:tO2qQ(pO,5:vOOQ&Z,5:v,5:vO2xQ)OO,5:vO2}Q.jO,5:xOOQ#S'#Dx'#DxO3jQ)OO'#D}O3qQ(nO'#FyO)gQ)OO'#D|O4VQ(nO'#EOOOQ#S'#Fz'#FzO/TQ(nO,5:{O1qQ.YO,5:}OOQ#d'#Eg'#EgO*VQ(nO,5;PO4[Q)OO,5;POOQ#S'#Ej'#EjO4dQ(nO,5;SO4iQ(nO,5;YO4tQ(nO,5;jOOQ&Z'#Fx'#FxOOQ&Y,5;m,5;mOOQ&Y-E9P-E9PO1]Q.YO,5;[O5SQ)OO,5;`O5XQ)OO'#F|O5aQ)OO,5;cO1]Q.YO,5;fO1qQ.YO,5;hOOQ&Z-E9W-E9WO5fQ(oO,5<cO5zQ+uO'#F[O5fQ(oO,5<cPOO#S'#FQ'#FQP6bO#SO,5<YPOOO,5<Y,5<YO6pQ.YO,59]OOQ#i,59_,59_O$gQ.jO,59aO$gQ.jO,59fO$gQ.jO'#FUO7OQ#WO1G.rOOQ#k1G.r1G.rO7WQ.oO,59dO9mQ! lO,59mO:jQ.jO'#C}OOQ#i,59g,59gOOQ#U1G/[1G/[OOQ#U1G/^1G/^O/iQ(nO1G/^O/nQ(nO1G/^OOQ#U1G/e1G/eO:tQ9`O1G/iO;_Q(pO1G/mO<RQ(pO1G/oO<uQ(pO1G/pO=iQ(pO,5;sOOQ#S-E9V-E9VOOQ&Z1G.m1G.mO=vQ(nO,5:WO={Q+uO,5:WO>SQ)OO'#D^O>ZQ.jO'#D[OOQ#U1G/i1G/iO$gQ.jO1G/iO>bQ.kO1G/tOOQ#T1G/t1G/tO*VQ(nO1G/{O?_Q+uO'#FxOOQ&Z1G0W1G0WO.pQ(nO1G0WOOQ&Z1G0Z1G0ZOOQ&Z1G0]1G0]O.pQ(nO1G0]OOQ&Z1G0`1G0`OOQ&Z1G0b1G0bOAwQ)OO1G0bOA|Q(nO1G0bOBRQ)OO1G0dOOQ&Z1G0d1G0dOBaQ.jO'#F^OBqQ(nO'#DxOB|Q(nO,5:eOCRQ(nO,5:iO)gQ)OO,5:gOCZQ)OO'#F]OCnQ(nO,5<eODPQ(nO,5:hO'oQ)OO,5:jOOQ&Z1G0g1G0gOOQ&Z1G0i1G0iOOQ&Z1G0k1G0kO*VQ(nO1G0kODhQ)OO'#EkOOQ&Z1G0n1G0nOOQ&Z1G0t1G0tOOQ&Z1G1U1G1UODvQ+uO1G0vO$gQ.jO1G0zOG`Q)OO'#FbOGkQ)OO,5<hO$gQ.jO1G0}OOQ&Z1G1Q1G1QOOQ&Z1G1S1G1SOGsQ(oO1G1}OHXQ+uO,5;vOOQ#T,5;v,5;vOOQ#T-E9Y-E9YPOO#S-E9O-E9OPOOO1G1t1G1tOOQ#i1G.w1G.wOHoQ.oO1G.{OOQ#i1G/Q1G/QOKUQ.^O,5;pOOQ#W-E9S-E9SOOQ#k7+$^7+$^OKgQ(nO1G/XOKlQ.jO'#FSOLvQ.jO'#FtON_Q.jO'#FqONfQ(nO,59iOOQ#U7+$x7+$xOOQ#U7+%T7+%TO$gQ.jO7+%TOOQ&Z1G/r1G/rONkQ#TO1G/rONpQ(pO'#FvONzQ(nO,59xO! PQ.jO'#FuO! ZQ(nO,59vO! `Q.YO7+%TO! nQ.kO'#FZO$gQ.jO'#FZO!#_Q.kO7+%`OOQ#T7+%`7+%`OOQ&Z7+%g7+%gO4tQ(nO7+%rO*VQ(nO7+%wO!$RQ(nO7+%|O)gQ)OO7+%|OOQ#d-E9[-E9[OOQ&Z7+&O7+&OO!$WQ.jO'#F{OOQ#d,5;x,5;xO$gQ.jO1G0POOQ#S1G0T1G0TOOQ#S1G0R1G0RO!$rQ(nO,5;wOOQ#S-E9Z-E9ZO!%WQ(pO1G0UOOQ&Z7+&V7+&VO!%_Q(vO'#CsO/TQ(nO'#F`O!%jQ)OO,5;VOOQ&Z,5;V,5;VO!%xQ+uO7+&bO!(bQ)OO7+&bO!(mQ.jO7+&fOOQ#d,5;|,5;|OOQ#d-E9`-E9`O1]Q.YO7+&iOOQ#T1G1b1G1bOOQ#i7+$s7+$sOOQ#d-E9Q-E9QO!)OQ.jO'#FTO!)]Q(nO,5<`O!)]Q(nO,5<`O$gQ.jO,5<`OOQ#i1G/T1G/TO!)eQ.YO<<HoOOQ&Z7+%^7+%^O!)sQ)OO'#FWO!)}Q(nO,5<bOOQ#U1G/d1G/dO!*VQ.jO'#FVO!*aQ(nO,5<aOOQ#U1G/b1G/bOOQ#U<<Ho<<HoO!*iQ.kO,5;uOOQ#e-E9X-E9XOOQ#T<<Hz<<HzOOQ&Z<<I^<<I^OOQ&Z<<Ic<<IcO)gQ)OO<<IhO!,YQ(nO<<IhO!,bQ.jO'#F_O!,uQ)OO,5<gO!-WQ.jO7+%kOOQ#S7+%p7+%pOOQ#d,5;z,5;zOOQ#d-E9^-E9^OOQ&Z1G0q1G0qOOQ&Z-E9_-E9_O!(bQ)OO<<I|O$gQ.jO,5;{OOQ&Z<<I|<<I|O$gQ.jO<<JQOOQ&Z<<JT<<JTO!-_Q.jO,5;oO!-lQ.jO,5;oOOQ#S-E9R-E9RO!-sQ(nO1G1zO!-{Q.jO1G1zOOQ#UAN>ZAN>ZO!.VQ(pO,5;rOOQ#S-E9U-E9UO!.aQ.jO,5;qOOQ#S-E9T-E9TO!.kQ(nOAN?SO/TQ(nOAN?SO!.sQ.jO,5;yOOQ#d-E9]-E9]OOQ#S<<IV<<IVP!/_Q)OO'#FaOOQ&ZAN?hAN?hO1]Q.YO1G1gO1]Q.YOAN?lOOQ#S1G1Z1G1ZO$gQ.jO1G1ZO!/dQ(nO7+'fO/TQ(nOG24nOOQ&ZG24nG24nOOQ&Z7+'R7+'ROOQ&ZG25WG25WO!/lQ.jO7+&uOOQ&ZLD*YLD*Y",
     stateData: "!/|~O$`OSVOSUOS$^QQ~OS]OTTOW`OX_O[ZO_ZOa]OrWO{WO!SXO!WYO!jjO!k^O!u_O!x`O!zaO!}bO#PcO#RdO#UeO#WfO#YgO#]hO#ciO#eoO#ipO#lqO#orO#qsO$[RO$gUO~O$V$kP~P`O$^xO~Or^Xr!cXt^X{^X!S^X!W^X![^X!_^X!a^X$Y^X$]^X$g^X~OS!ROTTO_!ROa!ROd{Of!ROh!ROm!OOv!QO$Z!PO$[zO$f|O~O$[!TO~Or!WO{!WO!S!XO!W!YO![!ZO!_!]O!a!`O$Y![O$]!aO$g!VO~Ot!^O~P%dO}!gO$Z!dO$[!cO~O$[!hO~O$[!jO~Or!lOr$dXt$dX{$dX!S$dX!W$dX![$dX!_$dX!a$dX$Y$dX$]$dX$g$dX~Or!lO~OTTO[ZO_ZOrWO{WO!SXO!WYO$[!qO$gUO~Od!uO!a!`O$]!aO~P'oOTTOa!|Od!xOm!zO!s!{O$[!wO!a$mP$]$mP~Oh#QOv!QO$[#PO~O$[#SO~OTTOa!|Od!xOm!zO!s!{O$[!wO~O!g$mP$_$mP~P(kO!g#WO$]#WO$_#WO~Oa#[O~Oa#]O#m$pP~O$V$kX!h$kX$X$kX~P`O!g#WO$]#WO$_#WO$V$kX!h$kX$X$kX~OU#eOV#eO$]#gO$`#eO~OR#iOPgXQgXjgXkgX$ggXTgXagXdgXmgX!ggX!sgX$[gX$]gX$_gX!agX!vgX!{gX#SgXcgXSgX_gXfgXhgXtgXvgX!dgX!egX!fgX$ZgX$fgX$VgXsgX!UgX#agX#jgX!hgX$XgX~OP#nOQ#lOj#jOk#jO$g#kO~Od#pO~Od#qO~O}#vO$Z!dO$[!cO~Ot!^O!a!`O$]!aO~O!h$kP~P`O$W$QO~Od$RO~Od$SO~O!U$TO!Y$UO~O!a!`O$]!aO~P$gOj#jOk#jO$g#kO!g$mP$]$mP$_$mP~P)gOj#jOk#jO!g#WO$_#WO$g#kO~O!a!`O!v$[O$]$YO~P0mOj#jOk#jO!a!`O$]!aO$g#kO~O!{$_O$]#WO~P0mOr!WO{!WO!S!XO!W!YO![!ZO!_!]O$Y![O$g!VO~O!g#WO$]#WO$_#WO~P1xOd$bO~P%dO!{$cO~O#S$fO$]#WO~P0mOTTOa!|Od!xOm!zO!s!{O~O$[$gO~P3XOk$jOt$kO!a$mX$]$mX!g$mX$_$mX~Od$nO~Oh$rOv!QO~O!a$sO~Ok$jO!a!`O$]!aO~O!a!`O!g#WO$]$YO$_#WO~O#`$xO~Ot$yO#m$pX~O#m${O~O!g#WO$]#WO$_#WO$V$ka!h$ka$X$ka~O!g$OX$V$OX$]$OX$_$OX!h$OX$X$OX~P`OU#eOV#eO$]%TO$`#eO~Oc%UOj#jOk#jO$g#kO~OP%ZOQ#lO~Oj#jOk#jO$g#kOPlaQlaTlaaladlamla!gla!sla$[la$]la$_la!ala!vla!{la#SlaclaSla_laflahlatlavla!dla!ela!fla$Zla$fla$Vlasla!Ula#ala#jla!hla$Xla~Oh%[Ow%[O~OS!ROTTO_!ROd{Of!ROh!ROm!OOv!QO$Z!PO$[zO$f|O~Oa%_Oc$hP~P9uO!U%bO!Y%cO~Or!WO{!WO!S!XO!W!YO$g!VO~Ot!Zi![!Zi!_!Zi!a!Zi$Y!Zi$]!Zi!g!Zi$_!Zid!Zic!Zi~P:|Ot!]i![!]i!_!]i!a!]i$Y!]i$]!]i!g!]i$_!]id!]ic!]i~P:|Ot!^i![!^i!_!^i!a!^i$Y!^i$]!^i!g!^i$_!^id!^ic!^i~P:|Ot#{a!a#{a$]#{a~P1xO!h%dO~O$X$kP~P`Oc$jP~P'oOc$iP~P$gOj#jOk#jOt%lO!d%nO!e%nO!f%nO$g#kO!g!bi$]!bi$_!bi$V!bi!h!bi$X!bi~P$gO$W$QOS$lXT$lXW$lXX$lX[$lX_$lXa$lXr$lX{$lX!S$lX!W$lX!j$lX!k$lX!u$lX!x$lX!z$lX!}$lX#P$lX#R$lX#U$lX#W$lX#Y$lX#]$lX#c$lX#e$lX#i$lX#l$lX#o$lX#q$lX$V$lX$[$lX$g$lX!h$lX!g$lX$]$lX$_$lX$X$lX~O!{%rO~Or%sO~O!g#WO#S$fO$]#WO$_#WO~O!g$oP#S$oP$]$oP$_$oP~P$gOc!lXk!lXr!nX~Or%xO~Oc%yOk$jO~Ot$PX!a$PX$]$PX!g$PX$_$PX~P)gOt$kO!a$ma$]$ma!g$ma$_$ma~Ok$jOt!pa!a!pa$]!pa!g!pa$_!pac!pa~O!h&SO#`&QO#a&QO$f&PO~O#f&UOS#diT#diW#diX#di[#di_#dia#dir#di{#di!S#di!W#di!j#di!k#di!u#di!x#di!z#di!}#di#P#di#R#di#U#di#W#di#Y#di#]#di#c#di#e#di#i#di#l#di#o#di#q#di$V#di$[#di$g#di!h#di!g#di$]#di$_#di$X#di~Oa&WOt$UX#m$UX~Ot$yO#m$pa~O!g#WO$]#WO$_#WO$V$ki!h$ki$X$ki~O!g$Oa$V$Oa$]$Oa$_$Oa!h$Oa$X$Oa~P`O$g#kOPiiQiijiikiiTiiaiidiimii!gii!sii$[ii$]ii$_ii!aii!vii!{ii#SiiciiSii_iifiihiitiivii!dii!eii!fii$Zii$fii$Viisii!Uii#aii#jii!hii$Xii~Oj#jOk#jO$g#kOP#xaQ#xa~Oc&[O~Oj#jOk#jO$g#kOS#vXT#vX_#vXa#vXc#vXd#vXf#vXh#vXm#vXs#vXt#vXv#vX$Z#vX$[#vX$f#vX~Os&`Ot&^Oc$hX~P$gOS$eXT$eX_$eXa$eXc$eXd$eXf$eXh$eXj$eXk$eXm$eXs$eXt$eXv$eX$Z$eX$[$eX$f$eX$g$eX~Or&aO~PMTOc&bO~O$X&dO~Ot&eOc$jX~P1xOc&gO~Ot&hOc$iX~P$gOc&jO~Oj#jOk#jO!U&kO$g#kO~Oj#jOk#jO$g#kOS#}XT#}X_#}Xa#}Xd#}Xf#}Xh#}Xm#}Xt#}Xv#}X!d#}X!e#}X!f#}X!g#}X$Z#}X$[#}X$]#}X$_#}X$f#}X$V#}X!h#}X$X#}X~Ot%lO!d&nO!e&nO!f&nO!g!bq$]!bq$_!bq$V!bq!h!bq$X!bq~P$gOr&qO~Oj#jOk#jOt&sO$g#kO!g$oX#S$oX$]$oX$_$oX~Ok$jOt$Pa!a$Pa$]$Pa!g$Pa$_$Pa~Oc&vO~P1xOR#iO!agX$]gX~O!h&yO#`&QO#a&QO$f&PO~O#f&{OS#dqT#dqW#dqX#dq[#dq_#dqa#dqr#dq{#dq!S#dq!W#dq!j#dq!k#dq!u#dq!x#dq!z#dq!}#dq#P#dq#R#dq#U#dq#W#dq#Y#dq#]#dq#c#dq#e#dq#i#dq#l#dq#o#dq#q#dq$V#dq$[#dq$g#dq!h#dq!g#dq$]#dq$_#dq$X#dq~O!a!`O#g&|O$]!aO~Oj#jOk#jO#a'OO#j'OO$g#kO~Oa'ROc#wXt#wX~P9uOt&^Oc$ha~Oj#jOk#jO!U'VO$g#kO~Oc#zXt#zX~P'oOt&eOc$ja~Oc#yXt#yX~P$gOt&hOc$ia~Oj#jOk#jO$g#kOS#}aT#}a_#}aa#}ad#}af#}ah#}am#}at#}av#}a!d#}a!e#}a!f#}a!g#}a$Z#}a$[#}a$]#}a$_#}a$f#}a$V#}a!h#}a$X#}a~Oc']Ok$jO~Ot$RX!g$RX#S$RX$]$RX$_$RX~P$gOt&sO!g$oa#S$oa$]$oa$_$oa~Oc'`O~P$gOs'eOc#wat#wa~P$gOr'fO~PMTOt&^Oc$hi~Ot&^Oc$hi~P$gOc#zat#za~P1xOc#yat#ya~P$gOc'hOk$jO~Oj#jOk#jO$g#kOt$Ra!g$Ra#S$Ra$]$Ra$_$Ra~O#g&|O~Ot&^Oc$hq~Oc#wqt#wq~P$gO$f$gj!_j~",
     goto: "7b$qPPPPPPPPPPP$rP$|%aP%tP'dPP'dP(aP'dPP'dP'd'd)b*_PPP*hPP$|+k$|P+qP+w+},T$|P,ZP$|P,aP$|P$|$|P,gP-x.[PPPPP$rPP'W'W.f'W'W'W'WP$rPP$rP$rPP$rP$rP$rPP$rP$rP$rP.i$rP.l.oPP$rP$rPPP$rPP$rPP$rP$rP$rP.r.x/O/n/|0S0Y0`0f0r0x1S1Y1`1f1l1rPPPPPPPPPPP1x1{2X3OPP5R5U5X5[5e6g6p7[7_akOPnu!`#c$Q%PsZOPbcnu!Z![!]!^!`#c$Q$R$n%P&esSOPbcnu!Z![!]!^!`#c$Q$R$n%P&ebZbc!Z![!]!^$R$n&e`[OPnu!`#c$Q%P!t!RT^_`adfors{!O!l#j#k#l#q$S$U$V$f$x${%^%c%h%l%m%x&^&a&h&s&u&|'O'Q'U'Y'f'le!|eij!m!x!z$j$k%s&q!u!RT^_`adfors{!O!l#j#k#l#q$S$U$V$f$x${%^%c%h%l%m%x&^&a&h&s&u&|'O'Q'U'Y'f'l!t!RT^_`adfors{!O!l#j#k#l#q$S$U$V$f$x${%^%c%h%l%m%x&^&a&h&s&u&|'O'Q'U'Y'f'lT&Q$s&R!u!ST^_`adfors{!O!l#j#k#l#q$S$U$V$f$x${%^%c%h%l%m%x&^&a&h&s&u&|'O'Q'U'Y'f'lQ#r!SQ%p$[R%q$_!t!RT^_`adfors{!O!l#j#k#l#q$S$U$V$f$x${%^%c%h%l%m%x&^&a&h&s&u&|'O'Q'U'Y'f'lQ#QgR$r#RQ!UUR#s!VQ!eWR#t!WQ#t!gR%a#vQ!fWR#u!WQ#t!fR%a#uQ!iXR#w!XQ!kYR#x!YQ!bVQ!tcQ$O!_Q$W!lQ$Z!nQ$]!oQ$a!sQ$o!}Q$u#UQ$v#VQ$w#ZQ$|#_Q&o%pQ&w&QQ&}&UQ'P&YQ'b&{Q'i']Q'j'cQ'k'dR'm'hSmOnUvP!`$QQ#buQ%Q#cR&Z%Pa]OPnu!`#c$Q%PR$h!xR#RgR#ThR$t#TQ#fxR%S#fQnOR#YnQ%^#qQ%h$S^&]%^%h&u'Q'U'Y'lQ&u%xQ'Q&^Q'U&aQ'Y&hR'l'fQ&_%^U'S&_'T'gQ'T&`R'g'UQ#m}R%Y#mQ&i%hR'Z&iQ&f%fR'X&fQ!_VR#}!_UuP!`$QS#au%PR%P#cQ%m$VR&m%mQ#dvQ%O#bT%R#d%OQ$l!yR%|$lQ$d!vR%t$dQ&t%vR'_&tQ&R$sR&x&RQ&T$wR&z&TQ$z#]R&X$zRyQSlOn]tPu!`#c$Q%P`VOPnu!`#c$Q%PQ!rbQ!scQ#y!ZQ#z![Q#{!]Q#|!^Q%f$RQ%}$nR'W&eQ}TQ!m^Q!n_Q!o`Q!paQ!vdQ#OfQ#ZoQ#_rQ#`sQ#h{Q#o!OQ$V!lQ%V#jQ%W#kQ%X#ll%]#q$S%^%h%x&^&a&h&u'Q'U'Y'f'lQ%j$US%k$V%mQ%v$fQ&V$xQ&Y${Q&c%cQ&l%lQ'^&sQ'c&|R'd'OR%`#qR%i$SR%g$RQwPQ$P!`R%e$QQ#XmW#cv#b#d%OQ$Z!nQ$^!pQ$`!rQ$e!vQ$p#OQ$q#QQ$v#VQ$}#`Q%o$XQ%u$dQ&O$rQ&o%pR&p%qQ!}eQ#VjR$X!mU!yej!mQ#UiQ$i!xQ$m!zQ%z$jQ%{$kQ&r%sR'[&qR%w$fR#^q",
     nodeNames: "⚠ InterpolationEnd InterpolationContinue Unit VariableName InterpolationStart LineComment Comment IndentedMixin IndentedInclude StyleSheet RuleSet UniversalSelector TagSelector TagName NestingSelector Interpolation SassVariableName ValueName ) ( ParenthesizedValue ColorLiteral NumberLiteral StringLiteral BinaryExpression BinOp LogicOp UnaryExpression LogicOp NamespacedValue CallExpression Callee ArgList : ... , CallLiteral CallTag ParenthesizedContent ClassSelector ClassName PseudoClassSelector :: PseudoClassName PseudoClassName ArgList PseudoClassName ArgList IdSelector # IdName ] AttributeSelector [ AttributeName MatchOp ChildSelector ChildOp DescendantSelector SiblingSelector SiblingOp Block { Declaration PropertyName Important Global Default ; } ImportStatement AtKeyword import KeywordQuery FeatureQuery FeatureName BinaryQuery UnaryQuery ParenthesizedQuery SelectorQuery selector IncludeStatement include Keyword MixinStatement mixin UseStatement use Keyword ExtendStatement extend RootStatement at-root ForwardStatement forward Keyword MediaStatement media CharsetStatement charset NamespaceStatement namespace NamespaceName KeyframesStatement keyframes KeyframeName KeyframeList Keyword Keyword SupportsStatement supports IfStatement ControlKeyword ControlKeyword Keyword ForStatement ControlKeyword Keyword EachStatement ControlKeyword Keyword WhileStatement ControlKeyword OutputStatement ControlKeyword AtRule Styles",
     maxTerm: 170,
     context: trackIndent,
     nodeProps: [
       ["openedBy", 1,"InterpolationStart",5,"InterpolationEnd",19,"(",70,"{"],
       ["closedBy", 20,")",63,"}"]
     ],
     propSources: [cssHighlighting],
     skippedNodes: [0,6,7,128],
     repeatNodeCount: 17,
     tokenData: "!!]~RyOq#rqr$jrs0jst2^tu8{uv;hvw;ywx<[xy=yyz>[z{>a{|>z|}Cm}!ODO!O!PDm!P!Q;h!Q![FW![!]GR!]!^G}!^!_H`!_!`Hw!`!aI`!a!b#r!b!cJa!c!}#r!}#OKy#O#P#r#P#QL[#Q#RLm#R#T#r#T#UMS#U#c#r#c#dNe#d#o#r#o#pNz#p#qLm#q#r! ]#r#s! n#s;'S#r;'S;=`!!V<%lO#rW#uSOy$Rz;'S$R;'S;=`$d<%lO$RW$WSwWOy$Rz;'S$R;'S;=`$d<%lO$RW$gP;=`<%l$RY$m[Oy$Rz!_$R!_!`%c!`#W$R#W#X%v#X#Z$R#Z#[)Z#[#]$R#]#^,V#^;'S$R;'S;=`$d<%lO$RY%jSwWjQOy$Rz;'S$R;'S;=`$d<%lO$RY%{UwWOy$Rz#X$R#X#Y&_#Y;'S$R;'S;=`$d<%lO$RY&dUwWOy$Rz#Y$R#Y#Z&v#Z;'S$R;'S;=`$d<%lO$RY&{UwWOy$Rz#T$R#T#U'_#U;'S$R;'S;=`$d<%lO$RY'dUwWOy$Rz#i$R#i#j'v#j;'S$R;'S;=`$d<%lO$RY'{UwWOy$Rz#`$R#`#a(_#a;'S$R;'S;=`$d<%lO$RY(dUwWOy$Rz#h$R#h#i(v#i;'S$R;'S;=`$d<%lO$RY(}S!fQwWOy$Rz;'S$R;'S;=`$d<%lO$RY)`UwWOy$Rz#`$R#`#a)r#a;'S$R;'S;=`$d<%lO$RY)wUwWOy$Rz#c$R#c#d*Z#d;'S$R;'S;=`$d<%lO$RY*`UwWOy$Rz#U$R#U#V*r#V;'S$R;'S;=`$d<%lO$RY*wUwWOy$Rz#T$R#T#U+Z#U;'S$R;'S;=`$d<%lO$RY+`UwWOy$Rz#`$R#`#a+r#a;'S$R;'S;=`$d<%lO$RY+yS!eQwWOy$Rz;'S$R;'S;=`$d<%lO$RY,[UwWOy$Rz#a$R#a#b,n#b;'S$R;'S;=`$d<%lO$RY,sUwWOy$Rz#d$R#d#e-V#e;'S$R;'S;=`$d<%lO$RY-[UwWOy$Rz#c$R#c#d-n#d;'S$R;'S;=`$d<%lO$RY-sUwWOy$Rz#f$R#f#g.V#g;'S$R;'S;=`$d<%lO$RY.[UwWOy$Rz#h$R#h#i.n#i;'S$R;'S;=`$d<%lO$RY.sUwWOy$Rz#T$R#T#U/V#U;'S$R;'S;=`$d<%lO$RY/[UwWOy$Rz#b$R#b#c/n#c;'S$R;'S;=`$d<%lO$RY/sUwWOy$Rz#h$R#h#i0V#i;'S$R;'S;=`$d<%lO$RY0^S!dQwWOy$Rz;'S$R;'S;=`$d<%lO$R~0mWOY0jZr0jrs1Vs#O0j#O#P1[#P;'S0j;'S;=`2W<%lO0j~1[Oh~~1_RO;'S0j;'S;=`1h;=`O0j~1kXOY0jZr0jrs1Vs#O0j#O#P1[#P;'S0j;'S;=`2W;=`<%l0j<%lO0j~2ZP;=`<%l0jZ2cY!SPOy$Rz!Q$R!Q![3R![!c$R!c!i3R!i#T$R#T#Z3R#Z;'S$R;'S;=`$d<%lO$RY3WYwWOy$Rz!Q$R!Q![3v![!c$R!c!i3v!i#T$R#T#Z3v#Z;'S$R;'S;=`$d<%lO$RY3{YwWOy$Rz!Q$R!Q![4k![!c$R!c!i4k!i#T$R#T#Z4k#Z;'S$R;'S;=`$d<%lO$RY4rYfQwWOy$Rz!Q$R!Q![5b![!c$R!c!i5b!i#T$R#T#Z5b#Z;'S$R;'S;=`$d<%lO$RY5iYfQwWOy$Rz!Q$R!Q![6X![!c$R!c!i6X!i#T$R#T#Z6X#Z;'S$R;'S;=`$d<%lO$RY6^YwWOy$Rz!Q$R!Q![6|![!c$R!c!i6|!i#T$R#T#Z6|#Z;'S$R;'S;=`$d<%lO$RY7TYfQwWOy$Rz!Q$R!Q![7s![!c$R!c!i7s!i#T$R#T#Z7s#Z;'S$R;'S;=`$d<%lO$RY7xYwWOy$Rz!Q$R!Q![8h![!c$R!c!i8h!i#T$R#T#Z8h#Z;'S$R;'S;=`$d<%lO$RY8oSfQwWOy$Rz;'S$R;'S;=`$d<%lO$R_9O`Oy$Rz}$R}!O:Q!O!Q$R!Q![:Q![!_$R!_!`;T!`!c$R!c!}:Q!}#R$R#R#S:Q#S#T$R#T#o:Q#o;'S$R;'S;=`$d<%lO$RZ:X^wWaROy$Rz}$R}!O:Q!O!Q$R!Q![:Q![!c$R!c!}:Q!}#R$R#R#S:Q#S#T$R#T#o:Q#o;'S$R;'S;=`$d<%lO$R[;[S!YSwWOy$Rz;'S$R;'S;=`$d<%lO$RY;mSjQOy$Rz;'S$R;'S;=`$d<%lO$RZ<OS_ROy$Rz;'S$R;'S;=`$d<%lO$R~<_WOY<[Zw<[wx1Vx#O<[#O#P<w#P;'S<[;'S;=`=s<%lO<[~<zRO;'S<[;'S;=`=T;=`O<[~=WXOY<[Zw<[wx1Vx#O<[#O#P<w#P;'S<[;'S;=`=s;=`<%l<[<%lO<[~=vP;=`<%l<[Z>OSdROy$Rz;'S$R;'S;=`$d<%lO$R~>aOc~_>hU[PjQOy$Rz!_$R!_!`;T!`;'S$R;'S;=`$d<%lO$RZ?RWjQ!_POy$Rz!O$R!O!P?k!P!Q$R!Q![Bp![;'S$R;'S;=`$d<%lO$RZ?pUwWOy$Rz!Q$R!Q![@S![;'S$R;'S;=`$d<%lO$RZ@ZYwW$fROy$Rz!Q$R!Q![@S![!g$R!g!h@y!h#X$R#X#Y@y#Y;'S$R;'S;=`$d<%lO$RZAOYwWOy$Rz{$R{|An|}$R}!OAn!O!Q$R!Q![BV![;'S$R;'S;=`$d<%lO$RZAsUwWOy$Rz!Q$R!Q![BV![;'S$R;'S;=`$d<%lO$RZB^UwW$fROy$Rz!Q$R!Q![BV![;'S$R;'S;=`$d<%lO$RZBw[wW$fROy$Rz!O$R!O!P@S!P!Q$R!Q![Bp![!g$R!g!h@y!h#X$R#X#Y@y#Y;'S$R;'S;=`$d<%lO$RZCrStROy$Rz;'S$R;'S;=`$d<%lO$RZDTWjQOy$Rz!O$R!O!P?k!P!Q$R!Q![Bp![;'S$R;'S;=`$d<%lO$RZDrW$gROy$Rz!O$R!O!PE[!P!Q$R!Q![@S![;'S$R;'S;=`$d<%lO$RYEaUwWOy$Rz!O$R!O!PEs!P;'S$R;'S;=`$d<%lO$RYEzSsQwWOy$Rz;'S$R;'S;=`$d<%lO$RZF][$fROy$Rz!O$R!O!P@S!P!Q$R!Q![Bp![!g$R!g!h@y!h#X$R#X#Y@y#Y;'S$R;'S;=`$d<%lO$RZGWUrROy$Rz![$R![!]Gj!];'S$R;'S;=`$d<%lO$RXGqS{PwWOy$Rz;'S$R;'S;=`$d<%lO$RZHSS!gROy$Rz;'S$R;'S;=`$d<%lO$RYHeUjQOy$Rz!_$R!_!`%c!`;'S$R;'S;=`$d<%lO$R^H|U!YSOy$Rz!_$R!_!`%c!`;'S$R;'S;=`$d<%lO$RZIgV![PjQOy$Rz!_$R!_!`%c!`!aI|!a;'S$R;'S;=`$d<%lO$RXJTS![PwWOy$Rz;'S$R;'S;=`$d<%lO$RXJdWOy$Rz!c$R!c!}J|!}#T$R#T#oJ|#o;'S$R;'S;=`$d<%lO$RXKT[!jPwWOy$Rz}$R}!OJ|!O!Q$R!Q![J|![!c$R!c!}J|!}#T$R#T#oJ|#o;'S$R;'S;=`$d<%lO$RXLOS!WPOy$Rz;'S$R;'S;=`$d<%lO$R^LaS!UUOy$Rz;'S$R;'S;=`$d<%lO$R[LpUOy$Rz!_$R!_!`;T!`;'S$R;'S;=`$d<%lO$RZMVUOy$Rz#b$R#b#cMi#c;'S$R;'S;=`$d<%lO$RZMnUwWOy$Rz#W$R#W#XNQ#X;'S$R;'S;=`$d<%lO$RZNXSkRwWOy$Rz;'S$R;'S;=`$d<%lO$RZNhUOy$Rz#f$R#f#gNQ#g;'S$R;'S;=`$d<%lO$RZ! PS!aROy$Rz;'S$R;'S;=`$d<%lO$RZ! bS!hROy$Rz;'S$R;'S;=`$d<%lO$R]! sU!_POy$Rz!_$R!_!`;T!`;'S$R;'S;=`$d<%lO$RW!!YP;=`<%l#r",
     tokenizers: [indentation, descendant, interpolationEnd, unitToken, identifiers$9, spaces, comments, indentedMixins, 0, 1, 2, 3],
     topRules: {"StyleSheet":[0,10],"Styles":[1,127]},
     dialects: {indented: 0},
     specialized: [{term: 150, get: value => spec_identifier[value] || -1},{term: 149, get: value => spec_callee[value] || -1},{term: 72, get: value => spec_AtKeyword[value] || -1}],
     tokenPrec: 2798
   });

   /**
   A language provider based on the [Lezer Sass
   parser](https://github.com/lezer-parser/sass), extended with
   highlighting and indentation information.
   */
   const sassLanguage = /*@__PURE__*/LRLanguage.define({
       name: "sass",
       parser: /*@__PURE__*/parser$4.configure({
           props: [
               /*@__PURE__*/foldNodeProp.add({
                   Block: foldInside,
                   Comment(node, state) {
                       return { from: node.from + 2, to: state.sliceDoc(node.to - 2, node.to) == "*/" ? node.to - 2 : node.to };
                   }
               }),
               /*@__PURE__*/indentNodeProp.add({
                   Declaration: /*@__PURE__*/continuedIndent()
               })
           ]
       }),
       languageData: {
           commentTokens: { block: { open: "/*", close: "*/" }, line: "//" },
           indentOnInput: /^\s*\}$/,
           wordChars: "$-"
       }
   });
   const indentedSassLanguage = /*@__PURE__*/sassLanguage.configure({
       dialect: "indented",
       props: [
           /*@__PURE__*/indentNodeProp.add({
               "Block RuleSet": cx => cx.baseIndent + cx.unit
           }),
           /*@__PURE__*/foldNodeProp.add({
               Block: node => ({ from: node.from, to: node.to })
           })
       ]
   });
   /**
   Language support for CSS.
   */
   function sass(config) {
       return new LanguageSupport((config === null || config === void 0 ? void 0 : config.indented) ? indentedSassLanguage : sassLanguage, sassLanguage.data.of({ autocomplete: cssCompletionSource }));
   }

   var index$4 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      sass: sass,
      sassLanguage: sassLanguage
   });

   // This file was generated by lezer-generator. You probably shouldn't edit it.
   const spec_Keyword = {__proto__:null,anyref:34, dataref:34, eqref:34, externref:34, i31ref:34, funcref:34, i8:34, i16:34, i32:34, i64:34, f32:34, f64:34};
   const parser$3 = /*@__PURE__*/LRParser.deserialize({
     version: 14,
     states: "!^Q]QPOOOqQPO'#CbOOQO'#Cd'#CdOOQO'#Cl'#ClOOQO'#Ch'#ChQ]QPOOOOQO,58|,58|OxQPO,58|OOQO-E6f-E6fOOQO1G.h1G.h",
     stateData: "!P~O_OSPOSQOS~OTPOVROXROYROZROaQO~OSUO~P]OSXO~P]O",
     goto: "xaPPPPPPbPbPPPhPPPrXROPTVQTOQVPTWTVXSOPTV",
     nodeNames: "⚠ LineComment BlockComment Module ) ( App Identifier Type Keyword Number String",
     maxTerm: 17,
     nodeProps: [
       ["openedBy", 4,"("],
       ["closedBy", 5,")"],
       ["group", -6,6,7,8,9,10,11,"Expression"]
     ],
     skippedNodes: [0,1,2],
     repeatNodeCount: 1,
     tokenData: "/Q~R^XY}YZ}]^}pq}rs!Stu!qxy&Vyz'S{|'X}!O'X!Q!R'b!R![)_!]!^,{#T#o-^~!SO_~~!VTOr!Srs!fs#O!S#O#P!k#P~!S~!kOZ~~!nPO~!S~!tiqr$cst$ctu$cuv$cvw$cwx$cz{$c{|$c}!O$c!O!P$c!P!Q$c!Q![$c![!]$c!^!_$c!_!`$c!`!a$c!a!b$c!b!c$c!c!}$c#Q#R$c#R#S$c#S#T$c#T#o$c#p#q$c#r#s$c~$hiV~qr$cst$ctu$cuv$cvw$cwx$cz{$c{|$c}!O$c!O!P$c!P!Q$c!Q![$c![!]$c!^!_$c!_!`$c!`!a$c!a!b$c!b!c$c!c!}$c#Q#R$c#R#S$c#S#T$c#T#o$c#p#q$c#r#s$c~&[PT~!]!^&_~&bRO!]&_!]!^&k!^~&_~&nTOy&_yz&}z!]&_!]!^&k!^~&_~'SOQ~~'XOS~~'[Q!Q!R'b!R![)_~'gUY~!O!P'y!Q![)_!g!h(j#R#S)s#X#Y(j#l#m)y~(ORY~!Q![(X!g!h(j#X#Y(j~(^SY~!Q![(X!g!h(j#R#S)X#X#Y(j~(mR{|(v}!O(v!Q![(|~(yP!Q![(|~)RQY~!Q![(|#R#S(v~)[P!Q![(X~)dTY~!O!P'y!Q![)_!g!h(j#R#S)s#X#Y(j~)vP!Q![)_~)|R!Q![*V!c!i*V#T#Z*V~*[VY~!O!P*q!Q![*V!c!i*V!r!s+n#R#S)y#T#Z*V#d#e+n~*vTY~!Q![+V!c!i+V!r!s+n#T#Z+V#d#e+n~+[UY~!Q![+V!c!i+V!r!s+n#R#S,o#T#Z+V#d#e+n~+qT{|,Q}!O,Q!Q![,^!c!i,^#T#Z,^~,TR!Q![,^!c!i,^#T#Z,^~,cSY~!Q![,^!c!i,^#R#S,Q#T#Z,^~,rR!Q![+V!c!i+V#T#Z+V~-OP!]!^-R~-WQP~OY-RZ~-R~-ciX~qr-^st-^tu-^uv-^vw-^wx-^z{-^{|-^}!O-^!O!P-^!P!Q-^!Q![-^![!]-^!^!_-^!_!`-^!`!a-^!a!b-^!b!c-^!c!}-^#Q#R-^#R#S-^#S#T-^#T#o-^#p#q-^#r#s-^",
     tokenizers: [0],
     topRules: {"Module":[0,3]},
     specialized: [{term: 9, get: value => spec_Keyword[value] || -1}],
     tokenPrec: 0
   });

   const wastLanguage = /*@__PURE__*/LRLanguage.define({
       name: "wast",
       parser: /*@__PURE__*/parser$3.configure({
           props: [
               /*@__PURE__*/indentNodeProp.add({
                   App: /*@__PURE__*/delimitedIndent({ closing: ")", align: false })
               }),
               /*@__PURE__*/foldNodeProp.add({
                   App: foldInside,
                   BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; }
               }),
               /*@__PURE__*/styleTags({
                   Keyword: tags$1.keyword,
                   Type: tags$1.typeName,
                   Number: tags$1.number,
                   String: tags$1.string,
                   Identifier: tags$1.variableName,
                   LineComment: tags$1.lineComment,
                   BlockComment: tags$1.blockComment,
                   "( )": tags$1.paren
               })
           ]
       }),
       languageData: {
           commentTokens: { line: ";;", block: { open: "(;", close: ";)" } },
           closeBrackets: { brackets: ["(", '"'] }
       }
   });
   function wast() {
       return new LanguageSupport(wastLanguage);
   }

   var index$3 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      wast: wast,
      wastLanguage: wastLanguage
   });

   // This file was generated by lezer-generator. You probably shouldn't edit it.
   const StartTag = 1,
     StartCloseTag = 2,
     MissingCloseTag = 3,
     mismatchedStartCloseTag = 4,
     incompleteStartCloseTag = 5,
     commentContent$1 = 35,
     piContent$1 = 36,
     cdataContent$1 = 37,
     Element$1 = 11,
     OpenTag = 13;

   /* Hand-written tokenizer for XML tag matching. */

   function nameChar(ch) {
     return ch == 45 || ch == 46 || ch == 58 || ch >= 65 && ch <= 90 || ch == 95 || ch >= 97 && ch <= 122 || ch >= 161
   }

   function isSpace(ch) {
     return ch == 9 || ch == 10 || ch == 13 || ch == 32
   }

   let cachedName = null, cachedInput = null, cachedPos = 0;
   function tagNameAfter(input, offset) {
     let pos = input.pos + offset;
     if (cachedInput == input && cachedPos == pos) return cachedName
     while (isSpace(input.peek(offset))) offset++;
     let name = "";
     for (;;) {
       let next = input.peek(offset);
       if (!nameChar(next)) break
       name += String.fromCharCode(next);
       offset++;
     }
     cachedInput = input; cachedPos = pos;
     return cachedName = name || null
   }

   function ElementContext(name, parent) {
     this.name = name;
     this.parent = parent;
     this.hash = parent ? parent.hash : 0;
     for (let i = 0; i < name.length; i++) this.hash += (this.hash << 4) + name.charCodeAt(i) + (name.charCodeAt(i) << 8);
   }

   const elementContext = new ContextTracker({
     start: null,
     shift(context, term, stack, input) {
       return term == StartTag ? new ElementContext(tagNameAfter(input, 1) || "", context) : context
     },
     reduce(context, term) {
       return term == Element$1 && context ? context.parent : context
     },
     reuse(context, node, _stack, input) {
       let type = node.type.id;
       return type == StartTag || type == OpenTag
         ? new ElementContext(tagNameAfter(input, 1) || "", context) : context
     },
     hash(context) { return context ? context.hash : 0 },
     strict: false
   });

   const startTag = new ExternalTokenizer((input, stack) => {
     if (input.next != 60 /* '<' */) return
     input.advance();
     if (input.next == 47 /* '/' */) {
       input.advance();
       let name = tagNameAfter(input, 0);
       if (!name) return input.acceptToken(incompleteStartCloseTag)
       if (stack.context && name == stack.context.name) return input.acceptToken(StartCloseTag)
       for (let cx = stack.context; cx; cx = cx.parent) if (cx.name == name) return input.acceptToken(MissingCloseTag, -2)
       input.acceptToken(mismatchedStartCloseTag);
     } else if (input.next != 33 /* '!' */ && input.next != 63 /* '?' */) {
       return input.acceptToken(StartTag)
     }
   }, {contextual: true});

   function scanTo(type, end) {
     return new ExternalTokenizer(input => {
       for (let endPos = 0, len = 0;; len++) {
         if (input.next < 0) {
           if (len) input.acceptToken(type);
           break
         } 
         if (input.next == end.charCodeAt(endPos)) {
           endPos++;
           if (endPos == end.length) {
             if (len >= end.length) input.acceptToken(type, 1 - end.length);
             break
           }
         } else {
           endPos = input.next == end.charCodeAt(0) ? 1 : 0;
         }
         input.advance();
       }
     })
   }

   const commentContent = scanTo(commentContent$1, "-->");
   const piContent = scanTo(piContent$1, "?>");
   const cdataContent = scanTo(cdataContent$1, "]]>");

   const xmlHighlighting = styleTags({
     Text: tags$1.content,
     "StartTag StartCloseTag EndTag SelfCloseEndTag": tags$1.angleBracket,
     TagName: tags$1.tagName,
     "MismatchedCloseTag/Tagname": [tags$1.tagName, tags$1.invalid],
     AttributeName: tags$1.attributeName,
     AttributeValue: tags$1.attributeValue,
     Is: tags$1.definitionOperator,
     "EntityReference CharacterReference": tags$1.character,
     Comment: tags$1.blockComment,
     ProcessingInst: tags$1.processingInstruction,
     DoctypeDecl: tags$1.documentMeta,
     Cdata: tags$1.special(tags$1.string)
   });

   // This file was generated by lezer-generator. You probably shouldn't edit it.
   const parser$2 = LRParser.deserialize({
     version: 14,
     states: ",SOQOaOOOrOxO'#CfOzOpO'#CiO!tOaO'#CgOOOP'#Cg'#CgO!{OrO'#CrO#TOtO'#CsO#]OpO'#CtOOOP'#DS'#DSOOOP'#Cv'#CvQQOaOOOOOW'#Cw'#CwO#eOxO,59QOOOP,59Q,59QOOOO'#Cx'#CxO#mOpO,59TO#uO!bO,59TOOOP'#C{'#C{O$TOaO,59RO$[OpO'#CoOOOP,59R,59ROOOQ'#C|'#C|O$dOrO,59^OOOP,59^,59^OOOS'#C}'#C}O$lOtO,59_OOOP,59_,59_O$tOpO,59`O$|OpO,59`OOOP-E6t-E6tOOOW-E6u-E6uOOOP1G.l1G.lOOOO-E6v-E6vO%UO!bO1G.oO%UO!bO1G.oO%dOpO'#CkO%lO!bO'#CyO%zO!bO1G.oOOOP1G.o1G.oOOOP1G.w1G.wOOOP-E6y-E6yOOOP1G.m1G.mO&VOpO,59ZO&_OpO,59ZOOOQ-E6z-E6zOOOP1G.x1G.xOOOS-E6{-E6{OOOP1G.y1G.yO&gOpO1G.zO&gOpO1G.zOOOP1G.z1G.zO&oO!bO7+$ZO&}O!bO7+$ZOOOP7+$Z7+$ZOOOP7+$c7+$cO'YOpO,59VO'bOpO,59VO'jO!bO,59eOOOO-E6w-E6wO'xOpO1G.uO'xOpO1G.uOOOP1G.u1G.uO(QOpO7+$fOOOP7+$f7+$fO(YO!bO<<GuOOOP<<Gu<<GuOOOP<<G}<<G}O'bOpO1G.qO'bOpO1G.qO(eO#tO'#CnOOOO1G.q1G.qO(sOpO7+$aOOOP7+$a7+$aOOOP<<HQ<<HQOOOPAN=aAN=aOOOPAN=iAN=iO'bOpO7+$]OOOO7+$]7+$]OOOO'#Cz'#CzO({O#tO,59YOOOO,59Y,59YOOOP<<G{<<G{OOOO<<Gw<<GwOOOO-E6x-E6xOOOO1G.t1G.t",
     stateData: ")Z~OPQOSVOTWOVWOWWOXWOiXOxPO}TO!PUO~OuZOw]O~O^`Oy^O~OPQOQcOSVOTWOVWOWWOXWOxPO}TO!PUO~ORdO~P!SOseO|gO~OthO!OjO~O^lOy^O~OuZOwoO~O^qOy^O~O[vO`sOdwOy^O~ORyO~P!SO^{Oy^O~OseO|}O~OthO!O!PO~O^!QOy^O~O[!SOy^O~O[!VO`sOd!WOy^O~Oa!YOy^O~Oy^O[mX`mXdmX~O[!VO`sOd!WO~O^!]Oy^O~O[!_Oy^O~O[!aOy^O~O[!cO`sOd!dOy^O~O[!cO`sOd!dO~Oa!eOy^O~Oy^Oz!gO~Oy^O[ma`madma~O[!jOy^O~O[!kOy^O~O[!lO`sOd!mO~OW!pOX!pOz!rO{!pO~O[!sOy^O~OW!pOX!pOz!vO{!pO~O",
     goto: "%[wPPPPPPPPPPxxP!OP!UPP!_!iP!oxxxP!u!{#R$Z$j$p$v$|PPPP%SXWORYbXRORYb_t`qru!T!U!bQ!h!YS!o!e!fR!t!nQdRRybXSORYbQYORmYQ[PRn[Q_QQkVjp_krz!R!T!X!Z!^!`!f!i!nQr`QzcQ!RlQ!TqQ!XsQ!ZtQ!^{Q!`!QQ!f!YQ!i!]R!n!eQu`S!UqrU![u!U!bR!b!TQ!q!gR!u!qQbRRxbQfTR|fQiUR!OiSXOYTaRb",
     nodeNames: "⚠ StartTag StartCloseTag MissingCloseTag StartCloseTag StartCloseTag Document Text EntityReference CharacterReference Cdata Element EndTag OpenTag TagName Attribute AttributeName Is AttributeValue CloseTag SelfCloseEndTag SelfClosingTag Comment ProcessingInst MismatchedCloseTag DoctypeDecl",
     maxTerm: 47,
     context: elementContext,
     nodeProps: [
       ["closedBy", 1,"SelfCloseEndTag EndTag",13,"CloseTag MissingCloseTag"],
       ["openedBy", 12,"StartTag StartCloseTag",19,"OpenTag",20,"StartTag"]
     ],
     propSources: [xmlHighlighting],
     skippedNodes: [0],
     repeatNodeCount: 8,
     tokenData: "IX~R!XOX$nXY&kYZ&kZ]$n]^&k^p$npq&kqr$nrs'ssv$nvw(Zw}$n}!O*l!O!P$n!P!Q,{!Q![$n![!].e!]!^$n!^!_1v!_!`Cz!`!aDm!a!bE`!b!c$n!c!}.e!}#P$n#P#QFx#Q#R$n#R#S.e#S#T$n#T#o.e#o%W$n%W%o.e%o%p$n%p&a.e&a&b$n&b1p.e1p4U$n4U4d.e4d4e$n4e$IS.e$IS$I`$n$I`$Ib.e$Ib$Kh$n$Kh%#t.e%#t&/x$n&/x&Et.e&Et&FV$n&FV;'S.e;'S;:j1p;:j;=`&e<%l?&r$n?&r?Ah.e?Ah?BY$n?BY?Mn.e?MnO$nX$uWVP{WOr$nrs%_sv$nw!^$n!^!_%y!_;'S$n;'S;=`&e<%lO$nP%dTVPOv%_w!^%_!_;'S%_;'S;=`%s<%lO%_P%vP;=`<%l%_W&OT{WOr%ysv%yw;'S%y;'S;=`&_<%lO%yW&bP;=`<%l%yX&hP;=`<%l$n_&t_VP{WyUOX$nXY&kYZ&kZ]$n]^&k^p$npq&kqr$nrs%_sv$nw!^$n!^!_%y!_;'S$n;'S;=`&e<%lO$nZ'zTzYVPOv%_w!^%_!_;'S%_;'S;=`%s<%lO%_~(^VOp(sqs(sst)ht!](s!^;'S(s;'S;=`)b<%lO(s~(vVOp(sqs(st!](s!]!^)]!^;'S(s;'S;=`)b<%lO(s~)bOW~~)eP;=`<%l(s~)kTOp)zq!])z!^;'S)z;'S;=`*f<%lO)z~)}UOp)zq!])z!]!^*a!^;'S)z;'S;=`*f<%lO)z~*fOX~~*iP;=`<%l)zZ*sYVP{WOr$nrs%_sv$nw}$n}!O+c!O!^$n!^!_%y!_;'S$n;'S;=`&e<%lO$nZ+jYVP{WOr$nrs%_sv$nw!^$n!^!_%y!_!`$n!`!a,Y!a;'S$n;'S;=`&e<%lO$nZ,cW|QVP{WOr$nrs%_sv$nw!^$n!^!_%y!_;'S$n;'S;=`&e<%lO$n]-SYVP{WOr$nrs%_sv$nw!^$n!^!_%y!_!`$n!`!a-r!a;'S$n;'S;=`&e<%lO$n]-{WdSVP{WOr$nrs%_sv$nw!^$n!^!_%y!_;'S$n;'S;=`&e<%lO$n_.p!O`S^QVP{WOr$nrs%_sv$nw}$n}!O.e!O!P.e!P!Q$n!Q![.e![!].e!]!^$n!^!_%y!_!c$n!c!}.e!}#R$n#R#S.e#S#T$n#T#o.e#o$}$n$}%O.e%O%W$n%W%o.e%o%p$n%p&a.e&a&b$n&b1p.e1p4U.e4U4d.e4d4e$n4e$IS.e$IS$I`$n$I`$Ib.e$Ib$Je$n$Je$Jg.e$Jg$Kh$n$Kh%#t.e%#t&/x$n&/x&Et.e&Et&FV$n&FV;'S.e;'S;:j1p;:j;=`&e<%l?&r$n?&r?Ah.e?Ah?BY$n?BY?Mn.e?MnO$n_1sP;=`<%l.eX1{W{WOq%yqr2esv%yw!a%y!a!bCd!b;'S%y;'S;=`&_<%lO%yX2j]{WOr%ysv%yw}%y}!O3c!O!f%y!f!g4e!g!}%y!}#O9t#O#W%y#W#X@Q#X;'S%y;'S;=`&_<%lO%yX3hV{WOr%ysv%yw}%y}!O3}!O;'S%y;'S;=`&_<%lO%yX4UT}P{WOr%ysv%yw;'S%y;'S;=`&_<%lO%yX4jV{WOr%ysv%yw!q%y!q!r5P!r;'S%y;'S;=`&_<%lO%yX5UV{WOr%ysv%yw!e%y!e!f5k!f;'S%y;'S;=`&_<%lO%yX5pV{WOr%ysv%yw!v%y!v!w6V!w;'S%y;'S;=`&_<%lO%yX6[V{WOr%ysv%yw!{%y!{!|6q!|;'S%y;'S;=`&_<%lO%yX6vV{WOr%ysv%yw!r%y!r!s7]!s;'S%y;'S;=`&_<%lO%yX7bV{WOr%ysv%yw!g%y!g!h7w!h;'S%y;'S;=`&_<%lO%yX7|X{WOr7wrs8isv7wvw8iw!`7w!`!a9W!a;'S7w;'S;=`9n<%lO7wP8lTO!`8i!`!a8{!a;'S8i;'S;=`9Q<%lO8iP9QOiPP9TP;=`<%l8iX9_TiP{WOr%ysv%yw;'S%y;'S;=`&_<%lO%yX9qP;=`<%l7wX9yX{WOr%ysv%yw!e%y!e!f:f!f#V%y#V#W=t#W;'S%y;'S;=`&_<%lO%yX:kV{WOr%ysv%yw!f%y!f!g;Q!g;'S%y;'S;=`&_<%lO%yX;VV{WOr%ysv%yw!c%y!c!d;l!d;'S%y;'S;=`&_<%lO%yX;qV{WOr%ysv%yw!v%y!v!w<W!w;'S%y;'S;=`&_<%lO%yX<]V{WOr%ysv%yw!c%y!c!d<r!d;'S%y;'S;=`&_<%lO%yX<wV{WOr%ysv%yw!}%y!}#O=^#O;'S%y;'S;=`&_<%lO%yX=eT{WxPOr%ysv%yw;'S%y;'S;=`&_<%lO%yX=yV{WOr%ysv%yw#W%y#W#X>`#X;'S%y;'S;=`&_<%lO%yX>eV{WOr%ysv%yw#T%y#T#U>z#U;'S%y;'S;=`&_<%lO%yX?PV{WOr%ysv%yw#h%y#h#i?f#i;'S%y;'S;=`&_<%lO%yX?kV{WOr%ysv%yw#T%y#T#U<r#U;'S%y;'S;=`&_<%lO%yX@VV{WOr%ysv%yw#c%y#c#d@l#d;'S%y;'S;=`&_<%lO%yX@qV{WOr%ysv%yw#V%y#V#WAW#W;'S%y;'S;=`&_<%lO%yXA]V{WOr%ysv%yw#h%y#h#iAr#i;'S%y;'S;=`&_<%lO%yXAwV{WOr%ysv%yw#m%y#m#nB^#n;'S%y;'S;=`&_<%lO%yXBcV{WOr%ysv%yw#d%y#d#eBx#e;'S%y;'S;=`&_<%lO%yXB}V{WOr%ysv%yw#X%y#X#Y7w#Y;'S%y;'S;=`&_<%lO%yXCkT!PP{WOr%ysv%yw;'S%y;'S;=`&_<%lO%yZDTWaQVP{WOr$nrs%_sv$nw!^$n!^!_%y!_;'S$n;'S;=`&e<%lO$n_DvW[UVP{WOr$nrs%_sv$nw!^$n!^!_%y!_;'S$n;'S;=`&e<%lO$nZEgYVP{WOr$nrs%_sv$nw!^$n!^!_%y!_!`$n!`!aFV!a;'S$n;'S;=`&e<%lO$nZF`W!OQVP{WOr$nrs%_sv$nw!^$n!^!_%y!_;'S$n;'S;=`&e<%lO$nZGPYVP{WOr$nrs%_sv$nw!^$n!^!_%y!_#P$n#P#QGo#Q;'S$n;'S;=`&e<%lO$nZGvYVP{WOr$nrs%_sv$nw!^$n!^!_%y!_!`$n!`!aHf!a;'S$n;'S;=`&e<%lO$nZHoWwQVP{WOr$nrs%_sv$nw!^$n!^!_%y!_;'S$n;'S;=`&e<%lO$n",
     tokenizers: [startTag, commentContent, piContent, cdataContent, 0, 1, 2, 3],
     topRules: {"Document":[0,6]},
     tokenPrec: 0
   });

   function tagName(doc, tag) {
       let name = tag && tag.getChild("TagName");
       return name ? doc.sliceString(name.from, name.to) : "";
   }
   function elementName(doc, tree) {
       let tag = tree && tree.firstChild;
       return !tag || tag.name != "OpenTag" ? "" : tagName(doc, tag);
   }
   function attrName(doc, tag, pos) {
       let attr = tag && tag.getChildren("Attribute").find(a => a.from <= pos && a.to >= pos);
       let name = attr && attr.getChild("AttributeName");
       return name ? doc.sliceString(name.from, name.to) : "";
   }
   function findParentElement(tree) {
       for (let cur = tree && tree.parent; cur; cur = cur.parent)
           if (cur.name == "Element")
               return cur;
       return null;
   }
   function findLocation(state, pos) {
       var _a;
       let at = syntaxTree(state).resolveInner(pos, -1), inTag = null;
       for (let cur = at; !inTag && cur.parent; cur = cur.parent)
           if (cur.name == "OpenTag" || cur.name == "CloseTag" || cur.name == "SelfClosingTag" || cur.name == "MismatchedCloseTag")
               inTag = cur;
       if (inTag && (inTag.to > pos || inTag.lastChild.type.isError)) {
           let elt = inTag.parent;
           if (at.name == "TagName")
               return inTag.name == "CloseTag" || inTag.name == "MismatchedCloseTag"
                   ? { type: "closeTag", from: at.from, context: elt }
                   : { type: "openTag", from: at.from, context: findParentElement(elt) };
           if (at.name == "AttributeName")
               return { type: "attrName", from: at.from, context: inTag };
           if (at.name == "AttributeValue")
               return { type: "attrValue", from: at.from, context: inTag };
           let before = at == inTag || at.name == "Attribute" ? at.childBefore(pos) : at;
           if ((before === null || before === void 0 ? void 0 : before.name) == "StartTag")
               return { type: "openTag", from: pos, context: findParentElement(elt) };
           if ((before === null || before === void 0 ? void 0 : before.name) == "StartCloseTag" && before.to <= pos)
               return { type: "closeTag", from: pos, context: elt };
           if ((before === null || before === void 0 ? void 0 : before.name) == "Is")
               return { type: "attrValue", from: pos, context: inTag };
           if (before)
               return { type: "attrName", from: pos, context: inTag };
           return null;
       }
       else if (at.name == "StartCloseTag") {
           return { type: "closeTag", from: pos, context: at.parent };
       }
       while (at.parent && at.to == pos && !((_a = at.lastChild) === null || _a === void 0 ? void 0 : _a.type.isError))
           at = at.parent;
       if (at.name == "Element" || at.name == "Text" || at.name == "Document")
           return { type: "tag", from: pos, context: at.name == "Element" ? at : findParentElement(at) };
       return null;
   }
   class Element {
       constructor(spec, attrs, attrValues) {
           this.attrs = attrs;
           this.attrValues = attrValues;
           this.children = [];
           this.name = spec.name;
           this.completion = Object.assign(Object.assign({ type: "type" }, spec.completion || {}), { label: this.name });
           this.openCompletion = Object.assign(Object.assign({}, this.completion), { label: "<" + this.name });
           this.closeCompletion = Object.assign(Object.assign({}, this.completion), { label: "</" + this.name + ">", boost: 2 });
           this.closeNameCompletion = Object.assign(Object.assign({}, this.completion), { label: this.name + ">" });
           this.text = spec.textContent ? spec.textContent.map(s => ({ label: s, type: "text" })) : [];
       }
   }
   const Identifier$1 = /^[:\-\.\w\u00b7-\uffff]*$/;
   function attrCompletion(spec) {
       return Object.assign(Object.assign({ type: "property" }, spec.completion || {}), { label: spec.name });
   }
   function valueCompletion(spec) {
       return typeof spec == "string" ? { label: `"${spec}"`, type: "constant" }
           : /^"/.test(spec.label) ? spec
               : Object.assign(Object.assign({}, spec), { label: `"${spec.label}"` });
   }
   /**
   Create a completion source for the given schema.
   */
   function completeFromSchema(eltSpecs, attrSpecs) {
       let allAttrs = [], globalAttrs = [];
       let attrValues = Object.create(null);
       for (let s of attrSpecs) {
           let completion = attrCompletion(s);
           allAttrs.push(completion);
           if (s.global)
               globalAttrs.push(completion);
           if (s.values)
               attrValues[s.name] = s.values.map(valueCompletion);
       }
       let allElements = [], topElements = [];
       let byName = Object.create(null);
       for (let s of eltSpecs) {
           let attrs = globalAttrs, attrVals = attrValues;
           if (s.attributes)
               attrs = attrs.concat(s.attributes.map(s => {
                   if (typeof s == "string")
                       return allAttrs.find(a => a.label == s) || { label: s, type: "property" };
                   if (s.values) {
                       if (attrVals == attrValues)
                           attrVals = Object.create(attrVals);
                       attrVals[s.name] = s.values.map(valueCompletion);
                   }
                   return attrCompletion(s);
               }));
           let elt = new Element(s, attrs, attrVals);
           byName[elt.name] = elt;
           allElements.push(elt);
           if (s.top)
               topElements.push(elt);
       }
       if (!topElements.length)
           topElements = allElements;
       for (let i = 0; i < allElements.length; i++) {
           let s = eltSpecs[i], elt = allElements[i];
           if (s.children) {
               for (let ch of s.children)
                   if (byName[ch])
                       elt.children.push(byName[ch]);
           }
           else {
               elt.children = allElements;
           }
       }
       return cx => {
           var _a;
           let { doc } = cx.state, loc = findLocation(cx.state, cx.pos);
           if (!loc || (loc.type == "tag" && !cx.explicit))
               return null;
           let { type, from, context } = loc;
           if (type == "openTag") {
               let children = topElements;
               let parentName = elementName(doc, context);
               if (parentName) {
                   let parent = byName[parentName];
                   children = (parent === null || parent === void 0 ? void 0 : parent.children) || allElements;
               }
               return {
                   from,
                   options: children.map(ch => ch.completion),
                   validFor: Identifier$1
               };
           }
           else if (type == "closeTag") {
               let parentName = elementName(doc, context);
               return parentName ? {
                   from,
                   to: cx.pos + (doc.sliceString(cx.pos, cx.pos + 1) == ">" ? 1 : 0),
                   options: [((_a = byName[parentName]) === null || _a === void 0 ? void 0 : _a.closeNameCompletion) || { label: parentName + ">", type: "type" }],
                   validFor: Identifier$1
               } : null;
           }
           else if (type == "attrName") {
               let parent = byName[tagName(doc, context)];
               return {
                   from,
                   options: (parent === null || parent === void 0 ? void 0 : parent.attrs) || globalAttrs,
                   validFor: Identifier$1
               };
           }
           else if (type == "attrValue") {
               let attr = attrName(doc, context, from);
               if (!attr)
                   return null;
               let parent = byName[tagName(doc, context)];
               let values = ((parent === null || parent === void 0 ? void 0 : parent.attrValues) || attrValues)[attr];
               if (!values || !values.length)
                   return null;
               return {
                   from,
                   to: cx.pos + (doc.sliceString(cx.pos, cx.pos + 1) == '"' ? 1 : 0),
                   options: values,
                   validFor: /^"[^"]*"?$/
               };
           }
           else if (type == "tag") {
               let parentName = elementName(doc, context), parent = byName[parentName];
               let closing = [], last = context && context.lastChild;
               if (parentName && (!last || last.name != "CloseTag" || tagName(doc, last) != parentName))
                   closing.push(parent ? parent.closeCompletion : { label: "</" + parentName + ">", type: "type", boost: 2 });
               let options = closing.concat(((parent === null || parent === void 0 ? void 0 : parent.children) || (context ? allElements : topElements)).map(e => e.openCompletion));
               if (context && (parent === null || parent === void 0 ? void 0 : parent.text.length)) {
                   let openTag = context.firstChild;
                   if (openTag.to > cx.pos - 20 && !/\S/.test(cx.state.sliceDoc(openTag.to, cx.pos)))
                       options = options.concat(parent.text);
               }
               return {
                   from,
                   options,
                   validFor: /^<\/?[:\-\.\w\u00b7-\uffff]*$/
               };
           }
           else {
               return null;
           }
       };
   }

   /**
   A language provider based on the [Lezer XML
   parser](https://github.com/lezer-parser/xml), extended with
   highlighting and indentation information.
   */
   const xmlLanguage = /*@__PURE__*/LRLanguage.define({
       name: "xml",
       parser: /*@__PURE__*/parser$2.configure({
           props: [
               /*@__PURE__*/indentNodeProp.add({
                   Element(context) {
                       let closed = /^\s*<\//.test(context.textAfter);
                       return context.lineIndent(context.node.from) + (closed ? 0 : context.unit);
                   },
                   "OpenTag CloseTag SelfClosingTag"(context) {
                       return context.column(context.node.from) + context.unit;
                   }
               }),
               /*@__PURE__*/foldNodeProp.add({
                   Element(subtree) {
                       let first = subtree.firstChild, last = subtree.lastChild;
                       if (!first || first.name != "OpenTag")
                           return null;
                       return { from: first.to, to: last.name == "CloseTag" ? last.from : subtree.to };
                   }
               }),
               /*@__PURE__*/bracketMatchingHandle.add({
                   "OpenTag CloseTag": node => node.getChild("TagName")
               })
           ]
       }),
       languageData: {
           commentTokens: { block: { open: "<!--", close: "-->" } },
           indentOnInput: /^\s*<\/$/
       }
   });
   /**
   XML language support. Includes schema-based autocompletion when
   configured.
   */
   function xml(conf = {}) {
       return new LanguageSupport(xmlLanguage, xmlLanguage.data.of({
           autocomplete: completeFromSchema(conf.elements || [], conf.attributes || [])
       }));
   }

   var index$2 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      completeFromSchema: completeFromSchema,
      xml: xml,
      xmlLanguage: xmlLanguage
   });

   var builtInFuncs = {
     "+": ["conjugate", "add"],
     "−": ["negate", "subtract"],
     "×": ["signOf", "multiply"],
     "÷": ["reciprocal", "divide"],
     "⌈": ["ceiling", "greaterOf"],
     "⌊": ["floor", "lesserOf"],
     "∣": ["absolute", "residue"],
     "⍳": ["indexGenerate", "indexOf"],
     "?": ["roll", "deal"],
     "⋆": ["exponentiate", "toThePowerOf"],
     "⍟": ["naturalLog", "logToTheBase"],
     "○": ["piTimes", "circularFuncs"],
     "!": ["factorial", "binomial"],
     "⌹": ["matrixInverse", "matrixDivide"],
     "<": [null, "lessThan"],
     "≤": [null, "lessThanOrEqual"],
     "=": [null, "equals"],
     ">": [null, "greaterThan"],
     "≥": [null, "greaterThanOrEqual"],
     "≠": [null, "notEqual"],
     "≡": ["depth", "match"],
     "≢": [null, "notMatch"],
     "∈": ["enlist", "membership"],
     "⍷": [null, "find"],
     "∪": ["unique", "union"],
     "∩": [null, "intersection"],
     "∼": ["not", "without"],
     "∨": [null, "or"],
     "∧": [null, "and"],
     "⍱": [null, "nor"],
     "⍲": [null, "nand"],
     "⍴": ["shapeOf", "reshape"],
     ",": ["ravel", "catenate"],
     "⍪": [null, "firstAxisCatenate"],
     "⌽": ["reverse", "rotate"],
     "⊖": ["axis1Reverse", "axis1Rotate"],
     "⍉": ["transpose", null],
     "↑": ["first", "take"],
     "↓": [null, "drop"],
     "⊂": ["enclose", "partitionWithAxis"],
     "⊃": ["diclose", "pick"],
     "⌷": [null, "index"],
     "⍋": ["gradeUp", null],
     "⍒": ["gradeDown", null],
     "⊤": ["encode", null],
     "⊥": ["decode", null],
     "⍕": ["format", "formatByExample"],
     "⍎": ["execute", null],
     "⊣": ["stop", "left"],
     "⊢": ["pass", "right"]
   };

   var isOperator = /[\.\/⌿⍀¨⍣]/;
   var isNiladic = /⍬/;
   var isFunction = /[\+−×÷⌈⌊∣⍳\?⋆⍟○!⌹<≤=>≥≠≡≢∈⍷∪∩∼∨∧⍱⍲⍴,⍪⌽⊖⍉↑↓⊂⊃⌷⍋⍒⊤⊥⍕⍎⊣⊢]/;
   var isArrow = /←/;
   var isComment = /[⍝#].*$/;

   var stringEater = function(type) {
     var prev;
     prev = false;
     return function(c) {
       prev = c;
       if (c === type) {
         return prev === "\\";
       }
       return true;
     };
   };

   const apl = {
     name: "apl",
     startState: function() {
       return {
         prev: false,
         func: false,
         op: false,
         string: false,
         escape: false
       };
     },
     token: function(stream, state) {
       var ch;
       if (stream.eatSpace()) {
         return null;
       }
       ch = stream.next();
       if (ch === '"' || ch === "'") {
         stream.eatWhile(stringEater(ch));
         stream.next();
         state.prev = true;
         return "string";
       }
       if (/[\[{\(]/.test(ch)) {
         state.prev = false;
         return null;
       }
       if (/[\]}\)]/.test(ch)) {
         state.prev = true;
         return null;
       }
       if (isNiladic.test(ch)) {
         state.prev = false;
         return "atom";
       }
       if (/[¯\d]/.test(ch)) {
         if (state.func) {
           state.func = false;
           state.prev = false;
         } else {
           state.prev = true;
         }
         stream.eatWhile(/[\w\.]/);
         return "number";
       }
       if (isOperator.test(ch)) {
         return "operator"
       }
       if (isArrow.test(ch)) {
         return "operator";
       }
       if (isFunction.test(ch)) {
         state.func = true;
         state.prev = false;
         return builtInFuncs[ch] ? "variableName.function.standard" : "variableName.function"
       }
       if (isComment.test(ch)) {
         stream.skipToEnd();
         return "comment";
       }
       if (ch === "∘" && stream.peek() === ".") {
         stream.next();
         return "variableName.function";
       }
       stream.eatWhile(/[\w\$_]/);
       state.prev = true;
       return "keyword";
     }
   };

   var apl$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      apl: apl
   });

   function errorIfNotEmpty(stream) {
     var nonWS = stream.match(/^\s*\S/);
     stream.skipToEnd();
     return nonWS ? "error" : null;
   }

   const asciiArmor = {
     name: "asciiarmor",
     token: function(stream, state) {
       var m;
       if (state.state == "top") {
         if (stream.sol() && (m = stream.match(/^-----BEGIN (.*)?-----\s*$/))) {
           state.state = "headers";
           state.type = m[1];
           return "tag";
         }
         return errorIfNotEmpty(stream);
       } else if (state.state == "headers") {
         if (stream.sol() && stream.match(/^\w+:/)) {
           state.state = "header";
           return "atom";
         } else {
           var result = errorIfNotEmpty(stream);
           if (result) state.state = "body";
           return result;
         }
       } else if (state.state == "header") {
         stream.skipToEnd();
         state.state = "headers";
         return "string";
       } else if (state.state == "body") {
         if (stream.sol() && (m = stream.match(/^-----END (.*)?-----\s*$/))) {
           if (m[1] != state.type) return "error";
           state.state = "end";
           return "tag";
         } else {
           if (stream.eatWhile(/[A-Za-z0-9+\/=]/)) {
             return null;
           } else {
             stream.next();
             return "error";
           }
         }
       } else if (state.state == "end") {
         return errorIfNotEmpty(stream);
       }
     },
     blankLine: function(state) {
       if (state.state == "headers") state.state = "body";
     },
     startState: function() {
       return {state: "top", type: null};
     }
   };

   var asciiarmor = /*#__PURE__*/Object.freeze({
      __proto__: null,
      asciiArmor: asciiArmor
   });

   function words$k(str) {
     var obj = {}, words = str.split(" ");
     for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
     return obj;
   }

   const defaults$1 = {
     keywords: words$k("DEFINITIONS OBJECTS IF DERIVED INFORMATION ACTION" +
                     " REPLY ANY NAMED CHARACTERIZED BEHAVIOUR REGISTERED" +
                     " WITH AS IDENTIFIED CONSTRAINED BY PRESENT BEGIN" +
                     " IMPORTS FROM UNITS SYNTAX MIN-ACCESS MAX-ACCESS" +
                     " MINACCESS MAXACCESS REVISION STATUS DESCRIPTION" +
                     " SEQUENCE SET COMPONENTS OF CHOICE DistinguishedName" +
                     " ENUMERATED SIZE MODULE END INDEX AUGMENTS EXTENSIBILITY" +
                     " IMPLIED EXPORTS"),
     cmipVerbs: words$k("ACTIONS ADD GET NOTIFICATIONS REPLACE REMOVE"),
     compareTypes: words$k("OPTIONAL DEFAULT MANAGED MODULE-TYPE MODULE_IDENTITY" +
                         " MODULE-COMPLIANCE OBJECT-TYPE OBJECT-IDENTITY" +
                         " OBJECT-COMPLIANCE MODE CONFIRMED CONDITIONAL" +
                         " SUBORDINATE SUPERIOR CLASS TRUE FALSE NULL" +
                         " TEXTUAL-CONVENTION"),
     status: words$k("current deprecated mandatory obsolete"),
     tags: words$k("APPLICATION AUTOMATIC EXPLICIT IMPLICIT PRIVATE TAGS" +
                 " UNIVERSAL"),
     storage: words$k("BOOLEAN INTEGER OBJECT IDENTIFIER BIT OCTET STRING" +
                    " UTCTime InterfaceIndex IANAifType CMIP-Attribute" +
                    " REAL PACKAGE PACKAGES IpAddress PhysAddress" +
                    " NetworkAddress BITS BMPString TimeStamp TimeTicks" +
                    " TruthValue RowStatus DisplayString GeneralString" +
                    " GraphicString IA5String NumericString" +
                    " PrintableString SnmpAdminString TeletexString" +
                    " UTF8String VideotexString VisibleString StringStore" +
                    " ISO646String T61String UniversalString Unsigned32" +
                    " Integer32 Gauge Gauge32 Counter Counter32 Counter64"),
     modifier: words$k("ATTRIBUTE ATTRIBUTES MANDATORY-GROUP MANDATORY-GROUPS" +
                     " GROUP GROUPS ELEMENTS EQUALITY ORDERING SUBSTRINGS" +
                     " DEFINED"),
     accessTypes: words$k("not-accessible accessible-for-notify read-only" +
                        " read-create read-write"),
     multiLineStrings: true
   };

   function asn1(parserConfig) {
     var keywords = parserConfig.keywords || defaults$1.keywords,
         cmipVerbs = parserConfig.cmipVerbs || defaults$1.cmipVerbs,
         compareTypes = parserConfig.compareTypes || defaults$1.compareTypes,
         status = parserConfig.status || defaults$1.status,
         tags = parserConfig.tags || defaults$1.tags,
         storage = parserConfig.storage || defaults$1.storage,
         modifier = parserConfig.modifier || defaults$1.modifier,
         accessTypes = parserConfig.accessTypes|| defaults$1.accessTypes,
         multiLineStrings = parserConfig.multiLineStrings || defaults$1.multiLineStrings,
         indentStatements = parserConfig.indentStatements !== false;
     var isOperatorChar = /[\|\^]/;
     var curPunc;

     function tokenBase(stream, state) {
       var ch = stream.next();
       if (ch == '"' || ch == "'") {
         state.tokenize = tokenString(ch);
         return state.tokenize(stream, state);
       }
       if (/[\[\]\(\){}:=,;]/.test(ch)) {
         curPunc = ch;
         return "punctuation";
       }
       if (ch == "-"){
         if (stream.eat("-")) {
           stream.skipToEnd();
           return "comment";
         }
       }
       if (/\d/.test(ch)) {
         stream.eatWhile(/[\w\.]/);
         return "number";
       }
       if (isOperatorChar.test(ch)) {
         stream.eatWhile(isOperatorChar);
         return "operator";
       }

       stream.eatWhile(/[\w\-]/);
       var cur = stream.current();
       if (keywords.propertyIsEnumerable(cur)) return "keyword";
       if (cmipVerbs.propertyIsEnumerable(cur)) return "variableName";
       if (compareTypes.propertyIsEnumerable(cur)) return "atom";
       if (status.propertyIsEnumerable(cur)) return "comment";
       if (tags.propertyIsEnumerable(cur)) return "typeName";
       if (storage.propertyIsEnumerable(cur)) return "modifier";
       if (modifier.propertyIsEnumerable(cur)) return "modifier";
       if (accessTypes.propertyIsEnumerable(cur)) return "modifier";

       return "variableName";
     }

     function tokenString(quote) {
       return function(stream, state) {
         var escaped = false, next, end = false;
         while ((next = stream.next()) != null) {
           if (next == quote && !escaped){
             var afterNext = stream.peek();
             //look if the character if the quote is like the B in '10100010'B
             if (afterNext){
               afterNext = afterNext.toLowerCase();
               if(afterNext == "b" || afterNext == "h" || afterNext == "o")
                 stream.next();
             }
             end = true; break;
           }
           escaped = !escaped && next == "\\";
         }
         if (end || !(escaped || multiLineStrings))
           state.tokenize = null;
         return "string";
       };
     }

     function Context(indented, column, type, align, prev) {
       this.indented = indented;
       this.column = column;
       this.type = type;
       this.align = align;
       this.prev = prev;
     }
     function pushContext(state, col, type) {
       var indent = state.indented;
       if (state.context && state.context.type == "statement")
         indent = state.context.indented;
       return state.context = new Context(indent, col, type, null, state.context);
     }
     function popContext(state) {
       var t = state.context.type;
       if (t == ")" || t == "]" || t == "}")
         state.indented = state.context.indented;
       return state.context = state.context.prev;
     }

     //Interface
     return {
       name: "asn1",
       startState: function() {
         return {
           tokenize: null,
           context: new Context(-2, 0, "top", false),
           indented: 0,
           startOfLine: true
         };
       },

       token: function(stream, state) {
         var ctx = state.context;
         if (stream.sol()) {
           if (ctx.align == null) ctx.align = false;
           state.indented = stream.indentation();
           state.startOfLine = true;
         }
         if (stream.eatSpace()) return null;
         curPunc = null;
         var style = (state.tokenize || tokenBase)(stream, state);
         if (style == "comment") return style;
         if (ctx.align == null) ctx.align = true;

         if ((curPunc == ";" || curPunc == ":" || curPunc == ",")
             && ctx.type == "statement"){
           popContext(state);
         }
         else if (curPunc == "{") pushContext(state, stream.column(), "}");
         else if (curPunc == "[") pushContext(state, stream.column(), "]");
         else if (curPunc == "(") pushContext(state, stream.column(), ")");
         else if (curPunc == "}") {
           while (ctx.type == "statement") ctx = popContext(state);
           if (ctx.type == "}") ctx = popContext(state);
           while (ctx.type == "statement") ctx = popContext(state);
         }
         else if (curPunc == ctx.type) popContext(state);
         else if (indentStatements && (((ctx.type == "}" || ctx.type == "top")
                                        && curPunc != ';') || (ctx.type == "statement"
                                                               && curPunc == "newstatement")))
           pushContext(state, stream.column(), "statement");

         state.startOfLine = false;
         return style;
       },

       languageData: {
         indentOnInput: /^\s*[{}]$/,
         commentTokens: {line: "--"}
       }
     };
   }

   var asn1$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      asn1: asn1
   });

   var atoms$f    = ["exten", "same", "include","ignorepat","switch"],
       dpcmd    = ["#include","#exec"],
       apps     = [
         "addqueuemember","adsiprog","aelsub","agentlogin","agentmonitoroutgoing","agi",
         "alarmreceiver","amd","answer","authenticate","background","backgrounddetect",
         "bridge","busy","callcompletioncancel","callcompletionrequest","celgenuserevent",
         "changemonitor","chanisavail","channelredirect","chanspy","clearhash","confbridge",
         "congestion","continuewhile","controlplayback","dahdiacceptr2call","dahdibarge",
         "dahdiras","dahdiscan","dahdisendcallreroutingfacility","dahdisendkeypadfacility",
         "datetime","dbdel","dbdeltree","deadagi","dial","dictate","directory","disa",
         "dumpchan","eagi","echo","endwhile","exec","execif","execiftime","exitwhile","extenspy",
         "externalivr","festival","flash","followme","forkcdr","getcpeid","gosub","gosubif",
         "goto","gotoif","gotoiftime","hangup","iax2provision","ices","importvar","incomplete",
         "ivrdemo","jabberjoin","jabberleave","jabbersend","jabbersendgroup","jabberstatus",
         "jack","log","macro","macroexclusive","macroexit","macroif","mailboxexists","meetme",
         "meetmeadmin","meetmechanneladmin","meetmecount","milliwatt","minivmaccmess","minivmdelete",
         "minivmgreet","minivmmwi","minivmnotify","minivmrecord","mixmonitor","monitor","morsecode",
         "mp3player","mset","musiconhold","nbscat","nocdr","noop","odbc","odbc","odbcfinish",
         "originate","ospauth","ospfinish","osplookup","ospnext","page","park","parkandannounce",
         "parkedcall","pausemonitor","pausequeuemember","pickup","pickupchan","playback","playtones",
         "privacymanager","proceeding","progress","queue","queuelog","raiseexception","read","readexten",
         "readfile","receivefax","receivefax","receivefax","record","removequeuemember",
         "resetcdr","retrydial","return","ringing","sayalpha","saycountedadj","saycountednoun",
         "saycountpl","saydigits","saynumber","sayphonetic","sayunixtime","senddtmf","sendfax",
         "sendfax","sendfax","sendimage","sendtext","sendurl","set","setamaflags",
         "setcallerpres","setmusiconhold","sipaddheader","sipdtmfmode","sipremoveheader","skel",
         "slastation","slatrunk","sms","softhangup","speechactivategrammar","speechbackground",
         "speechcreate","speechdeactivategrammar","speechdestroy","speechloadgrammar","speechprocessingsound",
         "speechstart","speechunloadgrammar","stackpop","startmusiconhold","stopmixmonitor","stopmonitor",
         "stopmusiconhold","stopplaytones","system","testclient","testserver","transfer","tryexec",
         "trysystem","unpausemonitor","unpausequeuemember","userevent","verbose","vmauthenticate",
         "vmsayname","voicemail","voicemailmain","wait","waitexten","waitfornoise","waitforring",
         "waitforsilence","waitmusiconhold","waituntil","while","zapateller"
       ];

   function basicToken(stream,state){
     var cur = '';
     var ch = stream.next();
     // comment
     if (state.blockComment) {
       if (ch == "-" && stream.match("-;", true)) {
         state.blockComment = false;
       } else if (stream.skipTo("--;")) {
         stream.next();
         stream.next();
         stream.next();
         state.blockComment = false;
       } else {
         stream.skipToEnd();
       }
       return "comment";
     }
     if(ch == ";") {
       if (stream.match("--", true)) {
         if (!stream.match("-", false)) {  // Except ;--- is not a block comment
           state.blockComment = true;
           return "comment";
         }
       }
       stream.skipToEnd();
       return "comment";
     }
     // context
     if(ch == '[') {
       stream.skipTo(']');
       stream.eat(']');
       return "header";
     }
     // string
     if(ch == '"') {
       stream.skipTo('"');
       return "string";
     }
     if(ch == "'") {
       stream.skipTo("'");
       return "string.special";
     }
     // dialplan commands
     if(ch == '#') {
       stream.eatWhile(/\w/);
       cur = stream.current();
       if(dpcmd.indexOf(cur) !== -1) {
         stream.skipToEnd();
         return "strong";
       }
     }
     // application args
     if(ch == '$'){
       var ch1 = stream.peek();
       if(ch1 == '{'){
         stream.skipTo('}');
         stream.eat('}');
         return "variableName.special";
       }
     }
     // extension
     stream.eatWhile(/\w/);
     cur = stream.current();
     if(atoms$f.indexOf(cur) !== -1) {
       state.extenStart = true;
       switch(cur) {
       case 'same': state.extenSame = true; break;
       case 'include':
       case 'switch':
       case 'ignorepat':
         state.extenInclude = true;break;
       }
       return "atom";
     }
   }

   const asterisk = {
     name: "asterisk",
     startState: function() {
       return {
         blockComment: false,
         extenStart: false,
         extenSame:  false,
         extenInclude: false,
         extenExten: false,
         extenPriority: false,
         extenApplication: false
       };
     },
     token: function(stream, state) {

       var cur = '';
       if(stream.eatSpace()) return null;
       // extension started
       if(state.extenStart){
         stream.eatWhile(/[^\s]/);
         cur = stream.current();
         if(/^=>?$/.test(cur)){
           state.extenExten = true;
           state.extenStart = false;
           return "strong";
         } else {
           state.extenStart = false;
           stream.skipToEnd();
           return "error";
         }
       } else if(state.extenExten) {
         // set exten and priority
         state.extenExten = false;
         state.extenPriority = true;
         stream.eatWhile(/[^,]/);
         if(state.extenInclude) {
           stream.skipToEnd();
           state.extenPriority = false;
           state.extenInclude = false;
         }
         if(state.extenSame) {
           state.extenPriority = false;
           state.extenSame = false;
           state.extenApplication = true;
         }
         return "tag";
       } else if(state.extenPriority) {
         state.extenPriority = false;
         state.extenApplication = true;
         stream.next(); // get comma
         if(state.extenSame) return null;
         stream.eatWhile(/[^,]/);
         return "number";
       } else if(state.extenApplication) {
         stream.eatWhile(/,/);
         cur = stream.current();
         if(cur === ',') return null;
         stream.eatWhile(/\w/);
         cur = stream.current().toLowerCase();
         state.extenApplication = false;
         if(apps.indexOf(cur) !== -1){
           return "def";
         }
       } else {
         return basicToken(stream,state);
       }

       return null;
     },

     languageData: {
       commentTokens: {line: ";", block: {open: ";--", close: "--;"}}
     }
   };

   var asterisk$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      asterisk: asterisk
   });

   var reserve = "><+-.,[]".split("");
   /*
     comments can be either:
     placed behind lines

     +++    this is a comment

     where reserved characters cannot be used
     or in a loop
     [
     this is ok to use [ ] and stuff
     ]
     or preceded by #
   */
   const brainfuck = {
     name: "brainfuck",
     startState: function() {
       return {
         commentLine: false,
         left: 0,
         right: 0,
         commentLoop: false
       }
     },
     token: function(stream, state) {
       if (stream.eatSpace()) return null
       if(stream.sol()){
         state.commentLine = false;
       }
       var ch = stream.next().toString();
       if(reserve.indexOf(ch) !== -1){
         if(state.commentLine === true){
           if(stream.eol()){
             state.commentLine = false;
           }
           return "comment";
         }
         if(ch === "]" || ch === "["){
           if(ch === "["){
             state.left++;
           }
           else {
             state.right++;
           }
           return "bracket";
         }
         else if(ch === "+" || ch === "-"){
           return "keyword";
         }
         else if(ch === "<" || ch === ">"){
           return "atom";
         }
         else if(ch === "." || ch === ","){
           return "def";
         }
       }
       else {
         state.commentLine = true;
         if(stream.eol()){
           state.commentLine = false;
         }
         return "comment";
       }
       if(stream.eol()){
         state.commentLine = false;
       }
     }
   };

   var brainfuck$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      brainfuck: brainfuck
   });

   var BUILTIN$1 = "builtin", COMMENT$1 = "comment", STRING$1 = "string",
       ATOM$1 = "atom", NUMBER$1 = "number", KEYWORD = "keyword", MODTAG = "header",
       COBOLLINENUM = "def", PERIOD = "link";
   function makeKeywords$1(str) {
     var obj = {}, words = str.split(" ");
     for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
     return obj;
   }
   var atoms$e = makeKeywords$1("TRUE FALSE ZEROES ZEROS ZERO SPACES SPACE LOW-VALUE LOW-VALUES ");
   var keywords$F = makeKeywords$1(
     "ACCEPT ACCESS ACQUIRE ADD ADDRESS " +
       "ADVANCING AFTER ALIAS ALL ALPHABET " +
       "ALPHABETIC ALPHABETIC-LOWER ALPHABETIC-UPPER ALPHANUMERIC ALPHANUMERIC-EDITED " +
       "ALSO ALTER ALTERNATE AND ANY " +
       "ARE AREA AREAS ARITHMETIC ASCENDING " +
       "ASSIGN AT ATTRIBUTE AUTHOR AUTO " +
       "AUTO-SKIP AUTOMATIC B-AND B-EXOR B-LESS " +
       "B-NOT B-OR BACKGROUND-COLOR BACKGROUND-COLOUR BEEP " +
       "BEFORE BELL BINARY BIT BITS " +
       "BLANK BLINK BLOCK BOOLEAN BOTTOM " +
       "BY CALL CANCEL CD CF " +
       "CH CHARACTER CHARACTERS CLASS CLOCK-UNITS " +
       "CLOSE COBOL CODE CODE-SET COL " +
       "COLLATING COLUMN COMMA COMMIT COMMITMENT " +
       "COMMON COMMUNICATION COMP COMP-0 COMP-1 " +
       "COMP-2 COMP-3 COMP-4 COMP-5 COMP-6 " +
       "COMP-7 COMP-8 COMP-9 COMPUTATIONAL COMPUTATIONAL-0 " +
       "COMPUTATIONAL-1 COMPUTATIONAL-2 COMPUTATIONAL-3 COMPUTATIONAL-4 COMPUTATIONAL-5 " +
       "COMPUTATIONAL-6 COMPUTATIONAL-7 COMPUTATIONAL-8 COMPUTATIONAL-9 COMPUTE " +
       "CONFIGURATION CONNECT CONSOLE CONTAINED CONTAINS " +
       "CONTENT CONTINUE CONTROL CONTROL-AREA CONTROLS " +
       "CONVERTING COPY CORR CORRESPONDING COUNT " +
       "CRT CRT-UNDER CURRENCY CURRENT CURSOR " +
       "DATA DATE DATE-COMPILED DATE-WRITTEN DAY " +
       "DAY-OF-WEEK DB DB-ACCESS-CONTROL-KEY DB-DATA-NAME DB-EXCEPTION " +
       "DB-FORMAT-NAME DB-RECORD-NAME DB-SET-NAME DB-STATUS DBCS " +
       "DBCS-EDITED DE DEBUG-CONTENTS DEBUG-ITEM DEBUG-LINE " +
       "DEBUG-NAME DEBUG-SUB-1 DEBUG-SUB-2 DEBUG-SUB-3 DEBUGGING " +
       "DECIMAL-POINT DECLARATIVES DEFAULT DELETE DELIMITED " +
       "DELIMITER DEPENDING DESCENDING DESCRIBED DESTINATION " +
       "DETAIL DISABLE DISCONNECT DISPLAY DISPLAY-1 " +
       "DISPLAY-2 DISPLAY-3 DISPLAY-4 DISPLAY-5 DISPLAY-6 " +
       "DISPLAY-7 DISPLAY-8 DISPLAY-9 DIVIDE DIVISION " +
       "DOWN DROP DUPLICATE DUPLICATES DYNAMIC " +
       "EBCDIC EGI EJECT ELSE EMI " +
       "EMPTY EMPTY-CHECK ENABLE END END. END-ACCEPT END-ACCEPT. " +
       "END-ADD END-CALL END-COMPUTE END-DELETE END-DISPLAY " +
       "END-DIVIDE END-EVALUATE END-IF END-INVOKE END-MULTIPLY " +
       "END-OF-PAGE END-PERFORM END-READ END-RECEIVE END-RETURN " +
       "END-REWRITE END-SEARCH END-START END-STRING END-SUBTRACT " +
       "END-UNSTRING END-WRITE END-XML ENTER ENTRY " +
       "ENVIRONMENT EOP EQUAL EQUALS ERASE " +
       "ERROR ESI EVALUATE EVERY EXCEEDS " +
       "EXCEPTION EXCLUSIVE EXIT EXTEND EXTERNAL " +
       "EXTERNALLY-DESCRIBED-KEY FD FETCH FILE FILE-CONTROL " +
       "FILE-STREAM FILES FILLER FINAL FIND " +
       "FINISH FIRST FOOTING FOR FOREGROUND-COLOR " +
       "FOREGROUND-COLOUR FORMAT FREE FROM FULL " +
       "FUNCTION GENERATE GET GIVING GLOBAL " +
       "GO GOBACK GREATER GROUP HEADING " +
       "HIGH-VALUE HIGH-VALUES HIGHLIGHT I-O I-O-CONTROL " +
       "ID IDENTIFICATION IF IN INDEX " +
       "INDEX-1 INDEX-2 INDEX-3 INDEX-4 INDEX-5 " +
       "INDEX-6 INDEX-7 INDEX-8 INDEX-9 INDEXED " +
       "INDIC INDICATE INDICATOR INDICATORS INITIAL " +
       "INITIALIZE INITIATE INPUT INPUT-OUTPUT INSPECT " +
       "INSTALLATION INTO INVALID INVOKE IS " +
       "JUST JUSTIFIED KANJI KEEP KEY " +
       "LABEL LAST LD LEADING LEFT " +
       "LEFT-JUSTIFY LENGTH LENGTH-CHECK LESS LIBRARY " +
       "LIKE LIMIT LIMITS LINAGE LINAGE-COUNTER " +
       "LINE LINE-COUNTER LINES LINKAGE LOCAL-STORAGE " +
       "LOCALE LOCALLY LOCK " +
       "MEMBER MEMORY MERGE MESSAGE METACLASS " +
       "MODE MODIFIED MODIFY MODULES MOVE " +
       "MULTIPLE MULTIPLY NATIONAL NATIVE NEGATIVE " +
       "NEXT NO NO-ECHO NONE NOT " +
       "NULL NULL-KEY-MAP NULL-MAP NULLS NUMBER " +
       "NUMERIC NUMERIC-EDITED OBJECT OBJECT-COMPUTER OCCURS " +
       "OF OFF OMITTED ON ONLY " +
       "OPEN OPTIONAL OR ORDER ORGANIZATION " +
       "OTHER OUTPUT OVERFLOW OWNER PACKED-DECIMAL " +
       "PADDING PAGE PAGE-COUNTER PARSE PERFORM " +
       "PF PH PIC PICTURE PLUS " +
       "POINTER POSITION POSITIVE PREFIX PRESENT " +
       "PRINTING PRIOR PROCEDURE PROCEDURE-POINTER PROCEDURES " +
       "PROCEED PROCESS PROCESSING PROGRAM PROGRAM-ID " +
       "PROMPT PROTECTED PURGE QUEUE QUOTE " +
       "QUOTES RANDOM RD READ READY " +
       "REALM RECEIVE RECONNECT RECORD RECORD-NAME " +
       "RECORDS RECURSIVE REDEFINES REEL REFERENCE " +
       "REFERENCE-MONITOR REFERENCES RELATION RELATIVE RELEASE " +
       "REMAINDER REMOVAL RENAMES REPEATED REPLACE " +
       "REPLACING REPORT REPORTING REPORTS REPOSITORY " +
       "REQUIRED RERUN RESERVE RESET RETAINING " +
       "RETRIEVAL RETURN RETURN-CODE RETURNING REVERSE-VIDEO " +
       "REVERSED REWIND REWRITE RF RH " +
       "RIGHT RIGHT-JUSTIFY ROLLBACK ROLLING ROUNDED " +
       "RUN SAME SCREEN SD SEARCH " +
       "SECTION SECURE SECURITY SEGMENT SEGMENT-LIMIT " +
       "SELECT SEND SENTENCE SEPARATE SEQUENCE " +
       "SEQUENTIAL SET SHARED SIGN SIZE " +
       "SKIP1 SKIP2 SKIP3 SORT SORT-MERGE " +
       "SORT-RETURN SOURCE SOURCE-COMPUTER SPACE-FILL " +
       "SPECIAL-NAMES STANDARD STANDARD-1 STANDARD-2 " +
       "START STARTING STATUS STOP STORE " +
       "STRING SUB-QUEUE-1 SUB-QUEUE-2 SUB-QUEUE-3 SUB-SCHEMA " +
       "SUBFILE SUBSTITUTE SUBTRACT SUM SUPPRESS " +
       "SYMBOLIC SYNC SYNCHRONIZED SYSIN SYSOUT " +
       "TABLE TALLYING TAPE TENANT TERMINAL " +
       "TERMINATE TEST TEXT THAN THEN " +
       "THROUGH THRU TIME TIMES TITLE " +
       "TO TOP TRAILING TRAILING-SIGN TRANSACTION " +
       "TYPE TYPEDEF UNDERLINE UNEQUAL UNIT " +
       "UNSTRING UNTIL UP UPDATE UPON " +
       "USAGE USAGE-MODE USE USING VALID " +
       "VALIDATE VALUE VALUES VARYING VLR " +
       "WAIT WHEN WHEN-COMPILED WITH WITHIN " +
       "WORDS WORKING-STORAGE WRITE XML XML-CODE " +
       "XML-EVENT XML-NTEXT XML-TEXT ZERO ZERO-FILL " );

   var builtins$9 = makeKeywords$1("- * ** / + < <= = > >= ");
   var tests = {
     digit: /\d/,
     digit_or_colon: /[\d:]/,
     hex: /[0-9a-f]/i,
     sign: /[+-]/,
     exponent: /e/i,
     keyword_char: /[^\s\(\[\;\)\]]/,
     symbol: /[\w*+\-]/
   };
   function isNumber$1(ch, stream){
     // hex
     if ( ch === '0' && stream.eat(/x/i) ) {
       stream.eatWhile(tests.hex);
       return true;
     }
     // leading sign
     if ( ( ch == '+' || ch == '-' ) && ( tests.digit.test(stream.peek()) ) ) {
       stream.eat(tests.sign);
       ch = stream.next();
     }
     if ( tests.digit.test(ch) ) {
       stream.eat(ch);
       stream.eatWhile(tests.digit);
       if ( '.' == stream.peek()) {
         stream.eat('.');
         stream.eatWhile(tests.digit);
       }
       if ( stream.eat(tests.exponent) ) {
         stream.eat(tests.sign);
         stream.eatWhile(tests.digit);
       }
       return true;
     }
     return false;
   }
   const cobol = {
     name: "cobol",
     startState: function () {
       return {
         indentStack: null,
         indentation: 0,
         mode: false
       };
     },
     token: function (stream, state) {
       if (state.indentStack == null && stream.sol()) {
         // update indentation, but only if indentStack is empty
         state.indentation = 6 ; //stream.indentation();
       }
       // skip spaces
       if (stream.eatSpace()) {
         return null;
       }
       var returnType = null;
       switch(state.mode){
       case "string": // multi-line string parsing mode
         var next = false;
         while ((next = stream.next()) != null) {
           if ((next == "\"" || next == "\'") && !stream.match(/['"]/, false)) {
             state.mode = false;
             break;
           }
         }
         returnType = STRING$1; // continue on in string mode
         break;
       default: // default parsing mode
         var ch = stream.next();
         var col = stream.column();
         if (col >= 0 && col <= 5) {
           returnType = COBOLLINENUM;
         } else if (col >= 72 && col <= 79) {
           stream.skipToEnd();
           returnType = MODTAG;
         } else if (ch == "*" && col == 6) { // comment
           stream.skipToEnd(); // rest of the line is a comment
           returnType = COMMENT$1;
         } else if (ch == "\"" || ch == "\'") {
           state.mode = "string";
           returnType = STRING$1;
         } else if (ch == "'" && !( tests.digit_or_colon.test(stream.peek()) )) {
           returnType = ATOM$1;
         } else if (ch == ".") {
           returnType = PERIOD;
         } else if (isNumber$1(ch,stream)){
           returnType = NUMBER$1;
         } else {
           if (stream.current().match(tests.symbol)) {
             while (col < 71) {
               if (stream.eat(tests.symbol) === undefined) {
                 break;
               } else {
                 col++;
               }
             }
           }
           if (keywords$F && keywords$F.propertyIsEnumerable(stream.current().toUpperCase())) {
             returnType = KEYWORD;
           } else if (builtins$9 && builtins$9.propertyIsEnumerable(stream.current().toUpperCase())) {
             returnType = BUILTIN$1;
           } else if (atoms$e && atoms$e.propertyIsEnumerable(stream.current().toUpperCase())) {
             returnType = ATOM$1;
           } else returnType = null;
         }
       }
       return returnType;
     },
     indent: function (state) {
       if (state.indentStack == null) return state.indentation;
       return state.indentStack.indent;
     }
   };

   var cobol$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      cobol: cobol
   });

   function Context$b(indented, column, type, info, align, prev) {
     this.indented = indented;
     this.column = column;
     this.type = type;
     this.info = info;
     this.align = align;
     this.prev = prev;
   }
   function pushContext$f(state, col, type, info) {
     var indent = state.indented;
     if (state.context && state.context.type == "statement" && type != "statement")
       indent = state.context.indented;
     return state.context = new Context$b(indent, col, type, info, null, state.context);
   }
   function popContext$f(state) {
     var t = state.context.type;
     if (t == ")" || t == "]" || t == "}")
       state.indented = state.context.indented;
     return state.context = state.context.prev;
   }

   function typeBefore(stream, state, pos) {
     if (state.prevToken == "variable" || state.prevToken == "type") return true;
     if (/\S(?:[^- ]>|[*\]])\s*$|\*$/.test(stream.string.slice(0, pos))) return true;
     if (state.typeAtEndOfLine && stream.column() == stream.indentation()) return true;
   }

   function isTopScope(context) {
     for (;;) {
       if (!context || context.type == "top") return true;
       if (context.type == "}" && context.prev.info != "namespace") return false;
       context = context.prev;
     }
   }

   function clike(parserConfig) {
     var statementIndentUnit = parserConfig.statementIndentUnit,
         dontAlignCalls = parserConfig.dontAlignCalls,
         keywords = parserConfig.keywords || {},
         types = parserConfig.types || {},
         builtin = parserConfig.builtin || {},
         blockKeywords = parserConfig.blockKeywords || {},
         defKeywords = parserConfig.defKeywords || {},
         atoms = parserConfig.atoms || {},
         hooks = parserConfig.hooks || {},
         multiLineStrings = parserConfig.multiLineStrings,
         indentStatements = parserConfig.indentStatements !== false,
         indentSwitch = parserConfig.indentSwitch !== false,
         namespaceSeparator = parserConfig.namespaceSeparator,
         isPunctuationChar = parserConfig.isPunctuationChar || /[\[\]{}\(\),;\:\.]/,
         numberStart = parserConfig.numberStart || /[\d\.]/,
         number = parserConfig.number || /^(?:0x[a-f\d]+|0b[01]+|(?:\d+\.?\d*|\.\d+)(?:e[-+]?\d+)?)(u|ll?|l|f)?/i,
         isOperatorChar = parserConfig.isOperatorChar || /[+\-*&%=<>!?|\/]/,
         isIdentifierChar = parserConfig.isIdentifierChar || /[\w\$_\xa1-\uffff]/,
         // An optional function that takes a {string} token and returns true if it
         // should be treated as a builtin.
         isReservedIdentifier = parserConfig.isReservedIdentifier || false;

     var curPunc, isDefKeyword;

     function tokenBase(stream, state) {
       var ch = stream.next();
       if (hooks[ch]) {
         var result = hooks[ch](stream, state);
         if (result !== false) return result;
       }
       if (ch == '"' || ch == "'") {
         state.tokenize = tokenString(ch);
         return state.tokenize(stream, state);
       }
       if (numberStart.test(ch)) {
         stream.backUp(1);
         if (stream.match(number)) return "number"
         stream.next();
       }
       if (isPunctuationChar.test(ch)) {
         curPunc = ch;
         return null;
       }
       if (ch == "/") {
         if (stream.eat("*")) {
           state.tokenize = tokenComment;
           return tokenComment(stream, state);
         }
         if (stream.eat("/")) {
           stream.skipToEnd();
           return "comment";
         }
       }
       if (isOperatorChar.test(ch)) {
         while (!stream.match(/^\/[\/*]/, false) && stream.eat(isOperatorChar)) {}
         return "operator";
       }
       stream.eatWhile(isIdentifierChar);
       if (namespaceSeparator) while (stream.match(namespaceSeparator))
         stream.eatWhile(isIdentifierChar);

       var cur = stream.current();
       if (contains(keywords, cur)) {
         if (contains(blockKeywords, cur)) curPunc = "newstatement";
         if (contains(defKeywords, cur)) isDefKeyword = true;
         return "keyword";
       }
       if (contains(types, cur)) return "type";
       if (contains(builtin, cur)
           || (isReservedIdentifier && isReservedIdentifier(cur))) {
         if (contains(blockKeywords, cur)) curPunc = "newstatement";
         return "builtin";
       }
       if (contains(atoms, cur)) return "atom";
       return "variable";
     }

     function tokenString(quote) {
       return function(stream, state) {
         var escaped = false, next, end = false;
         while ((next = stream.next()) != null) {
           if (next == quote && !escaped) {end = true; break;}
           escaped = !escaped && next == "\\";
         }
         if (end || !(escaped || multiLineStrings))
           state.tokenize = null;
         return "string";
       };
     }

     function tokenComment(stream, state) {
       var maybeEnd = false, ch;
       while (ch = stream.next()) {
         if (ch == "/" && maybeEnd) {
           state.tokenize = null;
           break;
         }
         maybeEnd = (ch == "*");
       }
       return "comment";
     }

     function maybeEOL(stream, state) {
       if (parserConfig.typeFirstDefinitions && stream.eol() && isTopScope(state.context))
         state.typeAtEndOfLine = typeBefore(stream, state, stream.pos);
     }

     // Interface

     return {
       name: parserConfig.name,
       startState: function(indentUnit) {
         return {
           tokenize: null,
           context: new Context$b(-indentUnit, 0, "top", null, false),
           indented: 0,
           startOfLine: true,
           prevToken: null
         };
       },

       token: function(stream, state) {
         var ctx = state.context;
         if (stream.sol()) {
           if (ctx.align == null) ctx.align = false;
           state.indented = stream.indentation();
           state.startOfLine = true;
         }
         if (stream.eatSpace()) { maybeEOL(stream, state); return null; }
         curPunc = isDefKeyword = null;
         var style = (state.tokenize || tokenBase)(stream, state);
         if (style == "comment" || style == "meta") return style;
         if (ctx.align == null) ctx.align = true;

         if (curPunc == ";" || curPunc == ":" || (curPunc == "," && stream.match(/^\s*(?:\/\/.*)?$/, false)))
           while (state.context.type == "statement") popContext$f(state);
         else if (curPunc == "{") pushContext$f(state, stream.column(), "}");
         else if (curPunc == "[") pushContext$f(state, stream.column(), "]");
         else if (curPunc == "(") pushContext$f(state, stream.column(), ")");
         else if (curPunc == "}") {
           while (ctx.type == "statement") ctx = popContext$f(state);
           if (ctx.type == "}") ctx = popContext$f(state);
           while (ctx.type == "statement") ctx = popContext$f(state);
         }
         else if (curPunc == ctx.type) popContext$f(state);
         else if (indentStatements &&
                  (((ctx.type == "}" || ctx.type == "top") && curPunc != ";") ||
                   (ctx.type == "statement" && curPunc == "newstatement"))) {
           pushContext$f(state, stream.column(), "statement", stream.current());
         }

         if (style == "variable" &&
             ((state.prevToken == "def" ||
               (parserConfig.typeFirstDefinitions && typeBefore(stream, state, stream.start) &&
                isTopScope(state.context) && stream.match(/^\s*\(/, false)))))
           style = "def";

         if (hooks.token) {
           var result = hooks.token(stream, state, style);
           if (result !== undefined) style = result;
         }

         if (style == "def" && parserConfig.styleDefs === false) style = "variable";

         state.startOfLine = false;
         state.prevToken = isDefKeyword ? "def" : style || curPunc;
         maybeEOL(stream, state);
         return style;
       },

       indent: function(state, textAfter, context) {
         if (state.tokenize != tokenBase && state.tokenize != null || state.typeAtEndOfLine) return null;
         var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);
         var closing = firstChar == ctx.type;
         if (ctx.type == "statement" && firstChar == "}") ctx = ctx.prev;
         if (parserConfig.dontIndentStatements)
           while (ctx.type == "statement" && parserConfig.dontIndentStatements.test(ctx.info))
             ctx = ctx.prev;
         if (hooks.indent) {
           var hook = hooks.indent(state, ctx, textAfter, context.unit);
           if (typeof hook == "number") return hook
         }
         var switchBlock = ctx.prev && ctx.prev.info == "switch";
         if (parserConfig.allmanIndentation && /[{(]/.test(firstChar)) {
           while (ctx.type != "top" && ctx.type != "}") ctx = ctx.prev;
           return ctx.indented
         }
         if (ctx.type == "statement")
           return ctx.indented + (firstChar == "{" ? 0 : statementIndentUnit || context.unit);
         if (ctx.align && (!dontAlignCalls || ctx.type != ")"))
           return ctx.column + (closing ? 0 : 1);
         if (ctx.type == ")" && !closing)
           return ctx.indented + (statementIndentUnit || context.unit);

         return ctx.indented + (closing ? 0 : context.unit) +
           (!closing && switchBlock && !/^(?:case|default)\b/.test(textAfter) ? context.unit : 0);
       },

       languageData: {
         indentOnInput: indentSwitch ? /^\s*(?:case .*?:|default:|\{\}?|\})$/ : /^\s*[{}]$/,
         commentTokens: {line: "//", block: {open: "/*", close: "*/"}},
         autocomplete: Object.keys(keywords).concat(Object.keys(types)).concat(Object.keys(builtin)).concat(Object.keys(atoms)),
         ...parserConfig.languageData
       }
     };
   }
   function words$j(str) {
     var obj = {}, words = str.split(" ");
     for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
     return obj;
   }
   function contains(words, word) {
     if (typeof words === "function") {
       return words(word);
     } else {
       return words.propertyIsEnumerable(word);
     }
   }
   var cKeywords = "auto if break case register continue return default do sizeof " +
       "static else struct switch extern typedef union for goto while enum const " +
       "volatile inline restrict asm fortran";

   // Keywords from https://en.cppreference.com/w/cpp/keyword includes C++20.
   var cppKeywords = "alignas alignof and and_eq audit axiom bitand bitor catch " +
       "class compl concept constexpr const_cast decltype delete dynamic_cast " +
       "explicit export final friend import module mutable namespace new noexcept " +
       "not not_eq operator or or_eq override private protected public " +
       "reinterpret_cast requires static_assert static_cast template this " +
       "thread_local throw try typeid typename using virtual xor xor_eq";

   var objCKeywords = "bycopy byref in inout oneway out self super atomic nonatomic retain copy " +
       "readwrite readonly strong weak assign typeof nullable nonnull null_resettable _cmd " +
       "@interface @implementation @end @protocol @encode @property @synthesize @dynamic @class " +
       "@public @package @private @protected @required @optional @try @catch @finally @import " +
       "@selector @encode @defs @synchronized @autoreleasepool @compatibility_alias @available";

   var objCBuiltins = "FOUNDATION_EXPORT FOUNDATION_EXTERN NS_INLINE NS_FORMAT_FUNCTION " +
       " NS_RETURNS_RETAINEDNS_ERROR_ENUM NS_RETURNS_NOT_RETAINED NS_RETURNS_INNER_POINTER " +
       "NS_DESIGNATED_INITIALIZER NS_ENUM NS_OPTIONS NS_REQUIRES_NIL_TERMINATION " +
       "NS_ASSUME_NONNULL_BEGIN NS_ASSUME_NONNULL_END NS_SWIFT_NAME NS_REFINED_FOR_SWIFT";

   // Do not use this. Use the cTypes function below. This is global just to avoid
   // excessive calls when cTypes is being called multiple times during a parse.
   var basicCTypes = words$j("int long char short double float unsigned signed " +
                           "void bool");

   // Do not use this. Use the objCTypes function below. This is global just to avoid
   // excessive calls when objCTypes is being called multiple times during a parse.
   var basicObjCTypes = words$j("SEL instancetype id Class Protocol BOOL");

   // Returns true if identifier is a "C" type.
   // C type is defined as those that are reserved by the compiler (basicTypes),
   // and those that end in _t (Reserved by POSIX for types)
   // http://www.gnu.org/software/libc/manual/html_node/Reserved-Names.html
   function cTypes(identifier) {
     return contains(basicCTypes, identifier) || /.+_t$/.test(identifier);
   }

   // Returns true if identifier is a "Objective C" type.
   function objCTypes(identifier) {
     return cTypes(identifier) || contains(basicObjCTypes, identifier);
   }

   var cBlockKeywords = "case do else for if switch while struct enum union";
   var cDefKeywords = "struct enum union";

   function cppHook(stream, state) {
     if (!state.startOfLine) return false
     for (var ch, next = null; ch = stream.peek();) {
       if (ch == "\\" && stream.match(/^.$/)) {
         next = cppHook;
         break
       } else if (ch == "/" && stream.match(/^\/[\/\*]/, false)) {
         break
       }
       stream.next();
     }
     state.tokenize = next;
     return "meta"
   }

   function pointerHook(_stream, state) {
     if (state.prevToken == "type") return "type";
     return false;
   }

   // For C and C++ (and ObjC): identifiers starting with __
   // or _ followed by a capital letter are reserved for the compiler.
   function cIsReservedIdentifier(token) {
     if (!token || token.length < 2) return false;
     if (token[0] != '_') return false;
     return (token[1] == '_') || (token[1] !== token[1].toLowerCase());
   }

   function cpp14Literal(stream) {
     stream.eatWhile(/[\w\.']/);
     return "number";
   }

   function cpp11StringHook(stream, state) {
     stream.backUp(1);
     // Raw strings.
     if (stream.match(/^(?:R|u8R|uR|UR|LR)/)) {
       var match = stream.match(/^"([^\s\\()]{0,16})\(/);
       if (!match) {
         return false;
       }
       state.cpp11RawStringDelim = match[1];
       state.tokenize = tokenRawString;
       return tokenRawString(stream, state);
     }
     // Unicode strings/chars.
     if (stream.match(/^(?:u8|u|U|L)/)) {
       if (stream.match(/^["']/, /* eat */ false)) {
         return "string";
       }
       return false;
     }
     // Ignore this hook.
     stream.next();
     return false;
   }

   function cppLooksLikeConstructor(word) {
     var lastTwo = /(\w+)::~?(\w+)$/.exec(word);
     return lastTwo && lastTwo[1] == lastTwo[2];
   }

   // C#-style strings where "" escapes a quote.
   function tokenAtString(stream, state) {
     var next;
     while ((next = stream.next()) != null) {
       if (next == '"' && !stream.eat('"')) {
         state.tokenize = null;
         break;
       }
     }
     return "string";
   }

   // C++11 raw string literal is <prefix>"<delim>( anything )<delim>", where
   // <delim> can be a string up to 16 characters long.
   function tokenRawString(stream, state) {
     // Escape characters that have special regex meanings.
     var delim = state.cpp11RawStringDelim.replace(/[^\w\s]/g, '\\$&');
     var match = stream.match(new RegExp(".*?\\)" + delim + '"'));
     if (match)
       state.tokenize = null;
     else
       stream.skipToEnd();
     return "string";
   }

   const c = clike({
     name: "c",
     keywords: words$j(cKeywords),
     types: cTypes,
     blockKeywords: words$j(cBlockKeywords),
     defKeywords: words$j(cDefKeywords),
     typeFirstDefinitions: true,
     atoms: words$j("NULL true false"),
     isReservedIdentifier: cIsReservedIdentifier,
     hooks: {
       "#": cppHook,
       "*": pointerHook,
     }
   });

   const cpp = clike({
     name: "cpp",
     keywords: words$j(cKeywords + " " + cppKeywords),
     types: cTypes,
     blockKeywords: words$j(cBlockKeywords + " class try catch"),
     defKeywords: words$j(cDefKeywords + " class namespace"),
     typeFirstDefinitions: true,
     atoms: words$j("true false NULL nullptr"),
     dontIndentStatements: /^template$/,
     isIdentifierChar: /[\w\$_~\xa1-\uffff]/,
     isReservedIdentifier: cIsReservedIdentifier,
     hooks: {
       "#": cppHook,
       "*": pointerHook,
       "u": cpp11StringHook,
       "U": cpp11StringHook,
       "L": cpp11StringHook,
       "R": cpp11StringHook,
       "0": cpp14Literal,
       "1": cpp14Literal,
       "2": cpp14Literal,
       "3": cpp14Literal,
       "4": cpp14Literal,
       "5": cpp14Literal,
       "6": cpp14Literal,
       "7": cpp14Literal,
       "8": cpp14Literal,
       "9": cpp14Literal,
       token: function(stream, state, style) {
         if (style == "variable" && stream.peek() == "(" &&
             (state.prevToken == ";" || state.prevToken == null ||
              state.prevToken == "}") &&
             cppLooksLikeConstructor(stream.current()))
           return "def";
       }
     },
     namespaceSeparator: "::"
   });

   const java = clike({
     name: "java",
     keywords: words$j("abstract assert break case catch class const continue default " +
                     "do else enum extends final finally for goto if implements import " +
                     "instanceof interface native new package private protected public " +
                     "return static strictfp super switch synchronized this throw throws transient " +
                     "try volatile while @interface"),
     types: words$j("var byte short int long float double boolean char void Boolean Byte Character Double Float " +
                  "Integer Long Number Object Short String StringBuffer StringBuilder Void"),
     blockKeywords: words$j("catch class do else finally for if switch try while"),
     defKeywords: words$j("class interface enum @interface"),
     typeFirstDefinitions: true,
     atoms: words$j("true false null"),
     number: /^(?:0x[a-f\d_]+|0b[01_]+|(?:[\d_]+\.?\d*|\.\d+)(?:e[-+]?[\d_]+)?)(u|ll?|l|f)?/i,
     hooks: {
       "@": function(stream) {
         // Don't match the @interface keyword.
         if (stream.match('interface', false)) return false;

         stream.eatWhile(/[\w\$_]/);
         return "meta";
       },
       '"': function(stream, state) {
         if (!stream.match(/""$/)) return false;
         state.tokenize = tokenTripleString;
         return state.tokenize(stream, state);
       }
     }
   });

   const csharp = clike({
     name: "csharp",
     keywords: words$j("abstract as async await base break case catch checked class const continue" +
                     " default delegate do else enum event explicit extern finally fixed for" +
                     " foreach goto if implicit in interface internal is lock namespace new" +
                     " operator out override params private protected public readonly ref return sealed" +
                     " sizeof stackalloc static struct switch this throw try typeof unchecked" +
                     " unsafe using virtual void volatile while add alias ascending descending dynamic from get" +
                     " global group into join let orderby partial remove select set value var yield"),
     types: words$j("Action Boolean Byte Char DateTime DateTimeOffset Decimal Double Func" +
                  " Guid Int16 Int32 Int64 Object SByte Single String Task TimeSpan UInt16 UInt32" +
                  " UInt64 bool byte char decimal double short int long object"  +
                  " sbyte float string ushort uint ulong"),
     blockKeywords: words$j("catch class do else finally for foreach if struct switch try while"),
     defKeywords: words$j("class interface namespace struct var"),
     typeFirstDefinitions: true,
     atoms: words$j("true false null"),
     hooks: {
       "@": function(stream, state) {
         if (stream.eat('"')) {
           state.tokenize = tokenAtString;
           return tokenAtString(stream, state);
         }
         stream.eatWhile(/[\w\$_]/);
         return "meta";
       }
     }
   });

   function tokenTripleString(stream, state) {
     var escaped = false;
     while (!stream.eol()) {
       if (!escaped && stream.match('"""')) {
         state.tokenize = null;
         break;
       }
       escaped = stream.next() == "\\" && !escaped;
     }
     return "string";
   }

   function tokenNestedComment$1(depth) {
     return function (stream, state) {
       var ch;
       while (ch = stream.next()) {
         if (ch == "*" && stream.eat("/")) {
           if (depth == 1) {
             state.tokenize = null;
             break
           } else {
             state.tokenize = tokenNestedComment$1(depth - 1);
             return state.tokenize(stream, state)
           }
         } else if (ch == "/" && stream.eat("*")) {
           state.tokenize = tokenNestedComment$1(depth + 1);
           return state.tokenize(stream, state)
         }
       }
       return "comment"
     }
   }

   const scala = clike({
     name: "scala",
     keywords: words$j(
       /* scala */
       "abstract case catch class def do else extends final finally for forSome if " +
         "implicit import lazy match new null object override package private protected return " +
         "sealed super this throw trait try type val var while with yield _ " +

       /* package scala */
       "assert assume require print println printf readLine readBoolean readByte readShort " +
         "readChar readInt readLong readFloat readDouble"
     ),
     types: words$j(
       "AnyVal App Application Array BufferedIterator BigDecimal BigInt Char Console Either " +
         "Enumeration Equiv Error Exception Fractional Function IndexedSeq Int Integral Iterable " +
         "Iterator List Map Numeric Nil NotNull Option Ordered Ordering PartialFunction PartialOrdering " +
         "Product Proxy Range Responder Seq Serializable Set Specializable Stream StringBuilder " +
         "StringContext Symbol Throwable Traversable TraversableOnce Tuple Unit Vector " +

       /* package java.lang */
       "Boolean Byte Character CharSequence Class ClassLoader Cloneable Comparable " +
         "Compiler Double Exception Float Integer Long Math Number Object Package Pair Process " +
         "Runtime Runnable SecurityManager Short StackTraceElement StrictMath String " +
         "StringBuffer System Thread ThreadGroup ThreadLocal Throwable Triple Void"
     ),
     multiLineStrings: true,
     blockKeywords: words$j("catch class enum do else finally for forSome if match switch try while"),
     defKeywords: words$j("class enum def object package trait type val var"),
     atoms: words$j("true false null"),
     indentStatements: false,
     indentSwitch: false,
     isOperatorChar: /[+\-*&%=<>!?|\/#:@]/,
     hooks: {
       "@": function(stream) {
         stream.eatWhile(/[\w\$_]/);
         return "meta";
       },
       '"': function(stream, state) {
         if (!stream.match('""')) return false;
         state.tokenize = tokenTripleString;
         return state.tokenize(stream, state);
       },
       "'": function(stream) {
         if (stream.match(/^(\\[^'\s]+|[^\\'])'/)) return "character"
         stream.eatWhile(/[\w\$_\xa1-\uffff]/);
         return "atom";
       },
       "=": function(stream, state) {
         var cx = state.context;
         if (cx.type == "}" && cx.align && stream.eat(">")) {
           state.context = new Context$b(cx.indented, cx.column, cx.type, cx.info, null, cx.prev);
           return "operator"
         } else {
           return false
         }
       },

       "/": function(stream, state) {
         if (!stream.eat("*")) return false
         state.tokenize = tokenNestedComment$1(1);
         return state.tokenize(stream, state)
       }
     },
     languageData: {
       closeBrackets: {brackets: ["(", "[", "{", "'", '"', '"""']}
     }
   });

   function tokenKotlinString(tripleString){
     return function (stream, state) {
       var escaped = false, next, end = false;
       while (!stream.eol()) {
         if (!tripleString && !escaped && stream.match('"') ) {end = true; break;}
         if (tripleString && stream.match('"""')) {end = true; break;}
         next = stream.next();
         if(!escaped && next == "$" && stream.match('{'))
           stream.skipTo("}");
         escaped = !escaped && next == "\\" && !tripleString;
       }
       if (end || !tripleString)
         state.tokenize = null;
       return "string";
     }
   }

   const kotlin = clike({
     name: "kotlin",
     keywords: words$j(
       /*keywords*/
       "package as typealias class interface this super val operator " +
         "var fun for is in This throw return annotation " +
         "break continue object if else while do try when !in !is as? " +

       /*soft keywords*/
       "file import where by get set abstract enum open inner override private public internal " +
         "protected catch finally out final vararg reified dynamic companion constructor init " +
         "sealed field property receiver param sparam lateinit data inline noinline tailrec " +
         "external annotation crossinline const operator infix suspend actual expect setparam"
     ),
     types: words$j(
       /* package java.lang */
       "Boolean Byte Character CharSequence Class ClassLoader Cloneable Comparable " +
         "Compiler Double Exception Float Integer Long Math Number Object Package Pair Process " +
         "Runtime Runnable SecurityManager Short StackTraceElement StrictMath String " +
         "StringBuffer System Thread ThreadGroup ThreadLocal Throwable Triple Void Annotation Any BooleanArray " +
         "ByteArray Char CharArray DeprecationLevel DoubleArray Enum FloatArray Function Int IntArray Lazy " +
         "LazyThreadSafetyMode LongArray Nothing ShortArray Unit"
     ),
     intendSwitch: false,
     indentStatements: false,
     multiLineStrings: true,
     number: /^(?:0x[a-f\d_]+|0b[01_]+|(?:[\d_]+(\.\d+)?|\.\d+)(?:e[-+]?[\d_]+)?)(u|ll?|l|f)?/i,
     blockKeywords: words$j("catch class do else finally for if where try while enum"),
     defKeywords: words$j("class val var object interface fun"),
     atoms: words$j("true false null this"),
     hooks: {
       "@": function(stream) {
         stream.eatWhile(/[\w\$_]/);
         return "meta";
       },
       '*': function(_stream, state) {
         return state.prevToken == '.' ? 'variable' : 'operator';
       },
       '"': function(stream, state) {
         state.tokenize = tokenKotlinString(stream.match('""'));
         return state.tokenize(stream, state);
       },
       "/": function(stream, state) {
         if (!stream.eat("*")) return false;
         state.tokenize = tokenNestedComment$1(1);
         return state.tokenize(stream, state)
       },
       indent: function(state, ctx, textAfter, indentUnit) {
         var firstChar = textAfter && textAfter.charAt(0);
         if ((state.prevToken == "}" || state.prevToken == ")") && textAfter == "")
           return state.indented;
         if ((state.prevToken == "operator" && textAfter != "}" && state.context.type != "}") ||
             state.prevToken == "variable" && firstChar == "." ||
             (state.prevToken == "}" || state.prevToken == ")") && firstChar == ".")
           return indentUnit * 2 + ctx.indented;
         if (ctx.align && ctx.type == "}")
           return ctx.indented + (state.context.type == (textAfter || "").charAt(0) ? 0 : indentUnit);
       }
     },
     languageData: {
       closeBrackets: {brackets: ["(", "[", "{", "'", '"', '"""']}
     }
   });

   const shader = clike({
     name: "shader",
     keywords: words$j("sampler1D sampler2D sampler3D samplerCube " +
                     "sampler1DShadow sampler2DShadow " +
                     "const attribute uniform varying " +
                     "break continue discard return " +
                     "for while do if else struct " +
                     "in out inout"),
     types: words$j("float int bool void " +
                  "vec2 vec3 vec4 ivec2 ivec3 ivec4 bvec2 bvec3 bvec4 " +
                  "mat2 mat3 mat4"),
     blockKeywords: words$j("for while do if else struct"),
     builtin: words$j("radians degrees sin cos tan asin acos atan " +
                    "pow exp log exp2 sqrt inversesqrt " +
                    "abs sign floor ceil fract mod min max clamp mix step smoothstep " +
                    "length distance dot cross normalize ftransform faceforward " +
                    "reflect refract matrixCompMult " +
                    "lessThan lessThanEqual greaterThan greaterThanEqual " +
                    "equal notEqual any all not " +
                    "texture1D texture1DProj texture1DLod texture1DProjLod " +
                    "texture2D texture2DProj texture2DLod texture2DProjLod " +
                    "texture3D texture3DProj texture3DLod texture3DProjLod " +
                    "textureCube textureCubeLod " +
                    "shadow1D shadow2D shadow1DProj shadow2DProj " +
                    "shadow1DLod shadow2DLod shadow1DProjLod shadow2DProjLod " +
                    "dFdx dFdy fwidth " +
                    "noise1 noise2 noise3 noise4"),
     atoms: words$j("true false " +
                  "gl_FragColor gl_SecondaryColor gl_Normal gl_Vertex " +
                  "gl_MultiTexCoord0 gl_MultiTexCoord1 gl_MultiTexCoord2 gl_MultiTexCoord3 " +
                  "gl_MultiTexCoord4 gl_MultiTexCoord5 gl_MultiTexCoord6 gl_MultiTexCoord7 " +
                  "gl_FogCoord gl_PointCoord " +
                  "gl_Position gl_PointSize gl_ClipVertex " +
                  "gl_FrontColor gl_BackColor gl_FrontSecondaryColor gl_BackSecondaryColor " +
                  "gl_TexCoord gl_FogFragCoord " +
                  "gl_FragCoord gl_FrontFacing " +
                  "gl_FragData gl_FragDepth " +
                  "gl_ModelViewMatrix gl_ProjectionMatrix gl_ModelViewProjectionMatrix " +
                  "gl_TextureMatrix gl_NormalMatrix gl_ModelViewMatrixInverse " +
                  "gl_ProjectionMatrixInverse gl_ModelViewProjectionMatrixInverse " +
                  "gl_TextureMatrixTranspose gl_ModelViewMatrixInverseTranspose " +
                  "gl_ProjectionMatrixInverseTranspose " +
                  "gl_ModelViewProjectionMatrixInverseTranspose " +
                  "gl_TextureMatrixInverseTranspose " +
                  "gl_NormalScale gl_DepthRange gl_ClipPlane " +
                  "gl_Point gl_FrontMaterial gl_BackMaterial gl_LightSource gl_LightModel " +
                  "gl_FrontLightModelProduct gl_BackLightModelProduct " +
                  "gl_TextureColor gl_EyePlaneS gl_EyePlaneT gl_EyePlaneR gl_EyePlaneQ " +
                  "gl_FogParameters " +
                  "gl_MaxLights gl_MaxClipPlanes gl_MaxTextureUnits gl_MaxTextureCoords " +
                  "gl_MaxVertexAttribs gl_MaxVertexUniformComponents gl_MaxVaryingFloats " +
                  "gl_MaxVertexTextureImageUnits gl_MaxTextureImageUnits " +
                  "gl_MaxFragmentUniformComponents gl_MaxCombineTextureImageUnits " +
                  "gl_MaxDrawBuffers"),
     indentSwitch: false,
     hooks: {"#": cppHook}
   });

   const nesC = clike({
     name: "nesc",
     keywords: words$j(cKeywords + " as atomic async call command component components configuration event generic " +
                     "implementation includes interface module new norace nx_struct nx_union post provides " +
                     "signal task uses abstract extends"),
     types: cTypes,
     blockKeywords: words$j(cBlockKeywords),
     atoms: words$j("null true false"),
     hooks: {"#": cppHook}
   });

   const objectiveC = clike({
     name: "objectivec",
     keywords: words$j(cKeywords + " " + objCKeywords),
     types: objCTypes,
     builtin: words$j(objCBuiltins),
     blockKeywords: words$j(cBlockKeywords + " @synthesize @try @catch @finally @autoreleasepool @synchronized"),
     defKeywords: words$j(cDefKeywords + " @interface @implementation @protocol @class"),
     dontIndentStatements: /^@.*$/,
     typeFirstDefinitions: true,
     atoms: words$j("YES NO NULL Nil nil true false nullptr"),
     isReservedIdentifier: cIsReservedIdentifier,
     hooks: {
       "#": cppHook,
       "*": pointerHook,
     }
   });

   const objectiveCpp = clike({
     name: "objectivecpp",
     keywords: words$j(cKeywords + " " + objCKeywords + " " + cppKeywords),
     types: objCTypes,
     builtin: words$j(objCBuiltins),
     blockKeywords: words$j(cBlockKeywords + " @synthesize @try @catch @finally @autoreleasepool @synchronized class try catch"),
     defKeywords: words$j(cDefKeywords + " @interface @implementation @protocol @class class namespace"),
     dontIndentStatements: /^@.*$|^template$/,
     typeFirstDefinitions: true,
     atoms: words$j("YES NO NULL Nil nil true false nullptr"),
     isReservedIdentifier: cIsReservedIdentifier,
     hooks: {
       "#": cppHook,
       "*": pointerHook,
       "u": cpp11StringHook,
       "U": cpp11StringHook,
       "L": cpp11StringHook,
       "R": cpp11StringHook,
       "0": cpp14Literal,
       "1": cpp14Literal,
       "2": cpp14Literal,
       "3": cpp14Literal,
       "4": cpp14Literal,
       "5": cpp14Literal,
       "6": cpp14Literal,
       "7": cpp14Literal,
       "8": cpp14Literal,
       "9": cpp14Literal,
       token: function(stream, state, style) {
         if (style == "variable" && stream.peek() == "(" &&
             (state.prevToken == ";" || state.prevToken == null ||
              state.prevToken == "}") &&
             cppLooksLikeConstructor(stream.current()))
           return "def";
       }
     },
     namespaceSeparator: "::"
   });

   const squirrel = clike({
     name: "squirrel",
     keywords: words$j("base break clone continue const default delete enum extends function in class" +
                     " foreach local resume return this throw typeof yield constructor instanceof static"),
     types: cTypes,
     blockKeywords: words$j("case catch class else for foreach if switch try while"),
     defKeywords: words$j("function local class"),
     typeFirstDefinitions: true,
     atoms: words$j("true false null"),
     hooks: {"#": cppHook}
   });

   // Ceylon Strings need to deal with interpolation
   var stringTokenizer = null;
   function tokenCeylonString(type) {
     return function(stream, state) {
       var escaped = false, next, end = false;
       while (!stream.eol()) {
         if (!escaped && stream.match('"') &&
             (type == "single" || stream.match('""'))) {
           end = true;
           break;
         }
         if (!escaped && stream.match('``')) {
           stringTokenizer = tokenCeylonString(type);
           end = true;
           break;
         }
         next = stream.next();
         escaped = type == "single" && !escaped && next == "\\";
       }
       if (end)
         state.tokenize = null;
       return "string";
     }
   }

   const ceylon = clike({
     name: "ceylon",
     keywords: words$j("abstracts alias assembly assert assign break case catch class continue dynamic else" +
                     " exists extends finally for function given if import in interface is let module new" +
                     " nonempty object of out outer package return satisfies super switch then this throw" +
                     " try value void while"),
     types: function(word) {
       // In Ceylon all identifiers that start with an uppercase are types
       var first = word.charAt(0);
       return (first === first.toUpperCase() && first !== first.toLowerCase());
     },
     blockKeywords: words$j("case catch class dynamic else finally for function if interface module new object switch try while"),
     defKeywords: words$j("class dynamic function interface module object package value"),
     builtin: words$j("abstract actual aliased annotation by default deprecated doc final formal late license" +
                    " native optional sealed see serializable shared suppressWarnings tagged throws variable"),
     isPunctuationChar: /[\[\]{}\(\),;\:\.`]/,
     isOperatorChar: /[+\-*&%=<>!?|^~:\/]/,
     numberStart: /[\d#$]/,
     number: /^(?:#[\da-fA-F_]+|\$[01_]+|[\d_]+[kMGTPmunpf]?|[\d_]+\.[\d_]+(?:[eE][-+]?\d+|[kMGTPmunpf]|)|)/i,
     multiLineStrings: true,
     typeFirstDefinitions: true,
     atoms: words$j("true false null larger smaller equal empty finished"),
     indentSwitch: false,
     styleDefs: false,
     hooks: {
       "@": function(stream) {
         stream.eatWhile(/[\w\$_]/);
         return "meta";
       },
       '"': function(stream, state) {
         state.tokenize = tokenCeylonString(stream.match('""') ? "triple" : "single");
         return state.tokenize(stream, state);
       },
       '`': function(stream, state) {
         if (!stringTokenizer || !stream.match('`')) return false;
         state.tokenize = stringTokenizer;
         stringTokenizer = null;
         return state.tokenize(stream, state);
       },
       "'": function(stream) {
         stream.eatWhile(/[\w\$_\xa1-\uffff]/);
         return "atom";
       },
       token: function(_stream, state, style) {
         if ((style == "variable" || style == "type") &&
             state.prevToken == ".") {
           return "variableName.special";
         }
       }
     },
     languageData: {
       closeBrackets: {brackets: ["(", "[", "{", "'", '"', '"""']}
     }
   });

   function pushInterpolationStack(state) {
     (state.interpolationStack || (state.interpolationStack = [])).push(state.tokenize);
   }

   function popInterpolationStack(state) {
     return (state.interpolationStack || (state.interpolationStack = [])).pop();
   }

   function sizeInterpolationStack(state) {
     return state.interpolationStack ? state.interpolationStack.length : 0;
   }

   function tokenDartString(quote, stream, state, raw) {
     var tripleQuoted = false;
     if (stream.eat(quote)) {
       if (stream.eat(quote)) tripleQuoted = true;
       else return "string"; //empty string
     }
     function tokenStringHelper(stream, state) {
       var escaped = false;
       while (!stream.eol()) {
         if (!raw && !escaped && stream.peek() == "$") {
           pushInterpolationStack(state);
           state.tokenize = tokenInterpolation$1;
           return "string";
         }
         var next = stream.next();
         if (next == quote && !escaped && (!tripleQuoted || stream.match(quote + quote))) {
           state.tokenize = null;
           break;
         }
         escaped = !raw && !escaped && next == "\\";
       }
       return "string";
     }
     state.tokenize = tokenStringHelper;
     return tokenStringHelper(stream, state);
   }

   function tokenInterpolation$1(stream, state) {
     stream.eat("$");
     if (stream.eat("{")) {
       // let clike handle the content of ${...},
       // we take over again when "}" appears (see hooks).
       state.tokenize = null;
     } else {
       state.tokenize = tokenInterpolationIdentifier;
     }
     return null;
   }

   function tokenInterpolationIdentifier(stream, state) {
     stream.eatWhile(/[\w_]/);
     state.tokenize = popInterpolationStack(state);
     return "variable";
   }

   const dart = clike({
     name: "dart",
     keywords: words$j("this super static final const abstract class extends external factory " +
                     "implements mixin get native set typedef with enum throw rethrow " +
                     "assert break case continue default in return new deferred async await covariant " +
                     "try catch finally do else for if switch while import library export " +
                     "part of show hide is as extension on yield late required"),
     blockKeywords: words$j("try catch finally do else for if switch while"),
     builtin: words$j("void bool num int double dynamic var String Null Never"),
     atoms: words$j("true false null"),
     hooks: {
       "@": function(stream) {
         stream.eatWhile(/[\w\$_\.]/);
         return "meta";
       },

       // custom string handling to deal with triple-quoted strings and string interpolation
       "'": function(stream, state) {
         return tokenDartString("'", stream, state, false);
       },
       "\"": function(stream, state) {
         return tokenDartString("\"", stream, state, false);
       },
       "r": function(stream, state) {
         var peek = stream.peek();
         if (peek == "'" || peek == "\"") {
           return tokenDartString(stream.next(), stream, state, true);
         }
         return false;
       },

       "}": function(_stream, state) {
         // "}" is end of interpolation, if interpolation stack is non-empty
         if (sizeInterpolationStack(state) > 0) {
           state.tokenize = popInterpolationStack(state);
           return null;
         }
         return false;
       },

       "/": function(stream, state) {
         if (!stream.eat("*")) return false
         state.tokenize = tokenNestedComment$1(1);
         return state.tokenize(stream, state)
       },
       token: function(stream, _, style) {
         if (style == "variable") {
           // Assume uppercase symbols are classes
           var isUpper = RegExp('^[_$]*[A-Z][a-zA-Z0-9_$]*$','g');
           if (isUpper.test(stream.current())) {
             return 'type';
           }
         }
       }
     }
   });

   var clike$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      c: c,
      ceylon: ceylon,
      clike: clike,
      cpp: cpp,
      csharp: csharp,
      dart: dart,
      java: java,
      kotlin: kotlin,
      nesC: nesC,
      objectiveC: objectiveC,
      objectiveCpp: objectiveCpp,
      scala: scala,
      shader: shader,
      squirrel: squirrel
   });

   var atoms$d = ["false", "nil", "true"];
   var specialForms = [".", "catch", "def", "do", "if", "monitor-enter",
                       "monitor-exit", "new", "quote", "recur", "set!", "throw", "try", "var"];
   var coreSymbols = ["*", "*'", "*1", "*2", "*3", "*agent*",
                      "*allow-unresolved-vars*", "*assert*", "*clojure-version*",
                      "*command-line-args*", "*compile-files*", "*compile-path*",
                      "*compiler-options*", "*data-readers*", "*default-data-reader-fn*", "*e",
                      "*err*", "*file*", "*flush-on-newline*", "*fn-loader*", "*in*",
                      "*math-context*", "*ns*", "*out*", "*print-dup*", "*print-length*",
                      "*print-level*", "*print-meta*", "*print-namespace-maps*",
                      "*print-readably*", "*read-eval*", "*reader-resolver*", "*source-path*",
                      "*suppress-read*", "*unchecked-math*", "*use-context-classloader*",
                      "*verbose-defrecords*", "*warn-on-reflection*", "+", "+'", "-", "-'",
                      "->", "->>", "->ArrayChunk", "->Eduction", "->Vec", "->VecNode",
                      "->VecSeq", "-cache-protocol-fn", "-reset-methods", "..", "/", "<", "<=",
                      "=", "==", ">", ">=", "EMPTY-NODE", "Inst", "StackTraceElement->vec",
                      "Throwable->map", "accessor", "aclone", "add-classpath", "add-watch",
                      "agent", "agent-error", "agent-errors", "aget", "alength", "alias",
                      "all-ns", "alter", "alter-meta!", "alter-var-root", "amap", "ancestors",
                      "and", "any?", "apply", "areduce", "array-map", "as->", "aset",
                      "aset-boolean", "aset-byte", "aset-char", "aset-double", "aset-float",
                      "aset-int", "aset-long", "aset-short", "assert", "assoc", "assoc!",
                      "assoc-in", "associative?", "atom", "await", "await-for", "await1",
                      "bases", "bean", "bigdec", "bigint", "biginteger", "binding", "bit-and",
                      "bit-and-not", "bit-clear", "bit-flip", "bit-not", "bit-or", "bit-set",
                      "bit-shift-left", "bit-shift-right", "bit-test", "bit-xor", "boolean",
                      "boolean-array", "boolean?", "booleans", "bound-fn", "bound-fn*",
                      "bound?", "bounded-count", "butlast", "byte", "byte-array", "bytes",
                      "bytes?", "case", "cast", "cat", "char", "char-array",
                      "char-escape-string", "char-name-string", "char?", "chars", "chunk",
                      "chunk-append", "chunk-buffer", "chunk-cons", "chunk-first", "chunk-next",
                      "chunk-rest", "chunked-seq?", "class", "class?", "clear-agent-errors",
                      "clojure-version", "coll?", "comment", "commute", "comp", "comparator",
                      "compare", "compare-and-set!", "compile", "complement", "completing",
                      "concat", "cond", "cond->", "cond->>", "condp", "conj", "conj!", "cons",
                      "constantly", "construct-proxy", "contains?", "count", "counted?",
                      "create-ns", "create-struct", "cycle", "dec", "dec'", "decimal?",
                      "declare", "dedupe", "default-data-readers", "definline", "definterface",
                      "defmacro", "defmethod", "defmulti", "defn", "defn-", "defonce",
                      "defprotocol", "defrecord", "defstruct", "deftype", "delay", "delay?",
                      "deliver", "denominator", "deref", "derive", "descendants", "destructure",
                      "disj", "disj!", "dissoc", "dissoc!", "distinct", "distinct?", "doall",
                      "dorun", "doseq", "dosync", "dotimes", "doto", "double", "double-array",
                      "double?", "doubles", "drop", "drop-last", "drop-while", "eduction",
                      "empty", "empty?", "ensure", "ensure-reduced", "enumeration-seq",
                      "error-handler", "error-mode", "eval", "even?", "every-pred", "every?",
                      "ex-data", "ex-info", "extend", "extend-protocol", "extend-type",
                      "extenders", "extends?", "false?", "ffirst", "file-seq", "filter",
                      "filterv", "find", "find-keyword", "find-ns", "find-protocol-impl",
                      "find-protocol-method", "find-var", "first", "flatten", "float",
                      "float-array", "float?", "floats", "flush", "fn", "fn?", "fnext", "fnil",
                      "for", "force", "format", "frequencies", "future", "future-call",
                      "future-cancel", "future-cancelled?", "future-done?", "future?",
                      "gen-class", "gen-interface", "gensym", "get", "get-in", "get-method",
                      "get-proxy-class", "get-thread-bindings", "get-validator", "group-by",
                      "halt-when", "hash", "hash-combine", "hash-map", "hash-ordered-coll",
                      "hash-set", "hash-unordered-coll", "ident?", "identical?", "identity",
                      "if-let", "if-not", "if-some", "ifn?", "import", "in-ns", "inc", "inc'",
                      "indexed?", "init-proxy", "inst-ms", "inst-ms*", "inst?", "instance?",
                      "int", "int-array", "int?", "integer?", "interleave", "intern",
                      "interpose", "into", "into-array", "ints", "io!", "isa?", "iterate",
                      "iterator-seq", "juxt", "keep", "keep-indexed", "key", "keys", "keyword",
                      "keyword?", "last", "lazy-cat", "lazy-seq", "let", "letfn", "line-seq",
                      "list", "list*", "list?", "load", "load-file", "load-reader",
                      "load-string", "loaded-libs", "locking", "long", "long-array", "longs",
                      "loop", "macroexpand", "macroexpand-1", "make-array", "make-hierarchy",
                      "map", "map-entry?", "map-indexed", "map?", "mapcat", "mapv", "max",
                      "max-key", "memfn", "memoize", "merge", "merge-with", "meta",
                      "method-sig", "methods", "min", "min-key", "mix-collection-hash", "mod",
                      "munge", "name", "namespace", "namespace-munge", "nat-int?", "neg-int?",
                      "neg?", "newline", "next", "nfirst", "nil?", "nnext", "not", "not-any?",
                      "not-empty", "not-every?", "not=", "ns", "ns-aliases", "ns-imports",
                      "ns-interns", "ns-map", "ns-name", "ns-publics", "ns-refers",
                      "ns-resolve", "ns-unalias", "ns-unmap", "nth", "nthnext", "nthrest",
                      "num", "number?", "numerator", "object-array", "odd?", "or", "parents",
                      "partial", "partition", "partition-all", "partition-by", "pcalls", "peek",
                      "persistent!", "pmap", "pop", "pop!", "pop-thread-bindings", "pos-int?",
                      "pos?", "pr", "pr-str", "prefer-method", "prefers",
                      "primitives-classnames", "print", "print-ctor", "print-dup",
                      "print-method", "print-simple", "print-str", "printf", "println",
                      "println-str", "prn", "prn-str", "promise", "proxy",
                      "proxy-call-with-super", "proxy-mappings", "proxy-name", "proxy-super",
                      "push-thread-bindings", "pvalues", "qualified-ident?",
                      "qualified-keyword?", "qualified-symbol?", "quot", "rand", "rand-int",
                      "rand-nth", "random-sample", "range", "ratio?", "rational?",
                      "rationalize", "re-find", "re-groups", "re-matcher", "re-matches",
                      "re-pattern", "re-seq", "read", "read-line", "read-string",
                      "reader-conditional", "reader-conditional?", "realized?", "record?",
                      "reduce", "reduce-kv", "reduced", "reduced?", "reductions", "ref",
                      "ref-history-count", "ref-max-history", "ref-min-history", "ref-set",
                      "refer", "refer-clojure", "reify", "release-pending-sends", "rem",
                      "remove", "remove-all-methods", "remove-method", "remove-ns",
                      "remove-watch", "repeat", "repeatedly", "replace", "replicate", "require",
                      "reset!", "reset-meta!", "reset-vals!", "resolve", "rest",
                      "restart-agent", "resultset-seq", "reverse", "reversible?", "rseq",
                      "rsubseq", "run!", "satisfies?", "second", "select-keys", "send",
                      "send-off", "send-via", "seq", "seq?", "seqable?", "seque", "sequence",
                      "sequential?", "set", "set-agent-send-executor!",
                      "set-agent-send-off-executor!", "set-error-handler!", "set-error-mode!",
                      "set-validator!", "set?", "short", "short-array", "shorts", "shuffle",
                      "shutdown-agents", "simple-ident?", "simple-keyword?", "simple-symbol?",
                      "slurp", "some", "some->", "some->>", "some-fn", "some?", "sort",
                      "sort-by", "sorted-map", "sorted-map-by", "sorted-set", "sorted-set-by",
                      "sorted?", "special-symbol?", "spit", "split-at", "split-with", "str",
                      "string?", "struct", "struct-map", "subs", "subseq", "subvec", "supers",
                      "swap!", "swap-vals!", "symbol", "symbol?", "sync", "tagged-literal",
                      "tagged-literal?", "take", "take-last", "take-nth", "take-while", "test",
                      "the-ns", "thread-bound?", "time", "to-array", "to-array-2d",
                      "trampoline", "transduce", "transient", "tree-seq", "true?", "type",
                      "unchecked-add", "unchecked-add-int", "unchecked-byte", "unchecked-char",
                      "unchecked-dec", "unchecked-dec-int", "unchecked-divide-int",
                      "unchecked-double", "unchecked-float", "unchecked-inc",
                      "unchecked-inc-int", "unchecked-int", "unchecked-long",
                      "unchecked-multiply", "unchecked-multiply-int", "unchecked-negate",
                      "unchecked-negate-int", "unchecked-remainder-int", "unchecked-short",
                      "unchecked-subtract", "unchecked-subtract-int", "underive", "unquote",
                      "unquote-splicing", "unreduced", "unsigned-bit-shift-right", "update",
                      "update-in", "update-proxy", "uri?", "use", "uuid?", "val", "vals",
                      "var-get", "var-set", "var?", "vary-meta", "vec", "vector", "vector-of",
                      "vector?", "volatile!", "volatile?", "vreset!", "vswap!", "when",
                      "when-first", "when-let", "when-not", "when-some", "while",
                      "with-bindings", "with-bindings*", "with-in-str", "with-loading-context",
                      "with-local-vars", "with-meta", "with-open", "with-out-str",
                      "with-precision", "with-redefs", "with-redefs-fn", "xml-seq", "zero?",
                      "zipmap"];
   var haveBodyParameter = [
     "->", "->>", "as->", "binding", "bound-fn", "case", "catch", "comment",
     "cond", "cond->", "cond->>", "condp", "def", "definterface", "defmethod",
     "defn", "defmacro", "defprotocol", "defrecord", "defstruct", "deftype",
     "do", "doseq", "dotimes", "doto", "extend", "extend-protocol",
     "extend-type", "fn", "for", "future", "if", "if-let", "if-not", "if-some",
     "let", "letfn", "locking", "loop", "ns", "proxy", "reify", "struct-map",
     "some->", "some->>", "try", "when", "when-first", "when-let", "when-not",
     "when-some", "while", "with-bindings", "with-bindings*", "with-in-str",
     "with-loading-context", "with-local-vars", "with-meta", "with-open",
     "with-out-str", "with-precision", "with-redefs", "with-redefs-fn"];

   var atom$2 = createLookupMap(atoms$d);
   var specialForm$1 = createLookupMap(specialForms);
   var coreSymbol = createLookupMap(coreSymbols);
   var hasBodyParameter = createLookupMap(haveBodyParameter);
   var delimiter = /^(?:[\\\[\]\s"(),;@^`{}~]|$)/;
   var numberLiteral = /^(?:[+\-]?\d+(?:(?:N|(?:[eE][+\-]?\d+))|(?:\.?\d*(?:M|(?:[eE][+\-]?\d+))?)|\/\d+|[xX][0-9a-fA-F]+|r[0-9a-zA-Z]+)?(?=[\\\[\]\s"#'(),;@^`{}~]|$))/;
   var characterLiteral = /^(?:\\(?:backspace|formfeed|newline|return|space|tab|o[0-7]{3}|u[0-9A-Fa-f]{4}|x[0-9A-Fa-f]{4}|.)?(?=[\\\[\]\s"(),;@^`{}~]|$))/;

   // simple-namespace := /^[^\\\/\[\]\d\s"#'(),;@^`{}~.][^\\\[\]\s"(),;@^`{}~.\/]*/
   // simple-symbol    := /^(?:\/|[^\\\/\[\]\d\s"#'(),;@^`{}~][^\\\[\]\s"(),;@^`{}~]*)/
   // qualified-symbol := (<simple-namespace>(<.><simple-namespace>)*</>)?<simple-symbol>
   var qualifiedSymbol = /^(?:(?:[^\\\/\[\]\d\s"#'(),;@^`{}~.][^\\\[\]\s"(),;@^`{}~.\/]*(?:\.[^\\\/\[\]\d\s"#'(),;@^`{}~.][^\\\[\]\s"(),;@^`{}~.\/]*)*\/)?(?:\/|[^\\\/\[\]\d\s"#'(),;@^`{}~][^\\\[\]\s"(),;@^`{}~]*)*(?=[\\\[\]\s"(),;@^`{}~]|$))/;

   function base$1(stream, state) {
     if (stream.eatSpace() || stream.eat(",")) return ["space", null];
     if (stream.match(numberLiteral)) return [null, "number"];
     if (stream.match(characterLiteral)) return [null, "string.special"];
     if (stream.eat(/^"/)) return (state.tokenize = inString$1)(stream, state);
     if (stream.eat(/^[(\[{]/)) return ["open", "bracket"];
     if (stream.eat(/^[)\]}]/)) return ["close", "bracket"];
     if (stream.eat(/^;/)) {stream.skipToEnd(); return ["space", "comment"];}
     if (stream.eat(/^[#'@^`~]/)) return [null, "meta"];

     var matches = stream.match(qualifiedSymbol);
     var symbol = matches && matches[0];

     if (!symbol) {
       // advance stream by at least one character so we don't get stuck.
       stream.next();
       stream.eatWhile(function (c) {return !is(c, delimiter);});
       return [null, "error"];
     }

     if (symbol === "comment" && state.lastToken === "(")
       return (state.tokenize = inComment$1)(stream, state);
     if (is(symbol, atom$2) || symbol.charAt(0) === ":") return ["symbol", "atom"];
     if (is(symbol, specialForm$1) || is(symbol, coreSymbol)) return ["symbol", "keyword"];
     if (state.lastToken === "(") return ["symbol", "builtin"]; // other operator

     return ["symbol", "variable"];
   }

   function inString$1(stream, state) {
     var escaped = false, next;

     while (next = stream.next()) {
       if (next === "\"" && !escaped) {state.tokenize = base$1; break;}
       escaped = !escaped && next === "\\";
     }

     return [null, "string"];
   }

   function inComment$1(stream, state) {
     var parenthesisCount = 1;
     var next;

     while (next = stream.next()) {
       if (next === ")") parenthesisCount--;
       if (next === "(") parenthesisCount++;
       if (parenthesisCount === 0) {
         stream.backUp(1);
         state.tokenize = base$1;
         break;
       }
     }

     return ["space", "comment"];
   }

   function createLookupMap(words) {
     var obj = {};

     for (var i = 0; i < words.length; ++i) obj[words[i]] = true;

     return obj;
   }

   function is(value, test) {
     if (test instanceof RegExp) return test.test(value);
     if (test instanceof Object) return test.propertyIsEnumerable(value);
   }

   const clojure = {
     name: "clojure",
     startState: function () {
       return {
         ctx: {prev: null, start: 0, indentTo: 0},
         lastToken: null,
         tokenize: base$1
       };
     },

     token: function (stream, state) {
       if (stream.sol() && (typeof state.ctx.indentTo !== "number"))
         state.ctx.indentTo = state.ctx.start + 1;

       var typeStylePair = state.tokenize(stream, state);
       var type = typeStylePair[0];
       var style = typeStylePair[1];
       var current = stream.current();

       if (type !== "space") {
         if (state.lastToken === "(" && state.ctx.indentTo === null) {
           if (type === "symbol" && is(current, hasBodyParameter))
             state.ctx.indentTo = state.ctx.start + stream.indentUnit;
           else state.ctx.indentTo = "next";
         } else if (state.ctx.indentTo === "next") {
           state.ctx.indentTo = stream.column();
         }

         state.lastToken = current;
       }

       if (type === "open")
         state.ctx = {prev: state.ctx, start: stream.column(), indentTo: null};
       else if (type === "close") state.ctx = state.ctx.prev || state.ctx;

       return style;
     },

     indent: function (state) {
       var i = state.ctx.indentTo;

       return (typeof i === "number") ?
         i :
         state.ctx.start + 1;
     },

     languageData: {
       closeBrackets: {brackets: ["(", "[", "{", '"']},
       commentTokens: {line: ";;"},
       autocomplete: [].concat(atoms$d, specialForms, coreSymbols)
     }
   };

   var clojure$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      clojure: clojure
   });

   function mkCSS(parserConfig) {
     parserConfig = {...defaults, ...parserConfig};
     var inline = parserConfig.inline;

     var tokenHooks = parserConfig.tokenHooks,
         documentTypes = parserConfig.documentTypes || {},
         mediaTypes = parserConfig.mediaTypes || {},
         mediaFeatures = parserConfig.mediaFeatures || {},
         mediaValueKeywords = parserConfig.mediaValueKeywords || {},
         propertyKeywords = parserConfig.propertyKeywords || {},
         nonStandardPropertyKeywords = parserConfig.nonStandardPropertyKeywords || {},
         fontProperties = parserConfig.fontProperties || {},
         counterDescriptors = parserConfig.counterDescriptors || {},
         colorKeywords = parserConfig.colorKeywords || {},
         valueKeywords = parserConfig.valueKeywords || {},
         allowNested = parserConfig.allowNested,
         lineComment = parserConfig.lineComment,
         supportsAtComponent = parserConfig.supportsAtComponent === true,
         highlightNonStandardPropertyKeywords = parserConfig.highlightNonStandardPropertyKeywords !== false;

     var type, override;
     function ret(style, tp) { type = tp; return style; }

     // Tokenizers

     function tokenBase(stream, state) {
       var ch = stream.next();
       if (tokenHooks[ch]) {
         var result = tokenHooks[ch](stream, state);
         if (result !== false) return result;
       }
       if (ch == "@") {
         stream.eatWhile(/[\w\\\-]/);
         return ret("def", stream.current());
       } else if (ch == "=" || (ch == "~" || ch == "|") && stream.eat("=")) {
         return ret(null, "compare");
       } else if (ch == "\"" || ch == "'") {
         state.tokenize = tokenString(ch);
         return state.tokenize(stream, state);
       } else if (ch == "#") {
         stream.eatWhile(/[\w\\\-]/);
         return ret("atom", "hash");
       } else if (ch == "!") {
         stream.match(/^\s*\w*/);
         return ret("keyword", "important");
       } else if (/\d/.test(ch) || ch == "." && stream.eat(/\d/)) {
         stream.eatWhile(/[\w.%]/);
         return ret("number", "unit");
       } else if (ch === "-") {
         if (/[\d.]/.test(stream.peek())) {
           stream.eatWhile(/[\w.%]/);
           return ret("number", "unit");
         } else if (stream.match(/^-[\w\\\-]*/)) {
           stream.eatWhile(/[\w\\\-]/);
           if (stream.match(/^\s*:/, false))
             return ret("def", "variable-definition");
           return ret("variableName", "variable");
         } else if (stream.match(/^\w+-/)) {
           return ret("meta", "meta");
         }
       } else if (/[,+>*\/]/.test(ch)) {
         return ret(null, "select-op");
       } else if (ch == "." && stream.match(/^-?[_a-z][_a-z0-9-]*/i)) {
         return ret("qualifier", "qualifier");
       } else if (/[:;{}\[\]\(\)]/.test(ch)) {
         return ret(null, ch);
       } else if (stream.match(/^[\w-.]+(?=\()/)) {
         if (/^(url(-prefix)?|domain|regexp)$/i.test(stream.current())) {
           state.tokenize = tokenParenthesized;
         }
         return ret("variableName.function", "variable");
       } else if (/[\w\\\-]/.test(ch)) {
         stream.eatWhile(/[\w\\\-]/);
         return ret("property", "word");
       } else {
         return ret(null, null);
       }
     }

     function tokenString(quote) {
       return function(stream, state) {
         var escaped = false, ch;
         while ((ch = stream.next()) != null) {
           if (ch == quote && !escaped) {
             if (quote == ")") stream.backUp(1);
             break;
           }
           escaped = !escaped && ch == "\\";
         }
         if (ch == quote || !escaped && quote != ")") state.tokenize = null;
         return ret("string", "string");
       };
     }

     function tokenParenthesized(stream, state) {
       stream.next(); // Must be '('
       if (!stream.match(/^\s*[\"\')]/, false))
         state.tokenize = tokenString(")");
       else
         state.tokenize = null;
       return ret(null, "(");
     }

     // Context management

     function Context(type, indent, prev) {
       this.type = type;
       this.indent = indent;
       this.prev = prev;
     }

     function pushContext(state, stream, type, indent) {
       state.context = new Context(type, stream.indentation() + (indent === false ? 0 : stream.indentUnit), state.context);
       return type;
     }

     function popContext(state) {
       if (state.context.prev)
         state.context = state.context.prev;
       return state.context.type;
     }

     function pass(type, stream, state) {
       return states[state.context.type](type, stream, state);
     }
     function popAndPass(type, stream, state, n) {
       for (var i = n || 1; i > 0; i--)
         state.context = state.context.prev;
       return pass(type, stream, state);
     }

     // Parser

     function wordAsValue(stream) {
       var word = stream.current().toLowerCase();
       if (valueKeywords.hasOwnProperty(word))
         override = "atom";
       else if (colorKeywords.hasOwnProperty(word))
         override = "keyword";
       else
         override = "variable";
     }

     var states = {};

     states.top = function(type, stream, state) {
       if (type == "{") {
         return pushContext(state, stream, "block");
       } else if (type == "}" && state.context.prev) {
         return popContext(state);
       } else if (supportsAtComponent && /@component/i.test(type)) {
         return pushContext(state, stream, "atComponentBlock");
       } else if (/^@(-moz-)?document$/i.test(type)) {
         return pushContext(state, stream, "documentTypes");
       } else if (/^@(media|supports|(-moz-)?document|import)$/i.test(type)) {
         return pushContext(state, stream, "atBlock");
       } else if (/^@(font-face|counter-style)/i.test(type)) {
         state.stateArg = type;
         return "restricted_atBlock_before";
       } else if (/^@(-(moz|ms|o|webkit)-)?keyframes$/i.test(type)) {
         return "keyframes";
       } else if (type && type.charAt(0) == "@") {
         return pushContext(state, stream, "at");
       } else if (type == "hash") {
         override = "builtin";
       } else if (type == "word") {
         override = "tag";
       } else if (type == "variable-definition") {
         return "maybeprop";
       } else if (type == "interpolation") {
         return pushContext(state, stream, "interpolation");
       } else if (type == ":") {
         return "pseudo";
       } else if (allowNested && type == "(") {
         return pushContext(state, stream, "parens");
       }
       return state.context.type;
     };

     states.block = function(type, stream, state) {
       if (type == "word") {
         var word = stream.current().toLowerCase();
         if (propertyKeywords.hasOwnProperty(word)) {
           override = "property";
           return "maybeprop";
         } else if (nonStandardPropertyKeywords.hasOwnProperty(word)) {
           override = highlightNonStandardPropertyKeywords ? "string.special" : "property";
           return "maybeprop";
         } else if (allowNested) {
           override = stream.match(/^\s*:(?:\s|$)/, false) ? "property" : "tag";
           return "block";
         } else {
           override = "error";
           return "maybeprop";
         }
       } else if (type == "meta") {
         return "block";
       } else if (!allowNested && (type == "hash" || type == "qualifier")) {
         override = "error";
         return "block";
       } else {
         return states.top(type, stream, state);
       }
     };

     states.maybeprop = function(type, stream, state) {
       if (type == ":") return pushContext(state, stream, "prop");
       return pass(type, stream, state);
     };

     states.prop = function(type, stream, state) {
       if (type == ";") return popContext(state);
       if (type == "{" && allowNested) return pushContext(state, stream, "propBlock");
       if (type == "}" || type == "{") return popAndPass(type, stream, state);
       if (type == "(") return pushContext(state, stream, "parens");

       if (type == "hash" && !/^#([0-9a-fA-F]{3,4}|[0-9a-fA-F]{6}|[0-9a-fA-F]{8})$/.test(stream.current())) {
         override = "error";
       } else if (type == "word") {
         wordAsValue(stream);
       } else if (type == "interpolation") {
         return pushContext(state, stream, "interpolation");
       }
       return "prop";
     };

     states.propBlock = function(type, _stream, state) {
       if (type == "}") return popContext(state);
       if (type == "word") { override = "property"; return "maybeprop"; }
       return state.context.type;
     };

     states.parens = function(type, stream, state) {
       if (type == "{" || type == "}") return popAndPass(type, stream, state);
       if (type == ")") return popContext(state);
       if (type == "(") return pushContext(state, stream, "parens");
       if (type == "interpolation") return pushContext(state, stream, "interpolation");
       if (type == "word") wordAsValue(stream);
       return "parens";
     };

     states.pseudo = function(type, stream, state) {
       if (type == "meta") return "pseudo";

       if (type == "word") {
         override = "variableName.constant";
         return state.context.type;
       }
       return pass(type, stream, state);
     };

     states.documentTypes = function(type, stream, state) {
       if (type == "word" && documentTypes.hasOwnProperty(stream.current())) {
         override = "tag";
         return state.context.type;
       } else {
         return states.atBlock(type, stream, state);
       }
     };

     states.atBlock = function(type, stream, state) {
       if (type == "(") return pushContext(state, stream, "atBlock_parens");
       if (type == "}" || type == ";") return popAndPass(type, stream, state);
       if (type == "{") return popContext(state) && pushContext(state, stream, allowNested ? "block" : "top");

       if (type == "interpolation") return pushContext(state, stream, "interpolation");

       if (type == "word") {
         var word = stream.current().toLowerCase();
         if (word == "only" || word == "not" || word == "and" || word == "or")
           override = "keyword";
         else if (mediaTypes.hasOwnProperty(word))
           override = "attribute";
         else if (mediaFeatures.hasOwnProperty(word))
           override = "property";
         else if (mediaValueKeywords.hasOwnProperty(word))
           override = "keyword";
         else if (propertyKeywords.hasOwnProperty(word))
           override = "property";
         else if (nonStandardPropertyKeywords.hasOwnProperty(word))
           override = highlightNonStandardPropertyKeywords ? "string.special" : "property";
         else if (valueKeywords.hasOwnProperty(word))
           override = "atom";
         else if (colorKeywords.hasOwnProperty(word))
           override = "keyword";
         else
           override = "error";
       }
       return state.context.type;
     };

     states.atComponentBlock = function(type, stream, state) {
       if (type == "}")
         return popAndPass(type, stream, state);
       if (type == "{")
         return popContext(state) && pushContext(state, stream, allowNested ? "block" : "top", false);
       if (type == "word")
         override = "error";
       return state.context.type;
     };

     states.atBlock_parens = function(type, stream, state) {
       if (type == ")") return popContext(state);
       if (type == "{" || type == "}") return popAndPass(type, stream, state, 2);
       return states.atBlock(type, stream, state);
     };

     states.restricted_atBlock_before = function(type, stream, state) {
       if (type == "{")
         return pushContext(state, stream, "restricted_atBlock");
       if (type == "word" && state.stateArg == "@counter-style") {
         override = "variable";
         return "restricted_atBlock_before";
       }
       return pass(type, stream, state);
     };

     states.restricted_atBlock = function(type, stream, state) {
       if (type == "}") {
         state.stateArg = null;
         return popContext(state);
       }
       if (type == "word") {
         if ((state.stateArg == "@font-face" && !fontProperties.hasOwnProperty(stream.current().toLowerCase())) ||
             (state.stateArg == "@counter-style" && !counterDescriptors.hasOwnProperty(stream.current().toLowerCase())))
           override = "error";
         else
           override = "property";
         return "maybeprop";
       }
       return "restricted_atBlock";
     };

     states.keyframes = function(type, stream, state) {
       if (type == "word") { override = "variable"; return "keyframes"; }
       if (type == "{") return pushContext(state, stream, "top");
       return pass(type, stream, state);
     };

     states.at = function(type, stream, state) {
       if (type == ";") return popContext(state);
       if (type == "{" || type == "}") return popAndPass(type, stream, state);
       if (type == "word") override = "tag";
       else if (type == "hash") override = "builtin";
       return "at";
     };

     states.interpolation = function(type, stream, state) {
       if (type == "}") return popContext(state);
       if (type == "{" || type == ";") return popAndPass(type, stream, state);
       if (type == "word") override = "variable";
       else if (type != "variable" && type != "(" && type != ")") override = "error";
       return "interpolation";
     };

     return {
       name: parserConfig.name,
       startState: function() {
         return {tokenize: null,
                 state: inline ? "block" : "top",
                 stateArg: null,
                 context: new Context(inline ? "block" : "top", 0, null)};
       },

       token: function(stream, state) {
         if (!state.tokenize && stream.eatSpace()) return null;
         var style = (state.tokenize || tokenBase)(stream, state);
         if (style && typeof style == "object") {
           type = style[1];
           style = style[0];
         }
         override = style;
         if (type != "comment")
           state.state = states[state.state](type, stream, state);
         return override;
       },

       indent: function(state, textAfter, iCx) {
         var cx = state.context, ch = textAfter && textAfter.charAt(0);
         var indent = cx.indent;
         if (cx.type == "prop" && (ch == "}" || ch == ")")) cx = cx.prev;
         if (cx.prev) {
           if (ch == "}" && (cx.type == "block" || cx.type == "top" ||
                             cx.type == "interpolation" || cx.type == "restricted_atBlock")) {
             // Resume indentation from parent context.
             cx = cx.prev;
             indent = cx.indent;
           } else if (ch == ")" && (cx.type == "parens" || cx.type == "atBlock_parens") ||
                      ch == "{" && (cx.type == "at" || cx.type == "atBlock")) {
             // Dedent relative to current context.
             indent = Math.max(0, cx.indent - iCx.unit);
           }
         }
         return indent;
       },

       languageData: {
         indentOnInput: /^\s*\}$/,
         commentTokens: {line: lineComment, block: {open: "/*", close: "*/"}},
         autocomplete: allWords
       }
     };
   }
   function keySet$1(array) {
     var keys = {};
     for (var i = 0; i < array.length; ++i) {
       keys[array[i].toLowerCase()] = true;
     }
     return keys;
   }

   var documentTypes_$1 = [
     "domain", "regexp", "url", "url-prefix"
   ], documentTypes$1 = keySet$1(documentTypes_$1);

   var mediaTypes_$1 = [
     "all", "aural", "braille", "handheld", "print", "projection", "screen",
     "tty", "tv", "embossed"
   ], mediaTypes$1 = keySet$1(mediaTypes_$1);

   var mediaFeatures_$1 = [
     "width", "min-width", "max-width", "height", "min-height", "max-height",
     "device-width", "min-device-width", "max-device-width", "device-height",
     "min-device-height", "max-device-height", "aspect-ratio",
     "min-aspect-ratio", "max-aspect-ratio", "device-aspect-ratio",
     "min-device-aspect-ratio", "max-device-aspect-ratio", "color", "min-color",
     "max-color", "color-index", "min-color-index", "max-color-index",
     "monochrome", "min-monochrome", "max-monochrome", "resolution",
     "min-resolution", "max-resolution", "scan", "grid", "orientation",
     "device-pixel-ratio", "min-device-pixel-ratio", "max-device-pixel-ratio",
     "pointer", "any-pointer", "hover", "any-hover", "prefers-color-scheme",
     "dynamic-range", "video-dynamic-range"
   ], mediaFeatures$1 = keySet$1(mediaFeatures_$1);

   var mediaValueKeywords_ = [
     "landscape", "portrait", "none", "coarse", "fine", "on-demand", "hover",
     "interlace", "progressive",
     "dark", "light",
     "standard", "high"
   ], mediaValueKeywords = keySet$1(mediaValueKeywords_);

   var propertyKeywords_$1 = [
     "align-content", "align-items", "align-self", "alignment-adjust",
     "alignment-baseline", "all", "anchor-point", "animation", "animation-delay",
     "animation-direction", "animation-duration", "animation-fill-mode",
     "animation-iteration-count", "animation-name", "animation-play-state",
     "animation-timing-function", "appearance", "azimuth", "backdrop-filter",
     "backface-visibility", "background", "background-attachment",
     "background-blend-mode", "background-clip", "background-color",
     "background-image", "background-origin", "background-position",
     "background-position-x", "background-position-y", "background-repeat",
     "background-size", "baseline-shift", "binding", "bleed", "block-size",
     "bookmark-label", "bookmark-level", "bookmark-state", "bookmark-target",
     "border", "border-bottom", "border-bottom-color", "border-bottom-left-radius",
     "border-bottom-right-radius", "border-bottom-style", "border-bottom-width",
     "border-collapse", "border-color", "border-image", "border-image-outset",
     "border-image-repeat", "border-image-slice", "border-image-source",
     "border-image-width", "border-left", "border-left-color", "border-left-style",
     "border-left-width", "border-radius", "border-right", "border-right-color",
     "border-right-style", "border-right-width", "border-spacing", "border-style",
     "border-top", "border-top-color", "border-top-left-radius",
     "border-top-right-radius", "border-top-style", "border-top-width",
     "border-width", "bottom", "box-decoration-break", "box-shadow", "box-sizing",
     "break-after", "break-before", "break-inside", "caption-side", "caret-color",
     "clear", "clip", "color", "color-profile", "column-count", "column-fill",
     "column-gap", "column-rule", "column-rule-color", "column-rule-style",
     "column-rule-width", "column-span", "column-width", "columns", "contain",
     "content", "counter-increment", "counter-reset", "crop", "cue", "cue-after",
     "cue-before", "cursor", "direction", "display", "dominant-baseline",
     "drop-initial-after-adjust", "drop-initial-after-align",
     "drop-initial-before-adjust", "drop-initial-before-align", "drop-initial-size",
     "drop-initial-value", "elevation", "empty-cells", "fit", "fit-content", "fit-position",
     "flex", "flex-basis", "flex-direction", "flex-flow", "flex-grow",
     "flex-shrink", "flex-wrap", "float", "float-offset", "flow-from", "flow-into",
     "font", "font-family", "font-feature-settings", "font-kerning",
     "font-language-override", "font-optical-sizing", "font-size",
     "font-size-adjust", "font-stretch", "font-style", "font-synthesis",
     "font-variant", "font-variant-alternates", "font-variant-caps",
     "font-variant-east-asian", "font-variant-ligatures", "font-variant-numeric",
     "font-variant-position", "font-variation-settings", "font-weight", "gap",
     "grid", "grid-area", "grid-auto-columns", "grid-auto-flow", "grid-auto-rows",
     "grid-column", "grid-column-end", "grid-column-gap", "grid-column-start",
     "grid-gap", "grid-row", "grid-row-end", "grid-row-gap", "grid-row-start",
     "grid-template", "grid-template-areas", "grid-template-columns",
     "grid-template-rows", "hanging-punctuation", "height", "hyphens", "icon",
     "image-orientation", "image-rendering", "image-resolution", "inline-box-align",
     "inset", "inset-block", "inset-block-end", "inset-block-start", "inset-inline",
     "inset-inline-end", "inset-inline-start", "isolation", "justify-content",
     "justify-items", "justify-self", "left", "letter-spacing", "line-break",
     "line-height", "line-height-step", "line-stacking", "line-stacking-ruby",
     "line-stacking-shift", "line-stacking-strategy", "list-style",
     "list-style-image", "list-style-position", "list-style-type", "margin",
     "margin-bottom", "margin-left", "margin-right", "margin-top", "marks",
     "marquee-direction", "marquee-loop", "marquee-play-count", "marquee-speed",
     "marquee-style", "mask-clip", "mask-composite", "mask-image", "mask-mode",
     "mask-origin", "mask-position", "mask-repeat", "mask-size","mask-type",
     "max-block-size", "max-height", "max-inline-size",
     "max-width", "min-block-size", "min-height", "min-inline-size", "min-width",
     "mix-blend-mode", "move-to", "nav-down", "nav-index", "nav-left", "nav-right",
     "nav-up", "object-fit", "object-position", "offset", "offset-anchor",
     "offset-distance", "offset-path", "offset-position", "offset-rotate",
     "opacity", "order", "orphans", "outline", "outline-color", "outline-offset",
     "outline-style", "outline-width", "overflow", "overflow-style",
     "overflow-wrap", "overflow-x", "overflow-y", "padding", "padding-bottom",
     "padding-left", "padding-right", "padding-top", "page", "page-break-after",
     "page-break-before", "page-break-inside", "page-policy", "pause",
     "pause-after", "pause-before", "perspective", "perspective-origin", "pitch",
     "pitch-range", "place-content", "place-items", "place-self", "play-during",
     "position", "presentation-level", "punctuation-trim", "quotes",
     "region-break-after", "region-break-before", "region-break-inside",
     "region-fragment", "rendering-intent", "resize", "rest", "rest-after",
     "rest-before", "richness", "right", "rotate", "rotation", "rotation-point",
     "row-gap", "ruby-align", "ruby-overhang", "ruby-position", "ruby-span",
     "scale", "scroll-behavior", "scroll-margin", "scroll-margin-block",
     "scroll-margin-block-end", "scroll-margin-block-start", "scroll-margin-bottom",
     "scroll-margin-inline", "scroll-margin-inline-end",
     "scroll-margin-inline-start", "scroll-margin-left", "scroll-margin-right",
     "scroll-margin-top", "scroll-padding", "scroll-padding-block",
     "scroll-padding-block-end", "scroll-padding-block-start",
     "scroll-padding-bottom", "scroll-padding-inline", "scroll-padding-inline-end",
     "scroll-padding-inline-start", "scroll-padding-left", "scroll-padding-right",
     "scroll-padding-top", "scroll-snap-align", "scroll-snap-type",
     "shape-image-threshold", "shape-inside", "shape-margin", "shape-outside",
     "size", "speak", "speak-as", "speak-header", "speak-numeral",
     "speak-punctuation", "speech-rate", "stress", "string-set", "tab-size",
     "table-layout", "target", "target-name", "target-new", "target-position",
     "text-align", "text-align-last", "text-combine-upright", "text-decoration",
     "text-decoration-color", "text-decoration-line", "text-decoration-skip",
     "text-decoration-skip-ink", "text-decoration-style", "text-emphasis",
     "text-emphasis-color", "text-emphasis-position", "text-emphasis-style",
     "text-height", "text-indent", "text-justify", "text-orientation",
     "text-outline", "text-overflow", "text-rendering", "text-shadow",
     "text-size-adjust", "text-space-collapse", "text-transform",
     "text-underline-position", "text-wrap", "top", "touch-action", "transform", "transform-origin",
     "transform-style", "transition", "transition-delay", "transition-duration",
     "transition-property", "transition-timing-function", "translate",
     "unicode-bidi", "user-select", "vertical-align", "visibility", "voice-balance",
     "voice-duration", "voice-family", "voice-pitch", "voice-range", "voice-rate",
     "voice-stress", "voice-volume", "volume", "white-space", "widows", "width",
     "will-change", "word-break", "word-spacing", "word-wrap", "writing-mode", "z-index",
     // SVG-specific
     "clip-path", "clip-rule", "mask", "enable-background", "filter", "flood-color",
     "flood-opacity", "lighting-color", "stop-color", "stop-opacity", "pointer-events",
     "color-interpolation", "color-interpolation-filters",
     "color-rendering", "fill", "fill-opacity", "fill-rule", "image-rendering",
     "marker", "marker-end", "marker-mid", "marker-start", "paint-order", "shape-rendering", "stroke",
     "stroke-dasharray", "stroke-dashoffset", "stroke-linecap", "stroke-linejoin",
     "stroke-miterlimit", "stroke-opacity", "stroke-width", "text-rendering",
     "baseline-shift", "dominant-baseline", "glyph-orientation-horizontal",
     "glyph-orientation-vertical", "text-anchor", "writing-mode",
   ], propertyKeywords$1 = keySet$1(propertyKeywords_$1);

   var nonStandardPropertyKeywords_$1 = [
     "accent-color", "aspect-ratio", "border-block", "border-block-color", "border-block-end",
     "border-block-end-color", "border-block-end-style", "border-block-end-width",
     "border-block-start", "border-block-start-color", "border-block-start-style",
     "border-block-start-width", "border-block-style", "border-block-width",
     "border-inline", "border-inline-color", "border-inline-end",
     "border-inline-end-color", "border-inline-end-style",
     "border-inline-end-width", "border-inline-start", "border-inline-start-color",
     "border-inline-start-style", "border-inline-start-width",
     "border-inline-style", "border-inline-width", "content-visibility", "margin-block",
     "margin-block-end", "margin-block-start", "margin-inline", "margin-inline-end",
     "margin-inline-start", "overflow-anchor", "overscroll-behavior", "padding-block", "padding-block-end",
     "padding-block-start", "padding-inline", "padding-inline-end",
     "padding-inline-start", "scroll-snap-stop", "scrollbar-3d-light-color",
     "scrollbar-arrow-color", "scrollbar-base-color", "scrollbar-dark-shadow-color",
     "scrollbar-face-color", "scrollbar-highlight-color", "scrollbar-shadow-color",
     "scrollbar-track-color", "searchfield-cancel-button", "searchfield-decoration",
     "searchfield-results-button", "searchfield-results-decoration", "shape-inside", "zoom"
   ], nonStandardPropertyKeywords$1 = keySet$1(nonStandardPropertyKeywords_$1);

   var fontProperties_$1 = [
     "font-display", "font-family", "src", "unicode-range", "font-variant",
     "font-feature-settings", "font-stretch", "font-weight", "font-style"
   ], fontProperties$1 = keySet$1(fontProperties_$1);

   var counterDescriptors_ = [
     "additive-symbols", "fallback", "negative", "pad", "prefix", "range",
     "speak-as", "suffix", "symbols", "system"
   ], counterDescriptors = keySet$1(counterDescriptors_);

   var colorKeywords_$1 = [
     "aliceblue", "antiquewhite", "aqua", "aquamarine", "azure", "beige",
     "bisque", "black", "blanchedalmond", "blue", "blueviolet", "brown",
     "burlywood", "cadetblue", "chartreuse", "chocolate", "coral", "cornflowerblue",
     "cornsilk", "crimson", "cyan", "darkblue", "darkcyan", "darkgoldenrod",
     "darkgray", "darkgreen", "darkgrey", "darkkhaki", "darkmagenta", "darkolivegreen",
     "darkorange", "darkorchid", "darkred", "darksalmon", "darkseagreen",
     "darkslateblue", "darkslategray", "darkslategrey", "darkturquoise", "darkviolet",
     "deeppink", "deepskyblue", "dimgray", "dimgrey", "dodgerblue", "firebrick",
     "floralwhite", "forestgreen", "fuchsia", "gainsboro", "ghostwhite",
     "gold", "goldenrod", "gray", "grey", "green", "greenyellow", "honeydew",
     "hotpink", "indianred", "indigo", "ivory", "khaki", "lavender",
     "lavenderblush", "lawngreen", "lemonchiffon", "lightblue", "lightcoral",
     "lightcyan", "lightgoldenrodyellow", "lightgray", "lightgreen", "lightgrey", "lightpink",
     "lightsalmon", "lightseagreen", "lightskyblue", "lightslategray", "lightslategrey",
     "lightsteelblue", "lightyellow", "lime", "limegreen", "linen", "magenta",
     "maroon", "mediumaquamarine", "mediumblue", "mediumorchid", "mediumpurple",
     "mediumseagreen", "mediumslateblue", "mediumspringgreen", "mediumturquoise",
     "mediumvioletred", "midnightblue", "mintcream", "mistyrose", "moccasin",
     "navajowhite", "navy", "oldlace", "olive", "olivedrab", "orange", "orangered",
     "orchid", "palegoldenrod", "palegreen", "paleturquoise", "palevioletred",
     "papayawhip", "peachpuff", "peru", "pink", "plum", "powderblue",
     "purple", "rebeccapurple", "red", "rosybrown", "royalblue", "saddlebrown",
     "salmon", "sandybrown", "seagreen", "seashell", "sienna", "silver", "skyblue",
     "slateblue", "slategray", "slategrey", "snow", "springgreen", "steelblue", "tan",
     "teal", "thistle", "tomato", "turquoise", "violet", "wheat", "white",
     "whitesmoke", "yellow", "yellowgreen"
   ], colorKeywords$1 = keySet$1(colorKeywords_$1);

   var valueKeywords_$1 = [
     "above", "absolute", "activeborder", "additive", "activecaption", "afar",
     "after-white-space", "ahead", "alias", "all", "all-scroll", "alphabetic", "alternate",
     "always", "amharic", "amharic-abegede", "antialiased", "appworkspace",
     "arabic-indic", "armenian", "asterisks", "attr", "auto", "auto-flow", "avoid", "avoid-column", "avoid-page",
     "avoid-region", "axis-pan", "background", "backwards", "baseline", "below", "bidi-override", "binary",
     "bengali", "blink", "block", "block-axis", "blur", "bold", "bolder", "border", "border-box",
     "both", "bottom", "break", "break-all", "break-word", "brightness", "bullets", "button",
     "buttonface", "buttonhighlight", "buttonshadow", "buttontext", "calc", "cambodian",
     "capitalize", "caps-lock-indicator", "caption", "captiontext", "caret",
     "cell", "center", "checkbox", "circle", "cjk-decimal", "cjk-earthly-branch",
     "cjk-heavenly-stem", "cjk-ideographic", "clear", "clip", "close-quote",
     "col-resize", "collapse", "color", "color-burn", "color-dodge", "column", "column-reverse",
     "compact", "condensed", "conic-gradient", "contain", "content", "contents",
     "content-box", "context-menu", "continuous", "contrast", "copy", "counter", "counters", "cover", "crop",
     "cross", "crosshair", "cubic-bezier", "currentcolor", "cursive", "cyclic", "darken", "dashed", "decimal",
     "decimal-leading-zero", "default", "default-button", "dense", "destination-atop",
     "destination-in", "destination-out", "destination-over", "devanagari", "difference",
     "disc", "discard", "disclosure-closed", "disclosure-open", "document",
     "dot-dash", "dot-dot-dash",
     "dotted", "double", "down", "drop-shadow", "e-resize", "ease", "ease-in", "ease-in-out", "ease-out",
     "element", "ellipse", "ellipsis", "embed", "end", "ethiopic", "ethiopic-abegede",
     "ethiopic-abegede-am-et", "ethiopic-abegede-gez", "ethiopic-abegede-ti-er",
     "ethiopic-abegede-ti-et", "ethiopic-halehame-aa-er",
     "ethiopic-halehame-aa-et", "ethiopic-halehame-am-et",
     "ethiopic-halehame-gez", "ethiopic-halehame-om-et",
     "ethiopic-halehame-sid-et", "ethiopic-halehame-so-et",
     "ethiopic-halehame-ti-er", "ethiopic-halehame-ti-et", "ethiopic-halehame-tig",
     "ethiopic-numeric", "ew-resize", "exclusion", "expanded", "extends", "extra-condensed",
     "extra-expanded", "fantasy", "fast", "fill", "fill-box", "fixed", "flat", "flex", "flex-end", "flex-start", "footnotes",
     "forwards", "from", "geometricPrecision", "georgian", "grayscale", "graytext", "grid", "groove",
     "gujarati", "gurmukhi", "hand", "hangul", "hangul-consonant", "hard-light", "hebrew",
     "help", "hidden", "hide", "higher", "highlight", "highlighttext",
     "hiragana", "hiragana-iroha", "horizontal", "hsl", "hsla", "hue", "hue-rotate", "icon", "ignore",
     "inactiveborder", "inactivecaption", "inactivecaptiontext", "infinite",
     "infobackground", "infotext", "inherit", "initial", "inline", "inline-axis",
     "inline-block", "inline-flex", "inline-grid", "inline-table", "inset", "inside", "intrinsic", "invert",
     "italic", "japanese-formal", "japanese-informal", "justify", "kannada",
     "katakana", "katakana-iroha", "keep-all", "khmer",
     "korean-hangul-formal", "korean-hanja-formal", "korean-hanja-informal",
     "landscape", "lao", "large", "larger", "left", "level", "lighter", "lighten",
     "line-through", "linear", "linear-gradient", "lines", "list-item", "listbox", "listitem",
     "local", "logical", "loud", "lower", "lower-alpha", "lower-armenian",
     "lower-greek", "lower-hexadecimal", "lower-latin", "lower-norwegian",
     "lower-roman", "lowercase", "ltr", "luminosity", "malayalam", "manipulation", "match", "matrix", "matrix3d",
     "media-play-button", "media-slider", "media-sliderthumb",
     "media-volume-slider", "media-volume-sliderthumb", "medium",
     "menu", "menulist", "menulist-button",
     "menutext", "message-box", "middle", "min-intrinsic",
     "mix", "mongolian", "monospace", "move", "multiple", "multiple_mask_images", "multiply", "myanmar", "n-resize",
     "narrower", "ne-resize", "nesw-resize", "no-close-quote", "no-drop",
     "no-open-quote", "no-repeat", "none", "normal", "not-allowed", "nowrap",
     "ns-resize", "numbers", "numeric", "nw-resize", "nwse-resize", "oblique", "octal", "opacity", "open-quote",
     "optimizeLegibility", "optimizeSpeed", "oriya", "oromo", "outset",
     "outside", "outside-shape", "overlay", "overline", "padding", "padding-box",
     "painted", "page", "paused", "persian", "perspective", "pinch-zoom", "plus-darker", "plus-lighter",
     "pointer", "polygon", "portrait", "pre", "pre-line", "pre-wrap", "preserve-3d",
     "progress", "push-button", "radial-gradient", "radio", "read-only",
     "read-write", "read-write-plaintext-only", "rectangle", "region",
     "relative", "repeat", "repeating-linear-gradient", "repeating-radial-gradient",
     "repeating-conic-gradient", "repeat-x", "repeat-y", "reset", "reverse",
     "rgb", "rgba", "ridge", "right", "rotate", "rotate3d", "rotateX", "rotateY",
     "rotateZ", "round", "row", "row-resize", "row-reverse", "rtl", "run-in", "running",
     "s-resize", "sans-serif", "saturate", "saturation", "scale", "scale3d", "scaleX", "scaleY", "scaleZ", "screen",
     "scroll", "scrollbar", "scroll-position", "se-resize", "searchfield",
     "searchfield-cancel-button", "searchfield-decoration",
     "searchfield-results-button", "searchfield-results-decoration", "self-start", "self-end",
     "semi-condensed", "semi-expanded", "separate", "sepia", "serif", "show", "sidama",
     "simp-chinese-formal", "simp-chinese-informal", "single",
     "skew", "skewX", "skewY", "skip-white-space", "slide", "slider-horizontal",
     "slider-vertical", "sliderthumb-horizontal", "sliderthumb-vertical", "slow",
     "small", "small-caps", "small-caption", "smaller", "soft-light", "solid", "somali",
     "source-atop", "source-in", "source-out", "source-over", "space", "space-around", "space-between", "space-evenly", "spell-out", "square",
     "square-button", "start", "static", "status-bar", "stretch", "stroke", "stroke-box", "sub",
     "subpixel-antialiased", "svg_masks", "super", "sw-resize", "symbolic", "symbols", "system-ui", "table",
     "table-caption", "table-cell", "table-column", "table-column-group",
     "table-footer-group", "table-header-group", "table-row", "table-row-group",
     "tamil",
     "telugu", "text", "text-bottom", "text-top", "textarea", "textfield", "thai",
     "thick", "thin", "threeddarkshadow", "threedface", "threedhighlight",
     "threedlightshadow", "threedshadow", "tibetan", "tigre", "tigrinya-er",
     "tigrinya-er-abegede", "tigrinya-et", "tigrinya-et-abegede", "to", "top",
     "trad-chinese-formal", "trad-chinese-informal", "transform",
     "translate", "translate3d", "translateX", "translateY", "translateZ",
     "transparent", "ultra-condensed", "ultra-expanded", "underline", "unidirectional-pan", "unset", "up",
     "upper-alpha", "upper-armenian", "upper-greek", "upper-hexadecimal",
     "upper-latin", "upper-norwegian", "upper-roman", "uppercase", "urdu", "url",
     "var", "vertical", "vertical-text", "view-box", "visible", "visibleFill", "visiblePainted",
     "visibleStroke", "visual", "w-resize", "wait", "wave", "wider",
     "window", "windowframe", "windowtext", "words", "wrap", "wrap-reverse", "x-large", "x-small", "xor",
     "xx-large", "xx-small"
   ], valueKeywords$1 = keySet$1(valueKeywords_$1);

   var allWords = documentTypes_$1.concat(mediaTypes_$1).concat(mediaFeatures_$1).concat(mediaValueKeywords_)
       .concat(propertyKeywords_$1).concat(nonStandardPropertyKeywords_$1).concat(colorKeywords_$1)
       .concat(valueKeywords_$1);

   const keywords$E = {properties: propertyKeywords_$1, colors: colorKeywords_$1,
                            fonts: fontProperties_$1, values: valueKeywords_$1, all: allWords};

   const defaults = {
     documentTypes: documentTypes$1,
     mediaTypes: mediaTypes$1,
     mediaFeatures: mediaFeatures$1,
     mediaValueKeywords: mediaValueKeywords,
     propertyKeywords: propertyKeywords$1,
     nonStandardPropertyKeywords: nonStandardPropertyKeywords$1,
     fontProperties: fontProperties$1,
     counterDescriptors: counterDescriptors,
     colorKeywords: colorKeywords$1,
     valueKeywords: valueKeywords$1,
     tokenHooks: {
       "/": function(stream, state) {
         if (!stream.eat("*")) return false;
         state.tokenize = tokenCComment$3;
         return tokenCComment$3(stream, state);
       }
     }
   };

   const css = mkCSS({name: "css"});

   function tokenCComment$3(stream, state) {
     var maybeEnd = false, ch;
     while ((ch = stream.next()) != null) {
       if (maybeEnd && ch == "/") {
         state.tokenize = null;
         break;
       }
       maybeEnd = (ch == "*");
     }
     return ["comment", "comment"];
   }

   const sCSS = mkCSS({
     name: "scss",
     mediaTypes: mediaTypes$1,
     mediaFeatures: mediaFeatures$1,
     mediaValueKeywords: mediaValueKeywords,
     propertyKeywords: propertyKeywords$1,
     nonStandardPropertyKeywords: nonStandardPropertyKeywords$1,
     colorKeywords: colorKeywords$1,
     valueKeywords: valueKeywords$1,
     fontProperties: fontProperties$1,
     allowNested: true,
     lineComment: "//",
     tokenHooks: {
       "/": function(stream, state) {
         if (stream.eat("/")) {
           stream.skipToEnd();
           return ["comment", "comment"];
         } else if (stream.eat("*")) {
           state.tokenize = tokenCComment$3;
           return tokenCComment$3(stream, state);
         } else {
           return ["operator", "operator"];
         }
       },
       ":": function(stream) {
         if (stream.match(/^\s*\{/, false))
           return [null, null]
         return false;
       },
       "$": function(stream) {
         stream.match(/^[\w-]+/);
         if (stream.match(/^\s*:/, false))
           return ["def", "variable-definition"];
         return ["variableName.special", "variable"];
       },
       "#": function(stream) {
         if (!stream.eat("{")) return false;
         return [null, "interpolation"];
       }
     }
   });

   const less = mkCSS({
     name: "less",
     mediaTypes: mediaTypes$1,
     mediaFeatures: mediaFeatures$1,
     mediaValueKeywords: mediaValueKeywords,
     propertyKeywords: propertyKeywords$1,
     nonStandardPropertyKeywords: nonStandardPropertyKeywords$1,
     colorKeywords: colorKeywords$1,
     valueKeywords: valueKeywords$1,
     fontProperties: fontProperties$1,
     allowNested: true,
     lineComment: "//",
     tokenHooks: {
       "/": function(stream, state) {
         if (stream.eat("/")) {
           stream.skipToEnd();
           return ["comment", "comment"];
         } else if (stream.eat("*")) {
           state.tokenize = tokenCComment$3;
           return tokenCComment$3(stream, state);
         } else {
           return ["operator", "operator"];
         }
       },
       "@": function(stream) {
         if (stream.eat("{")) return [null, "interpolation"];
         if (stream.match(/^(charset|document|font-face|import|(-(moz|ms|o|webkit)-)?keyframes|media|namespace|page|supports)\b/i, false)) return false;
         stream.eatWhile(/[\w\\\-]/);
         if (stream.match(/^\s*:/, false))
           return ["def", "variable-definition"];
         return ["variableName", "variable"];
       },
       "&": function() {
         return ["atom", "atom"];
       }
     }
   });

   const gss = mkCSS({
     name: "gss",
     documentTypes: documentTypes$1,
     mediaTypes: mediaTypes$1,
     mediaFeatures: mediaFeatures$1,
     propertyKeywords: propertyKeywords$1,
     nonStandardPropertyKeywords: nonStandardPropertyKeywords$1,
     fontProperties: fontProperties$1,
     counterDescriptors: counterDescriptors,
     colorKeywords: colorKeywords$1,
     valueKeywords: valueKeywords$1,
     supportsAtComponent: true,
     tokenHooks: {
       "/": function(stream, state) {
         if (!stream.eat("*")) return false;
         state.tokenize = tokenCComment$3;
         return tokenCComment$3(stream, state);
       }
     }
   });

   var css$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      css: css,
      gss: gss,
      keywords: keywords$E,
      less: less,
      mkCSS: mkCSS,
      sCSS: sCSS
   });

   var variable_regex$1 = /({)?[a-zA-Z0-9_]+(})?/;

   function tokenString$r(stream, state) {
     var current, prev, found_var = false;
     while (!stream.eol() && (current = stream.next()) != state.pending) {
       if (current === '$' && prev != '\\' && state.pending == '"') {
         found_var = true;
         break;
       }
       prev = current;
     }
     if (found_var) {
       stream.backUp(1);
     }
     if (current == state.pending) {
       state.continueString = false;
     } else {
       state.continueString = true;
     }
     return "string";
   }

   function tokenize$4(stream, state) {
     var ch = stream.next();

     // Have we found a variable?
     if (ch === '$') {
       if (stream.match(variable_regex$1)) {
         return 'variableName.special';
       }
       return 'variable';
     }
     // Should we still be looking for the end of a string?
     if (state.continueString) {
       // If so, go through the loop again
       stream.backUp(1);
       return tokenString$r(stream, state);
     }
     // Do we just have a function on our hands?
     // In 'cmake_minimum_required (VERSION 2.8.8)', 'cmake_minimum_required' is matched
     if (stream.match(/(\s+)?\w+\(/) || stream.match(/(\s+)?\w+\ \(/)) {
       stream.backUp(1);
       return 'def';
     }
     if (ch == "#") {
       stream.skipToEnd();
       return "comment";
     }
     // Have we found a string?
     if (ch == "'" || ch == '"') {
       // Store the type (single or double)
       state.pending = ch;
       // Perform the looping function to find the end
       return tokenString$r(stream, state);
     }
     if (ch == '(' || ch == ')') {
       return 'bracket';
     }
     if (ch.match(/[0-9]/)) {
       return 'number';
     }
     stream.eatWhile(/[\w-]/);
     return null;
   }
   const cmake = {
     name: "cmake",
     startState: function () {
       var state = {};
       state.inDefinition = false;
       state.inInclude = false;
       state.continueString = false;
       state.pending = false;
       return state;
     },
     token: function (stream, state) {
       if (stream.eatSpace()) return null;
       return tokenize$4(stream, state);
     }
   };

   var cmake$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      cmake: cmake
   });

   var ERRORCLASS$1 = "error";

   function wordRegexp$e(words) {
     return new RegExp("^((" + words.join(")|(") + "))\\b");
   }

   var operators$6 = /^(?:->|=>|\+[+=]?|-[\-=]?|\*[\*=]?|\/[\/=]?|[=!]=|<[><]?=?|>>?=?|%=?|&=?|\|=?|\^=?|\~|!|\?|(or|and|\|\||&&|\?)=)/;
   var delimiters$1 = /^(?:[()\[\]{},:`=;]|\.\.?\.?)/;
   var identifiers$8 = /^[_A-Za-z$][_A-Za-z$0-9]*/;
   var atProp = /^@[_A-Za-z$][_A-Za-z$0-9]*/;

   var wordOperators$3 = wordRegexp$e(["and", "or", "not",
                                   "is", "isnt", "in",
                                   "instanceof", "typeof"]);
   var indentKeywords$1 = ["for", "while", "loop", "if", "unless", "else",
                         "switch", "try", "catch", "finally", "class"];
   var commonKeywords$5 = ["break", "by", "continue", "debugger", "delete",
                         "do", "in", "of", "new", "return", "then",
                         "this", "@", "throw", "when", "until", "extends"];

   var keywords$D = wordRegexp$e(indentKeywords$1.concat(commonKeywords$5));

   indentKeywords$1 = wordRegexp$e(indentKeywords$1);


   var stringPrefixes$2 = /^('{3}|\"{3}|['\"])/;
   var regexPrefixes = /^(\/{3}|\/)/;
   var commonConstants = ["Infinity", "NaN", "undefined", "null", "true", "false", "on", "off", "yes", "no"];
   var constants = wordRegexp$e(commonConstants);

   // Tokenizers
   function tokenBase$J(stream, state) {
     // Handle scope changes
     if (stream.sol()) {
       if (state.scope.align === null) state.scope.align = false;
       var scopeOffset = state.scope.offset;
       if (stream.eatSpace()) {
         var lineOffset = stream.indentation();
         if (lineOffset > scopeOffset && state.scope.type == "coffee") {
           return "indent";
         } else if (lineOffset < scopeOffset) {
           return "dedent";
         }
         return null;
       } else {
         if (scopeOffset > 0) {
           dedent$1(stream, state);
         }
       }
     }
     if (stream.eatSpace()) {
       return null;
     }

     var ch = stream.peek();

     // Handle docco title comment (single line)
     if (stream.match("####")) {
       stream.skipToEnd();
       return "comment";
     }

     // Handle multi line comments
     if (stream.match("###")) {
       state.tokenize = longComment;
       return state.tokenize(stream, state);
     }

     // Single line comment
     if (ch === "#") {
       stream.skipToEnd();
       return "comment";
     }

     // Handle number literals
     if (stream.match(/^-?[0-9\.]/, false)) {
       var floatLiteral = false;
       // Floats
       if (stream.match(/^-?\d*\.\d+(e[\+\-]?\d+)?/i)) {
         floatLiteral = true;
       }
       if (stream.match(/^-?\d+\.\d*/)) {
         floatLiteral = true;
       }
       if (stream.match(/^-?\.\d+/)) {
         floatLiteral = true;
       }

       if (floatLiteral) {
         // prevent from getting extra . on 1..
         if (stream.peek() == "."){
           stream.backUp(1);
         }
         return "number";
       }
       // Integers
       var intLiteral = false;
       // Hex
       if (stream.match(/^-?0x[0-9a-f]+/i)) {
         intLiteral = true;
       }
       // Decimal
       if (stream.match(/^-?[1-9]\d*(e[\+\-]?\d+)?/)) {
         intLiteral = true;
       }
       // Zero by itself with no other piece of number.
       if (stream.match(/^-?0(?![\dx])/i)) {
         intLiteral = true;
       }
       if (intLiteral) {
         return "number";
       }
     }

     // Handle strings
     if (stream.match(stringPrefixes$2)) {
       state.tokenize = tokenFactory(stream.current(), false, "string");
       return state.tokenize(stream, state);
     }
     // Handle regex literals
     if (stream.match(regexPrefixes)) {
       if (stream.current() != "/" || stream.match(/^.*\//, false)) { // prevent highlight of division
         state.tokenize = tokenFactory(stream.current(), true, "string.special");
         return state.tokenize(stream, state);
       } else {
         stream.backUp(1);
       }
     }



     // Handle operators and delimiters
     if (stream.match(operators$6) || stream.match(wordOperators$3)) {
       return "operator";
     }
     if (stream.match(delimiters$1)) {
       return "punctuation";
     }

     if (stream.match(constants)) {
       return "atom";
     }

     if (stream.match(atProp) || state.prop && stream.match(identifiers$8)) {
       return "property";
     }

     if (stream.match(keywords$D)) {
       return "keyword";
     }

     if (stream.match(identifiers$8)) {
       return "variable";
     }

     // Handle non-detected items
     stream.next();
     return ERRORCLASS$1;
   }

   function tokenFactory(delimiter, singleline, outclass) {
     return function(stream, state) {
       while (!stream.eol()) {
         stream.eatWhile(/[^'"\/\\]/);
         if (stream.eat("\\")) {
           stream.next();
           if (singleline && stream.eol()) {
             return outclass;
           }
         } else if (stream.match(delimiter)) {
           state.tokenize = tokenBase$J;
           return outclass;
         } else {
           stream.eat(/['"\/]/);
         }
       }
       if (singleline) {
         state.tokenize = tokenBase$J;
       }
       return outclass;
     };
   }

   function longComment(stream, state) {
     while (!stream.eol()) {
       stream.eatWhile(/[^#]/);
       if (stream.match("###")) {
         state.tokenize = tokenBase$J;
         break;
       }
       stream.eatWhile("#");
     }
     return "comment";
   }

   function indent$1(stream, state, type = "coffee") {
     var offset = 0, align = false, alignOffset = null;
     for (var scope = state.scope; scope; scope = scope.prev) {
       if (scope.type === "coffee" || scope.type == "}") {
         offset = scope.offset + stream.indentUnit;
         break;
       }
     }
     if (type !== "coffee") {
       align = null;
       alignOffset = stream.column() + stream.current().length;
     } else if (state.scope.align) {
       state.scope.align = false;
     }
     state.scope = {
       offset: offset,
       type: type,
       prev: state.scope,
       align: align,
       alignOffset: alignOffset
     };
   }

   function dedent$1(stream, state) {
     if (!state.scope.prev) return;
     if (state.scope.type === "coffee") {
       var _indent = stream.indentation();
       var matched = false;
       for (var scope = state.scope; scope; scope = scope.prev) {
         if (_indent === scope.offset) {
           matched = true;
           break;
         }
       }
       if (!matched) {
         return true;
       }
       while (state.scope.prev && state.scope.offset !== _indent) {
         state.scope = state.scope.prev;
       }
       return false;
     } else {
       state.scope = state.scope.prev;
       return false;
     }
   }

   function tokenLexer$1(stream, state) {
     var style = state.tokenize(stream, state);
     var current = stream.current();

     // Handle scope changes.
     if (current === "return") {
       state.dedent = true;
     }
     if (((current === "->" || current === "=>") && stream.eol())
         || style === "indent") {
       indent$1(stream, state);
     }
     var delimiter_index = "[({".indexOf(current);
     if (delimiter_index !== -1) {
       indent$1(stream, state, "])}".slice(delimiter_index, delimiter_index+1));
     }
     if (indentKeywords$1.exec(current)){
       indent$1(stream, state);
     }
     if (current == "then"){
       dedent$1(stream, state);
     }


     if (style === "dedent") {
       if (dedent$1(stream, state)) {
         return ERRORCLASS$1;
       }
     }
     delimiter_index = "])}".indexOf(current);
     if (delimiter_index !== -1) {
       while (state.scope.type == "coffee" && state.scope.prev)
         state.scope = state.scope.prev;
       if (state.scope.type == current)
         state.scope = state.scope.prev;
     }
     if (state.dedent && stream.eol()) {
       if (state.scope.type == "coffee" && state.scope.prev)
         state.scope = state.scope.prev;
       state.dedent = false;
     }

     return style == "indent" || style == "dedent" ? null : style;
   }

   const coffeeScript = {
     name: "coffeescript",
     startState: function() {
       return {
         tokenize: tokenBase$J,
         scope: {offset: 0, type:"coffee", prev: null, align: false},
         prop: false,
         dedent: 0
       };
     },

     token: function(stream, state) {
       var fillAlign = state.scope.align === null && state.scope;
       if (fillAlign && stream.sol()) fillAlign.align = false;

       var style = tokenLexer$1(stream, state);
       if (style && style != "comment") {
         if (fillAlign) fillAlign.align = true;
         state.prop = style == "punctuation" && stream.current() == ".";
       }

       return style;
     },

     indent: function(state, text) {
       if (state.tokenize != tokenBase$J) return 0;
       var scope = state.scope;
       var closer = text && "])}".indexOf(text.charAt(0)) > -1;
       if (closer) while (scope.type == "coffee" && scope.prev) scope = scope.prev;
       var closes = closer && scope.type === text.charAt(0);
       if (scope.align)
         return scope.alignOffset - (closes ? 1 : 0);
       else
         return (closes ? scope.prev : scope).offset;
     },

     languageData: {
       commentTokens: {line: "#"}
     }
   };

   var coffeescript = /*#__PURE__*/Object.freeze({
      __proto__: null,
      coffeeScript: coffeeScript
   });

   var specialForm = /^(block|let*|return-from|catch|load-time-value|setq|eval-when|locally|symbol-macrolet|flet|macrolet|tagbody|function|multiple-value-call|the|go|multiple-value-prog1|throw|if|progn|unwind-protect|labels|progv|let|quote)$/;
   var assumeBody = /^with|^def|^do|^prog|case$|^cond$|bind$|when$|unless$/;
   var numLiteral = /^(?:[+\-]?(?:\d+|\d*\.\d+)(?:[efd][+\-]?\d+)?|[+\-]?\d+(?:\/[+\-]?\d+)?|#b[+\-]?[01]+|#o[+\-]?[0-7]+|#x[+\-]?[\da-f]+)/;
   var symbol$2 = /[^\s'`,@()\[\]";]/;
   var type$5;

   function readSym(stream) {
     var ch;
     while (ch = stream.next()) {
       if (ch == "\\") stream.next();
       else if (!symbol$2.test(ch)) { stream.backUp(1); break; }
     }
     return stream.current();
   }

   function base(stream, state) {
     if (stream.eatSpace()) {type$5 = "ws"; return null;}
     if (stream.match(numLiteral)) return "number";
     var ch = stream.next();
     if (ch == "\\") ch = stream.next();

     if (ch == '"') return (state.tokenize = inString)(stream, state);
     else if (ch == "(") { type$5 = "open"; return "bracket"; }
     else if (ch == ")" || ch == "]") { type$5 = "close"; return "bracket"; }
     else if (ch == ";") { stream.skipToEnd(); type$5 = "ws"; return "comment"; }
     else if (/['`,@]/.test(ch)) return null;
     else if (ch == "|") {
       if (stream.skipTo("|")) { stream.next(); return "variableName"; }
       else { stream.skipToEnd(); return "error"; }
     } else if (ch == "#") {
       var ch = stream.next();
       if (ch == "(") { type$5 = "open"; return "bracket"; }
       else if (/[+\-=\.']/.test(ch)) return null;
       else if (/\d/.test(ch) && stream.match(/^\d*#/)) return null;
       else if (ch == "|") return (state.tokenize = inComment)(stream, state);
       else if (ch == ":") { readSym(stream); return "meta"; }
       else if (ch == "\\") { stream.next(); readSym(stream); return "string.special" }
       else return "error";
     } else {
       var name = readSym(stream);
       if (name == ".") return null;
       type$5 = "symbol";
       if (name == "nil" || name == "t" || name.charAt(0) == ":") return "atom";
       if (state.lastType == "open" && (specialForm.test(name) || assumeBody.test(name))) return "keyword";
       if (name.charAt(0) == "&") return "variableName.special";
       return "variableName";
     }
   }

   function inString(stream, state) {
     var escaped = false, next;
     while (next = stream.next()) {
       if (next == '"' && !escaped) { state.tokenize = base; break; }
       escaped = !escaped && next == "\\";
     }
     return "string";
   }

   function inComment(stream, state) {
     var next, last;
     while (next = stream.next()) {
       if (next == "#" && last == "|") { state.tokenize = base; break; }
       last = next;
     }
     type$5 = "ws";
     return "comment";
   }

   const commonLisp = {
     name: "commonlisp",
     startState: function () {
       return {ctx: {prev: null, start: 0, indentTo: 0}, lastType: null, tokenize: base};
     },

     token: function (stream, state) {
       if (stream.sol() && typeof state.ctx.indentTo != "number")
         state.ctx.indentTo = state.ctx.start + 1;

       type$5 = null;
       var style = state.tokenize(stream, state);
       if (type$5 != "ws") {
         if (state.ctx.indentTo == null) {
           if (type$5 == "symbol" && assumeBody.test(stream.current()))
             state.ctx.indentTo = state.ctx.start + stream.indentUnit;
           else
             state.ctx.indentTo = "next";
         } else if (state.ctx.indentTo == "next") {
           state.ctx.indentTo = stream.column();
         }
         state.lastType = type$5;
       }
       if (type$5 == "open") state.ctx = {prev: state.ctx, start: stream.column(), indentTo: null};
       else if (type$5 == "close") state.ctx = state.ctx.prev || state.ctx;
       return style;
     },

     indent: function (state) {
       var i = state.ctx.indentTo;
       return typeof i == "number" ? i : state.ctx.start + 1;
     },

     languageData: {
       commentTokens: {line: ";;", block: {open: "#|", close: "|#"}},
       closeBrackets: {brackets: ["(", "[", "{", '"']}
     }
   };

   var commonlisp = /*#__PURE__*/Object.freeze({
      __proto__: null,
      commonLisp: commonLisp
   });

   var wordRegexp$d = function(words) {
     return new RegExp("^(?:" + words.join("|") + ")$", "i");
   };

   var tokenBase$I = function(stream/*, state*/) {
     curPunc$c = null;
     var ch = stream.next();
     if (ch ==='"') {
       stream.match(/^.*?"/);
       return "string";
     }
     if (ch === "'") {
       stream.match(/^.*?'/);
       return "string";
     }
     if (/[{}\(\),\.;\[\]]/.test(ch)) {
       curPunc$c = ch;
       return "punctuation";
     } else if (ch === "/" && stream.eat("/")) {
       stream.skipToEnd();
       return "comment";
     } else if (operatorChars$2.test(ch)) {
       stream.eatWhile(operatorChars$2);
       return null;
     } else {
       stream.eatWhile(/[_\w\d]/);
       if (stream.eat(":")) {
         stream.eatWhile(/[\w\d_\-]/);
         return "atom";
       }
       var word = stream.current();
       if (funcs.test(word)) return "builtin";
       if (preds.test(word)) return "def";
       if (keywords$C.test(word) || systemKeywords.test(word)) return "keyword";
       return "variable";
     }
   };
   var pushContext$e = function(state, type, col) {
     return state.context = {
       prev: state.context,
       indent: state.indent,
       col: col,
       type: type
     };
   };
   var popContext$e = function(state) {
     state.indent = state.context.indent;
     return state.context = state.context.prev;
   };
   var curPunc$c;
   var funcs = wordRegexp$d(["abs", "acos", "allShortestPaths", "asin", "atan", "atan2", "avg", "ceil", "coalesce", "collect", "cos", "cot", "count", "degrees", "e", "endnode", "exp", "extract", "filter", "floor", "haversin", "head", "id", "keys", "labels", "last", "left", "length", "log", "log10", "lower", "ltrim", "max", "min", "node", "nodes", "percentileCont", "percentileDisc", "pi", "radians", "rand", "range", "reduce", "rel", "relationship", "relationships", "replace", "reverse", "right", "round", "rtrim", "shortestPath", "sign", "sin", "size", "split", "sqrt", "startnode", "stdev", "stdevp", "str", "substring", "sum", "tail", "tan", "timestamp", "toFloat", "toInt", "toString", "trim", "type", "upper"]);
   var preds = wordRegexp$d(["all", "and", "any", "contains", "exists", "has", "in", "none", "not", "or", "single", "xor"]);
   var keywords$C = wordRegexp$d(["as", "asc", "ascending", "assert", "by", "case", "commit", "constraint", "create", "csv", "cypher", "delete", "desc", "descending", "detach", "distinct", "drop", "else", "end", "ends", "explain", "false", "fieldterminator", "foreach", "from", "headers", "in", "index", "is", "join", "limit", "load", "match", "merge", "null", "on", "optional", "order", "periodic", "profile", "remove", "return", "scan", "set", "skip", "start", "starts", "then", "true", "union", "unique", "unwind", "using", "when", "where", "with", "call", "yield"]);
   var systemKeywords = wordRegexp$d(["access", "active", "assign", "all", "alter", "as", "catalog", "change", "copy", "create", "constraint", "constraints", "current", "database", "databases", "dbms", "default", "deny", "drop", "element", "elements", "exists", "from", "grant", "graph", "graphs", "if", "index", "indexes", "label", "labels", "management", "match", "name", "names", "new", "node", "nodes", "not", "of", "on", "or", "password", "populated", "privileges", "property", "read", "relationship", "relationships", "remove", "replace", "required", "revoke", "role", "roles", "set", "show", "start", "status", "stop", "suspended", "to", "traverse", "type", "types", "user", "users", "with", "write"]);
   var operatorChars$2 = /[*+\-<>=&|~%^]/;

   const cypher = {
     name: "cypher",
     startState: function() {
       return {
         tokenize: tokenBase$I,
         context: null,
         indent: 0,
         col: 0
       };
     },
     token: function(stream, state) {
       if (stream.sol()) {
         if (state.context && (state.context.align == null)) {
           state.context.align = false;
         }
         state.indent = stream.indentation();
       }
       if (stream.eatSpace()) {
         return null;
       }
       var style = state.tokenize(stream, state);
       if (style !== "comment" && state.context && (state.context.align == null) && state.context.type !== "pattern") {
         state.context.align = true;
       }
       if (curPunc$c === "(") {
         pushContext$e(state, ")", stream.column());
       } else if (curPunc$c === "[") {
         pushContext$e(state, "]", stream.column());
       } else if (curPunc$c === "{") {
         pushContext$e(state, "}", stream.column());
       } else if (/[\]\}\)]/.test(curPunc$c)) {
         while (state.context && state.context.type === "pattern") {
           popContext$e(state);
         }
         if (state.context && curPunc$c === state.context.type) {
           popContext$e(state);
         }
       } else if (curPunc$c === "." && state.context && state.context.type === "pattern") {
         popContext$e(state);
       } else if (/atom|string|variable/.test(style) && state.context) {
         if (/[\}\]]/.test(state.context.type)) {
           pushContext$e(state, "pattern", stream.column());
         } else if (state.context.type === "pattern" && !state.context.align) {
           state.context.align = true;
           state.context.col = stream.column();
         }
       }
       return style;
     },
     indent: function(state, textAfter, cx) {
       var firstChar = textAfter && textAfter.charAt(0);
       var context = state.context;
       if (/[\]\}]/.test(firstChar)) {
         while (context && context.type === "pattern") {
           context = context.prev;
         }
       }
       var closing = context && firstChar === context.type;
       if (!context) return 0;
       if (context.type === "keywords") return null
       if (context.align) return context.col + (closing ? 0 : 1);
       return context.indent + (closing ? 0 : cx.unit);
     }
   };

   var cypher$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      cypher: cypher
   });

   function wordRegexp$c(words) {
     return new RegExp("^((" + words.join(")|(") + "))\\b");
   }

   var wordOperators$2 = wordRegexp$c(["and", "or", "not", "is"]);
   var commonKeywords$4 = ["as", "assert", "break", "class", "continue",
                         "def", "del", "elif", "else", "except", "finally",
                         "for", "from", "global", "if", "import",
                         "lambda", "pass", "raise", "return",
                         "try", "while", "with", "yield", "in"];
   var commonBuiltins$1 = ["abs", "all", "any", "bin", "bool", "bytearray", "callable", "chr",
                         "classmethod", "compile", "complex", "delattr", "dict", "dir", "divmod",
                         "enumerate", "eval", "filter", "float", "format", "frozenset",
                         "getattr", "globals", "hasattr", "hash", "help", "hex", "id",
                         "input", "int", "isinstance", "issubclass", "iter", "len",
                         "list", "locals", "map", "max", "memoryview", "min", "next",
                         "object", "oct", "open", "ord", "pow", "property", "range",
                         "repr", "reversed", "round", "set", "setattr", "slice",
                         "sorted", "staticmethod", "str", "sum", "super", "tuple",
                         "type", "vars", "zip", "__import__", "NotImplemented",
                         "Ellipsis", "__debug__"];

   function top(state) {
     return state.scopes[state.scopes.length - 1];
   }

   function mkPython(parserConf) {
     var ERRORCLASS = "error";

     var delimiters = parserConf.delimiters || parserConf.singleDelimiters || /^[\(\)\[\]\{\}@,:`=;\.\\]/;
     //               (Backwards-compatibility with old, cumbersome config system)
     var operators = [parserConf.singleOperators, parserConf.doubleOperators, parserConf.doubleDelimiters, parserConf.tripleDelimiters,
                      parserConf.operators || /^([-+*/%\/&|^]=?|[<>=]+|\/\/=?|\*\*=?|!=|[~!@]|\.\.\.)/];
     for (var i = 0; i < operators.length; i++) if (!operators[i]) operators.splice(i--, 1);

     var hangingIndent = parserConf.hangingIndent;

     var myKeywords = commonKeywords$4, myBuiltins = commonBuiltins$1;
     if (parserConf.extra_keywords != undefined)
       myKeywords = myKeywords.concat(parserConf.extra_keywords);

     if (parserConf.extra_builtins != undefined)
       myBuiltins = myBuiltins.concat(parserConf.extra_builtins);

     var py3 = !(parserConf.version && Number(parserConf.version) < 3);
     if (py3) {
       // since http://legacy.python.org/dev/peps/pep-0465/ @ is also an operator
       var identifiers = parserConf.identifiers|| /^[_A-Za-z\u00A1-\uFFFF][_A-Za-z0-9\u00A1-\uFFFF]*/;
       myKeywords = myKeywords.concat(["nonlocal", "False", "True", "None", "async", "await"]);
       myBuiltins = myBuiltins.concat(["ascii", "bytes", "exec", "print"]);
       var stringPrefixes = new RegExp("^(([rbuf]|(br)|(rb)|(fr)|(rf))?('{3}|\"{3}|['\"]))", "i");
     } else {
       var identifiers = parserConf.identifiers|| /^[_A-Za-z][_A-Za-z0-9]*/;
       myKeywords = myKeywords.concat(["exec", "print"]);
       myBuiltins = myBuiltins.concat(["apply", "basestring", "buffer", "cmp", "coerce", "execfile",
                                       "file", "intern", "long", "raw_input", "reduce", "reload",
                                       "unichr", "unicode", "xrange", "False", "True", "None"]);
       var stringPrefixes = new RegExp("^(([rubf]|(ur)|(br))?('{3}|\"{3}|['\"]))", "i");
     }
     var keywords = wordRegexp$c(myKeywords);
     var builtins = wordRegexp$c(myBuiltins);

     // tokenizers
     function tokenBase(stream, state) {
       var sol = stream.sol() && state.lastToken != "\\";
       if (sol) state.indent = stream.indentation();
       // Handle scope changes
       if (sol && top(state).type == "py") {
         var scopeOffset = top(state).offset;
         if (stream.eatSpace()) {
           var lineOffset = stream.indentation();
           if (lineOffset > scopeOffset)
             pushPyScope(stream, state);
           else if (lineOffset < scopeOffset && dedent(stream, state) && stream.peek() != "#")
             state.errorToken = true;
           return null;
         } else {
           var style = tokenBaseInner(stream, state);
           if (scopeOffset > 0 && dedent(stream, state))
             style += " " + ERRORCLASS;
           return style;
         }
       }
       return tokenBaseInner(stream, state);
     }

     function tokenBaseInner(stream, state, inFormat) {
       if (stream.eatSpace()) return null;

       // Handle Comments
       if (!inFormat && stream.match(/^#.*/)) return "comment";

       // Handle Number Literals
       if (stream.match(/^[0-9\.]/, false)) {
         var floatLiteral = false;
         // Floats
         if (stream.match(/^[\d_]*\.\d+(e[\+\-]?\d+)?/i)) { floatLiteral = true; }
         if (stream.match(/^[\d_]+\.\d*/)) { floatLiteral = true; }
         if (stream.match(/^\.\d+/)) { floatLiteral = true; }
         if (floatLiteral) {
           // Float literals may be "imaginary"
           stream.eat(/J/i);
           return "number";
         }
         // Integers
         var intLiteral = false;
         // Hex
         if (stream.match(/^0x[0-9a-f_]+/i)) intLiteral = true;
         // Binary
         if (stream.match(/^0b[01_]+/i)) intLiteral = true;
         // Octal
         if (stream.match(/^0o[0-7_]+/i)) intLiteral = true;
         // Decimal
         if (stream.match(/^[1-9][\d_]*(e[\+\-]?[\d_]+)?/)) {
           // Decimal literals may be "imaginary"
           stream.eat(/J/i);
           // TODO - Can you have imaginary longs?
           intLiteral = true;
         }
         // Zero by itself with no other piece of number.
         if (stream.match(/^0(?![\dx])/i)) intLiteral = true;
         if (intLiteral) {
           // Integer literals may be "long"
           stream.eat(/L/i);
           return "number";
         }
       }

       // Handle Strings
       if (stream.match(stringPrefixes)) {
         var isFmtString = stream.current().toLowerCase().indexOf('f') !== -1;
         if (!isFmtString) {
           state.tokenize = tokenStringFactory(stream.current(), state.tokenize);
           return state.tokenize(stream, state);
         } else {
           state.tokenize = formatStringFactory(stream.current(), state.tokenize);
           return state.tokenize(stream, state);
         }
       }

       for (var i = 0; i < operators.length; i++)
         if (stream.match(operators[i])) return "operator"

       if (stream.match(delimiters)) return "punctuation";

       if (state.lastToken == "." && stream.match(identifiers))
         return "property";

       if (stream.match(keywords) || stream.match(wordOperators$2))
         return "keyword";

       if (stream.match(builtins))
         return "builtin";

       if (stream.match(/^(self|cls)\b/))
         return "self";

       if (stream.match(identifiers)) {
         if (state.lastToken == "def" || state.lastToken == "class")
           return "def";
         return "variable";
       }

       // Handle non-detected items
       stream.next();
       return inFormat ? null :ERRORCLASS;
     }

     function formatStringFactory(delimiter, tokenOuter) {
       while ("rubf".indexOf(delimiter.charAt(0).toLowerCase()) >= 0)
         delimiter = delimiter.substr(1);

       var singleline = delimiter.length == 1;
       var OUTCLASS = "string";

       function tokenNestedExpr(depth) {
         return function(stream, state) {
           var inner = tokenBaseInner(stream, state, true);
           if (inner == "punctuation") {
             if (stream.current() == "{") {
               state.tokenize = tokenNestedExpr(depth + 1);
             } else if (stream.current() == "}") {
               if (depth > 1) state.tokenize = tokenNestedExpr(depth - 1);
               else state.tokenize = tokenString;
             }
           }
           return inner
         }
       }

       function tokenString(stream, state) {
         while (!stream.eol()) {
           stream.eatWhile(/[^'"\{\}\\]/);
           if (stream.eat("\\")) {
             stream.next();
             if (singleline && stream.eol())
               return OUTCLASS;
           } else if (stream.match(delimiter)) {
             state.tokenize = tokenOuter;
             return OUTCLASS;
           } else if (stream.match('{{')) {
             // ignore {{ in f-str
             return OUTCLASS;
           } else if (stream.match('{', false)) {
             // switch to nested mode
             state.tokenize = tokenNestedExpr(0);
             if (stream.current()) return OUTCLASS;
             else return state.tokenize(stream, state)
           } else if (stream.match('}}')) {
             return OUTCLASS;
           } else if (stream.match('}')) {
             // single } in f-string is an error
             return ERRORCLASS;
           } else {
             stream.eat(/['"]/);
           }
         }
         if (singleline) {
           if (parserConf.singleLineStringErrors)
             return ERRORCLASS;
           else
             state.tokenize = tokenOuter;
         }
         return OUTCLASS;
       }
       tokenString.isString = true;
       return tokenString;
     }

     function tokenStringFactory(delimiter, tokenOuter) {
       while ("rubf".indexOf(delimiter.charAt(0).toLowerCase()) >= 0)
         delimiter = delimiter.substr(1);

       var singleline = delimiter.length == 1;
       var OUTCLASS = "string";

       function tokenString(stream, state) {
         while (!stream.eol()) {
           stream.eatWhile(/[^'"\\]/);
           if (stream.eat("\\")) {
             stream.next();
             if (singleline && stream.eol())
               return OUTCLASS;
           } else if (stream.match(delimiter)) {
             state.tokenize = tokenOuter;
             return OUTCLASS;
           } else {
             stream.eat(/['"]/);
           }
         }
         if (singleline) {
           if (parserConf.singleLineStringErrors)
             return ERRORCLASS;
           else
             state.tokenize = tokenOuter;
         }
         return OUTCLASS;
       }
       tokenString.isString = true;
       return tokenString;
     }

     function pushPyScope(stream, state) {
       while (top(state).type != "py") state.scopes.pop();
       state.scopes.push({offset: top(state).offset + stream.indentUnit,
                          type: "py",
                          align: null});
     }

     function pushBracketScope(stream, state, type) {
       var align = stream.match(/^[\s\[\{\(]*(?:#|$)/, false) ? null : stream.column() + 1;
       state.scopes.push({offset: state.indent + (hangingIndent || stream.indentUnit),
                          type: type,
                          align: align});
     }

     function dedent(stream, state) {
       var indented = stream.indentation();
       while (state.scopes.length > 1 && top(state).offset > indented) {
         if (top(state).type != "py") return true;
         state.scopes.pop();
       }
       return top(state).offset != indented;
     }

     function tokenLexer(stream, state) {
       if (stream.sol()) {
         state.beginningOfLine = true;
         state.dedent = false;
       }

       var style = state.tokenize(stream, state);
       var current = stream.current();

       // Handle decorators
       if (state.beginningOfLine && current == "@")
         return stream.match(identifiers, false) ? "meta" : py3 ? "operator" : ERRORCLASS;

       if (/\S/.test(current)) state.beginningOfLine = false;

       if ((style == "variable" || style == "builtin")
           && state.lastToken == "meta")
         style = "meta";

       // Handle scope changes.
       if (current == "pass" || current == "return")
         state.dedent = true;

       if (current == "lambda") state.lambda = true;
       if (current == ":" && !state.lambda && top(state).type == "py" && stream.match(/^\s*(?:#|$)/, false))
         pushPyScope(stream, state);

       if (current.length == 1 && !/string|comment/.test(style)) {
         var delimiter_index = "[({".indexOf(current);
         if (delimiter_index != -1)
           pushBracketScope(stream, state, "])}".slice(delimiter_index, delimiter_index+1));

         delimiter_index = "])}".indexOf(current);
         if (delimiter_index != -1) {
           if (top(state).type == current) state.indent = state.scopes.pop().offset - (hangingIndent || stream.indentUnit);
           else return ERRORCLASS;
         }
       }
       if (state.dedent && stream.eol() && top(state).type == "py" && state.scopes.length > 1)
         state.scopes.pop();

       return style;
     }

     return {
       name: "python",

       startState: function() {
         return {
           tokenize: tokenBase,
           scopes: [{offset: 0, type: "py", align: null}],
           indent: 0,
           lastToken: null,
           lambda: false,
           dedent: 0
         };
       },

       token: function(stream, state) {
         var addErr = state.errorToken;
         if (addErr) state.errorToken = false;
         var style = tokenLexer(stream, state);

         if (style && style != "comment")
           state.lastToken = (style == "keyword" || style == "punctuation") ? stream.current() : style;
         if (style == "punctuation") style = null;

         if (stream.eol() && state.lambda)
           state.lambda = false;
         return addErr ? ERRORCLASS : style;
       },

       indent: function(state, textAfter, cx) {
         if (state.tokenize != tokenBase)
           return state.tokenize.isString ? null : 0;

         var scope = top(state);
         var closing = scope.type == textAfter.charAt(0) ||
             scope.type == "py" && !state.dedent && /^(else:|elif |except |finally:)/.test(textAfter);
         if (scope.align != null)
           return scope.align - (closing ? 1 : 0)
         else
           return scope.offset - (closing ? hangingIndent || cx.unit : 0)
       },

       languageData: {
         autocomplete: commonKeywords$4.concat(commonBuiltins$1).concat(["exec", "print"]),
         indentOnInput: /^\s*([\}\]\)]|else:|elif |except |finally:)$/,
         commentTokens: {line: "#"},
         closeBrackets: {brackets: ["(", "[", "{", "'", '"', "'''", '"""']}
       }
     };
   }
   var words$i = function(str) { return str.split(" "); };

   const python = mkPython({});

   const cython = mkPython({
     extra_keywords: words$i("by cdef cimport cpdef ctypedef enum except "+
                           "extern gil include nogil property public "+
                           "readonly struct union DEF IF ELIF ELSE")
   });

   var python$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      cython: cython,
      mkPython: mkPython,
      python: python
   });

   function wordRegExp(words, end) {
     return new RegExp((end ? "" : "^") + "(?:" + words.join("|") + ")" + (end ? "$" : "\\b"));
   }

   function chain$a(tokenize, stream, state) {
     state.tokenize.push(tokenize);
     return tokenize(stream, state);
   }

   var operators$5 = /^(?:[-+/%|&^]|\*\*?|[<>]{2})/;
   var conditionalOperators = /^(?:[=!]~|===|<=>|[<>=!]=?|[|&]{2}|~)/;
   var indexingOperators = /^(?:\[\][?=]?)/;
   var anotherOperators = /^(?:\.(?:\.{2})?|->|[?:])/;
   var idents = /^[a-z_\u009F-\uFFFF][a-zA-Z0-9_\u009F-\uFFFF]*/;
   var types$5 = /^[A-Z_\u009F-\uFFFF][a-zA-Z0-9_\u009F-\uFFFF]*/;
   var keywords$B = wordRegExp([
     "abstract", "alias", "as", "asm", "begin", "break", "case", "class", "def", "do",
     "else", "elsif", "end", "ensure", "enum", "extend", "for", "fun", "if",
     "include", "instance_sizeof", "lib", "macro", "module", "next", "of", "out", "pointerof",
     "private", "protected", "rescue", "return", "require", "select", "sizeof", "struct",
     "super", "then", "type", "typeof", "uninitialized", "union", "unless", "until", "when", "while", "with",
     "yield", "__DIR__", "__END_LINE__", "__FILE__", "__LINE__"
   ]);
   var atomWords = wordRegExp(["true", "false", "nil", "self"]);
   var indentKeywordsArray = [
     "def", "fun", "macro",
     "class", "module", "struct", "lib", "enum", "union",
     "do", "for"
   ];
   var indentKeywords = wordRegExp(indentKeywordsArray);
   var indentExpressionKeywordsArray = ["if", "unless", "case", "while", "until", "begin", "then"];
   var indentExpressionKeywords = wordRegExp(indentExpressionKeywordsArray);
   var dedentKeywordsArray = ["end", "else", "elsif", "rescue", "ensure"];
   var dedentKeywords = wordRegExp(dedentKeywordsArray);
   var dedentPunctualsArray = ["\\)", "\\}", "\\]"];
   var dedentPunctuals = new RegExp("^(?:" + dedentPunctualsArray.join("|") + ")$");
   var nextTokenizer = {
     "def": tokenFollowIdent, "fun": tokenFollowIdent, "macro": tokenMacroDef,
     "class": tokenFollowType, "module": tokenFollowType, "struct": tokenFollowType,
     "lib": tokenFollowType, "enum": tokenFollowType, "union": tokenFollowType
   };
   var matching = {"[": "]", "{": "}", "(": ")", "<": ">"};

   function tokenBase$H(stream, state) {
     if (stream.eatSpace()) {
       return null;
     }

     // Macros
     if (state.lastToken != "\\" && stream.match("{%", false)) {
       return chain$a(tokenMacro("%", "%"), stream, state);
     }

     if (state.lastToken != "\\" && stream.match("{{", false)) {
       return chain$a(tokenMacro("{", "}"), stream, state);
     }

     // Comments
     if (stream.peek() == "#") {
       stream.skipToEnd();
       return "comment";
     }

     // Variables and keywords
     var matched;
     if (stream.match(idents)) {
       stream.eat(/[?!]/);

       matched = stream.current();
       if (stream.eat(":")) {
         return "atom";
       } else if (state.lastToken == ".") {
         return "property";
       } else if (keywords$B.test(matched)) {
         if (indentKeywords.test(matched)) {
           if (!(matched == "fun" && state.blocks.indexOf("lib") >= 0) && !(matched == "def" && state.lastToken == "abstract")) {
             state.blocks.push(matched);
             state.currentIndent += 1;
           }
         } else if ((state.lastStyle == "operator" || !state.lastStyle) && indentExpressionKeywords.test(matched)) {
           state.blocks.push(matched);
           state.currentIndent += 1;
         } else if (matched == "end") {
           state.blocks.pop();
           state.currentIndent -= 1;
         }

         if (nextTokenizer.hasOwnProperty(matched)) {
           state.tokenize.push(nextTokenizer[matched]);
         }

         return "keyword";
       } else if (atomWords.test(matched)) {
         return "atom";
       }

       return "variable";
     }

     // Class variables and instance variables
     // or attributes
     if (stream.eat("@")) {
       if (stream.peek() == "[") {
         return chain$a(tokenNest("[", "]", "meta"), stream, state);
       }

       stream.eat("@");
       stream.match(idents) || stream.match(types$5);
       return "propertyName";
     }

     // Constants and types
     if (stream.match(types$5)) {
       return "tag";
     }

     // Symbols or ':' operator
     if (stream.eat(":")) {
       if (stream.eat("\"")) {
         return chain$a(tokenQuote("\"", "atom", false), stream, state);
       } else if (stream.match(idents) || stream.match(types$5) ||
                  stream.match(operators$5) || stream.match(conditionalOperators) || stream.match(indexingOperators)) {
         return "atom";
       }
       stream.eat(":");
       return "operator";
     }

     // Strings
     if (stream.eat("\"")) {
       return chain$a(tokenQuote("\"", "string", true), stream, state);
     }

     // Strings or regexps or macro variables or '%' operator
     if (stream.peek() == "%") {
       var style = "string";
       var embed = true;
       var delim;

       if (stream.match("%r")) {
         // Regexps
         style = "string.special";
         delim = stream.next();
       } else if (stream.match("%w")) {
         embed = false;
         delim = stream.next();
       } else if (stream.match("%q")) {
         embed = false;
         delim = stream.next();
       } else {
         if(delim = stream.match(/^%([^\w\s=])/)) {
           delim = delim[1];
         } else if (stream.match(/^%[a-zA-Z_\u009F-\uFFFF][\w\u009F-\uFFFF]*/)) {
           // Macro variables
           return "meta";
         } else if (stream.eat('%')) {
           // '%' operator
           return "operator";
         }
       }

       if (matching.hasOwnProperty(delim)) {
         delim = matching[delim];
       }
       return chain$a(tokenQuote(delim, style, embed), stream, state);
     }

     // Here Docs
     if (matched = stream.match(/^<<-('?)([A-Z]\w*)\1/)) {
       return chain$a(tokenHereDoc(matched[2], !matched[1]), stream, state)
     }

     // Characters
     if (stream.eat("'")) {
       stream.match(/^(?:[^']|\\(?:[befnrtv0'"]|[0-7]{3}|u(?:[0-9a-fA-F]{4}|\{[0-9a-fA-F]{1,6}\})))/);
       stream.eat("'");
       return "atom";
     }

     // Numbers
     if (stream.eat("0")) {
       if (stream.eat("x")) {
         stream.match(/^[0-9a-fA-F_]+/);
       } else if (stream.eat("o")) {
         stream.match(/^[0-7_]+/);
       } else if (stream.eat("b")) {
         stream.match(/^[01_]+/);
       }
       return "number";
     }

     if (stream.eat(/^\d/)) {
       stream.match(/^[\d_]*(?:\.[\d_]+)?(?:[eE][+-]?\d+)?/);
       return "number";
     }

     // Operators
     if (stream.match(operators$5)) {
       stream.eat("="); // Operators can follow assign symbol.
       return "operator";
     }

     if (stream.match(conditionalOperators) || stream.match(anotherOperators)) {
       return "operator";
     }

     // Parens and braces
     if (matched = stream.match(/[({[]/, false)) {
       matched = matched[0];
       return chain$a(tokenNest(matched, matching[matched], null), stream, state);
     }

     // Escapes
     if (stream.eat("\\")) {
       stream.next();
       return "meta";
     }

     stream.next();
     return null;
   }

   function tokenNest(begin, end, style, started) {
     return function (stream, state) {
       if (!started && stream.match(begin)) {
         state.tokenize[state.tokenize.length - 1] = tokenNest(begin, end, style, true);
         state.currentIndent += 1;
         return style;
       }

       var nextStyle = tokenBase$H(stream, state);
       if (stream.current() === end) {
         state.tokenize.pop();
         state.currentIndent -= 1;
         nextStyle = style;
       }

       return nextStyle;
     };
   }

   function tokenMacro(begin, end, started) {
     return function (stream, state) {
       if (!started && stream.match("{" + begin)) {
         state.currentIndent += 1;
         state.tokenize[state.tokenize.length - 1] = tokenMacro(begin, end, true);
         return "meta";
       }

       if (stream.match(end + "}")) {
         state.currentIndent -= 1;
         state.tokenize.pop();
         return "meta";
       }

       return tokenBase$H(stream, state);
     };
   }

   function tokenMacroDef(stream, state) {
     if (stream.eatSpace()) {
       return null;
     }

     var matched;
     if (matched = stream.match(idents)) {
       if (matched == "def") {
         return "keyword";
       }
       stream.eat(/[?!]/);
     }

     state.tokenize.pop();
     return "def";
   }

   function tokenFollowIdent(stream, state) {
     if (stream.eatSpace()) {
       return null;
     }

     if (stream.match(idents)) {
       stream.eat(/[!?]/);
     } else {
       stream.match(operators$5) || stream.match(conditionalOperators) || stream.match(indexingOperators);
     }
     state.tokenize.pop();
     return "def";
   }

   function tokenFollowType(stream, state) {
     if (stream.eatSpace()) {
       return null;
     }

     stream.match(types$5);
     state.tokenize.pop();
     return "def";
   }

   function tokenQuote(end, style, embed) {
     return function (stream, state) {
       var escaped = false;

       while (stream.peek()) {
         if (!escaped) {
           if (stream.match("{%", false)) {
             state.tokenize.push(tokenMacro("%", "%"));
             return style;
           }

           if (stream.match("{{", false)) {
             state.tokenize.push(tokenMacro("{", "}"));
             return style;
           }

           if (embed && stream.match("#{", false)) {
             state.tokenize.push(tokenNest("#{", "}", "meta"));
             return style;
           }

           var ch = stream.next();

           if (ch == end) {
             state.tokenize.pop();
             return style;
           }

           escaped = embed && ch == "\\";
         } else {
           stream.next();
           escaped = false;
         }
       }

       return style;
     };
   }

   function tokenHereDoc(phrase, embed) {
     return function (stream, state) {
       if (stream.sol()) {
         stream.eatSpace();
         if (stream.match(phrase)) {
           state.tokenize.pop();
           return "string";
         }
       }

       var escaped = false;
       while (stream.peek()) {
         if (!escaped) {
           if (stream.match("{%", false)) {
             state.tokenize.push(tokenMacro("%", "%"));
             return "string";
           }

           if (stream.match("{{", false)) {
             state.tokenize.push(tokenMacro("{", "}"));
             return "string";
           }

           if (embed && stream.match("#{", false)) {
             state.tokenize.push(tokenNest("#{", "}", "meta"));
             return "string";
           }

           escaped = embed && stream.next() == "\\";
         } else {
           stream.next();
           escaped = false;
         }
       }

       return "string";
     }
   }

   const crystal = {
     name: "crystal",
     startState: function () {
       return {
         tokenize: [tokenBase$H],
         currentIndent: 0,
         lastToken: null,
         lastStyle: null,
         blocks: []
       };
     },

     token: function (stream, state) {
       var style = state.tokenize[state.tokenize.length - 1](stream, state);
       var token = stream.current();

       if (style && style != "comment") {
         state.lastToken = token;
         state.lastStyle = style;
       }

       return style;
     },

     indent: function (state, textAfter, cx) {
       textAfter = textAfter.replace(/^\s*(?:\{%)?\s*|\s*(?:%\})?\s*$/g, "");

       if (dedentKeywords.test(textAfter) || dedentPunctuals.test(textAfter)) {
         return cx.unit * (state.currentIndent - 1);
       }

       return cx.unit * state.currentIndent;
     },

     languageData: {
       indentOnInput: wordRegExp(dedentPunctualsArray.concat(dedentKeywordsArray), true),
       commentTokens: {line: "#"}
     }
   };

   var crystal$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      crystal: crystal
   });

   function words$h(str) {
     var obj = {}, words = str.split(" ");
     for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
     return obj;
   }

   var blockKeywordsStr = "body catch class do else enum for foreach foreach_reverse if in interface mixin " +
       "out scope struct switch try union unittest version while with";

   const parserConfig$2 = {
     keywords: words$h("abstract alias align asm assert auto break case cast cdouble cent cfloat const continue " +
                     "debug default delegate delete deprecated export extern final finally function goto immutable " +
                     "import inout invariant is lazy macro module new nothrow override package pragma private " +
                     "protected public pure ref return shared short static super synchronized template this " +
                     "throw typedef typeid typeof volatile __FILE__ __LINE__ __gshared __traits __vector __parameters " +
                     blockKeywordsStr),
     blockKeywords: words$h(blockKeywordsStr),
     builtin: words$h("bool byte char creal dchar double float idouble ifloat int ireal long real short ubyte " +
                    "ucent uint ulong ushort wchar wstring void size_t sizediff_t"),
     atoms: words$h("exit failure success true false null"),
     hooks: {
       "@": function(stream, _state) {
         stream.eatWhile(/[\w\$_]/);
         return "meta";
       }
     }
   };

   var statementIndentUnit = parserConfig$2.statementIndentUnit,
       keywords$A = parserConfig$2.keywords,
       builtin$3 = parserConfig$2.builtin,
       blockKeywords$4 = parserConfig$2.blockKeywords,
       atoms$c = parserConfig$2.atoms,
       hooks$2 = parserConfig$2.hooks,
       multiLineStrings$3 = parserConfig$2.multiLineStrings;
   var isOperatorChar$e = /[+\-*&%=<>!?|\/]/;

   var curPunc$b;

   function tokenBase$G(stream, state) {
     var ch = stream.next();
     if (hooks$2[ch]) {
       var result = hooks$2[ch](stream, state);
       if (result !== false) return result;
     }
     if (ch == '"' || ch == "'" || ch == "`") {
       state.tokenize = tokenString$q(ch);
       return state.tokenize(stream, state);
     }
     if (/[\[\]{}\(\),;\:\.]/.test(ch)) {
       curPunc$b = ch;
       return null;
     }
     if (/\d/.test(ch)) {
       stream.eatWhile(/[\w\.]/);
       return "number";
     }
     if (ch == "/") {
       if (stream.eat("+")) {
         state.tokenize = tokenNestedComment;
         return tokenNestedComment(stream, state);
       }
       if (stream.eat("*")) {
         state.tokenize = tokenComment$j;
         return tokenComment$j(stream, state);
       }
       if (stream.eat("/")) {
         stream.skipToEnd();
         return "comment";
       }
     }
     if (isOperatorChar$e.test(ch)) {
       stream.eatWhile(isOperatorChar$e);
       return "operator";
     }
     stream.eatWhile(/[\w\$_\xa1-\uffff]/);
     var cur = stream.current();
     if (keywords$A.propertyIsEnumerable(cur)) {
       if (blockKeywords$4.propertyIsEnumerable(cur)) curPunc$b = "newstatement";
       return "keyword";
     }
     if (builtin$3.propertyIsEnumerable(cur)) {
       if (blockKeywords$4.propertyIsEnumerable(cur)) curPunc$b = "newstatement";
       return "builtin";
     }
     if (atoms$c.propertyIsEnumerable(cur)) return "atom";
     return "variable";
   }

   function tokenString$q(quote) {
     return function(stream, state) {
       var escaped = false, next, end = false;
       while ((next = stream.next()) != null) {
         if (next == quote && !escaped) {end = true; break;}
         escaped = !escaped && next == "\\";
       }
       if (end || !(escaped || multiLineStrings$3))
         state.tokenize = null;
       return "string";
     };
   }

   function tokenComment$j(stream, state) {
     var maybeEnd = false, ch;
     while (ch = stream.next()) {
       if (ch == "/" && maybeEnd) {
         state.tokenize = null;
         break;
       }
       maybeEnd = (ch == "*");
     }
     return "comment";
   }

   function tokenNestedComment(stream, state) {
     var maybeEnd = false, ch;
     while (ch = stream.next()) {
       if (ch == "/" && maybeEnd) {
         state.tokenize = null;
         break;
       }
       maybeEnd = (ch == "+");
     }
     return "comment";
   }

   function Context$a(indented, column, type, align, prev) {
     this.indented = indented;
     this.column = column;
     this.type = type;
     this.align = align;
     this.prev = prev;
   }
   function pushContext$d(state, col, type) {
     var indent = state.indented;
     if (state.context && state.context.type == "statement")
       indent = state.context.indented;
     return state.context = new Context$a(indent, col, type, null, state.context);
   }
   function popContext$d(state) {
     var t = state.context.type;
     if (t == ")" || t == "]" || t == "}")
       state.indented = state.context.indented;
     return state.context = state.context.prev;
   }

   // Interface

   const d$1 = {
     name: "d",
     startState: function(indentUnit) {
       return {
         tokenize: null,
         context: new Context$a(-indentUnit, 0, "top", false),
         indented: 0,
         startOfLine: true
       };
     },

     token: function(stream, state) {
       var ctx = state.context;
       if (stream.sol()) {
         if (ctx.align == null) ctx.align = false;
         state.indented = stream.indentation();
         state.startOfLine = true;
       }
       if (stream.eatSpace()) return null;
       curPunc$b = null;
       var style = (state.tokenize || tokenBase$G)(stream, state);
       if (style == "comment" || style == "meta") return style;
       if (ctx.align == null) ctx.align = true;

       if ((curPunc$b == ";" || curPunc$b == ":" || curPunc$b == ",") && ctx.type == "statement") popContext$d(state);
       else if (curPunc$b == "{") pushContext$d(state, stream.column(), "}");
       else if (curPunc$b == "[") pushContext$d(state, stream.column(), "]");
       else if (curPunc$b == "(") pushContext$d(state, stream.column(), ")");
       else if (curPunc$b == "}") {
         while (ctx.type == "statement") ctx = popContext$d(state);
         if (ctx.type == "}") ctx = popContext$d(state);
         while (ctx.type == "statement") ctx = popContext$d(state);
       }
       else if (curPunc$b == ctx.type) popContext$d(state);
       else if (((ctx.type == "}" || ctx.type == "top") && curPunc$b != ';') || (ctx.type == "statement" && curPunc$b == "newstatement"))
         pushContext$d(state, stream.column(), "statement");
       state.startOfLine = false;
       return style;
     },

     indent: function(state, textAfter, cx) {
       if (state.tokenize != tokenBase$G && state.tokenize != null) return null;
       var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);
       if (ctx.type == "statement" && firstChar == "}") ctx = ctx.prev;
       var closing = firstChar == ctx.type;
       if (ctx.type == "statement") return ctx.indented + (firstChar == "{" ? 0 : statementIndentUnit || cx.unit);
       else if (ctx.align) return ctx.column + (closing ? 0 : 1);
       else return ctx.indented + (closing ? 0 : cx.unit);
     },

     languageData: {
       indentOnInput: /^\s*[{}]$/,
       commentTokens: {line: "//", block: {open: "/*", close: "*/"}}
     }
   };

   var d$2 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      d: d$1
   });

   var TOKEN_NAMES = {
     '+': 'inserted',
     '-': 'deleted',
     '@': 'meta'
   };

   const diff = {
     name: "diff",
     token: function(stream) {
       var tw_pos = stream.string.search(/[\t ]+?$/);

       if (!stream.sol() || tw_pos === 0) {
         stream.skipToEnd();
         return ("error " + (
           TOKEN_NAMES[stream.string.charAt(0)] || '')).replace(/ $/, '');
       }

       var token_name = TOKEN_NAMES[stream.peek()] || stream.skipToEnd();

       if (tw_pos === -1) {
         stream.skipToEnd();
       } else {
         stream.pos = tw_pos;
       }

       return token_name;
     }
   };

   var diff$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      diff: diff
   });

   function simpleMode(states) {
     ensureState(states, "start");
     var states_ = {}, meta = states.languageData || {}, hasIndentation = false;
     for (var state in states) if (state != meta && states.hasOwnProperty(state)) {
       var list = states_[state] = [], orig = states[state];
       for (var i = 0; i < orig.length; i++) {
         var data = orig[i];
         list.push(new Rule(data, states));
         if (data.indent || data.dedent) hasIndentation = true;
       }
     }
     return {
       name: meta.name,
       startState: function() {
         return {state: "start", pending: null, indent: hasIndentation ? [] : null};
       },
       copyState: function(state) {
         var s = {state: state.state, pending: state.pending, indent: state.indent && state.indent.slice(0)};
         if (state.stack)
           s.stack = state.stack.slice(0);
         return s;
       },
       token: tokenFunction(states_),
       indent: indentFunction(states_, meta),
       languageData: meta
     }
   }
   function ensureState(states, name) {
     if (!states.hasOwnProperty(name))
       throw new Error("Undefined state " + name + " in simple mode");
   }

   function toRegex(val, caret) {
     if (!val) return /(?:)/;
     var flags = "";
     if (val instanceof RegExp) {
       if (val.ignoreCase) flags = "i";
       val = val.source;
     } else {
       val = String(val);
     }
     return new RegExp((caret === false ? "" : "^") + "(?:" + val + ")", flags);
   }

   function asToken(val) {
     if (!val) return null;
     if (val.apply) return val
     if (typeof val == "string") return val.replace(/\./g, " ");
     var result = [];
     for (var i = 0; i < val.length; i++)
       result.push(val[i] && val[i].replace(/\./g, " "));
     return result;
   }

   function Rule(data, states) {
     if (data.next || data.push) ensureState(states, data.next || data.push);
     this.regex = toRegex(data.regex);
     this.token = asToken(data.token);
     this.data = data;
   }

   function tokenFunction(states) {
     return function(stream, state) {
       if (state.pending) {
         var pend = state.pending.shift();
         if (state.pending.length == 0) state.pending = null;
         stream.pos += pend.text.length;
         return pend.token;
       }

       var curState = states[state.state];
       for (var i = 0; i < curState.length; i++) {
         var rule = curState[i];
         var matches = (!rule.data.sol || stream.sol()) && stream.match(rule.regex);
         if (matches) {
           if (rule.data.next) {
             state.state = rule.data.next;
           } else if (rule.data.push) {
             (state.stack || (state.stack = [])).push(state.state);
             state.state = rule.data.push;
           } else if (rule.data.pop && state.stack && state.stack.length) {
             state.state = state.stack.pop();
           }

           if (rule.data.indent)
             state.indent.push(stream.indentation() + stream.indentUnit);
           if (rule.data.dedent)
             state.indent.pop();
           var token = rule.token;
           if (token && token.apply) token = token(matches);
           if (matches.length > 2 && rule.token && typeof rule.token != "string") {
             state.pending = [];
             for (var j = 2; j < matches.length; j++)
               if (matches[j])
                 state.pending.push({text: matches[j], token: rule.token[j - 1]});
             stream.backUp(matches[0].length - (matches[1] ? matches[1].length : 0));
             return token[0];
           } else if (token && token.join) {
             return token[0];
           } else {
             return token;
           }
         }
       }
       stream.next();
       return null;
     };
   }

   function indentFunction(states, meta) {
     return function(state, textAfter) {
       if (state.indent == null || meta.dontIndentStates && meta.doneIndentState.indexOf(state.state) > -1)
         return null

       var pos = state.indent.length - 1, rules = states[state.state];
       scan: for (;;) {
         for (var i = 0; i < rules.length; i++) {
           var rule = rules[i];
           if (rule.data.dedent && rule.data.dedentIfLineStart !== false) {
             var m = rule.regex.exec(textAfter);
             if (m && m[0]) {
               pos--;
               if (rule.next || rule.push) rules = states[rule.next || rule.push];
               textAfter = textAfter.slice(m[0].length);
               continue scan;
             }
           }
         }
         break;
       }
       return pos < 0 ? 0 : state.indent[pos];
     };
   }

   var from = "from";
   var fromRegex = new RegExp("^(\\s*)\\b(" + from + ")\\b", "i");

   var shells = ["run", "cmd", "entrypoint", "shell"];
   var shellsAsArrayRegex = new RegExp("^(\\s*)(" + shells.join('|') + ")(\\s+\\[)", "i");

   var expose = "expose";
   var exposeRegex = new RegExp("^(\\s*)(" + expose + ")(\\s+)", "i");

   var others = [
     "arg", "from", "maintainer", "label", "env",
     "add", "copy", "volume", "user",
     "workdir", "onbuild", "stopsignal", "healthcheck", "shell"
   ];

   // Collect all Dockerfile directives
   var instructions = [from, expose].concat(shells).concat(others),
       instructionRegex = "(" + instructions.join('|') + ")",
       instructionOnlyLine = new RegExp("^(\\s*)" + instructionRegex + "(\\s*)(#.*)?$", "i"),
       instructionWithArguments = new RegExp("^(\\s*)" + instructionRegex + "(\\s+)", "i");

   const dockerFile = simpleMode({
     start: [
       // Block comment: This is a line starting with a comment
       {
         regex: /^\s*#.*$/,
         sol: true,
         token: "comment"
       },
       {
         regex: fromRegex,
         token: [null, "keyword"],
         sol: true,
         next: "from"
       },
       // Highlight an instruction without any arguments (for convenience)
       {
         regex: instructionOnlyLine,
         token: [null, "keyword", null, "error"],
         sol: true
       },
       {
         regex: shellsAsArrayRegex,
         token: [null, "keyword", null],
         sol: true,
         next: "array"
       },
       {
         regex: exposeRegex,
         token: [null, "keyword", null],
         sol: true,
         next: "expose"
       },
       // Highlight an instruction followed by arguments
       {
         regex: instructionWithArguments,
         token: [null, "keyword", null],
         sol: true,
         next: "arguments"
       },
       {
         regex: /./,
         token: null
       }
     ],
     from: [
       {
         regex: /\s*$/,
         token: null,
         next: "start"
       },
       {
         // Line comment without instruction arguments is an error
         regex: /(\s*)(#.*)$/,
         token: [null, "error"],
         next: "start"
       },
       {
         regex: /(\s*\S+\s+)(as)/i,
         token: [null, "keyword"],
         next: "start"
       },
       // Fail safe return to start
       {
         token: null,
         next: "start"
       }
     ],
     single: [
       {
         regex: /(?:[^\\']|\\.)/,
         token: "string"
       },
       {
         regex: /'/,
         token: "string",
         pop: true
       }
     ],
     double: [
       {
         regex: /(?:[^\\"]|\\.)/,
         token: "string"
       },
       {
         regex: /"/,
         token: "string",
         pop: true
       }
     ],
     array: [
       {
         regex: /\]/,
         token: null,
         next: "start"
       },
       {
         regex: /"(?:[^\\"]|\\.)*"?/,
         token: "string"
       }
     ],
     expose: [
       {
         regex: /\d+$/,
         token: "number",
         next: "start"
       },
       {
         regex: /[^\d]+$/,
         token: null,
         next: "start"
       },
       {
         regex: /\d+/,
         token: "number"
       },
       {
         regex: /[^\d]+/,
         token: null
       },
       // Fail safe return to start
       {
         token: null,
         next: "start"
       }
     ],
     arguments: [
       {
         regex: /^\s*#.*$/,
         sol: true,
         token: "comment"
       },
       {
         regex: /"(?:[^\\"]|\\.)*"?$/,
         token: "string",
         next: "start"
       },
       {
         regex: /"/,
         token: "string",
         push: "double"
       },
       {
         regex: /'(?:[^\\']|\\.)*'?$/,
         token: "string",
         next: "start"
       },
       {
         regex: /'/,
         token: "string",
         push: "single"
       },
       {
         regex: /[^#"']+[\\`]$/,
         token: null
       },
       {
         regex: /[^#"']+$/,
         token: null,
         next: "start"
       },
       {
         regex: /[^#"']+/,
         token: null
       },
       // Fail safe return to start
       {
         token: null,
         next: "start"
       }
     ],
     languageData: {
       commentTokens: {line: "#"}
     }
   });

   var dockerfile = /*#__PURE__*/Object.freeze({
      __proto__: null,
      dockerFile: dockerFile
   });

   var type$4;
   function ret$2(style, tp) {type$4 = tp; return style;}

   function tokenBase$F(stream, state) {
     var ch = stream.next();

     if (ch == "<" && stream.eat("!") ) {
       if (stream.eatWhile(/[\-]/)) {
         state.tokenize = tokenSGMLComment$1;
         return tokenSGMLComment$1(stream, state);
       } else if (stream.eatWhile(/[\w]/)) return ret$2("keyword", "doindent");
     } else if (ch == "<" && stream.eat("?")) { //xml declaration
       state.tokenize = inBlock$1("meta", "?>");
       return ret$2("meta", ch);
     } else if (ch == "#" && stream.eatWhile(/[\w]/)) return ret$2("atom", "tag");
     else if (ch == "|") return ret$2("keyword", "separator");
     else if (ch.match(/[\(\)\[\]\-\.,\+\?>]/)) return ret$2(null, ch);//if(ch === ">") return ret(null, "endtag"); else
     else if (ch.match(/[\[\]]/)) return ret$2("rule", ch);
     else if (ch == "\"" || ch == "'") {
       state.tokenize = tokenString$p(ch);
       return state.tokenize(stream, state);
     } else if (stream.eatWhile(/[a-zA-Z\?\+\d]/)) {
       var sc = stream.current();
       if( sc.substr(sc.length-1,sc.length).match(/\?|\+/) !== null )stream.backUp(1);
       return ret$2("tag", "tag");
     } else if (ch == "%" || ch == "*" ) return ret$2("number", "number");
     else {
       stream.eatWhile(/[\w\\\-_%.{,]/);
       return ret$2(null, null);
     }
   }

   function tokenSGMLComment$1(stream, state) {
     var dashes = 0, ch;
     while ((ch = stream.next()) != null) {
       if (dashes >= 2 && ch == ">") {
         state.tokenize = tokenBase$F;
         break;
       }
       dashes = (ch == "-") ? dashes + 1 : 0;
     }
     return ret$2("comment", "comment");
   }

   function tokenString$p(quote) {
     return function(stream, state) {
       var escaped = false, ch;
       while ((ch = stream.next()) != null) {
         if (ch == quote && !escaped) {
           state.tokenize = tokenBase$F;
           break;
         }
         escaped = !escaped && ch == "\\";
       }
       return ret$2("string", "tag");
     };
   }

   function inBlock$1(style, terminator) {
     return function(stream, state) {
       while (!stream.eol()) {
         if (stream.match(terminator)) {
           state.tokenize = tokenBase$F;
           break;
         }
         stream.next();
       }
       return style;
     };
   }

   const dtd = {
     name: "dtd",
     startState: function() {
       return {tokenize: tokenBase$F,
               baseIndent: 0,
               stack: []};
     },

     token: function(stream, state) {
       if (stream.eatSpace()) return null;
       var style = state.tokenize(stream, state);

       var context = state.stack[state.stack.length-1];
       if (stream.current() == "[" || type$4 === "doindent" || type$4 == "[") state.stack.push("rule");
       else if (type$4 === "endtag") state.stack[state.stack.length-1] = "endtag";
       else if (stream.current() == "]" || type$4 == "]" || (type$4 == ">" && context == "rule")) state.stack.pop();
       else if (type$4 == "[") state.stack.push("[");
       return style;
     },

     indent: function(state, textAfter, cx) {
       var n = state.stack.length;

       if( textAfter.charAt(0) === ']' )n--;
       else if(textAfter.substr(textAfter.length-1, textAfter.length) === ">"){
         if(textAfter.substr(0,1) === "<") ;
         else if( type$4 == "doindent" && textAfter.length > 1 ) ;
         else if( type$4 == "doindent")n--;
         else if( type$4 == ">" && textAfter.length > 1) ;
         else if( type$4 == "tag" && textAfter !== ">") ;
         else if( type$4 == "tag" && state.stack[state.stack.length-1] == "rule")n--;
         else if( type$4 == "tag")n++;
         else if( textAfter === ">" && state.stack[state.stack.length-1] == "rule" && type$4 === ">")n--;
         else if( textAfter === ">" && state.stack[state.stack.length-1] == "rule") ;
         else if( textAfter.substr(0,1) !== "<" && textAfter.substr(0,1) === ">" )n=n-1;
         else if( textAfter === ">") ;
         else n=n-1;
         //over rule them all
         if(type$4 == null || type$4 == "]")n--;
       }

       return state.baseIndent + n * cx.unit;
     },

     languageData: {
       indentOnInput: /^\s*[\]>]$/
     }
   };

   var dtd$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      dtd: dtd
   });

   function forEach(arr, f) {
     for (var i = 0; i < arr.length; i++) f(arr[i], i);
   }
   function some(arr, f) {
     for (var i = 0; i < arr.length; i++) if (f(arr[i], i)) return true
     return false
   }

   // Words
   var words$g = {
     // Words that introduce unnamed definitions like "define interface"
     unnamedDefinition: ["interface"],

     // Words that introduce simple named definitions like "define library"
     namedDefinition: ["module", "library", "macro",
                       "C-struct", "C-union",
                       "C-function", "C-callable-wrapper"
                      ],

     // Words that introduce type definitions like "define class".
     // These are also parameterized like "define method" and are
     // appended to otherParameterizedDefinitionWords
     typeParameterizedDefinition: ["class", "C-subtype", "C-mapped-subtype"],

     // Words that introduce trickier definitions like "define method".
     // These require special definitions to be added to startExpressions
     otherParameterizedDefinition: ["method", "function",
                                    "C-variable", "C-address"
                                   ],

     // Words that introduce module constant definitions.
     // These must also be simple definitions and are
     // appended to otherSimpleDefinitionWords
     constantSimpleDefinition: ["constant"],

     // Words that introduce module variable definitions.
     // These must also be simple definitions and are
     // appended to otherSimpleDefinitionWords
     variableSimpleDefinition: ["variable"],

     // Other words that introduce simple definitions
     // (without implicit bodies).
     otherSimpleDefinition: ["generic", "domain",
                             "C-pointer-type",
                             "table"
                            ],

     // Words that begin statements with implicit bodies.
     statement: ["if", "block", "begin", "method", "case",
                 "for", "select", "when", "unless", "until",
                 "while", "iterate", "profiling", "dynamic-bind"
                ],

     // Patterns that act as separators in compound statements.
     // This may include any general pattern that must be indented
     // specially.
     separator: ["finally", "exception", "cleanup", "else",
                 "elseif", "afterwards"
                ],

     // Keywords that do not require special indentation handling,
     // but which should be highlighted
     other: ["above", "below", "by", "from", "handler", "in",
             "instance", "let", "local", "otherwise", "slot",
             "subclass", "then", "to", "keyed-by", "virtual"
            ],

     // Condition signaling function calls
     signalingCalls: ["signal", "error", "cerror",
                      "break", "check-type", "abort"
                     ]
   };

   words$g["otherDefinition"] =
     words$g["unnamedDefinition"]
     .concat(words$g["namedDefinition"])
     .concat(words$g["otherParameterizedDefinition"]);

   words$g["definition"] =
     words$g["typeParameterizedDefinition"]
     .concat(words$g["otherDefinition"]);

   words$g["parameterizedDefinition"] =
     words$g["typeParameterizedDefinition"]
     .concat(words$g["otherParameterizedDefinition"]);

   words$g["simpleDefinition"] =
     words$g["constantSimpleDefinition"]
     .concat(words$g["variableSimpleDefinition"])
     .concat(words$g["otherSimpleDefinition"]);

   words$g["keyword"] =
     words$g["statement"]
     .concat(words$g["separator"])
     .concat(words$g["other"]);

   // Patterns
   var symbolPattern = "[-_a-zA-Z?!*@<>$%]+";
   var symbol$1 = new RegExp("^" + symbolPattern);
   var patterns = {
     // Symbols with special syntax
     symbolKeyword: symbolPattern + ":",
     symbolClass: "<" + symbolPattern + ">",
     symbolGlobal: "\\*" + symbolPattern + "\\*",
     symbolConstant: "\\$" + symbolPattern
   };
   var patternStyles = {
     symbolKeyword: "atom",
     symbolClass: "tag",
     symbolGlobal: "variableName.standard",
     symbolConstant: "variableName.constant"
   };

   // Compile all patterns to regular expressions
   for (var patternName in patterns)
     if (patterns.hasOwnProperty(patternName))
       patterns[patternName] = new RegExp("^" + patterns[patternName]);

   // Names beginning "with-" and "without-" are commonly
   // used as statement macro
   patterns["keyword"] = [/^with(?:out)?-[-_a-zA-Z?!*@<>$%]+/];

   var styles = {};
   styles["keyword"] = "keyword";
   styles["definition"] = "def";
   styles["simpleDefinition"] = "def";
   styles["signalingCalls"] = "builtin";

   // protected words lookup table
   var wordLookup = {};
   var styleLookup = {};

   forEach([
     "keyword",
     "definition",
     "simpleDefinition",
     "signalingCalls"
   ], function(type) {
     forEach(words$g[type], function(word) {
       wordLookup[word] = type;
       styleLookup[word] = styles[type];
     });
   });


   function chain$9(stream, state, f) {
     state.tokenize = f;
     return f(stream, state);
   }

   function tokenBase$E(stream, state) {
     // String
     var ch = stream.peek();
     if (ch == "'" || ch == '"') {
       stream.next();
       return chain$9(stream, state, tokenString$o(ch, "string"));
     }
     // Comment
     else if (ch == "/") {
       stream.next();
       if (stream.eat("*")) {
         return chain$9(stream, state, tokenComment$i);
       } else if (stream.eat("/")) {
         stream.skipToEnd();
         return "comment";
       }
       stream.backUp(1);
     }
     // Decimal
     else if (/[+\-\d\.]/.test(ch)) {
       if (stream.match(/^[+-]?[0-9]*\.[0-9]*([esdx][+-]?[0-9]+)?/i) ||
           stream.match(/^[+-]?[0-9]+([esdx][+-]?[0-9]+)/i) ||
           stream.match(/^[+-]?\d+/)) {
         return "number";
       }
     }
     // Hash
     else if (ch == "#") {
       stream.next();
       // Symbol with string syntax
       ch = stream.peek();
       if (ch == '"') {
         stream.next();
         return chain$9(stream, state, tokenString$o('"', "string"));
       }
       // Binary number
       else if (ch == "b") {
         stream.next();
         stream.eatWhile(/[01]/);
         return "number";
       }
       // Hex number
       else if (ch == "x") {
         stream.next();
         stream.eatWhile(/[\da-f]/i);
         return "number";
       }
       // Octal number
       else if (ch == "o") {
         stream.next();
         stream.eatWhile(/[0-7]/);
         return "number";
       }
       // Token concatenation in macros
       else if (ch == '#') {
         stream.next();
         return "punctuation";
       }
       // Sequence literals
       else if ((ch == '[') || (ch == '(')) {
         stream.next();
         return "bracket";
         // Hash symbol
       } else if (stream.match(/f|t|all-keys|include|key|next|rest/i)) {
         return "atom";
       } else {
         stream.eatWhile(/[-a-zA-Z]/);
         return "error";
       }
     } else if (ch == "~") {
       stream.next();
       ch = stream.peek();
       if (ch == "=") {
         stream.next();
         ch = stream.peek();
         if (ch == "=") {
           stream.next();
           return "operator";
         }
         return "operator";
       }
       return "operator";
     } else if (ch == ":") {
       stream.next();
       ch = stream.peek();
       if (ch == "=") {
         stream.next();
         return "operator";
       } else if (ch == ":") {
         stream.next();
         return "punctuation";
       }
     } else if ("[](){}".indexOf(ch) != -1) {
       stream.next();
       return "bracket";
     } else if (".,".indexOf(ch) != -1) {
       stream.next();
       return "punctuation";
     } else if (stream.match("end")) {
       return "keyword";
     }
     for (var name in patterns) {
       if (patterns.hasOwnProperty(name)) {
         var pattern = patterns[name];
         if ((pattern instanceof Array && some(pattern, function(p) {
           return stream.match(p);
         })) || stream.match(pattern))
           return patternStyles[name];
       }
     }
     if (/[+\-*\/^=<>&|]/.test(ch)) {
       stream.next();
       return "operator";
     }
     if (stream.match("define")) {
       return "def";
     } else {
       stream.eatWhile(/[\w\-]/);
       // Keyword
       if (wordLookup.hasOwnProperty(stream.current())) {
         return styleLookup[stream.current()];
       } else if (stream.current().match(symbol$1)) {
         return "variable";
       } else {
         stream.next();
         return "variableName.standard";
       }
     }
   }

   function tokenComment$i(stream, state) {
     var maybeEnd = false, maybeNested = false, nestedCount = 0, ch;
     while ((ch = stream.next())) {
       if (ch == "/" && maybeEnd) {
         if (nestedCount > 0) {
           nestedCount--;
         } else {
           state.tokenize = tokenBase$E;
           break;
         }
       } else if (ch == "*" && maybeNested) {
         nestedCount++;
       }
       maybeEnd = (ch == "*");
       maybeNested = (ch == "/");
     }
     return "comment";
   }

   function tokenString$o(quote, style) {
     return function(stream, state) {
       var escaped = false, next, end = false;
       while ((next = stream.next()) != null) {
         if (next == quote && !escaped) {
           end = true;
           break;
         }
         escaped = !escaped && next == "\\";
       }
       if (end || !escaped) {
         state.tokenize = tokenBase$E;
       }
       return style;
     };
   }

   // Interface
   const dylan = {
     name: "dylan",
     startState: function() {
       return {
         tokenize: tokenBase$E,
         currentIndent: 0
       };
     },
     token: function(stream, state) {
       if (stream.eatSpace())
         return null;
       var style = state.tokenize(stream, state);
       return style;
     },
     languageData: {
       commentTokens: {block: {open: "/*", close: "*/"}}
     }
   };

   var dylan$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      dylan: dylan
   });

   var commentType = {slash: 0, parenthesis: 1};
   var stateType = {comment: 0, _string: 1, characterClass: 2};

   const ebnf = {
     name: "ebnf",
     startState: function () {
       return {
         stringType: null,
         commentType: null,
         braced: 0,
         lhs: true,
         localState: null,
         stack: [],
         inDefinition: false
       };
     },
     token: function (stream, state) {
       if (!stream) return;

       //check for state changes
       if (state.stack.length === 0) {
         //strings
         if ((stream.peek() == '"') || (stream.peek() == "'")) {
           state.stringType = stream.peek();
           stream.next(); // Skip quote
           state.stack.unshift(stateType._string);
         } else if (stream.match('/*')) { //comments starting with /*
           state.stack.unshift(stateType.comment);
           state.commentType = commentType.slash;
         } else if (stream.match('(*')) { //comments starting with (*
           state.stack.unshift(stateType.comment);
           state.commentType = commentType.parenthesis;
         }
       }

       //return state
       //stack has
       switch (state.stack[0]) {
       case stateType._string:
         while (state.stack[0] === stateType._string && !stream.eol()) {
           if (stream.peek() === state.stringType) {
             stream.next(); // Skip quote
             state.stack.shift(); // Clear flag
           } else if (stream.peek() === "\\") {
             stream.next();
             stream.next();
           } else {
             stream.match(/^.[^\\\"\']*/);
           }
         }
         return state.lhs ? "property" : "string"; // Token style

       case stateType.comment:
         while (state.stack[0] === stateType.comment && !stream.eol()) {
           if (state.commentType === commentType.slash && stream.match('*/')) {
             state.stack.shift(); // Clear flag
             state.commentType = null;
           } else if (state.commentType === commentType.parenthesis && stream.match('*)')) {
             state.stack.shift(); // Clear flag
             state.commentType = null;
           } else {
             stream.match(/^.[^\*]*/);
           }
         }
         return "comment";

       case stateType.characterClass:
         while (state.stack[0] === stateType.characterClass && !stream.eol()) {
           if (!(stream.match(/^[^\]\\]+/) || stream.match('.'))) {
             state.stack.shift();
           }
         }
         return "operator";
       }

       var peek = stream.peek();

       //no stack
       switch (peek) {
       case "[":
         stream.next();
         state.stack.unshift(stateType.characterClass);
         return "bracket";
       case ":":
       case "|":
       case ";":
         stream.next();
         return "operator";
       case "%":
         if (stream.match("%%")) {
           return "header";
         } else if (stream.match(/[%][A-Za-z]+/)) {
           return "keyword";
         } else if (stream.match(/[%][}]/)) {
           return "bracket";
         }
         break;
       case "/":
         if (stream.match(/[\/][A-Za-z]+/)) {
           return "keyword";
         }
       case "\\":
         if (stream.match(/[\][a-z]+/)) {
           return "string.special";
         }
       case ".":
         if (stream.match(".")) {
           return "atom";
         }
       case "*":
       case "-":
       case "+":
       case "^":
         if (stream.match(peek)) {
           return "atom";
         }
       case "$":
         if (stream.match("$$")) {
           return "builtin";
         } else if (stream.match(/[$][0-9]+/)) {
           return "variableName.special";
         }
       case "<":
         if (stream.match(/<<[a-zA-Z_]+>>/)) {
           return "builtin";
         }
       }

       if (stream.match('//')) {
         stream.skipToEnd();
         return "comment";
       } else if (stream.match('return')) {
         return "operator";
       } else if (stream.match(/^[a-zA-Z_][a-zA-Z0-9_]*/)) {
         if (stream.match(/(?=[\(.])/)) {
           return "variable";
         } else if (stream.match(/(?=[\s\n]*[:=])/)) {
           return "def";
         }
         return "variableName.special";
       } else if (["[", "]", "(", ")"].indexOf(stream.peek()) != -1) {
         stream.next();
         return "bracket";
       } else if (!stream.eatSpace()) {
         stream.next();
       }
       return null;
     }
   };

   var ebnf$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      ebnf: ebnf
   });

   function words$f(str) {
     var obj = {}, words = str.split(" ");
     for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
     return obj;
   }

   function metaHook$1(stream, state) {
     if (!state.startOfLine) return false;
     stream.skipToEnd();
     return "meta";
   }

   var keyword = words$f("abs acos allnodes ascii asin asstring atan atan2 ave case choose choosen choosesets clustersize combine correlation cos cosh count covariance cron dataset dedup define denormalize distribute distributed distribution ebcdic enth error evaluate event eventextra eventname exists exp failcode failmessage fetch fromunicode getisvalid global graph group hash hash32 hash64 hashcrc hashmd5 having if index intformat isvalid iterate join keyunicode length library limit ln local log loop map matched matchlength matchposition matchtext matchunicode max merge mergejoin min nolocal nonempty normalize parse pipe power preload process project pull random range rank ranked realformat recordof regexfind regexreplace regroup rejected rollup round roundup row rowdiff sample set sin sinh sizeof soapcall sort sorted sqrt stepped stored sum table tan tanh thisnode topn tounicode transfer trim truncate typeof ungroup unicodeorder variance which workunit xmldecode xmlencode xmltext xmlunicode");
   var variable = words$f("apply assert build buildindex evaluate fail keydiff keypatch loadxml nothor notify output parallel sequential soapcall wait");
   var variable_2 = words$f("__compressed__ all and any as atmost before beginc++ best between case const counter csv descend encrypt end endc++ endmacro except exclusive expire export extend false few first flat from full function group header heading hole ifblock import in interface joined keep keyed last left limit load local locale lookup macro many maxcount maxlength min skew module named nocase noroot noscan nosort not of only opt or outer overwrite packed partition penalty physicallength pipe quote record relationship repeat return right scan self separator service shared skew skip sql store terminator thor threshold token transform trim true type unicodeorder unsorted validate virtual whole wild within xml xpath");
   var variable_3 = words$f("ascii big_endian boolean data decimal ebcdic integer pattern qstring real record rule set of string token udecimal unicode unsigned varstring varunicode");
   var builtin$2 = words$f("checkpoint deprecated failcode failmessage failure global independent onwarning persist priority recovery stored success wait when");
   var blockKeywords$3 = words$f("catch class do else finally for if switch try while");
   var atoms$b = words$f("true false null");
   var hooks$1 = {"#": metaHook$1};
   var isOperatorChar$d = /[+\-*&%=<>!?|\/]/;

   var curPunc$a;

   function tokenBase$D(stream, state) {
     var ch = stream.next();
     if (hooks$1[ch]) {
       var result = hooks$1[ch](stream, state);
       if (result !== false) return result;
     }
     if (ch == '"' || ch == "'") {
       state.tokenize = tokenString$n(ch);
       return state.tokenize(stream, state);
     }
     if (/[\[\]{}\(\),;\:\.]/.test(ch)) {
       curPunc$a = ch;
       return null;
     }
     if (/\d/.test(ch)) {
       stream.eatWhile(/[\w\.]/);
       return "number";
     }
     if (ch == "/") {
       if (stream.eat("*")) {
         state.tokenize = tokenComment$h;
         return tokenComment$h(stream, state);
       }
       if (stream.eat("/")) {
         stream.skipToEnd();
         return "comment";
       }
     }
     if (isOperatorChar$d.test(ch)) {
       stream.eatWhile(isOperatorChar$d);
       return "operator";
     }
     stream.eatWhile(/[\w\$_]/);
     var cur = stream.current().toLowerCase();
     if (keyword.propertyIsEnumerable(cur)) {
       if (blockKeywords$3.propertyIsEnumerable(cur)) curPunc$a = "newstatement";
       return "keyword";
     } else if (variable.propertyIsEnumerable(cur)) {
       if (blockKeywords$3.propertyIsEnumerable(cur)) curPunc$a = "newstatement";
       return "variable";
     } else if (variable_2.propertyIsEnumerable(cur)) {
       if (blockKeywords$3.propertyIsEnumerable(cur)) curPunc$a = "newstatement";
       return "modifier";
     } else if (variable_3.propertyIsEnumerable(cur)) {
       if (blockKeywords$3.propertyIsEnumerable(cur)) curPunc$a = "newstatement";
       return "type";
     } else if (builtin$2.propertyIsEnumerable(cur)) {
       if (blockKeywords$3.propertyIsEnumerable(cur)) curPunc$a = "newstatement";
       return "builtin";
     } else { //Data types are of from KEYWORD##
       var i = cur.length - 1;
       while(i >= 0 && (!isNaN(cur[i]) || cur[i] == '_'))
         --i;

       if (i > 0) {
         var cur2 = cur.substr(0, i + 1);
         if (variable_3.propertyIsEnumerable(cur2)) {
           if (blockKeywords$3.propertyIsEnumerable(cur2)) curPunc$a = "newstatement";
           return "type";
         }
       }
     }
     if (atoms$b.propertyIsEnumerable(cur)) return "atom";
     return null;
   }

   function tokenString$n(quote) {
     return function(stream, state) {
       var escaped = false, next, end = false;
       while ((next = stream.next()) != null) {
         if (next == quote && !escaped) {end = true; break;}
         escaped = !escaped && next == "\\";
       }
       if (end || !escaped)
         state.tokenize = tokenBase$D;
       return "string";
     };
   }

   function tokenComment$h(stream, state) {
     var maybeEnd = false, ch;
     while (ch = stream.next()) {
       if (ch == "/" && maybeEnd) {
         state.tokenize = tokenBase$D;
         break;
       }
       maybeEnd = (ch == "*");
     }
     return "comment";
   }

   function Context$9(indented, column, type, align, prev) {
     this.indented = indented;
     this.column = column;
     this.type = type;
     this.align = align;
     this.prev = prev;
   }
   function pushContext$c(state, col, type) {
     return state.context = new Context$9(state.indented, col, type, null, state.context);
   }
   function popContext$c(state) {
     var t = state.context.type;
     if (t == ")" || t == "]" || t == "}")
       state.indented = state.context.indented;
     return state.context = state.context.prev;
   }

   // Interface

   const ecl = {
     name: "ecl",
     startState: function(indentUnit) {
       return {
         tokenize: null,
         context: new Context$9(-indentUnit, 0, "top", false),
         indented: 0,
         startOfLine: true
       };
     },

     token: function(stream, state) {
       var ctx = state.context;
       if (stream.sol()) {
         if (ctx.align == null) ctx.align = false;
         state.indented = stream.indentation();
         state.startOfLine = true;
       }
       if (stream.eatSpace()) return null;
       curPunc$a = null;
       var style = (state.tokenize || tokenBase$D)(stream, state);
       if (style == "comment" || style == "meta") return style;
       if (ctx.align == null) ctx.align = true;

       if ((curPunc$a == ";" || curPunc$a == ":") && ctx.type == "statement") popContext$c(state);
       else if (curPunc$a == "{") pushContext$c(state, stream.column(), "}");
       else if (curPunc$a == "[") pushContext$c(state, stream.column(), "]");
       else if (curPunc$a == "(") pushContext$c(state, stream.column(), ")");
       else if (curPunc$a == "}") {
         while (ctx.type == "statement") ctx = popContext$c(state);
         if (ctx.type == "}") ctx = popContext$c(state);
         while (ctx.type == "statement") ctx = popContext$c(state);
       }
       else if (curPunc$a == ctx.type) popContext$c(state);
       else if (ctx.type == "}" || ctx.type == "top" || (ctx.type == "statement" && curPunc$a == "newstatement"))
         pushContext$c(state, stream.column(), "statement");
       state.startOfLine = false;
       return style;
     },

     indent: function(state, textAfter, cx) {
       if (state.tokenize != tokenBase$D && state.tokenize != null) return 0;
       var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);
       if (ctx.type == "statement" && firstChar == "}") ctx = ctx.prev;
       var closing = firstChar == ctx.type;
       if (ctx.type == "statement") return ctx.indented + (firstChar == "{" ? 0 : cx.unit);
       else if (ctx.align) return ctx.column + (closing ? 0 : 1);
       else return ctx.indented + (closing ? 0 : cx.unit);
     },

     languageData: {
       indentOnInput: /^\s*[{}]$/
     }
   };

   var ecl$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      ecl: ecl
   });

   function wordObj$2(words) {
     var o = {};
     for (var i = 0, e = words.length; i < e; ++i) o[words[i]] = true;
     return o;
   }
   var keywords$z = wordObj$2([
     'note',
     'across',
     'when',
     'variant',
     'until',
     'unique',
     'undefine',
     'then',
     'strip',
     'select',
     'retry',
     'rescue',
     'require',
     'rename',
     'reference',
     'redefine',
     'prefix',
     'once',
     'old',
     'obsolete',
     'loop',
     'local',
     'like',
     'is',
     'inspect',
     'infix',
     'include',
     'if',
     'frozen',
     'from',
     'external',
     'export',
     'ensure',
     'end',
     'elseif',
     'else',
     'do',
     'creation',
     'create',
     'check',
     'alias',
     'agent',
     'separate',
     'invariant',
     'inherit',
     'indexing',
     'feature',
     'expanded',
     'deferred',
     'class',
     'Void',
     'True',
     'Result',
     'Precursor',
     'False',
     'Current',
     'create',
     'attached',
     'detachable',
     'as',
     'and',
     'implies',
     'not',
     'or'
   ]);
   var operators$4 = wordObj$2([":=", "and then","and", "or","<<",">>"]);

   function chain$8(newtok, stream, state) {
     state.tokenize.push(newtok);
     return newtok(stream, state);
   }

   function tokenBase$C(stream, state) {
     if (stream.eatSpace()) return null;
     var ch = stream.next();
     if (ch == '"'||ch == "'") {
       return chain$8(readQuoted$1(ch, "string"), stream, state);
     } else if (ch == "-"&&stream.eat("-")) {
       stream.skipToEnd();
       return "comment";
     } else if (ch == ":"&&stream.eat("=")) {
       return "operator";
     } else if (/[0-9]/.test(ch)) {
       stream.eatWhile(/[xXbBCc0-9\.]/);
       stream.eat(/[\?\!]/);
       return "variable";
     } else if (/[a-zA-Z_0-9]/.test(ch)) {
       stream.eatWhile(/[a-zA-Z_0-9]/);
       stream.eat(/[\?\!]/);
       return "variable";
     } else if (/[=+\-\/*^%<>~]/.test(ch)) {
       stream.eatWhile(/[=+\-\/*^%<>~]/);
       return "operator";
     } else {
       return null;
     }
   }

   function readQuoted$1(quote, style,  unescaped) {
     return function(stream, state) {
       var escaped = false, ch;
       while ((ch = stream.next()) != null) {
         if (ch == quote && (unescaped || !escaped)) {
           state.tokenize.pop();
           break;
         }
         escaped = !escaped && ch == "%";
       }
       return style;
     };
   }

   const eiffel = {
     name: "eiffel",
     startState: function() {
       return {tokenize: [tokenBase$C]};
     },

     token: function(stream, state) {
       var style = state.tokenize[state.tokenize.length-1](stream, state);
       if (style == "variable") {
         var word = stream.current();
         style = keywords$z.propertyIsEnumerable(stream.current()) ? "keyword"
           : operators$4.propertyIsEnumerable(stream.current()) ? "operator"
           : /^[A-Z][A-Z_0-9]*$/g.test(word) ? "tag"
           : /^0[bB][0-1]+$/g.test(word) ? "number"
           : /^0[cC][0-7]+$/g.test(word) ? "number"
           : /^0[xX][a-fA-F0-9]+$/g.test(word) ? "number"
           : /^([0-9]+\.[0-9]*)|([0-9]*\.[0-9]+)$/g.test(word) ? "number"
           : /^[0-9]+$/g.test(word) ? "number"
           : "variable";
       }
       return style;
     },
     languageData: {
       commentTokens: {line: "--"}
     }
   };

   var eiffel$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      eiffel: eiffel
   });

   function switchState$1(source, setState, f)
   {
     setState(f);
     return f(source, setState);
   }

   var lowerRE = /[a-z]/;
   var upperRE = /[A-Z]/;
   var innerRE = /[a-zA-Z0-9_]/;

   var digitRE$1 = /[0-9]/;
   var hexRE = /[0-9A-Fa-f]/;
   var symbolRE$1 = /[-&*+.\\/<>=?^|:]/;
   var specialRE$1 = /[(),[\]{}]/;
   var spacesRE = /[ \v\f]/; // newlines are handled in tokenizer

   function normal$2()
   {
     return function(source, setState)
     {
       if (source.eatWhile(spacesRE))
       {
         return null;
       }

       var char = source.next();

       if (specialRE$1.test(char))
       {
         return (char === '{' && source.eat('-'))
           ? switchState$1(source, setState, chompMultiComment(1))
           : (char === '[' && source.match('glsl|'))
           ? switchState$1(source, setState, chompGlsl)
           : 'builtin';
       }

       if (char === '\'')
       {
         return switchState$1(source, setState, chompChar);
       }

       if (char === '"')
       {
         return source.eat('"')
           ? source.eat('"')
           ? switchState$1(source, setState, chompMultiString)
           : 'string'
         : switchState$1(source, setState, chompSingleString);
       }

       if (upperRE.test(char))
       {
         source.eatWhile(innerRE);
         return 'type';
       }

       if (lowerRE.test(char))
       {
         var isDef = source.pos === 1;
         source.eatWhile(innerRE);
         return isDef ? "def" : "variable";
       }

       if (digitRE$1.test(char))
       {
         if (char === '0')
         {
           if (source.eat(/[xX]/))
           {
             source.eatWhile(hexRE); // should require at least 1
             return "number";
           }
         }
         else
         {
           source.eatWhile(digitRE$1);
         }
         if (source.eat('.'))
         {
           source.eatWhile(digitRE$1); // should require at least 1
         }
         if (source.eat(/[eE]/))
         {
           source.eat(/[-+]/);
           source.eatWhile(digitRE$1); // should require at least 1
         }
         return "number";
       }

       if (symbolRE$1.test(char))
       {
         if (char === '-' && source.eat('-'))
         {
           source.skipToEnd();
           return "comment";
         }
         source.eatWhile(symbolRE$1);
         return "keyword";
       }

       if (char === '_')
       {
         return "keyword";
       }

       return "error";
     }
   }

   function chompMultiComment(nest)
   {
     if (nest == 0)
     {
       return normal$2();
     }
     return function(source, setState)
     {
       while (!source.eol())
       {
         var char = source.next();
         if (char == '{' && source.eat('-'))
         {
           ++nest;
         }
         else if (char == '-' && source.eat('}'))
         {
           --nest;
           if (nest === 0)
           {
             setState(normal$2());
             return 'comment';
           }
         }
       }
       setState(chompMultiComment(nest));
       return 'comment';
     }
   }

   function chompMultiString(source, setState)
   {
     while (!source.eol())
     {
       var char = source.next();
       if (char === '"' && source.eat('"') && source.eat('"'))
       {
         setState(normal$2());
         return 'string';
       }
     }
     return 'string';
   }

   function chompSingleString(source, setState)
   {
     while (source.skipTo('\\"')) { source.next(); source.next(); }
     if (source.skipTo('"'))
     {
       source.next();
       setState(normal$2());
       return 'string';
     }
     source.skipToEnd();
     setState(normal$2());
     return 'error';
   }

   function chompChar(source, setState)
   {
     while (source.skipTo("\\'")) { source.next(); source.next(); }
     if (source.skipTo("'"))
     {
       source.next();
       setState(normal$2());
       return 'string';
     }
     source.skipToEnd();
     setState(normal$2());
     return 'error';
   }

   function chompGlsl(source, setState)
   {
     while (!source.eol())
     {
       var char = source.next();
       if (char === '|' && source.eat(']'))
       {
         setState(normal$2());
         return 'string';
       }
     }
     return 'string';
   }

   var wellKnownWords$1 = {
     case: 1,
     of: 1,
     as: 1,
     if: 1,
     then: 1,
     else: 1,
     let: 1,
       in: 1,
     type: 1,
     alias: 1,
     module: 1,
     where: 1,
     import: 1,
     exposing: 1,
     port: 1
   };

   const elm = {
     name: "elm",
     startState: function ()  { return { f: normal$2() }; },
     copyState:  function (s) { return { f: s.f }; },

     token: function(stream, state) {
       var type = state.f(stream, function(s) { state.f = s; });
       var word = stream.current();
       return (wellKnownWords$1.hasOwnProperty(word)) ? 'keyword' : type;
     },

     languageData: {
       commentTokens: {line: "--"}
     }
   };

   var elm$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      elm: elm
   });

   /////////////////////////////////////////////////////////////////////////////
   // constants

   var typeWords = [
     "-type", "-spec", "-export_type", "-opaque"];

   var keywordWords = [
     "after","begin","catch","case","cond","end","fun","if",
     "let","of","query","receive","try","when"];

   var separatorRE    = /[\->,;]/;
   var separatorWords = [
     "->",";",","];

   var operatorAtomWords = [
     "and","andalso","band","bnot","bor","bsl","bsr","bxor",
     "div","not","or","orelse","rem","xor"];

   var operatorSymbolRE    = /[\+\-\*\/<>=\|:!]/;
   var operatorSymbolWords = [
     "=","+","-","*","/",">",">=","<","=<","=:=","==","=/=","/=","||","<-","!"];

   var openParenRE    = /[<\(\[\{]/;
   var openParenWords = [
     "<<","(","[","{"];

   var closeParenRE    = /[>\)\]\}]/;
   var closeParenWords = [
     "}","]",")",">>"];

   var guardWords = [
     "is_atom","is_binary","is_bitstring","is_boolean","is_float",
     "is_function","is_integer","is_list","is_number","is_pid",
     "is_port","is_record","is_reference","is_tuple",
     "atom","binary","bitstring","boolean","function","integer","list",
     "number","pid","port","record","reference","tuple"];

   var bifWords = [
     "abs","adler32","adler32_combine","alive","apply","atom_to_binary",
     "atom_to_list","binary_to_atom","binary_to_existing_atom",
     "binary_to_list","binary_to_term","bit_size","bitstring_to_list",
     "byte_size","check_process_code","contact_binary","crc32",
     "crc32_combine","date","decode_packet","delete_module",
     "disconnect_node","element","erase","exit","float","float_to_list",
     "garbage_collect","get","get_keys","group_leader","halt","hd",
     "integer_to_list","internal_bif","iolist_size","iolist_to_binary",
     "is_alive","is_atom","is_binary","is_bitstring","is_boolean",
     "is_float","is_function","is_integer","is_list","is_number","is_pid",
     "is_port","is_process_alive","is_record","is_reference","is_tuple",
     "length","link","list_to_atom","list_to_binary","list_to_bitstring",
     "list_to_existing_atom","list_to_float","list_to_integer",
     "list_to_pid","list_to_tuple","load_module","make_ref","module_loaded",
     "monitor_node","node","node_link","node_unlink","nodes","notalive",
     "now","open_port","pid_to_list","port_close","port_command",
     "port_connect","port_control","pre_loaded","process_flag",
     "process_info","processes","purge_module","put","register",
     "registered","round","self","setelement","size","spawn","spawn_link",
     "spawn_monitor","spawn_opt","split_binary","statistics",
     "term_to_binary","time","throw","tl","trunc","tuple_size",
     "tuple_to_list","unlink","unregister","whereis"];

   // upper case: [A-Z] [Ø-Þ] [À-Ö]
   // lower case: [a-z] [ß-ö] [ø-ÿ]
   var anumRE       = /[\w@Ø-ÞÀ-Öß-öø-ÿ]/;
   var escapesRE    =
       /[0-7]{1,3}|[bdefnrstv\\"']|\^[a-zA-Z]|x[0-9a-zA-Z]{2}|x{[0-9a-zA-Z]+}/;

   /////////////////////////////////////////////////////////////////////////////
   // tokenizer

   function tokenizer(stream,state) {
     // in multi-line string
     if (state.in_string) {
       state.in_string = (!doubleQuote(stream));
       return rval(state,stream,"string");
     }

     // in multi-line atom
     if (state.in_atom) {
       state.in_atom = (!singleQuote(stream));
       return rval(state,stream,"atom");
     }

     // whitespace
     if (stream.eatSpace()) {
       return rval(state,stream,"whitespace");
     }

     // attributes and type specs
     if (!peekToken(state) &&
         stream.match(/-\s*[a-zß-öø-ÿ][\wØ-ÞÀ-Öß-öø-ÿ]*/)) {
       if (is_member(stream.current(),typeWords)) {
         return rval(state,stream,"type");
       }else {
         return rval(state,stream,"attribute");
       }
     }

     var ch = stream.next();

     // comment
     if (ch == '%') {
       stream.skipToEnd();
       return rval(state,stream,"comment");
     }

     // colon
     if (ch == ":") {
       return rval(state,stream,"colon");
     }

     // macro
     if (ch == '?') {
       stream.eatSpace();
       stream.eatWhile(anumRE);
       return rval(state,stream,"macro");
     }

     // record
     if (ch == "#") {
       stream.eatSpace();
       stream.eatWhile(anumRE);
       return rval(state,stream,"record");
     }

     // dollar escape
     if (ch == "$") {
       if (stream.next() == "\\" && !stream.match(escapesRE)) {
         return rval(state,stream,"error");
       }
       return rval(state,stream,"number");
     }

     // dot
     if (ch == ".") {
       return rval(state,stream,"dot");
     }

     // quoted atom
     if (ch == '\'') {
       if (!(state.in_atom = (!singleQuote(stream)))) {
         if (stream.match(/\s*\/\s*[0-9]/,false)) {
           stream.match(/\s*\/\s*[0-9]/,true);
           return rval(state,stream,"fun");      // 'f'/0 style fun
         }
         if (stream.match(/\s*\(/,false) || stream.match(/\s*:/,false)) {
           return rval(state,stream,"function");
         }
       }
       return rval(state,stream,"atom");
     }

     // string
     if (ch == '"') {
       state.in_string = (!doubleQuote(stream));
       return rval(state,stream,"string");
     }

     // variable
     if (/[A-Z_Ø-ÞÀ-Ö]/.test(ch)) {
       stream.eatWhile(anumRE);
       return rval(state,stream,"variable");
     }

     // atom/keyword/BIF/function
     if (/[a-z_ß-öø-ÿ]/.test(ch)) {
       stream.eatWhile(anumRE);

       if (stream.match(/\s*\/\s*[0-9]/,false)) {
         stream.match(/\s*\/\s*[0-9]/,true);
         return rval(state,stream,"fun");      // f/0 style fun
       }

       var w = stream.current();

       if (is_member(w,keywordWords)) {
         return rval(state,stream,"keyword");
       }else if (is_member(w,operatorAtomWords)) {
         return rval(state,stream,"operator");
       }else if (stream.match(/\s*\(/,false)) {
         // 'put' and 'erlang:put' are bifs, 'foo:put' is not
         if (is_member(w,bifWords) &&
             ((peekToken(state).token != ":") ||
              (peekToken(state,2).token == "erlang"))) {
           return rval(state,stream,"builtin");
         }else if (is_member(w,guardWords)) {
           return rval(state,stream,"guard");
         }else {
           return rval(state,stream,"function");
         }
       }else if (lookahead(stream) == ":") {
         if (w == "erlang") {
           return rval(state,stream,"builtin");
         } else {
           return rval(state,stream,"function");
         }
       }else if (is_member(w,["true","false"])) {
         return rval(state,stream,"boolean");
       }else {
         return rval(state,stream,"atom");
       }
     }

     // number
     var digitRE      = /[0-9]/;
     var radixRE      = /[0-9a-zA-Z]/;         // 36#zZ style int
     if (digitRE.test(ch)) {
       stream.eatWhile(digitRE);
       if (stream.eat('#')) {                // 36#aZ  style integer
         if (!stream.eatWhile(radixRE)) {
           stream.backUp(1);                 //"36#" - syntax error
         }
       } else if (stream.eat('.')) {       // float
         if (!stream.eatWhile(digitRE)) {
           stream.backUp(1);        // "3." - probably end of function
         } else {
           if (stream.eat(/[eE]/)) {        // float with exponent
             if (stream.eat(/[-+]/)) {
               if (!stream.eatWhile(digitRE)) {
                 stream.backUp(2);            // "2e-" - syntax error
               }
             } else {
               if (!stream.eatWhile(digitRE)) {
                 stream.backUp(1);            // "2e" - syntax error
               }
             }
           }
         }
       }
       return rval(state,stream,"number");   // normal integer
     }

     // open parens
     if (nongreedy(stream,openParenRE,openParenWords)) {
       return rval(state,stream,"open_paren");
     }

     // close parens
     if (nongreedy(stream,closeParenRE,closeParenWords)) {
       return rval(state,stream,"close_paren");
     }

     // separators
     if (greedy(stream,separatorRE,separatorWords)) {
       return rval(state,stream,"separator");
     }

     // operators
     if (greedy(stream,operatorSymbolRE,operatorSymbolWords)) {
       return rval(state,stream,"operator");
     }

     return rval(state,stream,null);
   }

   /////////////////////////////////////////////////////////////////////////////
   // utilities
   function nongreedy(stream,re,words) {
     if (stream.current().length == 1 && re.test(stream.current())) {
       stream.backUp(1);
       while (re.test(stream.peek())) {
         stream.next();
         if (is_member(stream.current(),words)) {
           return true;
         }
       }
       stream.backUp(stream.current().length-1);
     }
     return false;
   }

   function greedy(stream,re,words) {
     if (stream.current().length == 1 && re.test(stream.current())) {
       while (re.test(stream.peek())) {
         stream.next();
       }
       while (0 < stream.current().length) {
         if (is_member(stream.current(),words)) {
           return true;
         }else {
           stream.backUp(1);
         }
       }
       stream.next();
     }
     return false;
   }

   function doubleQuote(stream) {
     return quote(stream, '"', '\\');
   }

   function singleQuote(stream) {
     return quote(stream,'\'','\\');
   }

   function quote(stream,quoteChar,escapeChar) {
     while (!stream.eol()) {
       var ch = stream.next();
       if (ch == quoteChar) {
         return true;
       }else if (ch == escapeChar) {
         stream.next();
       }
     }
     return false;
   }

   function lookahead(stream) {
     var m = stream.match(/^\s*([^\s%])/, false);
     return m ? m[1] : "";
   }

   function is_member(element,list) {
     return (-1 < list.indexOf(element));
   }

   function rval(state,stream,type) {

     // parse stack
     pushToken(state,realToken(type,stream));

     // map erlang token type to CodeMirror style class
     //     erlang             -> CodeMirror tag
     switch (type) {
     case "atom":        return "atom";
     case "attribute":   return "attribute";
     case "boolean":     return "atom";
     case "builtin":     return "builtin";
     case "close_paren": return null;
     case "colon":       return null;
     case "comment":     return "comment";
     case "dot":         return null;
     case "error":       return "error";
     case "fun":         return "meta";
     case "function":    return "tag";
     case "guard":       return "property";
     case "keyword":     return "keyword";
     case "macro":       return "macroName";
     case "number":      return "number";
     case "open_paren":  return null;
     case "operator":    return "operator";
     case "record":      return "bracket";
     case "separator":   return null;
     case "string":      return "string";
     case "type":        return "def";
     case "variable":    return "variable";
     default:            return null;
     }
   }

   function aToken(tok,col,ind,typ) {
     return {token:  tok,
             column: col,
             indent: ind,
             type:   typ};
   }

   function realToken(type,stream) {
     return aToken(stream.current(),
                   stream.column(),
                   stream.indentation(),
                   type);
   }

   function fakeToken(type) {
     return aToken(type,0,0,type);
   }

   function peekToken(state,depth) {
     var len = state.tokenStack.length;
     var dep = (depth ? depth : 1);

     if (len < dep) {
       return false;
     }else {
       return state.tokenStack[len-dep];
     }
   }

   function pushToken(state,token) {

     if (!(token.type == "comment" || token.type == "whitespace")) {
       state.tokenStack = maybe_drop_pre(state.tokenStack,token);
       state.tokenStack = maybe_drop_post(state.tokenStack);
     }
   }

   function maybe_drop_pre(s,token) {
     var last = s.length-1;

     if (0 < last && s[last].type === "record" && token.type === "dot") {
       s.pop();
     }else if (0 < last && s[last].type === "group") {
       s.pop();
       s.push(token);
     }else {
       s.push(token);
     }
     return s;
   }

   function maybe_drop_post(s) {
     if (!s.length) return s
     var last = s.length-1;

     if (s[last].type === "dot") {
       return [];
     }
     if (last > 1 && s[last].type === "fun" && s[last-1].token === "fun") {
       return s.slice(0,last-1);
     }
     switch (s[last].token) {
     case "}":    return d(s,{g:["{"]});
     case "]":    return d(s,{i:["["]});
     case ")":    return d(s,{i:["("]});
     case ">>":   return d(s,{i:["<<"]});
     case "end":  return d(s,{i:["begin","case","fun","if","receive","try"]});
     case ",":    return d(s,{e:["begin","try","when","->",
                                 ",","(","[","{","<<"]});
     case "->":   return d(s,{r:["when"],
                              m:["try","if","case","receive"]});
     case ";":    return d(s,{E:["case","fun","if","receive","try","when"]});
     case "catch":return d(s,{e:["try"]});
     case "of":   return d(s,{e:["case"]});
     case "after":return d(s,{e:["receive","try"]});
     default:     return s;
     }
   }

   function d(stack,tt) {
     // stack is a stack of Token objects.
     // tt is an object; {type:tokens}
     // type is a char, tokens is a list of token strings.
     // The function returns (possibly truncated) stack.
     // It will descend the stack, looking for a Token such that Token.token
     //  is a member of tokens. If it does not find that, it will normally (but
     //  see "E" below) return stack. If it does find a match, it will remove
     //  all the Tokens between the top and the matched Token.
     // If type is "m", that is all it does.
     // If type is "i", it will also remove the matched Token and the top Token.
     // If type is "g", like "i", but add a fake "group" token at the top.
     // If type is "r", it will remove the matched Token, but not the top Token.
     // If type is "e", it will keep the matched Token but not the top Token.
     // If type is "E", it behaves as for type "e", except if there is no match,
     //  in which case it will return an empty stack.

     for (var type in tt) {
       var len = stack.length-1;
       var tokens = tt[type];
       for (var i = len-1; -1 < i ; i--) {
         if (is_member(stack[i].token,tokens)) {
           var ss = stack.slice(0,i);
           switch (type) {
           case "m": return ss.concat(stack[i]).concat(stack[len]);
           case "r": return ss.concat(stack[len]);
           case "i": return ss;
           case "g": return ss.concat(fakeToken("group"));
           case "E": return ss.concat(stack[i]);
           case "e": return ss.concat(stack[i]);
           }
         }
       }
     }
     return (type == "E" ? [] : stack);
   }

   /////////////////////////////////////////////////////////////////////////////
   // indenter

   function indenter$1(state, textAfter, cx) {
     var t;
     var wordAfter = wordafter(textAfter);
     var currT = peekToken(state,1);
     var prevT = peekToken(state,2);

     if (state.in_string || state.in_atom) {
       return null;
     }else if (!prevT) {
       return 0;
     }else if (currT.token == "when") {
       return currT.column + cx.unit;
     }else if (wordAfter === "when" && prevT.type === "function") {
       return prevT.indent+cx.unit;
     }else if (wordAfter === "(" && currT.token === "fun") {
       return  currT.column+3;
     }else if (wordAfter === "catch" && (t = getToken(state,["try"]))) {
       return t.column;
     }else if (is_member(wordAfter,["end","after","of"])) {
       t = getToken(state,["begin","case","fun","if","receive","try"]);
       return t ? t.column : null;
     }else if (is_member(wordAfter,closeParenWords)) {
       t = getToken(state,openParenWords);
       return t ? t.column : null;
     }else if (is_member(currT.token,[",","|","||"]) ||
               is_member(wordAfter,[",","|","||"])) {
       t = postcommaToken(state);
       return t ? t.column+t.token.length : cx.unit;
     }else if (currT.token == "->") {
       if (is_member(prevT.token, ["receive","case","if","try"])) {
         return prevT.column+cx.unit+cx.unit;
       }else {
         return prevT.column+cx.unit;
       }
     }else if (is_member(currT.token,openParenWords)) {
       return currT.column+currT.token.length;
     }else {
       t = defaultToken(state);
       return truthy(t) ? t.column+cx.unit : 0;
     }
   }

   function wordafter(str) {
     var m = str.match(/,|[a-z]+|\}|\]|\)|>>|\|+|\(/);

     return truthy(m) && (m.index === 0) ? m[0] : "";
   }

   function postcommaToken(state) {
     var objs = state.tokenStack.slice(0,-1);
     var i = getTokenIndex(objs,"type",["open_paren"]);

     return truthy(objs[i]) ? objs[i] : false;
   }

   function defaultToken(state) {
     var objs = state.tokenStack;
     var stop = getTokenIndex(objs,"type",["open_paren","separator","keyword"]);
     var oper = getTokenIndex(objs,"type",["operator"]);

     if (truthy(stop) && truthy(oper) && stop < oper) {
       return objs[stop+1];
     } else if (truthy(stop)) {
       return objs[stop];
     } else {
       return false;
     }
   }

   function getToken(state,tokens) {
     var objs = state.tokenStack;
     var i = getTokenIndex(objs,"token",tokens);

     return truthy(objs[i]) ? objs[i] : false;
   }

   function getTokenIndex(objs,propname,propvals) {

     for (var i = objs.length-1; -1 < i ; i--) {
       if (is_member(objs[i][propname],propvals)) {
         return i;
       }
     }
     return false;
   }

   function truthy(x) {
     return (x !== false) && (x != null);
   }

   /////////////////////////////////////////////////////////////////////////////
   // this object defines the mode

   const erlang = {
     name: "erlang",
     startState() {
       return {tokenStack: [],
               in_string:  false,
               in_atom:    false};
     },

     token: tokenizer,

     indent: indenter$1,

     languageData: {
       commentTokens: {line: "%"}
     }
   };

   var erlang$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      erlang: erlang
   });

   function sql(parserConfig) {
     var client         = parserConfig.client || {},
         atoms          = parserConfig.atoms || {"false": true, "true": true, "null": true},
         builtin        = parserConfig.builtin || set(defaultBuiltin),
         keywords       = parserConfig.keywords || set(sqlKeywords),
         operatorChars  = parserConfig.operatorChars || /^[*+\-%<>!=&|~^\/]/,
         support        = parserConfig.support || {},
         hooks          = parserConfig.hooks || {},
         dateSQL        = parserConfig.dateSQL || {"date" : true, "time" : true, "timestamp" : true},
         backslashStringEscapes = parserConfig.backslashStringEscapes !== false,
         brackets       = parserConfig.brackets || /^[\{}\(\)\[\]]/,
         punctuation    = parserConfig.punctuation || /^[;.,:]/;

     function tokenBase(stream, state) {
       var ch = stream.next();

       // call hooks from the mime type
       if (hooks[ch]) {
         var result = hooks[ch](stream, state);
         if (result !== false) return result;
       }

       if (support.hexNumber &&
         ((ch == "0" && stream.match(/^[xX][0-9a-fA-F]+/))
         || (ch == "x" || ch == "X") && stream.match(/^'[0-9a-fA-F]*'/))) {
         // hex
         // ref: http://dev.mysql.com/doc/refman/5.5/en/hexadecimal-literals.html
         return "number";
       } else if (support.binaryNumber &&
         (((ch == "b" || ch == "B") && stream.match(/^'[01]+'/))
         || (ch == "0" && stream.match(/^b[01]*/)))) {
         // bitstring
         // ref: http://dev.mysql.com/doc/refman/5.5/en/bit-field-literals.html
         return "number";
       } else if (ch.charCodeAt(0) > 47 && ch.charCodeAt(0) < 58) {
         // numbers
         // ref: http://dev.mysql.com/doc/refman/5.5/en/number-literals.html
         stream.match(/^[0-9]*(\.[0-9]+)?([eE][-+]?[0-9]+)?/);
         support.decimallessFloat && stream.match(/^\.(?!\.)/);
         return "number";
       } else if (ch == "?" && (stream.eatSpace() || stream.eol() || stream.eat(";"))) {
         // placeholders
         return "macroName";
       } else if (ch == "'" || (ch == '"' && support.doubleQuote)) {
         // strings
         // ref: http://dev.mysql.com/doc/refman/5.5/en/string-literals.html
         state.tokenize = tokenLiteral(ch);
         return state.tokenize(stream, state);
       } else if ((((support.nCharCast && (ch == "n" || ch == "N"))
           || (support.charsetCast && ch == "_" && stream.match(/[a-z][a-z0-9]*/i)))
           && (stream.peek() == "'" || stream.peek() == '"'))) {
         // charset casting: _utf8'str', N'str', n'str'
         // ref: http://dev.mysql.com/doc/refman/5.5/en/string-literals.html
         return "keyword";
       } else if (support.escapeConstant && (ch == "e" || ch == "E")
           && (stream.peek() == "'" || (stream.peek() == '"' && support.doubleQuote))) {
         // escape constant: E'str', e'str'
         // ref: https://www.postgresql.org/docs/current/sql-syntax-lexical.html#SQL-SYNTAX-STRINGS-ESCAPE
         state.tokenize = function(stream, state) {
           return (state.tokenize = tokenLiteral(stream.next(), true))(stream, state);
         };
         return "keyword";
       } else if (support.commentSlashSlash && ch == "/" && stream.eat("/")) {
         // 1-line comment
         stream.skipToEnd();
         return "comment";
       } else if ((support.commentHash && ch == "#")
           || (ch == "-" && stream.eat("-") && (!support.commentSpaceRequired || stream.eat(" ")))) {
         // 1-line comments
         // ref: https://kb.askmonty.org/en/comment-syntax/
         stream.skipToEnd();
         return "comment";
       } else if (ch == "/" && stream.eat("*")) {
         // multi-line comments
         // ref: https://kb.askmonty.org/en/comment-syntax/
         state.tokenize = tokenComment(1);
         return state.tokenize(stream, state);
       } else if (ch == ".") {
         // .1 for 0.1
         if (support.zerolessFloat && stream.match(/^(?:\d+(?:e[+-]?\d+)?)/i))
           return "number";
         if (stream.match(/^\.+/))
           return null
         // .table_name (ODBC)
         // // ref: http://dev.mysql.com/doc/refman/5.6/en/identifier-qualifiers.html
         if (support.ODBCdotTable && stream.match(/^[\w\d_$#]+/))
           return "type";
       } else if (operatorChars.test(ch)) {
         // operators
         stream.eatWhile(operatorChars);
         return "operator";
       } else if (brackets.test(ch)) {
         // brackets
         return "bracket";
       } else if (punctuation.test(ch)) {
         // punctuation
         stream.eatWhile(punctuation);
         return "punctuation";
       } else if (ch == '{' &&
           (stream.match(/^( )*(d|D|t|T|ts|TS)( )*'[^']*'( )*}/) || stream.match(/^( )*(d|D|t|T|ts|TS)( )*"[^"]*"( )*}/))) {
         // dates (weird ODBC syntax)
         // ref: http://dev.mysql.com/doc/refman/5.5/en/date-and-time-literals.html
         return "number";
       } else {
         stream.eatWhile(/^[_\w\d]/);
         var word = stream.current().toLowerCase();
         // dates (standard SQL syntax)
         // ref: http://dev.mysql.com/doc/refman/5.5/en/date-and-time-literals.html
         if (dateSQL.hasOwnProperty(word) && (stream.match(/^( )+'[^']*'/) || stream.match(/^( )+"[^"]*"/)))
           return "number";
         if (atoms.hasOwnProperty(word)) return "atom";
         if (builtin.hasOwnProperty(word)) return "type";
         if (keywords.hasOwnProperty(word)) return "keyword";
         if (client.hasOwnProperty(word)) return "builtin";
         return null;
       }
     }

     // 'string', with char specified in quote escaped by '\'
     function tokenLiteral(quote, backslashEscapes) {
       return function(stream, state) {
         var escaped = false, ch;
         while ((ch = stream.next()) != null) {
           if (ch == quote && !escaped) {
             state.tokenize = tokenBase;
             break;
           }
           escaped = (backslashStringEscapes || backslashEscapes) && !escaped && ch == "\\";
         }
         return "string";
       };
     }
     function tokenComment(depth) {
       return function(stream, state) {
         var m = stream.match(/^.*?(\/\*|\*\/)/);
         if (!m) stream.skipToEnd();
         else if (m[1] == "/*") state.tokenize = tokenComment(depth + 1);
         else if (depth > 1) state.tokenize = tokenComment(depth - 1);
         else state.tokenize = tokenBase;
         return "comment"
       }
     }

     function pushContext(stream, state, type) {
       state.context = {
         prev: state.context,
         indent: stream.indentation(),
         col: stream.column(),
         type: type
       };
     }

     function popContext(state) {
       state.indent = state.context.indent;
       state.context = state.context.prev;
     }

     return {
       name: "sql",

       startState: function() {
         return {tokenize: tokenBase, context: null};
       },

       token: function(stream, state) {
         if (stream.sol()) {
           if (state.context && state.context.align == null)
             state.context.align = false;
         }
         if (state.tokenize == tokenBase && stream.eatSpace()) return null;

         var style = state.tokenize(stream, state);
         if (style == "comment") return style;

         if (state.context && state.context.align == null)
           state.context.align = true;

         var tok = stream.current();
         if (tok == "(")
           pushContext(stream, state, ")");
         else if (tok == "[")
           pushContext(stream, state, "]");
         else if (state.context && state.context.type == tok)
           popContext(state);
         return style;
       },

       indent: function(state, textAfter, iCx) {
         var cx = state.context;
         if (!cx) return null;
         var closing = textAfter.charAt(0) == cx.type;
         if (cx.align) return cx.col + (closing ? 0 : 1);
         else return cx.indent + (closing ? 0 : iCx.unit);
       },

       languageData: {
         commentTokens: {
           line: support.commentSlashSlash ? "//" : support.commentHash ? "#" : "--",
           block: {open: "/*", close: "*/"}
         },
         closeBrackets: {brackets: ["(", "[", "{", "'", '"', "`"]}
       }
     };
   }
   // `identifier`
   function hookIdentifier(stream) {
     // MySQL/MariaDB identifiers
     // ref: http://dev.mysql.com/doc/refman/5.6/en/identifier-qualifiers.html
     var ch;
     while ((ch = stream.next()) != null) {
       if (ch == "`" && !stream.eat("`")) return "string.special";
     }
     stream.backUp(stream.current().length - 1);
     return stream.eatWhile(/\w/) ? "string.special" : null;
   }

   // "identifier"
   function hookIdentifierDoublequote(stream) {
     // Standard SQL /SQLite identifiers
     // ref: http://web.archive.org/web/20160813185132/http://savage.net.au/SQL/sql-99.bnf.html#delimited%20identifier
     // ref: http://sqlite.org/lang_keywords.html
     var ch;
     while ((ch = stream.next()) != null) {
       if (ch == "\"" && !stream.eat("\"")) return "string.special";
     }
     stream.backUp(stream.current().length - 1);
     return stream.eatWhile(/\w/) ? "string.special" : null;
   }

   // variable token
   function hookVar(stream) {
     // variables
     // @@prefix.varName @varName
     // varName can be quoted with ` or ' or "
     // ref: http://dev.mysql.com/doc/refman/5.5/en/user-variables.html
     if (stream.eat("@")) {
       stream.match('session.');
       stream.match('local.');
       stream.match('global.');
     }

     if (stream.eat("'")) {
       stream.match(/^.*'/);
       return "string.special";
     } else if (stream.eat('"')) {
       stream.match(/^.*"/);
       return "string.special";
     } else if (stream.eat("`")) {
       stream.match(/^.*`/);
       return "string.special";
     } else if (stream.match(/^[0-9a-zA-Z$\.\_]+/)) {
       return "string.special";
     }
     return null;
   }
   // short client keyword token
   function hookClient(stream) {
     // \N means NULL
     // ref: http://dev.mysql.com/doc/refman/5.5/en/null-values.html
     if (stream.eat("N")) {
       return "atom";
     }
     // \g, etc
     // ref: http://dev.mysql.com/doc/refman/5.5/en/mysql-commands.html
     return stream.match(/^[a-zA-Z.#!?]/) ? "string.special" : null;
   }

   // these keywords are used by all SQL dialects (however, a mode can still overwrite it)
   var sqlKeywords = "alter and as asc between by count create delete desc distinct drop from group having in insert into is join like not on or order select set table union update values where limit ";

   // turn a space-separated list into an array
   function set(str) {
     var obj = {}, words = str.split(" ");
     for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
     return obj;
   }

   var defaultBuiltin = "bool boolean bit blob enum long longblob longtext medium mediumblob mediumint mediumtext time timestamp tinyblob tinyint tinytext text bigint int int1 int2 int3 int4 int8 integer float float4 float8 double char varbinary varchar varcharacter precision real date datetime year unsigned signed decimal numeric";

   // A generic SQL Mode. It's not a standard, it just try to support what is generally supported
   const standardSQL = sql({
     keywords: set(sqlKeywords + "begin"),
     builtin: set(defaultBuiltin),
     atoms: set("false true null unknown"),
     dateSQL: set("date time timestamp"),
     support: set("ODBCdotTable doubleQuote binaryNumber hexNumber")
   });

   const msSQL = sql({
     client: set("$partition binary_checksum checksum connectionproperty context_info current_request_id error_line error_message error_number error_procedure error_severity error_state formatmessage get_filestream_transaction_context getansinull host_id host_name isnull isnumeric min_active_rowversion newid newsequentialid rowcount_big xact_state object_id"),
     keywords: set(sqlKeywords + "begin trigger proc view index for add constraint key primary foreign collate clustered nonclustered declare exec go if use index holdlock nolock nowait paglock readcommitted readcommittedlock readpast readuncommitted repeatableread rowlock serializable snapshot tablock tablockx updlock with"),
     builtin: set("bigint numeric bit smallint decimal smallmoney int tinyint money float real char varchar text nchar nvarchar ntext binary varbinary image cursor timestamp hierarchyid uniqueidentifier sql_variant xml table "),
     atoms: set("is not null like and or in left right between inner outer join all any some cross unpivot pivot exists"),
     operatorChars: /^[*+\-%<>!=^\&|\/]/,
     brackets: /^[\{}\(\)]/,
     punctuation: /^[;.,:/]/,
     backslashStringEscapes: false,
     dateSQL: set("date datetimeoffset datetime2 smalldatetime datetime time"),
     hooks: {
       "@":   hookVar
     }
   });

   const mySQL = sql({
     client: set("charset clear connect edit ego exit go help nopager notee nowarning pager print prompt quit rehash source status system tee"),
     keywords: set(sqlKeywords + "accessible action add after algorithm all analyze asensitive at authors auto_increment autocommit avg avg_row_length before binary binlog both btree cache call cascade cascaded case catalog_name chain change changed character check checkpoint checksum class_origin client_statistics close coalesce code collate collation collations column columns comment commit committed completion concurrent condition connection consistent constraint contains continue contributors convert cross current current_date current_time current_timestamp current_user cursor data database databases day_hour day_microsecond day_minute day_second deallocate dec declare default delay_key_write delayed delimiter des_key_file describe deterministic dev_pop dev_samp deviance diagnostics directory disable discard distinctrow div dual dumpfile each elseif enable enclosed end ends engine engines enum errors escape escaped even event events every execute exists exit explain extended fast fetch field fields first flush for force foreign found_rows full fulltext function general get global grant grants group group_concat handler hash help high_priority hosts hour_microsecond hour_minute hour_second if ignore ignore_server_ids import index index_statistics infile inner innodb inout insensitive insert_method install interval invoker isolation iterate key keys kill language last leading leave left level limit linear lines list load local localtime localtimestamp lock logs low_priority master master_heartbeat_period master_ssl_verify_server_cert masters match max max_rows maxvalue message_text middleint migrate min min_rows minute_microsecond minute_second mod mode modifies modify mutex mysql_errno natural next no no_write_to_binlog offline offset one online open optimize option optionally out outer outfile pack_keys parser partition partitions password phase plugin plugins prepare preserve prev primary privileges procedure processlist profile profiles purge query quick range read read_write reads real rebuild recover references regexp relaylog release remove rename reorganize repair repeatable replace require resignal restrict resume return returns revoke right rlike rollback rollup row row_format rtree savepoint schedule schema schema_name schemas second_microsecond security sensitive separator serializable server session share show signal slave slow smallint snapshot soname spatial specific sql sql_big_result sql_buffer_result sql_cache sql_calc_found_rows sql_no_cache sql_small_result sqlexception sqlstate sqlwarning ssl start starting starts status std stddev stddev_pop stddev_samp storage straight_join subclass_origin sum suspend table_name table_statistics tables tablespace temporary terminated to trailing transaction trigger triggers truncate uncommitted undo uninstall unique unlock upgrade usage use use_frm user user_resources user_statistics using utc_date utc_time utc_timestamp value variables varying view views warnings when while with work write xa xor year_month zerofill begin do then else loop repeat"),
     builtin: set("bool boolean bit blob decimal double float long longblob longtext medium mediumblob mediumint mediumtext time timestamp tinyblob tinyint tinytext text bigint int int1 int2 int3 int4 int8 integer float float4 float8 double char varbinary varchar varcharacter precision date datetime year unsigned signed numeric"),
     atoms: set("false true null unknown"),
     operatorChars: /^[*+\-%<>!=&|^]/,
     dateSQL: set("date time timestamp"),
     support: set("ODBCdotTable decimallessFloat zerolessFloat binaryNumber hexNumber doubleQuote nCharCast charsetCast commentHash commentSpaceRequired"),
     hooks: {
       "@":   hookVar,
       "`":   hookIdentifier,
       "\\":  hookClient
     }
   });

   const mariaDB = sql({
     client: set("charset clear connect edit ego exit go help nopager notee nowarning pager print prompt quit rehash source status system tee"),
     keywords: set(sqlKeywords + "accessible action add after algorithm all always analyze asensitive at authors auto_increment autocommit avg avg_row_length before binary binlog both btree cache call cascade cascaded case catalog_name chain change changed character check checkpoint checksum class_origin client_statistics close coalesce code collate collation collations column columns comment commit committed completion concurrent condition connection consistent constraint contains continue contributors convert cross current current_date current_time current_timestamp current_user cursor data database databases day_hour day_microsecond day_minute day_second deallocate dec declare default delay_key_write delayed delimiter des_key_file describe deterministic dev_pop dev_samp deviance diagnostics directory disable discard distinctrow div dual dumpfile each elseif enable enclosed end ends engine engines enum errors escape escaped even event events every execute exists exit explain extended fast fetch field fields first flush for force foreign found_rows full fulltext function general generated get global grant grants group group_concat handler hard hash help high_priority hosts hour_microsecond hour_minute hour_second if ignore ignore_server_ids import index index_statistics infile inner innodb inout insensitive insert_method install interval invoker isolation iterate key keys kill language last leading leave left level limit linear lines list load local localtime localtimestamp lock logs low_priority master master_heartbeat_period master_ssl_verify_server_cert masters match max max_rows maxvalue message_text middleint migrate min min_rows minute_microsecond minute_second mod mode modifies modify mutex mysql_errno natural next no no_write_to_binlog offline offset one online open optimize option optionally out outer outfile pack_keys parser partition partitions password persistent phase plugin plugins prepare preserve prev primary privileges procedure processlist profile profiles purge query quick range read read_write reads real rebuild recover references regexp relaylog release remove rename reorganize repair repeatable replace require resignal restrict resume return returns revoke right rlike rollback rollup row row_format rtree savepoint schedule schema schema_name schemas second_microsecond security sensitive separator serializable server session share show shutdown signal slave slow smallint snapshot soft soname spatial specific sql sql_big_result sql_buffer_result sql_cache sql_calc_found_rows sql_no_cache sql_small_result sqlexception sqlstate sqlwarning ssl start starting starts status std stddev stddev_pop stddev_samp storage straight_join subclass_origin sum suspend table_name table_statistics tables tablespace temporary terminated to trailing transaction trigger triggers truncate uncommitted undo uninstall unique unlock upgrade usage use use_frm user user_resources user_statistics using utc_date utc_time utc_timestamp value variables varying view views virtual warnings when while with work write xa xor year_month zerofill begin do then else loop repeat"),
     builtin: set("bool boolean bit blob decimal double float long longblob longtext medium mediumblob mediumint mediumtext time timestamp tinyblob tinyint tinytext text bigint int int1 int2 int3 int4 int8 integer float float4 float8 double char varbinary varchar varcharacter precision date datetime year unsigned signed numeric"),
     atoms: set("false true null unknown"),
     operatorChars: /^[*+\-%<>!=&|^]/,
     dateSQL: set("date time timestamp"),
     support: set("ODBCdotTable decimallessFloat zerolessFloat binaryNumber hexNumber doubleQuote nCharCast charsetCast commentHash commentSpaceRequired"),
     hooks: {
       "@":   hookVar,
       "`":   hookIdentifier,
       "\\":  hookClient
     }
   });

   // provided by the phpLiteAdmin project - phpliteadmin.org
   const sqlite = sql({
     // commands of the official SQLite client, ref: https://www.sqlite.org/cli.html#dotcmd
     client: set("auth backup bail binary changes check clone databases dbinfo dump echo eqp exit explain fullschema headers help import imposter indexes iotrace limit lint load log mode nullvalue once open output print prompt quit read restore save scanstats schema separator session shell show stats system tables testcase timeout timer trace vfsinfo vfslist vfsname width"),
     // ref: http://sqlite.org/lang_keywords.html
     keywords: set(sqlKeywords + "abort action add after all analyze attach autoincrement before begin cascade case cast check collate column commit conflict constraint cross current_date current_time current_timestamp database default deferrable deferred detach each else end escape except exclusive exists explain fail for foreign full glob if ignore immediate index indexed initially inner instead intersect isnull key left limit match natural no notnull null of offset outer plan pragma primary query raise recursive references regexp reindex release rename replace restrict right rollback row savepoint temp temporary then to transaction trigger unique using vacuum view virtual when with without"),
     // SQLite is weakly typed, ref: http://sqlite.org/datatype3.html. This is just a list of some common types.
     builtin: set("bool boolean bit blob decimal double float long longblob longtext medium mediumblob mediumint mediumtext time timestamp tinyblob tinyint tinytext text clob bigint int int2 int8 integer float double char varchar date datetime year unsigned signed numeric real"),
     // ref: http://sqlite.org/syntax/literal-value.html
     atoms: set("null current_date current_time current_timestamp"),
     // ref: http://sqlite.org/lang_expr.html#binaryops
     operatorChars: /^[*+\-%<>!=&|/~]/,
     // SQLite is weakly typed, ref: http://sqlite.org/datatype3.html. This is just a list of some common types.
     dateSQL: set("date time timestamp datetime"),
     support: set("decimallessFloat zerolessFloat"),
     identifierQuote: "\"",  //ref: http://sqlite.org/lang_keywords.html
     hooks: {
       // bind-parameters ref:http://sqlite.org/lang_expr.html#varparam
       "@":   hookVar,
       ":":   hookVar,
       "?":   hookVar,
       "$":   hookVar,
       // The preferred way to escape Identifiers is using double quotes, ref: http://sqlite.org/lang_keywords.html
       "\"":   hookIdentifierDoublequote,
       // there is also support for backticks, ref: http://sqlite.org/lang_keywords.html
       "`":   hookIdentifier
     }
   });

   // the query language used by Apache Cassandra is called CQL, but this mime type
   // is called Cassandra to avoid confusion with Contextual Query Language
   const cassandra = sql({
     client: { },
     keywords: set("add all allow alter and any apply as asc authorize batch begin by clustering columnfamily compact consistency count create custom delete desc distinct drop each_quorum exists filtering from grant if in index insert into key keyspace keyspaces level limit local_one local_quorum modify nan norecursive nosuperuser not of on one order password permission permissions primary quorum rename revoke schema select set storage superuser table three to token truncate ttl two type unlogged update use user users using values where with writetime"),
     builtin: set("ascii bigint blob boolean counter decimal double float frozen inet int list map static text timestamp timeuuid tuple uuid varchar varint"),
     atoms: set("false true infinity NaN"),
     operatorChars: /^[<>=]/,
     dateSQL: { },
     support: set("commentSlashSlash decimallessFloat"),
     hooks: { }
   });

   // this is based on Peter Raganitsch's 'plsql' mode
   const plSQL = sql({
     client:     set("appinfo arraysize autocommit autoprint autorecovery autotrace blockterminator break btitle cmdsep colsep compatibility compute concat copycommit copytypecheck define describe echo editfile embedded escape exec execute feedback flagger flush heading headsep instance linesize lno loboffset logsource long longchunksize markup native newpage numformat numwidth pagesize pause pno recsep recsepchar release repfooter repheader serveroutput shiftinout show showmode size spool sqlblanklines sqlcase sqlcode sqlcontinue sqlnumber sqlpluscompatibility sqlprefix sqlprompt sqlterminator suffix tab term termout time timing trimout trimspool ttitle underline verify version wrap"),
     keywords:   set("abort accept access add all alter and any array arraylen as asc assert assign at attributes audit authorization avg base_table begin between binary_integer body boolean by case cast char char_base check close cluster clusters colauth column comment commit compress connect connected constant constraint crash create current currval cursor data_base database date dba deallocate debugoff debugon decimal declare default definition delay delete desc digits dispose distinct do drop else elseif elsif enable end entry escape exception exception_init exchange exclusive exists exit external fast fetch file for force form from function generic goto grant group having identified if immediate in increment index indexes indicator initial initrans insert interface intersect into is key level library like limited local lock log logging long loop master maxextents maxtrans member minextents minus mislabel mode modify multiset new next no noaudit nocompress nologging noparallel not nowait number_base object of off offline on online only open option or order out package parallel partition pctfree pctincrease pctused pls_integer positive positiven pragma primary prior private privileges procedure public raise range raw read rebuild record ref references refresh release rename replace resource restrict return returning returns reverse revoke rollback row rowid rowlabel rownum rows run savepoint schema segment select separate session set share snapshot some space split sql start statement storage subtype successful synonym tabauth table tables tablespace task terminate then to trigger truncate type union unique unlimited unrecoverable unusable update use using validate value values variable view views when whenever where while with work"),
     builtin:    set("abs acos add_months ascii asin atan atan2 average bfile bfilename bigserial bit blob ceil character chartorowid chr clob concat convert cos cosh count dec decode deref dual dump dup_val_on_index empty error exp false float floor found glb greatest hextoraw initcap instr instrb int integer isopen last_day least length lengthb ln lower lpad ltrim lub make_ref max min mlslabel mod months_between natural naturaln nchar nclob new_time next_day nextval nls_charset_decl_len nls_charset_id nls_charset_name nls_initcap nls_lower nls_sort nls_upper nlssort no_data_found notfound null number numeric nvarchar2 nvl others power rawtohex real reftohex round rowcount rowidtochar rowtype rpad rtrim serial sign signtype sin sinh smallint soundex sqlcode sqlerrm sqrt stddev string substr substrb sum sysdate tan tanh to_char text to_date to_label to_multi_byte to_number to_single_byte translate true trunc uid unlogged upper user userenv varchar varchar2 variance varying vsize xml"),
     operatorChars: /^[*\/+\-%<>!=~]/,
     dateSQL:    set("date time timestamp"),
     support:    set("doubleQuote nCharCast zerolessFloat binaryNumber hexNumber")
   });

   // Created to support specific hive keywords
   const hive = sql({
     keywords: set("select alter $elem$ $key$ $value$ add after all analyze and archive as asc before between binary both bucket buckets by cascade case cast change cluster clustered clusterstatus collection column columns comment compute concatenate continue create cross cursor data database databases dbproperties deferred delete delimited desc describe directory disable distinct distribute drop else enable end escaped exclusive exists explain export extended external fetch fields fileformat first format formatted from full function functions grant group having hold_ddltime idxproperties if import in index indexes inpath inputdriver inputformat insert intersect into is items join keys lateral left like limit lines load local location lock locks mapjoin materialized minus msck no_drop nocompress not of offline on option or order out outer outputdriver outputformat overwrite partition partitioned partitions percent plus preserve procedure purge range rcfile read readonly reads rebuild recordreader recordwriter recover reduce regexp rename repair replace restrict revoke right rlike row schema schemas semi sequencefile serde serdeproperties set shared show show_database sort sorted ssl statistics stored streamtable table tables tablesample tblproperties temporary terminated textfile then tmp to touch transform trigger unarchive undo union uniquejoin unlock update use using utc utc_tmestamp view when where while with admin authorization char compact compactions conf cube current current_date current_timestamp day decimal defined dependency directories elem_type exchange file following for grouping hour ignore inner interval jar less logical macro minute month more none noscan over owner partialscan preceding pretty principals protection reload rewrite role roles rollup rows second server sets skewed transactions truncate unbounded unset uri user values window year"),
     builtin: set("bool boolean long timestamp tinyint smallint bigint int float double date datetime unsigned string array struct map uniontype key_type utctimestamp value_type varchar"),
     atoms: set("false true null unknown"),
     operatorChars: /^[*+\-%<>!=]/,
     dateSQL: set("date timestamp"),
     support: set("ODBCdotTable doubleQuote binaryNumber hexNumber")
   });

   const pgSQL = sql({
     client: set("source"),
     // For PostgreSQL - https://www.postgresql.org/docs/11/sql-keywords-appendix.html
     // For pl/pgsql lang - https://github.com/postgres/postgres/blob/REL_11_2/src/pl/plpgsql/src/pl_scanner.c
     keywords: set(sqlKeywords + "a abort abs absent absolute access according action ada add admin after aggregate alias all allocate also alter always analyse analyze and any are array array_agg array_max_cardinality as asc asensitive assert assertion assignment asymmetric at atomic attach attribute attributes authorization avg backward base64 before begin begin_frame begin_partition bernoulli between bigint binary bit bit_length blob blocked bom boolean both breadth by c cache call called cardinality cascade cascaded case cast catalog catalog_name ceil ceiling chain char char_length character character_length character_set_catalog character_set_name character_set_schema characteristics characters check checkpoint class class_origin clob close cluster coalesce cobol collate collation collation_catalog collation_name collation_schema collect column column_name columns command_function command_function_code comment comments commit committed concurrently condition condition_number configuration conflict connect connection connection_name constant constraint constraint_catalog constraint_name constraint_schema constraints constructor contains content continue control conversion convert copy corr corresponding cost count covar_pop covar_samp create cross csv cube cume_dist current current_catalog current_date current_default_transform_group current_path current_role current_row current_schema current_time current_timestamp current_transform_group_for_type current_user cursor cursor_name cycle data database datalink datatype date datetime_interval_code datetime_interval_precision day db deallocate debug dec decimal declare default defaults deferrable deferred defined definer degree delete delimiter delimiters dense_rank depends depth deref derived desc describe descriptor detach detail deterministic diagnostics dictionary disable discard disconnect dispatch distinct dlnewcopy dlpreviouscopy dlurlcomplete dlurlcompleteonly dlurlcompletewrite dlurlpath dlurlpathonly dlurlpathwrite dlurlscheme dlurlserver dlvalue do document domain double drop dump dynamic dynamic_function dynamic_function_code each element else elseif elsif empty enable encoding encrypted end end_frame end_partition endexec enforced enum equals errcode error escape event every except exception exclude excluding exclusive exec execute exists exit exp explain expression extension external extract false family fetch file filter final first first_value flag float floor following for force foreach foreign fortran forward found frame_row free freeze from fs full function functions fusion g general generated get global go goto grant granted greatest group grouping groups handler having header hex hierarchy hint hold hour id identity if ignore ilike immediate immediately immutable implementation implicit import in include including increment indent index indexes indicator info inherit inherits initially inline inner inout input insensitive insert instance instantiable instead int integer integrity intersect intersection interval into invoker is isnull isolation join k key key_member key_type label lag language large last last_value lateral lead leading leakproof least left length level library like like_regex limit link listen ln load local localtime localtimestamp location locator lock locked log logged loop lower m map mapping match matched materialized max max_cardinality maxvalue member merge message message_length message_octet_length message_text method min minute minvalue mod mode modifies module month more move multiset mumps name names namespace national natural nchar nclob nesting new next nfc nfd nfkc nfkd nil no none normalize normalized not nothing notice notify notnull nowait nth_value ntile null nullable nullif nulls number numeric object occurrences_regex octet_length octets of off offset oids old on only open operator option options or order ordering ordinality others out outer output over overlaps overlay overriding owned owner p pad parallel parameter parameter_mode parameter_name parameter_ordinal_position parameter_specific_catalog parameter_specific_name parameter_specific_schema parser partial partition pascal passing passthrough password path percent percent_rank percentile_cont percentile_disc perform period permission pg_context pg_datatype_name pg_exception_context pg_exception_detail pg_exception_hint placing plans pli policy portion position position_regex power precedes preceding precision prepare prepared preserve primary print_strict_params prior privileges procedural procedure procedures program public publication query quote raise range rank read reads real reassign recheck recovery recursive ref references referencing refresh regr_avgx regr_avgy regr_count regr_intercept regr_r2 regr_slope regr_sxx regr_sxy regr_syy reindex relative release rename repeatable replace replica requiring reset respect restart restore restrict result result_oid return returned_cardinality returned_length returned_octet_length returned_sqlstate returning returns reverse revoke right role rollback rollup routine routine_catalog routine_name routine_schema routines row row_count row_number rows rowtype rule savepoint scale schema schema_name schemas scope scope_catalog scope_name scope_schema scroll search second section security select selective self sensitive sequence sequences serializable server server_name session session_user set setof sets share show similar simple size skip slice smallint snapshot some source space specific specific_name specifictype sql sqlcode sqlerror sqlexception sqlstate sqlwarning sqrt stable stacked standalone start state statement static statistics stddev_pop stddev_samp stdin stdout storage strict strip structure style subclass_origin submultiset subscription substring substring_regex succeeds sum symmetric sysid system system_time system_user t table table_name tables tablesample tablespace temp template temporary text then ties time timestamp timezone_hour timezone_minute to token top_level_count trailing transaction transaction_active transactions_committed transactions_rolled_back transform transforms translate translate_regex translation treat trigger trigger_catalog trigger_name trigger_schema trim trim_array true truncate trusted type types uescape unbounded uncommitted under unencrypted union unique unknown unlink unlisten unlogged unnamed unnest until untyped update upper uri usage use_column use_variable user user_defined_type_catalog user_defined_type_code user_defined_type_name user_defined_type_schema using vacuum valid validate validator value value_of values var_pop var_samp varbinary varchar variable_conflict variadic varying verbose version versioning view views volatile warning when whenever where while whitespace width_bucket window with within without work wrapper write xml xmlagg xmlattributes xmlbinary xmlcast xmlcomment xmlconcat xmldeclaration xmldocument xmlelement xmlexists xmlforest xmliterate xmlnamespaces xmlparse xmlpi xmlquery xmlroot xmlschema xmlserialize xmltable xmltext xmlvalidate year yes zone"),
     // https://www.postgresql.org/docs/11/datatype.html
     builtin: set("bigint int8 bigserial serial8 bit varying varbit boolean bool box bytea character char varchar cidr circle date double precision float8 inet integer int int4 interval json jsonb line lseg macaddr macaddr8 money numeric decimal path pg_lsn point polygon real float4 smallint int2 smallserial serial2 serial serial4 text time without zone with timetz timestamp timestamptz tsquery tsvector txid_snapshot uuid xml"),
     atoms: set("false true null unknown"),
     operatorChars: /^[*\/+\-%<>!=&|^\/#@?~]/,
     backslashStringEscapes: false,
     dateSQL: set("date time timestamp"),
     support: set("ODBCdotTable decimallessFloat zerolessFloat binaryNumber hexNumber nCharCast charsetCast escapeConstant")
   });

   // Google's SQL-like query language, GQL
   const gql = sql({
     keywords: set("ancestor and asc by contains desc descendant distinct from group has in is limit offset on order select superset where"),
     atoms: set("false true"),
     builtin: set("blob datetime first key __key__ string integer double boolean null"),
     operatorChars: /^[*+\-%<>!=]/
   });

   // Greenplum
   const gpSQL = sql({
     client: set("source"),
     //https://github.com/greenplum-db/gpdb/blob/master/src/include/parser/kwlist.h
     keywords: set("abort absolute access action active add admin after aggregate all also alter always analyse analyze and any array as asc assertion assignment asymmetric at authorization backward before begin between bigint binary bit boolean both by cache called cascade cascaded case cast chain char character characteristics check checkpoint class close cluster coalesce codegen collate column comment commit committed concurrency concurrently configuration connection constraint constraints contains content continue conversion copy cost cpu_rate_limit create createdb createexttable createrole createuser cross csv cube current current_catalog current_date current_role current_schema current_time current_timestamp current_user cursor cycle data database day deallocate dec decimal declare decode default defaults deferrable deferred definer delete delimiter delimiters deny desc dictionary disable discard distinct distributed do document domain double drop dxl each else enable encoding encrypted end enum errors escape every except exchange exclude excluding exclusive execute exists explain extension external extract false family fetch fields filespace fill filter first float following for force foreign format forward freeze from full function global grant granted greatest group group_id grouping handler hash having header hold host hour identity if ignore ilike immediate immutable implicit in including inclusive increment index indexes inherit inherits initially inline inner inout input insensitive insert instead int integer intersect interval into invoker is isnull isolation join key language large last leading least left level like limit list listen load local localtime localtimestamp location lock log login mapping master match maxvalue median merge minute minvalue missing mode modifies modify month move name names national natural nchar new newline next no nocreatedb nocreateexttable nocreaterole nocreateuser noinherit nologin none noovercommit nosuperuser not nothing notify notnull nowait null nullif nulls numeric object of off offset oids old on only operator option options or order ordered others out outer over overcommit overlaps overlay owned owner parser partial partition partitions passing password percent percentile_cont percentile_disc placing plans position preceding precision prepare prepared preserve primary prior privileges procedural procedure protocol queue quote randomly range read readable reads real reassign recheck recursive ref references reindex reject relative release rename repeatable replace replica reset resource restart restrict returning returns revoke right role rollback rollup rootpartition row rows rule savepoint scatter schema scroll search second security segment select sequence serializable session session_user set setof sets share show similar simple smallint some split sql stable standalone start statement statistics stdin stdout storage strict strip subpartition subpartitions substring superuser symmetric sysid system table tablespace temp template temporary text then threshold ties time timestamp to trailing transaction treat trigger trim true truncate trusted type unbounded uncommitted unencrypted union unique unknown unlisten until update user using vacuum valid validation validator value values varchar variadic varying verbose version view volatile web when where whitespace window with within without work writable write xml xmlattributes xmlconcat xmlelement xmlexists xmlforest xmlparse xmlpi xmlroot xmlserialize year yes zone"),
     builtin: set("bigint int8 bigserial serial8 bit varying varbit boolean bool box bytea character char varchar cidr circle date double precision float float8 inet integer int int4 interval json jsonb line lseg macaddr macaddr8 money numeric decimal path pg_lsn point polygon real float4 smallint int2 smallserial serial2 serial serial4 text time without zone with timetz timestamp timestamptz tsquery tsvector txid_snapshot uuid xml"),
     atoms: set("false true null unknown"),
     operatorChars: /^[*+\-%<>!=&|^\/#@?~]/,
     dateSQL: set("date time timestamp"),
     support: set("ODBCdotTable decimallessFloat zerolessFloat binaryNumber hexNumber nCharCast charsetCast")
   });

   // Spark SQL
   const sparkSQL = sql({
     keywords: set("add after all alter analyze and anti archive array as asc at between bucket buckets by cache cascade case cast change clear cluster clustered codegen collection column columns comment commit compact compactions compute concatenate cost create cross cube current current_date current_timestamp database databases data dbproperties defined delete delimited deny desc describe dfs directories distinct distribute drop else end escaped except exchange exists explain export extended external false fields fileformat first following for format formatted from full function functions global grant group grouping having if ignore import in index indexes inner inpath inputformat insert intersect interval into is items join keys last lateral lazy left like limit lines list load local location lock locks logical macro map minus msck natural no not null nulls of on optimize option options or order out outer outputformat over overwrite partition partitioned partitions percent preceding principals purge range recordreader recordwriter recover reduce refresh regexp rename repair replace reset restrict revoke right rlike role roles rollback rollup row rows schema schemas select semi separated serde serdeproperties set sets show skewed sort sorted start statistics stored stratify struct table tables tablesample tblproperties temp temporary terminated then to touch transaction transactions transform true truncate unarchive unbounded uncache union unlock unset use using values view when where window with"),
     builtin: set("tinyint smallint int bigint boolean float double string binary timestamp decimal array map struct uniontype delimited serde sequencefile textfile rcfile inputformat outputformat"),
     atoms: set("false true null"),
     operatorChars: /^[*\/+\-%<>!=~&|^]/,
     dateSQL: set("date time timestamp"),
     support: set("ODBCdotTable doubleQuote zerolessFloat")
   });

   // Esper
   const esper = sql({
     client: set("source"),
     // http://www.espertech.com/esper/release-5.5.0/esper-reference/html/appendix_keywords.html
     keywords: set("alter and as asc between by count create delete desc distinct drop from group having in insert into is join like not on or order select set table union update values where limit after all and as at asc avedev avg between by case cast coalesce count create current_timestamp day days delete define desc distinct else end escape events every exists false first from full group having hour hours in inner insert instanceof into irstream is istream join last lastweekday left limit like max match_recognize matches median measures metadatasql min minute minutes msec millisecond milliseconds not null offset on or order outer output partition pattern prev prior regexp retain-union retain-intersection right rstream sec second seconds select set some snapshot sql stddev sum then true unidirectional until update variable weekday when where window"),
     builtin: {},
     atoms: set("false true null"),
     operatorChars: /^[*+\-%<>!=&|^\/#@?~]/,
     dateSQL: set("time"),
     support: set("decimallessFloat zerolessFloat binaryNumber hexNumber")
   });

   /*
     How options are used by SQL Mode
     =================================================

     keywords:
       A list of keywords you want to be highlighted.
     builtin:
       A list of builtin types you want to be highlighted (if you want types to be of class "builtin" instead of "keyword").
     operatorChars:
       All characters that must be handled as operators.
     client:
       Commands parsed and executed by the client (not the server).
     support:
       A list of supported syntaxes which are not common, but are supported by more than 1 DBMS.
       * ODBCdotTable: .tableName
       * zerolessFloat: .1
       * doubleQuote
       * nCharCast: N'string'
       * charsetCast: _utf8'string'
       * commentHash: use # char for comments
       * commentSlashSlash: use // for comments
       * commentSpaceRequired: require a space after -- for comments
     atoms:
       Keywords that must be highlighted as atoms,. Some DBMS's support more atoms than others:
       UNKNOWN, INFINITY, UNDERFLOW, NaN...
     dateSQL:
       Used for date/time SQL standard syntax, because not all DBMS's support same temporal types.
   */

   var sql$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      cassandra: cassandra,
      esper: esper,
      gpSQL: gpSQL,
      gql: gql,
      hive: hive,
      mariaDB: mariaDB,
      msSQL: msSQL,
      mySQL: mySQL,
      pgSQL: pgSQL,
      plSQL: plSQL,
      sparkSQL: sparkSQL,
      sql: sql,
      sqlite: sqlite,
      standardSQL: standardSQL
   });

   const factor = simpleMode({
       start: [
         // comments
         {regex: /#?!.*/, token: "comment"},
         // strings """, multiline --> state
         {regex: /"""/, token: "string", next: "string3"},
         {regex: /(STRING:)(\s)/, token: ["keyword", null], next: "string2"},
         {regex: /\S*?"/, token: "string", next: "string"},
         // numbers: dec, hex, unicode, bin, fractional, complex
         {regex: /(?:0x[\d,a-f]+)|(?:0o[0-7]+)|(?:0b[0,1]+)|(?:\-?\d+.?\d*)(?=\s)/, token: "number"},
         //{regex: /[+-]?/} //fractional
         // definition: defining word, defined word, etc
         {regex: /((?:GENERIC)|\:?\:)(\s+)(\S+)(\s+)(\()/, token: ["keyword", null, "def", null, "bracket"], next: "stack"},
         // method definition: defining word, type, defined word, etc
         {regex: /(M\:)(\s+)(\S+)(\s+)(\S+)/, token: ["keyword", null, "def", null, "tag"]},
         // vocabulary using --> state
         {regex: /USING\:/, token: "keyword", next: "vocabulary"},
         // vocabulary definition/use
         {regex: /(USE\:|IN\:)(\s+)(\S+)(?=\s|$)/, token: ["keyword", null, "tag"]},
         // definition: a defining word, defined word
         {regex: /(\S+\:)(\s+)(\S+)(?=\s|$)/, token: ["keyword", null, "def"]},
         // "keywords", incl. ; t f . [ ] { } defining words
         {regex: /(?:;|\\|t|f|if|loop|while|until|do|PRIVATE>|<PRIVATE|\.|\S*\[|\]|\S*\{|\})(?=\s|$)/, token: "keyword"},
         // <constructors> and the like
         {regex: /\S+[\)>\.\*\?]+(?=\s|$)/, token: "builtin"},
         {regex: /[\)><]+\S+(?=\s|$)/, token: "builtin"},
         // operators
         {regex: /(?:[\+\-\=\/\*<>])(?=\s|$)/, token: "keyword"},
         // any id (?)
         {regex: /\S+/, token: "variable"},
         {regex: /\s+|./, token: null}
       ],
       vocabulary: [
         {regex: /;/, token: "keyword", next: "start"},
         {regex: /\S+/, token: "tag"},
         {regex: /\s+|./, token: null}
       ],
       string: [
         {regex: /(?:[^\\]|\\.)*?"/, token: "string", next: "start"},
         {regex: /.*/, token: "string"}
       ],
       string2: [
         {regex: /^;/, token: "keyword", next: "start"},
         {regex: /.*/, token: "string"}
       ],
       string3: [
         {regex: /(?:[^\\]|\\.)*?"""/, token: "string", next: "start"},
         {regex: /.*/, token: "string"}
       ],
       stack: [
         {regex: /\)/, token: "bracket", next: "start"},
         {regex: /--/, token: "bracket"},
         {regex: /\S+/, token: "meta"},
         {regex: /\s+|./, token: null}
       ],
       languageData: {
         name: "factor",
         dontIndentStates: ["start", "vocabulary", "string", "string3", "stack"],
         commentTokens: {line: "!"}
       }
     });

   var factor$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      factor: factor
   });

   var keywords$y = {
     "term": true,
     "method": true, "accu": true,
     "rule": true, "then": true, "is": true, "and": true, "or": true,
     "if": true, "default": true
   };

   var start_blocks = {
     "var_input": true,
     "var_output": true,
     "fuzzify": true,
     "defuzzify": true,
     "function_block": true,
     "ruleblock": true
   };

   var end_blocks = {
     "end_ruleblock": true,
     "end_defuzzify": true,
     "end_function_block": true,
     "end_fuzzify": true,
     "end_var": true
   };

   var atoms$a = {
     "true": true, "false": true, "nan": true,
     "real": true, "min": true, "max": true, "cog": true, "cogs": true
   };

   var isOperatorChar$c = /[+\-*&^%:=<>!|\/]/;

   function tokenBase$B(stream, state) {
     var ch = stream.next();

     if (/[\d\.]/.test(ch)) {
       if (ch == ".") {
         stream.match(/^[0-9]+([eE][\-+]?[0-9]+)?/);
       } else if (ch == "0") {
         stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^0[0-7]+/);
       } else {
         stream.match(/^[0-9]*\.?[0-9]*([eE][\-+]?[0-9]+)?/);
       }
       return "number";
     }

     if (ch == "/" || ch == "(") {
       if (stream.eat("*")) {
         state.tokenize = tokenComment$g;
         return tokenComment$g(stream, state);
       }
       if (stream.eat("/")) {
         stream.skipToEnd();
         return "comment";
       }
     }
     if (isOperatorChar$c.test(ch)) {
       stream.eatWhile(isOperatorChar$c);
       return "operator";
     }
     stream.eatWhile(/[\w\$_\xa1-\uffff]/);

     var cur = stream.current().toLowerCase();
     if (keywords$y.propertyIsEnumerable(cur) ||
         start_blocks.propertyIsEnumerable(cur) ||
         end_blocks.propertyIsEnumerable(cur)) {
       return "keyword";
     }
     if (atoms$a.propertyIsEnumerable(cur)) return "atom";
     return "variable";
   }


   function tokenComment$g(stream, state) {
     var maybeEnd = false, ch;
     while (ch = stream.next()) {
       if ((ch == "/" || ch == ")") && maybeEnd) {
         state.tokenize = tokenBase$B;
         break;
       }
       maybeEnd = (ch == "*");
     }
     return "comment";
   }

   function Context$8(indented, column, type, align, prev) {
     this.indented = indented;
     this.column = column;
     this.type = type;
     this.align = align;
     this.prev = prev;
   }

   function pushContext$b(state, col, type) {
     return state.context = new Context$8(state.indented, col, type, null, state.context);
   }

   function popContext$b(state) {
     if (!state.context.prev) return;
     var t = state.context.type;
     if (t == "end_block")
       state.indented = state.context.indented;
     return state.context = state.context.prev;
   }

   // Interface

   const fcl = {
     name: "fcl",
     startState: function(indentUnit) {
       return {
         tokenize: null,
         context: new Context$8(-indentUnit, 0, "top", false),
         indented: 0,
         startOfLine: true
       };
     },

     token: function(stream, state) {
       var ctx = state.context;
       if (stream.sol()) {
         if (ctx.align == null) ctx.align = false;
         state.indented = stream.indentation();
         state.startOfLine = true;
       }
       if (stream.eatSpace()) return null;

       var style = (state.tokenize || tokenBase$B)(stream, state);
       if (style == "comment") return style;
       if (ctx.align == null) ctx.align = true;

       var cur = stream.current().toLowerCase();

       if (start_blocks.propertyIsEnumerable(cur)) pushContext$b(state, stream.column(), "end_block");
       else if (end_blocks.propertyIsEnumerable(cur))  popContext$b(state);

       state.startOfLine = false;
       return style;
     },

     indent: function(state, textAfter, cx) {
       if (state.tokenize != tokenBase$B && state.tokenize != null) return 0;
       var ctx = state.context;

       var closing = end_blocks.propertyIsEnumerable(textAfter);
       if (ctx.align) return ctx.column + (closing ? 0 : 1);
       else return ctx.indented + (closing ? 0 : cx.unit);
     },

     languageData: {
       commentTokens: {line: "//", block: {open: "(*", close: "*)"}}
     }
   };

   var fcl$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      fcl: fcl
   });

   function toWordList(words) {
     var ret = [];
     words.split(' ').forEach(function(e){
       ret.push({name: e});
     });
     return ret;
   }

   var coreWordList = toWordList(
     'INVERT AND OR XOR\
 2* 2/ LSHIFT RSHIFT\
 0= = 0< < > U< MIN MAX\
 2DROP 2DUP 2OVER 2SWAP ?DUP DEPTH DROP DUP OVER ROT SWAP\
 >R R> R@\
 + - 1+ 1- ABS NEGATE\
 S>D * M* UM*\
 FM/MOD SM/REM UM/MOD */ */MOD / /MOD MOD\
 HERE , @ ! CELL+ CELLS C, C@ C! CHARS 2@ 2!\
 ALIGN ALIGNED +! ALLOT\
 CHAR [CHAR] [ ] BL\
 FIND EXECUTE IMMEDIATE COUNT LITERAL STATE\
 ; DOES> >BODY\
 EVALUATE\
 SOURCE >IN\
 <# # #S #> HOLD SIGN BASE >NUMBER HEX DECIMAL\
 FILL MOVE\
 . CR EMIT SPACE SPACES TYPE U. .R U.R\
 ACCEPT\
 TRUE FALSE\
 <> U> 0<> 0>\
 NIP TUCK ROLL PICK\
 2>R 2R@ 2R>\
 WITHIN UNUSED MARKER\
 I J\
 TO\
 COMPILE, [COMPILE]\
 SAVE-INPUT RESTORE-INPUT\
 PAD ERASE\
 2LITERAL DNEGATE\
 D- D+ D0< D0= D2* D2/ D< D= DMAX DMIN D>S DABS\
 M+ M*/ D. D.R 2ROT DU<\
 CATCH THROW\
 FREE RESIZE ALLOCATE\
 CS-PICK CS-ROLL\
 GET-CURRENT SET-CURRENT FORTH-WORDLIST GET-ORDER SET-ORDER\
 PREVIOUS SEARCH-WORDLIST WORDLIST FIND ALSO ONLY FORTH DEFINITIONS ORDER\
 -TRAILING /STRING SEARCH COMPARE CMOVE CMOVE> BLANK SLITERAL');

   var immediateWordList = toWordList('IF ELSE THEN BEGIN WHILE REPEAT UNTIL RECURSE [IF] [ELSE] [THEN] ?DO DO LOOP +LOOP UNLOOP LEAVE EXIT AGAIN CASE OF ENDOF ENDCASE');

   function searchWordList (wordList, word) {
     var i;
     for (i = wordList.length - 1; i >= 0; i--) {
       if (wordList[i].name === word.toUpperCase()) {
         return wordList[i];
       }
     }
     return undefined;
   }
   const forth = {
     name: "forth",
     startState: function() {
       return {
         state: '',
         base: 10,
         coreWordList: coreWordList,
         immediateWordList: immediateWordList,
         wordList: []
       };
     },
     token: function (stream, stt) {
       var mat;
       if (stream.eatSpace()) {
         return null;
       }
       if (stt.state === '') { // interpretation
         if (stream.match(/^(\]|:NONAME)(\s|$)/i)) {
           stt.state = ' compilation';
           return 'builtin';
         }
         mat = stream.match(/^(\:)\s+(\S+)(\s|$)+/);
         if (mat) {
           stt.wordList.push({name: mat[2].toUpperCase()});
           stt.state = ' compilation';
           return 'def';
         }
         mat = stream.match(/^(VARIABLE|2VARIABLE|CONSTANT|2CONSTANT|CREATE|POSTPONE|VALUE|WORD)\s+(\S+)(\s|$)+/i);
         if (mat) {
           stt.wordList.push({name: mat[2].toUpperCase()});
           return 'def';
         }
         mat = stream.match(/^(\'|\[\'\])\s+(\S+)(\s|$)+/);
         if (mat) {
           return 'builtin'
         }
       } else { // compilation
         // ; [
         if (stream.match(/^(\;|\[)(\s)/)) {
           stt.state = '';
           stream.backUp(1);
           return 'builtin';
         }
         if (stream.match(/^(\;|\[)($)/)) {
           stt.state = '';
           return 'builtin';
         }
         if (stream.match(/^(POSTPONE)\s+\S+(\s|$)+/)) {
           return 'builtin';
         }
       }

       // dynamic wordlist
       mat = stream.match(/^(\S+)(\s+|$)/);
       if (mat) {
         if (searchWordList(stt.wordList, mat[1]) !== undefined) {
           return 'variable';
         }

         // comments
         if (mat[1] === '\\') {
           stream.skipToEnd();
           return 'comment';
         }

         // core words
         if (searchWordList(stt.coreWordList, mat[1]) !== undefined) {
           return 'builtin';
         }
         if (searchWordList(stt.immediateWordList, mat[1]) !== undefined) {
           return 'keyword';
         }

         if (mat[1] === '(') {
           stream.eatWhile(function (s) { return s !== ')'; });
           stream.eat(')');
           return 'comment';
         }

         // // strings
         if (mat[1] === '.(') {
           stream.eatWhile(function (s) { return s !== ')'; });
           stream.eat(')');
           return 'string';
         }
         if (mat[1] === 'S"' || mat[1] === '."' || mat[1] === 'C"') {
           stream.eatWhile(function (s) { return s !== '"'; });
           stream.eat('"');
           return 'string';
         }

         // numbers
         if (mat[1] - 0xfffffffff) {
           return 'number';
         }
         // if (mat[1].match(/^[-+]?[0-9]+\.[0-9]*/)) {
         //     return 'number';
         // }

         return 'atom';
       }
     }
   };

   var forth$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      forth: forth
   });

   function words$e(array) {
     var keys = {};
     for (var i = 0; i < array.length; ++i) {
       keys[array[i]] = true;
     }
     return keys;
   }

   var keywords$x = words$e([
     "abstract", "accept", "allocatable", "allocate",
     "array", "assign", "asynchronous", "backspace",
     "bind", "block", "byte", "call", "case",
     "class", "close", "common", "contains",
     "continue", "cycle", "data", "deallocate",
     "decode", "deferred", "dimension", "do",
     "elemental", "else", "encode", "end",
     "endif", "entry", "enumerator", "equivalence",
     "exit", "external", "extrinsic", "final",
     "forall", "format", "function", "generic",
     "go", "goto", "if", "implicit", "import", "include",
     "inquire", "intent", "interface", "intrinsic",
     "module", "namelist", "non_intrinsic",
     "non_overridable", "none", "nopass",
     "nullify", "open", "optional", "options",
     "parameter", "pass", "pause", "pointer",
     "print", "private", "program", "protected",
     "public", "pure", "read", "recursive", "result",
     "return", "rewind", "save", "select", "sequence",
     "stop", "subroutine", "target", "then", "to", "type",
     "use", "value", "volatile", "where", "while",
     "write"]);
   var builtins$8 = words$e(["abort", "abs", "access", "achar", "acos",
                         "adjustl", "adjustr", "aimag", "aint", "alarm",
                         "all", "allocated", "alog", "amax", "amin",
                         "amod", "and", "anint", "any", "asin",
                         "associated", "atan", "besj", "besjn", "besy",
                         "besyn", "bit_size", "btest", "cabs", "ccos",
                         "ceiling", "cexp", "char", "chdir", "chmod",
                         "clog", "cmplx", "command_argument_count",
                         "complex", "conjg", "cos", "cosh", "count",
                         "cpu_time", "cshift", "csin", "csqrt", "ctime",
                         "c_funloc", "c_loc", "c_associated", "c_null_ptr",
                         "c_null_funptr", "c_f_pointer", "c_null_char",
                         "c_alert", "c_backspace", "c_form_feed",
                         "c_new_line", "c_carriage_return",
                         "c_horizontal_tab", "c_vertical_tab", "dabs",
                         "dacos", "dasin", "datan", "date_and_time",
                         "dbesj", "dbesj", "dbesjn", "dbesy", "dbesy",
                         "dbesyn", "dble", "dcos", "dcosh", "ddim", "derf",
                         "derfc", "dexp", "digits", "dim", "dint", "dlog",
                         "dlog", "dmax", "dmin", "dmod", "dnint",
                         "dot_product", "dprod", "dsign", "dsinh",
                         "dsin", "dsqrt", "dtanh", "dtan", "dtime",
                         "eoshift", "epsilon", "erf", "erfc", "etime",
                         "exit", "exp", "exponent", "extends_type_of",
                         "fdate", "fget", "fgetc", "float", "floor",
                         "flush", "fnum", "fputc", "fput", "fraction",
                         "fseek", "fstat", "ftell", "gerror", "getarg",
                         "get_command", "get_command_argument",
                         "get_environment_variable", "getcwd",
                         "getenv", "getgid", "getlog", "getpid",
                         "getuid", "gmtime", "hostnm", "huge", "iabs",
                         "iachar", "iand", "iargc", "ibclr", "ibits",
                         "ibset", "ichar", "idate", "idim", "idint",
                         "idnint", "ieor", "ierrno", "ifix", "imag",
                         "imagpart", "index", "int", "ior", "irand",
                         "isatty", "ishft", "ishftc", "isign",
                         "iso_c_binding", "is_iostat_end", "is_iostat_eor",
                         "itime", "kill", "kind", "lbound", "len", "len_trim",
                         "lge", "lgt", "link", "lle", "llt", "lnblnk", "loc",
                         "log", "logical", "long", "lshift", "lstat", "ltime",
                         "matmul", "max", "maxexponent", "maxloc", "maxval",
                         "mclock", "merge", "move_alloc", "min", "minexponent",
                         "minloc", "minval", "mod", "modulo", "mvbits",
                         "nearest", "new_line", "nint", "not", "or", "pack",
                         "perror", "precision", "present", "product", "radix",
                         "rand", "random_number", "random_seed", "range",
                         "real", "realpart", "rename", "repeat", "reshape",
                         "rrspacing", "rshift", "same_type_as", "scale",
                         "scan", "second", "selected_int_kind",
                         "selected_real_kind", "set_exponent", "shape",
                         "short", "sign", "signal", "sinh", "sin", "sleep",
                         "sngl", "spacing", "spread", "sqrt", "srand", "stat",
                         "sum", "symlnk", "system", "system_clock", "tan",
                         "tanh", "time", "tiny", "transfer", "transpose",
                         "trim", "ttynam", "ubound", "umask", "unlink",
                         "unpack", "verify", "xor", "zabs", "zcos", "zexp",
                         "zlog", "zsin", "zsqrt"]);

   var dataTypes =  words$e(["c_bool", "c_char", "c_double", "c_double_complex",
                           "c_float", "c_float_complex", "c_funptr", "c_int",
                           "c_int16_t", "c_int32_t", "c_int64_t", "c_int8_t",
                           "c_int_fast16_t", "c_int_fast32_t", "c_int_fast64_t",
                           "c_int_fast8_t", "c_int_least16_t", "c_int_least32_t",
                           "c_int_least64_t", "c_int_least8_t", "c_intmax_t",
                           "c_intptr_t", "c_long", "c_long_double",
                           "c_long_double_complex", "c_long_long", "c_ptr",
                           "c_short", "c_signed_char", "c_size_t", "character",
                           "complex", "double", "integer", "logical", "real"]);
   var isOperatorChar$b = /[+\-*&=<>\/\:]/;
   var litOperator = /^\.(and|or|eq|lt|le|gt|ge|ne|not|eqv|neqv)\./i;

   function tokenBase$A(stream, state) {

     if (stream.match(litOperator)){
       return 'operator';
     }

     var ch = stream.next();
     if (ch == "!") {
       stream.skipToEnd();
       return "comment";
     }
     if (ch == '"' || ch == "'") {
       state.tokenize = tokenString$m(ch);
       return state.tokenize(stream, state);
     }
     if (/[\[\]\(\),]/.test(ch)) {
       return null;
     }
     if (/\d/.test(ch)) {
       stream.eatWhile(/[\w\.]/);
       return "number";
     }
     if (isOperatorChar$b.test(ch)) {
       stream.eatWhile(isOperatorChar$b);
       return "operator";
     }
     stream.eatWhile(/[\w\$_]/);
     var word = stream.current().toLowerCase();

     if (keywords$x.hasOwnProperty(word)){
       return 'keyword';
     }
     if (builtins$8.hasOwnProperty(word) || dataTypes.hasOwnProperty(word)) {
       return 'builtin';
     }
     return "variable";
   }

   function tokenString$m(quote) {
     return function(stream, state) {
       var escaped = false, next, end = false;
       while ((next = stream.next()) != null) {
         if (next == quote && !escaped) {
           end = true;
           break;
         }
         escaped = !escaped && next == "\\";
       }
       if (end || !escaped) state.tokenize = null;
       return "string";
     };
   }

   // Interface

   const fortran = {
     name: "fortran",
     startState: function() {
       return {tokenize: null};
     },

     token: function(stream, state) {
       if (stream.eatSpace()) return null;
       var style = (state.tokenize || tokenBase$A)(stream, state);
       if (style == "comment" || style == "meta") return style;
       return style;
     }
   };

   var fortran$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      fortran: fortran
   });

   function mlLike(parserConfig) {
     var words = {
       'as': 'keyword',
       'do': 'keyword',
       'else': 'keyword',
       'end': 'keyword',
       'exception': 'keyword',
       'fun': 'keyword',
       'functor': 'keyword',
       'if': 'keyword',
       'in': 'keyword',
       'include': 'keyword',
       'let': 'keyword',
       'of': 'keyword',
       'open': 'keyword',
       'rec': 'keyword',
       'struct': 'keyword',
       'then': 'keyword',
       'type': 'keyword',
       'val': 'keyword',
       'while': 'keyword',
       'with': 'keyword'
     };

     var extraWords = parserConfig.extraWords || {};
     for (var prop in extraWords) {
       if (extraWords.hasOwnProperty(prop)) {
         words[prop] = parserConfig.extraWords[prop];
       }
     }
     var hintWords = [];
     for (var k in words) { hintWords.push(k); }

     function tokenBase(stream, state) {
       var ch = stream.next();

       if (ch === '"') {
         state.tokenize = tokenString;
         return state.tokenize(stream, state);
       }
       if (ch === '{') {
         if (stream.eat('|')) {
           state.longString = true;
           state.tokenize = tokenLongString;
           return state.tokenize(stream, state);
         }
       }
       if (ch === '(') {
         if (stream.match(/^\*(?!\))/)) {
           state.commentLevel++;
           state.tokenize = tokenComment;
           return state.tokenize(stream, state);
         }
       }
       if (ch === '~' || ch === '?') {
         stream.eatWhile(/\w/);
         return 'variableName.special';
       }
       if (ch === '`') {
         stream.eatWhile(/\w/);
         return 'quote';
       }
       if (ch === '/' && parserConfig.slashComments && stream.eat('/')) {
         stream.skipToEnd();
         return 'comment';
       }
       if (/\d/.test(ch)) {
         if (ch === '0' && stream.eat(/[bB]/)) {
           stream.eatWhile(/[01]/);
         } if (ch === '0' && stream.eat(/[xX]/)) {
           stream.eatWhile(/[0-9a-fA-F]/);
         } if (ch === '0' && stream.eat(/[oO]/)) {
           stream.eatWhile(/[0-7]/);
         } else {
           stream.eatWhile(/[\d_]/);
           if (stream.eat('.')) {
             stream.eatWhile(/[\d]/);
           }
           if (stream.eat(/[eE]/)) {
             stream.eatWhile(/[\d\-+]/);
           }
         }
         return 'number';
       }
       if ( /[+\-*&%=<>!?|@\.~:]/.test(ch)) {
         return 'operator';
       }
       if (/[\w\xa1-\uffff]/.test(ch)) {
         stream.eatWhile(/[\w\xa1-\uffff]/);
         var cur = stream.current();
         return words.hasOwnProperty(cur) ? words[cur] : 'variable';
       }
       return null
     }

     function tokenString(stream, state) {
       var next, end = false, escaped = false;
       while ((next = stream.next()) != null) {
         if (next === '"' && !escaped) {
           end = true;
           break;
         }
         escaped = !escaped && next === '\\';
       }
       if (end && !escaped) {
         state.tokenize = tokenBase;
       }
       return 'string';
     }
     function tokenComment(stream, state) {
       var prev, next;
       while(state.commentLevel > 0 && (next = stream.next()) != null) {
         if (prev === '(' && next === '*') state.commentLevel++;
         if (prev === '*' && next === ')') state.commentLevel--;
         prev = next;
       }
       if (state.commentLevel <= 0) {
         state.tokenize = tokenBase;
       }
       return 'comment';
     }

     function tokenLongString(stream, state) {
       var prev, next;
       while (state.longString && (next = stream.next()) != null) {
         if (prev === '|' && next === '}') state.longString = false;
         prev = next;
       }
       if (!state.longString) {
         state.tokenize = tokenBase;
       }
       return 'string';
     }

     return {
       startState: function() {return {tokenize: tokenBase, commentLevel: 0, longString: false};},
       token: function(stream, state) {
         if (stream.eatSpace()) return null;
         return state.tokenize(stream, state);
       },

       languageData: {
         autocomplete: hintWords,
         commentTokens: {
           line: parserConfig.slashComments ? "//" : undefined,
           block: {open: "(*", close: "*)"}
         }
       }
     };
   }
   const oCaml = mlLike({
     name: "ocaml",
     extraWords: {
       'and': 'keyword',
       'assert': 'keyword',
       'begin': 'keyword',
       'class': 'keyword',
       'constraint': 'keyword',
       'done': 'keyword',
       'downto': 'keyword',
       'external': 'keyword',
       'function': 'keyword',
       'initializer': 'keyword',
       'lazy': 'keyword',
       'match': 'keyword',
       'method': 'keyword',
       'module': 'keyword',
       'mutable': 'keyword',
       'new': 'keyword',
       'nonrec': 'keyword',
       'object': 'keyword',
       'private': 'keyword',
       'sig': 'keyword',
       'to': 'keyword',
       'try': 'keyword',
       'value': 'keyword',
       'virtual': 'keyword',
       'when': 'keyword',

       // builtins
       'raise': 'builtin',
       'failwith': 'builtin',
       'true': 'builtin',
       'false': 'builtin',

       // Pervasives builtins
       'asr': 'builtin',
       'land': 'builtin',
       'lor': 'builtin',
       'lsl': 'builtin',
       'lsr': 'builtin',
       'lxor': 'builtin',
       'mod': 'builtin',
       'or': 'builtin',

       // More Pervasives
       'raise_notrace': 'builtin',
       'trace': 'builtin',
       'exit': 'builtin',
       'print_string': 'builtin',
       'print_endline': 'builtin',

        'int': 'type',
        'float': 'type',
        'bool': 'type',
        'char': 'type',
        'string': 'type',
        'unit': 'type',

        // Modules
        'List': 'builtin'
     }
   });

   const fSharp = mlLike({
     name: "fsharp",
     extraWords: {
       'abstract': 'keyword',
       'assert': 'keyword',
       'base': 'keyword',
       'begin': 'keyword',
       'class': 'keyword',
       'default': 'keyword',
       'delegate': 'keyword',
       'do!': 'keyword',
       'done': 'keyword',
       'downcast': 'keyword',
       'downto': 'keyword',
       'elif': 'keyword',
       'extern': 'keyword',
       'finally': 'keyword',
       'for': 'keyword',
       'function': 'keyword',
       'global': 'keyword',
       'inherit': 'keyword',
       'inline': 'keyword',
       'interface': 'keyword',
       'internal': 'keyword',
       'lazy': 'keyword',
       'let!': 'keyword',
       'match': 'keyword',
       'member': 'keyword',
       'module': 'keyword',
       'mutable': 'keyword',
       'namespace': 'keyword',
       'new': 'keyword',
       'null': 'keyword',
       'override': 'keyword',
       'private': 'keyword',
       'public': 'keyword',
       'return!': 'keyword',
       'return': 'keyword',
       'select': 'keyword',
       'static': 'keyword',
       'to': 'keyword',
       'try': 'keyword',
       'upcast': 'keyword',
       'use!': 'keyword',
       'use': 'keyword',
       'void': 'keyword',
       'when': 'keyword',
       'yield!': 'keyword',
       'yield': 'keyword',

       // Reserved words
       'atomic': 'keyword',
       'break': 'keyword',
       'checked': 'keyword',
       'component': 'keyword',
       'const': 'keyword',
       'constraint': 'keyword',
       'constructor': 'keyword',
       'continue': 'keyword',
       'eager': 'keyword',
       'event': 'keyword',
       'external': 'keyword',
       'fixed': 'keyword',
       'method': 'keyword',
       'mixin': 'keyword',
       'object': 'keyword',
       'parallel': 'keyword',
       'process': 'keyword',
       'protected': 'keyword',
       'pure': 'keyword',
       'sealed': 'keyword',
       'tailcall': 'keyword',
       'trait': 'keyword',
       'virtual': 'keyword',
       'volatile': 'keyword',

       // builtins
       'List': 'builtin',
       'Seq': 'builtin',
       'Map': 'builtin',
       'Set': 'builtin',
       'Option': 'builtin',
       'int': 'builtin',
       'string': 'builtin',
       'not': 'builtin',
       'true': 'builtin',
       'false': 'builtin',

       'raise': 'builtin',
       'failwith': 'builtin'
     },
     slashComments: true
   });

   const sml = mlLike({
     name: "sml",
     extraWords: {
       'abstype': 'keyword',
       'and': 'keyword',
       'andalso': 'keyword',
       'case': 'keyword',
       'datatype': 'keyword',
       'fn': 'keyword',
       'handle': 'keyword',
       'infix': 'keyword',
       'infixr': 'keyword',
       'local': 'keyword',
       'nonfix': 'keyword',
       'op': 'keyword',
       'orelse': 'keyword',
       'raise': 'keyword',
       'withtype': 'keyword',
       'eqtype': 'keyword',
       'sharing': 'keyword',
       'sig': 'keyword',
       'signature': 'keyword',
       'structure': 'keyword',
       'where': 'keyword',
       'true': 'keyword',
       'false': 'keyword',

       // types
       'int': 'builtin',
       'real': 'builtin',
       'string': 'builtin',
       'char': 'builtin',
       'bool': 'builtin'
     },
     slashComments: true
   });

   var mllike = /*#__PURE__*/Object.freeze({
      __proto__: null,
      fSharp: fSharp,
      oCaml: oCaml,
      sml: sml
   });

   function mkGas(arch) {
     // If an architecture is specified, its initialization function may
     // populate this array with custom parsing functions which will be
     // tried in the event that the standard functions do not find a match.
     var custom = [];

     // The symbol used to start a line comment changes based on the target
     // architecture.
     // If no architecture is pased in "parserConfig" then only multiline
     // comments will have syntax support.
     var lineCommentStartSymbol = "";

     // These directives are architecture independent.
     // Machine specific directives should go in their respective
     // architecture initialization function.
     // Reference:
     // http://sourceware.org/binutils/docs/as/Pseudo-Ops.html#Pseudo-Ops
     var directives = {
       ".abort" : "builtin",
       ".align" : "builtin",
       ".altmacro" : "builtin",
       ".ascii" : "builtin",
       ".asciz" : "builtin",
       ".balign" : "builtin",
       ".balignw" : "builtin",
       ".balignl" : "builtin",
       ".bundle_align_mode" : "builtin",
       ".bundle_lock" : "builtin",
       ".bundle_unlock" : "builtin",
       ".byte" : "builtin",
       ".cfi_startproc" : "builtin",
       ".comm" : "builtin",
       ".data" : "builtin",
       ".def" : "builtin",
       ".desc" : "builtin",
       ".dim" : "builtin",
       ".double" : "builtin",
       ".eject" : "builtin",
       ".else" : "builtin",
       ".elseif" : "builtin",
       ".end" : "builtin",
       ".endef" : "builtin",
       ".endfunc" : "builtin",
       ".endif" : "builtin",
       ".equ" : "builtin",
       ".equiv" : "builtin",
       ".eqv" : "builtin",
       ".err" : "builtin",
       ".error" : "builtin",
       ".exitm" : "builtin",
       ".extern" : "builtin",
       ".fail" : "builtin",
       ".file" : "builtin",
       ".fill" : "builtin",
       ".float" : "builtin",
       ".func" : "builtin",
       ".global" : "builtin",
       ".gnu_attribute" : "builtin",
       ".hidden" : "builtin",
       ".hword" : "builtin",
       ".ident" : "builtin",
       ".if" : "builtin",
       ".incbin" : "builtin",
       ".include" : "builtin",
       ".int" : "builtin",
       ".internal" : "builtin",
       ".irp" : "builtin",
       ".irpc" : "builtin",
       ".lcomm" : "builtin",
       ".lflags" : "builtin",
       ".line" : "builtin",
       ".linkonce" : "builtin",
       ".list" : "builtin",
       ".ln" : "builtin",
       ".loc" : "builtin",
       ".loc_mark_labels" : "builtin",
       ".local" : "builtin",
       ".long" : "builtin",
       ".macro" : "builtin",
       ".mri" : "builtin",
       ".noaltmacro" : "builtin",
       ".nolist" : "builtin",
       ".octa" : "builtin",
       ".offset" : "builtin",
       ".org" : "builtin",
       ".p2align" : "builtin",
       ".popsection" : "builtin",
       ".previous" : "builtin",
       ".print" : "builtin",
       ".protected" : "builtin",
       ".psize" : "builtin",
       ".purgem" : "builtin",
       ".pushsection" : "builtin",
       ".quad" : "builtin",
       ".reloc" : "builtin",
       ".rept" : "builtin",
       ".sbttl" : "builtin",
       ".scl" : "builtin",
       ".section" : "builtin",
       ".set" : "builtin",
       ".short" : "builtin",
       ".single" : "builtin",
       ".size" : "builtin",
       ".skip" : "builtin",
       ".sleb128" : "builtin",
       ".space" : "builtin",
       ".stab" : "builtin",
       ".string" : "builtin",
       ".struct" : "builtin",
       ".subsection" : "builtin",
       ".symver" : "builtin",
       ".tag" : "builtin",
       ".text" : "builtin",
       ".title" : "builtin",
       ".type" : "builtin",
       ".uleb128" : "builtin",
       ".val" : "builtin",
       ".version" : "builtin",
       ".vtable_entry" : "builtin",
       ".vtable_inherit" : "builtin",
       ".warning" : "builtin",
       ".weak" : "builtin",
       ".weakref" : "builtin",
       ".word" : "builtin"
     };

     var registers = {};

     function x86() {
       lineCommentStartSymbol = "#";

       registers.al  = "variable";
       registers.ah  = "variable";
       registers.ax  = "variable";
       registers.eax = "variableName.special";
       registers.rax = "variableName.special";

       registers.bl  = "variable";
       registers.bh  = "variable";
       registers.bx  = "variable";
       registers.ebx = "variableName.special";
       registers.rbx = "variableName.special";

       registers.cl  = "variable";
       registers.ch  = "variable";
       registers.cx  = "variable";
       registers.ecx = "variableName.special";
       registers.rcx = "variableName.special";

       registers.dl  = "variable";
       registers.dh  = "variable";
       registers.dx  = "variable";
       registers.edx = "variableName.special";
       registers.rdx = "variableName.special";

       registers.si  = "variable";
       registers.esi = "variableName.special";
       registers.rsi = "variableName.special";

       registers.di  = "variable";
       registers.edi = "variableName.special";
       registers.rdi = "variableName.special";

       registers.sp  = "variable";
       registers.esp = "variableName.special";
       registers.rsp = "variableName.special";

       registers.bp  = "variable";
       registers.ebp = "variableName.special";
       registers.rbp = "variableName.special";

       registers.ip  = "variable";
       registers.eip = "variableName.special";
       registers.rip = "variableName.special";

       registers.cs  = "keyword";
       registers.ds  = "keyword";
       registers.ss  = "keyword";
       registers.es  = "keyword";
       registers.fs  = "keyword";
       registers.gs  = "keyword";
     }

     function armv6() {
       // Reference:
       // http://infocenter.arm.com/help/topic/com.arm.doc.qrc0001l/QRC0001_UAL.pdf
       // http://infocenter.arm.com/help/topic/com.arm.doc.ddi0301h/DDI0301H_arm1176jzfs_r0p7_trm.pdf
       lineCommentStartSymbol = "@";
       directives.syntax = "builtin";

       registers.r0  = "variable";
       registers.r1  = "variable";
       registers.r2  = "variable";
       registers.r3  = "variable";
       registers.r4  = "variable";
       registers.r5  = "variable";
       registers.r6  = "variable";
       registers.r7  = "variable";
       registers.r8  = "variable";
       registers.r9  = "variable";
       registers.r10 = "variable";
       registers.r11 = "variable";
       registers.r12 = "variable";

       registers.sp  = "variableName.special";
       registers.lr  = "variableName.special";
       registers.pc  = "variableName.special";
       registers.r13 = registers.sp;
       registers.r14 = registers.lr;
       registers.r15 = registers.pc;

       custom.push(function(ch, stream) {
         if (ch === '#') {
           stream.eatWhile(/\w/);
           return "number";
         }
       });
     }

     if (arch === "x86") {
       x86();
     } else if (arch === "arm" || arch === "armv6") {
       armv6();
     }

     function nextUntilUnescaped(stream, end) {
       var escaped = false, next;
       while ((next = stream.next()) != null) {
         if (next === end && !escaped) {
           return false;
         }
         escaped = !escaped && next === "\\";
       }
       return escaped;
     }

     function clikeComment(stream, state) {
       var maybeEnd = false, ch;
       while ((ch = stream.next()) != null) {
         if (ch === "/" && maybeEnd) {
           state.tokenize = null;
           break;
         }
         maybeEnd = (ch === "*");
       }
       return "comment";
     }

     return {
       name: "gas",
       startState: function() {
         return {
           tokenize: null
         };
       },

       token: function(stream, state) {
         if (state.tokenize) {
           return state.tokenize(stream, state);
         }

         if (stream.eatSpace()) {
           return null;
         }

         var style, cur, ch = stream.next();

         if (ch === "/") {
           if (stream.eat("*")) {
             state.tokenize = clikeComment;
             return clikeComment(stream, state);
           }
         }

         if (ch === lineCommentStartSymbol) {
           stream.skipToEnd();
           return "comment";
         }

         if (ch === '"') {
           nextUntilUnescaped(stream, '"');
           return "string";
         }

         if (ch === '.') {
           stream.eatWhile(/\w/);
           cur = stream.current().toLowerCase();
           style = directives[cur];
           return style || null;
         }

         if (ch === '=') {
           stream.eatWhile(/\w/);
           return "tag";
         }

         if (ch === '{') {
           return "bracket";
         }

         if (ch === '}') {
           return "bracket";
         }

         if (/\d/.test(ch)) {
           if (ch === "0" && stream.eat("x")) {
             stream.eatWhile(/[0-9a-fA-F]/);
             return "number";
           }
           stream.eatWhile(/\d/);
           return "number";
         }

         if (/\w/.test(ch)) {
           stream.eatWhile(/\w/);
           if (stream.eat(":")) {
             return 'tag';
           }
           cur = stream.current().toLowerCase();
           style = registers[cur];
           return style || null;
         }

         for (var i = 0; i < custom.length; i++) {
           style = custom[i](ch, stream, state);
           if (style) {
             return style;
           }
         }
       },

       languageData: {
         commentTokens: {
           line: lineCommentStartSymbol,
           block: {open: "/*", close: "*/"}
         }
       }
     };
   }
   const gas = mkGas("x86");
   const gasArm = mkGas("arm");

   var gas$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      gas: gas,
      gasArm: gasArm
   });

   const gherkin = {
     name: "gherkin",
     startState: function () {
       return {
         lineNumber: 0,
         tableHeaderLine: false,
         allowFeature: true,
         allowBackground: false,
         allowScenario: false,
         allowSteps: false,
         allowPlaceholders: false,
         allowMultilineArgument: false,
         inMultilineString: false,
         inMultilineTable: false,
         inKeywordLine: false
       };
     },
     token: function (stream, state) {
       if (stream.sol()) {
         state.lineNumber++;
         state.inKeywordLine = false;
         if (state.inMultilineTable) {
           state.tableHeaderLine = false;
           if (!stream.match(/\s*\|/, false)) {
             state.allowMultilineArgument = false;
             state.inMultilineTable = false;
           }
         }
       }

       stream.eatSpace();

       if (state.allowMultilineArgument) {

         // STRING
         if (state.inMultilineString) {
           if (stream.match('"""')) {
             state.inMultilineString = false;
             state.allowMultilineArgument = false;
           } else {
             stream.match(/.*/);
           }
           return "string";
         }

         // TABLE
         if (state.inMultilineTable) {
           if (stream.match(/\|\s*/)) {
             return "bracket";
           } else {
             stream.match(/[^\|]*/);
             return state.tableHeaderLine ? "header" : "string";
           }
         }

         // DETECT START
         if (stream.match('"""')) {
           // String
           state.inMultilineString = true;
           return "string";
         } else if (stream.match("|")) {
           // Table
           state.inMultilineTable = true;
           state.tableHeaderLine = true;
           return "bracket";
         }

       }

       // LINE COMMENT
       if (stream.match(/#.*/)) {
         return "comment";

         // TAG
       } else if (!state.inKeywordLine && stream.match(/@\S+/)) {
         return "tag";

         // FEATURE
       } else if (!state.inKeywordLine && state.allowFeature && stream.match(/(機能|功能|フィーチャ|기능|โครงหลัก|ความสามารถ|ความต้องการทางธุรกิจ|ಹೆಚ್ಚಳ|గుణము|ਮੁਹਾਂਦਰਾ|ਨਕਸ਼ ਨੁਹਾਰ|ਖਾਸੀਅਤ|रूप लेख|وِیژگی|خاصية|תכונה|Функціонал|Функция|Функционалност|Функционал|Үзенчәлеклелек|Свойство|Особина|Мөмкинлек|Могућност|Λειτουργία|Δυνατότητα|Właściwość|Vlastnosť|Trajto|Tính năng|Savybė|Pretty much|Požiadavka|Požadavek|Potrzeba biznesowa|Özellik|Osobina|Ominaisuus|Omadus|OH HAI|Mogućnost|Mogucnost|Jellemző|Hwæt|Hwaet|Funzionalità|Funktionalitéit|Funktionalität|Funkcja|Funkcionalnost|Funkcionalitāte|Funkcia|Fungsi|Functionaliteit|Funcționalitate|Funcţionalitate|Functionalitate|Funcionalitat|Funcionalidade|Fonctionnalité|Fitur|Fīča|Feature|Eiginleiki|Egenskap|Egenskab|Característica|Caracteristica|Business Need|Aspekt|Arwedd|Ahoy matey!|Ability):/)) {
         state.allowScenario = true;
         state.allowBackground = true;
         state.allowPlaceholders = false;
         state.allowSteps = false;
         state.allowMultilineArgument = false;
         state.inKeywordLine = true;
         return "keyword";

         // BACKGROUND
       } else if (!state.inKeywordLine && state.allowBackground && stream.match(/(背景|배경|แนวคิด|ಹಿನ್ನೆಲೆ|నేపథ్యం|ਪਿਛੋਕੜ|पृष्ठभूमि|زمینه|الخلفية|רקע|Тарих|Предыстория|Предистория|Позадина|Передумова|Основа|Контекст|Кереш|Υπόβαθρο|Założenia|Yo\-ho\-ho|Tausta|Taust|Situācija|Rerefons|Pozadina|Pozadie|Pozadí|Osnova|Latar Belakang|Kontext|Konteksts|Kontekstas|Kontekst|Háttér|Hannergrond|Grundlage|Geçmiş|Fundo|Fono|First off|Dis is what went down|Dasar|Contexto|Contexte|Context|Contesto|Cenário de Fundo|Cenario de Fundo|Cefndir|Bối cảnh|Bakgrunnur|Bakgrunn|Bakgrund|Baggrund|Background|B4|Antecedents|Antecedentes|Ær|Aer|Achtergrond):/)) {
         state.allowPlaceholders = false;
         state.allowSteps = true;
         state.allowBackground = false;
         state.allowMultilineArgument = false;
         state.inKeywordLine = true;
         return "keyword";

         // SCENARIO OUTLINE
       } else if (!state.inKeywordLine && state.allowScenario && stream.match(/(場景大綱|场景大纲|劇本大綱|剧本大纲|テンプレ|シナリオテンプレート|シナリオテンプレ|シナリオアウトライン|시나리오 개요|สรุปเหตุการณ์|โครงสร้างของเหตุการณ์|ವಿವರಣೆ|కథనం|ਪਟਕਥਾ ਰੂਪ ਰੇਖਾ|ਪਟਕਥਾ ਢਾਂਚਾ|परिदृश्य रूपरेखा|سيناريو مخطط|الگوی سناریو|תבנית תרחיש|Сценарийның төзелеше|Сценарий структураси|Структура сценарію|Структура сценария|Структура сценарија|Скица|Рамка на сценарий|Концепт|Περιγραφή Σεναρίου|Wharrimean is|Template Situai|Template Senario|Template Keadaan|Tapausaihio|Szenariogrundriss|Szablon scenariusza|Swa hwær swa|Swa hwaer swa|Struktura scenarija|Structură scenariu|Structura scenariu|Skica|Skenario konsep|Shiver me timbers|Senaryo taslağı|Schema dello scenario|Scenariomall|Scenariomal|Scenario Template|Scenario Outline|Scenario Amlinellol|Scenārijs pēc parauga|Scenarijaus šablonas|Reckon it's like|Raamstsenaarium|Plang vum Szenario|Plan du Scénario|Plan du scénario|Osnova scénáře|Osnova Scenára|Náčrt Scenáru|Náčrt Scénáře|Náčrt Scenára|MISHUN SRSLY|Menggariskan Senario|Lýsing Dæma|Lýsing Atburðarásar|Konturo de la scenaro|Koncept|Khung tình huống|Khung kịch bản|Forgatókönyv vázlat|Esquema do Cenário|Esquema do Cenario|Esquema del escenario|Esquema de l'escenari|Esbozo do escenario|Delineação do Cenário|Delineacao do Cenario|All y'all|Abstrakt Scenario|Abstract Scenario):/)) {
         state.allowPlaceholders = true;
         state.allowSteps = true;
         state.allowMultilineArgument = false;
         state.inKeywordLine = true;
         return "keyword";

         // EXAMPLES
       } else if (state.allowScenario && stream.match(/(例子|例|サンプル|예|ชุดของเหตุการณ์|ชุดของตัวอย่าง|ಉದಾಹರಣೆಗಳು|ఉదాహరణలు|ਉਦਾਹਰਨਾਂ|उदाहरण|نمونه ها|امثلة|דוגמאות|Үрнәкләр|Сценарији|Примеры|Примери|Приклади|Мисоллар|Мисаллар|Σενάρια|Παραδείγματα|You'll wanna|Voorbeelden|Variantai|Tapaukset|Se þe|Se the|Se ðe|Scenarios|Scenariji|Scenarijai|Przykłady|Primjeri|Primeri|Příklady|Príklady|Piemēri|Példák|Pavyzdžiai|Paraugs|Örnekler|Juhtumid|Exemplos|Exemples|Exemple|Exempel|EXAMPLZ|Examples|Esempi|Enghreifftiau|Ekzemploj|Eksempler|Ejemplos|Dữ liệu|Dead men tell no tales|Dæmi|Contoh|Cenários|Cenarios|Beispiller|Beispiele|Atburðarásir):/)) {
         state.allowPlaceholders = false;
         state.allowSteps = true;
         state.allowBackground = false;
         state.allowMultilineArgument = true;
         return "keyword";

         // SCENARIO
       } else if (!state.inKeywordLine && state.allowScenario && stream.match(/(場景|场景|劇本|剧本|シナリオ|시나리오|เหตุการณ์|ಕಥಾಸಾರಾಂಶ|సన్నివేశం|ਪਟਕਥਾ|परिदृश्य|سيناريو|سناریو|תרחיש|Сценарій|Сценарио|Сценарий|Пример|Σενάριο|Tình huống|The thing of it is|Tapaus|Szenario|Swa|Stsenaarium|Skenario|Situai|Senaryo|Senario|Scenaro|Scenariusz|Scenariu|Scénario|Scenario|Scenarijus|Scenārijs|Scenarij|Scenarie|Scénář|Scenár|Primer|MISHUN|Kịch bản|Keadaan|Heave to|Forgatókönyv|Escenario|Escenari|Cenário|Cenario|Awww, look mate|Atburðarás):/)) {
         state.allowPlaceholders = false;
         state.allowSteps = true;
         state.allowBackground = false;
         state.allowMultilineArgument = false;
         state.inKeywordLine = true;
         return "keyword";

         // STEPS
       } else if (!state.inKeywordLine && state.allowSteps && stream.match(/(那麼|那么|而且|當|当|并且|同時|同时|前提|假设|假設|假定|假如|但是|但し|並且|もし|ならば|ただし|しかし|かつ|하지만|조건|먼저|만일|만약|단|그리고|그러면|และ |เมื่อ |แต่ |ดังนั้น |กำหนดให้ |ಸ್ಥಿತಿಯನ್ನು |ಮತ್ತು |ನೀಡಿದ |ನಂತರ |ಆದರೆ |మరియు |చెప్పబడినది |కాని |ఈ పరిస్థితిలో |అప్పుడు |ਪਰ |ਤਦ |ਜੇਕਰ |ਜਿਵੇਂ ਕਿ |ਜਦੋਂ |ਅਤੇ |यदि |परन्तु |पर |तब |तदा |तथा |जब |चूंकि |किन्तु |कदा |और |अगर |و |هنگامی |متى |لكن |عندما |ثم |بفرض |با فرض |اما |اذاً |آنگاه |כאשר |וגם |בהינתן |אזי |אז |אבל |Якщо |Һәм |Унда |Тоді |Тогда |То |Также |Та |Пусть |Припустимо, що |Припустимо |Онда |Но |Нехай |Нәтиҗәдә |Лекин |Ләкин |Коли |Когда |Когато |Када |Кад |К тому же |І |И |Задато |Задати |Задате |Если |Допустим |Дано |Дадено |Вә |Ва |Бирок |Әмма |Әйтик |Әгәр |Аммо |Али |Але |Агар |А також |А |Τότε |Όταν |Και |Δεδομένου |Αλλά |Þurh |Þegar |Þa þe |Þá |Þa |Zatati |Zakładając |Zadato |Zadate |Zadano |Zadani |Zadan |Za předpokladu |Za predpokladu |Youse know when youse got |Youse know like when |Yna |Yeah nah |Y'know |Y |Wun |Wtedy |When y'all |When |Wenn |WEN |wann |Ve |Và |Und |Un |ugeholl |Too right |Thurh |Thì |Then y'all |Then |Tha the |Tha |Tetapi |Tapi |Tak |Tada |Tad |Stel |Soit |Siis |Și |Şi |Si |Sed |Se |Så |Quando |Quand |Quan |Pryd |Potom |Pokud |Pokiaľ |Però |Pero |Pak |Oraz |Onda |Ond |Oletetaan |Og |Och |O zaman |Niin |Nhưng |När |Når |Mutta |Men |Mas |Maka |Majd |Mając |Mais |Maar |mä |Ma |Lorsque |Lorsqu'|Logo |Let go and haul |Kun |Kuid |Kui |Kiedy |Khi |Ketika |Kemudian |Keď |Když |Kaj |Kai |Kada |Kad |Jeżeli |Jeśli |Ja |It's just unbelievable |Ir |I CAN HAZ |I |Ha |Givun |Givet |Given y'all |Given |Gitt |Gegeven |Gegeben seien |Gegeben sei |Gdy |Gangway! |Fakat |Étant donnés |Etant donnés |Étant données |Etant données |Étant donnée |Etant donnée |Étant donné |Etant donné |Et |És |Entonces |Entón |Então |Entao |En |Eğer ki |Ef |Eeldades |E |Ðurh |Duota |Dun |Donitaĵo |Donat |Donada |Do |Diyelim ki |Diberi |Dengan |Den youse gotta |DEN |De |Dato |Dați fiind |Daţi fiind |Dati fiind |Dati |Date fiind |Date |Data |Dat fiind |Dar |Dann |dann |Dan |Dados |Dado |Dadas |Dada |Ða ðe |Ða |Cuando |Cho |Cando |Când |Cand |Cal |But y'all |But at the end of the day I reckon |BUT |But |Buh |Blimey! |Biết |Bet |Bagi |Aye |awer |Avast! |Atunci |Atesa |Atès |Apabila |Anrhegedig a |Angenommen |And y'all |And |AN |An |an |Amikor |Amennyiben |Ama |Als |Alors |Allora |Ali |Aleshores |Ale |Akkor |Ak |Adott |Ac |Aber |A zároveň |A tiež |A taktiež |A také |A |a |7 |\* )/)) {
         state.inStep = true;
         state.allowPlaceholders = true;
         state.allowMultilineArgument = true;
         state.inKeywordLine = true;
         return "keyword";

         // INLINE STRING
       } else if (stream.match(/"[^"]*"?/)) {
         return "string";

         // PLACEHOLDER
       } else if (state.allowPlaceholders && stream.match(/<[^>]*>?/)) {
         return "variable";

         // Fall through
       } else {
         stream.next();
         stream.eatWhile(/[^@"<#]/);
         return null;
       }
     }
   };

   var gherkin$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      gherkin: gherkin
   });

   var keywords$w = {
     "break":true, "case":true, "chan":true, "const":true, "continue":true,
     "default":true, "defer":true, "else":true, "fallthrough":true, "for":true,
     "func":true, "go":true, "goto":true, "if":true, "import":true,
     "interface":true, "map":true, "package":true, "range":true, "return":true,
     "select":true, "struct":true, "switch":true, "type":true, "var":true,
     "bool":true, "byte":true, "complex64":true, "complex128":true,
     "float32":true, "float64":true, "int8":true, "int16":true, "int32":true,
     "int64":true, "string":true, "uint8":true, "uint16":true, "uint32":true,
     "uint64":true, "int":true, "uint":true, "uintptr":true, "error": true,
     "rune":true, "any":true, "comparable":true
   };

   var atoms$9 = {
     "true":true, "false":true, "iota":true, "nil":true, "append":true,
     "cap":true, "close":true, "complex":true, "copy":true, "delete":true, "imag":true,
     "len":true, "make":true, "new":true, "panic":true, "print":true,
     "println":true, "real":true, "recover":true
   };

   var isOperatorChar$a = /[+\-*&^%:=<>!|\/]/;

   var curPunc$9;

   function tokenBase$z(stream, state) {
     var ch = stream.next();
     if (ch == '"' || ch == "'" || ch == "`") {
       state.tokenize = tokenString$l(ch);
       return state.tokenize(stream, state);
     }
     if (/[\d\.]/.test(ch)) {
       if (ch == ".") {
         stream.match(/^[0-9]+([eE][\-+]?[0-9]+)?/);
       } else if (ch == "0") {
         stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^0[0-7]+/);
       } else {
         stream.match(/^[0-9]*\.?[0-9]*([eE][\-+]?[0-9]+)?/);
       }
       return "number";
     }
     if (/[\[\]{}\(\),;\:\.]/.test(ch)) {
       curPunc$9 = ch;
       return null;
     }
     if (ch == "/") {
       if (stream.eat("*")) {
         state.tokenize = tokenComment$f;
         return tokenComment$f(stream, state);
       }
       if (stream.eat("/")) {
         stream.skipToEnd();
         return "comment";
       }
     }
     if (isOperatorChar$a.test(ch)) {
       stream.eatWhile(isOperatorChar$a);
       return "operator";
     }
     stream.eatWhile(/[\w\$_\xa1-\uffff]/);
     var cur = stream.current();
     if (keywords$w.propertyIsEnumerable(cur)) {
       if (cur == "case" || cur == "default") curPunc$9 = "case";
       return "keyword";
     }
     if (atoms$9.propertyIsEnumerable(cur)) return "atom";
     return "variable";
   }

   function tokenString$l(quote) {
     return function(stream, state) {
       var escaped = false, next, end = false;
       while ((next = stream.next()) != null) {
         if (next == quote && !escaped) {end = true; break;}
         escaped = !escaped && quote != "`" && next == "\\";
       }
       if (end || !(escaped || quote == "`"))
         state.tokenize = tokenBase$z;
       return "string";
     };
   }

   function tokenComment$f(stream, state) {
     var maybeEnd = false, ch;
     while (ch = stream.next()) {
       if (ch == "/" && maybeEnd) {
         state.tokenize = tokenBase$z;
         break;
       }
       maybeEnd = (ch == "*");
     }
     return "comment";
   }

   function Context$7(indented, column, type, align, prev) {
     this.indented = indented;
     this.column = column;
     this.type = type;
     this.align = align;
     this.prev = prev;
   }
   function pushContext$a(state, col, type) {
     return state.context = new Context$7(state.indented, col, type, null, state.context);
   }
   function popContext$a(state) {
     if (!state.context.prev) return;
     var t = state.context.type;
     if (t == ")" || t == "]" || t == "}")
       state.indented = state.context.indented;
     return state.context = state.context.prev;
   }

   // Interface

   const go = {
     name: "go",
     startState: function(indentUnit) {
       return {
         tokenize: null,
         context: new Context$7(-indentUnit, 0, "top", false),
         indented: 0,
         startOfLine: true
       };
     },

     token: function(stream, state) {
       var ctx = state.context;
       if (stream.sol()) {
         if (ctx.align == null) ctx.align = false;
         state.indented = stream.indentation();
         state.startOfLine = true;
         if (ctx.type == "case") ctx.type = "}";
       }
       if (stream.eatSpace()) return null;
       curPunc$9 = null;
       var style = (state.tokenize || tokenBase$z)(stream, state);
       if (style == "comment") return style;
       if (ctx.align == null) ctx.align = true;

       if (curPunc$9 == "{") pushContext$a(state, stream.column(), "}");
       else if (curPunc$9 == "[") pushContext$a(state, stream.column(), "]");
       else if (curPunc$9 == "(") pushContext$a(state, stream.column(), ")");
       else if (curPunc$9 == "case") ctx.type = "case";
       else if (curPunc$9 == "}" && ctx.type == "}") popContext$a(state);
       else if (curPunc$9 == ctx.type) popContext$a(state);
       state.startOfLine = false;
       return style;
     },

     indent: function(state, textAfter, cx) {
       if (state.tokenize != tokenBase$z && state.tokenize != null) return null;
       var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);
       if (ctx.type == "case" && /^(?:case|default)\b/.test(textAfter)) return ctx.indented;
       var closing = firstChar == ctx.type;
       if (ctx.align) return ctx.column + (closing ? 0 : 1);
       else return ctx.indented + (closing ? 0 : cx.unit);
     },

     languageData: {
       indentOnInput: /^\s([{}]|case |default\s*:)$/,
       commentTokens: {line: "//", block: {open: "/*", close: "*/"}}
     }
   };

   var go$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      go: go
   });

   function words$d(str) {
     var obj = {}, words = str.split(" ");
     for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
     return obj;
   }
   var keywords$v = words$d(
     "abstract as assert boolean break byte case catch char class const continue def default " +
       "do double else enum extends final finally float for goto if implements import in " +
       "instanceof int interface long native new package private protected public return " +
       "short static strictfp super switch synchronized threadsafe throw throws trait transient " +
       "try void volatile while");
   var blockKeywords$2 = words$d("catch class def do else enum finally for if interface switch trait try while");
   var standaloneKeywords = words$d("return break continue");
   var atoms$8 = words$d("null true false this");

   var curPunc$8;
   function tokenBase$y(stream, state) {
     var ch = stream.next();
     if (ch == '"' || ch == "'") {
       return startString(ch, stream, state);
     }
     if (/[\[\]{}\(\),;\:\.]/.test(ch)) {
       curPunc$8 = ch;
       return null;
     }
     if (/\d/.test(ch)) {
       stream.eatWhile(/[\w\.]/);
       if (stream.eat(/eE/)) { stream.eat(/\+\-/); stream.eatWhile(/\d/); }
       return "number";
     }
     if (ch == "/") {
       if (stream.eat("*")) {
         state.tokenize.push(tokenComment$e);
         return tokenComment$e(stream, state);
       }
       if (stream.eat("/")) {
         stream.skipToEnd();
         return "comment";
       }
       if (expectExpression(state.lastToken, false)) {
         return startString(ch, stream, state);
       }
     }
     if (ch == "-" && stream.eat(">")) {
       curPunc$8 = "->";
       return null;
     }
     if (/[+\-*&%=<>!?|\/~]/.test(ch)) {
       stream.eatWhile(/[+\-*&%=<>|~]/);
       return "operator";
     }
     stream.eatWhile(/[\w\$_]/);
     if (ch == "@") { stream.eatWhile(/[\w\$_\.]/); return "meta"; }
     if (state.lastToken == ".") return "property";
     if (stream.eat(":")) { curPunc$8 = "proplabel"; return "property"; }
     var cur = stream.current();
     if (atoms$8.propertyIsEnumerable(cur)) { return "atom"; }
     if (keywords$v.propertyIsEnumerable(cur)) {
       if (blockKeywords$2.propertyIsEnumerable(cur)) curPunc$8 = "newstatement";
       else if (standaloneKeywords.propertyIsEnumerable(cur)) curPunc$8 = "standalone";
       return "keyword";
     }
     return "variable";
   }
   tokenBase$y.isBase = true;

   function startString(quote, stream, state) {
     var tripleQuoted = false;
     if (quote != "/" && stream.eat(quote)) {
       if (stream.eat(quote)) tripleQuoted = true;
       else return "string";
     }
     function t(stream, state) {
       var escaped = false, next, end = !tripleQuoted;
       while ((next = stream.next()) != null) {
         if (next == quote && !escaped) {
           if (!tripleQuoted) { break; }
           if (stream.match(quote + quote)) { end = true; break; }
         }
         if (quote == '"' && next == "$" && !escaped) {
           if (stream.eat("{")) {
             state.tokenize.push(tokenBaseUntilBrace$1());
             return "string";
           } else if (stream.match(/^\w/, false)) {
             state.tokenize.push(tokenVariableDeref);
             return "string";
           }
         }
         escaped = !escaped && next == "\\";
       }
       if (end) state.tokenize.pop();
       return "string";
     }
     state.tokenize.push(t);
     return t(stream, state);
   }

   function tokenBaseUntilBrace$1() {
     var depth = 1;
     function t(stream, state) {
       if (stream.peek() == "}") {
         depth--;
         if (depth == 0) {
           state.tokenize.pop();
           return state.tokenize[state.tokenize.length-1](stream, state);
         }
       } else if (stream.peek() == "{") {
         depth++;
       }
       return tokenBase$y(stream, state);
     }
     t.isBase = true;
     return t;
   }

   function tokenVariableDeref(stream, state) {
     var next = stream.match(/^(\.|[\w\$_]+)/);
     if (!next) {
       state.tokenize.pop();
       return state.tokenize[state.tokenize.length-1](stream, state)
     }
     return next[0] == "." ? null : "variable"
   }

   function tokenComment$e(stream, state) {
     var maybeEnd = false, ch;
     while (ch = stream.next()) {
       if (ch == "/" && maybeEnd) {
         state.tokenize.pop();
         break;
       }
       maybeEnd = (ch == "*");
     }
     return "comment";
   }

   function expectExpression(last, newline) {
     return !last || last == "operator" || last == "->" || /[\.\[\{\(,;:]/.test(last) ||
       last == "newstatement" || last == "keyword" || last == "proplabel" ||
       (last == "standalone" && !newline);
   }

   function Context$6(indented, column, type, align, prev) {
     this.indented = indented;
     this.column = column;
     this.type = type;
     this.align = align;
     this.prev = prev;
   }
   function pushContext$9(state, col, type) {
     return state.context = new Context$6(state.indented, col, type, null, state.context);
   }
   function popContext$9(state) {
     var t = state.context.type;
     if (t == ")" || t == "]" || t == "}")
       state.indented = state.context.indented;
     return state.context = state.context.prev;
   }

   // Interface

   const groovy = {
     name: "groovy",
     startState: function(indentUnit) {
       return {
         tokenize: [tokenBase$y],
         context: new Context$6(-indentUnit, 0, "top", false),
         indented: 0,
         startOfLine: true,
         lastToken: null
       };
     },

     token: function(stream, state) {
       var ctx = state.context;
       if (stream.sol()) {
         if (ctx.align == null) ctx.align = false;
         state.indented = stream.indentation();
         state.startOfLine = true;
         // Automatic semicolon insertion
         if (ctx.type == "statement" && !expectExpression(state.lastToken, true)) {
           popContext$9(state); ctx = state.context;
         }
       }
       if (stream.eatSpace()) return null;
       curPunc$8 = null;
       var style = state.tokenize[state.tokenize.length-1](stream, state);
       if (style == "comment") return style;
       if (ctx.align == null) ctx.align = true;

       if ((curPunc$8 == ";" || curPunc$8 == ":") && ctx.type == "statement") popContext$9(state);
       // Handle indentation for {x -> \n ... }
       else if (curPunc$8 == "->" && ctx.type == "statement" && ctx.prev.type == "}") {
         popContext$9(state);
         state.context.align = false;
       }
       else if (curPunc$8 == "{") pushContext$9(state, stream.column(), "}");
       else if (curPunc$8 == "[") pushContext$9(state, stream.column(), "]");
       else if (curPunc$8 == "(") pushContext$9(state, stream.column(), ")");
       else if (curPunc$8 == "}") {
         while (ctx.type == "statement") ctx = popContext$9(state);
         if (ctx.type == "}") ctx = popContext$9(state);
         while (ctx.type == "statement") ctx = popContext$9(state);
       }
       else if (curPunc$8 == ctx.type) popContext$9(state);
       else if (ctx.type == "}" || ctx.type == "top" || (ctx.type == "statement" && curPunc$8 == "newstatement"))
         pushContext$9(state, stream.column(), "statement");
       state.startOfLine = false;
       state.lastToken = curPunc$8 || style;
       return style;
     },

     indent: function(state, textAfter, cx) {
       if (!state.tokenize[state.tokenize.length-1].isBase) return null;
       var firstChar = textAfter && textAfter.charAt(0), ctx = state.context;
       if (ctx.type == "statement" && !expectExpression(state.lastToken, true)) ctx = ctx.prev;
       var closing = firstChar == ctx.type;
       if (ctx.type == "statement") return ctx.indented + (firstChar == "{" ? 0 : cx.unit);
       else if (ctx.align) return ctx.column + (closing ? 0 : 1);
       else return ctx.indented + (closing ? 0 : cx.unit);
     },

     languageData: {
       indentOnInput: /^\s*[{}]$/,
       commentTokens: {line: "//", block: {open: "/*", close: "*/"}},
       closeBrackets: {brackets: ["(", "[", "{", "'", '"', "'''", '"""']}
     }
   };

   var groovy$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      groovy: groovy
   });

   function switchState(source, setState, f) {
     setState(f);
     return f(source, setState);
   }

   // These should all be Unicode extended, as per the Haskell 2010 report
   var smallRE = /[a-z_]/;
   var largeRE = /[A-Z]/;
   var digitRE = /\d/;
   var hexitRE = /[0-9A-Fa-f]/;
   var octitRE = /[0-7]/;
   var idRE = /[a-z_A-Z0-9'\xa1-\uffff]/;
   var symbolRE = /[-!#$%&*+.\/<=>?@\\^|~:]/;
   var specialRE = /[(),;[\]`{}]/;
   var whiteCharRE = /[ \t\v\f]/; // newlines are handled in tokenizer

   function normal$1(source, setState) {
     if (source.eatWhile(whiteCharRE)) {
       return null;
     }

     var ch = source.next();
     if (specialRE.test(ch)) {
       if (ch == '{' && source.eat('-')) {
         var t = "comment";
         if (source.eat('#')) {
           t = "meta";
         }
         return switchState(source, setState, ncomment(t, 1));
       }
       return null;
     }

     if (ch == '\'') {
       if (source.eat('\\')) {
         source.next();  // should handle other escapes here
       }
       else {
         source.next();
       }
       if (source.eat('\'')) {
         return "string";
       }
       return "error";
     }

     if (ch == '"') {
       return switchState(source, setState, stringLiteral);
     }

     if (largeRE.test(ch)) {
       source.eatWhile(idRE);
       if (source.eat('.')) {
         return "qualifier";
       }
       return "type";
     }

     if (smallRE.test(ch)) {
       source.eatWhile(idRE);
       return "variable";
     }

     if (digitRE.test(ch)) {
       if (ch == '0') {
         if (source.eat(/[xX]/)) {
           source.eatWhile(hexitRE); // should require at least 1
           return "integer";
         }
         if (source.eat(/[oO]/)) {
           source.eatWhile(octitRE); // should require at least 1
           return "number";
         }
       }
       source.eatWhile(digitRE);
       var t = "number";
       if (source.match(/^\.\d+/)) {
         t = "number";
       }
       if (source.eat(/[eE]/)) {
         t = "number";
         source.eat(/[-+]/);
         source.eatWhile(digitRE); // should require at least 1
       }
       return t;
     }

     if (ch == "." && source.eat("."))
       return "keyword";

     if (symbolRE.test(ch)) {
       if (ch == '-' && source.eat(/-/)) {
         source.eatWhile(/-/);
         if (!source.eat(symbolRE)) {
           source.skipToEnd();
           return "comment";
         }
       }
       source.eatWhile(symbolRE);
       return "variable"
     }

     return "error";
   }

   function ncomment(type, nest) {
     if (nest == 0) {
       return normal$1;
     }
     return function(source, setState) {
       var currNest = nest;
       while (!source.eol()) {
         var ch = source.next();
         if (ch == '{' && source.eat('-')) {
           ++currNest;
         }
         else if (ch == '-' && source.eat('}')) {
           --currNest;
           if (currNest == 0) {
             setState(normal$1);
             return type;
           }
         }
       }
       setState(ncomment(type, currNest));
       return type;
     };
   }

   function stringLiteral(source, setState) {
     while (!source.eol()) {
       var ch = source.next();
       if (ch == '"') {
         setState(normal$1);
         return "string";
       }
       if (ch == '\\') {
         if (source.eol() || source.eat(whiteCharRE)) {
           setState(stringGap);
           return "string";
         }
         if (source.eat('&')) ;
         else {
           source.next(); // should handle other escapes here
         }
       }
     }
     setState(normal$1);
     return "error";
   }

   function stringGap(source, setState) {
     if (source.eat('\\')) {
       return switchState(source, setState, stringLiteral);
     }
     source.next();
     setState(normal$1);
     return "error";
   }


   var wellKnownWords = (function() {
     var wkw = {};
     function setType(t) {
       return function () {
         for (var i = 0; i < arguments.length; i++)
           wkw[arguments[i]] = t;
       };
     }

     setType("keyword")(
       "case", "class", "data", "default", "deriving", "do", "else", "foreign",
       "if", "import", "in", "infix", "infixl", "infixr", "instance", "let",
       "module", "newtype", "of", "then", "type", "where", "_");

     setType("keyword")(
       "\.\.", ":", "::", "=", "\\", "<-", "->", "@", "~", "=>");

     setType("builtin")(
       "!!", "$!", "$", "&&", "+", "++", "-", ".", "/", "/=", "<", "<*", "<=",
       "<$>", "<*>", "=<<", "==", ">", ">=", ">>", ">>=", "^", "^^", "||", "*",
       "*>", "**");

     setType("builtin")(
       "Applicative", "Bool", "Bounded", "Char", "Double", "EQ", "Either", "Enum",
       "Eq", "False", "FilePath", "Float", "Floating", "Fractional", "Functor",
       "GT", "IO", "IOError", "Int", "Integer", "Integral", "Just", "LT", "Left",
       "Maybe", "Monad", "Nothing", "Num", "Ord", "Ordering", "Rational", "Read",
       "ReadS", "Real", "RealFloat", "RealFrac", "Right", "Show", "ShowS",
       "String", "True");

     setType("builtin")(
       "abs", "acos", "acosh", "all", "and", "any", "appendFile", "asTypeOf",
       "asin", "asinh", "atan", "atan2", "atanh", "break", "catch", "ceiling",
       "compare", "concat", "concatMap", "const", "cos", "cosh", "curry",
       "cycle", "decodeFloat", "div", "divMod", "drop", "dropWhile", "either",
       "elem", "encodeFloat", "enumFrom", "enumFromThen", "enumFromThenTo",
       "enumFromTo", "error", "even", "exp", "exponent", "fail", "filter",
       "flip", "floatDigits", "floatRadix", "floatRange", "floor", "fmap",
       "foldl", "foldl1", "foldr", "foldr1", "fromEnum", "fromInteger",
       "fromIntegral", "fromRational", "fst", "gcd", "getChar", "getContents",
       "getLine", "head", "id", "init", "interact", "ioError", "isDenormalized",
       "isIEEE", "isInfinite", "isNaN", "isNegativeZero", "iterate", "last",
       "lcm", "length", "lex", "lines", "log", "logBase", "lookup", "map",
       "mapM", "mapM_", "max", "maxBound", "maximum", "maybe", "min", "minBound",
       "minimum", "mod", "negate", "not", "notElem", "null", "odd", "or",
       "otherwise", "pi", "pred", "print", "product", "properFraction", "pure",
       "putChar", "putStr", "putStrLn", "quot", "quotRem", "read", "readFile",
       "readIO", "readList", "readLn", "readParen", "reads", "readsPrec",
       "realToFrac", "recip", "rem", "repeat", "replicate", "return", "reverse",
       "round", "scaleFloat", "scanl", "scanl1", "scanr", "scanr1", "seq",
       "sequence", "sequence_", "show", "showChar", "showList", "showParen",
       "showString", "shows", "showsPrec", "significand", "signum", "sin",
       "sinh", "snd", "span", "splitAt", "sqrt", "subtract", "succ", "sum",
       "tail", "take", "takeWhile", "tan", "tanh", "toEnum", "toInteger",
       "toRational", "truncate", "uncurry", "undefined", "unlines", "until",
       "unwords", "unzip", "unzip3", "userError", "words", "writeFile", "zip",
       "zip3", "zipWith", "zipWith3");

     return wkw;
   })();

   const haskell = {
     name: "haskell",
     startState: function ()  { return { f: normal$1 }; },
     copyState:  function (s) { return { f: s.f }; },

     token: function(stream, state) {
       var t = state.f(stream, function(s) { state.f = s; });
       var w = stream.current();
       return wellKnownWords.hasOwnProperty(w) ? wellKnownWords[w] : t;
     },

     languageData: {
       commentTokens: {line: "--", block: {open: "{-", close: "-}"}}
     }
   };

   var haskell$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      haskell: haskell
   });

   // Tokenizer

   function kw(type) {return {type: type, style: "keyword"};}
   var A = kw("keyword a"), B = kw("keyword b"), C = kw("keyword c");
   var operator$1 = kw("operator"), atom$1 = {type: "atom", style: "atom"}, attribute$1 = {type:"attribute", style: "attribute"};
   var type$3 = kw("typedef");
   var keywords$u = {
     "if": A, "while": A, "else": B, "do": B, "try": B,
     "return": C, "break": C, "continue": C, "new": C, "throw": C,
     "var": kw("var"), "inline":attribute$1, "static": attribute$1, "using":kw("import"),
     "public": attribute$1, "private": attribute$1, "cast": kw("cast"), "import": kw("import"), "macro": kw("macro"),
     "function": kw("function"), "catch": kw("catch"), "untyped": kw("untyped"), "callback": kw("cb"),
     "for": kw("for"), "switch": kw("switch"), "case": kw("case"), "default": kw("default"),
     "in": operator$1, "never": kw("property_access"), "trace":kw("trace"),
     "class": type$3, "abstract":type$3, "enum":type$3, "interface":type$3, "typedef":type$3, "extends":type$3, "implements":type$3, "dynamic":type$3,
     "true": atom$1, "false": atom$1, "null": atom$1
   };

   var isOperatorChar$9 = /[+\-*&%=<>!?|]/;

   function chain$7(stream, state, f) {
     state.tokenize = f;
     return f(stream, state);
   }

   function toUnescaped(stream, end) {
     var escaped = false, next;
     while ((next = stream.next()) != null) {
       if (next == end && !escaped)
         return true;
       escaped = !escaped && next == "\\";
     }
   }

   // Used as scratch variables to communicate multiple values without
   // consing up tons of objects.
   var type$3, content;
   function ret$1(tp, style, cont) {
     type$3 = tp; content = cont;
     return style;
   }

   function haxeTokenBase(stream, state) {
     var ch = stream.next();
     if (ch == '"' || ch == "'") {
       return chain$7(stream, state, haxeTokenString(ch));
     } else if (/[\[\]{}\(\),;\:\.]/.test(ch)) {
       return ret$1(ch);
     } else if (ch == "0" && stream.eat(/x/i)) {
       stream.eatWhile(/[\da-f]/i);
       return ret$1("number", "number");
     } else if (/\d/.test(ch) || ch == "-" && stream.eat(/\d/)) {
       stream.match(/^\d*(?:\.\d*(?!\.))?(?:[eE][+\-]?\d+)?/);
       return ret$1("number", "number");
     } else if (state.reAllowed && (ch == "~" && stream.eat(/\//))) {
       toUnescaped(stream, "/");
       stream.eatWhile(/[gimsu]/);
       return ret$1("regexp", "string.special");
     } else if (ch == "/") {
       if (stream.eat("*")) {
         return chain$7(stream, state, haxeTokenComment);
       } else if (stream.eat("/")) {
         stream.skipToEnd();
         return ret$1("comment", "comment");
       } else {
         stream.eatWhile(isOperatorChar$9);
         return ret$1("operator", null, stream.current());
       }
     } else if (ch == "#") {
       stream.skipToEnd();
       return ret$1("conditional", "meta");
     } else if (ch == "@") {
       stream.eat(/:/);
       stream.eatWhile(/[\w_]/);
       return ret$1 ("metadata", "meta");
     } else if (isOperatorChar$9.test(ch)) {
       stream.eatWhile(isOperatorChar$9);
       return ret$1("operator", null, stream.current());
     } else {
       var word;
       if(/[A-Z]/.test(ch)) {
         stream.eatWhile(/[\w_<>]/);
         word = stream.current();
         return ret$1("type", "type", word);
       } else {
         stream.eatWhile(/[\w_]/);
         var word = stream.current(), known = keywords$u.propertyIsEnumerable(word) && keywords$u[word];
         return (known && state.kwAllowed) ? ret$1(known.type, known.style, word) :
           ret$1("variable", "variable", word);
       }
     }
   }

   function haxeTokenString(quote) {
     return function(stream, state) {
       if (toUnescaped(stream, quote))
         state.tokenize = haxeTokenBase;
       return ret$1("string", "string");
     };
   }

   function haxeTokenComment(stream, state) {
     var maybeEnd = false, ch;
     while (ch = stream.next()) {
       if (ch == "/" && maybeEnd) {
         state.tokenize = haxeTokenBase;
         break;
       }
       maybeEnd = (ch == "*");
     }
     return ret$1("comment", "comment");
   }

   // Parser

   var atomicTypes = {"atom": true, "number": true, "variable": true, "string": true, "regexp": true};

   function HaxeLexical(indented, column, type, align, prev, info) {
     this.indented = indented;
     this.column = column;
     this.type = type;
     this.prev = prev;
     this.info = info;
     if (align != null) this.align = align;
   }

   function inScope(state, varname) {
     for (var v = state.localVars; v; v = v.next)
       if (v.name == varname) return true;
   }

   function parseHaxe(state, style, type, content, stream) {
     var cc = state.cc;
     // Communicate our context to the combinators.
     // (Less wasteful than consing up a hundred closures on every call.)
     cx.state = state; cx.stream = stream; cx.marked = null, cx.cc = cc;

     if (!state.lexical.hasOwnProperty("align"))
       state.lexical.align = true;

     while(true) {
       var combinator = cc.length ? cc.pop() : statement;
       if (combinator(type, content)) {
         while(cc.length && cc[cc.length - 1].lex)
           cc.pop()();
         if (cx.marked) return cx.marked;
         if (type == "variable" && inScope(state, content)) return "variableName.local";
         if (type == "variable" && imported(state, content)) return "variableName.special";
         return style;
       }
     }
   }

   function imported(state, typename) {
     if (/[a-z]/.test(typename.charAt(0)))
       return false;
     var len = state.importedtypes.length;
     for (var i = 0; i<len; i++)
       if(state.importedtypes[i]==typename) return true;
   }

   function registerimport(importname) {
     var state = cx.state;
     for (var t = state.importedtypes; t; t = t.next)
       if(t.name == importname) return;
     state.importedtypes = { name: importname, next: state.importedtypes };
   }
   // Combinator utils

   var cx = {state: null, column: null, marked: null, cc: null};
   function pass$2() {
     for (var i = arguments.length - 1; i >= 0; i--) cx.cc.push(arguments[i]);
   }
   function cont$1() {
     pass$2.apply(null, arguments);
     return true;
   }
   function inList(name, list) {
     for (var v = list; v; v = v.next)
       if (v.name == name) return true;
     return false;
   }
   function register(varname) {
     var state = cx.state;
     if (state.context) {
       cx.marked = "def";
       if (inList(varname, state.localVars)) return;
       state.localVars = {name: varname, next: state.localVars};
     } else if (state.globalVars) {
       if (inList(varname, state.globalVars)) return;
       state.globalVars = {name: varname, next: state.globalVars};
     }
   }

   // Combinators

   var defaultVars = {name: "this", next: null};
   function pushcontext() {
     if (!cx.state.context) cx.state.localVars = defaultVars;
     cx.state.context = {prev: cx.state.context, vars: cx.state.localVars};
   }
   function popcontext() {
     cx.state.localVars = cx.state.context.vars;
     cx.state.context = cx.state.context.prev;
   }
   popcontext.lex = true;
   function pushlex(type, info) {
     var result = function() {
       var state = cx.state;
       state.lexical = new HaxeLexical(state.indented, cx.stream.column(), type, null, state.lexical, info);
     };
     result.lex = true;
     return result;
   }
   function poplex() {
     var state = cx.state;
     if (state.lexical.prev) {
       if (state.lexical.type == ")")
         state.indented = state.lexical.indented;
       state.lexical = state.lexical.prev;
     }
   }
   poplex.lex = true;

   function expect(wanted) {
     function f(type) {
       if (type == wanted) return cont$1();
       else if (wanted == ";") return pass$2();
       else return cont$1(f);
     }
     return f;
   }

   function statement(type) {
     if (type == "@") return cont$1(metadef);
     if (type == "var") return cont$1(pushlex("vardef"), vardef1, expect(";"), poplex);
     if (type == "keyword a") return cont$1(pushlex("form"), expression, statement, poplex);
     if (type == "keyword b") return cont$1(pushlex("form"), statement, poplex);
     if (type == "{") return cont$1(pushlex("}"), pushcontext, block, poplex, popcontext);
     if (type == ";") return cont$1();
     if (type == "attribute") return cont$1(maybeattribute);
     if (type == "function") return cont$1(functiondef);
     if (type == "for") return cont$1(pushlex("form"), expect("("), pushlex(")"), forspec1, expect(")"),
                                    poplex, statement, poplex);
     if (type == "variable") return cont$1(pushlex("stat"), maybelabel);
     if (type == "switch") return cont$1(pushlex("form"), expression, pushlex("}", "switch"), expect("{"),
                                       block, poplex, poplex);
     if (type == "case") return cont$1(expression, expect(":"));
     if (type == "default") return cont$1(expect(":"));
     if (type == "catch") return cont$1(pushlex("form"), pushcontext, expect("("), funarg, expect(")"),
                                      statement, poplex, popcontext);
     if (type == "import") return cont$1(importdef, expect(";"));
     if (type == "typedef") return cont$1(typedef);
     return pass$2(pushlex("stat"), expression, expect(";"), poplex);
   }
   function expression(type) {
     if (atomicTypes.hasOwnProperty(type)) return cont$1(maybeoperator);
     if (type == "type" ) return cont$1(maybeoperator);
     if (type == "function") return cont$1(functiondef);
     if (type == "keyword c") return cont$1(maybeexpression);
     if (type == "(") return cont$1(pushlex(")"), maybeexpression, expect(")"), poplex, maybeoperator);
     if (type == "operator") return cont$1(expression);
     if (type == "[") return cont$1(pushlex("]"), commasep(maybeexpression, "]"), poplex, maybeoperator);
     if (type == "{") return cont$1(pushlex("}"), commasep(objprop, "}"), poplex, maybeoperator);
     return cont$1();
   }
   function maybeexpression(type) {
     if (type.match(/[;\}\)\],]/)) return pass$2();
     return pass$2(expression);
   }

   function maybeoperator(type, value) {
     if (type == "operator" && /\+\+|--/.test(value)) return cont$1(maybeoperator);
     if (type == "operator" || type == ":") return cont$1(expression);
     if (type == ";") return;
     if (type == "(") return cont$1(pushlex(")"), commasep(expression, ")"), poplex, maybeoperator);
     if (type == ".") return cont$1(property$1, maybeoperator);
     if (type == "[") return cont$1(pushlex("]"), expression, expect("]"), poplex, maybeoperator);
   }

   function maybeattribute(type) {
     if (type == "attribute") return cont$1(maybeattribute);
     if (type == "function") return cont$1(functiondef);
     if (type == "var") return cont$1(vardef1);
   }

   function metadef(type) {
     if(type == ":") return cont$1(metadef);
     if(type == "variable") return cont$1(metadef);
     if(type == "(") return cont$1(pushlex(")"), commasep(metaargs, ")"), poplex, statement);
   }
   function metaargs(type) {
     if(type == "variable") return cont$1();
   }

   function importdef (type, value) {
     if(type == "variable" && /[A-Z]/.test(value.charAt(0))) { registerimport(value); return cont$1(); }
     else if(type == "variable" || type == "property" || type == "." || value == "*") return cont$1(importdef);
   }

   function typedef (type, value)
   {
     if(type == "variable" && /[A-Z]/.test(value.charAt(0))) { registerimport(value); return cont$1(); }
     else if (type == "type" && /[A-Z]/.test(value.charAt(0))) { return cont$1(); }
   }

   function maybelabel(type) {
     if (type == ":") return cont$1(poplex, statement);
     return pass$2(maybeoperator, expect(";"), poplex);
   }
   function property$1(type) {
     if (type == "variable") {cx.marked = "property"; return cont$1();}
   }
   function objprop(type) {
     if (type == "variable") cx.marked = "property";
     if (atomicTypes.hasOwnProperty(type)) return cont$1(expect(":"), expression);
   }
   function commasep(what, end) {
     function proceed(type) {
       if (type == ",") return cont$1(what, proceed);
       if (type == end) return cont$1();
       return cont$1(expect(end));
     }
     return function(type) {
       if (type == end) return cont$1();
       else return pass$2(what, proceed);
     };
   }
   function block(type) {
     if (type == "}") return cont$1();
     return pass$2(statement, block);
   }
   function vardef1(type, value) {
     if (type == "variable"){register(value); return cont$1(typeuse, vardef2);}
     return cont$1();
   }
   function vardef2(type, value) {
     if (value == "=") return cont$1(expression, vardef2);
     if (type == ",") return cont$1(vardef1);
   }
   function forspec1(type, value) {
     if (type == "variable") {
       register(value);
       return cont$1(forin, expression)
     } else {
       return pass$2()
     }
   }
   function forin(_type, value) {
     if (value == "in") return cont$1();
   }
   function functiondef(type, value) {
     //function names starting with upper-case letters are recognised as types, so cludging them together here.
     if (type == "variable" || type == "type") {register(value); return cont$1(functiondef);}
     if (value == "new") return cont$1(functiondef);
     if (type == "(") return cont$1(pushlex(")"), pushcontext, commasep(funarg, ")"), poplex, typeuse, statement, popcontext);
   }
   function typeuse(type) {
     if(type == ":") return cont$1(typestring);
   }
   function typestring(type) {
     if(type == "type") return cont$1();
     if(type == "variable") return cont$1();
     if(type == "{") return cont$1(pushlex("}"), commasep(typeprop, "}"), poplex);
   }
   function typeprop(type) {
     if(type == "variable") return cont$1(typeuse);
   }
   function funarg(type, value) {
     if (type == "variable") {register(value); return cont$1(typeuse);}
   }

   // Interface
   const haxe = {
     name: "haxe",
     startState: function(indentUnit) {
       var defaulttypes = ["Int", "Float", "String", "Void", "Std", "Bool", "Dynamic", "Array"];
       var state = {
         tokenize: haxeTokenBase,
         reAllowed: true,
         kwAllowed: true,
         cc: [],
         lexical: new HaxeLexical(-indentUnit, 0, "block", false),
         importedtypes: defaulttypes,
         context: null,
         indented: 0
       };
       return state;
     },

     token: function(stream, state) {
       if (stream.sol()) {
         if (!state.lexical.hasOwnProperty("align"))
           state.lexical.align = false;
         state.indented = stream.indentation();
       }
       if (stream.eatSpace()) return null;
       var style = state.tokenize(stream, state);
       if (type$3 == "comment") return style;
       state.reAllowed = !!(type$3 == "operator" || type$3 == "keyword c" || type$3.match(/^[\[{}\(,;:]$/));
       state.kwAllowed = type$3 != '.';
       return parseHaxe(state, style, type$3, content, stream);
     },

     indent: function(state, textAfter, cx) {
       if (state.tokenize != haxeTokenBase) return 0;
       var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical;
       if (lexical.type == "stat" && firstChar == "}") lexical = lexical.prev;
       var type = lexical.type, closing = firstChar == type;
       if (type == "vardef") return lexical.indented + 4;
       else if (type == "form" && firstChar == "{") return lexical.indented;
       else if (type == "stat" || type == "form") return lexical.indented + cx.unit;
       else if (lexical.info == "switch" && !closing)
         return lexical.indented + (/^(?:case|default)\b/.test(textAfter) ? cx.unit : 2 * cx.unit);
       else if (lexical.align) return lexical.column + (closing ? 0 : 1);
       else return lexical.indented + (closing ? 0 : cx.unit);
     },

     languageData: {
       indentOnInput: /^\s*[{}]$/,
       commentTokens: {line: "//", block: {open: "/*", close: "*/"}}
     }
   };

   const hxml = {
     name: "hxml",
     startState: function () {
       return {
         define: false,
         inString: false
       };
     },
     token: function (stream, state) {
       var ch = stream.peek();
       var sol = stream.sol();

       ///* comments */
       if (ch == "#") {
         stream.skipToEnd();
         return "comment";
       }
       if (sol && ch == "-") {
         var style = "variable-2";

         stream.eat(/-/);

         if (stream.peek() == "-") {
           stream.eat(/-/);
           style = "keyword a";
         }

         if (stream.peek() == "D") {
           stream.eat(/[D]/);
           style = "keyword c";
           state.define = true;
         }

         stream.eatWhile(/[A-Z]/i);
         return style;
       }

       var ch = stream.peek();

       if (state.inString == false && ch == "'") {
         state.inString = true;
         stream.next();
       }

       if (state.inString == true) {
         if (stream.skipTo("'")) ; else {
           stream.skipToEnd();
         }

         if (stream.peek() == "'") {
           stream.next();
           state.inString = false;
         }

         return "string";
       }

       stream.next();
       return null;
     },
     languageData: {
       commentTokens: {line: "#"}
     }
   };

   var haxe$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      haxe: haxe,
      hxml: hxml
   });

   function failFirstLine(stream, state) {
     stream.skipToEnd();
     state.cur = header$1;
     return "error";
   }

   function start(stream, state) {
     if (stream.match(/^HTTP\/\d\.\d/)) {
       state.cur = responseStatusCode;
       return "keyword";
     } else if (stream.match(/^[A-Z]+/) && /[ \t]/.test(stream.peek())) {
       state.cur = requestPath;
       return "keyword";
     } else {
       return failFirstLine(stream, state);
     }
   }

   function responseStatusCode(stream, state) {
     var code = stream.match(/^\d+/);
     if (!code) return failFirstLine(stream, state);

     state.cur = responseStatusText;
     var status = Number(code[0]);
     if (status >= 100 && status < 400) {
       return "atom";
     } else {
       return "error";
     }
   }

   function responseStatusText(stream, state) {
     stream.skipToEnd();
     state.cur = header$1;
     return null;
   }

   function requestPath(stream, state) {
     stream.eatWhile(/\S/);
     state.cur = requestProtocol;
     return "string.special";
   }

   function requestProtocol(stream, state) {
     if (stream.match(/^HTTP\/\d\.\d$/)) {
       state.cur = header$1;
       return "keyword";
     } else {
       return failFirstLine(stream, state);
     }
   }

   function header$1(stream) {
     if (stream.sol() && !stream.eat(/[ \t]/)) {
       if (stream.match(/^.*?:/)) {
         return "atom";
       } else {
         stream.skipToEnd();
         return "error";
       }
     } else {
       stream.skipToEnd();
       return "string";
     }
   }

   function body(stream) {
     stream.skipToEnd();
     return null;
   }

   const http = {
     name: "http",
     token: function(stream, state) {
       var cur = state.cur;
       if (cur != header$1 && cur != body && stream.eatSpace()) return null;
       return cur(stream, state);
     },

     blankLine: function(state) {
       state.cur = body;
     },

     startState: function() {
       return {cur: start};
     }
   };

   var http$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      http: http
   });

   function wordRegexp$b(words) {
     return new RegExp('^((' + words.join(')|(') + '))\\b', 'i');
   }
   var builtinArray$1 = [
     'a_correlate', 'abs', 'acos', 'adapt_hist_equal', 'alog',
     'alog2', 'alog10', 'amoeba', 'annotate', 'app_user_dir',
     'app_user_dir_query', 'arg_present', 'array_equal', 'array_indices',
     'arrow', 'ascii_template', 'asin', 'assoc', 'atan',
     'axis', 'axis', 'bandpass_filter', 'bandreject_filter', 'barplot',
     'bar_plot', 'beseli', 'beselj', 'beselk', 'besely',
     'beta', 'biginteger', 'bilinear', 'bin_date', 'binary_template',
     'bindgen', 'binomial', 'bit_ffs', 'bit_population', 'blas_axpy',
     'blk_con', 'boolarr', 'boolean', 'boxplot', 'box_cursor',
     'breakpoint', 'broyden', 'bubbleplot', 'butterworth', 'bytarr',
     'byte', 'byteorder', 'bytscl', 'c_correlate', 'calendar',
     'caldat', 'call_external', 'call_function', 'call_method',
     'call_procedure', 'canny', 'catch', 'cd', 'cdf', 'ceil',
     'chebyshev', 'check_math', 'chisqr_cvf', 'chisqr_pdf', 'choldc',
     'cholsol', 'cindgen', 'cir_3pnt', 'clipboard', 'close',
     'clust_wts', 'cluster', 'cluster_tree', 'cmyk_convert', 'code_coverage',
     'color_convert', 'color_exchange', 'color_quan', 'color_range_map',
     'colorbar', 'colorize_sample', 'colormap_applicable',
     'colormap_gradient', 'colormap_rotation', 'colortable',
     'comfit', 'command_line_args', 'common', 'compile_opt', 'complex',
     'complexarr', 'complexround', 'compute_mesh_normals', 'cond', 'congrid',
     'conj', 'constrained_min', 'contour', 'contour', 'convert_coord',
     'convol', 'convol_fft', 'coord2to3', 'copy_lun', 'correlate',
     'cos', 'cosh', 'cpu', 'cramer', 'createboxplotdata',
     'create_cursor', 'create_struct', 'create_view', 'crossp', 'crvlength',
     'ct_luminance', 'cti_test', 'cursor', 'curvefit', 'cv_coord',
     'cvttobm', 'cw_animate', 'cw_animate_getp', 'cw_animate_load',
     'cw_animate_run', 'cw_arcball', 'cw_bgroup', 'cw_clr_index',
     'cw_colorsel', 'cw_defroi', 'cw_field', 'cw_filesel', 'cw_form',
     'cw_fslider', 'cw_light_editor', 'cw_light_editor_get',
     'cw_light_editor_set', 'cw_orient', 'cw_palette_editor',
     'cw_palette_editor_get', 'cw_palette_editor_set', 'cw_pdmenu',
     'cw_rgbslider', 'cw_tmpl', 'cw_zoom', 'db_exists',
     'dblarr', 'dcindgen', 'dcomplex', 'dcomplexarr', 'define_key',
     'define_msgblk', 'define_msgblk_from_file', 'defroi', 'defsysv',
     'delvar', 'dendro_plot', 'dendrogram', 'deriv', 'derivsig',
     'determ', 'device', 'dfpmin', 'diag_matrix', 'dialog_dbconnect',
     'dialog_message', 'dialog_pickfile', 'dialog_printersetup',
     'dialog_printjob', 'dialog_read_image',
     'dialog_write_image', 'dictionary', 'digital_filter', 'dilate', 'dindgen',
     'dissolve', 'dist', 'distance_measure', 'dlm_load', 'dlm_register',
     'doc_library', 'double', 'draw_roi', 'edge_dog', 'efont',
     'eigenql', 'eigenvec', 'ellipse', 'elmhes', 'emboss',
     'empty', 'enable_sysrtn', 'eof', 'eos', 'erase',
     'erf', 'erfc', 'erfcx', 'erode', 'errorplot',
     'errplot', 'estimator_filter', 'execute', 'exit', 'exp',
     'expand', 'expand_path', 'expint', 'extract', 'extract_slice',
     'f_cvf', 'f_pdf', 'factorial', 'fft', 'file_basename',
     'file_chmod', 'file_copy', 'file_delete', 'file_dirname',
     'file_expand_path', 'file_gunzip', 'file_gzip', 'file_info',
     'file_lines', 'file_link', 'file_mkdir', 'file_move',
     'file_poll_input', 'file_readlink', 'file_same',
     'file_search', 'file_tar', 'file_test', 'file_untar', 'file_unzip',
     'file_which', 'file_zip', 'filepath', 'findgen', 'finite',
     'fix', 'flick', 'float', 'floor', 'flow3',
     'fltarr', 'flush', 'format_axis_values', 'forward_function', 'free_lun',
     'fstat', 'fulstr', 'funct', 'function', 'fv_test',
     'fx_root', 'fz_roots', 'gamma', 'gamma_ct', 'gauss_cvf',
     'gauss_pdf', 'gauss_smooth', 'gauss2dfit', 'gaussfit',
     'gaussian_function', 'gaussint', 'get_drive_list', 'get_dxf_objects',
     'get_kbrd', 'get_login_info',
     'get_lun', 'get_screen_size', 'getenv', 'getwindows', 'greg2jul',
     'grib', 'grid_input', 'grid_tps', 'grid3', 'griddata',
     'gs_iter', 'h_eq_ct', 'h_eq_int', 'hanning', 'hash',
     'hdf', 'hdf5', 'heap_free', 'heap_gc', 'heap_nosave',
     'heap_refcount', 'heap_save', 'help', 'hilbert', 'hist_2d',
     'hist_equal', 'histogram', 'hls', 'hough', 'hqr',
     'hsv', 'i18n_multibytetoutf8',
     'i18n_multibytetowidechar', 'i18n_utf8tomultibyte',
     'i18n_widechartomultibyte',
     'ibeta', 'icontour', 'iconvertcoord', 'idelete', 'identity',
     'idl_base64', 'idl_container', 'idl_validname',
     'idlexbr_assistant', 'idlitsys_createtool',
     'idlunit', 'iellipse', 'igamma', 'igetcurrent', 'igetdata',
     'igetid', 'igetproperty', 'iimage', 'image', 'image_cont',
     'image_statistics', 'image_threshold', 'imaginary', 'imap', 'indgen',
     'int_2d', 'int_3d', 'int_tabulated', 'intarr', 'interpol',
     'interpolate', 'interval_volume', 'invert', 'ioctl', 'iopen',
     'ir_filter', 'iplot', 'ipolygon', 'ipolyline', 'iputdata',
     'iregister', 'ireset', 'iresolve', 'irotate', 'isa',
     'isave', 'iscale', 'isetcurrent', 'isetproperty', 'ishft',
     'isocontour', 'isosurface', 'isurface', 'itext', 'itranslate',
     'ivector', 'ivolume', 'izoom', 'journal', 'json_parse',
     'json_serialize', 'jul2greg', 'julday', 'keyword_set', 'krig2d',
     'kurtosis', 'kw_test', 'l64indgen', 'la_choldc', 'la_cholmprove',
     'la_cholsol', 'la_determ', 'la_eigenproblem', 'la_eigenql', 'la_eigenvec',
     'la_elmhes', 'la_gm_linear_model', 'la_hqr', 'la_invert',
     'la_least_square_equality', 'la_least_squares', 'la_linear_equation',
     'la_ludc', 'la_lumprove', 'la_lusol',
     'la_svd', 'la_tridc', 'la_trimprove', 'la_triql', 'la_trired',
     'la_trisol', 'label_date', 'label_region', 'ladfit', 'laguerre',
     'lambda', 'lambdap', 'lambertw', 'laplacian', 'least_squares_filter',
     'leefilt', 'legend', 'legendre', 'linbcg', 'lindgen',
     'linfit', 'linkimage', 'list', 'll_arc_distance', 'lmfit',
     'lmgr', 'lngamma', 'lnp_test', 'loadct', 'locale_get',
     'logical_and', 'logical_or', 'logical_true', 'lon64arr', 'lonarr',
     'long', 'long64', 'lsode', 'lu_complex', 'ludc',
     'lumprove', 'lusol', 'm_correlate', 'machar', 'make_array',
     'make_dll', 'make_rt', 'map', 'mapcontinents', 'mapgrid',
     'map_2points', 'map_continents', 'map_grid', 'map_image', 'map_patch',
     'map_proj_forward', 'map_proj_image', 'map_proj_info',
     'map_proj_init', 'map_proj_inverse',
     'map_set', 'matrix_multiply', 'matrix_power', 'max', 'md_test',
     'mean', 'meanabsdev', 'mean_filter', 'median', 'memory',
     'mesh_clip', 'mesh_decimate', 'mesh_issolid',
     'mesh_merge', 'mesh_numtriangles',
     'mesh_obj', 'mesh_smooth', 'mesh_surfacearea',
     'mesh_validate', 'mesh_volume',
     'message', 'min', 'min_curve_surf', 'mk_html_help', 'modifyct',
     'moment', 'morph_close', 'morph_distance',
     'morph_gradient', 'morph_hitormiss',
     'morph_open', 'morph_thin', 'morph_tophat', 'multi', 'n_elements',
     'n_params', 'n_tags', 'ncdf', 'newton', 'noise_hurl',
     'noise_pick', 'noise_scatter', 'noise_slur', 'norm', 'obj_class',
     'obj_destroy', 'obj_hasmethod', 'obj_isa', 'obj_new', 'obj_valid',
     'objarr', 'on_error', 'on_ioerror', 'online_help', 'openr',
     'openu', 'openw', 'oplot', 'oploterr', 'orderedhash',
     'p_correlate', 'parse_url', 'particle_trace', 'path_cache', 'path_sep',
     'pcomp', 'plot', 'plot3d', 'plot', 'plot_3dbox',
     'plot_field', 'ploterr', 'plots', 'polar_contour', 'polar_surface',
     'polyfill', 'polyshade', 'pnt_line', 'point_lun', 'polarplot',
     'poly', 'poly_2d', 'poly_area', 'poly_fit', 'polyfillv',
     'polygon', 'polyline', 'polywarp', 'popd', 'powell',
     'pref_commit', 'pref_get', 'pref_set', 'prewitt', 'primes',
     'print', 'printf', 'printd', 'pro', 'product',
     'profile', 'profiler', 'profiles', 'project_vol', 'ps_show_fonts',
     'psafm', 'pseudo', 'ptr_free', 'ptr_new', 'ptr_valid',
     'ptrarr', 'pushd', 'qgrid3', 'qhull', 'qromb',
     'qromo', 'qsimp', 'query_*', 'query_ascii', 'query_bmp',
     'query_csv', 'query_dicom', 'query_gif', 'query_image', 'query_jpeg',
     'query_jpeg2000', 'query_mrsid', 'query_pict', 'query_png', 'query_ppm',
     'query_srf', 'query_tiff', 'query_video', 'query_wav', 'r_correlate',
     'r_test', 'radon', 'randomn', 'randomu', 'ranks',
     'rdpix', 'read', 'readf', 'read_ascii', 'read_binary',
     'read_bmp', 'read_csv', 'read_dicom', 'read_gif', 'read_image',
     'read_interfile', 'read_jpeg', 'read_jpeg2000', 'read_mrsid', 'read_pict',
     'read_png', 'read_ppm', 'read_spr', 'read_srf', 'read_sylk',
     'read_tiff', 'read_video', 'read_wav', 'read_wave', 'read_x11_bitmap',
     'read_xwd', 'reads', 'readu', 'real_part', 'rebin',
     'recall_commands', 'recon3', 'reduce_colors', 'reform', 'region_grow',
     'register_cursor', 'regress', 'replicate',
     'replicate_inplace', 'resolve_all',
     'resolve_routine', 'restore', 'retall', 'return', 'reverse',
     'rk4', 'roberts', 'rot', 'rotate', 'round',
     'routine_filepath', 'routine_info', 'rs_test', 's_test', 'save',
     'savgol', 'scale3', 'scale3d', 'scatterplot', 'scatterplot3d',
     'scope_level', 'scope_traceback', 'scope_varfetch',
     'scope_varname', 'search2d',
     'search3d', 'sem_create', 'sem_delete', 'sem_lock', 'sem_release',
     'set_plot', 'set_shading', 'setenv', 'sfit', 'shade_surf',
     'shade_surf_irr', 'shade_volume', 'shift', 'shift_diff', 'shmdebug',
     'shmmap', 'shmunmap', 'shmvar', 'show3', 'showfont',
     'signum', 'simplex', 'sin', 'sindgen', 'sinh',
     'size', 'skewness', 'skip_lun', 'slicer3', 'slide_image',
     'smooth', 'sobel', 'socket', 'sort', 'spawn',
     'sph_4pnt', 'sph_scat', 'spher_harm', 'spl_init', 'spl_interp',
     'spline', 'spline_p', 'sprsab', 'sprsax', 'sprsin',
     'sprstp', 'sqrt', 'standardize', 'stddev', 'stop',
     'strarr', 'strcmp', 'strcompress', 'streamline', 'streamline',
     'stregex', 'stretch', 'string', 'strjoin', 'strlen',
     'strlowcase', 'strmatch', 'strmessage', 'strmid', 'strpos',
     'strput', 'strsplit', 'strtrim', 'struct_assign', 'struct_hide',
     'strupcase', 'surface', 'surface', 'surfr', 'svdc',
     'svdfit', 'svsol', 'swap_endian', 'swap_endian_inplace', 'symbol',
     'systime', 't_cvf', 't_pdf', 't3d', 'tag_names',
     'tan', 'tanh', 'tek_color', 'temporary', 'terminal_size',
     'tetra_clip', 'tetra_surface', 'tetra_volume', 'text', 'thin',
     'thread', 'threed', 'tic', 'time_test2', 'timegen',
     'timer', 'timestamp', 'timestamptovalues', 'tm_test', 'toc',
     'total', 'trace', 'transpose', 'tri_surf', 'triangulate',
     'trigrid', 'triql', 'trired', 'trisol', 'truncate_lun',
     'ts_coef', 'ts_diff', 'ts_fcast', 'ts_smooth', 'tv',
     'tvcrs', 'tvlct', 'tvrd', 'tvscl', 'typename',
     'uindgen', 'uint', 'uintarr', 'ul64indgen', 'ulindgen',
     'ulon64arr', 'ulonarr', 'ulong', 'ulong64', 'uniq',
     'unsharp_mask', 'usersym', 'value_locate', 'variance', 'vector',
     'vector_field', 'vel', 'velovect', 'vert_t3d', 'voigt',
     'volume', 'voronoi', 'voxel_proj', 'wait', 'warp_tri',
     'watershed', 'wdelete', 'wf_draw', 'where', 'widget_base',
     'widget_button', 'widget_combobox', 'widget_control',
     'widget_displaycontextmenu', 'widget_draw',
     'widget_droplist', 'widget_event', 'widget_info',
     'widget_label', 'widget_list',
     'widget_propertysheet', 'widget_slider', 'widget_tab',
     'widget_table', 'widget_text',
     'widget_tree', 'widget_tree_move', 'widget_window',
     'wiener_filter', 'window',
     'window', 'write_bmp', 'write_csv', 'write_gif', 'write_image',
     'write_jpeg', 'write_jpeg2000', 'write_nrif', 'write_pict', 'write_png',
     'write_ppm', 'write_spr', 'write_srf', 'write_sylk', 'write_tiff',
     'write_video', 'write_wav', 'write_wave', 'writeu', 'wset',
     'wshow', 'wtn', 'wv_applet', 'wv_cwt', 'wv_cw_wavelet',
     'wv_denoise', 'wv_dwt', 'wv_fn_coiflet',
     'wv_fn_daubechies', 'wv_fn_gaussian',
     'wv_fn_haar', 'wv_fn_morlet', 'wv_fn_paul',
     'wv_fn_symlet', 'wv_import_data',
     'wv_import_wavelet', 'wv_plot3d_wps', 'wv_plot_multires',
     'wv_pwt', 'wv_tool_denoise',
     'xbm_edit', 'xdisplayfile', 'xdxf', 'xfont', 'xinteranimate',
     'xloadct', 'xmanager', 'xmng_tmpl', 'xmtool', 'xobjview',
     'xobjview_rotate', 'xobjview_write_image',
     'xpalette', 'xpcolor', 'xplot3d',
     'xregistered', 'xroi', 'xsq_test', 'xsurface', 'xvaredit',
     'xvolume', 'xvolume_rotate', 'xvolume_write_image',
     'xyouts', 'zlib_compress', 'zlib_uncompress', 'zoom', 'zoom_24'
   ];
   var builtins$7 = wordRegexp$b(builtinArray$1);

   var keywordArray$2 = [
     'begin', 'end', 'endcase', 'endfor',
     'endwhile', 'endif', 'endrep', 'endforeach',
     'break', 'case', 'continue', 'for',
     'foreach', 'goto', 'if', 'then', 'else',
     'repeat', 'until', 'switch', 'while',
     'do', 'pro', 'function'
   ];
   var keywords$t = wordRegexp$b(keywordArray$2);

   var identifiers$7 = new RegExp('^[_a-z\xa1-\uffff][_a-z0-9\xa1-\uffff]*', 'i');

   var singleOperators$5 = /[+\-*&=<>\/@#~$]/;
   var boolOperators = new RegExp('(and|or|eq|lt|le|gt|ge|ne|not)', 'i');

   function tokenBase$x(stream) {
     // whitespaces
     if (stream.eatSpace()) return null;

     // Handle one line Comments
     if (stream.match(';')) {
       stream.skipToEnd();
       return 'comment';
     }

     // Handle Number Literals
     if (stream.match(/^[0-9\.+-]/, false)) {
       if (stream.match(/^[+-]?0x[0-9a-fA-F]+/))
         return 'number';
       if (stream.match(/^[+-]?\d*\.\d+([EeDd][+-]?\d+)?/))
         return 'number';
       if (stream.match(/^[+-]?\d+([EeDd][+-]?\d+)?/))
         return 'number';
     }

     // Handle Strings
     if (stream.match(/^"([^"]|(""))*"/)) { return 'string'; }
     if (stream.match(/^'([^']|(''))*'/)) { return 'string'; }

     // Handle words
     if (stream.match(keywords$t)) { return 'keyword'; }
     if (stream.match(builtins$7)) { return 'builtin'; }
     if (stream.match(identifiers$7)) { return 'variable'; }

     if (stream.match(singleOperators$5) || stream.match(boolOperators)) {
       return 'operator'; }

     // Handle non-detected items
     stream.next();
     return null;
   }
   const idl = {
     name: "idl",
     token: function(stream) {
       return tokenBase$x(stream);
     },
     languageData: {
       autocomplete: builtinArray$1.concat(keywordArray$2)
     }
   };

   var idl$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      idl: idl
   });

   function mkJavaScript(parserConfig) {
     var statementIndent = parserConfig.statementIndent;
     var jsonldMode = parserConfig.jsonld;
     var jsonMode = parserConfig.json || jsonldMode;
     var isTS = parserConfig.typescript;
     var wordRE = parserConfig.wordCharacters || /[\w$\xa1-\uffff]/;

     // Tokenizer

     var keywords = function(){
       function kw(type) {return {type: type, style: "keyword"};}
       var A = kw("keyword a"), B = kw("keyword b"), C = kw("keyword c"), D = kw("keyword d");
       var operator = kw("operator"), atom = {type: "atom", style: "atom"};

       return {
         "if": kw("if"), "while": A, "with": A, "else": B, "do": B, "try": B, "finally": B,
         "return": D, "break": D, "continue": D, "new": kw("new"), "delete": C, "void": C, "throw": C,
         "debugger": kw("debugger"), "var": kw("var"), "const": kw("var"), "let": kw("var"),
         "function": kw("function"), "catch": kw("catch"),
         "for": kw("for"), "switch": kw("switch"), "case": kw("case"), "default": kw("default"),
         "in": operator, "typeof": operator, "instanceof": operator,
         "true": atom, "false": atom, "null": atom, "undefined": atom, "NaN": atom, "Infinity": atom,
         "this": kw("this"), "class": kw("class"), "super": kw("atom"),
         "yield": C, "export": kw("export"), "import": kw("import"), "extends": C,
         "await": C
       };
     }();

     var isOperatorChar = /[+\-*&%=<>!?|~^@]/;
     var isJsonldKeyword = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)"/;

     function readRegexp(stream) {
       var escaped = false, next, inSet = false;
       while ((next = stream.next()) != null) {
         if (!escaped) {
           if (next == "/" && !inSet) return;
           if (next == "[") inSet = true;
           else if (inSet && next == "]") inSet = false;
         }
         escaped = !escaped && next == "\\";
       }
     }

     // Used as scratch variables to communicate multiple values without
     // consing up tons of objects.
     var type, content;
     function ret(tp, style, cont) {
       type = tp; content = cont;
       return style;
     }
     function tokenBase(stream, state) {
       var ch = stream.next();
       if (ch == '"' || ch == "'") {
         state.tokenize = tokenString(ch);
         return state.tokenize(stream, state);
       } else if (ch == "." && stream.match(/^\d[\d_]*(?:[eE][+\-]?[\d_]+)?/)) {
         return ret("number", "number");
       } else if (ch == "." && stream.match("..")) {
         return ret("spread", "meta");
       } else if (/[\[\]{}\(\),;\:\.]/.test(ch)) {
         return ret(ch);
       } else if (ch == "=" && stream.eat(">")) {
         return ret("=>", "operator");
       } else if (ch == "0" && stream.match(/^(?:x[\dA-Fa-f_]+|o[0-7_]+|b[01_]+)n?/)) {
         return ret("number", "number");
       } else if (/\d/.test(ch)) {
         stream.match(/^[\d_]*(?:n|(?:\.[\d_]*)?(?:[eE][+\-]?[\d_]+)?)?/);
         return ret("number", "number");
       } else if (ch == "/") {
         if (stream.eat("*")) {
           state.tokenize = tokenComment;
           return tokenComment(stream, state);
         } else if (stream.eat("/")) {
           stream.skipToEnd();
           return ret("comment", "comment");
         } else if (expressionAllowed(stream, state, 1)) {
           readRegexp(stream);
           stream.match(/^\b(([gimyus])(?![gimyus]*\2))+\b/);
           return ret("regexp", "string.special");
         } else {
           stream.eat("=");
           return ret("operator", "operator", stream.current());
         }
       } else if (ch == "`") {
         state.tokenize = tokenQuasi;
         return tokenQuasi(stream, state);
       } else if (ch == "#" && stream.peek() == "!") {
         stream.skipToEnd();
         return ret("meta", "meta");
       } else if (ch == "#" && stream.eatWhile(wordRE)) {
         return ret("variable", "property")
       } else if (ch == "<" && stream.match("!--") ||
                  (ch == "-" && stream.match("->") && !/\S/.test(stream.string.slice(0, stream.start)))) {
         stream.skipToEnd();
         return ret("comment", "comment")
       } else if (isOperatorChar.test(ch)) {
         if (ch != ">" || !state.lexical || state.lexical.type != ">") {
           if (stream.eat("=")) {
             if (ch == "!" || ch == "=") stream.eat("=");
           } else if (/[<>*+\-|&?]/.test(ch)) {
             stream.eat(ch);
             if (ch == ">") stream.eat(ch);
           }
         }
         if (ch == "?" && stream.eat(".")) return ret(".")
         return ret("operator", "operator", stream.current());
       } else if (wordRE.test(ch)) {
         stream.eatWhile(wordRE);
         var word = stream.current();
         if (state.lastType != ".") {
           if (keywords.propertyIsEnumerable(word)) {
             var kw = keywords[word];
             return ret(kw.type, kw.style, word)
           }
           if (word == "async" && stream.match(/^(\s|\/\*([^*]|\*(?!\/))*?\*\/)*[\[\(\w]/, false))
             return ret("async", "keyword", word)
         }
         return ret("variable", "variable", word)
       }
     }

     function tokenString(quote) {
       return function(stream, state) {
         var escaped = false, next;
         if (jsonldMode && stream.peek() == "@" && stream.match(isJsonldKeyword)){
           state.tokenize = tokenBase;
           return ret("jsonld-keyword", "meta");
         }
         while ((next = stream.next()) != null) {
           if (next == quote && !escaped) break;
           escaped = !escaped && next == "\\";
         }
         if (!escaped) state.tokenize = tokenBase;
         return ret("string", "string");
       };
     }

     function tokenComment(stream, state) {
       var maybeEnd = false, ch;
       while (ch = stream.next()) {
         if (ch == "/" && maybeEnd) {
           state.tokenize = tokenBase;
           break;
         }
         maybeEnd = (ch == "*");
       }
       return ret("comment", "comment");
     }

     function tokenQuasi(stream, state) {
       var escaped = false, next;
       while ((next = stream.next()) != null) {
         if (!escaped && (next == "`" || next == "$" && stream.eat("{"))) {
           state.tokenize = tokenBase;
           break;
         }
         escaped = !escaped && next == "\\";
       }
       return ret("quasi", "string.special", stream.current());
     }

     var brackets = "([{}])";
     // This is a crude lookahead trick to try and notice that we're
     // parsing the argument patterns for a fat-arrow function before we
     // actually hit the arrow token. It only works if the arrow is on
     // the same line as the arguments and there's no strange noise
     // (comments) in between. Fallback is to only notice when we hit the
     // arrow, and not declare the arguments as locals for the arrow
     // body.
     function findFatArrow(stream, state) {
       if (state.fatArrowAt) state.fatArrowAt = null;
       var arrow = stream.string.indexOf("=>", stream.start);
       if (arrow < 0) return;

       if (isTS) { // Try to skip TypeScript return type declarations after the arguments
         var m = /:\s*(?:\w+(?:<[^>]*>|\[\])?|\{[^}]*\})\s*$/.exec(stream.string.slice(stream.start, arrow));
         if (m) arrow = m.index;
       }

       var depth = 0, sawSomething = false;
       for (var pos = arrow - 1; pos >= 0; --pos) {
         var ch = stream.string.charAt(pos);
         var bracket = brackets.indexOf(ch);
         if (bracket >= 0 && bracket < 3) {
           if (!depth) { ++pos; break; }
           if (--depth == 0) { if (ch == "(") sawSomething = true; break; }
         } else if (bracket >= 3 && bracket < 6) {
           ++depth;
         } else if (wordRE.test(ch)) {
           sawSomething = true;
         } else if (/["'\/`]/.test(ch)) {
           for (;; --pos) {
             if (pos == 0) return
             var next = stream.string.charAt(pos - 1);
             if (next == ch && stream.string.charAt(pos - 2) != "\\") { pos--; break }
           }
         } else if (sawSomething && !depth) {
           ++pos;
           break;
         }
       }
       if (sawSomething && !depth) state.fatArrowAt = pos;
     }

     // Parser

     var atomicTypes = {"atom": true, "number": true, "variable": true, "string": true,
                        "regexp": true, "this": true, "import": true, "jsonld-keyword": true};

     function JSLexical(indented, column, type, align, prev, info) {
       this.indented = indented;
       this.column = column;
       this.type = type;
       this.prev = prev;
       this.info = info;
       if (align != null) this.align = align;
     }

     function inScope(state, varname) {
       for (var v = state.localVars; v; v = v.next)
         if (v.name == varname) return true;
       for (var cx = state.context; cx; cx = cx.prev) {
         for (var v = cx.vars; v; v = v.next)
           if (v.name == varname) return true;
       }
     }

     function parseJS(state, style, type, content, stream) {
       var cc = state.cc;
       // Communicate our context to the combinators.
       // (Less wasteful than consing up a hundred closures on every call.)
       cx.state = state; cx.stream = stream; cx.marked = null; cx.cc = cc; cx.style = style;

       if (!state.lexical.hasOwnProperty("align"))
         state.lexical.align = true;

       while(true) {
         var combinator = cc.length ? cc.pop() : jsonMode ? expression : statement;
         if (combinator(type, content)) {
           while(cc.length && cc[cc.length - 1].lex)
             cc.pop()();
           if (cx.marked) return cx.marked;
           if (type == "variable" && inScope(state, content)) return "variableName.local";
           return style;
         }
       }
     }

     // Combinator utils

     var cx = {state: null, column: null, marked: null, cc: null};
     function pass() {
       for (var i = arguments.length - 1; i >= 0; i--) cx.cc.push(arguments[i]);
     }
     function cont() {
       pass.apply(null, arguments);
       return true;
     }
     function inList(name, list) {
       for (var v = list; v; v = v.next) if (v.name == name) return true
       return false;
     }
     function register(varname) {
       var state = cx.state;
       cx.marked = "def";
       if (state.context) {
         if (state.lexical.info == "var" && state.context && state.context.block) {
           // FIXME function decls are also not block scoped
           var newContext = registerVarScoped(varname, state.context);
           if (newContext != null) {
             state.context = newContext;
             return
           }
         } else if (!inList(varname, state.localVars)) {
           state.localVars = new Var(varname, state.localVars);
           return
         }
       }
       // Fall through means this is global
       if (parserConfig.globalVars && !inList(varname, state.globalVars))
         state.globalVars = new Var(varname, state.globalVars);
     }
     function registerVarScoped(varname, context) {
       if (!context) {
         return null
       } else if (context.block) {
         var inner = registerVarScoped(varname, context.prev);
         if (!inner) return null
         if (inner == context.prev) return context
         return new Context(inner, context.vars, true)
       } else if (inList(varname, context.vars)) {
         return context
       } else {
         return new Context(context.prev, new Var(varname, context.vars), false)
       }
     }

     function isModifier(name) {
       return name == "public" || name == "private" || name == "protected" || name == "abstract" || name == "readonly"
     }

     // Combinators

     function Context(prev, vars, block) { this.prev = prev; this.vars = vars; this.block = block; }
     function Var(name, next) { this.name = name; this.next = next; }

     var defaultVars = new Var("this", new Var("arguments", null));
     function pushcontext() {
       cx.state.context = new Context(cx.state.context, cx.state.localVars, false);
       cx.state.localVars = defaultVars;
     }
     function pushblockcontext() {
       cx.state.context = new Context(cx.state.context, cx.state.localVars, true);
       cx.state.localVars = null;
     }
     pushcontext.lex = pushblockcontext.lex = true;
     function popcontext() {
       cx.state.localVars = cx.state.context.vars;
       cx.state.context = cx.state.context.prev;
     }
     popcontext.lex = true;
     function pushlex(type, info) {
       var result = function() {
         var state = cx.state, indent = state.indented;
         if (state.lexical.type == "stat") indent = state.lexical.indented;
         else for (var outer = state.lexical; outer && outer.type == ")" && outer.align; outer = outer.prev)
           indent = outer.indented;
         state.lexical = new JSLexical(indent, cx.stream.column(), type, null, state.lexical, info);
       };
       result.lex = true;
       return result;
     }
     function poplex() {
       var state = cx.state;
       if (state.lexical.prev) {
         if (state.lexical.type == ")")
           state.indented = state.lexical.indented;
         state.lexical = state.lexical.prev;
       }
     }
     poplex.lex = true;

     function expect(wanted) {
       function exp(type) {
         if (type == wanted) return cont();
         else if (wanted == ";" || type == "}" || type == ")" || type == "]") return pass();
         else return cont(exp);
       }    return exp;
     }

     function statement(type, value) {
       if (type == "var") return cont(pushlex("vardef", value), vardef, expect(";"), poplex);
       if (type == "keyword a") return cont(pushlex("form"), parenExpr, statement, poplex);
       if (type == "keyword b") return cont(pushlex("form"), statement, poplex);
       if (type == "keyword d") return cx.stream.match(/^\s*$/, false) ? cont() : cont(pushlex("stat"), maybeexpression, expect(";"), poplex);
       if (type == "debugger") return cont(expect(";"));
       if (type == "{") return cont(pushlex("}"), pushblockcontext, block, poplex, popcontext);
       if (type == ";") return cont();
       if (type == "if") {
         if (cx.state.lexical.info == "else" && cx.state.cc[cx.state.cc.length - 1] == poplex)
           cx.state.cc.pop()();
         return cont(pushlex("form"), parenExpr, statement, poplex, maybeelse);
       }
       if (type == "function") return cont(functiondef);
       if (type == "for") return cont(pushlex("form"), pushblockcontext, forspec, statement, popcontext, poplex);
       if (type == "class" || (isTS && value == "interface")) {
         cx.marked = "keyword";
         return cont(pushlex("form", type == "class" ? type : value), className, poplex)
       }
       if (type == "variable") {
         if (isTS && value == "declare") {
           cx.marked = "keyword";
           return cont(statement)
         } else if (isTS && (value == "module" || value == "enum" || value == "type") && cx.stream.match(/^\s*\w/, false)) {
           cx.marked = "keyword";
           if (value == "enum") return cont(enumdef);
           else if (value == "type") return cont(typename, expect("operator"), typeexpr, expect(";"));
           else return cont(pushlex("form"), pattern, expect("{"), pushlex("}"), block, poplex, poplex)
         } else if (isTS && value == "namespace") {
           cx.marked = "keyword";
           return cont(pushlex("form"), expression, statement, poplex)
         } else if (isTS && value == "abstract") {
           cx.marked = "keyword";
           return cont(statement)
         } else {
           return cont(pushlex("stat"), maybelabel);
         }
       }
       if (type == "switch") return cont(pushlex("form"), parenExpr, expect("{"), pushlex("}", "switch"), pushblockcontext,
                                         block, poplex, poplex, popcontext);
       if (type == "case") return cont(expression, expect(":"));
       if (type == "default") return cont(expect(":"));
       if (type == "catch") return cont(pushlex("form"), pushcontext, maybeCatchBinding, statement, poplex, popcontext);
       if (type == "export") return cont(pushlex("stat"), afterExport, poplex);
       if (type == "import") return cont(pushlex("stat"), afterImport, poplex);
       if (type == "async") return cont(statement)
       if (value == "@") return cont(expression, statement)
       return pass(pushlex("stat"), expression, expect(";"), poplex);
     }
     function maybeCatchBinding(type) {
       if (type == "(") return cont(funarg, expect(")"))
     }
     function expression(type, value) {
       return expressionInner(type, value, false);
     }
     function expressionNoComma(type, value) {
       return expressionInner(type, value, true);
     }
     function parenExpr(type) {
       if (type != "(") return pass()
       return cont(pushlex(")"), maybeexpression, expect(")"), poplex)
     }
     function expressionInner(type, value, noComma) {
       if (cx.state.fatArrowAt == cx.stream.start) {
         var body = noComma ? arrowBodyNoComma : arrowBody;
         if (type == "(") return cont(pushcontext, pushlex(")"), commasep(funarg, ")"), poplex, expect("=>"), body, popcontext);
         else if (type == "variable") return pass(pushcontext, pattern, expect("=>"), body, popcontext);
       }

       var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma;
       if (atomicTypes.hasOwnProperty(type)) return cont(maybeop);
       if (type == "function") return cont(functiondef, maybeop);
       if (type == "class" || (isTS && value == "interface")) { cx.marked = "keyword"; return cont(pushlex("form"), classExpression, poplex); }
       if (type == "keyword c" || type == "async") return cont(noComma ? expressionNoComma : expression);
       if (type == "(") return cont(pushlex(")"), maybeexpression, expect(")"), poplex, maybeop);
       if (type == "operator" || type == "spread") return cont(noComma ? expressionNoComma : expression);
       if (type == "[") return cont(pushlex("]"), arrayLiteral, poplex, maybeop);
       if (type == "{") return contCommasep(objprop, "}", null, maybeop);
       if (type == "quasi") return pass(quasi, maybeop);
       if (type == "new") return cont(maybeTarget(noComma));
       return cont();
     }
     function maybeexpression(type) {
       if (type.match(/[;\}\)\],]/)) return pass();
       return pass(expression);
     }

     function maybeoperatorComma(type, value) {
       if (type == ",") return cont(maybeexpression);
       return maybeoperatorNoComma(type, value, false);
     }
     function maybeoperatorNoComma(type, value, noComma) {
       var me = noComma == false ? maybeoperatorComma : maybeoperatorNoComma;
       var expr = noComma == false ? expression : expressionNoComma;
       if (type == "=>") return cont(pushcontext, noComma ? arrowBodyNoComma : arrowBody, popcontext);
       if (type == "operator") {
         if (/\+\+|--/.test(value) || isTS && value == "!") return cont(me);
         if (isTS && value == "<" && cx.stream.match(/^([^<>]|<[^<>]*>)*>\s*\(/, false))
           return cont(pushlex(">"), commasep(typeexpr, ">"), poplex, me);
         if (value == "?") return cont(expression, expect(":"), expr);
         return cont(expr);
       }
       if (type == "quasi") { return pass(quasi, me); }
       if (type == ";") return;
       if (type == "(") return contCommasep(expressionNoComma, ")", "call", me);
       if (type == ".") return cont(property, me);
       if (type == "[") return cont(pushlex("]"), maybeexpression, expect("]"), poplex, me);
       if (isTS && value == "as") { cx.marked = "keyword"; return cont(typeexpr, me) }
       if (type == "regexp") {
         cx.state.lastType = cx.marked = "operator";
         cx.stream.backUp(cx.stream.pos - cx.stream.start - 1);
         return cont(expr)
       }
     }
     function quasi(type, value) {
       if (type != "quasi") return pass();
       if (value.slice(value.length - 2) != "${") return cont(quasi);
       return cont(maybeexpression, continueQuasi);
     }
     function continueQuasi(type) {
       if (type == "}") {
         cx.marked = "string.special";
         cx.state.tokenize = tokenQuasi;
         return cont(quasi);
       }
     }
     function arrowBody(type) {
       findFatArrow(cx.stream, cx.state);
       return pass(type == "{" ? statement : expression);
     }
     function arrowBodyNoComma(type) {
       findFatArrow(cx.stream, cx.state);
       return pass(type == "{" ? statement : expressionNoComma);
     }
     function maybeTarget(noComma) {
       return function(type) {
         if (type == ".") return cont(noComma ? targetNoComma : target);
         else if (type == "variable" && isTS) return cont(maybeTypeArgs, noComma ? maybeoperatorNoComma : maybeoperatorComma)
         else return pass(noComma ? expressionNoComma : expression);
       };
     }
     function target(_, value) {
       if (value == "target") { cx.marked = "keyword"; return cont(maybeoperatorComma); }
     }
     function targetNoComma(_, value) {
       if (value == "target") { cx.marked = "keyword"; return cont(maybeoperatorNoComma); }
     }
     function maybelabel(type) {
       if (type == ":") return cont(poplex, statement);
       return pass(maybeoperatorComma, expect(";"), poplex);
     }
     function property(type) {
       if (type == "variable") {cx.marked = "property"; return cont();}
     }
     function objprop(type, value) {
       if (type == "async") {
         cx.marked = "property";
         return cont(objprop);
       } else if (type == "variable" || cx.style == "keyword") {
         cx.marked = "property";
         if (value == "get" || value == "set") return cont(getterSetter);
         var m; // Work around fat-arrow-detection complication for detecting typescript typed arrow params
         if (isTS && cx.state.fatArrowAt == cx.stream.start && (m = cx.stream.match(/^\s*:\s*/, false)))
           cx.state.fatArrowAt = cx.stream.pos + m[0].length;
         return cont(afterprop);
       } else if (type == "number" || type == "string") {
         cx.marked = jsonldMode ? "property" : (cx.style + " property");
         return cont(afterprop);
       } else if (type == "jsonld-keyword") {
         return cont(afterprop);
       } else if (isTS && isModifier(value)) {
         cx.marked = "keyword";
         return cont(objprop)
       } else if (type == "[") {
         return cont(expression, maybetype, expect("]"), afterprop);
       } else if (type == "spread") {
         return cont(expressionNoComma, afterprop);
       } else if (value == "*") {
         cx.marked = "keyword";
         return cont(objprop);
       } else if (type == ":") {
         return pass(afterprop)
       }
     }
     function getterSetter(type) {
       if (type != "variable") return pass(afterprop);
       cx.marked = "property";
       return cont(functiondef);
     }
     function afterprop(type) {
       if (type == ":") return cont(expressionNoComma);
       if (type == "(") return pass(functiondef);
     }
     function commasep(what, end, sep) {
       function proceed(type, value) {
         if (sep ? sep.indexOf(type) > -1 : type == ",") {
           var lex = cx.state.lexical;
           if (lex.info == "call") lex.pos = (lex.pos || 0) + 1;
           return cont(function(type, value) {
             if (type == end || value == end) return pass()
             return pass(what)
           }, proceed);
         }
         if (type == end || value == end) return cont();
         if (sep && sep.indexOf(";") > -1) return pass(what)
         return cont(expect(end));
       }
       return function(type, value) {
         if (type == end || value == end) return cont();
         return pass(what, proceed);
       };
     }
     function contCommasep(what, end, info) {
       for (var i = 3; i < arguments.length; i++)
         cx.cc.push(arguments[i]);
       return cont(pushlex(end, info), commasep(what, end), poplex);
     }
     function block(type) {
       if (type == "}") return cont();
       return pass(statement, block);
     }
     function maybetype(type, value) {
       if (isTS) {
         if (type == ":") return cont(typeexpr);
         if (value == "?") return cont(maybetype);
       }
     }
     function maybetypeOrIn(type, value) {
       if (isTS && (type == ":" || value == "in")) return cont(typeexpr)
     }
     function mayberettype(type) {
       if (isTS && type == ":") {
         if (cx.stream.match(/^\s*\w+\s+is\b/, false)) return cont(expression, isKW, typeexpr)
         else return cont(typeexpr)
       }
     }
     function isKW(_, value) {
       if (value == "is") {
         cx.marked = "keyword";
         return cont()
       }
     }
     function typeexpr(type, value) {
       if (value == "keyof" || value == "typeof" || value == "infer" || value == "readonly") {
         cx.marked = "keyword";
         return cont(value == "typeof" ? expressionNoComma : typeexpr)
       }
       if (type == "variable" || value == "void") {
         cx.marked = "type";
         return cont(afterType)
       }
       if (value == "|" || value == "&") return cont(typeexpr)
       if (type == "string" || type == "number" || type == "atom") return cont(afterType);
       if (type == "[") return cont(pushlex("]"), commasep(typeexpr, "]", ","), poplex, afterType)
       if (type == "{") return cont(pushlex("}"), typeprops, poplex, afterType)
       if (type == "(") return cont(commasep(typearg, ")"), maybeReturnType, afterType)
       if (type == "<") return cont(commasep(typeexpr, ">"), typeexpr)
       if (type == "quasi") return pass(quasiType, afterType)
     }
     function maybeReturnType(type) {
       if (type == "=>") return cont(typeexpr)
     }
     function typeprops(type) {
       if (type.match(/[\}\)\]]/)) return cont()
       if (type == "," || type == ";") return cont(typeprops)
       return pass(typeprop, typeprops)
     }
     function typeprop(type, value) {
       if (type == "variable" || cx.style == "keyword") {
         cx.marked = "property";
         return cont(typeprop)
       } else if (value == "?" || type == "number" || type == "string") {
         return cont(typeprop)
       } else if (type == ":") {
         return cont(typeexpr)
       } else if (type == "[") {
         return cont(expect("variable"), maybetypeOrIn, expect("]"), typeprop)
       } else if (type == "(") {
         return pass(functiondecl, typeprop)
       } else if (!type.match(/[;\}\)\],]/)) {
         return cont()
       }
     }
     function quasiType(type, value) {
       if (type != "quasi") return pass();
       if (value.slice(value.length - 2) != "${") return cont(quasiType);
       return cont(typeexpr, continueQuasiType);
     }
     function continueQuasiType(type) {
      if (type == "}") {
         cx.marked = "string-2";
         cx.state.tokenize = tokenQuasi;
         return cont(quasiType);
       }
     }
     function typearg(type, value) {
       if (type == "variable" && cx.stream.match(/^\s*[?:]/, false) || value == "?") return cont(typearg)
       if (type == ":") return cont(typeexpr)
       if (type == "spread") return cont(typearg)
       return pass(typeexpr)
     }
     function afterType(type, value) {
       if (value == "<") return cont(pushlex(">"), commasep(typeexpr, ">"), poplex, afterType)
       if (value == "|" || type == "." || value == "&") return cont(typeexpr)
       if (type == "[") return cont(typeexpr, expect("]"), afterType)
       if (value == "extends" || value == "implements") { cx.marked = "keyword"; return cont(typeexpr) }
       if (value == "?") return cont(typeexpr, expect(":"), typeexpr)
     }
     function maybeTypeArgs(_, value) {
       if (value == "<") return cont(pushlex(">"), commasep(typeexpr, ">"), poplex, afterType)
     }
     function typeparam() {
       return pass(typeexpr, maybeTypeDefault)
     }
     function maybeTypeDefault(_, value) {
       if (value == "=") return cont(typeexpr)
     }
     function vardef(_, value) {
       if (value == "enum") {cx.marked = "keyword"; return cont(enumdef)}
       return pass(pattern, maybetype, maybeAssign, vardefCont);
     }
     function pattern(type, value) {
       if (isTS && isModifier(value)) { cx.marked = "keyword"; return cont(pattern) }
       if (type == "variable") { register(value); return cont(); }
       if (type == "spread") return cont(pattern);
       if (type == "[") return contCommasep(eltpattern, "]");
       if (type == "{") return contCommasep(proppattern, "}");
     }
     function proppattern(type, value) {
       if (type == "variable" && !cx.stream.match(/^\s*:/, false)) {
         register(value);
         return cont(maybeAssign);
       }
       if (type == "variable") cx.marked = "property";
       if (type == "spread") return cont(pattern);
       if (type == "}") return pass();
       if (type == "[") return cont(expression, expect(']'), expect(':'), proppattern);
       return cont(expect(":"), pattern, maybeAssign);
     }
     function eltpattern() {
       return pass(pattern, maybeAssign)
     }
     function maybeAssign(_type, value) {
       if (value == "=") return cont(expressionNoComma);
     }
     function vardefCont(type) {
       if (type == ",") return cont(vardef);
     }
     function maybeelse(type, value) {
       if (type == "keyword b" && value == "else") return cont(pushlex("form", "else"), statement, poplex);
     }
     function forspec(type, value) {
       if (value == "await") return cont(forspec);
       if (type == "(") return cont(pushlex(")"), forspec1, poplex);
     }
     function forspec1(type) {
       if (type == "var") return cont(vardef, forspec2);
       if (type == "variable") return cont(forspec2);
       return pass(forspec2)
     }
     function forspec2(type, value) {
       if (type == ")") return cont()
       if (type == ";") return cont(forspec2)
       if (value == "in" || value == "of") { cx.marked = "keyword"; return cont(expression, forspec2) }
       return pass(expression, forspec2)
     }
     function functiondef(type, value) {
       if (value == "*") {cx.marked = "keyword"; return cont(functiondef);}
       if (type == "variable") {register(value); return cont(functiondef);}
       if (type == "(") return cont(pushcontext, pushlex(")"), commasep(funarg, ")"), poplex, mayberettype, statement, popcontext);
       if (isTS && value == "<") return cont(pushlex(">"), commasep(typeparam, ">"), poplex, functiondef)
     }
     function functiondecl(type, value) {
       if (value == "*") {cx.marked = "keyword"; return cont(functiondecl);}
       if (type == "variable") {register(value); return cont(functiondecl);}
       if (type == "(") return cont(pushcontext, pushlex(")"), commasep(funarg, ")"), poplex, mayberettype, popcontext);
       if (isTS && value == "<") return cont(pushlex(">"), commasep(typeparam, ">"), poplex, functiondecl)
     }
     function typename(type, value) {
       if (type == "keyword" || type == "variable") {
         cx.marked = "type";
         return cont(typename)
       } else if (value == "<") {
         return cont(pushlex(">"), commasep(typeparam, ">"), poplex)
       }
     }
     function funarg(type, value) {
       if (value == "@") cont(expression, funarg);
       if (type == "spread") return cont(funarg);
       if (isTS && isModifier(value)) { cx.marked = "keyword"; return cont(funarg); }
       if (isTS && type == "this") return cont(maybetype, maybeAssign)
       return pass(pattern, maybetype, maybeAssign);
     }
     function classExpression(type, value) {
       // Class expressions may have an optional name.
       if (type == "variable") return className(type, value);
       return classNameAfter(type, value);
     }
     function className(type, value) {
       if (type == "variable") {register(value); return cont(classNameAfter);}
     }
     function classNameAfter(type, value) {
       if (value == "<") return cont(pushlex(">"), commasep(typeparam, ">"), poplex, classNameAfter)
       if (value == "extends" || value == "implements" || (isTS && type == ",")) {
         if (value == "implements") cx.marked = "keyword";
         return cont(isTS ? typeexpr : expression, classNameAfter);
       }
       if (type == "{") return cont(pushlex("}"), classBody, poplex);
     }
     function classBody(type, value) {
       if (type == "async" ||
           (type == "variable" &&
            (value == "static" || value == "get" || value == "set" || (isTS && isModifier(value))) &&
            cx.stream.match(/^\s+#?[\w$\xa1-\uffff]/, false))) {
         cx.marked = "keyword";
         return cont(classBody);
       }
       if (type == "variable" || cx.style == "keyword") {
         cx.marked = "property";
         return cont(classfield, classBody);
       }
       if (type == "number" || type == "string") return cont(classfield, classBody);
       if (type == "[")
         return cont(expression, maybetype, expect("]"), classfield, classBody)
       if (value == "*") {
         cx.marked = "keyword";
         return cont(classBody);
       }
       if (isTS && type == "(") return pass(functiondecl, classBody)
       if (type == ";" || type == ",") return cont(classBody);
       if (type == "}") return cont();
       if (value == "@") return cont(expression, classBody)
     }
     function classfield(type, value) {
       if (value == "!" || value == "?") return cont(classfield)
       if (type == ":") return cont(typeexpr, maybeAssign)
       if (value == "=") return cont(expressionNoComma)
       var context = cx.state.lexical.prev, isInterface = context && context.info == "interface";
       return pass(isInterface ? functiondecl : functiondef)
     }
     function afterExport(type, value) {
       if (value == "*") { cx.marked = "keyword"; return cont(maybeFrom, expect(";")); }
       if (value == "default") { cx.marked = "keyword"; return cont(expression, expect(";")); }
       if (type == "{") return cont(commasep(exportField, "}"), maybeFrom, expect(";"));
       return pass(statement);
     }
     function exportField(type, value) {
       if (value == "as") { cx.marked = "keyword"; return cont(expect("variable")); }
       if (type == "variable") return pass(expressionNoComma, exportField);
     }
     function afterImport(type) {
       if (type == "string") return cont();
       if (type == "(") return pass(expression);
       if (type == ".") return pass(maybeoperatorComma);
       return pass(importSpec, maybeMoreImports, maybeFrom);
     }
     function importSpec(type, value) {
       if (type == "{") return contCommasep(importSpec, "}");
       if (type == "variable") register(value);
       if (value == "*") cx.marked = "keyword";
       return cont(maybeAs);
     }
     function maybeMoreImports(type) {
       if (type == ",") return cont(importSpec, maybeMoreImports)
     }
     function maybeAs(_type, value) {
       if (value == "as") { cx.marked = "keyword"; return cont(importSpec); }
     }
     function maybeFrom(_type, value) {
       if (value == "from") { cx.marked = "keyword"; return cont(expression); }
     }
     function arrayLiteral(type) {
       if (type == "]") return cont();
       return pass(commasep(expressionNoComma, "]"));
     }
     function enumdef() {
       return pass(pushlex("form"), pattern, expect("{"), pushlex("}"), commasep(enummember, "}"), poplex, poplex)
     }
     function enummember() {
       return pass(pattern, maybeAssign);
     }

     function isContinuedStatement(state, textAfter) {
       return state.lastType == "operator" || state.lastType == "," ||
         isOperatorChar.test(textAfter.charAt(0)) ||
         /[,.]/.test(textAfter.charAt(0));
     }

     function expressionAllowed(stream, state, backUp) {
       return state.tokenize == tokenBase &&
         /^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\[{}\(,;:]|=>)$/.test(state.lastType) ||
         (state.lastType == "quasi" && /\{\s*$/.test(stream.string.slice(0, stream.pos - (backUp || 0))))
     }

     // Interface

     return {
       name: parserConfig.name,

       startState: function(indentUnit) {
         var state = {
           tokenize: tokenBase,
           lastType: "sof",
           cc: [],
           lexical: new JSLexical(-indentUnit, 0, "block", false),
           localVars: parserConfig.localVars,
           context: parserConfig.localVars && new Context(null, null, false),
           indented: 0
         };
         if (parserConfig.globalVars && typeof parserConfig.globalVars == "object")
           state.globalVars = parserConfig.globalVars;
         return state;
       },

       token: function(stream, state) {
         if (stream.sol()) {
           if (!state.lexical.hasOwnProperty("align"))
             state.lexical.align = false;
           state.indented = stream.indentation();
           findFatArrow(stream, state);
         }
         if (state.tokenize != tokenComment && stream.eatSpace()) return null;
         var style = state.tokenize(stream, state);
         if (type == "comment") return style;
         state.lastType = type == "operator" && (content == "++" || content == "--") ? "incdec" : type;
         return parseJS(state, style, type, content, stream);
       },

       indent: function(state, textAfter, cx) {
         if (state.tokenize == tokenComment || state.tokenize == tokenQuasi) return null;
         if (state.tokenize != tokenBase) return 0;
         var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical, top;
         // Kludge to prevent 'maybelse' from blocking lexical scope pops
         if (!/^\s*else\b/.test(textAfter)) for (var i = state.cc.length - 1; i >= 0; --i) {
           var c = state.cc[i];
           if (c == poplex) lexical = lexical.prev;
           else if (c != maybeelse && c != popcontext) break;
         }
         while ((lexical.type == "stat" || lexical.type == "form") &&
                (firstChar == "}" || ((top = state.cc[state.cc.length - 1]) &&
                                      (top == maybeoperatorComma || top == maybeoperatorNoComma) &&
                                      !/^[,\.=+\-*:?[\(]/.test(textAfter))))
           lexical = lexical.prev;
         if (statementIndent && lexical.type == ")" && lexical.prev.type == "stat")
           lexical = lexical.prev;
         var type = lexical.type, closing = firstChar == type;

         if (type == "vardef") return lexical.indented + (state.lastType == "operator" || state.lastType == "," ? lexical.info.length + 1 : 0);
         else if (type == "form" && firstChar == "{") return lexical.indented;
         else if (type == "form") return lexical.indented + cx.unit;
         else if (type == "stat")
           return lexical.indented + (isContinuedStatement(state, textAfter) ? statementIndent || cx.unit : 0);
         else if (lexical.info == "switch" && !closing && parserConfig.doubleIndentSwitch != false)
           return lexical.indented + (/^(?:case|default)\b/.test(textAfter) ? cx.unit : 2 * cx.unit);
         else if (lexical.align) return lexical.column + (closing ? 0 : 1);
         else return lexical.indented + (closing ? 0 : cx.unit);
       },

       languageData: {
         indentOnInput: /^\s*(?:case .*?:|default:|\{|\})$/,
         commentTokens: jsonMode ? undefined : {line: "//", block: {open: "/*", close: "*/"}},
         closeBrackets: {brackets: ["(", "[", "{", "'", '"', "`"]},
         wordChars: "$"
       }
     };
   }
   const javascript = mkJavaScript({name: "javascript"});
   const json = mkJavaScript({name: "json", json: true});
   const jsonld = mkJavaScript({name: "json", jsonld: true});
   const typescript = mkJavaScript({name: "typescript", typescript: true});

   var javascript$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      javascript: javascript,
      json: json,
      jsonld: jsonld,
      typescript: typescript
   });

   var keywords$s = ["and", "as", "block", "endblock", "by", "cycle", "debug", "else", "elif",
                   "extends", "filter", "endfilter", "firstof", "do", "for",
                   "endfor", "if", "endif", "ifchanged", "endifchanged",
                   "ifequal", "endifequal", "ifnotequal", "set", "raw", "endraw",
                   "endifnotequal", "in", "include", "load", "not", "now", "or",
                   "parsed", "regroup", "reversed", "spaceless", "call", "endcall", "macro",
                   "endmacro", "endspaceless", "ssi", "templatetag", "openblock",
                   "closeblock", "openvariable", "closevariable", "without", "context",
                   "openbrace", "closebrace", "opencomment",
                   "closecomment", "widthratio", "url", "with", "endwith",
                   "get_current_language", "trans", "endtrans", "noop", "blocktrans",
                   "endblocktrans", "get_available_languages",
                   "get_current_language_bidi", "pluralize", "autoescape", "endautoescape"],
       operator = /^[+\-*&%=<>!?|~^]/,
       sign = /^[:\[\(\{]/,
       atom = ["true", "false"],
       number = /^(\d[+\-\*\/])?\d+(\.\d+)?/;

   keywords$s = new RegExp("((" + keywords$s.join(")|(") + "))\\b");
   atom = new RegExp("((" + atom.join(")|(") + "))\\b");

   function tokenBase$w (stream, state) {
     var ch = stream.peek();

     //Comment
     if (state.incomment) {
       if(!stream.skipTo("#}")) {
         stream.skipToEnd();
       } else {
         stream.eatWhile(/\#|}/);
         state.incomment = false;
       }
       return "comment";
       //Tag
     } else if (state.intag) {
       //After operator
       if(state.operator) {
         state.operator = false;
         if(stream.match(atom)) {
           return "atom";
         }
         if(stream.match(number)) {
           return "number";
         }
       }
       //After sign
       if(state.sign) {
         state.sign = false;
         if(stream.match(atom)) {
           return "atom";
         }
         if(stream.match(number)) {
           return "number";
         }
       }

       if(state.instring) {
         if(ch == state.instring) {
           state.instring = false;
         }
         stream.next();
         return "string";
       } else if(ch == "'" || ch == '"') {
         state.instring = ch;
         stream.next();
         return "string";
       } else if (state.inbraces > 0 && ch ==")") {
         stream.next();
         state.inbraces--;
       }
       else if (ch == "(") {
         stream.next();
         state.inbraces++;
       }
       else if (state.inbrackets > 0 && ch =="]") {
         stream.next();
         state.inbrackets--;
       }
       else if (ch == "[") {
         stream.next();
         state.inbrackets++;
       } else if (!state.lineTag && (stream.match(state.intag + "}") || stream.eat("-") && stream.match(state.intag + "}"))) {
         state.intag = false;
         return "tag";
       } else if(stream.match(operator)) {
         state.operator = true;
         return "operator";
       } else if(stream.match(sign)) {
         state.sign = true;
       } else {
         if (stream.column() == 1 && state.lineTag && stream.match(keywords$s)) {
           //allow nospace after tag before the keyword
           return "keyword";
         }
         if(stream.eat(" ") || stream.sol()) {
           if(stream.match(keywords$s)) {
             return "keyword";
           }
           if(stream.match(atom)) {
             return "atom";
           }
           if(stream.match(number)) {
             return "number";
           }
           if(stream.sol()) {
             stream.next();
           }
         } else {
           stream.next();
         }

       }
       return "variable";
     } else if (stream.eat("{")) {
       if (stream.eat("#")) {
         state.incomment = true;
         if(!stream.skipTo("#}")) {
           stream.skipToEnd();
         } else {
           stream.eatWhile(/\#|}/);
           state.incomment = false;
         }
         return "comment";
         //Open tag
       } else if (ch = stream.eat(/\{|%/)) {
         //Cache close tag
         state.intag = ch;
         state.inbraces = 0;
         state.inbrackets = 0;
         if(ch == "{") {
           state.intag = "}";
         }
         stream.eat("-");
         return "tag";
       }
       //Line statements
     } else if (stream.eat('#')) {
       if (stream.peek() == '#') {
         stream.skipToEnd();
         return "comment"
       }
       else if (!stream.eol()) {
         state.intag = true;
         state.lineTag = true;
         state.inbraces = 0;
         state.inbrackets = 0;
         return "tag";
       }
     }
     stream.next();
   }
   const jinja2 = {
     name: "jinja2",
     startState: function () {
       return {tokenize: tokenBase$w, inbrackets: 0, inbraces: 0};
     },
     token: function(stream, state) {
       var style = state.tokenize(stream, state);
       if (stream.eol() && state.lineTag && !state.instring && state.inbraces == 0 && state.inbrackets == 0) {
         //Close line statement at the EOL
         state.intag = false;
         state.lineTag = false;
       }
       return style;
     },
     languageData: {
       commentTokens: {block: {open: "{#", close: "#}", line: "##"}}
     }
   };

   var jinja2$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      jinja2: jinja2
   });

   function wordRegexp$a(words, end, pre) {
     if (typeof pre === "undefined") pre = "";
     if (typeof end === "undefined") { end = "\\b"; }
     return new RegExp("^" + pre + "((" + words.join(")|(") + "))" + end);
   }

   var octChar = "\\\\[0-7]{1,3}";
   var hexChar = "\\\\x[A-Fa-f0-9]{1,2}";
   var sChar = "\\\\[abefnrtv0%?'\"\\\\]";
   var uChar = "([^\\u0027\\u005C\\uD800-\\uDFFF]|[\\uD800-\\uDFFF][\\uDC00-\\uDFFF])";

   var asciiOperatorsList = [
     "[<>]:", "[<>=]=", "<<=?", ">>>?=?", "=>", "--?>", "<--[->]?", "\\/\\/",
     "\\.{2,3}", "[\\.\\\\%*+\\-<>!\\/^|&]=?", "\\?", "\\$", "~", ":"
   ];
   var operators$3 = wordRegexp$a([
     "[<>]:", "[<>=]=", "[!=]==", "<<=?", ">>>?=?", "=>?", "--?>", "<--[->]?", "\\/\\/",
     "[\\\\%*+\\-<>!\\/^|&\\u00F7\\u22BB]=?", "\\?", "\\$", "~", ":",
     "\\u00D7", "\\u2208", "\\u2209", "\\u220B", "\\u220C", "\\u2218",
     "\\u221A", "\\u221B", "\\u2229", "\\u222A", "\\u2260", "\\u2264",
     "\\u2265", "\\u2286", "\\u2288", "\\u228A", "\\u22C5",
     "\\b(in|isa)\\b(?!\.?\\()"
   ], "");
   var delimiters = /^[;,()[\]{}]/;
   var identifiers$6 = /^[_A-Za-z\u00A1-\u2217\u2219-\uFFFF][\w\u00A1-\u2217\u2219-\uFFFF]*!*/;

   var chars = wordRegexp$a([octChar, hexChar, sChar, uChar], "'");

   var openersList = ["begin", "function", "type", "struct", "immutable", "let",
                      "macro", "for", "while", "quote", "if", "else", "elseif", "try",
                      "finally", "catch", "do"];

   var closersList = ["end", "else", "elseif", "catch", "finally"];

   var keywordsList = ["if", "else", "elseif", "while", "for", "begin", "let",
                       "end", "do", "try", "catch", "finally", "return", "break", "continue",
                       "global", "local", "const", "export", "import", "importall", "using",
                       "function", "where", "macro", "module", "baremodule", "struct", "type",
                       "mutable", "immutable", "quote", "typealias", "abstract", "primitive",
                       "bitstype"];

   var builtinsList = ["true", "false", "nothing", "NaN", "Inf"];

   var openers = wordRegexp$a(openersList);
   var closers = wordRegexp$a(closersList);
   var keywords$r = wordRegexp$a(keywordsList);
   var builtins$6 = wordRegexp$a(builtinsList);

   var macro = /^@[_A-Za-z\u00A1-\uFFFF][\w\u00A1-\uFFFF]*!*/;
   var symbol = /^:[_A-Za-z\u00A1-\uFFFF][\w\u00A1-\uFFFF]*!*/;
   var stringPrefixes$1 = /^(`|([_A-Za-z\u00A1-\uFFFF]*"("")?))/;

   var macroOperators = wordRegexp$a(asciiOperatorsList, "", "@");
   var symbolOperators$1 = wordRegexp$a(asciiOperatorsList, "", ":");

   function inArray(state) {
     return (state.nestedArrays > 0);
   }

   function inGenerator(state) {
     return (state.nestedGenerators > 0);
   }

   function currentScope$1(state, n) {
     if (typeof(n) === "undefined") { n = 0; }
     if (state.scopes.length <= n) {
       return null;
     }
     return state.scopes[state.scopes.length - (n + 1)];
   }

   // tokenizers
   function tokenBase$v(stream, state) {
     // Handle multiline comments
     if (stream.match('#=', false)) {
       state.tokenize = tokenComment$d;
       return state.tokenize(stream, state);
     }

     // Handle scope changes
     var leavingExpr = state.leavingExpr;
     if (stream.sol()) {
       leavingExpr = false;
     }
     state.leavingExpr = false;

     if (leavingExpr) {
       if (stream.match(/^'+/)) {
         return "operator";
       }
     }

     if (stream.match(/\.{4,}/)) {
       return "error";
     } else if (stream.match(/\.{1,3}/)) {
       return "operator";
     }

     if (stream.eatSpace()) {
       return null;
     }

     var ch = stream.peek();

     // Handle single line comments
     if (ch === '#') {
       stream.skipToEnd();
       return "comment";
     }

     if (ch === '[') {
       state.scopes.push('[');
       state.nestedArrays++;
     }

     if (ch === '(') {
       state.scopes.push('(');
       state.nestedGenerators++;
     }

     if (inArray(state) && ch === ']') {
       while (state.scopes.length && currentScope$1(state) !== "[") { state.scopes.pop(); }
       state.scopes.pop();
       state.nestedArrays--;
       state.leavingExpr = true;
     }

     if (inGenerator(state) && ch === ')') {
       while (state.scopes.length && currentScope$1(state) !== "(") { state.scopes.pop(); }
       state.scopes.pop();
       state.nestedGenerators--;
       state.leavingExpr = true;
     }

     if (inArray(state)) {
       if (state.lastToken == "end" && stream.match(':')) {
         return "operator";
       }
       if (stream.match('end')) {
         return "number";
       }
     }

     var match;
     if (match = stream.match(openers, false)) {
       state.scopes.push(match[0]);
     }

     if (stream.match(closers, false)) {
       state.scopes.pop();
     }

     // Handle type annotations
     if (stream.match(/^::(?![:\$])/)) {
       state.tokenize = tokenAnnotation;
       return state.tokenize(stream, state);
     }

     // Handle symbols
     if (!leavingExpr && (stream.match(symbol) || stream.match(symbolOperators$1))) {
       return "builtin";
     }

     // Handle parametric types
     //if (stream.match(/^{[^}]*}(?=\()/)) {
     //  return "builtin";
     //}

     // Handle operators and Delimiters
     if (stream.match(operators$3)) {
       return "operator";
     }

     // Handle Number Literals
     if (stream.match(/^\.?\d/, false)) {
       var imMatcher = RegExp(/^im\b/);
       var numberLiteral = false;
       if (stream.match(/^0x\.[0-9a-f_]+p[\+\-]?[_\d]+/i)) { numberLiteral = true; }
       // Integers
       if (stream.match(/^0x[0-9a-f_]+/i)) { numberLiteral = true; } // Hex
       if (stream.match(/^0b[01_]+/i)) { numberLiteral = true; } // Binary
       if (stream.match(/^0o[0-7_]+/i)) { numberLiteral = true; } // Octal
       // Floats
       if (stream.match(/^(?:(?:\d[_\d]*)?\.(?!\.)(?:\d[_\d]*)?|\d[_\d]*\.(?!\.)(?:\d[_\d]*))?([Eef][\+\-]?[_\d]+)?/i)) { numberLiteral = true; }
       if (stream.match(/^\d[_\d]*(e[\+\-]?\d+)?/i)) { numberLiteral = true; } // Decimal
       if (numberLiteral) {
         // Integer literals may be "long"
         stream.match(imMatcher);
         state.leavingExpr = true;
         return "number";
       }
     }

     // Handle Chars
     if (stream.match("'")) {
       state.tokenize = tokenChar;
       return state.tokenize(stream, state);
     }

     // Handle Strings
     if (stream.match(stringPrefixes$1)) {
       state.tokenize = tokenStringFactory$1(stream.current());
       return state.tokenize(stream, state);
     }

     if (stream.match(macro) || stream.match(macroOperators)) {
       return "meta";
     }

     if (stream.match(delimiters)) {
       return null;
     }

     if (stream.match(keywords$r)) {
       return "keyword";
     }

     if (stream.match(builtins$6)) {
       return "builtin";
     }

     var isDefinition = state.isDefinition || state.lastToken == "function" ||
         state.lastToken == "macro" || state.lastToken == "type" ||
         state.lastToken == "struct" || state.lastToken == "immutable";

     if (stream.match(identifiers$6)) {
       if (isDefinition) {
         if (stream.peek() === '.') {
           state.isDefinition = true;
           return "variable";
         }
         state.isDefinition = false;
         return "def";
       }
       state.leavingExpr = true;
       return "variable";
     }

     // Handle non-detected items
     stream.next();
     return "error";
   }

   function tokenAnnotation(stream, state) {
     stream.match(/.*?(?=[,;{}()=\s]|$)/);
     if (stream.match('{')) {
       state.nestedParameters++;
     } else if (stream.match('}') && state.nestedParameters > 0) {
       state.nestedParameters--;
     }
     if (state.nestedParameters > 0) {
       stream.match(/.*?(?={|})/) || stream.next();
     } else if (state.nestedParameters == 0) {
       state.tokenize = tokenBase$v;
     }
     return "builtin";
   }

   function tokenComment$d(stream, state) {
     if (stream.match('#=')) {
       state.nestedComments++;
     }
     if (!stream.match(/.*?(?=(#=|=#))/)) {
       stream.skipToEnd();
     }
     if (stream.match('=#')) {
       state.nestedComments--;
       if (state.nestedComments == 0)
         state.tokenize = tokenBase$v;
     }
     return "comment";
   }

   function tokenChar(stream, state) {
     var isChar = false, match;
     if (stream.match(chars)) {
       isChar = true;
     } else if (match = stream.match(/\\u([a-f0-9]{1,4})(?=')/i)) {
       var value = parseInt(match[1], 16);
       if (value <= 55295 || value >= 57344) { // (U+0,U+D7FF), (U+E000,U+FFFF)
         isChar = true;
         stream.next();
       }
     } else if (match = stream.match(/\\U([A-Fa-f0-9]{5,8})(?=')/)) {
       var value = parseInt(match[1], 16);
       if (value <= 1114111) { // U+10FFFF
         isChar = true;
         stream.next();
       }
     }
     if (isChar) {
       state.leavingExpr = true;
       state.tokenize = tokenBase$v;
       return "string";
     }
     if (!stream.match(/^[^']+(?=')/)) { stream.skipToEnd(); }
     if (stream.match("'")) { state.tokenize = tokenBase$v; }
     return "error";
   }

   function tokenStringFactory$1(delimiter) {
     if (delimiter.substr(-3) === '"""') {
       delimiter = '"""';
     } else if (delimiter.substr(-1) === '"') {
       delimiter = '"';
     }
     function tokenString(stream, state) {
       if (stream.eat('\\')) {
         stream.next();
       } else if (stream.match(delimiter)) {
         state.tokenize = tokenBase$v;
         state.leavingExpr = true;
         return "string";
       } else {
         stream.eat(/[`"]/);
       }
       stream.eatWhile(/[^\\`"]/);
       return "string";
     }
     return tokenString;
   }

   const julia = {
     name: "julia",
     startState: function() {
       return {
         tokenize: tokenBase$v,
         scopes: [],
         lastToken: null,
         leavingExpr: false,
         isDefinition: false,
         nestedArrays: 0,
         nestedComments: 0,
         nestedGenerators: 0,
         nestedParameters: 0,
         firstParenPos: -1
       };
     },

     token: function(stream, state) {
       var style = state.tokenize(stream, state);
       var current = stream.current();

       if (current && style) {
         state.lastToken = current;
       }

       return style;
     },

     indent: function(state, textAfter, cx) {
       var delta = 0;
       if ( textAfter === ']' || textAfter === ')' || /^end\b/.test(textAfter) ||
            /^else/.test(textAfter) || /^catch\b/.test(textAfter) || /^elseif\b/.test(textAfter) ||
            /^finally/.test(textAfter) ) {
         delta = -1;
       }
       return (state.scopes.length + delta) * cx.unit;
     },

     languageData: {
       indentOnInput: /^\s*(end|else|catch|finally)\b$/,
       commentTokens: {line: "#", block: {open: "#=", close: "=#"}},
       closeBrackets: {brackets: ["(", "[", "{", '"']},
       autocomplete: keywordsList.concat(builtinsList)
     }
   };

   var julia$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      julia: julia
   });

   var tokenBase$u = function(stream, state) {
     var next_rule = state.next || "start";
     if (next_rule) {
       state.next = state.next;
       var nr = Rules[next_rule];
       if (nr.splice) {
         for (var i$ = 0; i$ < nr.length; ++i$) {
           var r = nr[i$];
           if (r.regex && stream.match(r.regex)) {
             state.next = r.next || state.next;
             return r.token;
           }
         }
         stream.next();
         return 'error';
       }
       if (stream.match(r = Rules[next_rule])) {
         if (r.regex && stream.match(r.regex)) {
           state.next = r.next;
           return r.token;
         } else {
           stream.next();
           return 'error';
         }
       }
     }
     stream.next();
     return 'error';
   };

   var identifier$1 = '(?![\\d\\s])[$\\w\\xAA-\\uFFDC](?:(?!\\s)[$\\w\\xAA-\\uFFDC]|-[A-Za-z])*';
   var indenter = RegExp('(?:[({[=:]|[-~]>|\\b(?:e(?:lse|xport)|d(?:o|efault)|t(?:ry|hen)|finally|import(?:\\s*all)?|const|var|let|new|catch(?:\\s*' + identifier$1 + ')?))\\s*$');
   var keywordend = '(?![$\\w]|-[A-Za-z]|\\s*:(?![:=]))';
   var stringfill = {
     token: 'string',
     regex: '.+'
   };
   var Rules = {
     start: [
       {
         token: 'docComment',
         regex: '/\\*',
         next: 'comment'
       }, {
         token: 'comment',
         regex: '#.*'
       }, {
         token: 'keyword',
         regex: '(?:t(?:h(?:is|row|en)|ry|ypeof!?)|c(?:on(?:tinue|st)|a(?:se|tch)|lass)|i(?:n(?:stanceof)?|mp(?:ort(?:\\s+all)?|lements)|[fs])|d(?:e(?:fault|lete|bugger)|o)|f(?:or(?:\\s+own)?|inally|unction)|s(?:uper|witch)|e(?:lse|x(?:tends|port)|val)|a(?:nd|rguments)|n(?:ew|ot)|un(?:less|til)|w(?:hile|ith)|o[fr]|return|break|let|var|loop)' + keywordend
       }, {
         token: 'atom',
         regex: '(?:true|false|yes|no|on|off|null|void|undefined)' + keywordend
       }, {
         token: 'invalid',
         regex: '(?:p(?:ackage|r(?:ivate|otected)|ublic)|i(?:mplements|nterface)|enum|static|yield)' + keywordend
       }, {
         token: 'className.standard',
         regex: '(?:R(?:e(?:gExp|ferenceError)|angeError)|S(?:tring|yntaxError)|E(?:rror|valError)|Array|Boolean|Date|Function|Number|Object|TypeError|URIError)' + keywordend
       }, {
         token: 'variableName.function.standard',
         regex: '(?:is(?:NaN|Finite)|parse(?:Int|Float)|Math|JSON|(?:en|de)codeURI(?:Component)?)' + keywordend
       }, {
         token: 'variableName.standard',
         regex: '(?:t(?:hat|il|o)|f(?:rom|allthrough)|it|by|e)' + keywordend
       }, {
         token: 'variableName',
         regex: identifier$1 + '\\s*:(?![:=])'
       }, {
         token: 'variableName',
         regex: identifier$1
       }, {
         token: 'operatorKeyword',
         regex: '(?:\\.{3}|\\s+\\?)'
       }, {
         token: 'keyword',
         regex: '(?:@+|::|\\.\\.)',
         next: 'key'
       }, {
         token: 'operatorKeyword',
         regex: '\\.\\s*',
         next: 'key'
       }, {
         token: 'string',
         regex: '\\\\\\S[^\\s,;)}\\]]*'
       }, {
         token: 'docString',
         regex: '\'\'\'',
         next: 'qdoc'
       }, {
         token: 'docString',
         regex: '"""',
         next: 'qqdoc'
       }, {
         token: 'string',
         regex: '\'',
         next: 'qstring'
       }, {
         token: 'string',
         regex: '"',
         next: 'qqstring'
       }, {
         token: 'string',
         regex: '`',
         next: 'js'
       }, {
         token: 'string',
         regex: '<\\[',
         next: 'words'
       }, {
         token: 'regexp',
         regex: '//',
         next: 'heregex'
       }, {
         token: 'regexp',
         regex: '\\/(?:[^[\\/\\n\\\\]*(?:(?:\\\\.|\\[[^\\]\\n\\\\]*(?:\\\\.[^\\]\\n\\\\]*)*\\])[^[\\/\\n\\\\]*)*)\\/[gimy$]{0,4}',
         next: 'key'
       }, {
         token: 'number',
         regex: '(?:0x[\\da-fA-F][\\da-fA-F_]*|(?:[2-9]|[12]\\d|3[0-6])r[\\da-zA-Z][\\da-zA-Z_]*|(?:\\d[\\d_]*(?:\\.\\d[\\d_]*)?|\\.\\d[\\d_]*)(?:e[+-]?\\d[\\d_]*)?[\\w$]*)'
       }, {
         token: 'paren',
         regex: '[({[]'
       }, {
         token: 'paren',
         regex: '[)}\\]]',
         next: 'key'
       }, {
         token: 'operatorKeyword',
         regex: '\\S+'
       }, {
         token: 'content',
         regex: '\\s+'
       }
     ],
     heregex: [
       {
         token: 'regexp',
         regex: '.*?//[gimy$?]{0,4}',
         next: 'start'
       }, {
         token: 'regexp',
         regex: '\\s*#{'
       }, {
         token: 'comment',
         regex: '\\s+(?:#.*)?'
       }, {
         token: 'regexp',
         regex: '\\S+'
       }
     ],
     key: [
       {
         token: 'operatorKeyword',
         regex: '[.?@!]+'
       }, {
         token: 'variableName',
         regex: identifier$1,
         next: 'start'
       }, {
         token: 'content',
         regex: '',
         next: 'start'
       }
     ],
     comment: [
       {
         token: 'docComment',
         regex: '.*?\\*/',
         next: 'start'
       }, {
         token: 'docComment',
         regex: '.+'
       }
     ],
     qdoc: [
       {
         token: 'string',
         regex: ".*?'''",
         next: 'key'
       }, stringfill
     ],
     qqdoc: [
       {
         token: 'string',
         regex: '.*?"""',
         next: 'key'
       }, stringfill
     ],
     qstring: [
       {
         token: 'string',
         regex: '[^\\\\\']*(?:\\\\.[^\\\\\']*)*\'',
         next: 'key'
       }, stringfill
     ],
     qqstring: [
       {
         token: 'string',
         regex: '[^\\\\"]*(?:\\\\.[^\\\\"]*)*"',
         next: 'key'
       }, stringfill
     ],
     js: [
       {
         token: 'string',
         regex: '[^\\\\`]*(?:\\\\.[^\\\\`]*)*`',
         next: 'key'
       }, stringfill
     ],
     words: [
       {
         token: 'string',
         regex: '.*?\\]>',
         next: 'key'
       }, stringfill
     ]
   };
   for (var idx in Rules) {
     var r$2 = Rules[idx];
     if (r$2.splice) {
       for (var i = 0, len = r$2.length; i < len; ++i) {
         var rr = r$2[i];
         if (typeof rr.regex === 'string') {
           Rules[idx][i].regex = new RegExp('^' + rr.regex);
         }
       }
     } else if (typeof rr.regex === 'string') {
       Rules[idx].regex = new RegExp('^' + r$2.regex);
     }
   }

   const liveScript = {
     name: "livescript",
     startState: function(){
       return {
         next: 'start',
         lastToken: {style: null, indent: 0, content: ""}
       };
     },
     token: function(stream, state){
       while (stream.pos == stream.start)
         var style = tokenBase$u(stream, state);
       state.lastToken = {
         style: style,
         indent: stream.indentation(),
         content: stream.current()
       };
       return style.replace(/\./g, ' ');
     },
     indent: function(state){
       var indentation = state.lastToken.indent;
       if (state.lastToken.content.match(indenter)) {
         indentation += 2;
       }
       return indentation;
     }
   };

   var livescript = /*#__PURE__*/Object.freeze({
      __proto__: null,
      liveScript: liveScript
   });

   function prefixRE(words) {
     return new RegExp("^(?:" + words.join("|") + ")", "i");
   }
   function wordRE(words) {
     return new RegExp("^(?:" + words.join("|") + ")$", "i");
   }

   // long list of standard functions from lua manual
   var builtins$5 = wordRE([
     "_G","_VERSION","assert","collectgarbage","dofile","error","getfenv","getmetatable","ipairs","load",
     "loadfile","loadstring","module","next","pairs","pcall","print","rawequal","rawget","rawset","require",
     "select","setfenv","setmetatable","tonumber","tostring","type","unpack","xpcall",

     "coroutine.create","coroutine.resume","coroutine.running","coroutine.status","coroutine.wrap","coroutine.yield",

     "debug.debug","debug.getfenv","debug.gethook","debug.getinfo","debug.getlocal","debug.getmetatable",
     "debug.getregistry","debug.getupvalue","debug.setfenv","debug.sethook","debug.setlocal","debug.setmetatable",
     "debug.setupvalue","debug.traceback",

     "close","flush","lines","read","seek","setvbuf","write",

     "io.close","io.flush","io.input","io.lines","io.open","io.output","io.popen","io.read","io.stderr","io.stdin",
     "io.stdout","io.tmpfile","io.type","io.write",

     "math.abs","math.acos","math.asin","math.atan","math.atan2","math.ceil","math.cos","math.cosh","math.deg",
     "math.exp","math.floor","math.fmod","math.frexp","math.huge","math.ldexp","math.log","math.log10","math.max",
     "math.min","math.modf","math.pi","math.pow","math.rad","math.random","math.randomseed","math.sin","math.sinh",
     "math.sqrt","math.tan","math.tanh",

     "os.clock","os.date","os.difftime","os.execute","os.exit","os.getenv","os.remove","os.rename","os.setlocale",
     "os.time","os.tmpname",

     "package.cpath","package.loaded","package.loaders","package.loadlib","package.path","package.preload",
     "package.seeall",

     "string.byte","string.char","string.dump","string.find","string.format","string.gmatch","string.gsub",
     "string.len","string.lower","string.match","string.rep","string.reverse","string.sub","string.upper",

     "table.concat","table.insert","table.maxn","table.remove","table.sort"
   ]);
   var keywords$q = wordRE(["and","break","elseif","false","nil","not","or","return",
                          "true","function", "end", "if", "then", "else", "do",
                          "while", "repeat", "until", "for", "in", "local" ]);

   var indentTokens = wordRE(["function", "if","repeat","do", "\\(", "{"]);
   var dedentTokens = wordRE(["end", "until", "\\)", "}"]);
   var dedentPartial = prefixRE(["end", "until", "\\)", "}", "else", "elseif"]);

   function readBracket(stream) {
     var level = 0;
     while (stream.eat("=")) ++level;
     stream.eat("[");
     return level;
   }

   function normal(stream, state) {
     var ch = stream.next();
     if (ch == "-" && stream.eat("-")) {
       if (stream.eat("[") && stream.eat("["))
         return (state.cur = bracketed(readBracket(stream), "comment"))(stream, state);
       stream.skipToEnd();
       return "comment";
     }
     if (ch == "\"" || ch == "'")
       return (state.cur = string(ch))(stream, state);
     if (ch == "[" && /[\[=]/.test(stream.peek()))
       return (state.cur = bracketed(readBracket(stream), "string"))(stream, state);
     if (/\d/.test(ch)) {
       stream.eatWhile(/[\w.%]/);
       return "number";
     }
     if (/[\w_]/.test(ch)) {
       stream.eatWhile(/[\w\\\-_.]/);
       return "variable";
     }
     return null;
   }

   function bracketed(level, style) {
     return function(stream, state) {
       var curlev = null, ch;
       while ((ch = stream.next()) != null) {
         if (curlev == null) {if (ch == "]") curlev = 0;}
         else if (ch == "=") ++curlev;
         else if (ch == "]" && curlev == level) { state.cur = normal; break; }
         else curlev = null;
       }
       return style;
     };
   }

   function string(quote) {
     return function(stream, state) {
       var escaped = false, ch;
       while ((ch = stream.next()) != null) {
         if (ch == quote && !escaped) break;
         escaped = !escaped && ch == "\\";
       }
       if (!escaped) state.cur = normal;
       return "string";
     };
   }

   const lua = {
     name: "lua",

     startState: function() {
       return {basecol: 0, indentDepth: 0, cur: normal};
     },

     token: function(stream, state) {
       if (stream.eatSpace()) return null;
       var style = state.cur(stream, state);
       var word = stream.current();
       if (style == "variable") {
         if (keywords$q.test(word)) style = "keyword";
         else if (builtins$5.test(word)) style = "builtin";
       }
       if ((style != "comment") && (style != "string")){
         if (indentTokens.test(word)) ++state.indentDepth;
         else if (dedentTokens.test(word)) --state.indentDepth;
       }
       return style;
     },

     indent: function(state, textAfter, cx) {
       var closing = dedentPartial.test(textAfter);
       return state.basecol + cx.unit * (state.indentDepth - (closing ? 1 : 0));
     },

     languageData: {
       indentOnInput: /^\s*(?:end|until|else|\)|\})$/,
       commentTokens: {line: "--", block: {open: "--[[", close: "]]--"}}
     }
   };

   var lua$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      lua: lua
   });

   function parseWords$2(str) {
     var obj = {}, words = str.split(" ");
     for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
     return obj;
   }
   var specials$1 = parseWords$2("$! $$ $& $? $+ $abook $abs $active $activecid " +
                             "$activewid $address $addtok $agent $agentname $agentstat $agentver " +
                             "$alias $and $anick $ansi2mirc $aop $appactive $appstate $asc $asctime " +
                             "$asin $atan $avoice $away $awaymsg $awaytime $banmask $base $bfind " +
                             "$binoff $biton $bnick $bvar $bytes $calc $cb $cd $ceil $chan $chanmodes " +
                             "$chantypes $chat $chr $cid $clevel $click $cmdbox $cmdline $cnick $color " +
                             "$com $comcall $comchan $comerr $compact $compress $comval $cos $count " +
                             "$cr $crc $creq $crlf $ctime $ctimer $ctrlenter $date $day $daylight " +
                             "$dbuh $dbuw $dccignore $dccport $dde $ddename $debug $decode $decompress " +
                             "$deltok $devent $dialog $did $didreg $didtok $didwm $disk $dlevel $dll " +
                             "$dllcall $dname $dns $duration $ebeeps $editbox $emailaddr $encode $error " +
                             "$eval $event $exist $feof $ferr $fgetc $file $filename $filtered $finddir " +
                             "$finddirn $findfile $findfilen $findtok $fline $floor $fopen $fread $fserve " +
                             "$fulladdress $fulldate $fullname $fullscreen $get $getdir $getdot $gettok $gmt " +
                             "$group $halted $hash $height $hfind $hget $highlight $hnick $hotline " +
                             "$hotlinepos $ial $ialchan $ibl $idle $iel $ifmatch $ignore $iif $iil " +
                             "$inelipse $ini $inmidi $inpaste $inpoly $input $inrect $inroundrect " +
                             "$insong $instok $int $inwave $ip $isalias $isbit $isdde $isdir $isfile " +
                             "$isid $islower $istok $isupper $keychar $keyrpt $keyval $knick $lactive " +
                             "$lactivecid $lactivewid $left $len $level $lf $line $lines $link $lock " +
                             "$lock $locked $log $logstamp $logstampfmt $longfn $longip $lower $ltimer " +
                             "$maddress $mask $matchkey $matchtok $md5 $me $menu $menubar $menucontext " +
                             "$menutype $mid $middir $mircdir $mircexe $mircini $mklogfn $mnick $mode " +
                             "$modefirst $modelast $modespl $mouse $msfile $network $newnick $nick $nofile " +
                             "$nopath $noqt $not $notags $notify $null $numeric $numok $oline $onpoly " +
                             "$opnick $or $ord $os $passivedcc $pic $play $pnick $port $portable $portfree " +
                             "$pos $prefix $prop $protect $puttok $qt $query $rand $r $rawmsg $read $readomo " +
                             "$readn $regex $regml $regsub $regsubex $remove $remtok $replace $replacex " +
                             "$reptok $result $rgb $right $round $scid $scon $script $scriptdir $scriptline " +
                             "$sdir $send $server $serverip $sfile $sha1 $shortfn $show $signal $sin " +
                             "$site $sline $snick $snicks $snotify $sock $sockbr $sockerr $sockname " +
                             "$sorttok $sound $sqrt $ssl $sreq $sslready $status $strip $str $stripped " +
                             "$syle $submenu $switchbar $tan $target $ticks $time $timer $timestamp " +
                             "$timestampfmt $timezone $tip $titlebar $toolbar $treebar $trust $ulevel " +
                             "$ulist $upper $uptime $url $usermode $v1 $v2 $var $vcmd $vcmdstat $vcmdver " +
                             "$version $vnick $vol $wid $width $wildsite $wildtok $window $wrap $xor");
   var keywords$p = parseWords$2("abook ajinvite alias aline ame amsg anick aop auser autojoin avoice " +
                             "away background ban bcopy beep bread break breplace bset btrunc bunset bwrite " +
                             "channel clear clearall cline clipboard close cnick color comclose comopen " +
                             "comreg continue copy creq ctcpreply ctcps dcc dccserver dde ddeserver " +
                             "debug dec describe dialog did didtok disable disconnect dlevel dline dll " +
                             "dns dqwindow drawcopy drawdot drawfill drawline drawpic drawrect drawreplace " +
                             "drawrot drawsave drawscroll drawtext ebeeps echo editbox emailaddr enable " +
                             "events exit fclose filter findtext finger firewall flash flist flood flush " +
                             "flushini font fopen fseek fsend fserve fullname fwrite ghide gload gmove " +
                             "gopts goto gplay gpoint gqreq groups gshow gsize gstop gtalk gunload hadd " +
                             "halt haltdef hdec hdel help hfree hinc hload hmake hop hsave ial ialclear " +
                             "ialmark identd if ignore iline inc invite iuser join kick linesep links list " +
                             "load loadbuf localinfo log mdi me menubar mkdir mnick mode msg nick noop notice " +
                             "notify omsg onotice part partall pdcc perform play playctrl pop protect pvoice " +
                             "qme qmsg query queryn quit raw reload remini remote remove rename renwin " +
                             "reseterror resetidle return rlevel rline rmdir run ruser save savebuf saveini " +
                             "say scid scon server set showmirc signam sline sockaccept sockclose socklist " +
                             "socklisten sockmark sockopen sockpause sockread sockrename sockudp sockwrite " +
                             "sound speak splay sreq strip switchbar timer timestamp titlebar tnick tokenize " +
                             "toolbar topic tray treebar ulist unload unset unsetall updatenl url uwho " +
                             "var vcadd vcmd vcrem vol while whois window winhelp write writeint if isalnum " +
                             "isalpha isaop isavoice isban ischan ishop isignore isin isincs isletter islower " +
                             "isnotify isnum ison isop isprotect isreg isupper isvoice iswm iswmcs " +
                             "elseif else goto menu nicklist status title icon size option text edit " +
                             "button check radio box scroll list combo link tab item");
   var functions$2 = parseWords$2("if elseif else and not or eq ne in ni for foreach while switch");
   var isOperatorChar$8 = /[+\-*&%=<>!?^\/\|]/;
   function chain$6(stream, state, f) {
     state.tokenize = f;
     return f(stream, state);
   }
   function tokenBase$t(stream, state) {
     var beforeParams = state.beforeParams;
     state.beforeParams = false;
     var ch = stream.next();
     if (/[\[\]{}\(\),\.]/.test(ch)) {
       if (ch == "(" && beforeParams) state.inParams = true;
       else if (ch == ")") state.inParams = false;
       return null;
     }
     else if (/\d/.test(ch)) {
       stream.eatWhile(/[\w\.]/);
       return "number";
     }
     else if (ch == "\\") {
       stream.eat("\\");
       stream.eat(/./);
       return "number";
     }
     else if (ch == "/" && stream.eat("*")) {
       return chain$6(stream, state, tokenComment$c);
     }
     else if (ch == ";" && stream.match(/ *\( *\(/)) {
       return chain$6(stream, state, tokenUnparsed$2);
     }
     else if (ch == ";" && !state.inParams) {
       stream.skipToEnd();
       return "comment";
     }
     else if (ch == '"') {
       stream.eat(/"/);
       return "keyword";
     }
     else if (ch == "$") {
       stream.eatWhile(/[$_a-z0-9A-Z\.:]/);
       if (specials$1 && specials$1.propertyIsEnumerable(stream.current().toLowerCase())) {
         return "keyword";
       }
       else {
         state.beforeParams = true;
         return "builtin";
       }
     }
     else if (ch == "%") {
       stream.eatWhile(/[^,\s()]/);
       state.beforeParams = true;
       return "string";
     }
     else if (isOperatorChar$8.test(ch)) {
       stream.eatWhile(isOperatorChar$8);
       return "operator";
     }
     else {
       stream.eatWhile(/[\w\$_{}]/);
       var word = stream.current().toLowerCase();
       if (keywords$p && keywords$p.propertyIsEnumerable(word))
         return "keyword";
       if (functions$2 && functions$2.propertyIsEnumerable(word)) {
         state.beforeParams = true;
         return "keyword";
       }
       return null;
     }
   }
   function tokenComment$c(stream, state) {
     var maybeEnd = false, ch;
     while (ch = stream.next()) {
       if (ch == "/" && maybeEnd) {
         state.tokenize = tokenBase$t;
         break;
       }
       maybeEnd = (ch == "*");
     }
     return "comment";
   }
   function tokenUnparsed$2(stream, state) {
     var maybeEnd = 0, ch;
     while (ch = stream.next()) {
       if (ch == ";" && maybeEnd == 2) {
         state.tokenize = tokenBase$t;
         break;
       }
       if (ch == ")")
         maybeEnd++;
       else if (ch != " ")
         maybeEnd = 0;
     }
     return "meta";
   }
   const mirc = {
     name: "mirc",
     startState: function() {
       return {
         tokenize: tokenBase$t,
         beforeParams: false,
         inParams: false
       };
     },
     token: function(stream, state) {
       if (stream.eatSpace()) return null;
       return state.tokenize(stream, state);
     }
   };

   var mirc$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      mirc: mirc
   });

   // used pattern building blocks
   var Identifier = '[a-zA-Z\\$][a-zA-Z0-9\\$]*';
   var pBase      = "(?:\\d+)";
   var pFloat     = "(?:\\.\\d+|\\d+\\.\\d*|\\d+)";
   var pFloatBase = "(?:\\.\\w+|\\w+\\.\\w*|\\w+)";
   var pPrecision = "(?:`(?:`?"+pFloat+")?)";

   // regular expressions
   var reBaseForm        = new RegExp('(?:'+pBase+'(?:\\^\\^'+pFloatBase+pPrecision+'?(?:\\*\\^[+-]?\\d+)?))');
   var reFloatForm$1       = new RegExp('(?:' + pFloat + pPrecision + '?(?:\\*\\^[+-]?\\d+)?)');
   var reIdInContext     = new RegExp('(?:`?)(?:' + Identifier + ')(?:`(?:' + Identifier + '))*(?:`?)');

   function tokenBase$s(stream, state) {
     var ch;

     // get next character
     ch = stream.next();

     // string
     if (ch === '"') {
       state.tokenize = tokenString$k;
       return state.tokenize(stream, state);
     }

     // comment
     if (ch === '(') {
       if (stream.eat('*')) {
         state.commentLevel++;
         state.tokenize = tokenComment$b;
         return state.tokenize(stream, state);
       }
     }

     // go back one character
     stream.backUp(1);

     // look for numbers
     // Numbers in a baseform
     if (stream.match(reBaseForm, true, false)) {
       return 'number';
     }

     // Mathematica numbers. Floats (1.2, .2, 1.) can have optionally a precision (`float) or an accuracy definition
     // (``float). Note: while 1.2` is possible 1.2`` is not. At the end an exponent (float*^+12) can follow.
     if (stream.match(reFloatForm$1, true, false)) {
       return 'number';
     }

     /* In[23] and Out[34] */
     if (stream.match(/(?:In|Out)\[[0-9]*\]/, true, false)) {
       return 'atom';
     }

     // usage
     if (stream.match(/([a-zA-Z\$][a-zA-Z0-9\$]*(?:`[a-zA-Z0-9\$]+)*::usage)/, true, false)) {
       return 'meta';
     }

     // message
     if (stream.match(/([a-zA-Z\$][a-zA-Z0-9\$]*(?:`[a-zA-Z0-9\$]+)*::[a-zA-Z\$][a-zA-Z0-9\$]*):?/, true, false)) {
       return 'string.special';
     }

     // this makes a look-ahead match for something like variable:{_Integer}
     // the match is then forwarded to the mma-patterns tokenizer.
     if (stream.match(/([a-zA-Z\$][a-zA-Z0-9\$]*\s*:)(?:(?:[a-zA-Z\$][a-zA-Z0-9\$]*)|(?:[^:=>~@\^\&\*\)\[\]'\?,\|])).*/, true, false)) {
       return 'variableName.special';
     }

     // catch variables which are used together with Blank (_), BlankSequence (__) or BlankNullSequence (___)
     // Cannot start with a number, but can have numbers at any other position. Examples
     // blub__Integer, a1_, b34_Integer32
     if (stream.match(/[a-zA-Z\$][a-zA-Z0-9\$]*_+[a-zA-Z\$][a-zA-Z0-9\$]*/, true, false)) {
       return 'variableName.special';
     }
     if (stream.match(/[a-zA-Z\$][a-zA-Z0-9\$]*_+/, true, false)) {
       return 'variableName.special';
     }
     if (stream.match(/_+[a-zA-Z\$][a-zA-Z0-9\$]*/, true, false)) {
       return 'variableName.special';
     }

     // Named characters in Mathematica, like \[Gamma].
     if (stream.match(/\\\[[a-zA-Z\$][a-zA-Z0-9\$]*\]/, true, false)) {
       return 'character';
     }

     // Match all braces separately
     if (stream.match(/(?:\[|\]|{|}|\(|\))/, true, false)) {
       return 'bracket';
     }

     // Catch Slots (#, ##, #3, ##9 and the V10 named slots #name). I have never seen someone using more than one digit after #, so we match
     // only one.
     if (stream.match(/(?:#[a-zA-Z\$][a-zA-Z0-9\$]*|#+[0-9]?)/, true, false)) {
       return 'variableName.constant';
     }

     // Literals like variables, keywords, functions
     if (stream.match(reIdInContext, true, false)) {
       return 'keyword';
     }

     // operators. Note that operators like @@ or /; are matched separately for each symbol.
     if (stream.match(/(?:\\|\+|\-|\*|\/|,|;|\.|:|@|~|=|>|<|&|\||_|`|'|\^|\?|!|%)/, true, false)) {
       return 'operator';
     }

     // everything else is an error
     stream.next(); // advance the stream.
     return 'error';
   }

   function tokenString$k(stream, state) {
     var next, end = false, escaped = false;
     while ((next = stream.next()) != null) {
       if (next === '"' && !escaped) {
         end = true;
         break;
       }
       escaped = !escaped && next === '\\';
     }
     if (end && !escaped) {
       state.tokenize = tokenBase$s;
     }
     return 'string';
   }
   function tokenComment$b(stream, state) {
     var prev, next;
     while(state.commentLevel > 0 && (next = stream.next()) != null) {
       if (prev === '(' && next === '*') state.commentLevel++;
       if (prev === '*' && next === ')') state.commentLevel--;
       prev = next;
     }
     if (state.commentLevel <= 0) {
       state.tokenize = tokenBase$s;
     }
     return 'comment';
   }

   const mathematica = {
     name: "mathematica",
     startState: function() {return {tokenize: tokenBase$s, commentLevel: 0};},
     token: function(stream, state) {
       if (stream.eatSpace()) return null;
       return state.tokenize(stream, state);
     },
     languageData: {
       commentTokens: {block: {open: "(*", close: "*)"}}
     }
   };

   var mathematica$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      mathematica: mathematica
   });

   function words$c(str) {
     var obj = {}, words = str.split(" ");
     for (var i=0; i<words.length; ++i)
       obj[words[i]] = true;
     return obj;
   }

   var keywords$o = words$c("algorithm and annotation assert block break class connect connector constant constrainedby der discrete each else elseif elsewhen encapsulated end enumeration equation expandable extends external false final flow for function if import impure in initial inner input loop model not operator or outer output package parameter partial protected public pure record redeclare replaceable return stream then true type when while within");
   var builtin$1 = words$c("abs acos actualStream asin atan atan2 cardinality ceil cos cosh delay div edge exp floor getInstanceName homotopy inStream integer log log10 mod pre reinit rem semiLinear sign sin sinh spatialDistribution sqrt tan tanh");
   var atoms$7 = words$c("Real Boolean Integer String");

   var completions = [].concat(Object.keys(keywords$o), Object.keys(builtin$1), Object.keys(atoms$7));

   var isSingleOperatorChar$1 = /[;=\(:\),{}.*<>+\-\/^\[\]]/;
   var isDoubleOperatorChar$1 = /(:=|<=|>=|==|<>|\.\+|\.\-|\.\*|\.\/|\.\^)/;
   var isDigit = /[0-9]/;
   var isNonDigit = /[_a-zA-Z]/;

   function tokenLineComment$1(stream, state) {
     stream.skipToEnd();
     state.tokenize = null;
     return "comment";
   }

   function tokenBlockComment$1(stream, state) {
     var maybeEnd = false, ch;
     while (ch = stream.next()) {
       if (maybeEnd && ch == "/") {
         state.tokenize = null;
         break;
       }
       maybeEnd = (ch == "*");
     }
     return "comment";
   }

   function tokenString$j(stream, state) {
     var escaped = false, ch;
     while ((ch = stream.next()) != null) {
       if (ch == '"' && !escaped) {
         state.tokenize = null;
         state.sol = false;
         break;
       }
       escaped = !escaped && ch == "\\";
     }

     return "string";
   }

   function tokenIdent(stream, state) {
     stream.eatWhile(isDigit);
     while (stream.eat(isDigit) || stream.eat(isNonDigit)) { }


     var cur = stream.current();

     if(state.sol && (cur == "package" || cur == "model" || cur == "when" || cur == "connector")) state.level++;
     else if(state.sol && cur == "end" && state.level > 0) state.level--;

     state.tokenize = null;
     state.sol = false;

     if (keywords$o.propertyIsEnumerable(cur)) return "keyword";
     else if (builtin$1.propertyIsEnumerable(cur)) return "builtin";
     else if (atoms$7.propertyIsEnumerable(cur)) return "atom";
     else return "variable";
   }

   function tokenQIdent(stream, state) {
     while (stream.eat(/[^']/)) { }

     state.tokenize = null;
     state.sol = false;

     if(stream.eat("'"))
       return "variable";
     else
       return "error";
   }

   function tokenUnsignedNumber(stream, state) {
     stream.eatWhile(isDigit);
     if (stream.eat('.')) {
       stream.eatWhile(isDigit);
     }
     if (stream.eat('e') || stream.eat('E')) {
       if (!stream.eat('-'))
         stream.eat('+');
       stream.eatWhile(isDigit);
     }

     state.tokenize = null;
     state.sol = false;
     return "number";
   }

   // Interface
   const modelica = {
     name: "modelica",
     startState: function() {
       return {
         tokenize: null,
         level: 0,
         sol: true
       };
     },

     token: function(stream, state) {
       if(state.tokenize != null) {
         return state.tokenize(stream, state);
       }

       if(stream.sol()) {
         state.sol = true;
       }

       // WHITESPACE
       if(stream.eatSpace()) {
         state.tokenize = null;
         return null;
       }

       var ch = stream.next();

       // LINECOMMENT
       if(ch == '/' && stream.eat('/')) {
         state.tokenize = tokenLineComment$1;
       }
       // BLOCKCOMMENT
       else if(ch == '/' && stream.eat('*')) {
         state.tokenize = tokenBlockComment$1;
       }
       // TWO SYMBOL TOKENS
       else if(isDoubleOperatorChar$1.test(ch+stream.peek())) {
         stream.next();
         state.tokenize = null;
         return "operator";
       }
       // SINGLE SYMBOL TOKENS
       else if(isSingleOperatorChar$1.test(ch)) {
         state.tokenize = null;
         return "operator";
       }
       // IDENT
       else if(isNonDigit.test(ch)) {
         state.tokenize = tokenIdent;
       }
       // Q-IDENT
       else if(ch == "'" && stream.peek() && stream.peek() != "'") {
         state.tokenize = tokenQIdent;
       }
       // STRING
       else if(ch == '"') {
         state.tokenize = tokenString$j;
       }
       // UNSIGNED_NUMBER
       else if(isDigit.test(ch)) {
         state.tokenize = tokenUnsignedNumber;
       }
       // ERROR
       else {
         state.tokenize = null;
         return "error";
       }

       return state.tokenize(stream, state);
     },

     indent: function(state, textAfter, cx) {
       if (state.tokenize != null) return null;

       var level = state.level;
       if(/(algorithm)/.test(textAfter)) level--;
       if(/(equation)/.test(textAfter)) level--;
       if(/(initial algorithm)/.test(textAfter)) level--;
       if(/(initial equation)/.test(textAfter)) level--;
       if(/(end)/.test(textAfter)) level--;

       if(level > 0)
         return cx.unit*level;
       else
         return 0;
     },

     languageData: {
       commentTokens: {line: "//", block: {open: "/*", close: "*/"}},
       autocomplete: completions
     }
   };

   var modelica$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      modelica: modelica
   });

   function wordRegexp$9(words) {
     return new RegExp("^((" + words.join(")|(") + "))\\b", "i");
   }

   var singleOperators$4 = new RegExp("^[\\+\\-\\*/&#!_?\\\\<>=\\'\\[\\]]");
   var doubleOperators$3 = new RegExp("^(('=)|(<=)|(>=)|('>)|('<)|([[)|(]])|(^$))");
   var singleDelimiters$2 = new RegExp("^[\\.,:]");
   var brackets = new RegExp("[()]");
   var identifiers$5 = new RegExp("^[%A-Za-z][A-Za-z0-9]*");
   var commandKeywords = ["break","close","do","else","for","goto", "halt", "hang", "if", "job","kill","lock","merge","new","open", "quit", "read", "set", "tcommit", "trollback", "tstart", "use", "view", "write", "xecute", "b","c","d","e","f","g", "h", "i", "j","k","l","m","n","o", "q", "r", "s", "tc", "tro", "ts", "u", "v", "w", "x"];
   // The following list includes intrinsic functions _and_ special variables
   var intrinsicFuncsWords = ["\\$ascii", "\\$char", "\\$data", "\\$ecode", "\\$estack", "\\$etrap", "\\$extract", "\\$find", "\\$fnumber", "\\$get", "\\$horolog", "\\$io", "\\$increment", "\\$job", "\\$justify", "\\$length", "\\$name", "\\$next", "\\$order", "\\$piece", "\\$qlength", "\\$qsubscript", "\\$query", "\\$quit", "\\$random", "\\$reverse", "\\$select", "\\$stack", "\\$test", "\\$text", "\\$translate", "\\$view", "\\$x", "\\$y", "\\$a", "\\$c", "\\$d", "\\$e", "\\$ec", "\\$es", "\\$et", "\\$f", "\\$fn", "\\$g", "\\$h", "\\$i", "\\$j", "\\$l", "\\$n", "\\$na", "\\$o", "\\$p", "\\$q", "\\$ql", "\\$qs", "\\$r", "\\$re", "\\$s", "\\$st", "\\$t", "\\$tr", "\\$v", "\\$z"];
   var intrinsicFuncs = wordRegexp$9(intrinsicFuncsWords);
   var command = wordRegexp$9(commandKeywords);

   function tokenBase$r(stream, state) {
     if (stream.sol()) {
       state.label = true;
       state.commandMode = 0;
     }

     // The <space> character has meaning in MUMPS. Ignoring consecutive
     // spaces would interfere with interpreting whether the next non-space
     // character belongs to the command or argument context.

     // Examine each character and update a mode variable whose interpretation is:
     //   >0 => command    0 => argument    <0 => command post-conditional
     var ch = stream.peek();

     if (ch == " " || ch == "\t") { // Pre-process <space>
       state.label = false;
       if (state.commandMode == 0)
         state.commandMode = 1;
       else if ((state.commandMode < 0) || (state.commandMode == 2))
         state.commandMode = 0;
     } else if ((ch != ".") && (state.commandMode > 0)) {
       if (ch == ":")
         state.commandMode = -1;   // SIS - Command post-conditional
       else
         state.commandMode = 2;
     }

     // Do not color parameter list as line tag
     if ((ch === "(") || (ch === "\u0009"))
       state.label = false;

     // MUMPS comment starts with ";"
     if (ch === ";") {
       stream.skipToEnd();
       return "comment";
     }

     // Number Literals // SIS/RLM - MUMPS permits canonic number followed by concatenate operator
     if (stream.match(/^[-+]?\d+(\.\d+)?([eE][-+]?\d+)?/))
       return "number";

     // Handle Strings
     if (ch == '"') {
       if (stream.skipTo('"')) {
         stream.next();
         return "string";
       } else {
         stream.skipToEnd();
         return "error";
       }
     }

     // Handle operators and Delimiters
     if (stream.match(doubleOperators$3) || stream.match(singleOperators$4))
       return "operator";

     // Prevents leading "." in DO block from falling through to error
     if (stream.match(singleDelimiters$2))
       return null;

     if (brackets.test(ch)) {
       stream.next();
       return "bracket";
     }

     if (state.commandMode > 0 && stream.match(command))
       return "controlKeyword";

     if (stream.match(intrinsicFuncs))
       return "builtin";

     if (stream.match(identifiers$5))
       return "variable";

     // Detect dollar-sign when not a documented intrinsic function
     // "^" may introduce a GVN or SSVN - Color same as function
     if (ch === "$" || ch === "^") {
       stream.next();
       return "builtin";
     }

     // MUMPS Indirection
     if (ch === "@") {
       stream.next();
       return "string.special";
     }

     if (/[\w%]/.test(ch)) {
       stream.eatWhile(/[\w%]/);
       return "variable";
     }

     // Handle non-detected items
     stream.next();
     return "error";
   }

   const mumps = {
     name: "mumps",
     startState: function() {
       return {
         label: false,
         commandMode: 0
       };
     },

     token: function(stream, state) {
       var style = tokenBase$r(stream, state);
       if (state.label) return "tag";
       return style;
     }
   };

   var mumps$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      mumps: mumps
   });

   var rfc2822 = [
     "From", "Sender", "Reply-To", "To", "Cc", "Bcc", "Message-ID",
     "In-Reply-To", "References", "Resent-From", "Resent-Sender", "Resent-To",
     "Resent-Cc", "Resent-Bcc", "Resent-Message-ID", "Return-Path", "Received"
   ];
   var rfc2822NoEmail = [
     "Date", "Subject", "Comments", "Keywords", "Resent-Date"
   ];

   var whitespace = /^[ \t]/;
   var separator = /^From /; // See RFC 4155
   var rfc2822Header = new RegExp("^(" + rfc2822.join("|") + "): ");
   var rfc2822HeaderNoEmail = new RegExp("^(" + rfc2822NoEmail.join("|") + "): ");
   var header = /^[^:]+:/; // Optional fields defined in RFC 2822
   var email = /^[^ ]+@[^ ]+/;
   var untilEmail = /^.*?(?=[^ ]+?@[^ ]+)/;
   var bracketedEmail = /^<.*?>/;
   var untilBracketedEmail = /^.*?(?=<.*>)/;

   function styleForHeader(header) {
     if (header === "Subject") return "header";
     return "string";
   }

   function readToken$1(stream, state) {
     if (stream.sol()) {
       // From last line
       state.inSeparator = false;
       if (state.inHeader && stream.match(whitespace)) {
         // Header folding
         return null;
       } else {
         state.inHeader = false;
         state.header = null;
       }

       if (stream.match(separator)) {
         state.inHeaders = true;
         state.inSeparator = true;
         return "atom";
       }

       var match;
       var emailPermitted = false;
       if ((match = stream.match(rfc2822HeaderNoEmail)) ||
           (emailPermitted = true) && (match = stream.match(rfc2822Header))) {
         state.inHeaders = true;
         state.inHeader = true;
         state.emailPermitted = emailPermitted;
         state.header = match[1];
         return "atom";
       }

       // Use vim's heuristics: recognize custom headers only if the line is in a
       // block of legitimate headers.
       if (state.inHeaders && (match = stream.match(header))) {
         state.inHeader = true;
         state.emailPermitted = true;
         state.header = match[1];
         return "atom";
       }

       state.inHeaders = false;
       stream.skipToEnd();
       return null;
     }

     if (state.inSeparator) {
       if (stream.match(email)) return "link";
       if (stream.match(untilEmail)) return "atom";
       stream.skipToEnd();
       return "atom";
     }

     if (state.inHeader) {
       var style = styleForHeader(state.header);

       if (state.emailPermitted) {
         if (stream.match(bracketedEmail)) return style + " link";
         if (stream.match(untilBracketedEmail)) return style;
       }
       stream.skipToEnd();
       return style;
     }

     stream.skipToEnd();
     return null;
   }
   const mbox = {
     name: "mbox",
     startState: function() {
       return {
         // Is in a mbox separator
         inSeparator: false,
         // Is in a mail header
         inHeader: false,
         // If bracketed email is permitted. Only applicable when inHeader
         emailPermitted: false,
         // Name of current header
         header: null,
         // Is in a region of mail headers
         inHeaders: false
       };
     },
     token: readToken$1,
     blankLine: function(state) {
       state.inHeaders = state.inSeparator = state.inHeader = false;
     },
     languageData: {
       autocomplete: rfc2822.concat(rfc2822NoEmail)
     }
   };

   var mbox$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      mbox: mbox
   });

   function words$b(str) {
     var obj = {}, words = str.split(" ");
     for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
     return obj;
   }

   var keywords$n = words$b(
     /* ngxDirectiveControl */ "break return rewrite set" +
       /* ngxDirective */ " accept_mutex accept_mutex_delay access_log add_after_body add_before_body add_header addition_types aio alias allow ancient_browser ancient_browser_value auth_basic auth_basic_user_file auth_http auth_http_header auth_http_timeout autoindex autoindex_exact_size autoindex_localtime charset charset_types client_body_buffer_size client_body_in_file_only client_body_in_single_buffer client_body_temp_path client_body_timeout client_header_buffer_size client_header_timeout client_max_body_size connection_pool_size create_full_put_path daemon dav_access dav_methods debug_connection debug_points default_type degradation degrade deny devpoll_changes devpoll_events directio directio_alignment empty_gif env epoll_events error_log eventport_events expires fastcgi_bind fastcgi_buffer_size fastcgi_buffers fastcgi_busy_buffers_size fastcgi_cache fastcgi_cache_key fastcgi_cache_methods fastcgi_cache_min_uses fastcgi_cache_path fastcgi_cache_use_stale fastcgi_cache_valid fastcgi_catch_stderr fastcgi_connect_timeout fastcgi_hide_header fastcgi_ignore_client_abort fastcgi_ignore_headers fastcgi_index fastcgi_intercept_errors fastcgi_max_temp_file_size fastcgi_next_upstream fastcgi_param fastcgi_pass_header fastcgi_pass_request_body fastcgi_pass_request_headers fastcgi_read_timeout fastcgi_send_lowat fastcgi_send_timeout fastcgi_split_path_info fastcgi_store fastcgi_store_access fastcgi_temp_file_write_size fastcgi_temp_path fastcgi_upstream_fail_timeout fastcgi_upstream_max_fails flv geoip_city geoip_country google_perftools_profiles gzip gzip_buffers gzip_comp_level gzip_disable gzip_hash gzip_http_version gzip_min_length gzip_no_buffer gzip_proxied gzip_static gzip_types gzip_vary gzip_window if_modified_since ignore_invalid_headers image_filter image_filter_buffer image_filter_jpeg_quality image_filter_transparency imap_auth imap_capabilities imap_client_buffer index ip_hash keepalive_requests keepalive_timeout kqueue_changes kqueue_events large_client_header_buffers limit_conn limit_conn_log_level limit_rate limit_rate_after limit_req limit_req_log_level limit_req_zone limit_zone lingering_time lingering_timeout lock_file log_format log_not_found log_subrequest map_hash_bucket_size map_hash_max_size master_process memcached_bind memcached_buffer_size memcached_connect_timeout memcached_next_upstream memcached_read_timeout memcached_send_timeout memcached_upstream_fail_timeout memcached_upstream_max_fails merge_slashes min_delete_depth modern_browser modern_browser_value msie_padding msie_refresh multi_accept open_file_cache open_file_cache_errors open_file_cache_events open_file_cache_min_uses open_file_cache_valid open_log_file_cache output_buffers override_charset perl perl_modules perl_require perl_set pid pop3_auth pop3_capabilities port_in_redirect postpone_gzipping postpone_output protocol proxy proxy_bind proxy_buffer proxy_buffer_size proxy_buffering proxy_buffers proxy_busy_buffers_size proxy_cache proxy_cache_key proxy_cache_methods proxy_cache_min_uses proxy_cache_path proxy_cache_use_stale proxy_cache_valid proxy_connect_timeout proxy_headers_hash_bucket_size proxy_headers_hash_max_size proxy_hide_header proxy_ignore_client_abort proxy_ignore_headers proxy_intercept_errors proxy_max_temp_file_size proxy_method proxy_next_upstream proxy_pass_error_message proxy_pass_header proxy_pass_request_body proxy_pass_request_headers proxy_read_timeout proxy_redirect proxy_send_lowat proxy_send_timeout proxy_set_body proxy_set_header proxy_ssl_session_reuse proxy_store proxy_store_access proxy_temp_file_write_size proxy_temp_path proxy_timeout proxy_upstream_fail_timeout proxy_upstream_max_fails random_index read_ahead real_ip_header recursive_error_pages request_pool_size reset_timedout_connection resolver resolver_timeout rewrite_log rtsig_overflow_events rtsig_overflow_test rtsig_overflow_threshold rtsig_signo satisfy secure_link_secret send_lowat send_timeout sendfile sendfile_max_chunk server_name_in_redirect server_names_hash_bucket_size server_names_hash_max_size server_tokens set_real_ip_from smtp_auth smtp_capabilities smtp_client_buffer smtp_greeting_delay so_keepalive source_charset ssi ssi_ignore_recycled_buffers ssi_min_file_chunk ssi_silent_errors ssi_types ssi_value_length ssl ssl_certificate ssl_certificate_key ssl_ciphers ssl_client_certificate ssl_crl ssl_dhparam ssl_engine ssl_prefer_server_ciphers ssl_protocols ssl_session_cache ssl_session_timeout ssl_verify_client ssl_verify_depth starttls stub_status sub_filter sub_filter_once sub_filter_types tcp_nodelay tcp_nopush thread_stack_size timeout timer_resolution types_hash_bucket_size types_hash_max_size underscores_in_headers uninitialized_variable_warn use user userid userid_domain userid_expires userid_mark userid_name userid_p3p userid_path userid_service valid_referers variables_hash_bucket_size variables_hash_max_size worker_connections worker_cpu_affinity worker_priority worker_processes worker_rlimit_core worker_rlimit_nofile worker_rlimit_sigpending worker_threads working_directory xclient xml_entities xslt_stylesheet xslt_typesdrew@li229-23"
   );

   var keywords_block = words$b(
     /* ngxDirectiveBlock */ "http mail events server types location upstream charset_map limit_except if geo map"
   );

   var keywords_important = words$b(
     /* ngxDirectiveImportant */ "include root server server_name listen internal proxy_pass memcached_pass fastcgi_pass try_files"
   );

   var type$2;
   function ret(style, tp) {type$2 = tp; return style;}

   function tokenBase$q(stream, state) {


     stream.eatWhile(/[\w\$_]/);

     var cur = stream.current();


     if (keywords$n.propertyIsEnumerable(cur)) {
       return "keyword";
     }
     else if (keywords_block.propertyIsEnumerable(cur)) {
       return "controlKeyword";
     }
     else if (keywords_important.propertyIsEnumerable(cur)) {
       return "controlKeyword";
     }
     /**/

     var ch = stream.next();
     if (ch == "@") {stream.eatWhile(/[\w\\\-]/); return ret("meta", stream.current());}
     else if (ch == "/" && stream.eat("*")) {
       state.tokenize = tokenCComment$2;
       return tokenCComment$2(stream, state);
     }
     else if (ch == "<" && stream.eat("!")) {
       state.tokenize = tokenSGMLComment;
       return tokenSGMLComment(stream, state);
     }
     else if (ch == "=") ret(null, "compare");
     else if ((ch == "~" || ch == "|") && stream.eat("=")) return ret(null, "compare");
     else if (ch == "\"" || ch == "'") {
       state.tokenize = tokenString$i(ch);
       return state.tokenize(stream, state);
     }
     else if (ch == "#") {
       stream.skipToEnd();
       return ret("comment", "comment");
     }
     else if (ch == "!") {
       stream.match(/^\s*\w*/);
       return ret("keyword", "important");
     }
     else if (/\d/.test(ch)) {
       stream.eatWhile(/[\w.%]/);
       return ret("number", "unit");
     }
     else if (/[,.+>*\/]/.test(ch)) {
       return ret(null, "select-op");
     }
     else if (/[;{}:\[\]]/.test(ch)) {
       return ret(null, ch);
     }
     else {
       stream.eatWhile(/[\w\\\-]/);
       return ret("variable", "variable");
     }
   }

   function tokenCComment$2(stream, state) {
     var maybeEnd = false, ch;
     while ((ch = stream.next()) != null) {
       if (maybeEnd && ch == "/") {
         state.tokenize = tokenBase$q;
         break;
       }
       maybeEnd = (ch == "*");
     }
     return ret("comment", "comment");
   }

   function tokenSGMLComment(stream, state) {
     var dashes = 0, ch;
     while ((ch = stream.next()) != null) {
       if (dashes >= 2 && ch == ">") {
         state.tokenize = tokenBase$q;
         break;
       }
       dashes = (ch == "-") ? dashes + 1 : 0;
     }
     return ret("comment", "comment");
   }

   function tokenString$i(quote) {
     return function(stream, state) {
       var escaped = false, ch;
       while ((ch = stream.next()) != null) {
         if (ch == quote && !escaped)
           break;
         escaped = !escaped && ch == "\\";
       }
       if (!escaped) state.tokenize = tokenBase$q;
       return ret("string", "string");
     };
   }

   const nginx = {
     name: "nginx",
     startState: function() {
       return {tokenize: tokenBase$q,
               baseIndent: 0,
               stack: []};
     },

     token: function(stream, state) {
       if (stream.eatSpace()) return null;
       type$2 = null;
       var style = state.tokenize(stream, state);

       var context = state.stack[state.stack.length-1];
       if (type$2 == "hash" && context == "rule") style = "atom";
       else if (style == "variable") {
         if (context == "rule") style = "number";
         else if (!context || context == "@media{") style = "tag";
       }

       if (context == "rule" && /^[\{\};]$/.test(type$2))
         state.stack.pop();
       if (type$2 == "{") {
         if (context == "@media") state.stack[state.stack.length-1] = "@media{";
         else state.stack.push("{");
       }
       else if (type$2 == "}") state.stack.pop();
       else if (type$2 == "@media") state.stack.push("@media");
       else if (context == "{" && type$2 != "comment") state.stack.push("rule");
       return style;
     },

     indent: function(state, textAfter, cx) {
       var n = state.stack.length;
       if (/^\}/.test(textAfter))
         n -= state.stack[state.stack.length-1] == "rule" ? 2 : 1;
       return state.baseIndent + n * cx.unit;
     },

     languageData: {
       indentOnInput: /^\s*\}$/
     }
   };

   var nginx$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      nginx: nginx
   });

   const nsis = simpleMode({
     start:[
       // Numbers
       {regex: /(?:[+-]?)(?:0x[\d,a-f]+)|(?:0o[0-7]+)|(?:0b[0,1]+)|(?:\d+.?\d*)/, token: "number"},

       // Strings
       { regex: /"(?:[^\\"]|\\.)*"?/, token: "string" },
       { regex: /'(?:[^\\']|\\.)*'?/, token: "string" },
       { regex: /`(?:[^\\`]|\\.)*`?/, token: "string" },

       // Compile Time Commands
       {regex: /^\s*(?:\!(addincludedir|addplugindir|appendfile|cd|define|delfile|echo|error|execute|finalize|getdllversion|gettlbversion|include|insertmacro|macro|macroend|makensis|packhdr|pragma|searchparse|searchreplace|system|tempfile|undef|uninstfinalize|verbose|warning))\b/i, token: "keyword"},

       // Conditional Compilation
       {regex: /^\s*(?:\!(if(?:n?def)?|ifmacron?def|macro))\b/i, token: "keyword", indent: true},
       {regex: /^\s*(?:\!(else|endif|macroend))\b/i, token: "keyword", dedent: true},

       // Runtime Commands
       {regex: /^\s*(?:Abort|AddBrandingImage|AddSize|AllowRootDirInstall|AllowSkipFiles|AutoCloseWindow|BGFont|BGGradient|BrandingText|BringToFront|Call|CallInstDLL|Caption|ChangeUI|CheckBitmap|ClearErrors|CompletedText|ComponentText|CopyFiles|CRCCheck|CreateDirectory|CreateFont|CreateShortCut|Delete|DeleteINISec|DeleteINIStr|DeleteRegKey|DeleteRegValue|DetailPrint|DetailsButtonText|DirText|DirVar|DirVerify|EnableWindow|EnumRegKey|EnumRegValue|Exch|Exec|ExecShell|ExecShellWait|ExecWait|ExpandEnvStrings|File|FileBufSize|FileClose|FileErrorText|FileOpen|FileRead|FileReadByte|FileReadUTF16LE|FileReadWord|FileWriteUTF16LE|FileSeek|FileWrite|FileWriteByte|FileWriteWord|FindClose|FindFirst|FindNext|FindWindow|FlushINI|GetCurInstType|GetCurrentAddress|GetDlgItem|GetDLLVersion|GetDLLVersionLocal|GetErrorLevel|GetFileTime|GetFileTimeLocal|GetFullPathName|GetFunctionAddress|GetInstDirError|GetKnownFolderPath|GetLabelAddress|GetTempFileName|GetWinVer|Goto|HideWindow|Icon|IfAbort|IfErrors|IfFileExists|IfRebootFlag|IfRtlLanguage|IfShellVarContextAll|IfSilent|InitPluginsDir|InstallButtonText|InstallColors|InstallDir|InstallDirRegKey|InstProgressFlags|InstType|InstTypeGetText|InstTypeSetText|Int64Cmp|Int64CmpU|Int64Fmt|IntCmp|IntCmpU|IntFmt|IntOp|IntPtrCmp|IntPtrCmpU|IntPtrOp|IsWindow|LangString|LicenseBkColor|LicenseData|LicenseForceSelection|LicenseLangString|LicenseText|LoadAndSetImage|LoadLanguageFile|LockWindow|LogSet|LogText|ManifestDPIAware|ManifestLongPathAware|ManifestMaxVersionTested|ManifestSupportedOS|MessageBox|MiscButtonText|Name|Nop|OutFile|Page|PageCallbacks|PEAddResource|PEDllCharacteristics|PERemoveResource|PESubsysVer|Pop|Push|Quit|ReadEnvStr|ReadINIStr|ReadRegDWORD|ReadRegStr|Reboot|RegDLL|Rename|RequestExecutionLevel|ReserveFile|Return|RMDir|SearchPath|SectionGetFlags|SectionGetInstTypes|SectionGetSize|SectionGetText|SectionIn|SectionSetFlags|SectionSetInstTypes|SectionSetSize|SectionSetText|SendMessage|SetAutoClose|SetBrandingImage|SetCompress|SetCompressor|SetCompressorDictSize|SetCtlColors|SetCurInstType|SetDatablockOptimize|SetDateSave|SetDetailsPrint|SetDetailsView|SetErrorLevel|SetErrors|SetFileAttributes|SetFont|SetOutPath|SetOverwrite|SetRebootFlag|SetRegView|SetShellVarContext|SetSilent|ShowInstDetails|ShowUninstDetails|ShowWindow|SilentInstall|SilentUnInstall|Sleep|SpaceTexts|StrCmp|StrCmpS|StrCpy|StrLen|SubCaption|Target|Unicode|UninstallButtonText|UninstallCaption|UninstallIcon|UninstallSubCaption|UninstallText|UninstPage|UnRegDLL|Var|VIAddVersionKey|VIFileVersion|VIProductVersion|WindowIcon|WriteINIStr|WriteRegBin|WriteRegDWORD|WriteRegExpandStr|WriteRegMultiStr|WriteRegNone|WriteRegStr|WriteUninstaller|XPStyle)\b/i, token: "keyword"},
       {regex: /^\s*(?:Function|PageEx|Section(?:Group)?)\b/i, token: "keyword", indent: true},
       {regex: /^\s*(?:(Function|PageEx|Section(?:Group)?)End)\b/i, token: "keyword", dedent: true},

       // Command Options
       {regex: /\b(?:ARCHIVE|FILE_ATTRIBUTE_ARCHIVE|FILE_ATTRIBUTE_HIDDEN|FILE_ATTRIBUTE_NORMAL|FILE_ATTRIBUTE_OFFLINE|FILE_ATTRIBUTE_READONLY|FILE_ATTRIBUTE_SYSTEM|FILE_ATTRIBUTE_TEMPORARY|HIDDEN|HKCC|HKCR(32|64)?|HKCU(32|64)?|HKDD|HKEY_CLASSES_ROOT|HKEY_CURRENT_CONFIG|HKEY_CURRENT_USER|HKEY_DYN_DATA|HKEY_LOCAL_MACHINE|HKEY_PERFORMANCE_DATA|HKEY_USERS|HKLM(32|64)?|HKPD|HKU|IDABORT|IDCANCEL|IDD_DIR|IDD_INST|IDD_INSTFILES|IDD_LICENSE|IDD_SELCOM|IDD_UNINST|IDD_VERIFY|IDIGNORE|IDNO|IDOK|IDRETRY|IDYES|MB_ABORTRETRYIGNORE|MB_DEFBUTTON1|MB_DEFBUTTON2|MB_DEFBUTTON3|MB_DEFBUTTON4|MB_ICONEXCLAMATION|MB_ICONINFORMATION|MB_ICONQUESTION|MB_ICONSTOP|MB_OK|MB_OKCANCEL|MB_RETRYCANCEL|MB_RIGHT|MB_RTLREADING|MB_SETFOREGROUND|MB_TOPMOST|MB_USERICON|MB_YESNO|MB_YESNOCANCEL|NORMAL|OFFLINE|READONLY|SHCTX|SHELL_CONTEXT|SW_HIDE|SW_SHOWDEFAULT|SW_SHOWMAXIMIZED|SW_SHOWMINIMIZED|SW_SHOWNORMAL|SYSTEM|TEMPORARY)\b/i, token: "atom"},
       {regex: /\b(?:admin|all|amd64-unicode|auto|both|bottom|bzip2|components|current|custom|directory|false|force|hide|highest|ifdiff|ifnewer|instfiles|lastused|leave|left|license|listonly|lzma|nevershow|none|normal|notset|off|on|right|show|silent|silentlog|textonly|top|true|try|un\.components|un\.custom|un\.directory|un\.instfiles|un\.license|uninstConfirm|user|Win10|Win7|Win8|WinVista|x-86-(ansi|unicode)|zlib)\b/i, token: "builtin"},

       // LogicLib.nsh
       {regex: /\$\{(?:And(?:If(?:Not)?|Unless)|Break|Case(?:2|3|4|5|Else)?|Continue|Default|Do(?:Until|While)?|Else(?:If(?:Not)?|Unless)?|End(?:If|Select|Switch)|Exit(?:Do|For|While)|For(?:Each)?|If(?:Cmd|Not(?:Then)?|Then)?|Loop(?:Until|While)?|Or(?:If(?:Not)?|Unless)|Select|Switch|Unless|While)\}/i, token: "variable-2", indent: true},

       // FileFunc.nsh
       {regex: /\$\{(?:BannerTrimPath|DirState|DriveSpace|Get(BaseName|Drives|ExeName|ExePath|FileAttributes|FileExt|FileName|FileVersion|Options|OptionsS|Parameters|Parent|Root|Size|Time)|Locate|RefreshShellIcons)\}/i, token: "variable-2", dedent: true},

       // Memento.nsh
       {regex: /\$\{(?:Memento(?:Section(?:Done|End|Restore|Save)?|UnselectedSection))\}/i, token: "variable-2", dedent: true},

       // TextFunc.nsh
       {regex: /\$\{(?:Config(?:Read|ReadS|Write|WriteS)|File(?:Join|ReadFromEnd|Recode)|Line(?:Find|Read|Sum)|Text(?:Compare|CompareS)|TrimNewLines)\}/i, token: "variable-2", dedent: true},

       // WinVer.nsh
       {regex: /\$\{(?:(?:At(?:Least|Most)|Is)(?:ServicePack|Win(?:7|8|10|95|98|200(?:0|3|8(?:R2)?)|ME|NT4|Vista|XP))|Is(?:NT|Server))\}/i, token: "variable", dedent: true},

       // WordFunc.nsh
       {regex: /\$\{(?:StrFilterS?|Version(?:Compare|Convert)|Word(?:AddS?|Find(?:(?:2|3)X)?S?|InsertS?|ReplaceS?))\}/i, token: "keyword", dedent: true},

       // x64.nsh
       {regex: /\$\{(?:RunningX64)\}/i, token: "variable", dedent: true},
       {regex: /\$\{(?:Disable|Enable)X64FSRedirection\}/i, token: "keyword", dedent: true},

       // Line Comment
       {regex: /(#|;).*/, token: "comment"},

       // Block Comment
       {regex: /\/\*/, token: "comment", next: "comment"},

       // Operator
       {regex: /[-+\/*=<>!]+/, token: "operator"},

       // Variable
       {regex: /\$\w[\w\.]*/, token: "variable"},

       // Constant
       {regex: /\${[\!\w\.:-]+}/, token: "variableName.constant"},

       // Language String
       {regex: /\$\([\!\w\.:-]+\)/, token: "atom"}
     ],
     comment: [
       {regex: /.*?\*\//, token: "comment", next: "start"},
       {regex: /.*/, token: "comment"}
     ],
     languageData: {
       name: "nsis",
       indentOnInput: /^\s*((Function|PageEx|Section|Section(Group)?)End|(\!(endif|macroend))|\$\{(End(If|Unless|While)|Loop(Until)|Next)\})$/i,
       commentTokens: {line: "#", block: {open: "/*", close: "*/"}}
     }
   });

   var nsis$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      nsis: nsis
   });

   var Location = {
     PRE_SUBJECT         : 0,
     WRITING_SUB_URI     : 1,
     WRITING_BNODE_URI   : 2,
     PRE_PRED            : 3,
     WRITING_PRED_URI    : 4,
     PRE_OBJ             : 5,
     WRITING_OBJ_URI     : 6,
     WRITING_OBJ_BNODE   : 7,
     WRITING_OBJ_LITERAL : 8,
     WRITING_LIT_LANG    : 9,
     WRITING_LIT_TYPE    : 10,
     POST_OBJ            : 11,
     ERROR               : 12
   };
   function transitState(currState, c) {
     var currLocation = currState.location;
     var ret;

     // Opening.
     if     (currLocation == Location.PRE_SUBJECT && c == '<') ret = Location.WRITING_SUB_URI;
     else if(currLocation == Location.PRE_SUBJECT && c == '_') ret = Location.WRITING_BNODE_URI;
     else if(currLocation == Location.PRE_PRED    && c == '<') ret = Location.WRITING_PRED_URI;
     else if(currLocation == Location.PRE_OBJ     && c == '<') ret = Location.WRITING_OBJ_URI;
     else if(currLocation == Location.PRE_OBJ     && c == '_') ret = Location.WRITING_OBJ_BNODE;
     else if(currLocation == Location.PRE_OBJ     && c == '"') ret = Location.WRITING_OBJ_LITERAL;

     // Closing.
     else if(currLocation == Location.WRITING_SUB_URI     && c == '>') ret = Location.PRE_PRED;
     else if(currLocation == Location.WRITING_BNODE_URI   && c == ' ') ret = Location.PRE_PRED;
     else if(currLocation == Location.WRITING_PRED_URI    && c == '>') ret = Location.PRE_OBJ;
     else if(currLocation == Location.WRITING_OBJ_URI     && c == '>') ret = Location.POST_OBJ;
     else if(currLocation == Location.WRITING_OBJ_BNODE   && c == ' ') ret = Location.POST_OBJ;
     else if(currLocation == Location.WRITING_OBJ_LITERAL && c == '"') ret = Location.POST_OBJ;
     else if(currLocation == Location.WRITING_LIT_LANG && c == ' ') ret = Location.POST_OBJ;
     else if(currLocation == Location.WRITING_LIT_TYPE && c == '>') ret = Location.POST_OBJ;

     // Closing typed and language literal.
     else if(currLocation == Location.WRITING_OBJ_LITERAL && c == '@') ret = Location.WRITING_LIT_LANG;
     else if(currLocation == Location.WRITING_OBJ_LITERAL && c == '^') ret = Location.WRITING_LIT_TYPE;

     // Spaces.
     else if( c == ' ' &&
              (
                currLocation == Location.PRE_SUBJECT ||
                  currLocation == Location.PRE_PRED    ||
                  currLocation == Location.PRE_OBJ     ||
                  currLocation == Location.POST_OBJ
              )
            ) ret = currLocation;

     // Reset.
     else if(currLocation == Location.POST_OBJ && c == '.') ret = Location.PRE_SUBJECT;

     // Error
     else ret = Location.ERROR;

     currState.location=ret;
   }

   const ntriples = {
     name: "ntriples",
     startState: function() {
       return {
         location : Location.PRE_SUBJECT,
         uris     : [],
         anchors  : [],
         bnodes   : [],
         langs    : [],
         types    : []
       };
     },
     token: function(stream, state) {
       var ch = stream.next();
       if(ch == '<') {
         transitState(state, ch);
         var parsedURI = '';
         stream.eatWhile( function(c) { if( c != '#' && c != '>' ) { parsedURI += c; return true; } return false;} );
         state.uris.push(parsedURI);
         if( stream.match('#', false) ) return 'variable';
         stream.next();
         transitState(state, '>');
         return 'variable';
       }
       if(ch == '#') {
         var parsedAnchor = '';
         stream.eatWhile(function(c) { if(c != '>' && c != ' ') { parsedAnchor+= c; return true; } return false;});
         state.anchors.push(parsedAnchor);
         return 'url';
       }
       if(ch == '>') {
         transitState(state, '>');
         return 'variable';
       }
       if(ch == '_') {
         transitState(state, ch);
         var parsedBNode = '';
         stream.eatWhile(function(c) { if( c != ' ' ) { parsedBNode += c; return true; } return false;});
         state.bnodes.push(parsedBNode);
         stream.next();
         transitState(state, ' ');
         return 'builtin';
       }
       if(ch == '"') {
         transitState(state, ch);
         stream.eatWhile( function(c) { return c != '"'; } );
         stream.next();
         if( stream.peek() != '@' && stream.peek() != '^' ) {
           transitState(state, '"');
         }
         return 'string';
       }
       if( ch == '@' ) {
         transitState(state, '@');
         var parsedLang = '';
         stream.eatWhile(function(c) { if( c != ' ' ) { parsedLang += c; return true; } return false;});
         state.langs.push(parsedLang);
         stream.next();
         transitState(state, ' ');
         return 'string.special';
       }
       if( ch == '^' ) {
         stream.next();
         transitState(state, '^');
         var parsedType = '';
         stream.eatWhile(function(c) { if( c != '>' ) { parsedType += c; return true; } return false;} );
         state.types.push(parsedType);
         stream.next();
         transitState(state, '>');
         return 'variable';
       }
       if( ch == ' ' ) {
         transitState(state, ch);
       }
       if( ch == '.' ) {
         transitState(state, ch);
       }
     }
   };

   var ntriples$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      ntriples: ntriples
   });

   function wordRegexp$8(words) {
     return new RegExp("^((" + words.join(")|(") + "))\\b");
   }

   var singleOperators$3 = new RegExp("^[\\+\\-\\*/&|\\^~<>!@'\\\\]");
   var singleDelimiters$1 = new RegExp('^[\\(\\[\\{\\},:=;\\.]');
   var doubleOperators$2 = new RegExp("^((==)|(~=)|(<=)|(>=)|(<<)|(>>)|(\\.[\\+\\-\\*/\\^\\\\]))");
   var doubleDelimiters$1 = new RegExp("^((!=)|(\\+=)|(\\-=)|(\\*=)|(/=)|(&=)|(\\|=)|(\\^=))");
   var tripleDelimiters$1 = new RegExp("^((>>=)|(<<=))");
   var expressionEnd = new RegExp("^[\\]\\)]");
   var identifiers$4 = new RegExp("^[_A-Za-z\xa1-\uffff][_A-Za-z0-9\xa1-\uffff]*");

   var builtins$4 = wordRegexp$8([
     'error', 'eval', 'function', 'abs', 'acos', 'atan', 'asin', 'cos',
     'cosh', 'exp', 'log', 'prod', 'sum', 'log10', 'max', 'min', 'sign', 'sin', 'sinh',
     'sqrt', 'tan', 'reshape', 'break', 'zeros', 'default', 'margin', 'round', 'ones',
     'rand', 'syn', 'ceil', 'floor', 'size', 'clear', 'zeros', 'eye', 'mean', 'std', 'cov',
     'det', 'eig', 'inv', 'norm', 'rank', 'trace', 'expm', 'logm', 'sqrtm', 'linspace', 'plot',
     'title', 'xlabel', 'ylabel', 'legend', 'text', 'grid', 'meshgrid', 'mesh', 'num2str',
     'fft', 'ifft', 'arrayfun', 'cellfun', 'input', 'fliplr', 'flipud', 'ismember'
   ]);

   var keywords$m = wordRegexp$8([
     'return', 'case', 'switch', 'else', 'elseif', 'end', 'endif', 'endfunction',
     'if', 'otherwise', 'do', 'for', 'while', 'try', 'catch', 'classdef', 'properties', 'events',
     'methods', 'global', 'persistent', 'endfor', 'endwhile', 'printf', 'sprintf', 'disp', 'until',
     'continue', 'pkg'
   ]);


   // tokenizers
   function tokenTranspose(stream, state) {
     if (!stream.sol() && stream.peek() === '\'') {
       stream.next();
       state.tokenize = tokenBase$p;
       return 'operator';
     }
     state.tokenize = tokenBase$p;
     return tokenBase$p(stream, state);
   }


   function tokenComment$a(stream, state) {
     if (stream.match(/^.*%}/)) {
       state.tokenize = tokenBase$p;
       return 'comment';
     }  stream.skipToEnd();
     return 'comment';
   }

   function tokenBase$p(stream, state) {
     // whitespaces
     if (stream.eatSpace()) return null;

     // Handle one line Comments
     if (stream.match('%{')){
       state.tokenize = tokenComment$a;
       stream.skipToEnd();
       return 'comment';
     }

     if (stream.match(/^[%#]/)){
       stream.skipToEnd();
       return 'comment';
     }

     // Handle Number Literals
     if (stream.match(/^[0-9\.+-]/, false)) {
       if (stream.match(/^[+-]?0x[0-9a-fA-F]+[ij]?/)) {
         stream.tokenize = tokenBase$p;
         return 'number'; }    if (stream.match(/^[+-]?\d*\.\d+([EeDd][+-]?\d+)?[ij]?/)) { return 'number'; }    if (stream.match(/^[+-]?\d+([EeDd][+-]?\d+)?[ij]?/)) { return 'number'; }  }
     if (stream.match(wordRegexp$8(['nan','NaN','inf','Inf']))) { return 'number'; }
     // Handle Strings
     var m = stream.match(/^"(?:[^"]|"")*("|$)/) || stream.match(/^'(?:[^']|'')*('|$)/);
     if (m) { return m[1] ? 'string' : "error"; }

     // Handle words
     if (stream.match(keywords$m)) { return 'keyword'; }  if (stream.match(builtins$4)) { return 'builtin'; }  if (stream.match(identifiers$4)) { return 'variable'; }
     if (stream.match(singleOperators$3) || stream.match(doubleOperators$2)) { return 'operator'; }  if (stream.match(singleDelimiters$1) || stream.match(doubleDelimiters$1) || stream.match(tripleDelimiters$1)) { return null; }
     if (stream.match(expressionEnd)) {
       state.tokenize = tokenTranspose;
       return null;
     }

     // Handle non-detected items
     stream.next();
     return 'error';
   }

   const octave = {
     name: "octave",

     startState: function() {
       return {
         tokenize: tokenBase$p
       };
     },

     token: function(stream, state) {
       var style = state.tokenize(stream, state);
       if (style === 'number' || style === 'variable'){
         state.tokenize = tokenTranspose;
       }
       return style;
     },

     languageData: {
       commentTokens: {line: "%"}
     }
   };

   var octave$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      octave: octave
   });

   function wordRegexp$7(words) {
     return new RegExp("^((" + words.join(")|(") + "))\\b");
   }

   var singleOperators$2 = /[\^@!\|<>#~\.\*\-\+\\/,=]/;
   var doubleOperators$1 = /(<-)|(:=)|(=<)|(>=)|(<=)|(<:)|(>:)|(=:)|(\\=)|(\\=:)|(!!)|(==)|(::)/;
   var tripleOperators = /(:::)|(\.\.\.)|(=<:)|(>=:)/;

   var middle$1 = ["in", "then", "else", "of", "elseof", "elsecase", "elseif", "catch",
                 "finally", "with", "require", "prepare", "import", "export", "define", "do"];
   var end = ["end"];

   var atoms$6 = wordRegexp$7(["true", "false", "nil", "unit"]);
   var commonKeywords$3 = wordRegexp$7(["andthen", "at", "attr", "declare", "feat", "from", "lex",
                                    "mod", "div", "mode", "orelse", "parser", "prod", "prop", "scanner", "self", "syn", "token"]);
   var openingKeywords$1 = wordRegexp$7(["local", "proc", "fun", "case", "class", "if", "cond", "or", "dis",
                                     "choice", "not", "thread", "try", "raise", "lock", "for", "suchthat", "meth", "functor"]);
   var middleKeywords$1 = wordRegexp$7(middle$1);
   var endKeywords$1 = wordRegexp$7(end);

   // Tokenizers
   function tokenBase$o(stream, state) {
     if (stream.eatSpace()) {
       return null;
     }

     // Brackets
     if(stream.match(/[{}]/)) {
       return "bracket";
     }

     // Special [] keyword
     if (stream.match('[]')) {
       return "keyword"
     }

     // Operators
     if (stream.match(tripleOperators) || stream.match(doubleOperators$1)) {
       return "operator";
     }

     // Atoms
     if(stream.match(atoms$6)) {
       return 'atom';
     }

     // Opening keywords
     var matched = stream.match(openingKeywords$1);
     if (matched) {
       if (!state.doInCurrentLine)
         state.currentIndent++;
       else
         state.doInCurrentLine = false;

       // Special matching for signatures
       if(matched[0] == "proc" || matched[0] == "fun")
         state.tokenize = tokenFunProc;
       else if(matched[0] == "class")
         state.tokenize = tokenClass;
       else if(matched[0] == "meth")
         state.tokenize = tokenMeth;

       return 'keyword';
     }

     // Middle and other keywords
     if (stream.match(middleKeywords$1) || stream.match(commonKeywords$3)) {
       return "keyword"
     }

     // End keywords
     if (stream.match(endKeywords$1)) {
       state.currentIndent--;
       return 'keyword';
     }

     // Eat the next char for next comparisons
     var ch = stream.next();

     // Strings
     if (ch == '"' || ch == "'") {
       state.tokenize = tokenString$h(ch);
       return state.tokenize(stream, state);
     }

     // Numbers
     if (/[~\d]/.test(ch)) {
       if (ch == "~") {
         if(! /^[0-9]/.test(stream.peek()))
           return null;
         else if (( stream.next() == "0" && stream.match(/^[xX][0-9a-fA-F]+/)) || stream.match(/^[0-9]*(\.[0-9]+)?([eE][~+]?[0-9]+)?/))
           return "number";
       }

       if ((ch == "0" && stream.match(/^[xX][0-9a-fA-F]+/)) || stream.match(/^[0-9]*(\.[0-9]+)?([eE][~+]?[0-9]+)?/))
         return "number";

       return null;
     }

     // Comments
     if (ch == "%") {
       stream.skipToEnd();
       return 'comment';
     }
     else if (ch == "/") {
       if (stream.eat("*")) {
         state.tokenize = tokenComment$9;
         return tokenComment$9(stream, state);
       }
     }

     // Single operators
     if(singleOperators$2.test(ch)) {
       return "operator";
     }

     // If nothing match, we skip the entire alphanumerical block
     stream.eatWhile(/\w/);

     return "variable";
   }

   function tokenClass(stream, state) {
     if (stream.eatSpace()) {
       return null;
     }
     stream.match(/([A-Z][A-Za-z0-9_]*)|(`.+`)/);
     state.tokenize = tokenBase$o;
     return "type"
   }

   function tokenMeth(stream, state) {
     if (stream.eatSpace()) {
       return null;
     }
     stream.match(/([a-zA-Z][A-Za-z0-9_]*)|(`.+`)/);
     state.tokenize = tokenBase$o;
     return "def"
   }

   function tokenFunProc(stream, state) {
     if (stream.eatSpace()) {
       return null;
     }

     if(!state.hasPassedFirstStage && stream.eat("{")) {
       state.hasPassedFirstStage = true;
       return "bracket";
     }
     else if(state.hasPassedFirstStage) {
       stream.match(/([A-Z][A-Za-z0-9_]*)|(`.+`)|\$/);
       state.hasPassedFirstStage = false;
       state.tokenize = tokenBase$o;
       return "def"
     }
     else {
       state.tokenize = tokenBase$o;
       return null;
     }
   }

   function tokenComment$9(stream, state) {
     var maybeEnd = false, ch;
     while (ch = stream.next()) {
       if (ch == "/" && maybeEnd) {
         state.tokenize = tokenBase$o;
         break;
       }
       maybeEnd = (ch == "*");
     }
     return "comment";
   }

   function tokenString$h(quote) {
     return function (stream, state) {
       var escaped = false, next, end = false;
       while ((next = stream.next()) != null) {
         if (next == quote && !escaped) {
           end = true;
           break;
         }
         escaped = !escaped && next == "\\";
       }
       if (end || !escaped)
         state.tokenize = tokenBase$o;
       return "string";
     };
   }

   function buildElectricInputRegEx() {
     // Reindentation should occur on [] or on a match of any of
     // the block closing keywords, at the end of a line.
     var allClosings = middle$1.concat(end);
     return new RegExp("[\\[\\]]|(" + allClosings.join("|") + ")$");
   }

   const oz = {
     name: "oz",

     startState: function () {
       return {
         tokenize: tokenBase$o,
         currentIndent: 0,
         doInCurrentLine: false,
         hasPassedFirstStage: false
       };
     },

     token: function (stream, state) {
       if (stream.sol())
         state.doInCurrentLine = 0;

       return state.tokenize(stream, state);
     },

     indent: function (state, textAfter, cx) {
       var trueText = textAfter.replace(/^\s+|\s+$/g, '');

       if (trueText.match(endKeywords$1) || trueText.match(middleKeywords$1) || trueText.match(/(\[])/))
         return cx.unit * (state.currentIndent - 1);

       if (state.currentIndent < 0)
         return 0;

       return state.currentIndent * cx.unit
     },

     languageData: {
       indentOnInut: buildElectricInputRegEx(),
       commentTokens: {line: "%", block: {open: "/*", close: "*/"}}
     }
   };

   var oz$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      oz: oz
   });

   function words$a(str) {
     var obj = {}, words = str.split(" ");
     for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
     return obj;
   }
   var keywords$l = words$a(
     "absolute and array asm begin case const constructor destructor div do " +
       "downto else end file for function goto if implementation in inherited " +
       "inline interface label mod nil not object of operator or packed procedure " +
       "program record reintroduce repeat self set shl shr string then to type " +
       "unit until uses var while with xor as class dispinterface except exports " +
       "finalization finally initialization inline is library on out packed " +
       "property raise resourcestring threadvar try absolute abstract alias " +
       "assembler bitpacked break cdecl continue cppdecl cvar default deprecated " +
       "dynamic enumerator experimental export external far far16 forward generic " +
       "helper implements index interrupt iocheck local message name near " +
       "nodefault noreturn nostackframe oldfpccall otherwise overload override " +
       "pascal platform private protected public published read register " +
       "reintroduce result safecall saveregisters softfloat specialize static " +
       "stdcall stored strict unaligned unimplemented varargs virtual write");
   var atoms$5 = {"null": true};

   var isOperatorChar$7 = /[+\-*&%=<>!?|\/]/;

   function tokenBase$n(stream, state) {
     var ch = stream.next();
     if (ch == "#" && state.startOfLine) {
       stream.skipToEnd();
       return "meta";
     }
     if (ch == '"' || ch == "'") {
       state.tokenize = tokenString$g(ch);
       return state.tokenize(stream, state);
     }
     if (ch == "(" && stream.eat("*")) {
       state.tokenize = tokenComment$8;
       return tokenComment$8(stream, state);
     }
     if (ch == "{") {
       state.tokenize = tokenCommentBraces;
       return tokenCommentBraces(stream, state);
     }
     if (/[\[\]\(\),;\:\.]/.test(ch)) {
       return null;
     }
     if (/\d/.test(ch)) {
       stream.eatWhile(/[\w\.]/);
       return "number";
     }
     if (ch == "/") {
       if (stream.eat("/")) {
         stream.skipToEnd();
         return "comment";
       }
     }
     if (isOperatorChar$7.test(ch)) {
       stream.eatWhile(isOperatorChar$7);
       return "operator";
     }
     stream.eatWhile(/[\w\$_]/);
     var cur = stream.current();
     if (keywords$l.propertyIsEnumerable(cur)) return "keyword";
     if (atoms$5.propertyIsEnumerable(cur)) return "atom";
     return "variable";
   }

   function tokenString$g(quote) {
     return function(stream, state) {
       var escaped = false, next, end = false;
       while ((next = stream.next()) != null) {
         if (next == quote && !escaped) {end = true; break;}
         escaped = !escaped && next == "\\";
       }
       if (end || !escaped) state.tokenize = null;
       return "string";
     };
   }

   function tokenComment$8(stream, state) {
     var maybeEnd = false, ch;
     while (ch = stream.next()) {
       if (ch == ")" && maybeEnd) {
         state.tokenize = null;
         break;
       }
       maybeEnd = (ch == "*");
     }
     return "comment";
   }

   function tokenCommentBraces(stream, state) {
     var ch;
     while (ch = stream.next()) {
       if (ch == "}") {
         state.tokenize = null;
         break;
       }
     }
     return "comment";
   }

   // Interface

   const pascal = {
     name: "pascal",

     startState: function() {
       return {tokenize: null};
     },

     token: function(stream, state) {
       if (stream.eatSpace()) return null;
       var style = (state.tokenize || tokenBase$n)(stream, state);
       if (style == "comment" || style == "meta") return style;
       return style;
     },

     languageData: {
       indentOnInput: /^\s*[{}]$/,
       commentTokens: {block: {open: "(*", close: "*)"}}
     }
   };

   var pascal$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      pascal: pascal
   });

   // it's like "peek", but need for look-ahead or look-behind if index < 0
   function look(stream, c){
     return stream.string.charAt(stream.pos+(c||0));
   }

   // return a part of prefix of current stream from current position
   function prefix(stream, c){
     if(c){
       var x=stream.pos-c;
       return stream.string.substr((x>=0?x:0),c);}
     else {
       return stream.string.substr(0,stream.pos-1);
     }
   }

   // return a part of suffix of current stream from current position
   function suffix(stream, c){
     var y=stream.string.length;
     var x=y-stream.pos+1;
     return stream.string.substr(stream.pos,(c&&c<y?c:x));
   }

   // eating and vomiting a part of stream from current position
   function eatSuffix(stream, c){
     var x=stream.pos+c;
     var y;
     if(x<=0)
       stream.pos=0;
     else if(x>=(y=stream.string.length-1))
       stream.pos=y;
     else
       stream.pos=x;
   }

   // http://perldoc.perl.org
   var PERL={                                      //   null - magic touch
     //   1 - keyword
     //   2 - def
     //   3 - atom
     //   4 - operator
     //   5 - builtin (predefined)
     //   [x,y] - x=1,2,3; y=must be defined if x{...}
     //      PERL operators
     '->':   4,
     '++':   4,
     '--':   4,
     '**':   4,
     //   ! ~ \ and unary + and -
     '=~':   4,
     '!~':   4,
     '*':   4,
     '/':   4,
     '%':   4,
     'x':   4,
     '+':   4,
     '-':   4,
     '.':   4,
     '<<':   4,
     '>>':   4,
     //   named unary operators
     '<':   4,
     '>':   4,
     '<=':   4,
     '>=':   4,
     'lt':   4,
     'gt':   4,
     'le':   4,
     'ge':   4,
     '==':   4,
     '!=':   4,
     '<=>':   4,
     'eq':   4,
     'ne':   4,
     'cmp':   4,
     '~~':   4,
     '&':   4,
     '|':   4,
     '^':   4,
     '&&':   4,
     '||':   4,
     '//':   4,
     '..':   4,
     '...':   4,
     '?':   4,
     ':':   4,
     '=':   4,
     '+=':   4,
     '-=':   4,
     '*=':   4,  //   etc. ???
     ',':   4,
     '=>':   4,
     '::':   4,
     //   list operators (rightward)
     'not':   4,
     'and':   4,
     'or':   4,
     'xor':   4,
     //      PERL predefined variables (I know, what this is a paranoid idea, but may be needed for people, who learn PERL, and for me as well, ...and may be for you?;)
     'BEGIN':   [5,1],
     'END':   [5,1],
     'PRINT':   [5,1],
     'PRINTF':   [5,1],
     'GETC':   [5,1],
     'READ':   [5,1],
     'READLINE':   [5,1],
     'DESTROY':   [5,1],
     'TIE':   [5,1],
     'TIEHANDLE':   [5,1],
     'UNTIE':   [5,1],
     'STDIN':    5,
     'STDIN_TOP':    5,
     'STDOUT':    5,
     'STDOUT_TOP':    5,
     'STDERR':    5,
     'STDERR_TOP':    5,
     '$ARG':    5,
     '$_':    5,
     '@ARG':    5,
     '@_':    5,
     '$LIST_SEPARATOR':    5,
     '$"':    5,
     '$PROCESS_ID':    5,
     '$PID':    5,
     '$$':    5,
     '$REAL_GROUP_ID':    5,
     '$GID':    5,
     '$(':    5,
     '$EFFECTIVE_GROUP_ID':    5,
     '$EGID':    5,
     '$)':    5,
     '$PROGRAM_NAME':    5,
     '$0':    5,
     '$SUBSCRIPT_SEPARATOR':    5,
     '$SUBSEP':    5,
     '$;':    5,
     '$REAL_USER_ID':    5,
     '$UID':    5,
     '$<':    5,
     '$EFFECTIVE_USER_ID':    5,
     '$EUID':    5,
     '$>':    5,
     '$a':    5,
     '$b':    5,
     '$COMPILING':    5,
     '$^C':    5,
     '$DEBUGGING':    5,
     '$^D':    5,
     '${^ENCODING}':    5,
     '$ENV':    5,
     '%ENV':    5,
     '$SYSTEM_FD_MAX':    5,
     '$^F':    5,
     '@F':    5,
     '${^GLOBAL_PHASE}':    5,
     '$^H':    5,
     '%^H':    5,
     '@INC':    5,
     '%INC':    5,
     '$INPLACE_EDIT':    5,
     '$^I':    5,
     '$^M':    5,
     '$OSNAME':    5,
     '$^O':    5,
     '${^OPEN}':    5,
     '$PERLDB':    5,
     '$^P':    5,
     '$SIG':    5,
     '%SIG':    5,
     '$BASETIME':    5,
     '$^T':    5,
     '${^TAINT}':    5,
     '${^UNICODE}':    5,
     '${^UTF8CACHE}':    5,
     '${^UTF8LOCALE}':    5,
     '$PERL_VERSION':    5,
     '$^V':    5,
     '${^WIN32_SLOPPY_STAT}':    5,
     '$EXECUTABLE_NAME':    5,
     '$^X':    5,
     '$1':    5, // - regexp $1, $2...
     '$MATCH':    5,
     '$&':    5,
     '${^MATCH}':    5,
     '$PREMATCH':    5,
     '$`':    5,
     '${^PREMATCH}':    5,
     '$POSTMATCH':    5,
     "$'":    5,
     '${^POSTMATCH}':    5,
     '$LAST_PAREN_MATCH':    5,
     '$+':    5,
     '$LAST_SUBMATCH_RESULT':    5,
     '$^N':    5,
     '@LAST_MATCH_END':    5,
     '@+':    5,
     '%LAST_PAREN_MATCH':    5,
     '%+':    5,
     '@LAST_MATCH_START':    5,
     '@-':    5,
     '%LAST_MATCH_START':    5,
     '%-':    5,
     '$LAST_REGEXP_CODE_RESULT':    5,
     '$^R':    5,
     '${^RE_DEBUG_FLAGS}':    5,
     '${^RE_TRIE_MAXBUF}':    5,
     '$ARGV':    5,
     '@ARGV':    5,
     'ARGV':    5,
     'ARGVOUT':    5,
     '$OUTPUT_FIELD_SEPARATOR':    5,
     '$OFS':    5,
     '$,':    5,
     '$INPUT_LINE_NUMBER':    5,
     '$NR':    5,
     '$.':    5,
     '$INPUT_RECORD_SEPARATOR':    5,
     '$RS':    5,
     '$/':    5,
     '$OUTPUT_RECORD_SEPARATOR':    5,
     '$ORS':    5,
     '$\\':    5,
     '$OUTPUT_AUTOFLUSH':    5,
     '$|':    5,
     '$ACCUMULATOR':    5,
     '$^A':    5,
     '$FORMAT_FORMFEED':    5,
     '$^L':    5,
     '$FORMAT_PAGE_NUMBER':    5,
     '$%':    5,
     '$FORMAT_LINES_LEFT':    5,
     '$-':    5,
     '$FORMAT_LINE_BREAK_CHARACTERS':    5,
     '$:':    5,
     '$FORMAT_LINES_PER_PAGE':    5,
     '$=':    5,
     '$FORMAT_TOP_NAME':    5,
     '$^':    5,
     '$FORMAT_NAME':    5,
     '$~':    5,
     '${^CHILD_ERROR_NATIVE}':    5,
     '$EXTENDED_OS_ERROR':    5,
     '$^E':    5,
     '$EXCEPTIONS_BEING_CAUGHT':    5,
     '$^S':    5,
     '$WARNING':    5,
     '$^W':    5,
     '${^WARNING_BITS}':    5,
     '$OS_ERROR':    5,
     '$ERRNO':    5,
     '$!':    5,
     '%OS_ERROR':    5,
     '%ERRNO':    5,
     '%!':    5,
     '$CHILD_ERROR':    5,
     '$?':    5,
     '$EVAL_ERROR':    5,
     '$@':    5,
     '$OFMT':    5,
     '$#':    5,
     '$*':    5,
     '$ARRAY_BASE':    5,
     '$[':    5,
     '$OLD_PERL_VERSION':    5,
     '$]':    5,
     //      PERL blocks
     'if':[1,1],
     elsif:[1,1],
     'else':[1,1],
     'while':[1,1],
     unless:[1,1],
     'for':[1,1],
     foreach:[1,1],
     //      PERL functions
     'abs':1,     // - absolute value function
     accept:1,     // - accept an incoming socket connect
     alarm:1,     // - schedule a SIGALRM
     'atan2':1,     // - arctangent of Y/X in the range -PI to PI
     bind:1,     // - binds an address to a socket
     binmode:1,     // - prepare binary files for I/O
     bless:1,     // - create an object
     bootstrap:1,     //
     'break':1,     // - break out of a "given" block
     caller:1,     // - get context of the current subroutine call
     chdir:1,     // - change your current working directory
     chmod:1,     // - changes the permissions on a list of files
     chomp:1,     // - remove a trailing record separator from a string
     chop:1,     // - remove the last character from a string
     chown:1,     // - change the ownership on a list of files
     chr:1,     // - get character this number represents
     chroot:1,     // - make directory new root for path lookups
     close:1,     // - close file (or pipe or socket) handle
     closedir:1,     // - close directory handle
     connect:1,     // - connect to a remote socket
     'continue':[1,1], // - optional trailing block in a while or foreach
     'cos':1,     // - cosine function
     crypt:1,     // - one-way passwd-style encryption
     dbmclose:1,     // - breaks binding on a tied dbm file
     dbmopen:1,     // - create binding on a tied dbm file
     'default':1,     //
     defined:1,     // - test whether a value, variable, or function is defined
     'delete':1,     // - deletes a value from a hash
     die:1,     // - raise an exception or bail out
     'do':1,     // - turn a BLOCK into a TERM
     dump:1,     // - create an immediate core dump
     each:1,     // - retrieve the next key/value pair from a hash
     endgrent:1,     // - be done using group file
     endhostent:1,     // - be done using hosts file
     endnetent:1,     // - be done using networks file
     endprotoent:1,     // - be done using protocols file
     endpwent:1,     // - be done using passwd file
     endservent:1,     // - be done using services file
     eof:1,     // - test a filehandle for its end
     'eval':1,     // - catch exceptions or compile and run code
     'exec':1,     // - abandon this program to run another
     exists:1,     // - test whether a hash key is present
     exit:1,     // - terminate this program
     'exp':1,     // - raise I to a power
     fcntl:1,     // - file control system call
     fileno:1,     // - return file descriptor from filehandle
     flock:1,     // - lock an entire file with an advisory lock
     fork:1,     // - create a new process just like this one
     format:1,     // - declare a picture format with use by the write() function
     formline:1,     // - internal function used for formats
     getc:1,     // - get the next character from the filehandle
     getgrent:1,     // - get next group record
     getgrgid:1,     // - get group record given group user ID
     getgrnam:1,     // - get group record given group name
     gethostbyaddr:1,     // - get host record given its address
     gethostbyname:1,     // - get host record given name
     gethostent:1,     // - get next hosts record
     getlogin:1,     // - return who logged in at this tty
     getnetbyaddr:1,     // - get network record given its address
     getnetbyname:1,     // - get networks record given name
     getnetent:1,     // - get next networks record
     getpeername:1,     // - find the other end of a socket connection
     getpgrp:1,     // - get process group
     getppid:1,     // - get parent process ID
     getpriority:1,     // - get current nice value
     getprotobyname:1,     // - get protocol record given name
     getprotobynumber:1,     // - get protocol record numeric protocol
     getprotoent:1,     // - get next protocols record
     getpwent:1,     // - get next passwd record
     getpwnam:1,     // - get passwd record given user login name
     getpwuid:1,     // - get passwd record given user ID
     getservbyname:1,     // - get services record given its name
     getservbyport:1,     // - get services record given numeric port
     getservent:1,     // - get next services record
     getsockname:1,     // - retrieve the sockaddr for a given socket
     getsockopt:1,     // - get socket options on a given socket
     given:1,     //
     glob:1,     // - expand filenames using wildcards
     gmtime:1,     // - convert UNIX time into record or string using Greenwich time
     'goto':1,     // - create spaghetti code
     grep:1,     // - locate elements in a list test true against a given criterion
     hex:1,     // - convert a string to a hexadecimal number
     'import':1,     // - patch a module's namespace into your own
     index:1,     // - find a substring within a string
     'int':1,     // - get the integer portion of a number
     ioctl:1,     // - system-dependent device control system call
     'join':1,     // - join a list into a string using a separator
     keys:1,     // - retrieve list of indices from a hash
     kill:1,     // - send a signal to a process or process group
     last:1,     // - exit a block prematurely
     lc:1,     // - return lower-case version of a string
     lcfirst:1,     // - return a string with just the next letter in lower case
     length:1,     // - return the number of bytes in a string
     'link':1,     // - create a hard link in the filesystem
     listen:1,     // - register your socket as a server
     local: 2,    // - create a temporary value for a global variable (dynamic scoping)
     localtime:1,     // - convert UNIX time into record or string using local time
     lock:1,     // - get a thread lock on a variable, subroutine, or method
     'log':1,     // - retrieve the natural logarithm for a number
     lstat:1,     // - stat a symbolic link
     m:null,  // - match a string with a regular expression pattern
     map:1,     // - apply a change to a list to get back a new list with the changes
     mkdir:1,     // - create a directory
     msgctl:1,     // - SysV IPC message control operations
     msgget:1,     // - get SysV IPC message queue
     msgrcv:1,     // - receive a SysV IPC message from a message queue
     msgsnd:1,     // - send a SysV IPC message to a message queue
     my: 2,    // - declare and assign a local variable (lexical scoping)
     'new':1,     //
     next:1,     // - iterate a block prematurely
     no:1,     // - unimport some module symbols or semantics at compile time
     oct:1,     // - convert a string to an octal number
     open:1,     // - open a file, pipe, or descriptor
     opendir:1,     // - open a directory
     ord:1,     // - find a character's numeric representation
     our: 2,    // - declare and assign a package variable (lexical scoping)
     pack:1,     // - convert a list into a binary representation
     'package':1,     // - declare a separate global namespace
     pipe:1,     // - open a pair of connected filehandles
     pop:1,     // - remove the last element from an array and return it
     pos:1,     // - find or set the offset for the last/next m//g search
     print:1,     // - output a list to a filehandle
     printf:1,     // - output a formatted list to a filehandle
     prototype:1,     // - get the prototype (if any) of a subroutine
     push:1,     // - append one or more elements to an array
     q:null,  // - singly quote a string
     qq:null,  // - doubly quote a string
     qr:null,  // - Compile pattern
     quotemeta:null,  // - quote regular expression magic characters
     qw:null,  // - quote a list of words
     qx:null,  // - backquote quote a string
     rand:1,     // - retrieve the next pseudorandom number
     read:1,     // - fixed-length buffered input from a filehandle
     readdir:1,     // - get a directory from a directory handle
     readline:1,     // - fetch a record from a file
     readlink:1,     // - determine where a symbolic link is pointing
     readpipe:1,     // - execute a system command and collect standard output
     recv:1,     // - receive a message over a Socket
     redo:1,     // - start this loop iteration over again
     ref:1,     // - find out the type of thing being referenced
     rename:1,     // - change a filename
     require:1,     // - load in external functions from a library at runtime
     reset:1,     // - clear all variables of a given name
     'return':1,     // - get out of a function early
     reverse:1,     // - flip a string or a list
     rewinddir:1,     // - reset directory handle
     rindex:1,     // - right-to-left substring search
     rmdir:1,     // - remove a directory
     s:null,  // - replace a pattern with a string
     say:1,     // - print with newline
     scalar:1,     // - force a scalar context
     seek:1,     // - reposition file pointer for random-access I/O
     seekdir:1,     // - reposition directory pointer
     select:1,     // - reset default output or do I/O multiplexing
     semctl:1,     // - SysV semaphore control operations
     semget:1,     // - get set of SysV semaphores
     semop:1,     // - SysV semaphore operations
     send:1,     // - send a message over a socket
     setgrent:1,     // - prepare group file for use
     sethostent:1,     // - prepare hosts file for use
     setnetent:1,     // - prepare networks file for use
     setpgrp:1,     // - set the process group of a process
     setpriority:1,     // - set a process's nice value
     setprotoent:1,     // - prepare protocols file for use
     setpwent:1,     // - prepare passwd file for use
     setservent:1,     // - prepare services file for use
     setsockopt:1,     // - set some socket options
     shift:1,     // - remove the first element of an array, and return it
     shmctl:1,     // - SysV shared memory operations
     shmget:1,     // - get SysV shared memory segment identifier
     shmread:1,     // - read SysV shared memory
     shmwrite:1,     // - write SysV shared memory
     shutdown:1,     // - close down just half of a socket connection
     'sin':1,     // - return the sine of a number
     sleep:1,     // - block for some number of seconds
     socket:1,     // - create a socket
     socketpair:1,     // - create a pair of sockets
     'sort':1,     // - sort a list of values
     splice:1,     // - add or remove elements anywhere in an array
     'split':1,     // - split up a string using a regexp delimiter
     sprintf:1,     // - formatted print into a string
     'sqrt':1,     // - square root function
     srand:1,     // - seed the random number generator
     stat:1,     // - get a file's status information
     state:1,     // - declare and assign a state variable (persistent lexical scoping)
     study:1,     // - optimize input data for repeated searches
     'sub':1,     // - declare a subroutine, possibly anonymously
     'substr':1,     // - get or alter a portion of a string
     symlink:1,     // - create a symbolic link to a file
     syscall:1,     // - execute an arbitrary system call
     sysopen:1,     // - open a file, pipe, or descriptor
     sysread:1,     // - fixed-length unbuffered input from a filehandle
     sysseek:1,     // - position I/O pointer on handle used with sysread and syswrite
     system:1,     // - run a separate program
     syswrite:1,     // - fixed-length unbuffered output to a filehandle
     tell:1,     // - get current seekpointer on a filehandle
     telldir:1,     // - get current seekpointer on a directory handle
     tie:1,     // - bind a variable to an object class
     tied:1,     // - get a reference to the object underlying a tied variable
     time:1,     // - return number of seconds since 1970
     times:1,     // - return elapsed time for self and child processes
     tr:null,  // - transliterate a string
     truncate:1,     // - shorten a file
     uc:1,     // - return upper-case version of a string
     ucfirst:1,     // - return a string with just the next letter in upper case
     umask:1,     // - set file creation mode mask
     undef:1,     // - remove a variable or function definition
     unlink:1,     // - remove one link to a file
     unpack:1,     // - convert binary structure into normal perl variables
     unshift:1,     // - prepend more elements to the beginning of a list
     untie:1,     // - break a tie binding to a variable
     use:1,     // - load in a module at compile time
     utime:1,     // - set a file's last access and modify times
     values:1,     // - return a list of the values in a hash
     vec:1,     // - test or set particular bits in a string
     wait:1,     // - wait for any child process to die
     waitpid:1,     // - wait for a particular child process to die
     wantarray:1,     // - get void vs scalar vs list context of current subroutine call
     warn:1,     // - print debugging info
     when:1,     //
     write:1,     // - print a picture record
     y:null}; // - transliterate a string

   var RXstyle="string.special";
   var RXmodifiers=/[goseximacplud]/;              // NOTE: "m", "s", "y" and "tr" need to correct real modifiers for each regexp type

   function tokenChain(stream,state,chain,style,tail){     // NOTE: chain.length > 2 is not working now (it's for s[...][...]geos;)
     state.chain=null;                               //                                                          12   3tail
     state.style=null;
     state.tail=null;
     state.tokenize=function(stream,state){
       var e=false,c,i=0;
       while(c=stream.next()){
         if(c===chain[i]&&!e){
           if(chain[++i]!==undefined){
             state.chain=chain[i];
             state.style=style;
             state.tail=tail;}
           else if(tail)
             stream.eatWhile(tail);
           state.tokenize=tokenPerl;
           return style;}
         e=!e&&c=="\\";}
       return style;};
     return state.tokenize(stream,state);}

   function tokenSOMETHING(stream,state,string){
     state.tokenize=function(stream,state){
       if(stream.string==string)
         state.tokenize=tokenPerl;
       stream.skipToEnd();
       return "string";};
     return state.tokenize(stream,state);}

   function tokenPerl(stream,state){
     if(stream.eatSpace())
       return null;
     if(state.chain)
       return tokenChain(stream,state,state.chain,state.style,state.tail);
     if(stream.match(/^(\-?((\d[\d_]*)?\.\d+(e[+-]?\d+)?|\d+\.\d*)|0x[\da-fA-F_]+|0b[01_]+|\d[\d_]*(e[+-]?\d+)?)/))
       return 'number';
     if(stream.match(/^<<(?=[_a-zA-Z])/)){                  // NOTE: <<SOMETHING\n...\nSOMETHING\n
       stream.eatWhile(/\w/);
       return tokenSOMETHING(stream,state,stream.current().substr(2));}
     if(stream.sol()&&stream.match(/^\=item(?!\w)/)){// NOTE: \n=item...\n=cut\n
       return tokenSOMETHING(stream,state,'=cut');}
     var ch=stream.next();
     if(ch=='"'||ch=="'"){                           // NOTE: ' or " or <<'SOMETHING'\n...\nSOMETHING\n or <<"SOMETHING"\n...\nSOMETHING\n
       if(prefix(stream, 3)=="<<"+ch){
         var p=stream.pos;
         stream.eatWhile(/\w/);
         var n=stream.current().substr(1);
         if(n&&stream.eat(ch))
           return tokenSOMETHING(stream,state,n);
         stream.pos=p;}
       return tokenChain(stream,state,[ch],"string");}
     if(ch=="q"){
       var c=look(stream, -2);
       if(!(c&&/\w/.test(c))){
         c=look(stream, 0);
         if(c=="x"){
           c=look(stream, 1);
           if(c=="("){
             eatSuffix(stream, 2);
             return tokenChain(stream,state,[")"],RXstyle,RXmodifiers);}
           if(c=="["){
             eatSuffix(stream, 2);
             return tokenChain(stream,state,["]"],RXstyle,RXmodifiers);}
           if(c=="{"){
             eatSuffix(stream, 2);
             return tokenChain(stream,state,["}"],RXstyle,RXmodifiers);}
           if(c=="<"){
             eatSuffix(stream, 2);
             return tokenChain(stream,state,[">"],RXstyle,RXmodifiers);}
           if(/[\^'"!~\/]/.test(c)){
             eatSuffix(stream, 1);
             return tokenChain(stream,state,[stream.eat(c)],RXstyle,RXmodifiers);}}
         else if(c=="q"){
           c=look(stream, 1);
           if(c=="("){
             eatSuffix(stream, 2);
             return tokenChain(stream,state,[")"],"string");}
           if(c=="["){
             eatSuffix(stream, 2);
             return tokenChain(stream,state,["]"],"string");}
           if(c=="{"){
             eatSuffix(stream, 2);
             return tokenChain(stream,state,["}"],"string");}
           if(c=="<"){
             eatSuffix(stream, 2);
             return tokenChain(stream,state,[">"],"string");}
           if(/[\^'"!~\/]/.test(c)){
             eatSuffix(stream, 1);
             return tokenChain(stream,state,[stream.eat(c)],"string");}}
         else if(c=="w"){
           c=look(stream, 1);
           if(c=="("){
             eatSuffix(stream, 2);
             return tokenChain(stream,state,[")"],"bracket");}
           if(c=="["){
             eatSuffix(stream, 2);
             return tokenChain(stream,state,["]"],"bracket");}
           if(c=="{"){
             eatSuffix(stream, 2);
             return tokenChain(stream,state,["}"],"bracket");}
           if(c=="<"){
             eatSuffix(stream, 2);
             return tokenChain(stream,state,[">"],"bracket");}
           if(/[\^'"!~\/]/.test(c)){
             eatSuffix(stream, 1);
             return tokenChain(stream,state,[stream.eat(c)],"bracket");}}
         else if(c=="r"){
           c=look(stream, 1);
           if(c=="("){
             eatSuffix(stream, 2);
             return tokenChain(stream,state,[")"],RXstyle,RXmodifiers);}
           if(c=="["){
             eatSuffix(stream, 2);
             return tokenChain(stream,state,["]"],RXstyle,RXmodifiers);}
           if(c=="{"){
             eatSuffix(stream, 2);
             return tokenChain(stream,state,["}"],RXstyle,RXmodifiers);}
           if(c=="<"){
             eatSuffix(stream, 2);
             return tokenChain(stream,state,[">"],RXstyle,RXmodifiers);}
           if(/[\^'"!~\/]/.test(c)){
             eatSuffix(stream, 1);
             return tokenChain(stream,state,[stream.eat(c)],RXstyle,RXmodifiers);}}
         else if(/[\^'"!~\/(\[{<]/.test(c)){
           if(c=="("){
             eatSuffix(stream, 1);
             return tokenChain(stream,state,[")"],"string");}
           if(c=="["){
             eatSuffix(stream, 1);
             return tokenChain(stream,state,["]"],"string");}
           if(c=="{"){
             eatSuffix(stream, 1);
             return tokenChain(stream,state,["}"],"string");}
           if(c=="<"){
             eatSuffix(stream, 1);
             return tokenChain(stream,state,[">"],"string");}
           if(/[\^'"!~\/]/.test(c)){
             return tokenChain(stream,state,[stream.eat(c)],"string");}}}}
     if(ch=="m"){
       var c=look(stream, -2);
       if(!(c&&/\w/.test(c))){
         c=stream.eat(/[(\[{<\^'"!~\/]/);
         if(c){
           if(/[\^'"!~\/]/.test(c)){
             return tokenChain(stream,state,[c],RXstyle,RXmodifiers);}
           if(c=="("){
             return tokenChain(stream,state,[")"],RXstyle,RXmodifiers);}
           if(c=="["){
             return tokenChain(stream,state,["]"],RXstyle,RXmodifiers);}
           if(c=="{"){
             return tokenChain(stream,state,["}"],RXstyle,RXmodifiers);}
           if(c=="<"){
             return tokenChain(stream,state,[">"],RXstyle,RXmodifiers);}}}}
     if(ch=="s"){
       var c=/[\/>\]})\w]/.test(look(stream, -2));
       if(!c){
         c=stream.eat(/[(\[{<\^'"!~\/]/);
         if(c){
           if(c=="[")
             return tokenChain(stream,state,["]","]"],RXstyle,RXmodifiers);
           if(c=="{")
             return tokenChain(stream,state,["}","}"],RXstyle,RXmodifiers);
           if(c=="<")
             return tokenChain(stream,state,[">",">"],RXstyle,RXmodifiers);
           if(c=="(")
             return tokenChain(stream,state,[")",")"],RXstyle,RXmodifiers);
           return tokenChain(stream,state,[c,c],RXstyle,RXmodifiers);}}}
     if(ch=="y"){
       var c=/[\/>\]})\w]/.test(look(stream, -2));
       if(!c){
         c=stream.eat(/[(\[{<\^'"!~\/]/);
         if(c){
           if(c=="[")
             return tokenChain(stream,state,["]","]"],RXstyle,RXmodifiers);
           if(c=="{")
             return tokenChain(stream,state,["}","}"],RXstyle,RXmodifiers);
           if(c=="<")
             return tokenChain(stream,state,[">",">"],RXstyle,RXmodifiers);
           if(c=="(")
             return tokenChain(stream,state,[")",")"],RXstyle,RXmodifiers);
           return tokenChain(stream,state,[c,c],RXstyle,RXmodifiers);}}}
     if(ch=="t"){
       var c=/[\/>\]})\w]/.test(look(stream, -2));
       if(!c){
         c=stream.eat("r");if(c){
           c=stream.eat(/[(\[{<\^'"!~\/]/);
           if(c){
             if(c=="[")
               return tokenChain(stream,state,["]","]"],RXstyle,RXmodifiers);
             if(c=="{")
               return tokenChain(stream,state,["}","}"],RXstyle,RXmodifiers);
             if(c=="<")
               return tokenChain(stream,state,[">",">"],RXstyle,RXmodifiers);
             if(c=="(")
               return tokenChain(stream,state,[")",")"],RXstyle,RXmodifiers);
             return tokenChain(stream,state,[c,c],RXstyle,RXmodifiers);}}}}
     if(ch=="`"){
       return tokenChain(stream,state,[ch],"builtin");}
     if(ch=="/"){
       if(!/~\s*$/.test(prefix(stream)))
         return "operator";
       else
         return tokenChain(stream,state,[ch],RXstyle,RXmodifiers);}
     if(ch=="$"){
       var p=stream.pos;
       if(stream.eatWhile(/\d/)||stream.eat("{")&&stream.eatWhile(/\d/)&&stream.eat("}"))
         return "builtin";
       else
         stream.pos=p;}
     if(/[$@%]/.test(ch)){
       var p=stream.pos;
       if(stream.eat("^")&&stream.eat(/[A-Z]/)||!/[@$%&]/.test(look(stream, -2))&&stream.eat(/[=|\\\-#?@;:&`~\^!\[\]*'"$+.,\/<>()]/)){
         var c=stream.current();
         if(PERL[c])
           return "builtin";}
       stream.pos=p;}
     if(/[$@%&]/.test(ch)){
       if(stream.eatWhile(/[\w$]/)||stream.eat("{")&&stream.eatWhile(/[\w$]/)&&stream.eat("}")){
         var c=stream.current();
         if(PERL[c])
           return "builtin";
         else
           return "variable";}}
     if(ch=="#"){
       if(look(stream, -2)!="$"){
         stream.skipToEnd();
         return "comment";}}
     if(/[:+\-\^*$&%@=<>!?|\/~\.]/.test(ch)){
       var p=stream.pos;
       stream.eatWhile(/[:+\-\^*$&%@=<>!?|\/~\.]/);
       if(PERL[stream.current()])
         return "operator";
       else
         stream.pos=p;}
     if(ch=="_"){
       if(stream.pos==1){
         if(suffix(stream, 6)=="_END__"){
           return tokenChain(stream,state,['\0'],"comment");}
         else if(suffix(stream, 7)=="_DATA__"){
           return tokenChain(stream,state,['\0'],"builtin");}
         else if(suffix(stream, 7)=="_C__"){
           return tokenChain(stream,state,['\0'],"string");}}}
     if(/\w/.test(ch)){
       var p=stream.pos;
       if(look(stream, -2)=="{"&&(look(stream, 0)=="}"||stream.eatWhile(/\w/)&&look(stream, 0)=="}"))
         return "string";
       else
         stream.pos=p;}
     if(/[A-Z]/.test(ch)){
       var l=look(stream, -2);
       var p=stream.pos;
       stream.eatWhile(/[A-Z_]/);
       if(/[\da-z]/.test(look(stream, 0))){
         stream.pos=p;}
       else {
         var c=PERL[stream.current()];
         if(!c)
           return "meta";
         if(c[1])
           c=c[0];
         if(l!=":"){
           if(c==1)
             return "keyword";
           else if(c==2)
             return "def";
           else if(c==3)
             return "atom";
           else if(c==4)
             return "operator";
           else if(c==5)
             return "builtin";
           else
             return "meta";}
         else
           return "meta";}}
     if(/[a-zA-Z_]/.test(ch)){
       var l=look(stream, -2);
       stream.eatWhile(/\w/);
       var c=PERL[stream.current()];
       if(!c)
         return "meta";
       if(c[1])
         c=c[0];
       if(l!=":"){
         if(c==1)
           return "keyword";
         else if(c==2)
           return "def";
         else if(c==3)
           return "atom";
         else if(c==4)
           return "operator";
         else if(c==5)
           return "builtin";
         else
           return "meta";}
       else
         return "meta";}
     return null;}

   const perl = {
     name: "perl",

     startState: function() {
       return {
         tokenize: tokenPerl,
         chain: null,
         style: null,
         tail: null
       };
     },
     token: function(stream, state) {
       return (state.tokenize || tokenPerl)(stream, state);
     },
     languageData: {
       commentTokens: {line: "#"},
       wordChars: "$"
     }
   };

   var perl$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      perl: perl
   });

   function words$9(str) {
     var obj = {}, words = str.split(" ");
     for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
     return obj;
   }

   // builtin funcs taken from trunk revision 1303237
   var pBuiltins = "ABS ACOS ARITY ASIN ATAN AVG BAGSIZE BINSTORAGE BLOOM BUILDBLOOM CBRT CEIL "
       + "CONCAT COR COS COSH COUNT COUNT_STAR COV CONSTANTSIZE CUBEDIMENSIONS DIFF DISTINCT DOUBLEABS "
       + "DOUBLEAVG DOUBLEBASE DOUBLEMAX DOUBLEMIN DOUBLEROUND DOUBLESUM EXP FLOOR FLOATABS FLOATAVG "
       + "FLOATMAX FLOATMIN FLOATROUND FLOATSUM GENERICINVOKER INDEXOF INTABS INTAVG INTMAX INTMIN "
       + "INTSUM INVOKEFORDOUBLE INVOKEFORFLOAT INVOKEFORINT INVOKEFORLONG INVOKEFORSTRING INVOKER "
       + "ISEMPTY JSONLOADER JSONMETADATA JSONSTORAGE LAST_INDEX_OF LCFIRST LOG LOG10 LOWER LONGABS "
       + "LONGAVG LONGMAX LONGMIN LONGSUM MAX MIN MAPSIZE MONITOREDUDF NONDETERMINISTIC OUTPUTSCHEMA  "
       + "PIGSTORAGE PIGSTREAMING RANDOM REGEX_EXTRACT REGEX_EXTRACT_ALL REPLACE ROUND SIN SINH SIZE "
       + "SQRT STRSPLIT SUBSTRING SUM STRINGCONCAT STRINGMAX STRINGMIN STRINGSIZE TAN TANH TOBAG "
       + "TOKENIZE TOMAP TOP TOTUPLE TRIM TEXTLOADER TUPLESIZE UCFIRST UPPER UTF8STORAGECONVERTER ";

   // taken from QueryLexer.g
   var pKeywords = "VOID IMPORT RETURNS DEFINE LOAD FILTER FOREACH ORDER CUBE DISTINCT COGROUP "
       + "JOIN CROSS UNION SPLIT INTO IF OTHERWISE ALL AS BY USING INNER OUTER ONSCHEMA PARALLEL "
       + "PARTITION GROUP AND OR NOT GENERATE FLATTEN ASC DESC IS STREAM THROUGH STORE MAPREDUCE "
       + "SHIP CACHE INPUT OUTPUT STDERROR STDIN STDOUT LIMIT SAMPLE LEFT RIGHT FULL EQ GT LT GTE LTE "
       + "NEQ MATCHES TRUE FALSE DUMP";

   // data types
   var pTypes = "BOOLEAN INT LONG FLOAT DOUBLE CHARARRAY BYTEARRAY BAG TUPLE MAP ";

   var builtins$3 = words$9(pBuiltins), keywords$k = words$9(pKeywords), types$4 = words$9(pTypes);

   var isOperatorChar$6 = /[*+\-%<>=&?:\/!|]/;

   function chain$5(stream, state, f) {
     state.tokenize = f;
     return f(stream, state);
   }

   function tokenComment$7(stream, state) {
     var isEnd = false;
     var ch;
     while(ch = stream.next()) {
       if(ch == "/" && isEnd) {
         state.tokenize = tokenBase$m;
         break;
       }
       isEnd = (ch == "*");
     }
     return "comment";
   }

   function tokenString$f(quote) {
     return function(stream, state) {
       var escaped = false, next, end = false;
       while((next = stream.next()) != null) {
         if (next == quote && !escaped) {
           end = true; break;
         }
         escaped = !escaped && next == "\\";
       }
       if (end || !escaped)
         state.tokenize = tokenBase$m;
       return "error";
     };
   }


   function tokenBase$m(stream, state) {
     var ch = stream.next();

     // is a start of string?
     if (ch == '"' || ch == "'")
       return chain$5(stream, state, tokenString$f(ch));
     // is it one of the special chars
     else if(/[\[\]{}\(\),;\.]/.test(ch))
       return null;
     // is it a number?
     else if(/\d/.test(ch)) {
       stream.eatWhile(/[\w\.]/);
       return "number";
     }
     // multi line comment or operator
     else if (ch == "/") {
       if (stream.eat("*")) {
         return chain$5(stream, state, tokenComment$7);
       }
       else {
         stream.eatWhile(isOperatorChar$6);
         return "operator";
       }
     }
     // single line comment or operator
     else if (ch=="-") {
       if(stream.eat("-")){
         stream.skipToEnd();
         return "comment";
       }
       else {
         stream.eatWhile(isOperatorChar$6);
         return "operator";
       }
     }
     // is it an operator
     else if (isOperatorChar$6.test(ch)) {
       stream.eatWhile(isOperatorChar$6);
       return "operator";
     }
     else {
       // get the while word
       stream.eatWhile(/[\w\$_]/);
       // is it one of the listed keywords?
       if (keywords$k && keywords$k.propertyIsEnumerable(stream.current().toUpperCase())) {
         //keywords can be used as variables like flatten(group), group.$0 etc..
         if (!stream.eat(")") && !stream.eat("."))
           return "keyword";
       }
       // is it one of the builtin functions?
       if (builtins$3 && builtins$3.propertyIsEnumerable(stream.current().toUpperCase()))
         return "builtin";
       // is it one of the listed types?
       if (types$4 && types$4.propertyIsEnumerable(stream.current().toUpperCase()))
         return "type";
       // default is a 'variable'
       return "variable";
     }
   }

   // Interface
   const pig = {
     name: "pig",

     startState: function() {
       return {
         tokenize: tokenBase$m,
         startOfLine: true
       };
     },

     token: function(stream, state) {
       if(stream.eatSpace()) return null;
       var style = state.tokenize(stream, state);
       return style;
     },

     languageData: {
       autocomplete: (pBuiltins + pTypes + pKeywords).split(" ")
     }
   };

   var pig$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      pig: pig
   });

   function buildRegexp(patterns, options) {
     options = options || {};
     var prefix = options.prefix !== undefined ? options.prefix : '^';
     var suffix = options.suffix !== undefined ? options.suffix : '\\b';

     for (var i = 0; i < patterns.length; i++) {
       if (patterns[i] instanceof RegExp) {
         patterns[i] = patterns[i].source;
       }
       else {
         patterns[i] = patterns[i].replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
       }
     }

     return new RegExp(prefix + '(' + patterns.join('|') + ')' + suffix, 'i');
   }

   var notCharacterOrDash = '(?=[^A-Za-z\\d\\-_]|$)';
   var varNames = /[\w\-:]/;
   var keywords$j = buildRegexp([
     /begin|break|catch|continue|data|default|do|dynamicparam/,
     /else|elseif|end|exit|filter|finally|for|foreach|from|function|if|in/,
     /param|process|return|switch|throw|trap|try|until|where|while/
   ], { suffix: notCharacterOrDash });

   var punctuation = /[\[\]{},;`\\\.]|@[({]/;
   var wordOperators$1 = buildRegexp([
     'f',
     /b?not/,
     /[ic]?split/, 'join',
     /is(not)?/, 'as',
     /[ic]?(eq|ne|[gl][te])/,
     /[ic]?(not)?(like|match|contains)/,
     /[ic]?replace/,
     /b?(and|or|xor)/
   ], { prefix: '-' });
   var symbolOperators = /[+\-*\/%]=|\+\+|--|\.\.|[+\-*&^%:=!|\/]|<(?!#)|(?!#)>/;
   var operators$2 = buildRegexp([wordOperators$1, symbolOperators], { suffix: '' });

   var numbers = /^((0x[\da-f]+)|((\d+\.\d+|\d\.|\.\d+|\d+)(e[\+\-]?\d+)?))[ld]?([kmgtp]b)?/i;

   var identifiers$3 = /^[A-Za-z\_][A-Za-z\-\_\d]*\b/;

   var symbolBuiltins = /[A-Z]:|%|\?/i;
   var namedBuiltins = buildRegexp([
     /Add-(Computer|Content|History|Member|PSSnapin|Type)/,
     /Checkpoint-Computer/,
     /Clear-(Content|EventLog|History|Host|Item(Property)?|Variable)/,
     /Compare-Object/,
     /Complete-Transaction/,
     /Connect-PSSession/,
     /ConvertFrom-(Csv|Json|SecureString|StringData)/,
     /Convert-Path/,
     /ConvertTo-(Csv|Html|Json|SecureString|Xml)/,
     /Copy-Item(Property)?/,
     /Debug-Process/,
     /Disable-(ComputerRestore|PSBreakpoint|PSRemoting|PSSessionConfiguration)/,
     /Disconnect-PSSession/,
     /Enable-(ComputerRestore|PSBreakpoint|PSRemoting|PSSessionConfiguration)/,
     /(Enter|Exit)-PSSession/,
     /Export-(Alias|Clixml|Console|Counter|Csv|FormatData|ModuleMember|PSSession)/,
     /ForEach-Object/,
     /Format-(Custom|List|Table|Wide)/,
     new RegExp('Get-(Acl|Alias|AuthenticodeSignature|ChildItem|Command|ComputerRestorePoint|Content|ControlPanelItem|Counter|Credential'
                + '|Culture|Date|Event|EventLog|EventSubscriber|ExecutionPolicy|FormatData|Help|History|Host|HotFix|Item|ItemProperty|Job'
                + '|Location|Member|Module|PfxCertificate|Process|PSBreakpoint|PSCallStack|PSDrive|PSProvider|PSSession|PSSessionConfiguration'
                + '|PSSnapin|Random|Service|TraceSource|Transaction|TypeData|UICulture|Unique|Variable|Verb|WinEvent|WmiObject)'),
     /Group-Object/,
     /Import-(Alias|Clixml|Counter|Csv|LocalizedData|Module|PSSession)/,
     /ImportSystemModules/,
     /Invoke-(Command|Expression|History|Item|RestMethod|WebRequest|WmiMethod)/,
     /Join-Path/,
     /Limit-EventLog/,
     /Measure-(Command|Object)/,
     /Move-Item(Property)?/,
     new RegExp('New-(Alias|Event|EventLog|Item(Property)?|Module|ModuleManifest|Object|PSDrive|PSSession|PSSessionConfigurationFile'
                + '|PSSessionOption|PSTransportOption|Service|TimeSpan|Variable|WebServiceProxy|WinEvent)'),
     /Out-(Default|File|GridView|Host|Null|Printer|String)/,
     /Pause/,
     /(Pop|Push)-Location/,
     /Read-Host/,
     /Receive-(Job|PSSession)/,
     /Register-(EngineEvent|ObjectEvent|PSSessionConfiguration|WmiEvent)/,
     /Remove-(Computer|Event|EventLog|Item(Property)?|Job|Module|PSBreakpoint|PSDrive|PSSession|PSSnapin|TypeData|Variable|WmiObject)/,
     /Rename-(Computer|Item(Property)?)/,
     /Reset-ComputerMachinePassword/,
     /Resolve-Path/,
     /Restart-(Computer|Service)/,
     /Restore-Computer/,
     /Resume-(Job|Service)/,
     /Save-Help/,
     /Select-(Object|String|Xml)/,
     /Send-MailMessage/,
     new RegExp('Set-(Acl|Alias|AuthenticodeSignature|Content|Date|ExecutionPolicy|Item(Property)?|Location|PSBreakpoint|PSDebug' +
                '|PSSessionConfiguration|Service|StrictMode|TraceSource|Variable|WmiInstance)'),
     /Show-(Command|ControlPanelItem|EventLog)/,
     /Sort-Object/,
     /Split-Path/,
     /Start-(Job|Process|Service|Sleep|Transaction|Transcript)/,
     /Stop-(Computer|Job|Process|Service|Transcript)/,
     /Suspend-(Job|Service)/,
     /TabExpansion2/,
     /Tee-Object/,
     /Test-(ComputerSecureChannel|Connection|ModuleManifest|Path|PSSessionConfigurationFile)/,
     /Trace-Command/,
     /Unblock-File/,
     /Undo-Transaction/,
     /Unregister-(Event|PSSessionConfiguration)/,
     /Update-(FormatData|Help|List|TypeData)/,
     /Use-Transaction/,
     /Wait-(Event|Job|Process)/,
     /Where-Object/,
     /Write-(Debug|Error|EventLog|Host|Output|Progress|Verbose|Warning)/,
     /cd|help|mkdir|more|oss|prompt/,
     /ac|asnp|cat|cd|chdir|clc|clear|clhy|cli|clp|cls|clv|cnsn|compare|copy|cp|cpi|cpp|cvpa|dbp|del|diff|dir|dnsn|ebp/,
     /echo|epal|epcsv|epsn|erase|etsn|exsn|fc|fl|foreach|ft|fw|gal|gbp|gc|gci|gcm|gcs|gdr|ghy|gi|gjb|gl|gm|gmo|gp|gps/,
     /group|gsn|gsnp|gsv|gu|gv|gwmi|h|history|icm|iex|ihy|ii|ipal|ipcsv|ipmo|ipsn|irm|ise|iwmi|iwr|kill|lp|ls|man|md/,
     /measure|mi|mount|move|mp|mv|nal|ndr|ni|nmo|npssc|nsn|nv|ogv|oh|popd|ps|pushd|pwd|r|rbp|rcjb|rcsn|rd|rdr|ren|ri/,
     /rjb|rm|rmdir|rmo|rni|rnp|rp|rsn|rsnp|rujb|rv|rvpa|rwmi|sajb|sal|saps|sasv|sbp|sc|select|set|shcm|si|sl|sleep|sls/,
     /sort|sp|spjb|spps|spsv|start|sujb|sv|swmi|tee|trcm|type|where|wjb|write/
   ], { prefix: '', suffix: '' });
   var variableBuiltins = buildRegexp([
     /[$?^_]|Args|ConfirmPreference|ConsoleFileName|DebugPreference|Error|ErrorActionPreference|ErrorView|ExecutionContext/,
     /FormatEnumerationLimit|Home|Host|Input|MaximumAliasCount|MaximumDriveCount|MaximumErrorCount|MaximumFunctionCount/,
     /MaximumHistoryCount|MaximumVariableCount|MyInvocation|NestedPromptLevel|OutputEncoding|Pid|Profile|ProgressPreference/,
     /PSBoundParameters|PSCommandPath|PSCulture|PSDefaultParameterValues|PSEmailServer|PSHome|PSScriptRoot|PSSessionApplicationName/,
     /PSSessionConfigurationName|PSSessionOption|PSUICulture|PSVersionTable|Pwd|ShellId|StackTrace|VerbosePreference/,
     /WarningPreference|WhatIfPreference/,

     /Event|EventArgs|EventSubscriber|Sender/,
     /Matches|Ofs|ForEach|LastExitCode|PSCmdlet|PSItem|PSSenderInfo|This/,
     /true|false|null/
   ], { prefix: '\\$', suffix: '' });

   var builtins$2 = buildRegexp([symbolBuiltins, namedBuiltins, variableBuiltins], { suffix: notCharacterOrDash });

   var grammar = {
     keyword: keywords$j,
     number: numbers,
     operator: operators$2,
     builtin: builtins$2,
     punctuation: punctuation,
     variable: identifiers$3
   };

   // tokenizers
   function tokenBase$l(stream, state) {
     // Handle Comments
     //var ch = stream.peek();

     var parent = state.returnStack[state.returnStack.length - 1];
     if (parent && parent.shouldReturnFrom(state)) {
       state.tokenize = parent.tokenize;
       state.returnStack.pop();
       return state.tokenize(stream, state);
     }

     if (stream.eatSpace()) {
       return null;
     }

     if (stream.eat('(')) {
       state.bracketNesting += 1;
       return 'punctuation';
     }

     if (stream.eat(')')) {
       state.bracketNesting -= 1;
       return 'punctuation';
     }

     for (var key in grammar) {
       if (stream.match(grammar[key])) {
         return key;
       }
     }

     var ch = stream.next();

     // single-quote string
     if (ch === "'") {
       return tokenSingleQuoteString(stream, state);
     }

     if (ch === '$') {
       return tokenVariable$1(stream, state);
     }

     // double-quote string
     if (ch === '"') {
       return tokenDoubleQuoteString(stream, state);
     }

     if (ch === '<' && stream.eat('#')) {
       state.tokenize = tokenComment$6;
       return tokenComment$6(stream, state);
     }

     if (ch === '#') {
       stream.skipToEnd();
       return 'comment';
     }

     if (ch === '@') {
       var quoteMatch = stream.eat(/["']/);
       if (quoteMatch && stream.eol()) {
         state.tokenize = tokenMultiString;
         state.startQuote = quoteMatch[0];
         return tokenMultiString(stream, state);
       } else if (stream.eol()) {
         return 'error';
       } else if (stream.peek().match(/[({]/)) {
         return 'punctuation';
       } else if (stream.peek().match(varNames)) {
         // splatted variable
         return tokenVariable$1(stream, state);
       }
     }
     return 'error';
   }

   function tokenSingleQuoteString(stream, state) {
     var ch;
     while ((ch = stream.peek()) != null) {
       stream.next();

       if (ch === "'" && !stream.eat("'")) {
         state.tokenize = tokenBase$l;
         return 'string';
       }
     }

     return 'error';
   }

   function tokenDoubleQuoteString(stream, state) {
     var ch;
     while ((ch = stream.peek()) != null) {
       if (ch === '$') {
         state.tokenize = tokenStringInterpolation;
         return 'string';
       }

       stream.next();
       if (ch === '`') {
         stream.next();
         continue;
       }

       if (ch === '"' && !stream.eat('"')) {
         state.tokenize = tokenBase$l;
         return 'string';
       }
     }

     return 'error';
   }

   function tokenStringInterpolation(stream, state) {
     return tokenInterpolation(stream, state, tokenDoubleQuoteString);
   }

   function tokenMultiStringReturn(stream, state) {
     state.tokenize = tokenMultiString;
     state.startQuote = '"';
     return tokenMultiString(stream, state);
   }

   function tokenHereStringInterpolation(stream, state) {
     return tokenInterpolation(stream, state, tokenMultiStringReturn);
   }

   function tokenInterpolation(stream, state, parentTokenize) {
     if (stream.match('$(')) {
       var savedBracketNesting = state.bracketNesting;
       state.returnStack.push({
         /*jshint loopfunc:true */
         shouldReturnFrom: function(state) {
           return state.bracketNesting === savedBracketNesting;
         },
         tokenize: parentTokenize
       });
       state.tokenize = tokenBase$l;
       state.bracketNesting += 1;
       return 'punctuation';
     } else {
       stream.next();
       state.returnStack.push({
         shouldReturnFrom: function() { return true; },
         tokenize: parentTokenize
       });
       state.tokenize = tokenVariable$1;
       return state.tokenize(stream, state);
     }
   }

   function tokenComment$6(stream, state) {
     var maybeEnd = false, ch;
     while ((ch = stream.next()) != null) {
       if (maybeEnd && ch == '>') {
         state.tokenize = tokenBase$l;
         break;
       }
       maybeEnd = (ch === '#');
     }
     return 'comment';
   }

   function tokenVariable$1(stream, state) {
     var ch = stream.peek();
     if (stream.eat('{')) {
       state.tokenize = tokenVariableWithBraces;
       return tokenVariableWithBraces(stream, state);
     } else if (ch != undefined && ch.match(varNames)) {
       stream.eatWhile(varNames);
       state.tokenize = tokenBase$l;
       return 'variable';
     } else {
       state.tokenize = tokenBase$l;
       return 'error';
     }
   }

   function tokenVariableWithBraces(stream, state) {
     var ch;
     while ((ch = stream.next()) != null) {
       if (ch === '}') {
         state.tokenize = tokenBase$l;
         break;
       }
     }
     return 'variable';
   }

   function tokenMultiString(stream, state) {
     var quote = state.startQuote;
     if (stream.sol() && stream.match(new RegExp(quote + '@'))) {
       state.tokenize = tokenBase$l;
     }
     else if (quote === '"') {
       while (!stream.eol()) {
         var ch = stream.peek();
         if (ch === '$') {
           state.tokenize = tokenHereStringInterpolation;
           return 'string';
         }

         stream.next();
         if (ch === '`') {
           stream.next();
         }
       }
     }
     else {
       stream.skipToEnd();
     }

     return 'string';
   }

   const powerShell = {
     name: "powershell",

     startState: function() {
       return {
         returnStack: [],
         bracketNesting: 0,
         tokenize: tokenBase$l
       };
     },

     token: function(stream, state) {
       return state.tokenize(stream, state);
     },

     languageData: {
       commentTokens: {line: "#", block: {open: "<#", close: "#>"}}
     }
   };

   var powershell = /*#__PURE__*/Object.freeze({
      __proto__: null,
      powerShell: powerShell
   });

   const properties = {
     name: "properties",

     token: function(stream, state) {
       var sol = stream.sol() || state.afterSection;
       var eol = stream.eol();

       state.afterSection = false;

       if (sol) {
         if (state.nextMultiline) {
           state.inMultiline = true;
           state.nextMultiline = false;
         } else {
           state.position = "def";
         }
       }

       if (eol && ! state.nextMultiline) {
         state.inMultiline = false;
         state.position = "def";
       }

       if (sol) {
         while(stream.eatSpace()) {}
       }

       var ch = stream.next();

       if (sol && (ch === "#" || ch === "!" || ch === ";")) {
         state.position = "comment";
         stream.skipToEnd();
         return "comment";
       } else if (sol && ch === "[") {
         state.afterSection = true;
         stream.skipTo("]"); stream.eat("]");
         return "header";
       } else if (ch === "=" || ch === ":") {
         state.position = "quote";
         return null;
       } else if (ch === "\\" && state.position === "quote") {
         if (stream.eol()) {  // end of line?
           // Multiline value
           state.nextMultiline = true;
         }
       }

       return state.position;
     },

     startState: function() {
       return {
         position : "def",       // Current position, "def", "quote" or "comment"
         nextMultiline : false,  // Is the next line multiline value
         inMultiline : false,    // Is the current line a multiline value
         afterSection : false    // Did we just open a section
       };
     }

   };

   var properties$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      properties: properties
   });

   function wordRegexp$6(words) {
     return new RegExp("^((" + words.join(")|(") + "))\\b", "i");
   }
   var keywordArray$1 = [
     "package", "message", "import", "syntax",
     "required", "optional", "repeated", "reserved", "default", "extensions", "packed",
     "bool", "bytes", "double", "enum", "float", "string",
     "int32", "int64", "uint32", "uint64", "sint32", "sint64", "fixed32", "fixed64", "sfixed32", "sfixed64",
     "option", "service", "rpc", "returns"
   ];
   var keywords$i = wordRegexp$6(keywordArray$1);

   var identifiers$2 = new RegExp("^[_A-Za-z\xa1-\uffff][_A-Za-z0-9\xa1-\uffff]*");

   function tokenBase$k(stream) {
     // whitespaces
     if (stream.eatSpace()) return null;

     // Handle one line Comments
     if (stream.match("//")) {
       stream.skipToEnd();
       return "comment";
     }

     // Handle Number Literals
     if (stream.match(/^[0-9\.+-]/, false)) {
       if (stream.match(/^[+-]?0x[0-9a-fA-F]+/))
         return "number";
       if (stream.match(/^[+-]?\d*\.\d+([EeDd][+-]?\d+)?/))
         return "number";
       if (stream.match(/^[+-]?\d+([EeDd][+-]?\d+)?/))
         return "number";
     }

     // Handle Strings
     if (stream.match(/^"([^"]|(""))*"/)) { return "string"; }
     if (stream.match(/^'([^']|(''))*'/)) { return "string"; }

     // Handle words
     if (stream.match(keywords$i)) { return "keyword"; }
     if (stream.match(identifiers$2)) { return "variable"; }
     // Handle non-detected items
     stream.next();
     return null;
   }
   const protobuf = {
     name: "protobuf",
     token: tokenBase$k,
     languageData: {
       autocomplete: keywordArray$1
     }
   };

   var protobuf$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      protobuf: protobuf
   });

   // Stores the words from the define method
   var words$8 = {};
   // Taken, mostly, from the Puppet official variable standards regex
   var variable_regex = /({)?([a-z][a-z0-9_]*)?((::[a-z][a-z0-9_]*)*::)?[a-zA-Z0-9_]+(})?/;

   // Takes a string of words separated by spaces and adds them as
   // keys with the value of the first argument 'style'
   function define$2(style, string) {
     var split = string.split(' ');
     for (var i = 0; i < split.length; i++) {
       words$8[split[i]] = style;
     }
   }

   // Takes commonly known puppet types/words and classifies them to a style
   define$2('keyword', 'class define site node include import inherits');
   define$2('keyword', 'case if else in and elsif default or');
   define$2('atom', 'false true running present absent file directory undef');
   define$2('builtin', 'action augeas burst chain computer cron destination dport exec ' +
          'file filebucket group host icmp iniface interface jump k5login limit log_level ' +
          'log_prefix macauthorization mailalias maillist mcx mount nagios_command ' +
          'nagios_contact nagios_contactgroup nagios_host nagios_hostdependency ' +
          'nagios_hostescalation nagios_hostextinfo nagios_hostgroup nagios_service ' +
          'nagios_servicedependency nagios_serviceescalation nagios_serviceextinfo ' +
          'nagios_servicegroup nagios_timeperiod name notify outiface package proto reject ' +
          'resources router schedule scheduled_task selboolean selmodule service source ' +
          'sport ssh_authorized_key sshkey stage state table tidy todest toports tosource ' +
          'user vlan yumrepo zfs zone zpool');

   // After finding a start of a string ('|") this function attempts to find the end;
   // If a variable is encountered along the way, we display it differently when it
   // is encapsulated in a double-quoted string.
   function tokenString$e(stream, state) {
     var current, prev, found_var = false;
     while (!stream.eol() && (current = stream.next()) != state.pending) {
       if (current === '$' && prev != '\\' && state.pending == '"') {
         found_var = true;
         break;
       }
       prev = current;
     }
     if (found_var) {
       stream.backUp(1);
     }
     if (current == state.pending) {
       state.continueString = false;
     } else {
       state.continueString = true;
     }
     return "string";
   }

   // Main function
   function tokenize$3(stream, state) {
     // Matches one whole word
     var word = stream.match(/[\w]+/, false);
     // Matches attributes (i.e. ensure => present ; 'ensure' would be matched)
     var attribute = stream.match(/(\s+)?\w+\s+=>.*/, false);
     // Matches non-builtin resource declarations
     // (i.e. "apache::vhost {" or "mycustomclasss {" would be matched)
     var resource = stream.match(/(\s+)?[\w:_]+(\s+)?{/, false);
     // Matches virtual and exported resources (i.e. @@user { ; and the like)
     var special_resource = stream.match(/(\s+)?[@]{1,2}[\w:_]+(\s+)?{/, false);

     // Finally advance the stream
     var ch = stream.next();

     // Have we found a variable?
     if (ch === '$') {
       if (stream.match(variable_regex)) {
         // If so, and its in a string, assign it a different color
         return state.continueString ? 'variableName.special' : 'variable';
       }
       // Otherwise return an invalid variable
       return "error";
     }
     // Should we still be looking for the end of a string?
     if (state.continueString) {
       // If so, go through the loop again
       stream.backUp(1);
       return tokenString$e(stream, state);
     }
     // Are we in a definition (class, node, define)?
     if (state.inDefinition) {
       // If so, return def (i.e. for 'class myclass {' ; 'myclass' would be matched)
       if (stream.match(/(\s+)?[\w:_]+(\s+)?/)) {
         return 'def';
       }
       // Match the rest it the next time around
       stream.match(/\s+{/);
       state.inDefinition = false;
     }
     // Are we in an 'include' statement?
     if (state.inInclude) {
       // Match and return the included class
       stream.match(/(\s+)?\S+(\s+)?/);
       state.inInclude = false;
       return 'def';
     }
     // Do we just have a function on our hands?
     // In 'ensure_resource("myclass")', 'ensure_resource' is matched
     if (stream.match(/(\s+)?\w+\(/)) {
       stream.backUp(1);
       return 'def';
     }
     // Have we matched the prior attribute regex?
     if (attribute) {
       stream.match(/(\s+)?\w+/);
       return 'tag';
     }
     // Do we have Puppet specific words?
     if (word && words$8.hasOwnProperty(word)) {
       // Negates the initial next()
       stream.backUp(1);
       // rs move the stream
       stream.match(/[\w]+/);
       // We want to process these words differently
       // do to the importance they have in Puppet
       if (stream.match(/\s+\S+\s+{/, false)) {
         state.inDefinition = true;
       }
       if (word == 'include') {
         state.inInclude = true;
       }
       // Returns their value as state in the prior define methods
       return words$8[word];
     }
     // Is there a match on a reference?
     if (/(^|\s+)[A-Z][\w:_]+/.test(word)) {
       // Negate the next()
       stream.backUp(1);
       // Match the full reference
       stream.match(/(^|\s+)[A-Z][\w:_]+/);
       return 'def';
     }
     // Have we matched the prior resource regex?
     if (resource) {
       stream.match(/(\s+)?[\w:_]+/);
       return 'def';
     }
     // Have we matched the prior special_resource regex?
     if (special_resource) {
       stream.match(/(\s+)?[@]{1,2}/);
       return 'atom';
     }
     // Match all the comments. All of them.
     if (ch == "#") {
       stream.skipToEnd();
       return "comment";
     }
     // Have we found a string?
     if (ch == "'" || ch == '"') {
       // Store the type (single or double)
       state.pending = ch;
       // Perform the looping function to find the end
       return tokenString$e(stream, state);
     }
     // Match all the brackets
     if (ch == '{' || ch == '}') {
       return 'bracket';
     }
     // Match characters that we are going to assume
     // are trying to be regex
     if (ch == '/') {
       stream.match(/^[^\/]*\//);
       return 'string.special';
     }
     // Match all the numbers
     if (ch.match(/[0-9]/)) {
       stream.eatWhile(/[0-9]+/);
       return 'number';
     }
     // Match the '=' and '=>' operators
     if (ch == '=') {
       if (stream.peek() == '>') {
         stream.next();
       }
       return "operator";
     }
     // Keep advancing through all the rest
     stream.eatWhile(/[\w-]/);
     // Return a blank line for everything else
     return null;
   }
   // Start it all
   const puppet = {
     name: "puppet",

     startState: function () {
       var state = {};
       state.inDefinition = false;
       state.inInclude = false;
       state.continueString = false;
       state.pending = false;
       return state;
     },
     token: function (stream, state) {
       // Strip the spaces, but regex will account for them eitherway
       if (stream.eatSpace()) return null;
       // Go through the main process
       return tokenize$3(stream, state);
     }
   };

   var puppet$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      puppet: puppet
   });

   var curPunc$7,
       keywords$h=buildRE(["abs","acos","aj","aj0","all","and","any","asc","asin","asof","atan","attr","avg","avgs","bin","by","ceiling","cols","cor","cos","count","cov","cross","csv","cut","delete","deltas","desc","dev","differ","distinct","div","do","each","ej","enlist","eval","except","exec","exit","exp","fby","fills","first","fkeys","flip","floor","from","get","getenv","group","gtime","hclose","hcount","hdel","hopen","hsym","iasc","idesc","if","ij","in","insert","inter","inv","key","keys","last","like","list","lj","load","log","lower","lsq","ltime","ltrim","mavg","max","maxs","mcount","md5","mdev","med","meta","min","mins","mmax","mmin","mmu","mod","msum","neg","next","not","null","or","over","parse","peach","pj","plist","prd","prds","prev","prior","rand","rank","ratios","raze","read0","read1","reciprocal","reverse","rload","rotate","rsave","rtrim","save","scan","select","set","setenv","show","signum","sin","sqrt","ss","ssr","string","sublist","sum","sums","sv","system","tables","tan","til","trim","txf","type","uj","ungroup","union","update","upper","upsert","value","var","view","views","vs","wavg","where","where","while","within","wj","wj1","wsum","xasc","xbar","xcol","xcols","xdesc","xexp","xgroup","xkey","xlog","xprev","xrank"]),
       E=/[|/&^!+:\\\-*%$=~#;@><,?_\'\"\[\(\]\)\s{}]/;
   function buildRE(w){return new RegExp("^("+w.join("|")+")$");}
   function tokenBase$j(stream,state){
     var sol=stream.sol(),c=stream.next();
     curPunc$7=null;
     if(sol)
       if(c=="/")
         return (state.tokenize=tokenLineComment)(stream,state);
     else if(c=="\\"){
       if(stream.eol()||/\s/.test(stream.peek()))
         return stream.skipToEnd(),/^\\\s*$/.test(stream.current())?(state.tokenize=tokenCommentToEOF)(stream):state.tokenize=tokenBase$j,"comment";
       else
         return state.tokenize=tokenBase$j,"builtin";
     }
     if(/\s/.test(c))
       return stream.peek()=="/"?(stream.skipToEnd(),"comment"):"null";
     if(c=='"')
       return (state.tokenize=tokenString$d)(stream,state);
     if(c=='`')
       return stream.eatWhile(/[A-Za-z\d_:\/.]/),"macroName";
     if(("."==c&&/\d/.test(stream.peek()))||/\d/.test(c)){
       var t=null;
       stream.backUp(1);
       if(stream.match(/^\d{4}\.\d{2}(m|\.\d{2}([DT](\d{2}(:\d{2}(:\d{2}(\.\d{1,9})?)?)?)?)?)/)
          || stream.match(/^\d+D(\d{2}(:\d{2}(:\d{2}(\.\d{1,9})?)?)?)/)
          || stream.match(/^\d{2}:\d{2}(:\d{2}(\.\d{1,9})?)?/)
          || stream.match(/^\d+[ptuv]{1}/))
         t="temporal";
       else if(stream.match(/^0[NwW]{1}/)
               || stream.match(/^0x[\da-fA-F]*/)
               || stream.match(/^[01]+[b]{1}/)
               || stream.match(/^\d+[chijn]{1}/)
               || stream.match(/-?\d*(\.\d*)?(e[+\-]?\d+)?(e|f)?/))
         t="number";
       return (t&&(!(c=stream.peek())||E.test(c)))?t:(stream.next(),"error");
     }
     if(/[A-Za-z]|\./.test(c))
       return stream.eatWhile(/[A-Za-z._\d]/),keywords$h.test(stream.current())?"keyword":"variable";
     if(/[|/&^!+:\\\-*%$=~#;@><\.,?_\']/.test(c))
       return null;
     if(/[{}\(\[\]\)]/.test(c))
       return null;
     return "error";
   }
   function tokenLineComment(stream,state){
     return stream.skipToEnd(),/\/\s*$/.test(stream.current())?(state.tokenize=tokenBlockComment)(stream,state):(state.tokenize=tokenBase$j),"comment";
   }
   function tokenBlockComment(stream,state){
     var f=stream.sol()&&stream.peek()=="\\";
     stream.skipToEnd();
     if(f&&/^\\\s*$/.test(stream.current()))
       state.tokenize=tokenBase$j;
     return "comment";
   }
   function tokenCommentToEOF(stream){return stream.skipToEnd(),"comment";}
   function tokenString$d(stream,state){
     var escaped=false,next,end=false;
     while((next=stream.next())){
       if(next=="\""&&!escaped){end=true;break;}
       escaped=!escaped&&next=="\\";
     }
     if(end)state.tokenize=tokenBase$j;
     return "string";
   }
   function pushContext$8(state,type,col){state.context={prev:state.context,indent:state.indent,col:col,type:type};}
   function popContext$8(state){state.indent=state.context.indent;state.context=state.context.prev;}
   const q = {
     name: "q",
     startState:function(){
       return {tokenize:tokenBase$j,
              context:null,
              indent:0,
              col:0};
     },
     token:function(stream,state){
       if(stream.sol()){
         if(state.context&&state.context.align==null)
           state.context.align=false;
         state.indent=stream.indentation();
       }
       //if (stream.eatSpace()) return null;
       var style=state.tokenize(stream,state);
       if(style!="comment"&&state.context&&state.context.align==null&&state.context.type!="pattern"){
         state.context.align=true;
       }
       if(curPunc$7=="(")pushContext$8(state,")",stream.column());
       else if(curPunc$7=="[")pushContext$8(state,"]",stream.column());
       else if(curPunc$7=="{")pushContext$8(state,"}",stream.column());
       else if(/[\]\}\)]/.test(curPunc$7)){
         while(state.context&&state.context.type=="pattern")popContext$8(state);
         if(state.context&&curPunc$7==state.context.type)popContext$8(state);
       }
       else if(curPunc$7=="."&&state.context&&state.context.type=="pattern")popContext$8(state);
       else if(/atom|string|variable/.test(style)&&state.context){
         if(/[\}\]]/.test(state.context.type))
           pushContext$8(state,"pattern",stream.column());
         else if(state.context.type=="pattern"&&!state.context.align){
           state.context.align=true;
           state.context.col=stream.column();
         }
       }
       return style;
     },
     indent:function(state,textAfter,cx){
       var firstChar=textAfter&&textAfter.charAt(0);
       var context=state.context;
       if(/[\]\}]/.test(firstChar))
         while (context&&context.type=="pattern")context=context.prev;
       var closing=context&&firstChar==context.type;
       if(!context)
         return 0;
       else if(context.type=="pattern")
         return context.col;
       else if(context.align)
         return context.col+(closing?0:1);
       else
         return context.indent+(closing?0:cx.unit);
     }
   };

   var q$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      q: q
   });

   function wordObj$1(words) {
     var res = {};
     for (var i = 0; i < words.length; ++i) res[words[i]] = true;
     return res;
   }
   var commonAtoms$2 = ["NULL", "NA", "Inf", "NaN", "NA_integer_", "NA_real_", "NA_complex_", "NA_character_", "TRUE", "FALSE"];
   var commonBuiltins = ["list", "quote", "bquote", "eval", "return", "call", "parse", "deparse"];
   var commonKeywords$2 = ["if", "else", "repeat", "while", "function", "for", "in", "next", "break"];
   var commonBlockKeywords = ["if", "else", "repeat", "while", "function", "for"];

   var atoms$4 = wordObj$1(commonAtoms$2);
   var builtins$1 = wordObj$1(commonBuiltins);
   var keywords$g = wordObj$1(commonKeywords$2);
   var blockkeywords = wordObj$1(commonBlockKeywords);
   var opChars = /[+\-*\/^<>=!&|~$:]/;
   var curPunc$6;

   function tokenBase$i(stream, state) {
     curPunc$6 = null;
     var ch = stream.next();
     if (ch == "#") {
       stream.skipToEnd();
       return "comment";
     } else if (ch == "0" && stream.eat("x")) {
       stream.eatWhile(/[\da-f]/i);
       return "number";
     } else if (ch == "." && stream.eat(/\d/)) {
       stream.match(/\d*(?:e[+\-]?\d+)?/);
       return "number";
     } else if (/\d/.test(ch)) {
       stream.match(/\d*(?:\.\d+)?(?:e[+\-]\d+)?L?/);
       return "number";
     } else if (ch == "'" || ch == '"') {
       state.tokenize = tokenString$c(ch);
       return "string";
     } else if (ch == "`") {
       stream.match(/[^`]+`/);
       return "string.special";
     } else if (ch == "." && stream.match(/.(?:[.]|\d+)/)) {
       return "keyword";
     } else if (/[a-zA-Z\.]/.test(ch)) {
       stream.eatWhile(/[\w\.]/);
       var word = stream.current();
       if (atoms$4.propertyIsEnumerable(word)) return "atom";
       if (keywords$g.propertyIsEnumerable(word)) {
         // Block keywords start new blocks, except 'else if', which only starts
         // one new block for the 'if', no block for the 'else'.
         if (blockkeywords.propertyIsEnumerable(word) &&
             !stream.match(/\s*if(\s+|$)/, false))
           curPunc$6 = "block";
         return "keyword";
       }
       if (builtins$1.propertyIsEnumerable(word)) return "builtin";
       return "variable";
     } else if (ch == "%") {
       if (stream.skipTo("%")) stream.next();
       return "variableName.special";
     } else if (
       (ch == "<" && stream.eat("-")) ||
         (ch == "<" && stream.match("<-")) ||
         (ch == "-" && stream.match(/>>?/))
     ) {
       return "operator";
     } else if (ch == "=" && state.ctx.argList) {
       return "operator";
     } else if (opChars.test(ch)) {
       if (ch == "$") return "operator";
       stream.eatWhile(opChars);
       return "operator";
     } else if (/[\(\){}\[\];]/.test(ch)) {
       curPunc$6 = ch;
       if (ch == ";") return "punctuation";
       return null;
     } else {
       return null;
     }
   }

   function tokenString$c(quote) {
     return function(stream, state) {
       if (stream.eat("\\")) {
         var ch = stream.next();
         if (ch == "x") stream.match(/^[a-f0-9]{2}/i);
         else if ((ch == "u" || ch == "U") && stream.eat("{") && stream.skipTo("}")) stream.next();
         else if (ch == "u") stream.match(/^[a-f0-9]{4}/i);
         else if (ch == "U") stream.match(/^[a-f0-9]{8}/i);
         else if (/[0-7]/.test(ch)) stream.match(/^[0-7]{1,2}/);
         return "string.special";
       } else {
         var next;
         while ((next = stream.next()) != null) {
           if (next == quote) { state.tokenize = tokenBase$i; break; }
           if (next == "\\") { stream.backUp(1); break; }
         }
         return "string";
       }
     };
   }

   var ALIGN_YES = 1, ALIGN_NO = 2, BRACELESS = 4;

   function push(state, type, stream) {
     state.ctx = {type: type,
                  indent: state.indent,
                  flags: 0,
                  column: stream.column(),
                  prev: state.ctx};
   }
   function setFlag(state, flag) {
     var ctx = state.ctx;
     state.ctx = {type: ctx.type,
                  indent: ctx.indent,
                  flags: ctx.flags | flag,
                  column: ctx.column,
                  prev: ctx.prev};
   }
   function pop(state) {
     state.indent = state.ctx.indent;
     state.ctx = state.ctx.prev;
   }

   const r = {
     name: "r",
     startState: function(indentUnit) {
       return {tokenize: tokenBase$i,
               ctx: {type: "top",
                     indent: -indentUnit,
                     flags: ALIGN_NO},
               indent: 0,
               afterIdent: false};
     },

     token: function(stream, state) {
       if (stream.sol()) {
         if ((state.ctx.flags & 3) == 0) state.ctx.flags |= ALIGN_NO;
         if (state.ctx.flags & BRACELESS) pop(state);
         state.indent = stream.indentation();
       }
       if (stream.eatSpace()) return null;
       var style = state.tokenize(stream, state);
       if (style != "comment" && (state.ctx.flags & ALIGN_NO) == 0) setFlag(state, ALIGN_YES);

       if ((curPunc$6 == ";" || curPunc$6 == "{" || curPunc$6 == "}") && state.ctx.type == "block") pop(state);
       if (curPunc$6 == "{") push(state, "}", stream);
       else if (curPunc$6 == "(") {
         push(state, ")", stream);
         if (state.afterIdent) state.ctx.argList = true;
       }
       else if (curPunc$6 == "[") push(state, "]", stream);
       else if (curPunc$6 == "block") push(state, "block", stream);
       else if (curPunc$6 == state.ctx.type) pop(state);
       else if (state.ctx.type == "block" && style != "comment") setFlag(state, BRACELESS);
       state.afterIdent = style == "variable" || style == "keyword";
       return style;
     },

     indent: function(state, textAfter, cx) {
       if (state.tokenize != tokenBase$i) return 0;
       var firstChar = textAfter && textAfter.charAt(0), ctx = state.ctx,
           closing = firstChar == ctx.type;
       if (ctx.flags & BRACELESS) ctx = ctx.prev;
       if (ctx.type == "block") return ctx.indent + (firstChar == "{" ? 0 : cx.unit);
       else if (ctx.flags & ALIGN_YES) return ctx.column + (closing ? 0 : 1);
       else return ctx.indent + (closing ? 0 : cx.unit);
     },

     languageData: {
       wordChars: ".",
       commentTokens: {line: "#"},
       autocomplete: commonAtoms$2.concat(commonBuiltins, commonKeywords$2)
     }
   };

   var r$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      r: r
   });

   var headerSeparator = /^-+$/;
   var headerLine = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)  ?\d{1,2} \d{2}:\d{2}(:\d{2})? [A-Z]{3,4} \d{4} - /;
   var simpleEmail = /^[\w+.-]+@[\w.-]+/;

   const rpmChanges = {
     name: "rpmchanges",
     token: function(stream) {
       if (stream.sol()) {
         if (stream.match(headerSeparator)) { return 'tag'; }
         if (stream.match(headerLine)) { return 'tag'; }
       }
       if (stream.match(simpleEmail)) { return 'string'; }
       stream.next();
       return null;
     }
   };

   // Quick and dirty spec file highlighting

   var arch = /^(i386|i586|i686|x86_64|ppc64le|ppc64|ppc|ia64|s390x|s390|sparc64|sparcv9|sparc|noarch|alphaev6|alpha|hppa|mipsel)/;

   var preamble = /^[a-zA-Z0-9()]+:/;
   var section = /^%(debug_package|package|description|prep|build|install|files|clean|changelog|preinstall|preun|postinstall|postun|pretrans|posttrans|pre|post|triggerin|triggerun|verifyscript|check|triggerpostun|triggerprein|trigger)/;
   var control_flow_complex = /^%(ifnarch|ifarch|if)/; // rpm control flow macros
   var control_flow_simple = /^%(else|endif)/; // rpm control flow macros
   var operators$1 = /^(\!|\?|\<\=|\<|\>\=|\>|\=\=|\&\&|\|\|)/; // operators in control flow macros

   const rpmSpec = {
     name: "rpmspec",
     startState: function () {
       return {
         controlFlow: false,
         macroParameters: false,
         section: false
       };
     },
     token: function (stream, state) {
       var ch = stream.peek();
       if (ch == "#") { stream.skipToEnd(); return "comment"; }

       if (stream.sol()) {
         if (stream.match(preamble)) { return "header"; }
         if (stream.match(section)) { return "atom"; }
       }

       if (stream.match(/^\$\w+/)) { return "def"; } // Variables like '$RPM_BUILD_ROOT'
       if (stream.match(/^\$\{\w+\}/)) { return "def"; } // Variables like '${RPM_BUILD_ROOT}'

       if (stream.match(control_flow_simple)) { return "keyword"; }
       if (stream.match(control_flow_complex)) {
         state.controlFlow = true;
         return "keyword";
       }
       if (state.controlFlow) {
         if (stream.match(operators$1)) { return "operator"; }
         if (stream.match(/^(\d+)/)) { return "number"; }
         if (stream.eol()) { state.controlFlow = false; }
       }

       if (stream.match(arch)) {
         if (stream.eol()) { state.controlFlow = false; }
         return "number";
       }

       // Macros like '%make_install' or '%attr(0775,root,root)'
       if (stream.match(/^%[\w]+/)) {
         if (stream.match('(')) { state.macroParameters = true; }
         return "keyword";
       }
       if (state.macroParameters) {
         if (stream.match(/^\d+/)) { return "number";}
         if (stream.match(')')) {
           state.macroParameters = false;
           return "keyword";
         }
       }

       // Macros like '%{defined fedora}'
       if (stream.match(/^%\{\??[\w \-\:\!]+\}/)) {
         if (stream.eol()) { state.controlFlow = false; }
         return "def";
       }

       stream.next();
       return null;
     }
   };

   var rpm = /*#__PURE__*/Object.freeze({
      __proto__: null,
      rpmChanges: rpmChanges,
      rpmSpec: rpmSpec
   });

   function wordObj(words) {
     var o = {};
     for (var i = 0, e = words.length; i < e; ++i) o[words[i]] = true;
     return o;
   }

   var keywordList = [
     "alias", "and", "BEGIN", "begin", "break", "case", "class", "def", "defined?", "do", "else",
     "elsif", "END", "end", "ensure", "false", "for", "if", "in", "module", "next", "not", "or",
     "redo", "rescue", "retry", "return", "self", "super", "then", "true", "undef", "unless",
     "until", "when", "while", "yield", "nil", "raise", "throw", "catch", "fail", "loop", "callcc",
     "caller", "lambda", "proc", "public", "protected", "private", "require", "load",
     "require_relative", "extend", "autoload", "__END__", "__FILE__", "__LINE__", "__dir__"
   ], keywords$f = wordObj(keywordList);

   var indentWords = wordObj(["def", "class", "case", "for", "while", "until", "module",
                              "catch", "loop", "proc", "begin"]);
   var dedentWords = wordObj(["end", "until"]);
   var opening$1 = {"[": "]", "{": "}", "(": ")"};
   var closing$1 = {"]": "[", "}": "{", ")": "("};

   var curPunc$5;

   function chain$4(newtok, stream, state) {
     state.tokenize.push(newtok);
     return newtok(stream, state);
   }

   function tokenBase$h(stream, state) {
     if (stream.sol() && stream.match("=begin") && stream.eol()) {
       state.tokenize.push(readBlockComment);
       return "comment";
     }
     if (stream.eatSpace()) return null;
     var ch = stream.next(), m;
     if (ch == "`" || ch == "'" || ch == '"') {
       return chain$4(readQuoted(ch, "string", ch == '"' || ch == "`"), stream, state);
     } else if (ch == "/") {
       if (regexpAhead(stream))
         return chain$4(readQuoted(ch, "string.special", true), stream, state);
       else
         return "operator";
     } else if (ch == "%") {
       var style = "string", embed = true;
       if (stream.eat("s")) style = "atom";
       else if (stream.eat(/[WQ]/)) style = "string";
       else if (stream.eat(/[r]/)) style = "string.special";
       else if (stream.eat(/[wxq]/)) { style = "string"; embed = false; }
       var delim = stream.eat(/[^\w\s=]/);
       if (!delim) return "operator";
       if (opening$1.propertyIsEnumerable(delim)) delim = opening$1[delim];
       return chain$4(readQuoted(delim, style, embed, true), stream, state);
     } else if (ch == "#") {
       stream.skipToEnd();
       return "comment";
     } else if (ch == "<" && (m = stream.match(/^<([-~])[\`\"\']?([a-zA-Z_?]\w*)[\`\"\']?(?:;|$)/))) {
       return chain$4(readHereDoc(m[2], m[1]), stream, state);
     } else if (ch == "0") {
       if (stream.eat("x")) stream.eatWhile(/[\da-fA-F]/);
       else if (stream.eat("b")) stream.eatWhile(/[01]/);
       else stream.eatWhile(/[0-7]/);
       return "number";
     } else if (/\d/.test(ch)) {
       stream.match(/^[\d_]*(?:\.[\d_]+)?(?:[eE][+\-]?[\d_]+)?/);
       return "number";
     } else if (ch == "?") {
       while (stream.match(/^\\[CM]-/)) {}
       if (stream.eat("\\")) stream.eatWhile(/\w/);
       else stream.next();
       return "string";
     } else if (ch == ":") {
       if (stream.eat("'")) return chain$4(readQuoted("'", "atom", false), stream, state);
       if (stream.eat('"')) return chain$4(readQuoted('"', "atom", true), stream, state);

       // :> :>> :< :<< are valid symbols
       if (stream.eat(/[\<\>]/)) {
         stream.eat(/[\<\>]/);
         return "atom";
       }

       // :+ :- :/ :* :| :& :! are valid symbols
       if (stream.eat(/[\+\-\*\/\&\|\:\!]/)) {
         return "atom";
       }

       // Symbols can't start by a digit
       if (stream.eat(/[a-zA-Z$@_\xa1-\uffff]/)) {
         stream.eatWhile(/[\w$\xa1-\uffff]/);
         // Only one ? ! = is allowed and only as the last character
         stream.eat(/[\?\!\=]/);
         return "atom";
       }
       return "operator";
     } else if (ch == "@" && stream.match(/^@?[a-zA-Z_\xa1-\uffff]/)) {
       stream.eat("@");
       stream.eatWhile(/[\w\xa1-\uffff]/);
       return "propertyName";
     } else if (ch == "$") {
       if (stream.eat(/[a-zA-Z_]/)) {
         stream.eatWhile(/[\w]/);
       } else if (stream.eat(/\d/)) {
         stream.eat(/\d/);
       } else {
         stream.next(); // Must be a special global like $: or $!
       }
       return "variableName.special";
     } else if (/[a-zA-Z_\xa1-\uffff]/.test(ch)) {
       stream.eatWhile(/[\w\xa1-\uffff]/);
       stream.eat(/[\?\!]/);
       if (stream.eat(":")) return "atom";
       return "variable";
     } else if (ch == "|" && (state.varList || state.lastTok == "{" || state.lastTok == "do")) {
       curPunc$5 = "|";
       return null;
     } else if (/[\(\)\[\]{}\\;]/.test(ch)) {
       curPunc$5 = ch;
       return null;
     } else if (ch == "-" && stream.eat(">")) {
       return "operator";
     } else if (/[=+\-\/*:\.^%<>~|]/.test(ch)) {
       var more = stream.eatWhile(/[=+\-\/*:\.^%<>~|]/);
       if (ch == "." && !more) curPunc$5 = ".";
       return "operator";
     } else {
       return null;
     }
   }

   function regexpAhead(stream) {
     var start = stream.pos, depth = 0, next, found = false, escaped = false;
     while ((next = stream.next()) != null) {
       if (!escaped) {
         if ("[{(".indexOf(next) > -1) {
           depth++;
         } else if ("]})".indexOf(next) > -1) {
           depth--;
           if (depth < 0) break
         } else if (next == "/" && depth == 0) {
           found = true;
           break
         }
         escaped = next == "\\";
       } else {
         escaped = false;
       }
     }
     stream.backUp(stream.pos - start);
     return found
   }

   function tokenBaseUntilBrace(depth) {
     if (!depth) depth = 1;
     return function(stream, state) {
       if (stream.peek() == "}") {
         if (depth == 1) {
           state.tokenize.pop();
           return state.tokenize[state.tokenize.length-1](stream, state);
         } else {
           state.tokenize[state.tokenize.length - 1] = tokenBaseUntilBrace(depth - 1);
         }
       } else if (stream.peek() == "{") {
         state.tokenize[state.tokenize.length - 1] = tokenBaseUntilBrace(depth + 1);
       }
       return tokenBase$h(stream, state);
     };
   }
   function tokenBaseOnce() {
     var alreadyCalled = false;
     return function(stream, state) {
       if (alreadyCalled) {
         state.tokenize.pop();
         return state.tokenize[state.tokenize.length-1](stream, state);
       }
       alreadyCalled = true;
       return tokenBase$h(stream, state);
     };
   }
   function readQuoted(quote, style, embed, unescaped) {
     return function(stream, state) {
       var escaped = false, ch;

       if (state.context.type === 'read-quoted-paused') {
         state.context = state.context.prev;
         stream.eat("}");
       }

       while ((ch = stream.next()) != null) {
         if (ch == quote && (unescaped || !escaped)) {
           state.tokenize.pop();
           break;
         }
         if (embed && ch == "#" && !escaped) {
           if (stream.eat("{")) {
             if (quote == "}") {
               state.context = {prev: state.context, type: 'read-quoted-paused'};
             }
             state.tokenize.push(tokenBaseUntilBrace());
             break;
           } else if (/[@\$]/.test(stream.peek())) {
             state.tokenize.push(tokenBaseOnce());
             break;
           }
         }
         escaped = !escaped && ch == "\\";
       }
       return style;
     };
   }
   function readHereDoc(phrase, mayIndent) {
     return function(stream, state) {
       if (mayIndent) stream.eatSpace();
       if (stream.match(phrase)) state.tokenize.pop();
       else stream.skipToEnd();
       return "string";
     };
   }
   function readBlockComment(stream, state) {
     if (stream.sol() && stream.match("=end") && stream.eol())
       state.tokenize.pop();
     stream.skipToEnd();
     return "comment";
   }

   const ruby = {
     name: "ruby",
     startState: function(indentUnit) {
       return {tokenize: [tokenBase$h],
               indented: 0,
               context: {type: "top", indented: -indentUnit},
               continuedLine: false,
               lastTok: null,
               varList: false};
     },

     token: function(stream, state) {
       curPunc$5 = null;
       if (stream.sol()) state.indented = stream.indentation();
       var style = state.tokenize[state.tokenize.length-1](stream, state), kwtype;
       var thisTok = curPunc$5;
       if (style == "variable") {
         var word = stream.current();
         style = state.lastTok == "." ? "property"
           : keywords$f.propertyIsEnumerable(stream.current()) ? "keyword"
           : /^[A-Z]/.test(word) ? "tag"
           : (state.lastTok == "def" || state.lastTok == "class" || state.varList) ? "def"
           : "variable";
         if (style == "keyword") {
           thisTok = word;
           if (indentWords.propertyIsEnumerable(word)) kwtype = "indent";
           else if (dedentWords.propertyIsEnumerable(word)) kwtype = "dedent";
           else if ((word == "if" || word == "unless") && stream.column() == stream.indentation())
             kwtype = "indent";
           else if (word == "do" && state.context.indented < state.indented)
             kwtype = "indent";
         }
       }
       if (curPunc$5 || (style && style != "comment")) state.lastTok = thisTok;
       if (curPunc$5 == "|") state.varList = !state.varList;

       if (kwtype == "indent" || /[\(\[\{]/.test(curPunc$5))
         state.context = {prev: state.context, type: curPunc$5 || style, indented: state.indented};
       else if ((kwtype == "dedent" || /[\)\]\}]/.test(curPunc$5)) && state.context.prev)
         state.context = state.context.prev;

       if (stream.eol())
         state.continuedLine = (curPunc$5 == "\\" || style == "operator");
       return style;
     },

     indent: function(state, textAfter, cx) {
       if (state.tokenize[state.tokenize.length-1] != tokenBase$h) return null;
       var firstChar = textAfter && textAfter.charAt(0);
       var ct = state.context;
       var closed = ct.type == closing$1[firstChar] ||
           ct.type == "keyword" && /^(?:end|until|else|elsif|when|rescue)\b/.test(textAfter);
       return ct.indented + (closed ? 0 : cx.unit) +
         (state.continuedLine ? cx.unit : 0);
     },

     languageData: {
       indentOnInput: /^\s*(?:end|rescue|elsif|else|\})$/,
       commentTokens: {line: "#"},
       autocomplete: keywordList
     }
   };

   var ruby$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      ruby: ruby
   });

   var words$7 = {};
   var isDoubleOperatorSym = {
     eq: 'operator',
     lt: 'operator',
     le: 'operator',
     gt: 'operator',
     ge: 'operator',
     "in": 'operator',
     ne: 'operator',
     or: 'operator'
   };
   var isDoubleOperatorChar = /(<=|>=|!=|<>)/;
   var isSingleOperatorChar = /[=\(:\),{}.*<>+\-\/^\[\]]/;

   // Takes a string of words separated by spaces and adds them as
   // keys with the value of the first argument 'style'
   function define$1(style, string, context) {
     if (context) {
       var split = string.split(' ');
       for (var i = 0; i < split.length; i++) {
         words$7[split[i]] = {style: style, state: context};
       }
     }
   }
   //datastep
   define$1('def', 'stack pgm view source debug nesting nolist', ['inDataStep']);
   define$1('def', 'if while until for do do; end end; then else cancel', ['inDataStep']);
   define$1('def', 'label format _n_ _error_', ['inDataStep']);
   define$1('def', 'ALTER BUFNO BUFSIZE CNTLLEV COMPRESS DLDMGACTION ENCRYPT ENCRYPTKEY EXTENDOBSCOUNTER GENMAX GENNUM INDEX LABEL OBSBUF OUTREP PW PWREQ READ REPEMPTY REPLACE REUSE ROLE SORTEDBY SPILL TOBSNO TYPE WRITE FILECLOSE FIRSTOBS IN OBS POINTOBS WHERE WHEREUP IDXNAME IDXWHERE DROP KEEP RENAME', ['inDataStep']);
   define$1('def', 'filevar finfo finv fipname fipnamel fipstate first firstobs floor', ['inDataStep']);
   define$1('def', 'varfmt varinfmt varlabel varlen varname varnum varray varrayx vartype verify vformat vformatd vformatdx vformatn vformatnx vformatw vformatwx vformatx vinarray vinarrayx vinformat vinformatd vinformatdx vinformatn vinformatnx vinformatw vinformatwx vinformatx vlabel vlabelx vlength vlengthx vname vnamex vnferr vtype vtypex weekday', ['inDataStep']);
   define$1('def', 'zipfips zipname zipnamel zipstate', ['inDataStep']);
   define$1('def', 'put putc putn', ['inDataStep']);
   define$1('builtin', 'data run', ['inDataStep']);


   //proc
   define$1('def', 'data', ['inProc']);

   // flow control for macros
   define$1('def', '%if %end %end; %else %else; %do %do; %then', ['inMacro']);

   //everywhere
   define$1('builtin', 'proc run; quit; libname filename %macro %mend option options', ['ALL']);

   define$1('def', 'footnote title libname ods', ['ALL']);
   define$1('def', '%let %put %global %sysfunc %eval ', ['ALL']);
   // automatic macro variables http://support.sas.com/documentation/cdl/en/mcrolref/61885/HTML/default/viewer.htm#a003167023.htm
   define$1('variable', '&sysbuffr &syscc &syscharwidth &syscmd &sysdate &sysdate9 &sysday &sysdevic &sysdmg &sysdsn &sysencoding &sysenv &syserr &syserrortext &sysfilrc &syshostname &sysindex &sysinfo &sysjobid &syslast &syslckrc &syslibrc &syslogapplname &sysmacroname &sysmenv &sysmsg &sysncpu &sysodspath &sysparm &syspbuff &sysprocessid &sysprocessname &sysprocname &sysrc &sysscp &sysscpl &sysscpl &syssite &sysstartid &sysstartname &systcpiphostname &systime &sysuserid &sysver &sysvlong &sysvlong4 &syswarningtext', ['ALL']);

   //footnote[1-9]? title[1-9]?

   //options statement
   define$1('def', 'source2 nosource2 page pageno pagesize', ['ALL']);

   //proc and datastep
   define$1('def', '_all_ _character_ _cmd_ _freq_ _i_ _infile_ _last_ _msg_ _null_ _numeric_ _temporary_ _type_ abort abs addr adjrsq airy alpha alter altlog altprint and arcos array arsin as atan attrc attrib attrn authserver autoexec awscontrol awsdef awsmenu awsmenumerge awstitle backward band base betainv between blocksize blshift bnot bor brshift bufno bufsize bxor by byerr byline byte calculated call cards cards4 catcache cbufno cdf ceil center cexist change chisq cinv class cleanup close cnonct cntllev coalesce codegen col collate collin column comamid comaux1 comaux2 comdef compbl compound compress config continue convert cos cosh cpuid create cross crosstab css curobs cv daccdb daccdbsl daccsl daccsyd dacctab dairy datalines datalines4 datejul datepart datetime day dbcslang dbcstype dclose ddfm ddm delete delimiter depdb depdbsl depsl depsyd deptab dequote descending descript design= device dflang dhms dif digamma dim dinfo display distinct dkricond dkrocond dlm dnum do dopen doptname doptnum dread drop dropnote dsname dsnferr echo else emaildlg emailid emailpw emailserver emailsys encrypt end endsas engine eof eov erf erfc error errorcheck errors exist exp fappend fclose fcol fdelete feedback fetch fetchobs fexist fget file fileclose fileexist filefmt filename fileref  fmterr fmtsearch fnonct fnote font fontalias  fopen foptname foptnum force formatted formchar formdelim formdlim forward fpoint fpos fput fread frewind frlen from fsep fuzz fwrite gaminv gamma getoption getvarc getvarn go goto group gwindow hbar hbound helpenv helploc hms honorappearance hosthelp hostprint hour hpct html hvar ibessel ibr id if index indexc indexw initcmd initstmt inner input inputc inputn inr insert int intck intnx into intrr invaliddata irr is jbessel join juldate keep kentb kurtosis label lag last lbound leave left length levels lgamma lib  library libref line linesize link list log log10 log2 logpdf logpmf logsdf lostcard lowcase lrecl ls macro macrogen maps mautosource max maxdec maxr mdy mean measures median memtype merge merror min minute missing missover mlogic mod mode model modify month mopen mort mprint mrecall msglevel msymtabmax mvarsize myy n nest netpv new news nmiss no nobatch nobs nocaps nocardimage nocenter nocharcode nocmdmac nocol nocum nodate nodbcs nodetails nodmr nodms nodmsbatch nodup nodupkey noduplicates noechoauto noequals noerrorabend noexitwindows nofullstimer noicon noimplmac noint nolist noloadlist nomiss nomlogic nomprint nomrecall nomsgcase nomstored nomultenvappl nonotes nonumber noobs noovp nopad nopercent noprint noprintinit normal norow norsasuser nosetinit  nosplash nosymbolgen note notes notitle notitles notsorted noverbose noxsync noxwait npv null number numkeys nummousekeys nway obs  on open     order ordinal otherwise out outer outp= output over ovp p(1 5 10 25 50 75 90 95 99) pad pad2  paired parm parmcards path pathdll pathname pdf peek peekc pfkey pmf point poisson poke position printer probbeta probbnml probchi probf probgam probhypr probit probnegb probnorm probsig probt procleave prt ps  pw pwreq qtr quote r ranbin rancau random ranexp rangam range ranks rannor ranpoi rantbl rantri ranuni rcorr read recfm register regr remote remove rename repeat repeated replace resolve retain return reuse reverse rewind right round rsquare rtf rtrace rtraceloc s s2 samploc sasautos sascontrol sasfrscr sasmsg sasmstore sasscript sasuser saving scan sdf second select selection separated seq serror set setcomm setot sign simple sin sinh siteinfo skewness skip sle sls sortedby sortpgm sortseq sortsize soundex  spedis splashlocation split spool sqrt start std stderr stdin stfips stimer stname stnamel stop stopover sub subgroup subpopn substr sum sumwgt symbol symbolgen symget symput sysget sysin sysleave sysmsg sysparm sysprint sysprintfont sysprod sysrc system t table tables tan tanh tapeclose tbufsize terminal test then timepart tinv  tnonct to today tol tooldef totper transformout translate trantab tranwrd trigamma trim trimn trunc truncover type unformatted uniform union until upcase update user usericon uss validate value var  weight when where while wincharset window work workinit workterm write wsum xsync xwait yearcutoff yes yyq  min max', ['inDataStep', 'inProc']);
   define$1('operator', 'and not ', ['inDataStep', 'inProc']);

   // Main function
   function tokenize$2(stream, state) {
     // Finally advance the stream
     var ch = stream.next();

     // BLOCKCOMMENT
     if (ch === '/' && stream.eat('*')) {
       state.continueComment = true;
       return "comment";
     } else if (state.continueComment === true) { // in comment block
       //comment ends at the beginning of the line
       if (ch === '*' && stream.peek() === '/') {
         stream.next();
         state.continueComment = false;
       } else if (stream.skipTo('*')) { //comment is potentially later in line
         stream.skipTo('*');
         stream.next();
         if (stream.eat('/'))
           state.continueComment = false;
       } else {
         stream.skipToEnd();
       }
       return "comment";
     }

     if (ch == "*" && stream.column() == stream.indentation()) {
       stream.skipToEnd();
       return "comment"
     }

     // DoubleOperator match
     var doubleOperator = ch + stream.peek();

     if ((ch === '"' || ch === "'") && !state.continueString) {
       state.continueString = ch;
       return "string"
     } else if (state.continueString) {
       if (state.continueString == ch) {
         state.continueString = null;
       } else if (stream.skipTo(state.continueString)) {
         // quote found on this line
         stream.next();
         state.continueString = null;
       } else {
         stream.skipToEnd();
       }
       return "string";
     } else if (state.continueString !== null && stream.eol()) {
       stream.skipTo(state.continueString) || stream.skipToEnd();
       return "string";
     } else if (/[\d\.]/.test(ch)) { //find numbers
       if (ch === ".")
         stream.match(/^[0-9]+([eE][\-+]?[0-9]+)?/);
       else if (ch === "0")
         stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^0[0-7]+/);
       else
         stream.match(/^[0-9]*\.?[0-9]*([eE][\-+]?[0-9]+)?/);
       return "number";
     } else if (isDoubleOperatorChar.test(ch + stream.peek())) { // TWO SYMBOL TOKENS
       stream.next();
       return "operator";
     } else if (isDoubleOperatorSym.hasOwnProperty(doubleOperator)) {
       stream.next();
       if (stream.peek() === ' ')
         return isDoubleOperatorSym[doubleOperator.toLowerCase()];
     } else if (isSingleOperatorChar.test(ch)) { // SINGLE SYMBOL TOKENS
       return "operator";
     }

     // Matches one whole word -- even if the word is a character
     var word;
     if (stream.match(/[%&;\w]+/, false) != null) {
       word = ch + stream.match(/[%&;\w]+/, true);
       if (/&/.test(word)) return 'variable'
     } else {
       word = ch;
     }
     // the word after DATA PROC or MACRO
     if (state.nextword) {
       stream.match(/[\w]+/);
       // match memname.libname
       if (stream.peek() === '.') stream.skipTo(' ');
       state.nextword = false;
       return 'variableName.special';
     }

     word = word.toLowerCase();
     // Are we in a DATA Step?
     if (state.inDataStep) {
       if (word === 'run;' || stream.match(/run\s;/)) {
         state.inDataStep = false;
         return 'builtin';
       }
       // variable formats
       if ((word) && stream.next() === '.') {
         //either a format or libname.memname
         if (/\w/.test(stream.peek())) return 'variableName.special';
         else return 'variable';
       }
       // do we have a DATA Step keyword
       if (word && words$7.hasOwnProperty(word) &&
           (words$7[word].state.indexOf("inDataStep") !== -1 ||
            words$7[word].state.indexOf("ALL") !== -1)) {
         //backup to the start of the word
         if (stream.start < stream.pos)
           stream.backUp(stream.pos - stream.start);
         //advance the length of the word and return
         for (var i = 0; i < word.length; ++i) stream.next();
         return words$7[word].style;
       }
     }
     // Are we in an Proc statement?
     if (state.inProc) {
       if (word === 'run;' || word === 'quit;') {
         state.inProc = false;
         return 'builtin';
       }
       // do we have a proc keyword
       if (word && words$7.hasOwnProperty(word) &&
           (words$7[word].state.indexOf("inProc") !== -1 ||
            words$7[word].state.indexOf("ALL") !== -1)) {
         stream.match(/[\w]+/);
         return words$7[word].style;
       }
     }
     // Are we in a Macro statement?
     if (state.inMacro) {
       if (word === '%mend') {
         if (stream.peek() === ';') stream.next();
         state.inMacro = false;
         return 'builtin';
       }
       if (word && words$7.hasOwnProperty(word) &&
           (words$7[word].state.indexOf("inMacro") !== -1 ||
            words$7[word].state.indexOf("ALL") !== -1)) {
         stream.match(/[\w]+/);
         return words$7[word].style;
       }

       return 'atom';
     }
     // Do we have Keywords specific words?
     if (word && words$7.hasOwnProperty(word)) {
       // Negates the initial next()
       stream.backUp(1);
       // Actually move the stream
       stream.match(/[\w]+/);
       if (word === 'data' && /=/.test(stream.peek()) === false) {
         state.inDataStep = true;
         state.nextword = true;
         return 'builtin';
       }
       if (word === 'proc') {
         state.inProc = true;
         state.nextword = true;
         return 'builtin';
       }
       if (word === '%macro') {
         state.inMacro = true;
         state.nextword = true;
         return 'builtin';
       }
       if (/title[1-9]/.test(word)) return 'def';

       if (word === 'footnote') {
         stream.eat(/[1-9]/);
         return 'def';
       }

       // Returns their value as state in the prior define methods
       if (state.inDataStep === true && words$7[word].state.indexOf("inDataStep") !== -1)
         return words$7[word].style;
       if (state.inProc === true && words$7[word].state.indexOf("inProc") !== -1)
         return words$7[word].style;
       if (state.inMacro === true && words$7[word].state.indexOf("inMacro") !== -1)
         return words$7[word].style;
       if (words$7[word].state.indexOf("ALL") !== -1)
         return words$7[word].style;
       return null;
     }
     // Unrecognized syntax
     return null;
   }

   const sas = {
     name: "sas",
     startState: function () {
       return {
         inDataStep: false,
         inProc: false,
         inMacro: false,
         nextword: false,
         continueString: null,
         continueComment: false
       };
     },
     token: function (stream, state) {
       // Strip the spaces, but regex will account for them either way
       if (stream.eatSpace()) return null;
       // Go through the main process
       return tokenize$2(stream, state);
     },

     languageData: {
       commentTokens: {block: {open: "/*", close: "*/"}}
     }
   };

   var sas$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      sas: sas
   });

   var BUILTIN = "builtin", COMMENT = "comment", STRING = "string",
       SYMBOL = "symbol", ATOM = "atom", NUMBER = "number", BRACKET = "bracket";
   var INDENT_WORD_SKIP = 2;

   function makeKeywords(str) {
     var obj = {}, words = str.split(" ");
     for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
     return obj;
   }

   var keywords$e = makeKeywords("λ case-lambda call/cc class cond-expand define-class define-values exit-handler field import inherit init-field interface let*-values let-values let/ec mixin opt-lambda override protect provide public rename require require-for-syntax syntax syntax-case syntax-error unit/sig unless when with-syntax and begin call-with-current-continuation call-with-input-file call-with-output-file case cond define define-syntax define-macro defmacro delay do dynamic-wind else for-each if lambda let let* let-syntax letrec letrec-syntax map or syntax-rules abs acos angle append apply asin assoc assq assv atan boolean? caar cadr call-with-input-file call-with-output-file call-with-values car cdddar cddddr cdr ceiling char->integer char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? char-downcase char-lower-case? char-numeric? char-ready? char-upcase char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? char? close-input-port close-output-port complex? cons cos current-input-port current-output-port denominator display eof-object? eq? equal? eqv? eval even? exact->inexact exact? exp expt #f floor force gcd imag-part inexact->exact inexact? input-port? integer->char integer? interaction-environment lcm length list list->string list->vector list-ref list-tail list? load log magnitude make-polar make-rectangular make-string make-vector max member memq memv min modulo negative? newline not null-environment null? number->string number? numerator odd? open-input-file open-output-file output-port? pair? peek-char port? positive? procedure? quasiquote quote quotient rational? rationalize read read-char real-part real? remainder reverse round scheme-report-environment set! set-car! set-cdr! sin sqrt string string->list string->number string->symbol string-append string-ci<=? string-ci<? string-ci=? string-ci>=? string-ci>? string-copy string-fill! string-length string-ref string-set! string<=? string<? string=? string>=? string>? string? substring symbol->string symbol? #t tan transcript-off transcript-on truncate values vector vector->list vector-fill! vector-length vector-ref vector-set! with-input-from-file with-output-to-file write write-char zero?");
   var indentKeys = makeKeywords("define let letrec let* lambda define-macro defmacro let-syntax letrec-syntax let-values let*-values define-syntax syntax-rules define-values when unless");

   function stateStack(indent, type, prev) { // represents a state stack object
     this.indent = indent;
     this.type = type;
     this.prev = prev;
   }

   function pushStack(state, indent, type) {
     state.indentStack = new stateStack(indent, type, state.indentStack);
   }

   function popStack(state) {
     state.indentStack = state.indentStack.prev;
   }

   var binaryMatcher = new RegExp(/^(?:[-+]i|[-+][01]+#*(?:\/[01]+#*)?i|[-+]?[01]+#*(?:\/[01]+#*)?@[-+]?[01]+#*(?:\/[01]+#*)?|[-+]?[01]+#*(?:\/[01]+#*)?[-+](?:[01]+#*(?:\/[01]+#*)?)?i|[-+]?[01]+#*(?:\/[01]+#*)?)(?=[()\s;"]|$)/i);
   var octalMatcher = new RegExp(/^(?:[-+]i|[-+][0-7]+#*(?:\/[0-7]+#*)?i|[-+]?[0-7]+#*(?:\/[0-7]+#*)?@[-+]?[0-7]+#*(?:\/[0-7]+#*)?|[-+]?[0-7]+#*(?:\/[0-7]+#*)?[-+](?:[0-7]+#*(?:\/[0-7]+#*)?)?i|[-+]?[0-7]+#*(?:\/[0-7]+#*)?)(?=[()\s;"]|$)/i);
   var hexMatcher = new RegExp(/^(?:[-+]i|[-+][\da-f]+#*(?:\/[\da-f]+#*)?i|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?@[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?[-+](?:[\da-f]+#*(?:\/[\da-f]+#*)?)?i|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?)(?=[()\s;"]|$)/i);
   var decimalMatcher = new RegExp(/^(?:[-+]i|[-+](?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)i|[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)@[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)|[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)[-+](?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)?i|(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*))(?=[()\s;"]|$)/i);

   function isBinaryNumber (stream) {
     return stream.match(binaryMatcher);
   }

   function isOctalNumber (stream) {
     return stream.match(octalMatcher);
   }

   function isDecimalNumber (stream, backup) {
     if (backup === true) {
       stream.backUp(1);
     }
     return stream.match(decimalMatcher);
   }

   function isHexNumber (stream) {
     return stream.match(hexMatcher);
   }

   function processEscapedSequence(stream, options) {
     var next, escaped = false;
     while ((next = stream.next()) != null) {
       if (next == options.token && !escaped) {
         options.state.mode = false;
         break;
       }
       escaped = !escaped && next == "\\";
     }
   }

   const scheme = {
     name: "scheme",
     startState: function () {
       return {
         indentStack: null,
         indentation: 0,
         mode: false,
         sExprComment: false,
         sExprQuote: false
       };
     },

     token: function (stream, state) {
       if (state.indentStack == null && stream.sol()) {
         // update indentation, but only if indentStack is empty
         state.indentation = stream.indentation();
       }

       // skip spaces
       if (stream.eatSpace()) {
         return null;
       }
       var returnType = null;

       switch(state.mode){
       case "string": // multi-line string parsing mode
         processEscapedSequence(stream, {
           token: "\"",
           state: state
         });
         returnType = STRING; // continue on in scheme-string mode
         break;
       case "symbol": // escape symbol
         processEscapedSequence(stream, {
           token: "|",
           state: state
         });
         returnType = SYMBOL; // continue on in scheme-symbol mode
         break;
       case "comment": // comment parsing mode
         var next, maybeEnd = false;
         while ((next = stream.next()) != null) {
           if (next == "#" && maybeEnd) {

             state.mode = false;
             break;
           }
           maybeEnd = (next == "|");
         }
         returnType = COMMENT;
         break;
       case "s-expr-comment": // s-expr commenting mode
         state.mode = false;
         if(stream.peek() == "(" || stream.peek() == "["){
           // actually start scheme s-expr commenting mode
           state.sExprComment = 0;
         }else {
           // if not we just comment the entire of the next token
           stream.eatWhile(/[^\s\(\)\[\]]/); // eat symbol atom
           returnType = COMMENT;
           break;
         }
       default: // default parsing mode
         var ch = stream.next();

         if (ch == "\"") {
           state.mode = "string";
           returnType = STRING;

         } else if (ch == "'") {
           if (stream.peek() == "(" || stream.peek() == "["){
             if (typeof state.sExprQuote != "number") {
               state.sExprQuote = 0;
             } // else already in a quoted expression
             returnType = ATOM;
           } else {
             stream.eatWhile(/[\w_\-!$%&*+\.\/:<=>?@\^~]/);
             returnType = ATOM;
           }
         } else if (ch == '|') {
           state.mode = "symbol";
           returnType = SYMBOL;
         } else if (ch == '#') {
           if (stream.eat("|")) {                    // Multi-line comment
             state.mode = "comment"; // toggle to comment mode
             returnType = COMMENT;
           } else if (stream.eat(/[tf]/i)) {            // #t/#f (atom)
             returnType = ATOM;
           } else if (stream.eat(';')) {                // S-Expr comment
             state.mode = "s-expr-comment";
             returnType = COMMENT;
           } else {
             var numTest = null, hasExactness = false, hasRadix = true;
             if (stream.eat(/[ei]/i)) {
               hasExactness = true;
             } else {
               stream.backUp(1);       // must be radix specifier
             }
             if (stream.match(/^#b/i)) {
               numTest = isBinaryNumber;
             } else if (stream.match(/^#o/i)) {
               numTest = isOctalNumber;
             } else if (stream.match(/^#x/i)) {
               numTest = isHexNumber;
             } else if (stream.match(/^#d/i)) {
               numTest = isDecimalNumber;
             } else if (stream.match(/^[-+0-9.]/, false)) {
               hasRadix = false;
               numTest = isDecimalNumber;
               // re-consume the initial # if all matches failed
             } else if (!hasExactness) {
               stream.eat('#');
             }
             if (numTest != null) {
               if (hasRadix && !hasExactness) {
                 // consume optional exactness after radix
                 stream.match(/^#[ei]/i);
               }
               if (numTest(stream))
                 returnType = NUMBER;
             }
           }
         } else if (/^[-+0-9.]/.test(ch) && isDecimalNumber(stream, true)) { // match non-prefixed number, must be decimal
           returnType = NUMBER;
         } else if (ch == ";") { // comment
           stream.skipToEnd(); // rest of the line is a comment
           returnType = COMMENT;
         } else if (ch == "(" || ch == "[") {
           var keyWord = ''; var indentTemp = stream.column(), letter;
           /**
              Either
              (indent-word ..
              (non-indent-word ..
              (;something else, bracket, etc.
           */

           while ((letter = stream.eat(/[^\s\(\[\;\)\]]/)) != null) {
             keyWord += letter;
           }

           if (keyWord.length > 0 && indentKeys.propertyIsEnumerable(keyWord)) { // indent-word

             pushStack(state, indentTemp + INDENT_WORD_SKIP, ch);
           } else { // non-indent word
             // we continue eating the spaces
             stream.eatSpace();
             if (stream.eol() || stream.peek() == ";") {
               // nothing significant after
               // we restart indentation 1 space after
               pushStack(state, indentTemp + 1, ch);
             } else {
               pushStack(state, indentTemp + stream.current().length, ch); // else we match
             }
           }
           stream.backUp(stream.current().length - 1); // undo all the eating

           if(typeof state.sExprComment == "number") state.sExprComment++;
           if(typeof state.sExprQuote == "number") state.sExprQuote++;

           returnType = BRACKET;
         } else if (ch == ")" || ch == "]") {
           returnType = BRACKET;
           if (state.indentStack != null && state.indentStack.type == (ch == ")" ? "(" : "[")) {
             popStack(state);

             if(typeof state.sExprComment == "number"){
               if(--state.sExprComment == 0){
                 returnType = COMMENT; // final closing bracket
                 state.sExprComment = false; // turn off s-expr commenting mode
               }
             }
             if(typeof state.sExprQuote == "number"){
               if(--state.sExprQuote == 0){
                 returnType = ATOM; // final closing bracket
                 state.sExprQuote = false; // turn off s-expr quote mode
               }
             }
           }
         } else {
           stream.eatWhile(/[\w_\-!$%&*+\.\/:<=>?@\^~]/);

           if (keywords$e && keywords$e.propertyIsEnumerable(stream.current())) {
             returnType = BUILTIN;
           } else returnType = "variable";
         }
       }
       return (typeof state.sExprComment == "number") ? COMMENT : ((typeof state.sExprQuote == "number") ? ATOM : returnType);
     },

     indent: function (state) {
       if (state.indentStack == null) return state.indentation;
       return state.indentStack.indent;
     },

     languageData: {
       closeBrackets: {brackets: ["(", "[", "{", '"']},
       commentTokens: {line: ";;"}
     }
   };

   var scheme$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      scheme: scheme
   });

   var words$6 = {};
   function define(style, dict) {
     for(var i = 0; i < dict.length; i++) {
       words$6[dict[i]] = style;
     }
   }
   var commonAtoms$1 = ["true", "false"];
   var commonKeywords$1 = ["if", "then", "do", "else", "elif", "while", "until", "for", "in", "esac", "fi",
                         "fin", "fil", "done", "exit", "set", "unset", "export", "function"];
   var commonCommands = ["ab", "awk", "bash", "beep", "cat", "cc", "cd", "chown", "chmod", "chroot", "clear",
                         "cp", "curl", "cut", "diff", "echo", "find", "gawk", "gcc", "get", "git", "grep", "hg", "kill", "killall",
                         "ln", "ls", "make", "mkdir", "openssl", "mv", "nc", "nl", "node", "npm", "ping", "ps", "restart", "rm",
                         "rmdir", "sed", "service", "sh", "shopt", "shred", "source", "sort", "sleep", "ssh", "start", "stop",
                         "su", "sudo", "svn", "tee", "telnet", "top", "touch", "vi", "vim", "wall", "wc", "wget", "who", "write",
                         "yes", "zsh"];

   define('atom', commonAtoms$1);
   define('keyword', commonKeywords$1);
   define('builtin', commonCommands);

   function tokenBase$g(stream, state) {
     if (stream.eatSpace()) return null;

     var sol = stream.sol();
     var ch = stream.next();

     if (ch === '\\') {
       stream.next();
       return null;
     }
     if (ch === '\'' || ch === '"' || ch === '`') {
       state.tokens.unshift(tokenString$b(ch, ch === "`" ? "quote" : "string"));
       return tokenize$1(stream, state);
     }
     if (ch === '#') {
       if (sol && stream.eat('!')) {
         stream.skipToEnd();
         return 'meta'; // 'comment'?
       }
       stream.skipToEnd();
       return 'comment';
     }
     if (ch === '$') {
       state.tokens.unshift(tokenDollar);
       return tokenize$1(stream, state);
     }
     if (ch === '+' || ch === '=') {
       return 'operator';
     }
     if (ch === '-') {
       stream.eat('-');
       stream.eatWhile(/\w/);
       return 'attribute';
     }
     if (ch == "<") {
       if (stream.match("<<")) return "operator"
       var heredoc = stream.match(/^<-?\s*['"]?([^'"]*)['"]?/);
       if (heredoc) {
         state.tokens.unshift(tokenHeredoc(heredoc[1]));
         return 'string.special'
       }
     }
     if (/\d/.test(ch)) {
       stream.eatWhile(/\d/);
       if(stream.eol() || !/\w/.test(stream.peek())) {
         return 'number';
       }
     }
     stream.eatWhile(/[\w-]/);
     var cur = stream.current();
     if (stream.peek() === '=' && /\w+/.test(cur)) return 'def';
     return words$6.hasOwnProperty(cur) ? words$6[cur] : null;
   }

   function tokenString$b(quote, style) {
     var close = quote == "(" ? ")" : quote == "{" ? "}" : quote;
     return function(stream, state) {
       var next, escaped = false;
       while ((next = stream.next()) != null) {
         if (next === close && !escaped) {
           state.tokens.shift();
           break;
         } else if (next === '$' && !escaped && quote !== "'" && stream.peek() != close) {
           escaped = true;
           stream.backUp(1);
           state.tokens.unshift(tokenDollar);
           break;
         } else if (!escaped && quote !== close && next === quote) {
           state.tokens.unshift(tokenString$b(quote, style));
           return tokenize$1(stream, state)
         } else if (!escaped && /['"]/.test(next) && !/['"]/.test(quote)) {
           state.tokens.unshift(tokenStringStart(next, "string"));
           stream.backUp(1);
           break;
         }
         escaped = !escaped && next === '\\';
       }
       return style;
     };
   }
   function tokenStringStart(quote, style) {
     return function(stream, state) {
       state.tokens[0] = tokenString$b(quote, style);
       stream.next();
       return tokenize$1(stream, state)
     }
   }

   var tokenDollar = function(stream, state) {
     if (state.tokens.length > 1) stream.eat('$');
     var ch = stream.next();
     if (/['"({]/.test(ch)) {
       state.tokens[0] = tokenString$b(ch, ch == "(" ? "quote" : ch == "{" ? "def" : "string");
       return tokenize$1(stream, state);
     }
     if (!/\d/.test(ch)) stream.eatWhile(/\w/);
     state.tokens.shift();
     return 'def';
   };

   function tokenHeredoc(delim) {
     return function(stream, state) {
       if (stream.sol() && stream.string == delim) state.tokens.shift();
       stream.skipToEnd();
       return "string.special"
     }
   }

   function tokenize$1(stream, state) {
     return (state.tokens[0] || tokenBase$g) (stream, state);
   }
   const shell = {
     name: "shell",
     startState: function() {return {tokens:[]};},
     token: function(stream, state) {
       return tokenize$1(stream, state);
     },
     languageData: {
       autocomplete: commonAtoms$1.concat(commonKeywords$1, commonCommands),
       closeBrackets: {brackets: ["(", "[", "{", "'", '"', "`"]},
       commentTokens: {line: "#"}
     }
   };

   var shell$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      shell: shell
   });

   function words$5(str) {
     var obj = {}, words = str.split(" ");
     for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
     return obj;
   }

   var keywords$d = words$5("if elsif else stop require");
   var atoms$3 = words$5("true false not");

   function tokenBase$f(stream, state) {

     var ch = stream.next();
     if (ch == "/" && stream.eat("*")) {
       state.tokenize = tokenCComment$1;
       return tokenCComment$1(stream, state);
     }

     if (ch === '#') {
       stream.skipToEnd();
       return "comment";
     }

     if (ch == "\"") {
       state.tokenize = tokenString$a(ch);
       return state.tokenize(stream, state);
     }

     if (ch == "(") {
       state._indent.push("(");
       // add virtual angel wings so that editor behaves...
       // ...more sane incase of broken brackets
       state._indent.push("{");
       return null;
     }

     if (ch === "{") {
       state._indent.push("{");
       return null;
     }

     if (ch == ")")  {
       state._indent.pop();
       state._indent.pop();
     }

     if (ch === "}") {
       state._indent.pop();
       return null;
     }

     if (ch == ",")
       return null;

     if (ch == ";")
       return null;


     if (/[{}\(\),;]/.test(ch))
       return null;

     // 1*DIGIT "K" / "M" / "G"
     if (/\d/.test(ch)) {
       stream.eatWhile(/[\d]/);
       stream.eat(/[KkMmGg]/);
       return "number";
     }

     // ":" (ALPHA / "_") *(ALPHA / DIGIT / "_")
     if (ch == ":") {
       stream.eatWhile(/[a-zA-Z_]/);
       stream.eatWhile(/[a-zA-Z0-9_]/);

       return "operator";
     }

     stream.eatWhile(/\w/);
     var cur = stream.current();

     // "text:" *(SP / HTAB) (hash-comment / CRLF)
     // *(multiline-literal / multiline-dotstart)
     // "." CRLF
     if ((cur == "text") && stream.eat(":"))
     {
       state.tokenize = tokenMultiLineString;
       return "string";
     }

     if (keywords$d.propertyIsEnumerable(cur))
       return "keyword";

     if (atoms$3.propertyIsEnumerable(cur))
       return "atom";

     return null;
   }

   function tokenMultiLineString(stream, state)
   {
     state._multiLineString = true;
     // the first line is special it may contain a comment
     if (!stream.sol()) {
       stream.eatSpace();

       if (stream.peek() == "#") {
         stream.skipToEnd();
         return "comment";
       }

       stream.skipToEnd();
       return "string";
     }

     if ((stream.next() == ".")  && (stream.eol()))
     {
       state._multiLineString = false;
       state.tokenize = tokenBase$f;
     }

     return "string";
   }

   function tokenCComment$1(stream, state) {
     var maybeEnd = false, ch;
     while ((ch = stream.next()) != null) {
       if (maybeEnd && ch == "/") {
         state.tokenize = tokenBase$f;
         break;
       }
       maybeEnd = (ch == "*");
     }
     return "comment";
   }

   function tokenString$a(quote) {
     return function(stream, state) {
       var escaped = false, ch;
       while ((ch = stream.next()) != null) {
         if (ch == quote && !escaped)
           break;
         escaped = !escaped && ch == "\\";
       }
       if (!escaped) state.tokenize = tokenBase$f;
       return "string";
     };
   }

   const sieve = {
     name: "sieve",
     startState: function(base) {
       return {tokenize: tokenBase$f,
               baseIndent: base || 0,
               _indent: []};
     },

     token: function(stream, state) {
       if (stream.eatSpace())
         return null;

       return (state.tokenize || tokenBase$f)(stream, state);
     },

     indent: function(state, _textAfter, cx) {
       var length = state._indent.length;
       if (_textAfter && (_textAfter[0] == "}"))
         length--;

       if (length <0)
         length = 0;

       return length * cx.unit;
     },

     languageData: {
       indentOnInput: /^\s*\}$/
     }
   };

   var sieve$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      sieve: sieve
   });

   var specialChars = /[+\-\/\\*~<>=@%|&?!.,:;^]/;
   var keywords$c = /true|false|nil|self|super|thisContext/;

   var Context$5 = function(tokenizer, parent) {
     this.next = tokenizer;
     this.parent = parent;
   };

   var Token = function(name, context, eos) {
     this.name = name;
     this.context = context;
     this.eos = eos;
   };

   var State = function() {
     this.context = new Context$5(next, null);
     this.expectVariable = true;
     this.indentation = 0;
     this.userIndentationDelta = 0;
   };

   State.prototype.userIndent = function(indentation, indentUnit) {
     this.userIndentationDelta = indentation > 0 ? (indentation / indentUnit - this.indentation) : 0;
   };

   var next = function(stream, context, state) {
     var token = new Token(null, context, false);
     var aChar = stream.next();

     if (aChar === '"') {
       token = nextComment(stream, new Context$5(nextComment, context));

     } else if (aChar === '\'') {
       token = nextString(stream, new Context$5(nextString, context));

     } else if (aChar === '#') {
       if (stream.peek() === '\'') {
         stream.next();
         token = nextSymbol(stream, new Context$5(nextSymbol, context));
       } else {
         if (stream.eatWhile(/[^\s.{}\[\]()]/))
           token.name = 'string.special';
         else
           token.name = 'meta';
       }

     } else if (aChar === '$') {
       if (stream.next() === '<') {
         stream.eatWhile(/[^\s>]/);
         stream.next();
       }
       token.name = 'string.special';

     } else if (aChar === '|' && state.expectVariable) {
       token.context = new Context$5(nextTemporaries, context);

     } else if (/[\[\]{}()]/.test(aChar)) {
       token.name = 'bracket';
       token.eos = /[\[{(]/.test(aChar);

       if (aChar === '[') {
         state.indentation++;
       } else if (aChar === ']') {
         state.indentation = Math.max(0, state.indentation - 1);
       }

     } else if (specialChars.test(aChar)) {
       stream.eatWhile(specialChars);
       token.name = 'operator';
       token.eos = aChar !== ';'; // ; cascaded message expression

     } else if (/\d/.test(aChar)) {
       stream.eatWhile(/[\w\d]/);
       token.name = 'number';

     } else if (/[\w_]/.test(aChar)) {
       stream.eatWhile(/[\w\d_]/);
       token.name = state.expectVariable ? (keywords$c.test(stream.current()) ? 'keyword' : 'variable') : null;

     } else {
       token.eos = state.expectVariable;
     }

     return token;
   };

   var nextComment = function(stream, context) {
     stream.eatWhile(/[^"]/);
     return new Token('comment', stream.eat('"') ? context.parent : context, true);
   };

   var nextString = function(stream, context) {
     stream.eatWhile(/[^']/);
     return new Token('string', stream.eat('\'') ? context.parent : context, false);
   };

   var nextSymbol = function(stream, context) {
     stream.eatWhile(/[^']/);
     return new Token('string.special', stream.eat('\'') ? context.parent : context, false);
   };

   var nextTemporaries = function(stream, context) {
     var token = new Token(null, context, false);
     var aChar = stream.next();

     if (aChar === '|') {
       token.context = context.parent;
       token.eos = true;

     } else {
       stream.eatWhile(/[^|]/);
       token.name = 'variable';
     }

     return token;
   };

   const smalltalk = {
     name: "smalltalk",

     startState: function() {
       return new State;
     },

     token: function(stream, state) {
       state.userIndent(stream.indentation(), stream.indentUnit);

       if (stream.eatSpace()) {
         return null;
       }

       var token = state.context.next(stream, state.context, state);
       state.context = token.context;
       state.expectVariable = token.eos;

       return token.name;
     },

     blankLine: function(state, indentUnit) {
       state.userIndent(0, indentUnit);
     },

     indent: function(state, textAfter, cx) {
       var i = state.context.next === next && textAfter && textAfter.charAt(0) === ']' ? -1 : state.userIndentationDelta;
       return (state.indentation + i) * cx.unit;
     },

     languageData: {
       indentOnInput: /^\s*\]$/
     }
   };

   var smalltalk$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      smalltalk: smalltalk
   });

   var isStringChar = /[^\s\|\!\+\-\*\?\~\^\&\:\(\)\[\]\{\}\"\\]/;
   var isOperatorChar$5 = /[\|\!\+\-\*\?\~\^\&]/;
   var isOperatorString = /^(OR|AND|NOT|TO)$/i;

   function isNumber(word) {
     return parseFloat(word).toString() === word;
   }

   function tokenString$9(quote) {
     return function(stream, state) {
       var escaped = false, next;
       while ((next = stream.next()) != null) {
         if (next == quote && !escaped) break;
         escaped = !escaped && next == "\\";
       }

       if (!escaped) state.tokenize = tokenBase$e;
       return "string";
     };
   }

   function tokenOperator(operator) {
     return function(stream, state) {
       if (operator == "|")
         stream.eat(/\|/);
       else if (operator == "&")
         stream.eat(/\&/);

       state.tokenize = tokenBase$e;
       return "operator";
     };
   }

   function tokenWord(ch) {
     return function(stream, state) {
       var word = ch;
       while ((ch = stream.peek()) && ch.match(isStringChar) != null) {
         word += stream.next();
       }

       state.tokenize = tokenBase$e;
       if (isOperatorString.test(word))
         return "operator";
       else if (isNumber(word))
         return "number";
       else if (stream.peek() == ":")
         return "propertyName";
       else
         return "string";
     };
   }

   function tokenBase$e(stream, state) {
     var ch = stream.next();
     if (ch == '"')
       state.tokenize = tokenString$9(ch);
     else if (isOperatorChar$5.test(ch))
       state.tokenize = tokenOperator(ch);
     else if (isStringChar.test(ch))
       state.tokenize = tokenWord(ch);

     return (state.tokenize != tokenBase$e) ? state.tokenize(stream, state) : null;
   }

   const solr = {
     name: "solr",

     startState: function() {
       return {
         tokenize: tokenBase$e
       };
     },

     token: function(stream, state) {
       if (stream.eatSpace()) return null;
       return state.tokenize(stream, state);
     }
   };

   var solr$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      solr: solr
   });

   var curPunc$4;

   function wordRegexp$5(words) {
     return new RegExp("^(?:" + words.join("|") + ")$", "i");
   }
   var ops = wordRegexp$5(["str", "lang", "langmatches", "datatype", "bound", "sameterm", "isiri", "isuri",
                         "iri", "uri", "bnode", "count", "sum", "min", "max", "avg", "sample",
                         "group_concat", "rand", "abs", "ceil", "floor", "round", "concat", "substr", "strlen",
                         "replace", "ucase", "lcase", "encode_for_uri", "contains", "strstarts", "strends",
                         "strbefore", "strafter", "year", "month", "day", "hours", "minutes", "seconds",
                         "timezone", "tz", "now", "uuid", "struuid", "md5", "sha1", "sha256", "sha384",
                         "sha512", "coalesce", "if", "strlang", "strdt", "isnumeric", "regex", "exists",
                         "isblank", "isliteral", "a", "bind"]);
   var keywords$b = wordRegexp$5(["base", "prefix", "select", "distinct", "reduced", "construct", "describe",
                              "ask", "from", "named", "where", "order", "limit", "offset", "filter", "optional",
                              "graph", "by", "asc", "desc", "as", "having", "undef", "values", "group",
                              "minus", "in", "not", "service", "silent", "using", "insert", "delete", "union",
                              "true", "false", "with",
                              "data", "copy", "to", "move", "add", "create", "drop", "clear", "load", "into"]);
   var operatorChars$1 = /[*+\-<>=&|\^\/!\?]/;

   function tokenBase$d(stream, state) {
     var ch = stream.next();
     curPunc$4 = null;
     if (ch == "$" || ch == "?") {
       if(ch == "?" && stream.match(/\s/, false)){
         return "operator";
       }
       stream.match(/^[A-Za-z0-9_\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][A-Za-z0-9_\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]*/);
       return "variableName.local";
     }
     else if (ch == "<" && !stream.match(/^[\s\u00a0=]/, false)) {
       stream.match(/^[^\s\u00a0>]*>?/);
       return "atom";
     }
     else if (ch == "\"" || ch == "'") {
       state.tokenize = tokenLiteral$1(ch);
       return state.tokenize(stream, state);
     }
     else if (/[{}\(\),\.;\[\]]/.test(ch)) {
       curPunc$4 = ch;
       return "bracket";
     }
     else if (ch == "#") {
       stream.skipToEnd();
       return "comment";
     }
     else if (operatorChars$1.test(ch)) {
       return "operator";
     }
     else if (ch == ":") {
       eatPnLocal(stream);
       return "atom";
     }
     else if (ch == "@") {
       stream.eatWhile(/[a-z\d\-]/i);
       return "meta";
     }
     else {
       stream.eatWhile(/[_\w\d]/);
       if (stream.eat(":")) {
         eatPnLocal(stream);
         return "atom";
       }
       var word = stream.current();
       if (ops.test(word))
         return "builtin";
       else if (keywords$b.test(word))
         return "keyword";
       else
         return "variable";
     }
   }

   function eatPnLocal(stream) {
     stream.match(/(\.(?=[\w_\-\\%])|[:\w_-]|\\[-\\_~.!$&'()*+,;=/?#@%]|%[a-f\d][a-f\d])+/i);
   }

   function tokenLiteral$1(quote) {
     return function(stream, state) {
       var escaped = false, ch;
       while ((ch = stream.next()) != null) {
         if (ch == quote && !escaped) {
           state.tokenize = tokenBase$d;
           break;
         }
         escaped = !escaped && ch == "\\";
       }
       return "string";
     };
   }

   function pushContext$7(state, type, col) {
     state.context = {prev: state.context, indent: state.indent, col: col, type: type};
   }
   function popContext$7(state) {
     state.indent = state.context.indent;
     state.context = state.context.prev;
   }

   const sparql = {
     name: "sparql",

     startState: function() {
       return {tokenize: tokenBase$d,
               context: null,
               indent: 0,
               col: 0};
     },

     token: function(stream, state) {
       if (stream.sol()) {
         if (state.context && state.context.align == null) state.context.align = false;
         state.indent = stream.indentation();
       }
       if (stream.eatSpace()) return null;
       var style = state.tokenize(stream, state);

       if (style != "comment" && state.context && state.context.align == null && state.context.type != "pattern") {
         state.context.align = true;
       }

       if (curPunc$4 == "(") pushContext$7(state, ")", stream.column());
       else if (curPunc$4 == "[") pushContext$7(state, "]", stream.column());
       else if (curPunc$4 == "{") pushContext$7(state, "}", stream.column());
       else if (/[\]\}\)]/.test(curPunc$4)) {
         while (state.context && state.context.type == "pattern") popContext$7(state);
         if (state.context && curPunc$4 == state.context.type) {
           popContext$7(state);
           if (curPunc$4 == "}" && state.context && state.context.type == "pattern")
             popContext$7(state);
         }
       }
       else if (curPunc$4 == "." && state.context && state.context.type == "pattern") popContext$7(state);
       else if (/atom|string|variable/.test(style) && state.context) {
         if (/[\}\]]/.test(state.context.type))
           pushContext$7(state, "pattern", stream.column());
         else if (state.context.type == "pattern" && !state.context.align) {
           state.context.align = true;
           state.context.col = stream.column();
         }
       }

       return style;
     },

     indent: function(state, textAfter, cx) {
       var firstChar = textAfter && textAfter.charAt(0);
       var context = state.context;
       if (/[\]\}]/.test(firstChar))
         while (context && context.type == "pattern") context = context.prev;

       var closing = context && firstChar == context.type;
       if (!context)
         return 0;
       else if (context.type == "pattern")
         return context.col;
       else if (context.align)
         return context.col + (closing ? 0 : 1);
       else
         return context.indent + (closing ? 0 : cx.unit);
     },

     languageData: {
       commentTokens: {line: "#"}
     }
   };

   var sparql$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      sparql: sparql
   });

   const spreadsheet = {
     name: "spreadsheet",

     startState: function () {
       return {
         stringType: null,
         stack: []
       };
     },
     token: function (stream, state) {
       if (!stream) return;

       //check for state changes
       if (state.stack.length === 0) {
         //strings
         if ((stream.peek() == '"') || (stream.peek() == "'")) {
           state.stringType = stream.peek();
           stream.next(); // Skip quote
           state.stack.unshift("string");
         }
       }

       //return state
       //stack has
       switch (state.stack[0]) {
       case "string":
         while (state.stack[0] === "string" && !stream.eol()) {
           if (stream.peek() === state.stringType) {
             stream.next(); // Skip quote
             state.stack.shift(); // Clear flag
           } else if (stream.peek() === "\\") {
             stream.next();
             stream.next();
           } else {
             stream.match(/^.[^\\\"\']*/);
           }
         }
         return "string";

       case "characterClass":
         while (state.stack[0] === "characterClass" && !stream.eol()) {
           if (!(stream.match(/^[^\]\\]+/) || stream.match(/^\\./)))
             state.stack.shift();
         }
         return "operator";
       }

       var peek = stream.peek();

       //no stack
       switch (peek) {
       case "[":
         stream.next();
         state.stack.unshift("characterClass");
         return "bracket";
       case ":":
         stream.next();
         return "operator";
       case "\\":
         if (stream.match(/\\[a-z]+/)) return "string.special";
         else {
           stream.next();
           return "atom";
         }
       case ".":
       case ",":
       case ";":
       case "*":
       case "-":
       case "+":
       case "^":
       case "<":
       case "/":
       case "=":
         stream.next();
         return "atom";
       case "$":
         stream.next();
         return "builtin";
       }

       if (stream.match(/\d+/)) {
         if (stream.match(/^\w+/)) return "error";
         return "number";
       } else if (stream.match(/^[a-zA-Z_]\w*/)) {
         if (stream.match(/(?=[\(.])/, false)) return "keyword";
         return "variable";
       } else if (["[", "]", "(", ")", "{", "}"].indexOf(peek) != -1) {
         stream.next();
         return "bracket";
       } else if (!stream.eatSpace()) {
         stream.next();
       }
       return null;
     }
   };

   var spreadsheet$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      spreadsheet: spreadsheet
   });

   // developer.mozilla.org/en-US/docs/Web/HTML/Element
   var tagKeywords_ = ["a","abbr","address","area","article","aside","audio", "b", "base","bdi", "bdo","bgsound","blockquote","body","br","button","canvas","caption","cite", "code","col","colgroup","data","datalist","dd","del","details","dfn","div", "dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1", "h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe", "img","input","ins","kbd","keygen","label","legend","li","link","main","map", "mark","marquee","menu","menuitem","meta","meter","nav","nobr","noframes", "noscript","object","ol","optgroup","option","output","p","param","pre", "progress","q","rp","rt","ruby","s","samp","script","section","select", "small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","tr","track", "u","ul","var","video"];

   // github.com/codemirror/CodeMirror/blob/master/mode/css/css.js
   // Note, "url-prefix" should precede "url" in order to match correctly in documentTypesRegexp
   var documentTypes_ = ["domain", "regexp", "url-prefix", "url"];
   var mediaTypes_ = ["all","aural","braille","handheld","print","projection","screen","tty","tv","embossed"];
   var mediaFeatures_ = ["width","min-width","max-width","height","min-height","max-height","device-width","min-device-width","max-device-width","device-height","min-device-height","max-device-height","aspect-ratio","min-aspect-ratio","max-aspect-ratio","device-aspect-ratio","min-device-aspect-ratio","max-device-aspect-ratio","color","min-color","max-color","color-index","min-color-index","max-color-index","monochrome","min-monochrome","max-monochrome","resolution","min-resolution","max-resolution","scan","grid","dynamic-range","video-dynamic-range"];
   var propertyKeywords_ = ["align-content","align-items","align-self","alignment-adjust","alignment-baseline","anchor-point","animation","animation-delay","animation-direction","animation-duration","animation-fill-mode","animation-iteration-count","animation-name","animation-play-state","animation-timing-function","appearance","azimuth","backface-visibility","background","background-attachment","background-clip","background-color","background-image","background-origin","background-position","background-repeat","background-size","baseline-shift","binding","bleed","bookmark-label","bookmark-level","bookmark-state","bookmark-target","border","border-bottom","border-bottom-color","border-bottom-left-radius","border-bottom-right-radius","border-bottom-style","border-bottom-width","border-collapse","border-color","border-image","border-image-outset","border-image-repeat","border-image-slice","border-image-source","border-image-width","border-left","border-left-color","border-left-style","border-left-width","border-radius","border-right","border-right-color","border-right-style","border-right-width","border-spacing","border-style","border-top","border-top-color","border-top-left-radius","border-top-right-radius","border-top-style","border-top-width","border-width","bottom","box-decoration-break","box-shadow","box-sizing","break-after","break-before","break-inside","caption-side","clear","clip","color","color-profile","column-count","column-fill","column-gap","column-rule","column-rule-color","column-rule-style","column-rule-width","column-span","column-width","columns","content","counter-increment","counter-reset","crop","cue","cue-after","cue-before","cursor","direction","display","dominant-baseline","drop-initial-after-adjust","drop-initial-after-align","drop-initial-before-adjust","drop-initial-before-align","drop-initial-size","drop-initial-value","elevation","empty-cells","fit","fit-position","flex","flex-basis","flex-direction","flex-flow","flex-grow","flex-shrink","flex-wrap","float","float-offset","flow-from","flow-into","font","font-feature-settings","font-family","font-kerning","font-language-override","font-size","font-size-adjust","font-stretch","font-style","font-synthesis","font-variant","font-variant-alternates","font-variant-caps","font-variant-east-asian","font-variant-ligatures","font-variant-numeric","font-variant-position","font-weight","grid","grid-area","grid-auto-columns","grid-auto-flow","grid-auto-position","grid-auto-rows","grid-column","grid-column-end","grid-column-start","grid-row","grid-row-end","grid-row-start","grid-template","grid-template-areas","grid-template-columns","grid-template-rows","hanging-punctuation","height","hyphens","icon","image-orientation","image-rendering","image-resolution","inline-box-align","justify-content","left","letter-spacing","line-break","line-height","line-stacking","line-stacking-ruby","line-stacking-shift","line-stacking-strategy","list-style","list-style-image","list-style-position","list-style-type","margin","margin-bottom","margin-left","margin-right","margin-top","marker-offset","marks","marquee-direction","marquee-loop","marquee-play-count","marquee-speed","marquee-style","max-height","max-width","min-height","min-width","move-to","nav-down","nav-index","nav-left","nav-right","nav-up","object-fit","object-position","opacity","order","orphans","outline","outline-color","outline-offset","outline-style","outline-width","overflow","overflow-style","overflow-wrap","overflow-x","overflow-y","padding","padding-bottom","padding-left","padding-right","padding-top","page","page-break-after","page-break-before","page-break-inside","page-policy","pause","pause-after","pause-before","perspective","perspective-origin","pitch","pitch-range","play-during","position","presentation-level","punctuation-trim","quotes","region-break-after","region-break-before","region-break-inside","region-fragment","rendering-intent","resize","rest","rest-after","rest-before","richness","right","rotation","rotation-point","ruby-align","ruby-overhang","ruby-position","ruby-span","shape-image-threshold","shape-inside","shape-margin","shape-outside","size","speak","speak-as","speak-header","speak-numeral","speak-punctuation","speech-rate","stress","string-set","tab-size","table-layout","target","target-name","target-new","target-position","text-align","text-align-last","text-decoration","text-decoration-color","text-decoration-line","text-decoration-skip","text-decoration-style","text-emphasis","text-emphasis-color","text-emphasis-position","text-emphasis-style","text-height","text-indent","text-justify","text-outline","text-overflow","text-shadow","text-size-adjust","text-space-collapse","text-transform","text-underline-position","text-wrap","top","transform","transform-origin","transform-style","transition","transition-delay","transition-duration","transition-property","transition-timing-function","unicode-bidi","vertical-align","visibility","voice-balance","voice-duration","voice-family","voice-pitch","voice-range","voice-rate","voice-stress","voice-volume","volume","white-space","widows","width","will-change","word-break","word-spacing","word-wrap","z-index","clip-path","clip-rule","mask","enable-background","filter","flood-color","flood-opacity","lighting-color","stop-color","stop-opacity","pointer-events","color-interpolation","color-interpolation-filters","color-rendering","fill","fill-opacity","fill-rule","image-rendering","marker","marker-end","marker-mid","marker-start","shape-rendering","stroke","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","text-rendering","baseline-shift","dominant-baseline","glyph-orientation-horizontal","glyph-orientation-vertical","text-anchor","writing-mode","font-smoothing","osx-font-smoothing"];
   var nonStandardPropertyKeywords_ = ["scrollbar-arrow-color","scrollbar-base-color","scrollbar-dark-shadow-color","scrollbar-face-color","scrollbar-highlight-color","scrollbar-shadow-color","scrollbar-3d-light-color","scrollbar-track-color","shape-inside","searchfield-cancel-button","searchfield-decoration","searchfield-results-button","searchfield-results-decoration","zoom"];
   var fontProperties_ = ["font-family","src","unicode-range","font-variant","font-feature-settings","font-stretch","font-weight","font-style"];
   var colorKeywords_ = ["aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen"];
   var valueKeywords_ = ["above","absolute","activeborder","additive","activecaption","afar","after-white-space","ahead","alias","all","all-scroll","alphabetic","alternate","always","amharic","amharic-abegede","antialiased","appworkspace","arabic-indic","armenian","asterisks","attr","auto","avoid","avoid-column","avoid-page","avoid-region","background","backwards","baseline","below","bidi-override","binary","bengali","blink","block","block-axis","bold","bolder","border","border-box","both","bottom","break","break-all","break-word","bullets","button","buttonface","buttonhighlight","buttonshadow","buttontext","calc","cambodian","capitalize","caps-lock-indicator","caption","captiontext","caret","cell","center","checkbox","circle","cjk-decimal","cjk-earthly-branch","cjk-heavenly-stem","cjk-ideographic","clear","clip","close-quote","col-resize","collapse","column","compact","condensed","conic-gradient","contain","content","contents","content-box","context-menu","continuous","copy","counter","counters","cover","crop","cross","crosshair","currentcolor","cursive","cyclic","dashed","decimal","decimal-leading-zero","default","default-button","destination-atop","destination-in","destination-out","destination-over","devanagari","disc","discard","disclosure-closed","disclosure-open","document","dot-dash","dot-dot-dash","dotted","double","down","e-resize","ease","ease-in","ease-in-out","ease-out","element","ellipse","ellipsis","embed","end","ethiopic","ethiopic-abegede","ethiopic-abegede-am-et","ethiopic-abegede-gez","ethiopic-abegede-ti-er","ethiopic-abegede-ti-et","ethiopic-halehame-aa-er","ethiopic-halehame-aa-et","ethiopic-halehame-am-et","ethiopic-halehame-gez","ethiopic-halehame-om-et","ethiopic-halehame-sid-et","ethiopic-halehame-so-et","ethiopic-halehame-ti-er","ethiopic-halehame-ti-et","ethiopic-halehame-tig","ethiopic-numeric","ew-resize","expanded","extends","extra-condensed","extra-expanded","fantasy","fast","fill","fixed","flat","flex","footnotes","forwards","from","geometricPrecision","georgian","graytext","groove","gujarati","gurmukhi","hand","hangul","hangul-consonant","hebrew","help","hidden","hide","high","higher","highlight","highlighttext","hiragana","hiragana-iroha","horizontal","hsl","hsla","icon","ignore","inactiveborder","inactivecaption","inactivecaptiontext","infinite","infobackground","infotext","inherit","initial","inline","inline-axis","inline-block","inline-flex","inline-table","inset","inside","intrinsic","invert","italic","japanese-formal","japanese-informal","justify","kannada","katakana","katakana-iroha","keep-all","khmer","korean-hangul-formal","korean-hanja-formal","korean-hanja-informal","landscape","lao","large","larger","left","level","lighter","line-through","linear","linear-gradient","lines","list-item","listbox","listitem","local","logical","loud","lower","lower-alpha","lower-armenian","lower-greek","lower-hexadecimal","lower-latin","lower-norwegian","lower-roman","lowercase","ltr","malayalam","match","matrix","matrix3d","media-play-button","media-slider","media-sliderthumb","media-volume-slider","media-volume-sliderthumb","medium","menu","menulist","menulist-button","menutext","message-box","middle","min-intrinsic","mix","mongolian","monospace","move","multiple","myanmar","n-resize","narrower","ne-resize","nesw-resize","no-close-quote","no-drop","no-open-quote","no-repeat","none","normal","not-allowed","nowrap","ns-resize","numbers","numeric","nw-resize","nwse-resize","oblique","octal","open-quote","optimizeLegibility","optimizeSpeed","oriya","oromo","outset","outside","outside-shape","overlay","overline","padding","padding-box","painted","page","paused","persian","perspective","plus-darker","plus-lighter","pointer","polygon","portrait","pre","pre-line","pre-wrap","preserve-3d","progress","push-button","radial-gradient","radio","read-only","read-write","read-write-plaintext-only","rectangle","region","relative","repeat","repeating-linear-gradient","repeating-radial-gradient","repeating-conic-gradient","repeat-x","repeat-y","reset","reverse","rgb","rgba","ridge","right","rotate","rotate3d","rotateX","rotateY","rotateZ","round","row-resize","rtl","run-in","running","s-resize","sans-serif","scale","scale3d","scaleX","scaleY","scaleZ","scroll","scrollbar","scroll-position","se-resize","searchfield","searchfield-cancel-button","searchfield-decoration","searchfield-results-button","searchfield-results-decoration","semi-condensed","semi-expanded","separate","serif","show","sidama","simp-chinese-formal","simp-chinese-informal","single","skew","skewX","skewY","skip-white-space","slide","slider-horizontal","slider-vertical","sliderthumb-horizontal","sliderthumb-vertical","slow","small","small-caps","small-caption","smaller","solid","somali","source-atop","source-in","source-out","source-over","space","spell-out","square","square-button","standard","start","static","status-bar","stretch","stroke","sub","subpixel-antialiased","super","sw-resize","symbolic","symbols","table","table-caption","table-cell","table-column","table-column-group","table-footer-group","table-header-group","table-row","table-row-group","tamil","telugu","text","text-bottom","text-top","textarea","textfield","thai","thick","thin","threeddarkshadow","threedface","threedhighlight","threedlightshadow","threedshadow","tibetan","tigre","tigrinya-er","tigrinya-er-abegede","tigrinya-et","tigrinya-et-abegede","to","top","trad-chinese-formal","trad-chinese-informal","translate","translate3d","translateX","translateY","translateZ","transparent","ultra-condensed","ultra-expanded","underline","up","upper-alpha","upper-armenian","upper-greek","upper-hexadecimal","upper-latin","upper-norwegian","upper-roman","uppercase","urdu","url","var","vertical","vertical-text","visible","visibleFill","visiblePainted","visibleStroke","visual","w-resize","wait","wave","wider","window","windowframe","windowtext","words","x-large","x-small","xor","xx-large","xx-small","bicubic","optimizespeed","grayscale","row","row-reverse","wrap","wrap-reverse","column-reverse","flex-start","flex-end","space-between","space-around", "unset"];

   var wordOperatorKeywords_ = ["in","and","or","not","is not","is a","is","isnt","defined","if unless"],
       blockKeywords_ = ["for","if","else","unless", "from", "to"],
       commonAtoms_ = ["null","true","false","href","title","type","not-allowed","readonly","disabled"],
       commonDef_ = ["@font-face", "@keyframes", "@media", "@viewport", "@page", "@host", "@supports", "@block", "@css"];

   var hintWords = tagKeywords_.concat(documentTypes_,mediaTypes_,mediaFeatures_,
                                       propertyKeywords_,nonStandardPropertyKeywords_,
                                       colorKeywords_,valueKeywords_,fontProperties_,
                                       wordOperatorKeywords_,blockKeywords_,
                                       commonAtoms_,commonDef_);

   function wordRegexp$4(words) {
     words = words.sort(function(a,b){return b > a;});
     return new RegExp("^((" + words.join(")|(") + "))\\b");
   }

   function keySet(array) {
     var keys = {};
     for (var i = 0; i < array.length; ++i) keys[array[i]] = true;
     return keys;
   }

   function escapeRegExp(text) {
     return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
   }

   var tagKeywords = keySet(tagKeywords_),
       tagVariablesRegexp = /^(a|b|i|s|col|em)$/i,
       propertyKeywords = keySet(propertyKeywords_),
       nonStandardPropertyKeywords = keySet(nonStandardPropertyKeywords_),
       valueKeywords = keySet(valueKeywords_),
       colorKeywords = keySet(colorKeywords_),
       documentTypes = keySet(documentTypes_),
       documentTypesRegexp = wordRegexp$4(documentTypes_),
       mediaFeatures = keySet(mediaFeatures_),
       mediaTypes = keySet(mediaTypes_),
       fontProperties = keySet(fontProperties_),
       operatorsRegexp = /^\s*([.]{2,3}|&&|\|\||\*\*|[?!=:]?=|[-+*\/%<>]=?|\?:|\~)/,
       wordOperatorKeywordsRegexp = wordRegexp$4(wordOperatorKeywords_),
       blockKeywords$1 = keySet(blockKeywords_),
       vendorPrefixesRegexp = new RegExp(/^\-(moz|ms|o|webkit)-/i),
       commonAtoms = keySet(commonAtoms_),
       firstWordMatch = "",
       states = {},
       ch,
       style,
       type$1,
       override;

   /**
    * Tokenizers
    */
   function tokenBase$c(stream, state) {
     firstWordMatch = stream.string.match(/(^[\w-]+\s*=\s*$)|(^\s*[\w-]+\s*=\s*[\w-])|(^\s*(\.|#|@|\$|\&|\[|\d|\+|::?|\{|\>|~|\/)?\s*[\w-]*([a-z0-9-]|\*|\/\*)(\(|,)?)/);
     state.context.line.firstWord = firstWordMatch ? firstWordMatch[0].replace(/^\s*/, "") : "";
     state.context.line.indent = stream.indentation();
     ch = stream.peek();

     // Line comment
     if (stream.match("//")) {
       stream.skipToEnd();
       return ["comment", "comment"];
     }
     // Block comment
     if (stream.match("/*")) {
       state.tokenize = tokenCComment;
       return tokenCComment(stream, state);
     }
     // String
     if (ch == "\"" || ch == "'") {
       stream.next();
       state.tokenize = tokenString$8(ch);
       return state.tokenize(stream, state);
     }
     // Def
     if (ch == "@") {
       stream.next();
       stream.eatWhile(/[\w\\-]/);
       return ["def", stream.current()];
     }
     // ID selector or Hex color
     if (ch == "#") {
       stream.next();
       // Hex color
       if (stream.match(/^[0-9a-f]{3}([0-9a-f]([0-9a-f]{2}){0,2})?\b(?!-)/i)) {
         return ["atom", "atom"];
       }
       // ID selector
       if (stream.match(/^[a-z][\w-]*/i)) {
         return ["builtin", "hash"];
       }
     }
     // Vendor prefixes
     if (stream.match(vendorPrefixesRegexp)) {
       return ["meta", "vendor-prefixes"];
     }
     // Numbers
     if (stream.match(/^-?[0-9]?\.?[0-9]/)) {
       stream.eatWhile(/[a-z%]/i);
       return ["number", "unit"];
     }
     // !important|optional
     if (ch == "!") {
       stream.next();
       return [stream.match(/^(important|optional)/i) ? "keyword": "operator", "important"];
     }
     // Class
     if (ch == "." && stream.match(/^\.[a-z][\w-]*/i)) {
       return ["qualifier", "qualifier"];
     }
     // url url-prefix domain regexp
     if (stream.match(documentTypesRegexp)) {
       if (stream.peek() == "(") state.tokenize = tokenParenthesized;
       return ["property", "word"];
     }
     // Mixins / Functions
     if (stream.match(/^[a-z][\w-]*\(/i)) {
       stream.backUp(1);
       return ["keyword", "mixin"];
     }
     // Block mixins
     if (stream.match(/^(\+|-)[a-z][\w-]*\(/i)) {
       stream.backUp(1);
       return ["keyword", "block-mixin"];
     }
     // Parent Reference BEM naming
     if (stream.string.match(/^\s*&/) && stream.match(/^[-_]+[a-z][\w-]*/)) {
       return ["qualifier", "qualifier"];
     }
     // / Root Reference & Parent Reference
     if (stream.match(/^(\/|&)(-|_|:|\.|#|[a-z])/)) {
       stream.backUp(1);
       return ["variableName.special", "reference"];
     }
     if (stream.match(/^&{1}\s*$/)) {
       return ["variableName.special", "reference"];
     }
     // Word operator
     if (stream.match(wordOperatorKeywordsRegexp)) {
       return ["operator", "operator"];
     }
     // Word
     if (stream.match(/^\$?[-_]*[a-z0-9]+[\w-]*/i)) {
       // Variable
       if (stream.match(/^(\.|\[)[\w-\'\"\]]+/i, false)) {
         if (!wordIsTag(stream.current())) {
           stream.match('.');
           return ["variable", "variable-name"];
         }
       }
       return ["variable", "word"];
     }
     // Operators
     if (stream.match(operatorsRegexp)) {
       return ["operator", stream.current()];
     }
     // Delimiters
     if (/[:;,{}\[\]\(\)]/.test(ch)) {
       stream.next();
       return [null, ch];
     }
     // Non-detected items
     stream.next();
     return [null, null];
   }

   /**
    * Token comment
    */
   function tokenCComment(stream, state) {
     var maybeEnd = false, ch;
     while ((ch = stream.next()) != null) {
       if (maybeEnd && ch == "/") {
         state.tokenize = null;
         break;
       }
       maybeEnd = (ch == "*");
     }
     return ["comment", "comment"];
   }

   /**
    * Token string
    */
   function tokenString$8(quote) {
     return function(stream, state) {
       var escaped = false, ch;
       while ((ch = stream.next()) != null) {
         if (ch == quote && !escaped) {
           if (quote == ")") stream.backUp(1);
           break;
         }
         escaped = !escaped && ch == "\\";
       }
       if (ch == quote || !escaped && quote != ")") state.tokenize = null;
       return ["string", "string"];
     };
   }

   /**
    * Token parenthesized
    */
   function tokenParenthesized(stream, state) {
     stream.next(); // Must be "("
     if (!stream.match(/\s*[\"\')]/, false))
       state.tokenize = tokenString$8(")");
     else
       state.tokenize = null;
     return [null, "("];
   }

   /**
    * Context management
    */
   function Context$4(type, indent, prev, line) {
     this.type = type;
     this.indent = indent;
     this.prev = prev;
     this.line = line || {firstWord: "", indent: 0};
   }

   function pushContext$6(state, stream, type, indent) {
     indent = indent >= 0 ? indent : stream.indentUnit;
     state.context = new Context$4(type, stream.indentation() + indent, state.context);
     return type;
   }

   function popContext$6(state, stream, currentIndent) {
     var contextIndent = state.context.indent - stream.indentUnit;
     currentIndent = currentIndent || false;
     state.context = state.context.prev;
     if (currentIndent) state.context.indent = contextIndent;
     return state.context.type;
   }

   function pass$1(type, stream, state) {
     return states[state.context.type](type, stream, state);
   }

   function popAndPass(type, stream, state, n) {
     for (var i = n || 1; i > 0; i--)
       state.context = state.context.prev;
     return pass$1(type, stream, state);
   }


   /**
    * Parser
    */
   function wordIsTag(word) {
     return word.toLowerCase() in tagKeywords;
   }

   function wordIsProperty(word) {
     word = word.toLowerCase();
     return word in propertyKeywords || word in fontProperties;
   }

   function wordIsBlock(word) {
     return word.toLowerCase() in blockKeywords$1;
   }

   function wordIsVendorPrefix(word) {
     return word.toLowerCase().match(vendorPrefixesRegexp);
   }

   function wordAsValue(word) {
     var wordLC = word.toLowerCase();
     var override = "variable";
     if (wordIsTag(word)) override = "tag";
     else if (wordIsBlock(word)) override = "block-keyword";
     else if (wordIsProperty(word)) override = "property";
     else if (wordLC in valueKeywords || wordLC in commonAtoms) override = "atom";
     else if (wordLC == "return" || wordLC in colorKeywords) override = "keyword";

     // Font family
     else if (word.match(/^[A-Z]/)) override = "string";
     return override;
   }

   function typeIsBlock(type, stream) {
     return ((endOfLine(stream) && (type == "{" || type == "]" || type == "hash" || type == "qualifier")) || type == "block-mixin");
   }

   function typeIsInterpolation(type, stream) {
     return type == "{" && stream.match(/^\s*\$?[\w-]+/i, false);
   }

   function typeIsPseudo(type, stream) {
     return type == ":" && stream.match(/^[a-z-]+/, false);
   }

   function startOfLine(stream) {
     return stream.sol() || stream.string.match(new RegExp("^\\s*" + escapeRegExp(stream.current())));
   }

   function endOfLine(stream) {
     return stream.eol() || stream.match(/^\s*$/, false);
   }

   function firstWordOfLine(line) {
     var re = /^\s*[-_]*[a-z0-9]+[\w-]*/i;
     var result = typeof line == "string" ? line.match(re) : line.string.match(re);
     return result ? result[0].replace(/^\s*/, "") : "";
   }


   /**
    * Block
    */
   states.block = function(type, stream, state) {
     if ((type == "comment" && startOfLine(stream)) ||
         (type == "," && endOfLine(stream)) ||
         type == "mixin") {
       return pushContext$6(state, stream, "block", 0);
     }
     if (typeIsInterpolation(type, stream)) {
       return pushContext$6(state, stream, "interpolation");
     }
     if (endOfLine(stream) && type == "]") {
       if (!/^\s*(\.|#|:|\[|\*|&)/.test(stream.string) && !wordIsTag(firstWordOfLine(stream))) {
         return pushContext$6(state, stream, "block", 0);
       }
     }
     if (typeIsBlock(type, stream)) {
       return pushContext$6(state, stream, "block");
     }
     if (type == "}" && endOfLine(stream)) {
       return pushContext$6(state, stream, "block", 0);
     }
     if (type == "variable-name") {
       if (stream.string.match(/^\s?\$[\w-\.\[\]\'\"]+$/) || wordIsBlock(firstWordOfLine(stream))) {
         return pushContext$6(state, stream, "variableName");
       }
       else {
         return pushContext$6(state, stream, "variableName", 0);
       }
     }
     if (type == "=") {
       if (!endOfLine(stream) && !wordIsBlock(firstWordOfLine(stream))) {
         return pushContext$6(state, stream, "block", 0);
       }
       return pushContext$6(state, stream, "block");
     }
     if (type == "*") {
       if (endOfLine(stream) || stream.match(/\s*(,|\.|#|\[|:|{)/,false)) {
         override = "tag";
         return pushContext$6(state, stream, "block");
       }
     }
     if (typeIsPseudo(type, stream)) {
       return pushContext$6(state, stream, "pseudo");
     }
     if (/@(font-face|media|supports|(-moz-)?document)/.test(type)) {
       return pushContext$6(state, stream, endOfLine(stream) ? "block" : "atBlock");
     }
     if (/@(-(moz|ms|o|webkit)-)?keyframes$/.test(type)) {
       return pushContext$6(state, stream, "keyframes");
     }
     if (/@extends?/.test(type)) {
       return pushContext$6(state, stream, "extend", 0);
     }
     if (type && type.charAt(0) == "@") {

       // Property Lookup
       if (stream.indentation() > 0 && wordIsProperty(stream.current().slice(1))) {
         override = "variable";
         return "block";
       }
       if (/(@import|@require|@charset)/.test(type)) {
         return pushContext$6(state, stream, "block", 0);
       }
       return pushContext$6(state, stream, "block");
     }
     if (type == "reference" && endOfLine(stream)) {
       return pushContext$6(state, stream, "block");
     }
     if (type == "(") {
       return pushContext$6(state, stream, "parens");
     }

     if (type == "vendor-prefixes") {
       return pushContext$6(state, stream, "vendorPrefixes");
     }
     if (type == "word") {
       var word = stream.current();
       override = wordAsValue(word);

       if (override == "property") {
         if (startOfLine(stream)) {
           return pushContext$6(state, stream, "block", 0);
         } else {
           override = "atom";
           return "block";
         }
       }

       if (override == "tag") {

         // tag is a css value
         if (/embed|menu|pre|progress|sub|table/.test(word)) {
           if (wordIsProperty(firstWordOfLine(stream))) {
             override = "atom";
             return "block";
           }
         }

         // tag is an attribute
         if (stream.string.match(new RegExp("\\[\\s*" + word + "|" + word +"\\s*\\]"))) {
           override = "atom";
           return "block";
         }

         // tag is a variable
         if (tagVariablesRegexp.test(word)) {
           if ((startOfLine(stream) && stream.string.match(/=/)) ||
               (!startOfLine(stream) &&
                !stream.string.match(/^(\s*\.|#|\&|\[|\/|>|\*)/) &&
                !wordIsTag(firstWordOfLine(stream)))) {
             override = "variable";
             if (wordIsBlock(firstWordOfLine(stream)))  return "block";
             return pushContext$6(state, stream, "block", 0);
           }
         }

         if (endOfLine(stream)) return pushContext$6(state, stream, "block");
       }
       if (override == "block-keyword") {
         override = "keyword";

         // Postfix conditionals
         if (stream.current(/(if|unless)/) && !startOfLine(stream)) {
           return "block";
         }
         return pushContext$6(state, stream, "block");
       }
       if (word == "return") return pushContext$6(state, stream, "block", 0);

       // Placeholder selector
       if (override == "variable" && stream.string.match(/^\s?\$[\w-\.\[\]\'\"]+$/)) {
         return pushContext$6(state, stream, "block");
       }
     }
     return state.context.type;
   };


   /**
    * Parens
    */
   states.parens = function(type, stream, state) {
     if (type == "(") return pushContext$6(state, stream, "parens");
     if (type == ")") {
       if (state.context.prev.type == "parens") {
         return popContext$6(state, stream);
       }
       if ((stream.string.match(/^[a-z][\w-]*\(/i) && endOfLine(stream)) ||
           wordIsBlock(firstWordOfLine(stream)) ||
           /(\.|#|:|\[|\*|&|>|~|\+|\/)/.test(firstWordOfLine(stream)) ||
           (!stream.string.match(/^-?[a-z][\w-\.\[\]\'\"]*\s*=/) &&
            wordIsTag(firstWordOfLine(stream)))) {
         return pushContext$6(state, stream, "block");
       }
       if (stream.string.match(/^[\$-]?[a-z][\w-\.\[\]\'\"]*\s*=/) ||
           stream.string.match(/^\s*(\(|\)|[0-9])/) ||
           stream.string.match(/^\s+[a-z][\w-]*\(/i) ||
           stream.string.match(/^\s+[\$-]?[a-z]/i)) {
         return pushContext$6(state, stream, "block", 0);
       }
       if (endOfLine(stream)) return pushContext$6(state, stream, "block");
       else return pushContext$6(state, stream, "block", 0);
     }
     if (type && type.charAt(0) == "@" && wordIsProperty(stream.current().slice(1))) {
       override = "variable";
     }
     if (type == "word") {
       var word = stream.current();
       override = wordAsValue(word);
       if (override == "tag" && tagVariablesRegexp.test(word)) {
         override = "variable";
       }
       if (override == "property" || word == "to") override = "atom";
     }
     if (type == "variable-name") {
       return pushContext$6(state, stream, "variableName");
     }
     if (typeIsPseudo(type, stream)) {
       return pushContext$6(state, stream, "pseudo");
     }
     return state.context.type;
   };


   /**
    * Vendor prefixes
    */
   states.vendorPrefixes = function(type, stream, state) {
     if (type == "word") {
       override = "property";
       return pushContext$6(state, stream, "block", 0);
     }
     return popContext$6(state, stream);
   };


   /**
    * Pseudo
    */
   states.pseudo = function(type, stream, state) {
     if (!wordIsProperty(firstWordOfLine(stream.string))) {
       stream.match(/^[a-z-]+/);
       override = "variableName.special";
       if (endOfLine(stream)) return pushContext$6(state, stream, "block");
       return popContext$6(state, stream);
     }
     return popAndPass(type, stream, state);
   };


   /**
    * atBlock
    */
   states.atBlock = function(type, stream, state) {
     if (type == "(") return pushContext$6(state, stream, "atBlock_parens");
     if (typeIsBlock(type, stream)) {
       return pushContext$6(state, stream, "block");
     }
     if (typeIsInterpolation(type, stream)) {
       return pushContext$6(state, stream, "interpolation");
     }
     if (type == "word") {
       var word = stream.current().toLowerCase();
       if (/^(only|not|and|or)$/.test(word))
         override = "keyword";
       else if (documentTypes.hasOwnProperty(word))
         override = "tag";
       else if (mediaTypes.hasOwnProperty(word))
         override = "attribute";
       else if (mediaFeatures.hasOwnProperty(word))
         override = "property";
       else if (nonStandardPropertyKeywords.hasOwnProperty(word))
         override = "string.special";
       else override = wordAsValue(stream.current());
       if (override == "tag" && endOfLine(stream)) {
         return pushContext$6(state, stream, "block");
       }
     }
     if (type == "operator" && /^(not|and|or)$/.test(stream.current())) {
       override = "keyword";
     }
     return state.context.type;
   };

   states.atBlock_parens = function(type, stream, state) {
     if (type == "{" || type == "}") return state.context.type;
     if (type == ")") {
       if (endOfLine(stream)) return pushContext$6(state, stream, "block");
       else return pushContext$6(state, stream, "atBlock");
     }
     if (type == "word") {
       var word = stream.current().toLowerCase();
       override = wordAsValue(word);
       if (/^(max|min)/.test(word)) override = "property";
       if (override == "tag") {
         tagVariablesRegexp.test(word) ? override = "variable" : override = "atom";
       }
       return state.context.type;
     }
     return states.atBlock(type, stream, state);
   };


   /**
    * Keyframes
    */
   states.keyframes = function(type, stream, state) {
     if (stream.indentation() == "0" && ((type == "}" && startOfLine(stream)) || type == "]" || type == "hash"
                                         || type == "qualifier" || wordIsTag(stream.current()))) {
       return popAndPass(type, stream, state);
     }
     if (type == "{") return pushContext$6(state, stream, "keyframes");
     if (type == "}") {
       if (startOfLine(stream)) return popContext$6(state, stream, true);
       else return pushContext$6(state, stream, "keyframes");
     }
     if (type == "unit" && /^[0-9]+\%$/.test(stream.current())) {
       return pushContext$6(state, stream, "keyframes");
     }
     if (type == "word") {
       override = wordAsValue(stream.current());
       if (override == "block-keyword") {
         override = "keyword";
         return pushContext$6(state, stream, "keyframes");
       }
     }
     if (/@(font-face|media|supports|(-moz-)?document)/.test(type)) {
       return pushContext$6(state, stream, endOfLine(stream) ? "block" : "atBlock");
     }
     if (type == "mixin") {
       return pushContext$6(state, stream, "block", 0);
     }
     return state.context.type;
   };


   /**
    * Interpolation
    */
   states.interpolation = function(type, stream, state) {
     if (type == "{") popContext$6(state, stream) && pushContext$6(state, stream, "block");
     if (type == "}") {
       if (stream.string.match(/^\s*(\.|#|:|\[|\*|&|>|~|\+|\/)/i) ||
           (stream.string.match(/^\s*[a-z]/i) && wordIsTag(firstWordOfLine(stream)))) {
         return pushContext$6(state, stream, "block");
       }
       if (!stream.string.match(/^(\{|\s*\&)/) ||
           stream.match(/\s*[\w-]/,false)) {
         return pushContext$6(state, stream, "block", 0);
       }
       return pushContext$6(state, stream, "block");
     }
     if (type == "variable-name") {
       return pushContext$6(state, stream, "variableName", 0);
     }
     if (type == "word") {
       override = wordAsValue(stream.current());
       if (override == "tag") override = "atom";
     }
     return state.context.type;
   };


   /**
    * Extend/s
    */
   states.extend = function(type, stream, state) {
     if (type == "[" || type == "=") return "extend";
     if (type == "]") return popContext$6(state, stream);
     if (type == "word") {
       override = wordAsValue(stream.current());
       return "extend";
     }
     return popContext$6(state, stream);
   };


   /**
    * Variable name
    */
   states.variableName = function(type, stream, state) {
     if (type == "string" || type == "[" || type == "]" || stream.current().match(/^(\.|\$)/)) {
       if (stream.current().match(/^\.[\w-]+/i)) override = "variable";
       return "variableName";
     }
     return popAndPass(type, stream, state);
   };

   const stylus = {
     name: "stylus",
     startState: function() {
       return {
         tokenize: null,
         state: "block",
         context: new Context$4("block", 0, null)
       };
     },
     token: function(stream, state) {
       if (!state.tokenize && stream.eatSpace()) return null;
       style = (state.tokenize || tokenBase$c)(stream, state);
       if (style && typeof style == "object") {
         type$1 = style[1];
         style = style[0];
       }
       override = style;
       state.state = states[state.state](type$1, stream, state);
       return override;
     },
     indent: function(state, textAfter, iCx) {
       var cx = state.context,
           ch = textAfter && textAfter.charAt(0),
           indent = cx.indent,
           lineFirstWord = firstWordOfLine(textAfter),
           lineIndent = iCx.lineIndent(iCx.pos),
           prevLineFirstWord = state.context.prev ? state.context.prev.line.firstWord : "",
           prevLineIndent = state.context.prev ? state.context.prev.line.indent : lineIndent;

       if (cx.prev &&
           (ch == "}" && (cx.type == "block" || cx.type == "atBlock" || cx.type == "keyframes") ||
            ch == ")" && (cx.type == "parens" || cx.type == "atBlock_parens") ||
            ch == "{" && (cx.type == "at"))) {
         indent = cx.indent - iCx.unit;
       } else if (!(/(\})/.test(ch))) {
         if (/@|\$|\d/.test(ch) ||
             /^\{/.test(textAfter) ||
   /^\s*\/(\/|\*)/.test(textAfter) ||
             /^\s*\/\*/.test(prevLineFirstWord) ||
             /^\s*[\w-\.\[\]\'\"]+\s*(\?|:|\+)?=/i.test(textAfter) ||
   /^(\+|-)?[a-z][\w-]*\(/i.test(textAfter) ||
   /^return/.test(textAfter) ||
                 wordIsBlock(lineFirstWord)) {
               indent = lineIndent;
             } else if (/(\.|#|:|\[|\*|&|>|~|\+|\/)/.test(ch) || wordIsTag(lineFirstWord)) {
           if (/\,\s*$/.test(prevLineFirstWord)) {
             indent = prevLineIndent;
           } else if (!state.sol() && (/(\.|#|:|\[|\*|&|>|~|\+|\/)/.test(prevLineFirstWord) || wordIsTag(prevLineFirstWord))) {
             indent = lineIndent <= prevLineIndent ? prevLineIndent : prevLineIndent + iCx.unit;
           } else {
             indent = lineIndent;
           }
         } else if (!/,\s*$/.test(textAfter) && (wordIsVendorPrefix(lineFirstWord) || wordIsProperty(lineFirstWord))) {
           if (wordIsBlock(prevLineFirstWord)) {
             indent = lineIndent <= prevLineIndent ? prevLineIndent : prevLineIndent + iCx.unit;
           } else if (/^\{/.test(prevLineFirstWord)) {
             indent = lineIndent <= prevLineIndent ? lineIndent : prevLineIndent + iCx.unit;
           } else if (wordIsVendorPrefix(prevLineFirstWord) || wordIsProperty(prevLineFirstWord)) {
             indent = lineIndent >= prevLineIndent ? prevLineIndent : lineIndent;
           } else if (/^(\.|#|:|\[|\*|&|@|\+|\-|>|~|\/)/.test(prevLineFirstWord) ||
                      /=\s*$/.test(prevLineFirstWord) ||
                      wordIsTag(prevLineFirstWord) ||
                      /^\$[\w-\.\[\]\'\"]/.test(prevLineFirstWord)) {
             indent = prevLineIndent + iCx.unit;
           } else {
             indent = lineIndent;
           }
         }
       }
       return indent;
     },
     languageData: {
       indentOnInput: /^\s*\}$/,
       commentTokens: {line: "//", block: {open: "/*", close: "*/"}},
       autocomplete: hintWords
     }
   };

   var stylus$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      stylus: stylus
   });

   function wordSet(words) {
     var set = {};
     for (var i = 0; i < words.length; i++) set[words[i]] = true;
     return set
   }

   var keywords$a = wordSet(["_","var","let","actor","class","enum","extension","import","protocol","struct","func","typealias","associatedtype",
                           "open","public","internal","fileprivate","private","deinit","init","new","override","self","subscript","super",
                           "convenience","dynamic","final","indirect","lazy","required","static","unowned","unowned(safe)","unowned(unsafe)","weak","as","is",
                           "break","case","continue","default","else","fallthrough","for","guard","if","in","repeat","switch","where","while",
                           "defer","return","inout","mutating","nonmutating","isolated","nonisolated","catch","do","rethrows","throw","throws","async","await","try","didSet","get","set","willSet",
                           "assignment","associativity","infix","left","none","operator","postfix","precedence","precedencegroup","prefix","right",
                           "Any","AnyObject","Type","dynamicType","Self","Protocol","__COLUMN__","__FILE__","__FUNCTION__","__LINE__"]);
   var definingKeywords = wordSet(["var","let","actor","class","enum","extension","import","protocol","struct","func","typealias","associatedtype","for"]);
   var atoms$2 = wordSet(["true","false","nil","self","super","_"]);
   var types$3 = wordSet(["Array","Bool","Character","Dictionary","Double","Float","Int","Int8","Int16","Int32","Int64","Never","Optional","Set","String",
                        "UInt8","UInt16","UInt32","UInt64","Void"]);
   var operators = "+-/*%=|&<>~^?!";
   var punc = ":;,.(){}[]";
   var binary = /^\-?0b[01][01_]*/;
   var octal = /^\-?0o[0-7][0-7_]*/;
   var hexadecimal = /^\-?0x[\dA-Fa-f][\dA-Fa-f_]*(?:(?:\.[\dA-Fa-f][\dA-Fa-f_]*)?[Pp]\-?\d[\d_]*)?/;
   var decimal = /^\-?\d[\d_]*(?:\.\d[\d_]*)?(?:[Ee]\-?\d[\d_]*)?/;
   var identifier = /^\$\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\1/;
   var property = /^\.(?:\$\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\1)/;
   var instruction = /^\#[A-Za-z]+/;
   var attribute = /^@(?:\$\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\1)/;
   //var regexp = /^\/(?!\s)(?:\/\/)?(?:\\.|[^\/])+\//

   function tokenBase$b(stream, state, prev) {
     if (stream.sol()) state.indented = stream.indentation();
     if (stream.eatSpace()) return null

     var ch = stream.peek();
     if (ch == "/") {
       if (stream.match("//")) {
         stream.skipToEnd();
         return "comment"
       }
       if (stream.match("/*")) {
         state.tokenize.push(tokenComment$5);
         return tokenComment$5(stream, state)
       }
     }
     if (stream.match(instruction)) return "builtin"
     if (stream.match(attribute)) return "attribute"
     if (stream.match(binary)) return "number"
     if (stream.match(octal)) return "number"
     if (stream.match(hexadecimal)) return "number"
     if (stream.match(decimal)) return "number"
     if (stream.match(property)) return "property"
     if (operators.indexOf(ch) > -1) {
       stream.next();
       return "operator"
     }
     if (punc.indexOf(ch) > -1) {
       stream.next();
       stream.match("..");
       return "punctuation"
     }
     var stringMatch;
     if (stringMatch = stream.match(/("""|"|')/)) {
       var tokenize = tokenString$7.bind(null, stringMatch[0]);
       state.tokenize.push(tokenize);
       return tokenize(stream, state)
     }

     if (stream.match(identifier)) {
       var ident = stream.current();
       if (types$3.hasOwnProperty(ident)) return "type"
       if (atoms$2.hasOwnProperty(ident)) return "atom"
       if (keywords$a.hasOwnProperty(ident)) {
         if (definingKeywords.hasOwnProperty(ident))
           state.prev = "define";
         return "keyword"
       }
       if (prev == "define") return "def"
       return "variable"
     }

     stream.next();
     return null
   }

   function tokenUntilClosingParen() {
     var depth = 0;
     return function(stream, state, prev) {
       var inner = tokenBase$b(stream, state, prev);
       if (inner == "punctuation") {
         if (stream.current() == "(") ++depth;
         else if (stream.current() == ")") {
           if (depth == 0) {
             stream.backUp(1);
             state.tokenize.pop();
             return state.tokenize[state.tokenize.length - 1](stream, state)
           }
           else --depth;
         }
       }
       return inner
     }
   }

   function tokenString$7(openQuote, stream, state) {
     var singleLine = openQuote.length == 1;
     var ch, escaped = false;
     while (ch = stream.peek()) {
       if (escaped) {
         stream.next();
         if (ch == "(") {
           state.tokenize.push(tokenUntilClosingParen());
           return "string"
         }
         escaped = false;
       } else if (stream.match(openQuote)) {
         state.tokenize.pop();
         return "string"
       } else {
         stream.next();
         escaped = ch == "\\";
       }
     }
     if (singleLine) {
       state.tokenize.pop();
     }
     return "string"
   }

   function tokenComment$5(stream, state) {
     var ch;
     while (ch = stream.next()) {
       if (ch === "/" && stream.eat("*")) {
         state.tokenize.push(tokenComment$5);
       } else if (ch === "*" && stream.eat("/")) {
         state.tokenize.pop();
         break
       }
     }
     return "comment"
   }

   function Context$3(prev, align, indented) {
     this.prev = prev;
     this.align = align;
     this.indented = indented;
   }

   function pushContext$5(state, stream) {
     var align = stream.match(/^\s*($|\/[\/\*]|[)}\]])/, false) ? null : stream.column() + 1;
     state.context = new Context$3(state.context, align, state.indented);
   }

   function popContext$5(state) {
     if (state.context) {
       state.indented = state.context.indented;
       state.context = state.context.prev;
     }
   }

   const swift = {
     name: "swift",
     startState: function() {
       return {
         prev: null,
         context: null,
         indented: 0,
         tokenize: []
       }
     },

     token: function(stream, state) {
       var prev = state.prev;
       state.prev = null;
       var tokenize = state.tokenize[state.tokenize.length - 1] || tokenBase$b;
       var style = tokenize(stream, state, prev);
       if (!style || style == "comment") state.prev = prev;
       else if (!state.prev) state.prev = style;

       if (style == "punctuation") {
         var bracket = /[\(\[\{]|([\]\)\}])/.exec(stream.current());
         if (bracket) (bracket[1] ? popContext$5 : pushContext$5)(state, stream);
       }

       return style
     },

     indent: function(state, textAfter, iCx) {
       var cx = state.context;
       if (!cx) return 0
       var closing = /^[\]\}\)]/.test(textAfter);
       if (cx.align != null) return cx.align - (closing ? 1 : 0)
       return cx.indented + (closing ? 0 : iCx.unit)
     },

     languageData: {
       indentOnInput: /^\s*[\)\}\]]$/,
       commentTokens: {line: "//", block: {open: "/*", close: "*/"}},
       closeBrackets: {brackets: ["(", "[", "{", "'", '"', "`"]}
     }
   };

   var swift$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      swift: swift
   });

   function mkStex(mathMode) {
     function pushCommand(state, command) {
       state.cmdState.push(command);
     }

     function peekCommand(state) {
       if (state.cmdState.length > 0) {
         return state.cmdState[state.cmdState.length - 1];
       } else {
         return null;
       }
     }

     function popCommand(state) {
       var plug = state.cmdState.pop();
       if (plug) {
         plug.closeBracket();
       }
     }

     // returns the non-default plugin closest to the end of the list
     function getMostPowerful(state) {
       var context = state.cmdState;
       for (var i = context.length - 1; i >= 0; i--) {
         var plug = context[i];
         if (plug.name == "DEFAULT") {
           continue;
         }
         return plug;
       }
       return { styleIdentifier: function() { return null; } };
     }

     function addPluginPattern(pluginName, cmdStyle, styles) {
       return function () {
         this.name = pluginName;
         this.bracketNo = 0;
         this.style = cmdStyle;
         this.styles = styles;
         this.argument = null;   // \begin and \end have arguments that follow. These are stored in the plugin

         this.styleIdentifier = function() {
           return this.styles[this.bracketNo - 1] || null;
         };
         this.openBracket = function() {
           this.bracketNo++;
           return "bracket";
         };
         this.closeBracket = function() {};
       };
     }

     var plugins = {};

     plugins["importmodule"] = addPluginPattern("importmodule", "tag", ["string", "builtin"]);
     plugins["documentclass"] = addPluginPattern("documentclass", "tag", ["", "atom"]);
     plugins["usepackage"] = addPluginPattern("usepackage", "tag", ["atom"]);
     plugins["begin"] = addPluginPattern("begin", "tag", ["atom"]);
     plugins["end"] = addPluginPattern("end", "tag", ["atom"]);

     plugins["label"    ] = addPluginPattern("label"    , "tag", ["atom"]);
     plugins["ref"      ] = addPluginPattern("ref"      , "tag", ["atom"]);
     plugins["eqref"    ] = addPluginPattern("eqref"    , "tag", ["atom"]);
     plugins["cite"     ] = addPluginPattern("cite"     , "tag", ["atom"]);
     plugins["bibitem"  ] = addPluginPattern("bibitem"  , "tag", ["atom"]);
     plugins["Bibitem"  ] = addPluginPattern("Bibitem"  , "tag", ["atom"]);
     plugins["RBibitem" ] = addPluginPattern("RBibitem" , "tag", ["atom"]);

     plugins["DEFAULT"] = function () {
       this.name = "DEFAULT";
       this.style = "tag";

       this.styleIdentifier = this.openBracket = this.closeBracket = function() {};
     };

     function setState(state, f) {
       state.f = f;
     }

     // called when in a normal (no environment) context
     function normal(source, state) {
       var plug;
       // Do we look like '\command' ?  If so, attempt to apply the plugin 'command'
       if (source.match(/^\\[a-zA-Z@\xc0-\u1fff\u2060-\uffff]+/)) {
         var cmdName = source.current().slice(1);
         plug = plugins.hasOwnProperty(cmdName) ? plugins[cmdName] : plugins["DEFAULT"];
         plug = new plug();
         pushCommand(state, plug);
         setState(state, beginParams);
         return plug.style;
       }

       // escape characters
       if (source.match(/^\\[$&%#{}_]/)) {
         return "tag";
       }

       // white space control characters
       if (source.match(/^\\[,;!\/\\]/)) {
         return "tag";
       }

       // find if we're starting various math modes
       if (source.match("\\[")) {
         setState(state, function(source, state){ return inMathMode(source, state, "\\]"); });
         return "keyword";
       }
       if (source.match("\\(")) {
         setState(state, function(source, state){ return inMathMode(source, state, "\\)"); });
         return "keyword";
       }
       if (source.match("$$")) {
         setState(state, function(source, state){ return inMathMode(source, state, "$$"); });
         return "keyword";
       }
       if (source.match("$")) {
         setState(state, function(source, state){ return inMathMode(source, state, "$"); });
         return "keyword";
       }

       var ch = source.next();
       if (ch == "%") {
         source.skipToEnd();
         return "comment";
       } else if (ch == '}' || ch == ']') {
         plug = peekCommand(state);
         if (plug) {
           plug.closeBracket(ch);
           setState(state, beginParams);
         } else {
           return "error";
         }
         return "bracket";
       } else if (ch == '{' || ch == '[') {
         plug = plugins["DEFAULT"];
         plug = new plug();
         pushCommand(state, plug);
         return "bracket";
       } else if (/\d/.test(ch)) {
         source.eatWhile(/[\w.%]/);
         return "atom";
       } else {
         source.eatWhile(/[\w\-_]/);
         plug = getMostPowerful(state);
         if (plug.name == 'begin') {
           plug.argument = source.current();
         }
         return plug.styleIdentifier();
       }
     }

     function inMathMode(source, state, endModeSeq) {
       if (source.eatSpace()) {
         return null;
       }
       if (endModeSeq && source.match(endModeSeq)) {
         setState(state, normal);
         return "keyword";
       }
       if (source.match(/^\\[a-zA-Z@]+/)) {
         return "tag";
       }
       if (source.match(/^[a-zA-Z]+/)) {
         return "variableName.special";
       }
       // escape characters
       if (source.match(/^\\[$&%#{}_]/)) {
         return "tag";
       }
       // white space control characters
       if (source.match(/^\\[,;!\/]/)) {
         return "tag";
       }
       // special math-mode characters
       if (source.match(/^[\^_&]/)) {
         return "tag";
       }
       // non-special characters
       if (source.match(/^[+\-<>|=,\/@!*:;'"`~#?]/)) {
         return null;
       }
       if (source.match(/^(\d+\.\d*|\d*\.\d+|\d+)/)) {
         return "number";
       }
       var ch = source.next();
       if (ch == "{" || ch == "}" || ch == "[" || ch == "]" || ch == "(" || ch == ")") {
         return "bracket";
       }

       if (ch == "%") {
         source.skipToEnd();
         return "comment";
       }
       return "error";
     }

     function beginParams(source, state) {
       var ch = source.peek(), lastPlug;
       if (ch == '{' || ch == '[') {
         lastPlug = peekCommand(state);
         lastPlug.openBracket(ch);
         source.eat(ch);
         setState(state, normal);
         return "bracket";
       }
       if (/[ \t\r]/.test(ch)) {
         source.eat(ch);
         return null;
       }
       setState(state, normal);
       popCommand(state);

       return normal(source, state);
     }

     return {
       name: "stex",
       startState: function() {
         var f = mathMode ? function(source, state){ return inMathMode(source, state); } : normal;
         return {
           cmdState: [],
           f: f
         };
       },
       copyState: function(s) {
         return {
           cmdState: s.cmdState.slice(),
           f: s.f
         };
       },
       token: function(stream, state) {
         return state.f(stream, state);
       },
       blankLine: function(state) {
         state.f = normal;
         state.cmdState.length = 0;
       },
       languageData: {
         commentTokens: {line: "%"}
       }
     };
   }
   const stex = mkStex(false);
   const stexMath = mkStex(true);

   var stex$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      stex: stex,
      stexMath: stexMath
   });

   function mkVerilog(parserConfig) {

     var statementIndentUnit = parserConfig.statementIndentUnit,
         dontAlignCalls = parserConfig.dontAlignCalls,
         noIndentKeywords = parserConfig.noIndentKeywords || [],
         multiLineStrings = parserConfig.multiLineStrings,
         hooks = parserConfig.hooks || {};

     function words(str) {
       var obj = {}, words = str.split(" ");
       for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
       return obj;
     }

     /**
      * Keywords from IEEE 1800-2012
      */
     var keywords = words(
       "accept_on alias always always_comb always_ff always_latch and assert assign assume automatic before begin bind " +
         "bins binsof bit break buf bufif0 bufif1 byte case casex casez cell chandle checker class clocking cmos config " +
         "const constraint context continue cover covergroup coverpoint cross deassign default defparam design disable " +
         "dist do edge else end endcase endchecker endclass endclocking endconfig endfunction endgenerate endgroup " +
         "endinterface endmodule endpackage endprimitive endprogram endproperty endspecify endsequence endtable endtask " +
         "enum event eventually expect export extends extern final first_match for force foreach forever fork forkjoin " +
         "function generate genvar global highz0 highz1 if iff ifnone ignore_bins illegal_bins implements implies import " +
         "incdir include initial inout input inside instance int integer interconnect interface intersect join join_any " +
         "join_none large let liblist library local localparam logic longint macromodule matches medium modport module " +
         "nand negedge nettype new nexttime nmos nor noshowcancelled not notif0 notif1 null or output package packed " +
         "parameter pmos posedge primitive priority program property protected pull0 pull1 pulldown pullup " +
         "pulsestyle_ondetect pulsestyle_onevent pure rand randc randcase randsequence rcmos real realtime ref reg " +
         "reject_on release repeat restrict return rnmos rpmos rtran rtranif0 rtranif1 s_always s_eventually s_nexttime " +
         "s_until s_until_with scalared sequence shortint shortreal showcancelled signed small soft solve specify " +
         "specparam static string strong strong0 strong1 struct super supply0 supply1 sync_accept_on sync_reject_on " +
         "table tagged task this throughout time timeprecision timeunit tran tranif0 tranif1 tri tri0 tri1 triand trior " +
         "trireg type typedef union unique unique0 unsigned until until_with untyped use uwire var vectored virtual void " +
         "wait wait_order wand weak weak0 weak1 while wildcard wire with within wor xnor xor");

     /** Operators from IEEE 1800-2012
         unary_operator ::=
         + | - | ! | ~ | & | ~& | | | ~| | ^ | ~^ | ^~
         binary_operator ::=
         + | - | * | / | % | == | != | === | !== | ==? | !=? | && | || | **
         | < | <= | > | >= | & | | | ^ | ^~ | ~^ | >> | << | >>> | <<<
         | -> | <->
         inc_or_dec_operator ::= ++ | --
         unary_module_path_operator ::=
         ! | ~ | & | ~& | | | ~| | ^ | ~^ | ^~
         binary_module_path_operator ::=
         == | != | && | || | & | | | ^ | ^~ | ~^
     */
     var isOperatorChar = /[\+\-\*\/!~&|^%=?:]/;
     var isBracketChar = /[\[\]{}()]/;

     var unsignedNumber = /\d[0-9_]*/;
     var decimalLiteral = /\d*\s*'s?d\s*\d[0-9_]*/i;
     var binaryLiteral = /\d*\s*'s?b\s*[xz01][xz01_]*/i;
     var octLiteral = /\d*\s*'s?o\s*[xz0-7][xz0-7_]*/i;
     var hexLiteral = /\d*\s*'s?h\s*[0-9a-fxz?][0-9a-fxz?_]*/i;
     var realLiteral = /(\d[\d_]*(\.\d[\d_]*)?E-?[\d_]+)|(\d[\d_]*\.\d[\d_]*)/i;

     var closingBracketOrWord = /^((\w+)|[)}\]])/;
     var closingBracket = /[)}\]]/;

     var curPunc;
     var curKeyword;

     // Block openings which are closed by a matching keyword in the form of ("end" + keyword)
     // E.g. "task" => "endtask"
     var blockKeywords = words(
       "case checker class clocking config function generate interface module package " +
         "primitive program property specify sequence table task"
     );

     // Opening/closing pairs
     var openClose = {};
     for (var keyword in blockKeywords) {
       openClose[keyword] = "end" + keyword;
     }
     openClose["begin"] = "end";
     openClose["casex"] = "endcase";
     openClose["casez"] = "endcase";
     openClose["do"   ] = "while";
     openClose["fork" ] = "join;join_any;join_none";
     openClose["covergroup"] = "endgroup";

     for (var i in noIndentKeywords) {
       var keyword = noIndentKeywords[i];
       if (openClose[keyword]) {
         openClose[keyword] = undefined;
       }
     }

     // Keywords which open statements that are ended with a semi-colon
     var statementKeywords = words("always always_comb always_ff always_latch assert assign assume else export for foreach forever if import initial repeat while");

     function tokenBase(stream, state) {
       var ch = stream.peek(), style;
       if (hooks[ch] && (style = hooks[ch](stream, state)) != false) return style;
       if (hooks.tokenBase && (style = hooks.tokenBase(stream, state)) != false)
         return style;

       if (/[,;:\.]/.test(ch)) {
         curPunc = stream.next();
         return null;
       }
       if (isBracketChar.test(ch)) {
         curPunc = stream.next();
         return "bracket";
       }
       // Macros (tick-defines)
       if (ch == '`') {
         stream.next();
         if (stream.eatWhile(/[\w\$_]/)) {
           return "def";
         } else {
           return null;
         }
       }
       // System calls
       if (ch == '$') {
         stream.next();
         if (stream.eatWhile(/[\w\$_]/)) {
           return "meta";
         } else {
           return null;
         }
       }
       // Time literals
       if (ch == '#') {
         stream.next();
         stream.eatWhile(/[\d_.]/);
         return "def";
       }
       // Strings
       if (ch == '"') {
         stream.next();
         state.tokenize = tokenString(ch);
         return state.tokenize(stream, state);
       }
       // Comments
       if (ch == "/") {
         stream.next();
         if (stream.eat("*")) {
           state.tokenize = tokenComment;
           return tokenComment(stream, state);
         }
         if (stream.eat("/")) {
           stream.skipToEnd();
           return "comment";
         }
         stream.backUp(1);
       }

       // Numeric literals
       if (stream.match(realLiteral) ||
           stream.match(decimalLiteral) ||
           stream.match(binaryLiteral) ||
           stream.match(octLiteral) ||
           stream.match(hexLiteral) ||
           stream.match(unsignedNumber) ||
           stream.match(realLiteral)) {
         return "number";
       }

       // Operators
       if (stream.eatWhile(isOperatorChar)) {
         return "meta";
       }

       // Keywords / plain variables
       if (stream.eatWhile(/[\w\$_]/)) {
         var cur = stream.current();
         if (keywords[cur]) {
           if (openClose[cur]) {
             curPunc = "newblock";
           }
           if (statementKeywords[cur]) {
             curPunc = "newstatement";
           }
           curKeyword = cur;
           return "keyword";
         }
         return "variable";
       }

       stream.next();
       return null;
     }

     function tokenString(quote) {
       return function(stream, state) {
         var escaped = false, next, end = false;
         while ((next = stream.next()) != null) {
           if (next == quote && !escaped) {end = true; break;}
           escaped = !escaped && next == "\\";
         }
         if (end || !(escaped || multiLineStrings))
           state.tokenize = tokenBase;
         return "string";
       };
     }

     function tokenComment(stream, state) {
       var maybeEnd = false, ch;
       while (ch = stream.next()) {
         if (ch == "/" && maybeEnd) {
           state.tokenize = tokenBase;
           break;
         }
         maybeEnd = (ch == "*");
       }
       return "comment";
     }

     function Context(indented, column, type, align, prev) {
       this.indented = indented;
       this.column = column;
       this.type = type;
       this.align = align;
       this.prev = prev;
     }
     function pushContext(state, col, type) {
       var indent = state.indented;
       var c = new Context(indent, col, type, null, state.context);
       return state.context = c;
     }
     function popContext(state) {
       var t = state.context.type;
       if (t == ")" || t == "]" || t == "}") {
         state.indented = state.context.indented;
       }
       return state.context = state.context.prev;
     }

     function isClosing(text, contextClosing) {
       if (text == contextClosing) {
         return true;
       } else {
         // contextClosing may be multiple keywords separated by ;
         var closingKeywords = contextClosing.split(";");
         for (var i in closingKeywords) {
           if (text == closingKeywords[i]) {
             return true;
           }
         }
         return false;
       }
     }

     function buildElectricInputRegEx() {
       // Reindentation should occur on any bracket char: {}()[]
       // or on a match of any of the block closing keywords, at
       // the end of a line
       var allClosings = [];
       for (var i in openClose) {
         if (openClose[i]) {
           var closings = openClose[i].split(";");
           for (var j in closings) {
             allClosings.push(closings[j]);
           }
         }
       }
       var re = new RegExp("[{}()\\[\\]]|(" + allClosings.join("|") + ")$");
       return re;
     }

     // Interface
     return {
       name: "verilog",

       startState: function(indentUnit) {
         var state = {
           tokenize: null,
           context: new Context(-indentUnit, 0, "top", false),
           indented: 0,
           startOfLine: true
         };
         if (hooks.startState) hooks.startState(state);
         return state;
       },

       token: function(stream, state) {
         var ctx = state.context;
         if (stream.sol()) {
           if (ctx.align == null) ctx.align = false;
           state.indented = stream.indentation();
           state.startOfLine = true;
         }
         if (hooks.token) {
           // Call hook, with an optional return value of a style to override verilog styling.
           var style = hooks.token(stream, state);
           if (style !== undefined) {
             return style;
           }
         }
         if (stream.eatSpace()) return null;
         curPunc = null;
         curKeyword = null;
         var style = (state.tokenize || tokenBase)(stream, state);
         if (style == "comment" || style == "meta" || style == "variable") return style;
         if (ctx.align == null) ctx.align = true;

         if (curPunc == ctx.type) {
           popContext(state);
         } else if ((curPunc == ";" && ctx.type == "statement") ||
                    (ctx.type && isClosing(curKeyword, ctx.type))) {
           ctx = popContext(state);
           while (ctx && ctx.type == "statement") ctx = popContext(state);
         } else if (curPunc == "{") {
           pushContext(state, stream.column(), "}");
         } else if (curPunc == "[") {
           pushContext(state, stream.column(), "]");
         } else if (curPunc == "(") {
           pushContext(state, stream.column(), ")");
         } else if (ctx && ctx.type == "endcase" && curPunc == ":") {
           pushContext(state, stream.column(), "statement");
         } else if (curPunc == "newstatement") {
           pushContext(state, stream.column(), "statement");
         } else if (curPunc == "newblock") {
           if (curKeyword == "function" && ctx && (ctx.type == "statement" || ctx.type == "endgroup")) ; else if (curKeyword == "task" && ctx && ctx.type == "statement") ; else {
             var close = openClose[curKeyword];
             pushContext(state, stream.column(), close);
           }
         }

         state.startOfLine = false;
         return style;
       },

       indent: function(state, textAfter, cx) {
         if (state.tokenize != tokenBase && state.tokenize != null) return null;
         if (hooks.indent) {
           var fromHook = hooks.indent(state);
           if (fromHook >= 0) return fromHook;
         }
         var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);
         if (ctx.type == "statement" && firstChar == "}") ctx = ctx.prev;
         var closing = false;
         var possibleClosing = textAfter.match(closingBracketOrWord);
         if (possibleClosing)
           closing = isClosing(possibleClosing[0], ctx.type);
         if (ctx.type == "statement") return ctx.indented + (firstChar == "{" ? 0 : statementIndentUnit || cx.unit);
         else if (closingBracket.test(ctx.type) && ctx.align && !dontAlignCalls) return ctx.column + (closing ? 0 : 1);
         else if (ctx.type == ")" && !closing) return ctx.indented + (statementIndentUnit || cx.unit);
         else return ctx.indented + (closing ? 0 : cx.unit);
       },

       languageData: {
         indentOnInput: buildElectricInputRegEx(),
         commentTokens: {line: "//", block: {open: "/*", close: "*/"}}
       }
     };
   }
   const verilog = mkVerilog({});

   // TL-Verilog mode.
   // See tl-x.org for language spec.
   // See the mode in action at makerchip.com.
   // Contact: steve.hoover@redwoodeda.com

   // TLV Identifier prefixes.
   // Note that sign is not treated separately, so "+/-" versions of numeric identifiers
   // are included.
   var tlvIdentifierStyle = {
     "|": "link",
     ">": "property",  // Should condition this off for > TLV 1c.
     "$": "variable",
     "$$": "variable",
     "?$": "qualifier",
     "?*": "qualifier",
     "-": "contentSeparator",
     "/": "property",
     "/-": "property",
     "@": "variableName.special",
     "@-": "variableName.special",
     "@++": "variableName.special",
     "@+=": "variableName.special",
     "@+=-": "variableName.special",
     "@--": "variableName.special",
     "@-=": "variableName.special",
     "%+": "tag",
     "%-": "tag",
     "%": "tag",
     ">>": "tag",
     "<<": "tag",
     "<>": "tag",
     "#": "tag",  // Need to choose a style for this.
     "^": "attribute",
     "^^": "attribute",
     "^!": "attribute",
     "*": "variable",
     "**": "variable",
     "\\": "keyword",
     "\"": "comment"
   };

   // Lines starting with these characters define scope (result in indentation).
   var tlvScopePrefixChars = {
     "/": "beh-hier",
     ">": "beh-hier",
     "-": "phys-hier",
     "|": "pipe",
     "?": "when",
     "@": "stage",
     "\\": "keyword"
   };
   var tlvIndentUnit = 3;
   var tlvIdentMatch = /^([~!@#\$%\^&\*-\+=\?\/\\\|'"<>]+)([\d\w_]*)/;  // Matches an identifier.
   // Note that ':' is excluded, because of it's use in [:].
   var tlvLineIndentationMatch = /^[! ] */;
   var tlvCommentMatch = /^\/[\/\*]/;

   const tlv = mkVerilog({
     hooks: {
       electricInput: false,

       // Return undefined for verilog tokenizing, or style for TLV token (null not used).
       // Standard CM styles are used for most formatting, but some TL-Verilog-specific highlighting
       // can be enabled with the definition of cm-tlv-* styles, including highlighting for:
       //   - M4 tokens
       //   - TLV scope indentation
       //   - Statement delimitation (enabled by tlvTrackStatements)
       token: function(stream, state) {
         var style = undefined;
         var match;  // Return value of pattern matches.

         // Set highlighting mode based on code region (TLV or SV).
         if (stream.sol() && ! state.tlvInBlockComment) {
           // Process region.
           if (stream.peek() == '\\') {
             style = "def";
             stream.skipToEnd();
             if (stream.string.match(/\\SV/)) {
               state.tlvCodeActive = false;
             } else if (stream.string.match(/\\TLV/)){
               state.tlvCodeActive = true;
             }
           }
           // Correct indentation in the face of a line prefix char.
           if (state.tlvCodeActive && stream.pos == 0 &&
               (state.indented == 0) && (match = stream.match(tlvLineIndentationMatch, false))) {
             state.indented = match[0].length;
           }

           // Compute indentation state:
           //   o Auto indentation on next line
           //   o Indentation scope styles
           var indented = state.indented;
           var depth = indented / tlvIndentUnit;
           if (depth <= state.tlvIndentationStyle.length) {
             // not deeper than current scope

             var blankline = stream.string.length == indented;
             var chPos = depth * tlvIndentUnit;
             if (chPos < stream.string.length) {
               var bodyString = stream.string.slice(chPos);
               var ch = bodyString[0];
               if (tlvScopePrefixChars[ch] && ((match = bodyString.match(tlvIdentMatch)) &&
                                               tlvIdentifierStyle[match[1]])) {
                 // This line begins scope.
                 // Next line gets indented one level.
                 indented += tlvIndentUnit;
                 // Style the next level of indentation (except non-region keyword identifiers,
                 //   which are statements themselves)
                 if (!(ch == "\\" && chPos > 0)) {
                   state.tlvIndentationStyle[depth] = tlvScopePrefixChars[ch];
                   depth++;
                 }
               }
             }
             // Clear out deeper indentation levels unless line is blank.
             if (!blankline) {
               while (state.tlvIndentationStyle.length > depth) {
                 state.tlvIndentationStyle.pop();
               }
             }
           }
           // Set next level of indentation.
           state.tlvNextIndent = indented;
         }

         if (state.tlvCodeActive) {

           var match;
           if (style !== undefined) ; else if (state.tlvInBlockComment) {
             // In a block comment.
             if (stream.match(/^.*?\*\//)) {
               // Exit block comment.
               state.tlvInBlockComment = false;
             } else {
               stream.skipToEnd();
             }
             style = "comment";
           } else if ((match = stream.match(tlvCommentMatch)) && !state.tlvInBlockComment) {
             // Start comment.
             if (match[0] == "//") {
               // Line comment.
               stream.skipToEnd();
             } else {
               // Block comment.
               state.tlvInBlockComment = true;
             }
             style = "comment";
           } else if (match = stream.match(tlvIdentMatch)) {
             // looks like an identifier (or identifier prefix)
             var prefix = match[1];
             var mnemonic = match[2];
             if (// is identifier prefix
               tlvIdentifierStyle.hasOwnProperty(prefix) &&
                 // has mnemonic or we're at the end of the line (maybe it hasn't been typed yet)
               (mnemonic.length > 0 || stream.eol())) {
               style = tlvIdentifierStyle[prefix];
             } else {
               // Just swallow one character and try again.
               // This enables subsequent identifier match with preceding symbol character, which
               //   is legal within a statement.  (Eg, !$reset).  It also enables detection of
               //   comment start with preceding symbols.
               stream.backUp(stream.current().length - 1);
             }
           } else if (stream.match(/^\t+/)) {
             // Highlight tabs, which are illegal.
             style = "invalid";
           } else if (stream.match(/^[\[\]{}\(\);\:]+/)) {
             // [:], (), {}, ;.
             style = "meta";
           } else if (match = stream.match(/^[mM]4([\+_])?[\w\d_]*/)) {
             // m4 pre proc
             style = (match[1] == "+") ? "keyword.special" : "keyword";
           } else if (stream.match(/^ +/)){
             // Skip over spaces.
             if (stream.eol()) {
               // Trailing spaces.
               style = "error";
             }
           } else if (stream.match(/^[\w\d_]+/)) {
             // alpha-numeric token.
             style = "number";
           } else {
             // Eat the next char w/ no formatting.
             stream.next();
           }
         } else {
           if (stream.match(/^[mM]4([\w\d_]*)/)) {
             // m4 pre proc
             style = "keyword";
           }
         }
         return style;
       },

       indent: function(state) {
         return (state.tlvCodeActive == true) ? state.tlvNextIndent : -1;
       },

       startState: function(state) {
         state.tlvIndentationStyle = [];  // Styles to use for each level of indentation.
         state.tlvCodeActive = true;  // True when we're in a TLV region (and at beginning of file).
         state.tlvNextIndent = -1;    // The number of spaces to autoindent the next line if tlvCodeActive.
         state.tlvInBlockComment = false;  // True inside /**/ comment.
       }

     }
   });

   var verilog$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      tlv: tlv,
      verilog: verilog
   });

   function parseWords$1(str) {
     var obj = {}, words = str.split(" ");
     for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
     return obj;
   }
   var keywords$9 = parseWords$1("Tcl safe after append array auto_execok auto_import auto_load " +
                             "auto_mkindex auto_mkindex_old auto_qualify auto_reset bgerror " +
                             "binary break catch cd close concat continue dde eof encoding error " +
                             "eval exec exit expr fblocked fconfigure fcopy file fileevent filename " +
                             "filename flush for foreach format gets glob global history http if " +
                             "incr info interp join lappend lindex linsert list llength load lrange " +
                             "lreplace lsearch lset lsort memory msgcat namespace open package parray " +
                             "pid pkg::create pkg_mkIndex proc puts pwd re_syntax read regex regexp " +
                             "registry regsub rename resource return scan seek set socket source split " +
                             "string subst switch tcl_endOfWord tcl_findLibrary tcl_startOfNextWord " +
                             "tcl_wordBreakAfter tcl_startOfPreviousWord tcl_wordBreakBefore tcltest " +
                             "tclvars tell time trace unknown unset update uplevel upvar variable " +
                             "vwait");
   var functions$1 = parseWords$1("if elseif else and not or eq ne in ni for foreach while switch");
   var isOperatorChar$4 = /[+\-*&%=<>!?^\/\|]/;
   function chain$3(stream, state, f) {
     state.tokenize = f;
     return f(stream, state);
   }
   function tokenBase$a(stream, state) {
     var beforeParams = state.beforeParams;
     state.beforeParams = false;
     var ch = stream.next();
     if ((ch == '"' || ch == "'") && state.inParams) {
       return chain$3(stream, state, tokenString$6(ch));
     } else if (/[\[\]{}\(\),;\.]/.test(ch)) {
       if (ch == "(" && beforeParams) state.inParams = true;
       else if (ch == ")") state.inParams = false;
       return null;
     } else if (/\d/.test(ch)) {
       stream.eatWhile(/[\w\.]/);
       return "number";
     } else if (ch == "#") {
       if (stream.eat("*"))
         return chain$3(stream, state, tokenComment$4);
       if (ch == "#" && stream.match(/ *\[ *\[/))
         return chain$3(stream, state, tokenUnparsed$1);
       stream.skipToEnd();
       return "comment";
     } else if (ch == '"') {
       stream.skipTo(/"/);
       return "comment";
     } else if (ch == "$") {
       stream.eatWhile(/[$_a-z0-9A-Z\.{:]/);
       stream.eatWhile(/}/);
       state.beforeParams = true;
       return "builtin";
     } else if (isOperatorChar$4.test(ch)) {
       stream.eatWhile(isOperatorChar$4);
       return "comment";
     } else {
       stream.eatWhile(/[\w\$_{}\xa1-\uffff]/);
       var word = stream.current().toLowerCase();
       if (keywords$9 && keywords$9.propertyIsEnumerable(word))
         return "keyword";
       if (functions$1 && functions$1.propertyIsEnumerable(word)) {
         state.beforeParams = true;
         return "keyword";
       }
       return null;
     }
   }
   function tokenString$6(quote) {
     return function(stream, state) {
       var escaped = false, next, end = false;
       while ((next = stream.next()) != null) {
         if (next == quote && !escaped) {
           end = true;
           break;
         }
         escaped = !escaped && next == "\\";
       }
       if (end) state.tokenize = tokenBase$a;
       return "string";
     };
   }
   function tokenComment$4(stream, state) {
     var maybeEnd = false, ch;
     while (ch = stream.next()) {
       if (ch == "#" && maybeEnd) {
         state.tokenize = tokenBase$a;
         break;
       }
       maybeEnd = (ch == "*");
     }
     return "comment";
   }
   function tokenUnparsed$1(stream, state) {
     var maybeEnd = 0, ch;
     while (ch = stream.next()) {
       if (ch == "#" && maybeEnd == 2) {
         state.tokenize = tokenBase$a;
         break;
       }
       if (ch == "]")
         maybeEnd++;
       else if (ch != " ")
         maybeEnd = 0;
     }
     return "meta";
   }
   const tcl = {
     name: "tcl",
     startState: function() {
       return {
         tokenize: tokenBase$a,
         beforeParams: false,
         inParams: false
       };
     },
     token: function(stream, state) {
       if (stream.eatSpace()) return null;
       return state.tokenize(stream, state);
     },
     languageData: {
       commentTokens: {line: "#"}
     }
   };

   var tcl$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      tcl: tcl
   });

   var TOKEN_STYLES = {
     addition: "inserted",
     attributes: "propertyName",
     bold: "strong",
     cite: "keyword",
     code: "monospace",
     definitionList: "list",
     deletion: "deleted",
     div: "punctuation",
     em: "emphasis",
     footnote: "variable",
     footCite: "qualifier",
     header: "heading",
     html: "comment",
     image: "atom",
     italic: "emphasis",
     link: "link",
     linkDefinition: "link",
     list1: "list",
     list2: "list.special",
     list3: "list",
     notextile: "string.special",
     pre: "operator",
     p: "content",
     quote: "bracket",
     span: "quote",
     specialChar: "character",
     strong: "strong",
     sub: "content.special",
     sup: "content.special",
     table: "variableName.special",
     tableHeading: "operator"
   };

   function startNewLine(stream, state) {
     state.mode = Modes.newLayout;
     state.tableHeading = false;

     if (state.layoutType === "definitionList" && state.spanningLayout &&
         stream.match(RE("definitionListEnd"), false))
       state.spanningLayout = false;
   }

   function handlePhraseModifier(stream, state, ch) {
     if (ch === "_") {
       if (stream.eat("_"))
         return togglePhraseModifier(stream, state, "italic", /__/, 2);
       else
         return togglePhraseModifier(stream, state, "em", /_/, 1);
     }

     if (ch === "*") {
       if (stream.eat("*")) {
         return togglePhraseModifier(stream, state, "bold", /\*\*/, 2);
       }
       return togglePhraseModifier(stream, state, "strong", /\*/, 1);
     }

     if (ch === "[") {
       if (stream.match(/\d+\]/)) state.footCite = true;
       return tokenStyles(state);
     }

     if (ch === "(") {
       var spec = stream.match(/^(r|tm|c)\)/);
       if (spec)
         return TOKEN_STYLES.specialChar
     }

     if (ch === "<" && stream.match(/(\w+)[^>]+>[^<]+<\/\1>/))
       return TOKEN_STYLES.html

     if (ch === "?" && stream.eat("?"))
       return togglePhraseModifier(stream, state, "cite", /\?\?/, 2);

     if (ch === "=" && stream.eat("="))
       return togglePhraseModifier(stream, state, "notextile", /==/, 2);

     if (ch === "-" && !stream.eat("-"))
       return togglePhraseModifier(stream, state, "deletion", /-/, 1);

     if (ch === "+")
       return togglePhraseModifier(stream, state, "addition", /\+/, 1);

     if (ch === "~")
       return togglePhraseModifier(stream, state, "sub", /~/, 1);

     if (ch === "^")
       return togglePhraseModifier(stream, state, "sup", /\^/, 1);

     if (ch === "%")
       return togglePhraseModifier(stream, state, "span", /%/, 1);

     if (ch === "@")
       return togglePhraseModifier(stream, state, "code", /@/, 1);

     if (ch === "!") {
       var type = togglePhraseModifier(stream, state, "image", /(?:\([^\)]+\))?!/, 1);
       stream.match(/^:\S+/); // optional Url portion
       return type;
     }
     return tokenStyles(state);
   }

   function togglePhraseModifier(stream, state, phraseModifier, closeRE, openSize) {
     var charBefore = stream.pos > openSize ? stream.string.charAt(stream.pos - openSize - 1) : null;
     var charAfter = stream.peek();
     if (state[phraseModifier]) {
       if ((!charAfter || /\W/.test(charAfter)) && charBefore && /\S/.test(charBefore)) {
         var type = tokenStyles(state);
         state[phraseModifier] = false;
         return type;
       }
     } else if ((!charBefore || /\W/.test(charBefore)) && charAfter && /\S/.test(charAfter) &&
                stream.match(new RegExp("^.*\\S" + closeRE.source + "(?:\\W|$)"), false)) {
       state[phraseModifier] = true;
       state.mode = Modes.attributes;
     }
     return tokenStyles(state);
   }
   function tokenStyles(state) {
     var disabled = textileDisabled(state);
     if (disabled) return disabled;

     var styles = [];
     if (state.layoutType) styles.push(TOKEN_STYLES[state.layoutType]);

     styles = styles.concat(activeStyles(
       state, "addition", "bold", "cite", "code", "deletion", "em", "footCite",
       "image", "italic", "link", "span", "strong", "sub", "sup", "table", "tableHeading"));

     if (state.layoutType === "header")
       styles.push(TOKEN_STYLES.header + "-" + state.header);

     return styles.length ? styles.join(" ") : null;
   }

   function textileDisabled(state) {
     var type = state.layoutType;

     switch(type) {
     case "notextile":
     case "code":
     case "pre":
       return TOKEN_STYLES[type];
     default:
       if (state.notextile)
         return TOKEN_STYLES.notextile + (type ? (" " + TOKEN_STYLES[type]) : "");
       return null;
     }
   }

   function activeStyles(state) {
     var styles = [];
     for (var i = 1; i < arguments.length; ++i) {
       if (state[arguments[i]])
         styles.push(TOKEN_STYLES[arguments[i]]);
     }
     return styles;
   }

   function blankLine(state) {
     var spanningLayout = state.spanningLayout, type = state.layoutType;

     for (var key in state) if (state.hasOwnProperty(key))
       delete state[key];

     state.mode = Modes.newLayout;
     if (spanningLayout) {
       state.layoutType = type;
       state.spanningLayout = true;
     }
   }

   var REs = {
     cache: {},
     single: {
       bc: "bc",
       bq: "bq",
       definitionList: /- .*?:=+/,
       definitionListEnd: /.*=:\s*$/,
       div: "div",
       drawTable: /\|.*\|/,
       foot: /fn\d+/,
       header: /h[1-6]/,
       html: /\s*<(?:\/)?(\w+)(?:[^>]+)?>(?:[^<]+<\/\1>)?/,
       link: /[^"]+":\S/,
       linkDefinition: /\[[^\s\]]+\]\S+/,
       list: /(?:#+|\*+)/,
       notextile: "notextile",
       para: "p",
       pre: "pre",
       table: "table",
       tableCellAttributes: /[\/\\]\d+/,
       tableHeading: /\|_\./,
       tableText: /[^"_\*\[\(\?\+~\^%@|-]+/,
       text: /[^!"_=\*\[\(<\?\+~\^%@-]+/
     },
     attributes: {
       align: /(?:<>|<|>|=)/,
       selector: /\([^\(][^\)]+\)/,
       lang: /\[[^\[\]]+\]/,
       pad: /(?:\(+|\)+){1,2}/,
       css: /\{[^\}]+\}/
     },
     createRe: function(name) {
       switch (name) {
       case "drawTable":
         return REs.makeRe("^", REs.single.drawTable, "$");
       case "html":
         return REs.makeRe("^", REs.single.html, "(?:", REs.single.html, ")*", "$");
       case "linkDefinition":
         return REs.makeRe("^", REs.single.linkDefinition, "$");
       case "listLayout":
         return REs.makeRe("^", REs.single.list, RE("allAttributes"), "*\\s+");
       case "tableCellAttributes":
         return REs.makeRe("^", REs.choiceRe(REs.single.tableCellAttributes,
                                             RE("allAttributes")), "+\\.");
       case "type":
         return REs.makeRe("^", RE("allTypes"));
       case "typeLayout":
         return REs.makeRe("^", RE("allTypes"), RE("allAttributes"),
                           "*\\.\\.?", "(\\s+|$)");
       case "attributes":
         return REs.makeRe("^", RE("allAttributes"), "+");

       case "allTypes":
         return REs.choiceRe(REs.single.div, REs.single.foot,
                             REs.single.header, REs.single.bc, REs.single.bq,
                             REs.single.notextile, REs.single.pre, REs.single.table,
                             REs.single.para);

       case "allAttributes":
         return REs.choiceRe(REs.attributes.selector, REs.attributes.css,
                             REs.attributes.lang, REs.attributes.align, REs.attributes.pad);

       default:
         return REs.makeRe("^", REs.single[name]);
       }
     },
     makeRe: function() {
       var pattern = "";
       for (var i = 0; i < arguments.length; ++i) {
         var arg = arguments[i];
         pattern += (typeof arg === "string") ? arg : arg.source;
       }
       return new RegExp(pattern);
     },
     choiceRe: function() {
       var parts = [arguments[0]];
       for (var i = 1; i < arguments.length; ++i) {
         parts[i * 2 - 1] = "|";
         parts[i * 2] = arguments[i];
       }

       parts.unshift("(?:");
       parts.push(")");
       return REs.makeRe.apply(null, parts);
     }
   };

   function RE(name) {
     return (REs.cache[name] || (REs.cache[name] = REs.createRe(name)));
   }

   var Modes = {
     newLayout: function(stream, state) {
       if (stream.match(RE("typeLayout"), false)) {
         state.spanningLayout = false;
         return (state.mode = Modes.blockType)(stream, state);
       }
       var newMode;
       if (!textileDisabled(state)) {
         if (stream.match(RE("listLayout"), false))
           newMode = Modes.list;
         else if (stream.match(RE("drawTable"), false))
           newMode = Modes.table;
         else if (stream.match(RE("linkDefinition"), false))
           newMode = Modes.linkDefinition;
         else if (stream.match(RE("definitionList")))
           newMode = Modes.definitionList;
         else if (stream.match(RE("html"), false))
           newMode = Modes.html;
       }
       return (state.mode = (newMode || Modes.text))(stream, state);
     },

     blockType: function(stream, state) {
       var match, type;
       state.layoutType = null;

       if (match = stream.match(RE("type")))
         type = match[0];
       else
         return (state.mode = Modes.text)(stream, state);

       if (match = type.match(RE("header"))) {
         state.layoutType = "header";
         state.header = parseInt(match[0][1]);
       } else if (type.match(RE("bq"))) {
         state.layoutType = "quote";
       } else if (type.match(RE("bc"))) {
         state.layoutType = "code";
       } else if (type.match(RE("foot"))) {
         state.layoutType = "footnote";
       } else if (type.match(RE("notextile"))) {
         state.layoutType = "notextile";
       } else if (type.match(RE("pre"))) {
         state.layoutType = "pre";
       } else if (type.match(RE("div"))) {
         state.layoutType = "div";
       } else if (type.match(RE("table"))) {
         state.layoutType = "table";
       }

       state.mode = Modes.attributes;
       return tokenStyles(state);
     },

     text: function(stream, state) {
       if (stream.match(RE("text"))) return tokenStyles(state);

       var ch = stream.next();
       if (ch === '"')
         return (state.mode = Modes.link)(stream, state);
       return handlePhraseModifier(stream, state, ch);
     },

     attributes: function(stream, state) {
       state.mode = Modes.layoutLength;

       if (stream.match(RE("attributes")))
         return TOKEN_STYLES.attributes
       else
         return tokenStyles(state);
     },

     layoutLength: function(stream, state) {
       if (stream.eat(".") && stream.eat("."))
         state.spanningLayout = true;

       state.mode = Modes.text;
       return tokenStyles(state);
     },

     list: function(stream, state) {
       var match = stream.match(RE("list"));
       state.listDepth = match[0].length;
       var listMod = (state.listDepth - 1) % 3;
       if (!listMod)
         state.layoutType = "list1";
       else if (listMod === 1)
         state.layoutType = "list2";
       else
         state.layoutType = "list3";

       state.mode = Modes.attributes;
       return tokenStyles(state);
     },

     link: function(stream, state) {
       state.mode = Modes.text;
       if (stream.match(RE("link"))) {
         stream.match(/\S+/);
         return TOKEN_STYLES.link
       }
       return tokenStyles(state);
     },

     linkDefinition: function(stream) {
       stream.skipToEnd();
       return TOKEN_STYLES.linkDefinition
     },

     definitionList: function(stream, state) {
       stream.match(RE("definitionList"));

       state.layoutType = "definitionList";

       if (stream.match(/\s*$/))
         state.spanningLayout = true;
       else
         state.mode = Modes.attributes;

       return tokenStyles(state);
     },

     html: function(stream) {
       stream.skipToEnd();
       return TOKEN_STYLES.html
     },

     table: function(stream, state) {
       state.layoutType = "table";
       return (state.mode = Modes.tableCell)(stream, state);
     },

     tableCell: function(stream, state) {
       if (stream.match(RE("tableHeading")))
         state.tableHeading = true;
       else
         stream.eat("|");

       state.mode = Modes.tableCellAttributes;
       return tokenStyles(state);
     },

     tableCellAttributes: function(stream, state) {
       state.mode = Modes.tableText;

       if (stream.match(RE("tableCellAttributes")))
         return TOKEN_STYLES.attributes
       else
         return tokenStyles(state);
     },

     tableText: function(stream, state) {
       if (stream.match(RE("tableText")))
         return tokenStyles(state);

       if (stream.peek() === "|") { // end of cell
         state.mode = Modes.tableCell;
         return tokenStyles(state);
       }
       return handlePhraseModifier(stream, state, stream.next());
     }
   };

   const textile = {
     name: "textile",
     startState: function() {
       return { mode: Modes.newLayout };
     },
     token: function(stream, state) {
       if (stream.sol()) startNewLine(stream, state);
       return state.mode(stream, state);
     },
     blankLine: blankLine
   };

   var textile$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      textile: textile
   });

   // Tokenizer
   var textwords = {};

   var keywords$8 = {
     "allTags": true, "closeAll": true, "list": true,
     "newJournal": true, "newTiddler": true,
     "permaview": true, "saveChanges": true,
     "search": true, "slider": true, "tabs": true,
     "tag": true, "tagging": true, "tags": true,
     "tiddler": true, "timeline": true,
     "today": true, "version": true, "option": true,
     "with": true, "filter": true
   };

   var isSpaceName = /[\w_\-]/i,
       reHR = /^\-\-\-\-+$/,                                 // <hr>
       reWikiCommentStart = /^\/\*\*\*$/,            // /***
       reWikiCommentStop = /^\*\*\*\/$/,             // ***/
       reBlockQuote = /^<<<$/,

       reJsCodeStart = /^\/\/\{\{\{$/,                       // //{{{ js block start
       reJsCodeStop = /^\/\/\}\}\}$/,                        // //}}} js stop
       reXmlCodeStart = /^<!--\{\{\{-->$/,           // xml block start
       reXmlCodeStop = /^<!--\}\}\}-->$/,            // xml stop

       reCodeBlockStart = /^\{\{\{$/,                        // {{{ TW text div block start
       reCodeBlockStop = /^\}\}\}$/,                 // }}} TW text stop

       reUntilCodeStop = /.*?\}\}\}/;

   function chain$2(stream, state, f) {
     state.tokenize = f;
     return f(stream, state);
   }

   function tokenBase$9(stream, state) {
     var sol = stream.sol(), ch = stream.peek();

     state.block = false;        // indicates the start of a code block.

     // check start of  blocks
     if (sol && /[<\/\*{}\-]/.test(ch)) {
       if (stream.match(reCodeBlockStart)) {
         state.block = true;
         return chain$2(stream, state, twTokenCode);
       }
       if (stream.match(reBlockQuote))
         return 'quote';
       if (stream.match(reWikiCommentStart) || stream.match(reWikiCommentStop))
         return 'comment';
       if (stream.match(reJsCodeStart) || stream.match(reJsCodeStop) || stream.match(reXmlCodeStart) || stream.match(reXmlCodeStop))
         return 'comment';
       if (stream.match(reHR))
         return 'contentSeparator';
     }

     stream.next();
     if (sol && /[\/\*!#;:>|]/.test(ch)) {
       if (ch == "!") { // tw header
         stream.skipToEnd();
         return "header";
       }
       if (ch == "*") { // tw list
         stream.eatWhile('*');
         return "comment";
       }
       if (ch == "#") { // tw numbered list
         stream.eatWhile('#');
         return "comment";
       }
       if (ch == ";") { // definition list, term
         stream.eatWhile(';');
         return "comment";
       }
       if (ch == ":") { // definition list, description
         stream.eatWhile(':');
         return "comment";
       }
       if (ch == ">") { // single line quote
         stream.eatWhile(">");
         return "quote";
       }
       if (ch == '|')
         return 'header';
     }

     if (ch == '{' && stream.match('{{'))
       return chain$2(stream, state, twTokenCode);

     // rudimentary html:// file:// link matching. TW knows much more ...
     if (/[hf]/i.test(ch) &&
         /[ti]/i.test(stream.peek()) &&
         stream.match(/\b(ttps?|tp|ile):\/\/[\-A-Z0-9+&@#\/%?=~_|$!:,.;]*[A-Z0-9+&@#\/%=~_|$]/i))
       return "link";

     // just a little string indicator, don't want to have the whole string covered
     if (ch == '"')
       return 'string';

     if (ch == '~')    // _no_ CamelCase indicator should be bold
       return 'brace';

     if (/[\[\]]/.test(ch) && stream.match(ch)) // check for [[..]]
       return 'brace';

     if (ch == "@") {    // check for space link. TODO fix @@...@@ highlighting
       stream.eatWhile(isSpaceName);
       return "link";
     }

     if (/\d/.test(ch)) {        // numbers
       stream.eatWhile(/\d/);
       return "number";
     }

     if (ch == "/") { // tw invisible comment
       if (stream.eat("%")) {
         return chain$2(stream, state, twTokenComment);
       } else if (stream.eat("/")) { //
         return chain$2(stream, state, twTokenEm);
       }
     }

     if (ch == "_" && stream.eat("_")) // tw underline
       return chain$2(stream, state, twTokenUnderline);

     // strikethrough and mdash handling
     if (ch == "-" && stream.eat("-")) {
       // if strikethrough looks ugly, change CSS.
       if (stream.peek() != ' ')
         return chain$2(stream, state, twTokenStrike);
       // mdash
       if (stream.peek() == ' ')
         return 'brace';
     }

     if (ch == "'" && stream.eat("'")) // tw bold
       return chain$2(stream, state, twTokenStrong);

     if (ch == "<" && stream.eat("<")) // tw macro
       return chain$2(stream, state, twTokenMacro);

     // core macro handling
     stream.eatWhile(/[\w\$_]/);
     return textwords.propertyIsEnumerable(stream.current()) ? "keyword" : null
   }

   // tw invisible comment
   function twTokenComment(stream, state) {
     var maybeEnd = false, ch;
     while (ch = stream.next()) {
       if (ch == "/" && maybeEnd) {
         state.tokenize = tokenBase$9;
         break;
       }
       maybeEnd = (ch == "%");
     }
     return "comment";
   }

   // tw strong / bold
   function twTokenStrong(stream, state) {
     var maybeEnd = false,
         ch;
     while (ch = stream.next()) {
       if (ch == "'" && maybeEnd) {
         state.tokenize = tokenBase$9;
         break;
       }
       maybeEnd = (ch == "'");
     }
     return "strong";
   }

   // tw code
   function twTokenCode(stream, state) {
     var sb = state.block;

     if (sb && stream.current()) {
       return "comment";
     }

     if (!sb && stream.match(reUntilCodeStop)) {
       state.tokenize = tokenBase$9;
       return "comment";
     }

     if (sb && stream.sol() && stream.match(reCodeBlockStop)) {
       state.tokenize = tokenBase$9;
       return "comment";
     }

     stream.next();
     return "comment";
   }

   // tw em / italic
   function twTokenEm(stream, state) {
     var maybeEnd = false,
         ch;
     while (ch = stream.next()) {
       if (ch == "/" && maybeEnd) {
         state.tokenize = tokenBase$9;
         break;
       }
       maybeEnd = (ch == "/");
     }
     return "emphasis";
   }

   // tw underlined text
   function twTokenUnderline(stream, state) {
     var maybeEnd = false,
         ch;
     while (ch = stream.next()) {
       if (ch == "_" && maybeEnd) {
         state.tokenize = tokenBase$9;
         break;
       }
       maybeEnd = (ch == "_");
     }
     return "link";
   }

   // tw strike through text looks ugly
   // change CSS if needed
   function twTokenStrike(stream, state) {
     var maybeEnd = false, ch;

     while (ch = stream.next()) {
       if (ch == "-" && maybeEnd) {
         state.tokenize = tokenBase$9;
         break;
       }
       maybeEnd = (ch == "-");
     }
     return "deleted";
   }

   // macro
   function twTokenMacro(stream, state) {
     if (stream.current() == '<<') {
       return 'meta';
     }

     var ch = stream.next();
     if (!ch) {
       state.tokenize = tokenBase$9;
       return null;
     }
     if (ch == ">") {
       if (stream.peek() == '>') {
         stream.next();
         state.tokenize = tokenBase$9;
         return "meta";
       }
     }

     stream.eatWhile(/[\w\$_]/);
     return keywords$8.propertyIsEnumerable(stream.current()) ? "keyword" : null
   }

   // Interface
   const tiddlyWiki = {
     name: "tiddlywiki",

     startState: function () {
       return {tokenize: tokenBase$9};
     },

     token: function (stream, state) {
       if (stream.eatSpace()) return null;
       var style = state.tokenize(stream, state);
       return style;
     }
   };

   var tiddlywiki = /*#__PURE__*/Object.freeze({
      __proto__: null,
      tiddlyWiki: tiddlyWiki
   });

   function inBlock(style, terminator, returnTokenizer) {
     return function(stream, state) {
       while (!stream.eol()) {
         if (stream.match(terminator)) {
           state.tokenize = inText;
           break;
         }
         stream.next();
       }

       if (returnTokenizer) state.tokenize = returnTokenizer;

       return style;
     };
   }

   function inLine(style) {
     return function(stream, state) {
       while(!stream.eol()) {
         stream.next();
       }
       state.tokenize = inText;
       return style;
     };
   }

   function inText(stream, state) {
     function chain(parser) {
       state.tokenize = parser;
       return parser(stream, state);
     }

     var sol = stream.sol();
     var ch = stream.next();

     //non start of line
     switch (ch) { //switch is generally much faster than if, so it is used here
     case "{": //plugin
       stream.eat("/");
       stream.eatSpace();
       stream.eatWhile(/[^\s\u00a0=\"\'\/?(}]/);
       state.tokenize = inPlugin;
       return "tag";
     case "_": //bold
       if (stream.eat("_"))
         return chain(inBlock("strong", "__", inText));
       break;
     case "'": //italics
       if (stream.eat("'"))
         return chain(inBlock("em", "''", inText));
       break;
     case "(":// Wiki Link
       if (stream.eat("("))
         return chain(inBlock("link", "))", inText));
       break;
     case "[":// Weblink
       return chain(inBlock("url", "]", inText));
     case "|": //table
       if (stream.eat("|"))
         return chain(inBlock("comment", "||"));
       break;
     case "-":
       if (stream.eat("=")) {//titleBar
         return chain(inBlock("header string", "=-", inText));
       } else if (stream.eat("-")) {//deleted
         return chain(inBlock("error tw-deleted", "--", inText));
       }
       break;
     case "=": //underline
       if (stream.match("=="))
         return chain(inBlock("tw-underline", "===", inText));
       break;
     case ":":
       if (stream.eat(":"))
         return chain(inBlock("comment", "::"));
       break;
     case "^": //box
       return chain(inBlock("tw-box", "^"));
     case "~": //np
       if (stream.match("np~"))
         return chain(inBlock("meta", "~/np~"));
       break;
     }

     //start of line types
     if (sol) {
       switch (ch) {
       case "!": //header at start of line
         if (stream.match('!!!!!')) {
           return chain(inLine("header string"));
         } else if (stream.match('!!!!')) {
           return chain(inLine("header string"));
         } else if (stream.match('!!!')) {
           return chain(inLine("header string"));
         } else if (stream.match('!!')) {
           return chain(inLine("header string"));
         } else {
           return chain(inLine("header string"));
         }
       case "*": //unordered list line item, or <li /> at start of line
       case "#": //ordered list line item, or <li /> at start of line
       case "+": //ordered list line item, or <li /> at start of line
         return chain(inLine("tw-listitem bracket"));
       }
     }

     //stream.eatWhile(/[&{]/); was eating up plugins, turned off to act less like html and more like tiki
     return null;
   }

   // Return variables for tokenizers
   var pluginName, type;
   function inPlugin(stream, state) {
     var ch = stream.next();
     var peek = stream.peek();

     if (ch == "}") {
       state.tokenize = inText;
       //type = ch == ")" ? "endPlugin" : "selfclosePlugin"; inPlugin
       return "tag";
     } else if (ch == "(" || ch == ")") {
       return "bracket";
     } else if (ch == "=") {
       type = "equals";

       if (peek == ">") {
         stream.next();
         peek = stream.peek();
       }

       //here we detect values directly after equal character with no quotes
       if (!/[\'\"]/.test(peek)) {
         state.tokenize = inAttributeNoQuote();
       }
       //end detect values

       return "operator";
     } else if (/[\'\"]/.test(ch)) {
       state.tokenize = inAttribute(ch);
       return state.tokenize(stream, state);
     } else {
       stream.eatWhile(/[^\s\u00a0=\"\'\/?]/);
       return "keyword";
     }
   }

   function inAttribute(quote) {
     return function(stream, state) {
       while (!stream.eol()) {
         if (stream.next() == quote) {
           state.tokenize = inPlugin;
           break;
         }
       }
       return "string";
     };
   }

   function inAttributeNoQuote() {
     return function(stream, state) {
       while (!stream.eol()) {
         var ch = stream.next();
         var peek = stream.peek();
         if (ch == " " || ch == "," || /[ )}]/.test(peek)) {
           state.tokenize = inPlugin;
           break;
         }
       }
       return "string";
     };
   }

   var curState, setStyle;
   function pass() {
     for (var i = arguments.length - 1; i >= 0; i--) curState.cc.push(arguments[i]);
   }

   function cont() {
     pass.apply(null, arguments);
     return true;
   }

   function pushContext$4(pluginName, startOfLine) {
     var noIndent = curState.context && curState.context.noIndent;
     curState.context = {
       prev: curState.context,
       pluginName: pluginName,
       indent: curState.indented,
       startOfLine: startOfLine,
       noIndent: noIndent
     };
   }

   function popContext$4() {
     if (curState.context) curState.context = curState.context.prev;
   }

   function element(type) {
     if (type == "openPlugin") {curState.pluginName = pluginName; return cont(attributes, endplugin(curState.startOfLine));}
     else if (type == "closePlugin") {
       var err = false;
       if (curState.context) {
         err = curState.context.pluginName != pluginName;
         popContext$4();
       } else {
         err = true;
       }
       if (err) setStyle = "error";
       return cont(endcloseplugin(err));
     }
     else if (type == "string") {
       if (!curState.context || curState.context.name != "!cdata") pushContext$4("!cdata");
       if (curState.tokenize == inText) popContext$4();
       return cont();
     }
     else return cont();
   }

   function endplugin(startOfLine) {
     return function(type) {
       if (
         type == "selfclosePlugin" ||
           type == "endPlugin"
       )
         return cont();
       if (type == "endPlugin") {pushContext$4(curState.pluginName, startOfLine); return cont();}
       return cont();
     };
   }

   function endcloseplugin(err) {
     return function(type) {
       if (err) setStyle = "error";
       if (type == "endPlugin") return cont();
       return pass();
     };
   }

   function attributes(type) {
     if (type == "keyword") {setStyle = "attribute"; return cont(attributes);}
     if (type == "equals") return cont(attvalue, attributes);
     return pass();
   }
   function attvalue(type) {
     if (type == "keyword") {setStyle = "string"; return cont();}
     if (type == "string") return cont(attvaluemaybe);
     return pass();
   }
   function attvaluemaybe(type) {
     if (type == "string") return cont(attvaluemaybe);
     else return pass();
   }
   const tiki = {
     name: "tiki",
     startState: function() {
       return {tokenize: inText, cc: [], indented: 0, startOfLine: true, pluginName: null, context: null};
     },
     token: function(stream, state) {
       if (stream.sol()) {
         state.startOfLine = true;
         state.indented = stream.indentation();
       }
       if (stream.eatSpace()) return null;

       setStyle = type = pluginName = null;
       var style = state.tokenize(stream, state);
       if ((style || type) && style != "comment") {
         curState = state;
         while (true) {
           var comb = state.cc.pop() || element;
           if (comb(type || style)) break;
         }
       }
       state.startOfLine = false;
       return setStyle || style;
     },
     indent: function(state, textAfter, cx) {
       var context = state.context;
       if (context && context.noIndent) return 0;
       if (context && /^{\//.test(textAfter))
         context = context.prev;
       while (context && !context.startOfLine)
         context = context.prev;
       if (context) return context.indent + cx.unit;
       else return 0;
     }
   };

   var tiki$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      tiki: tiki
   });

   const toml = {
     name: "toml",
     startState: function () {
       return {
         inString: false,
         stringType: "",
         lhs: true,
         inArray: 0
       };
     },
     token: function (stream, state) {
       //check for state changes
       if (!state.inString && ((stream.peek() == '"') || (stream.peek() == "'"))) {
         state.stringType = stream.peek();
         stream.next(); // Skip quote
         state.inString = true; // Update state
       }
       if (stream.sol() && state.inArray === 0) {
         state.lhs = true;
       }
       //return state
       if (state.inString) {
         while (state.inString && !stream.eol()) {
           if (stream.peek() === state.stringType) {
             stream.next(); // Skip quote
             state.inString = false; // Clear flag
           } else if (stream.peek() === '\\') {
             stream.next();
             stream.next();
           } else {
             stream.match(/^.[^\\\"\']*/);
           }
         }
         return state.lhs ? "property" : "string"; // Token style
       } else if (state.inArray && stream.peek() === ']') {
         stream.next();
         state.inArray--;
         return 'bracket';
       } else if (state.lhs && stream.peek() === '[' && stream.skipTo(']')) {
         stream.next();//skip closing ]
         // array of objects has an extra open & close []
         if (stream.peek() === ']') stream.next();
         return "atom";
       } else if (stream.peek() === "#") {
         stream.skipToEnd();
         return "comment";
       } else if (stream.eatSpace()) {
         return null;
       } else if (state.lhs && stream.eatWhile(function (c) { return c != '=' && c != ' '; })) {
         return "property";
       } else if (state.lhs && stream.peek() === "=") {
         stream.next();
         state.lhs = false;
         return null;
       } else if (!state.lhs && stream.match(/^\d\d\d\d[\d\-\:\.T]*Z/)) {
         return 'atom'; //date
       } else if (!state.lhs && (stream.match('true') || stream.match('false'))) {
         return 'atom';
       } else if (!state.lhs && stream.peek() === '[') {
         state.inArray++;
         stream.next();
         return 'bracket';
       } else if (!state.lhs && stream.match(/^\-?\d+(?:\.\d+)?/)) {
         return 'number';
       } else if (!stream.eatSpace()) {
         stream.next();
       }
       return null;
     },
     languageData: {
       commentTokens: { line: '#' },
     },
   };

   var toml$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      toml: toml
   });

   var words$4 = {};

   function tokenBase$8(stream) {
     if (stream.eatSpace()) return null;

     var sol = stream.sol();
     var ch = stream.next();

     if (ch === '\\') {
       if (stream.match('fB') || stream.match('fR') || stream.match('fI') ||
           stream.match('u')  || stream.match('d')  ||
           stream.match('%')  || stream.match('&')) {
         return 'string';
       }
       if (stream.match('m[')) {
         stream.skipTo(']');
         stream.next();
         return 'string';
       }
       if (stream.match('s+') || stream.match('s-')) {
         stream.eatWhile(/[\d-]/);
         return 'string';
       }
       if (stream.match('\(') || stream.match('*\(')) {
         stream.eatWhile(/[\w-]/);
         return 'string';
       }
       return 'string';
     }
     if (sol && (ch === '.' || ch === '\'')) {
       if (stream.eat('\\') && stream.eat('\"')) {
         stream.skipToEnd();
         return 'comment';
       }
     }
     if (sol && ch === '.') {
       if (stream.match('B ') || stream.match('I ') || stream.match('R ')) {
         return 'attribute';
       }
       if (stream.match('TH ') || stream.match('SH ') || stream.match('SS ') || stream.match('HP ')) {
         stream.skipToEnd();
         return 'quote';
       }
       if ((stream.match(/[A-Z]/) && stream.match(/[A-Z]/)) || (stream.match(/[a-z]/) && stream.match(/[a-z]/))) {
         return 'attribute';
       }
     }
     stream.eatWhile(/[\w-]/);
     var cur = stream.current();
     return words$4.hasOwnProperty(cur) ? words$4[cur] : null;
   }

   function tokenize(stream, state) {
     return (state.tokens[0] || tokenBase$8) (stream, state);
   }
   const troff = {
     name: "troff",
     startState: function() {return {tokens:[]};},
     token: function(stream, state) {
       return tokenize(stream, state);
     }
   };

   var troff$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      troff: troff
   });

   function words$3(str) {
     var obj = {}, words = str.split(" ");
     for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
     return obj;
   }

   const parserConfig$1 = {
     name: "ttcn",
     keywords: words$3("activate address alive all alt altstep and and4b any" +
                     " break case component const continue control deactivate" +
                     " display do else encode enumerated except exception" +
                     " execute extends extension external for from function" +
                     " goto group if import in infinity inout interleave" +
                     " label language length log match message mixed mod" +
                     " modifies module modulepar mtc noblock not not4b nowait" +
                     " of on optional or or4b out override param pattern port" +
                     " procedure record recursive rem repeat return runs select" +
                     " self sender set signature system template testcase to" +
                     " type union value valueof var variant while with xor xor4b"),
     builtin: words$3("bit2hex bit2int bit2oct bit2str char2int char2oct encvalue" +
                    " decomp decvalue float2int float2str hex2bit hex2int" +
                    " hex2oct hex2str int2bit int2char int2float int2hex" +
                    " int2oct int2str int2unichar isbound ischosen ispresent" +
                    " isvalue lengthof log2str oct2bit oct2char oct2hex oct2int" +
                    " oct2str regexp replace rnd sizeof str2bit str2float" +
                    " str2hex str2int str2oct substr unichar2int unichar2char" +
                    " enum2int"),
     types: words$3("anytype bitstring boolean char charstring default float" +
                  " hexstring integer objid octetstring universal verdicttype timer"),
     timerOps: words$3("read running start stop timeout"),
     portOps: words$3("call catch check clear getcall getreply halt raise receive" +
                    " reply send trigger"),
     configOps: words$3("create connect disconnect done kill killed map unmap"),
     verdictOps: words$3("getverdict setverdict"),
     sutOps: words$3("action"),
     functionOps: words$3("apply derefers refers"),

     verdictConsts: words$3("error fail inconc none pass"),
     booleanConsts: words$3("true false"),
     otherConsts: words$3("null NULL omit"),

     visibilityModifiers: words$3("private public friend"),
     templateMatch: words$3("complement ifpresent subset superset permutation"),
     multiLineStrings: true
   };

   var wordList = [];
   function add(obj) {
     if (obj) for (var prop in obj) if (obj.hasOwnProperty(prop))
       wordList.push(prop);
   }
   add(parserConfig$1.keywords);
   add(parserConfig$1.builtin);
   add(parserConfig$1.timerOps);
   add(parserConfig$1.portOps);

   var keywords$7 = parserConfig$1.keywords || {},
       builtin = parserConfig$1.builtin || {},
       timerOps = parserConfig$1.timerOps || {},
       portOps  = parserConfig$1.portOps || {},
       configOps = parserConfig$1.configOps || {},
       verdictOps = parserConfig$1.verdictOps || {},
       sutOps = parserConfig$1.sutOps || {},
       functionOps = parserConfig$1.functionOps || {},

       verdictConsts = parserConfig$1.verdictConsts || {},
       booleanConsts = parserConfig$1.booleanConsts || {},
       otherConsts   = parserConfig$1.otherConsts || {},

       types$2 = parserConfig$1.types || {},
       visibilityModifiers = parserConfig$1.visibilityModifiers || {},
       templateMatch = parserConfig$1.templateMatch || {},
       multiLineStrings$2 = parserConfig$1.multiLineStrings,
       indentStatements$1 = parserConfig$1.indentStatements !== false;
   var isOperatorChar$3 = /[+\-*&@=<>!\/]/;
   var curPunc$3;

   function tokenBase$7(stream, state) {
     var ch = stream.next();

     if (ch == '"' || ch == "'") {
       state.tokenize = tokenString$5(ch);
       return state.tokenize(stream, state);
     }
     if (/[\[\]{}\(\),;\\:\?\.]/.test(ch)) {
       curPunc$3 = ch;
       return "punctuation";
     }
     if (ch == "#"){
       stream.skipToEnd();
       return "atom";
     }
     if (ch == "%"){
       stream.eatWhile(/\b/);
       return "atom";
     }
     if (/\d/.test(ch)) {
       stream.eatWhile(/[\w\.]/);
       return "number";
     }
     if (ch == "/") {
       if (stream.eat("*")) {
         state.tokenize = tokenComment$3;
         return tokenComment$3(stream, state);
       }
       if (stream.eat("/")) {
         stream.skipToEnd();
         return "comment";
       }
     }
     if (isOperatorChar$3.test(ch)) {
       if(ch == "@"){
         if(stream.match("try") || stream.match("catch")
            || stream.match("lazy")){
           return "keyword";
         }
       }
       stream.eatWhile(isOperatorChar$3);
       return "operator";
     }
     stream.eatWhile(/[\w\$_\xa1-\uffff]/);
     var cur = stream.current();

     if (keywords$7.propertyIsEnumerable(cur)) return "keyword";
     if (builtin.propertyIsEnumerable(cur)) return "builtin";

     if (timerOps.propertyIsEnumerable(cur)) return "def";
     if (configOps.propertyIsEnumerable(cur)) return "def";
     if (verdictOps.propertyIsEnumerable(cur)) return "def";
     if (portOps.propertyIsEnumerable(cur)) return "def";
     if (sutOps.propertyIsEnumerable(cur)) return "def";
     if (functionOps.propertyIsEnumerable(cur)) return "def";

     if (verdictConsts.propertyIsEnumerable(cur)) return "string";
     if (booleanConsts.propertyIsEnumerable(cur)) return "string";
     if (otherConsts.propertyIsEnumerable(cur)) return "string";

     if (types$2.propertyIsEnumerable(cur)) return "typeName.standard";
     if (visibilityModifiers.propertyIsEnumerable(cur))
       return "modifier";
     if (templateMatch.propertyIsEnumerable(cur)) return "atom";

     return "variable";
   }

   function tokenString$5(quote) {
     return function(stream, state) {
       var escaped = false, next, end = false;
       while ((next = stream.next()) != null) {
         if (next == quote && !escaped){
           var afterQuote = stream.peek();
           //look if the character after the quote is like the B in '10100010'B
           if (afterQuote){
             afterQuote = afterQuote.toLowerCase();
             if(afterQuote == "b" || afterQuote == "h" || afterQuote == "o")
               stream.next();
           }
           end = true; break;
         }
         escaped = !escaped && next == "\\";
       }
       if (end || !(escaped || multiLineStrings$2))
         state.tokenize = null;
       return "string";
     };
   }

   function tokenComment$3(stream, state) {
     var maybeEnd = false, ch;
     while (ch = stream.next()) {
       if (ch == "/" && maybeEnd) {
         state.tokenize = null;
         break;
       }
       maybeEnd = (ch == "*");
     }
     return "comment";
   }

   function Context$2(indented, column, type, align, prev) {
     this.indented = indented;
     this.column = column;
     this.type = type;
     this.align = align;
     this.prev = prev;
   }

   function pushContext$3(state, col, type) {
     var indent = state.indented;
     if (state.context && state.context.type == "statement")
       indent = state.context.indented;
     return state.context = new Context$2(indent, col, type, null, state.context);
   }

   function popContext$3(state) {
     var t = state.context.type;
     if (t == ")" || t == "]" || t == "}")
       state.indented = state.context.indented;
     return state.context = state.context.prev;
   }

   //Interface
   const ttcn = {
     name: "ttcn",
     startState: function() {
       return {
         tokenize: null,
         context: new Context$2(0, 0, "top", false),
         indented: 0,
         startOfLine: true
       };
     },

     token: function(stream, state) {
       var ctx = state.context;
       if (stream.sol()) {
         if (ctx.align == null) ctx.align = false;
         state.indented = stream.indentation();
         state.startOfLine = true;
       }
       if (stream.eatSpace()) return null;
       curPunc$3 = null;
       var style = (state.tokenize || tokenBase$7)(stream, state);
       if (style == "comment") return style;
       if (ctx.align == null) ctx.align = true;

       if ((curPunc$3 == ";" || curPunc$3 == ":" || curPunc$3 == ",")
           && ctx.type == "statement"){
         popContext$3(state);
       }
       else if (curPunc$3 == "{") pushContext$3(state, stream.column(), "}");
       else if (curPunc$3 == "[") pushContext$3(state, stream.column(), "]");
       else if (curPunc$3 == "(") pushContext$3(state, stream.column(), ")");
       else if (curPunc$3 == "}") {
         while (ctx.type == "statement") ctx = popContext$3(state);
         if (ctx.type == "}") ctx = popContext$3(state);
         while (ctx.type == "statement") ctx = popContext$3(state);
       }
       else if (curPunc$3 == ctx.type) popContext$3(state);
       else if (indentStatements$1 &&
                (((ctx.type == "}" || ctx.type == "top") && curPunc$3 != ';') ||
                 (ctx.type == "statement" && curPunc$3 == "newstatement")))
         pushContext$3(state, stream.column(), "statement");

       state.startOfLine = false;

       return style;
     },

     languageData: {
       indentOnInput: /^\s*[{}]$/,
       commentTokens: {line: "//", block: {open: "/*", close: "*/"}},
       autocomplete: wordList
     }
   };

   var ttcn$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      ttcn: ttcn
   });

   function words$2(str) {
     var obj = {}, words = str.split(" ");
     for (var i = 0; i < words.length; ++i)
       obj[words[i]] = true;
     return obj;
   }

   const parserConfig = {
     name: "ttcn-cfg",
     keywords: words$2("Yes No LogFile FileMask ConsoleMask AppendFile" +
                     " TimeStampFormat LogEventTypes SourceInfoFormat" +
                     " LogEntityName LogSourceInfo DiskFullAction" +
                     " LogFileNumber LogFileSize MatchingHints Detailed" +
                     " Compact SubCategories Stack Single None Seconds" +
                     " DateTime Time Stop Error Retry Delete TCPPort KillTimer" +
                     " NumHCs UnixSocketsEnabled LocalAddress"),
     fileNCtrlMaskOptions: words$2("TTCN_EXECUTOR TTCN_ERROR TTCN_WARNING" +
                                 " TTCN_PORTEVENT TTCN_TIMEROP TTCN_VERDICTOP" +
                                 " TTCN_DEFAULTOP TTCN_TESTCASE TTCN_ACTION" +
                                 " TTCN_USER TTCN_FUNCTION TTCN_STATISTICS" +
                                 " TTCN_PARALLEL TTCN_MATCHING TTCN_DEBUG" +
                                 " EXECUTOR ERROR WARNING PORTEVENT TIMEROP" +
                                 " VERDICTOP DEFAULTOP TESTCASE ACTION USER" +
                                 " FUNCTION STATISTICS PARALLEL MATCHING DEBUG" +
                                 " LOG_ALL LOG_NOTHING ACTION_UNQUALIFIED" +
                                 " DEBUG_ENCDEC DEBUG_TESTPORT" +
                                 " DEBUG_UNQUALIFIED DEFAULTOP_ACTIVATE" +
                                 " DEFAULTOP_DEACTIVATE DEFAULTOP_EXIT" +
                                 " DEFAULTOP_UNQUALIFIED ERROR_UNQUALIFIED" +
                                 " EXECUTOR_COMPONENT EXECUTOR_CONFIGDATA" +
                                 " EXECUTOR_EXTCOMMAND EXECUTOR_LOGOPTIONS" +
                                 " EXECUTOR_RUNTIME EXECUTOR_UNQUALIFIED" +
                                 " FUNCTION_RND FUNCTION_UNQUALIFIED" +
                                 " MATCHING_DONE MATCHING_MCSUCCESS" +
                                 " MATCHING_MCUNSUCC MATCHING_MMSUCCESS" +
                                 " MATCHING_MMUNSUCC MATCHING_PCSUCCESS" +
                                 " MATCHING_PCUNSUCC MATCHING_PMSUCCESS" +
                                 " MATCHING_PMUNSUCC MATCHING_PROBLEM" +
                                 " MATCHING_TIMEOUT MATCHING_UNQUALIFIED" +
                                 " PARALLEL_PORTCONN PARALLEL_PORTMAP" +
                                 " PARALLEL_PTC PARALLEL_UNQUALIFIED" +
                                 " PORTEVENT_DUALRECV PORTEVENT_DUALSEND" +
                                 " PORTEVENT_MCRECV PORTEVENT_MCSEND" +
                                 " PORTEVENT_MMRECV PORTEVENT_MMSEND" +
                                 " PORTEVENT_MQUEUE PORTEVENT_PCIN" +
                                 " PORTEVENT_PCOUT PORTEVENT_PMIN" +
                                 " PORTEVENT_PMOUT PORTEVENT_PQUEUE" +
                                 " PORTEVENT_STATE PORTEVENT_UNQUALIFIED" +
                                 " STATISTICS_UNQUALIFIED STATISTICS_VERDICT" +
                                 " TESTCASE_FINISH TESTCASE_START" +
                                 " TESTCASE_UNQUALIFIED TIMEROP_GUARD" +
                                 " TIMEROP_READ TIMEROP_START TIMEROP_STOP" +
                                 " TIMEROP_TIMEOUT TIMEROP_UNQUALIFIED" +
                                 " USER_UNQUALIFIED VERDICTOP_FINAL" +
                                 " VERDICTOP_GETVERDICT VERDICTOP_SETVERDICT" +
                                 " VERDICTOP_UNQUALIFIED WARNING_UNQUALIFIED"),
     externalCommands: words$2("BeginControlPart EndControlPart BeginTestCase" +
                             " EndTestCase"),
     multiLineStrings: true
   };

   var keywords$6 = parserConfig.keywords,
       fileNCtrlMaskOptions = parserConfig.fileNCtrlMaskOptions,
       externalCommands = parserConfig.externalCommands,
       multiLineStrings$1 = parserConfig.multiLineStrings,
       indentStatements = parserConfig.indentStatements !== false;
   var isOperatorChar$2 = /[\|]/;
   var curPunc$2;

   function tokenBase$6(stream, state) {
     var ch = stream.next();
     if (ch == '"' || ch == "'") {
       state.tokenize = tokenString$4(ch);
       return state.tokenize(stream, state);
     }
     if (/[:=]/.test(ch)) {
       curPunc$2 = ch;
       return "punctuation";
     }
     if (ch == "#"){
       stream.skipToEnd();
       return "comment";
     }
     if (/\d/.test(ch)) {
       stream.eatWhile(/[\w\.]/);
       return "number";
     }
     if (isOperatorChar$2.test(ch)) {
       stream.eatWhile(isOperatorChar$2);
       return "operator";
     }
     if (ch == "["){
       stream.eatWhile(/[\w_\]]/);
       return "number";
     }

     stream.eatWhile(/[\w\$_]/);
     var cur = stream.current();
     if (keywords$6.propertyIsEnumerable(cur)) return "keyword";
     if (fileNCtrlMaskOptions.propertyIsEnumerable(cur))
       return "atom";
     if (externalCommands.propertyIsEnumerable(cur)) return "deleted";

     return "variable";
   }

   function tokenString$4(quote) {
     return function(stream, state) {
       var escaped = false, next, end = false;
       while ((next = stream.next()) != null) {
         if (next == quote && !escaped){
           var afterNext = stream.peek();
           //look if the character if the quote is like the B in '10100010'B
           if (afterNext){
             afterNext = afterNext.toLowerCase();
             if(afterNext == "b" || afterNext == "h" || afterNext == "o")
               stream.next();
           }
           end = true; break;
         }
         escaped = !escaped && next == "\\";
       }
       if (end || !(escaped || multiLineStrings$1))
         state.tokenize = null;
       return "string";
     };
   }

   function Context$1(indented, column, type, align, prev) {
     this.indented = indented;
     this.column = column;
     this.type = type;
     this.align = align;
     this.prev = prev;
   }
   function pushContext$2(state, col, type) {
     var indent = state.indented;
     if (state.context && state.context.type == "statement")
       indent = state.context.indented;
     return state.context = new Context$1(indent, col, type, null, state.context);
   }
   function popContext$2(state) {
     var t = state.context.type;
     if (t == ")" || t == "]" || t == "}")
       state.indented = state.context.indented;
     return state.context = state.context.prev;
   }

   //Interface
   const ttcnCfg = {
     name: "ttcn",
     startState: function() {
       return {
         tokenize: null,
         context: new Context$1(0, 0, "top", false),
         indented: 0,
         startOfLine: true
       };
     },

     token: function(stream, state) {
       var ctx = state.context;
       if (stream.sol()) {
         if (ctx.align == null) ctx.align = false;
         state.indented = stream.indentation();
         state.startOfLine = true;
       }
       if (stream.eatSpace()) return null;
       curPunc$2 = null;
       var style = (state.tokenize || tokenBase$6)(stream, state);
       if (style == "comment") return style;
       if (ctx.align == null) ctx.align = true;

       if ((curPunc$2 == ";" || curPunc$2 == ":" || curPunc$2 == ",")
           && ctx.type == "statement"){
         popContext$2(state);
       }
       else if (curPunc$2 == "{") pushContext$2(state, stream.column(), "}");
       else if (curPunc$2 == "[") pushContext$2(state, stream.column(), "]");
       else if (curPunc$2 == "(") pushContext$2(state, stream.column(), ")");
       else if (curPunc$2 == "}") {
         while (ctx.type == "statement") ctx = popContext$2(state);
         if (ctx.type == "}") ctx = popContext$2(state);
         while (ctx.type == "statement") ctx = popContext$2(state);
       }
       else if (curPunc$2 == ctx.type) popContext$2(state);
       else if (indentStatements && (((ctx.type == "}" || ctx.type == "top")
                                      && curPunc$2 != ';') || (ctx.type == "statement"
                                                             && curPunc$2 == "newstatement")))
         pushContext$2(state, stream.column(), "statement");
       state.startOfLine = false;
       return style;
     },

     languageData: {
       indentOnInput: /^\s*[{}]$/,
       commentTokens: {line: "#"}
     }
   };

   var ttcnCfg$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      ttcnCfg: ttcnCfg
   });

   var curPunc$1;

   function wordRegexp$3(words) {
     return new RegExp("^(?:" + words.join("|") + ")$", "i");
   }
   wordRegexp$3([]);
   var keywords$5 = wordRegexp$3(["@prefix", "@base", "a"]);
   var operatorChars = /[*+\-<>=&|]/;

   function tokenBase$5(stream, state) {
     var ch = stream.next();
     curPunc$1 = null;
     if (ch == "<" && !stream.match(/^[\s\u00a0=]/, false)) {
       stream.match(/^[^\s\u00a0>]*>?/);
       return "atom";
     }
     else if (ch == "\"" || ch == "'") {
       state.tokenize = tokenLiteral(ch);
       return state.tokenize(stream, state);
     }
     else if (/[{}\(\),\.;\[\]]/.test(ch)) {
       curPunc$1 = ch;
       return null;
     }
     else if (ch == "#") {
       stream.skipToEnd();
       return "comment";
     }
     else if (operatorChars.test(ch)) {
       stream.eatWhile(operatorChars);
       return null;
     }
     else if (ch == ":") {
       return "operator";
     } else {
       stream.eatWhile(/[_\w\d]/);
       if(stream.peek() == ":") {
         return "variableName.special";
       } else {
         var word = stream.current();

         if(keywords$5.test(word)) {
           return "meta";
         }

         if(ch >= "A" && ch <= "Z") {
           return "comment";
         } else {
           return "keyword";
         }
       }
       var word = stream.current();
     }
   }

   function tokenLiteral(quote) {
     return function(stream, state) {
       var escaped = false, ch;
       while ((ch = stream.next()) != null) {
         if (ch == quote && !escaped) {
           state.tokenize = tokenBase$5;
           break;
         }
         escaped = !escaped && ch == "\\";
       }
       return "string";
     };
   }

   function pushContext$1(state, type, col) {
     state.context = {prev: state.context, indent: state.indent, col: col, type: type};
   }
   function popContext$1(state) {
     state.indent = state.context.indent;
     state.context = state.context.prev;
   }

   const turtle = {
     name: "turtle",
     startState: function() {
       return {tokenize: tokenBase$5,
               context: null,
               indent: 0,
               col: 0};
     },

     token: function(stream, state) {
       if (stream.sol()) {
         if (state.context && state.context.align == null) state.context.align = false;
         state.indent = stream.indentation();
       }
       if (stream.eatSpace()) return null;
       var style = state.tokenize(stream, state);

       if (style != "comment" && state.context && state.context.align == null && state.context.type != "pattern") {
         state.context.align = true;
       }

       if (curPunc$1 == "(") pushContext$1(state, ")", stream.column());
       else if (curPunc$1 == "[") pushContext$1(state, "]", stream.column());
       else if (curPunc$1 == "{") pushContext$1(state, "}", stream.column());
       else if (/[\]\}\)]/.test(curPunc$1)) {
         while (state.context && state.context.type == "pattern") popContext$1(state);
         if (state.context && curPunc$1 == state.context.type) popContext$1(state);
       }
       else if (curPunc$1 == "." && state.context && state.context.type == "pattern") popContext$1(state);
       else if (/atom|string|variable/.test(style) && state.context) {
         if (/[\}\]]/.test(state.context.type))
           pushContext$1(state, "pattern", stream.column());
         else if (state.context.type == "pattern" && !state.context.align) {
           state.context.align = true;
           state.context.col = stream.column();
         }
       }

       return style;
     },

     indent: function(state, textAfter, cx) {
       var firstChar = textAfter && textAfter.charAt(0);
       var context = state.context;
       if (/[\]\}]/.test(firstChar))
         while (context && context.type == "pattern") context = context.prev;

       var closing = context && firstChar == context.type;
       if (!context)
         return 0;
       else if (context.type == "pattern")
         return context.col;
       else if (context.align)
         return context.col + (closing ? 0 : 1);
       else
         return context.indent + (closing ? 0 : cx.unit);
     },

     languageData: {
       commentTokens: {line: "#"}
     }
   };

   var turtle$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      turtle: turtle
   });

   function wordRegexp$2(words) {
     return new RegExp("^((" + words.join(")|(") + "))\\b");
   }
   var builtinArray = [
     "Clamp",
     "Constructor",
     "EnforceRange",
     "Exposed",
     "ImplicitThis",
     "Global", "PrimaryGlobal",
     "LegacyArrayClass",
     "LegacyUnenumerableNamedProperties",
     "LenientThis",
     "NamedConstructor",
     "NewObject",
     "NoInterfaceObject",
     "OverrideBuiltins",
     "PutForwards",
     "Replaceable",
     "SameObject",
     "TreatNonObjectAsNull",
     "TreatNullAs",
       "EmptyString",
     "Unforgeable",
     "Unscopeable"
   ];
   var builtins = wordRegexp$2(builtinArray);

   var typeArray = [
     "unsigned", "short", "long",                  // UnsignedIntegerType
     "unrestricted", "float", "double",            // UnrestrictedFloatType
     "boolean", "byte", "octet",                   // Rest of PrimitiveType
     "Promise",                                    // PromiseType
     "ArrayBuffer", "DataView", "Int8Array", "Int16Array", "Int32Array",
     "Uint8Array", "Uint16Array", "Uint32Array", "Uint8ClampedArray",
     "Float32Array", "Float64Array",               // BufferRelatedType
     "ByteString", "DOMString", "USVString", "sequence", "object", "RegExp",
     "Error", "DOMException", "FrozenArray",       // Rest of NonAnyType
     "any",                                        // Rest of SingleType
     "void"                                        // Rest of ReturnType
   ];
   var types$1 = wordRegexp$2(typeArray);

   var keywordArray = [
     "attribute", "callback", "const", "deleter", "dictionary", "enum", "getter",
     "implements", "inherit", "interface", "iterable", "legacycaller", "maplike",
     "partial", "required", "serializer", "setlike", "setter", "static",
     "stringifier", "typedef",                     // ArgumentNameKeyword except
                                                   // "unrestricted"
     "optional", "readonly", "or"
   ];
   var keywords$4 = wordRegexp$2(keywordArray);

   var atomArray = [
     "true", "false",                              // BooleanLiteral
     "Infinity", "NaN",                            // FloatLiteral
     "null"                                        // Rest of ConstValue
   ];
   var atoms$1 = wordRegexp$2(atomArray);

   var startDefArray = ["callback", "dictionary", "enum", "interface"];
   var startDefs = wordRegexp$2(startDefArray);

   var endDefArray = ["typedef"];
   var endDefs = wordRegexp$2(endDefArray);

   var singleOperators$1 = /^[:<=>?]/;
   var integers = /^-?([1-9][0-9]*|0[Xx][0-9A-Fa-f]+|0[0-7]*)/;
   var floats = /^-?(([0-9]+\.[0-9]*|[0-9]*\.[0-9]+)([Ee][+-]?[0-9]+)?|[0-9]+[Ee][+-]?[0-9]+)/;
   var identifiers$1 = /^_?[A-Za-z][0-9A-Z_a-z-]*/;
   var identifiersEnd = /^_?[A-Za-z][0-9A-Z_a-z-]*(?=\s*;)/;
   var strings = /^"[^"]*"/;
   var multilineComments = /^\/\*.*?\*\//;
   var multilineCommentsStart = /^\/\*.*/;
   var multilineCommentsEnd = /^.*?\*\//;

   function readToken(stream, state) {
     // whitespace
     if (stream.eatSpace()) return null;

     // comment
     if (state.inComment) {
       if (stream.match(multilineCommentsEnd)) {
         state.inComment = false;
         return "comment";
       }
       stream.skipToEnd();
       return "comment";
     }
     if (stream.match("//")) {
       stream.skipToEnd();
       return "comment";
     }
     if (stream.match(multilineComments)) return "comment";
     if (stream.match(multilineCommentsStart)) {
       state.inComment = true;
       return "comment";
     }

     // integer and float
     if (stream.match(/^-?[0-9\.]/, false)) {
       if (stream.match(integers) || stream.match(floats)) return "number";
     }

     // string
     if (stream.match(strings)) return "string";

     // identifier
     if (state.startDef && stream.match(identifiers$1)) return "def";

     if (state.endDef && stream.match(identifiersEnd)) {
       state.endDef = false;
       return "def";
     }

     if (stream.match(keywords$4)) return "keyword";

     if (stream.match(types$1)) {
       var lastToken = state.lastToken;
       var nextToken = (stream.match(/^\s*(.+?)\b/, false) || [])[1];

       if (lastToken === ":" || lastToken === "implements" ||
           nextToken === "implements" || nextToken === "=") {
         // Used as identifier
         return "builtin";
       } else {
         // Used as type
         return "type";
       }
     }

     if (stream.match(builtins)) return "builtin";
     if (stream.match(atoms$1)) return "atom";
     if (stream.match(identifiers$1)) return "variable";

     // other
     if (stream.match(singleOperators$1)) return "operator";

     // unrecognized
     stream.next();
     return null;
   }
   const webIDL = {
     name: "webidl",
     startState: function() {
       return {
         // Is in multiline comment
         inComment: false,
         // Last non-whitespace, matched token
         lastToken: "",
         // Next token is a definition
         startDef: false,
         // Last token of the statement is a definition
         endDef: false
       };
     },
     token: function(stream, state) {
       var style = readToken(stream, state);

       if (style) {
         var cur = stream.current();
         state.lastToken = cur;
         if (style === "keyword") {
           state.startDef = startDefs.test(cur);
           state.endDef = state.endDef || endDefs.test(cur);
         } else {
           state.startDef = false;
         }
       }

       return style;
     },

     languageData: {
       autocomplete: builtinArray.concat(typeArray).concat(keywordArray).concat(atomArray)
     }
   };

   var webidl = /*#__PURE__*/Object.freeze({
      __proto__: null,
      webIDL: webIDL
   });

   var ERRORCLASS = 'error';

   function wordRegexp$1(words) {
     return new RegExp("^((" + words.join(")|(") + "))\\b", "i");
   }

   var singleOperators = new RegExp("^[\\+\\-\\*/%&\\\\|\\^~<>!]");
   var singleDelimiters = new RegExp('^[\\(\\)\\[\\]\\{\\}@,:`=;\\.]');
   var doubleOperators = new RegExp("^((==)|(<>)|(<=)|(>=)|(<>)|(<<)|(>>)|(//)|(\\*\\*))");
   var doubleDelimiters = new RegExp("^((\\+=)|(\\-=)|(\\*=)|(%=)|(/=)|(&=)|(\\|=)|(\\^=))");
   var tripleDelimiters = new RegExp("^((//=)|(>>=)|(<<=)|(\\*\\*=))");
   var identifiers = new RegExp("^[_A-Za-z][_A-Za-z0-9]*");

   var openingKeywords = ['class','module', 'sub','enum','select','while','if','function', 'get','set','property', 'try', 'structure', 'synclock', 'using', 'with'];
   var middleKeywords = ['else','elseif','case', 'catch', 'finally'];
   var endKeywords = ['next','loop'];

   var operatorKeywords = ['and', "andalso", 'or', 'orelse', 'xor', 'in', 'not', 'is', 'isnot', 'like'];
   var wordOperators = wordRegexp$1(operatorKeywords);

   var commonKeywords = ["#const", "#else", "#elseif", "#end", "#if", "#region", "addhandler", "addressof", "alias", "as", "byref", "byval", "cbool", "cbyte", "cchar", "cdate", "cdbl", "cdec", "cint", "clng", "cobj", "compare", "const", "continue", "csbyte", "cshort", "csng", "cstr", "cuint", "culng", "cushort", "declare", "default", "delegate", "dim", "directcast", "each", "erase", "error", "event", "exit", "explicit", "false", "for", "friend", "gettype", "goto", "handles", "implements", "imports", "infer", "inherits", "interface", "isfalse", "istrue", "lib", "me", "mod", "mustinherit", "mustoverride", "my", "mybase", "myclass", "namespace", "narrowing", "new", "nothing", "notinheritable", "notoverridable", "of", "off", "on", "operator", "option", "optional", "out", "overloads", "overridable", "overrides", "paramarray", "partial", "private", "protected", "public", "raiseevent", "readonly", "redim", "removehandler", "resume", "return", "shadows", "shared", "static", "step", "stop", "strict", "then", "throw", "to", "true", "trycast", "typeof", "until", "until", "when", "widening", "withevents", "writeonly"];

   var commontypes = ['object', 'boolean', 'char', 'string', 'byte', 'sbyte', 'short', 'ushort', 'int16', 'uint16', 'integer', 'uinteger', 'int32', 'uint32', 'long', 'ulong', 'int64', 'uint64', 'decimal', 'single', 'double', 'float', 'date', 'datetime', 'intptr', 'uintptr'];

   var keywords$3 = wordRegexp$1(commonKeywords);
   var types = wordRegexp$1(commontypes);
   var stringPrefixes = '"';

   var opening = wordRegexp$1(openingKeywords);
   var middle = wordRegexp$1(middleKeywords);
   var closing = wordRegexp$1(endKeywords);
   var doubleClosing = wordRegexp$1(['end']);
   var doOpening = wordRegexp$1(['do']);

   function indent(_stream, state) {
     state.currentIndent++;
   }

   function dedent(_stream, state) {
     state.currentIndent--;
   }
   // tokenizers
   function tokenBase$4(stream, state) {
     if (stream.eatSpace()) {
       return null;
     }

     var ch = stream.peek();

     // Handle Comments
     if (ch === "'") {
       stream.skipToEnd();
       return 'comment';
     }


     // Handle Number Literals
     if (stream.match(/^((&H)|(&O))?[0-9\.a-f]/i, false)) {
       var floatLiteral = false;
       // Floats
       if (stream.match(/^\d*\.\d+F?/i)) { floatLiteral = true; }
       else if (stream.match(/^\d+\.\d*F?/)) { floatLiteral = true; }
       else if (stream.match(/^\.\d+F?/)) { floatLiteral = true; }

       if (floatLiteral) {
         // Float literals may be "imaginary"
         stream.eat(/J/i);
         return 'number';
       }
       // Integers
       var intLiteral = false;
       // Hex
       if (stream.match(/^&H[0-9a-f]+/i)) { intLiteral = true; }
       // Octal
       else if (stream.match(/^&O[0-7]+/i)) { intLiteral = true; }
       // Decimal
       else if (stream.match(/^[1-9]\d*F?/)) {
         // Decimal literals may be "imaginary"
         stream.eat(/J/i);
         // TODO - Can you have imaginary longs?
         intLiteral = true;
       }
       // Zero by itself with no other piece of number.
       else if (stream.match(/^0(?![\dx])/i)) { intLiteral = true; }
       if (intLiteral) {
         // Integer literals may be "long"
         stream.eat(/L/i);
         return 'number';
       }
     }

     // Handle Strings
     if (stream.match(stringPrefixes)) {
       state.tokenize = tokenStringFactory(stream.current());
       return state.tokenize(stream, state);
     }

     // Handle operators and Delimiters
     if (stream.match(tripleDelimiters) || stream.match(doubleDelimiters)) {
       return null;
     }
     if (stream.match(doubleOperators)
         || stream.match(singleOperators)
         || stream.match(wordOperators)) {
       return 'operator';
     }
     if (stream.match(singleDelimiters)) {
       return null;
     }
     if (stream.match(doOpening)) {
       indent(stream,state);
       state.doInCurrentLine = true;
       return 'keyword';
     }
     if (stream.match(opening)) {
       if (! state.doInCurrentLine)
         indent(stream,state);
       else
         state.doInCurrentLine = false;
       return 'keyword';
     }
     if (stream.match(middle)) {
       return 'keyword';
     }

     if (stream.match(doubleClosing)) {
       dedent(stream,state);
       dedent(stream,state);
       return 'keyword';
     }
     if (stream.match(closing)) {
       dedent(stream,state);
       return 'keyword';
     }

     if (stream.match(types)) {
       return 'keyword';
     }

     if (stream.match(keywords$3)) {
       return 'keyword';
     }

     if (stream.match(identifiers)) {
       return 'variable';
     }

     // Handle non-detected items
     stream.next();
     return ERRORCLASS;
   }

   function tokenStringFactory(delimiter) {
     var singleline = delimiter.length == 1;
     var OUTCLASS = 'string';

     return function(stream, state) {
       while (!stream.eol()) {
         stream.eatWhile(/[^'"]/);
         if (stream.match(delimiter)) {
           state.tokenize = tokenBase$4;
           return OUTCLASS;
         } else {
           stream.eat(/['"]/);
         }
       }
       if (singleline) {
         state.tokenize = tokenBase$4;
       }
       return OUTCLASS;
     };
   }


   function tokenLexer(stream, state) {
     var style = state.tokenize(stream, state);
     var current = stream.current();

     // Handle '.' connected identifiers
     if (current === '.') {
       style = state.tokenize(stream, state);
       if (style === 'variable') {
         return 'variable';
       } else {
         return ERRORCLASS;
       }
     }


     var delimiter_index = '[({'.indexOf(current);
     if (delimiter_index !== -1) {
       indent(stream, state );
     }
     delimiter_index = '])}'.indexOf(current);
     if (delimiter_index !== -1) {
       if (dedent(stream, state)) {
         return ERRORCLASS;
       }
     }

     return style;
   }

   const vb = {
     name: "vb",

     startState: function() {
       return {
         tokenize: tokenBase$4,
         lastToken: null,
         currentIndent: 0,
         nextLineIndent: 0,
         doInCurrentLine: false


       };
     },

     token: function(stream, state) {
       if (stream.sol()) {
         state.currentIndent += state.nextLineIndent;
         state.nextLineIndent = 0;
         state.doInCurrentLine = 0;
       }
       var style = tokenLexer(stream, state);

       state.lastToken = {style:style, content: stream.current()};



       return style;
     },

     indent: function(state, textAfter, cx) {
       var trueText = textAfter.replace(/^\s+|\s+$/g, '') ;
       if (trueText.match(closing) || trueText.match(doubleClosing) || trueText.match(middle)) return cx.unit*(state.currentIndent-1);
       if(state.currentIndent < 0) return 0;
       return state.currentIndent * cx.unit;
     },

     languageData: {
       closeBrackets: {brackets: ["(", "[", "{", '"']},
       commentTokens: {line: "'"},
       autocomplete: openingKeywords.concat(middleKeywords).concat(endKeywords)
         .concat(operatorKeywords).concat(commonKeywords).concat(commontypes)
     }
   };

   var vb$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      vb: vb
   });

   function mkVBScript(parserConf) {
       var ERRORCLASS = 'error';

       function wordRegexp(words) {
           return new RegExp("^((" + words.join(")|(") + "))\\b", "i");
       }

       var singleOperators = new RegExp("^[\\+\\-\\*/&\\\\\\^<>=]");
       var doubleOperators = new RegExp("^((<>)|(<=)|(>=))");
       var singleDelimiters = new RegExp('^[\\.,]');
       var brackets = new RegExp('^[\\(\\)]');
       var identifiers = new RegExp("^[A-Za-z][_A-Za-z0-9]*");

       var openingKeywords = ['class','sub','select','while','if','function', 'property', 'with', 'for'];
       var middleKeywords = ['else','elseif','case'];
       var endKeywords = ['next','loop','wend'];

       var wordOperators = wordRegexp(['and', 'or', 'not', 'xor', 'is', 'mod', 'eqv', 'imp']);
       var commonkeywords = ['dim', 'redim', 'then',  'until', 'randomize',
                             'byval','byref','new','property', 'exit', 'in',
                             'const','private', 'public',
                             'get','set','let', 'stop', 'on error resume next', 'on error goto 0', 'option explicit', 'call', 'me'];

       //This list was from: http://msdn.microsoft.com/en-us/library/f8tbc79x(v=vs.84).aspx
       var atomWords = ['true', 'false', 'nothing', 'empty', 'null'];
       //This list was from: http://msdn.microsoft.com/en-us/library/3ca8tfek(v=vs.84).aspx
       var builtinFuncsWords = ['abs', 'array', 'asc', 'atn', 'cbool', 'cbyte', 'ccur', 'cdate', 'cdbl', 'chr', 'cint', 'clng', 'cos', 'csng', 'cstr', 'date', 'dateadd', 'datediff', 'datepart',
                           'dateserial', 'datevalue', 'day', 'escape', 'eval', 'execute', 'exp', 'filter', 'formatcurrency', 'formatdatetime', 'formatnumber', 'formatpercent', 'getlocale', 'getobject',
                           'getref', 'hex', 'hour', 'inputbox', 'instr', 'instrrev', 'int', 'fix', 'isarray', 'isdate', 'isempty', 'isnull', 'isnumeric', 'isobject', 'join', 'lbound', 'lcase', 'left',
                           'len', 'loadpicture', 'log', 'ltrim', 'rtrim', 'trim', 'maths', 'mid', 'minute', 'month', 'monthname', 'msgbox', 'now', 'oct', 'replace', 'rgb', 'right', 'rnd', 'round',
                           'scriptengine', 'scriptenginebuildversion', 'scriptenginemajorversion', 'scriptengineminorversion', 'second', 'setlocale', 'sgn', 'sin', 'space', 'split', 'sqr', 'strcomp',
                           'string', 'strreverse', 'tan', 'time', 'timer', 'timeserial', 'timevalue', 'typename', 'ubound', 'ucase', 'unescape', 'vartype', 'weekday', 'weekdayname', 'year'];

       //This list was from: http://msdn.microsoft.com/en-us/library/ydz4cfk3(v=vs.84).aspx
       var builtinConsts = ['vbBlack', 'vbRed', 'vbGreen', 'vbYellow', 'vbBlue', 'vbMagenta', 'vbCyan', 'vbWhite', 'vbBinaryCompare', 'vbTextCompare',
                            'vbSunday', 'vbMonday', 'vbTuesday', 'vbWednesday', 'vbThursday', 'vbFriday', 'vbSaturday', 'vbUseSystemDayOfWeek', 'vbFirstJan1', 'vbFirstFourDays', 'vbFirstFullWeek',
                            'vbGeneralDate', 'vbLongDate', 'vbShortDate', 'vbLongTime', 'vbShortTime', 'vbObjectError',
                            'vbOKOnly', 'vbOKCancel', 'vbAbortRetryIgnore', 'vbYesNoCancel', 'vbYesNo', 'vbRetryCancel', 'vbCritical', 'vbQuestion', 'vbExclamation', 'vbInformation', 'vbDefaultButton1', 'vbDefaultButton2',
                            'vbDefaultButton3', 'vbDefaultButton4', 'vbApplicationModal', 'vbSystemModal', 'vbOK', 'vbCancel', 'vbAbort', 'vbRetry', 'vbIgnore', 'vbYes', 'vbNo',
                            'vbCr', 'VbCrLf', 'vbFormFeed', 'vbLf', 'vbNewLine', 'vbNullChar', 'vbNullString', 'vbTab', 'vbVerticalTab', 'vbUseDefault', 'vbTrue', 'vbFalse',
                            'vbEmpty', 'vbNull', 'vbInteger', 'vbLong', 'vbSingle', 'vbDouble', 'vbCurrency', 'vbDate', 'vbString', 'vbObject', 'vbError', 'vbBoolean', 'vbVariant', 'vbDataObject', 'vbDecimal', 'vbByte', 'vbArray'];
       //This list was from: http://msdn.microsoft.com/en-us/library/hkc375ea(v=vs.84).aspx
       var builtinObjsWords = ['WScript', 'err', 'debug', 'RegExp'];
       var knownProperties = ['description', 'firstindex', 'global', 'helpcontext', 'helpfile', 'ignorecase', 'length', 'number', 'pattern', 'source', 'value', 'count'];
       var knownMethods = ['clear', 'execute', 'raise', 'replace', 'test', 'write', 'writeline', 'close', 'open', 'state', 'eof', 'update', 'addnew', 'end', 'createobject', 'quit'];

       var aspBuiltinObjsWords = ['server', 'response', 'request', 'session', 'application'];
       var aspKnownProperties = ['buffer', 'cachecontrol', 'charset', 'contenttype', 'expires', 'expiresabsolute', 'isclientconnected', 'pics', 'status', //response
                                 'clientcertificate', 'cookies', 'form', 'querystring', 'servervariables', 'totalbytes', //request
                                 'contents', 'staticobjects', //application
                                 'codepage', 'lcid', 'sessionid', 'timeout', //session
                                 'scripttimeout']; //server
       var aspKnownMethods = ['addheader', 'appendtolog', 'binarywrite', 'end', 'flush', 'redirect', //response
                              'binaryread', //request
                              'remove', 'removeall', 'lock', 'unlock', //application
                              'abandon', //session
                              'getlasterror', 'htmlencode', 'mappath', 'transfer', 'urlencode']; //server

       var knownWords = knownMethods.concat(knownProperties);

       builtinObjsWords = builtinObjsWords.concat(builtinConsts);

       if (parserConf.isASP){
           builtinObjsWords = builtinObjsWords.concat(aspBuiltinObjsWords);
           knownWords = knownWords.concat(aspKnownMethods, aspKnownProperties);
       }
       var keywords = wordRegexp(commonkeywords);
       var atoms = wordRegexp(atomWords);
       var builtinFuncs = wordRegexp(builtinFuncsWords);
       var builtinObjs = wordRegexp(builtinObjsWords);
       var known = wordRegexp(knownWords);
       var stringPrefixes = '"';

       var opening = wordRegexp(openingKeywords);
       var middle = wordRegexp(middleKeywords);
       var closing = wordRegexp(endKeywords);
       var doubleClosing = wordRegexp(['end']);
       var doOpening = wordRegexp(['do']);
       var noIndentWords = wordRegexp(['on error resume next', 'exit']);
       var comment = wordRegexp(['rem']);


       function indent(_stream, state) {
         state.currentIndent++;
       }

       function dedent(_stream, state) {
         state.currentIndent--;
       }
       // tokenizers
       function tokenBase(stream, state) {
           if (stream.eatSpace()) {
               return null
               //return null;
           }

           var ch = stream.peek();

           // Handle Comments
           if (ch === "'") {
               stream.skipToEnd();
               return 'comment';
           }
           if (stream.match(comment)){
               stream.skipToEnd();
               return 'comment';
           }


           // Handle Number Literals
           if (stream.match(/^((&H)|(&O))?[0-9\.]/i, false) && !stream.match(/^((&H)|(&O))?[0-9\.]+[a-z_]/i, false)) {
               var floatLiteral = false;
               // Floats
               if (stream.match(/^\d*\.\d+/i)) { floatLiteral = true; }
               else if (stream.match(/^\d+\.\d*/)) { floatLiteral = true; }
               else if (stream.match(/^\.\d+/)) { floatLiteral = true; }

               if (floatLiteral) {
                   // Float literals may be "imaginary"
                   stream.eat(/J/i);
                   return 'number';
               }
               // Integers
               var intLiteral = false;
               // Hex
               if (stream.match(/^&H[0-9a-f]+/i)) { intLiteral = true; }
               // Octal
               else if (stream.match(/^&O[0-7]+/i)) { intLiteral = true; }
               // Decimal
               else if (stream.match(/^[1-9]\d*F?/)) {
                   // Decimal literals may be "imaginary"
                   stream.eat(/J/i);
                   // TODO - Can you have imaginary longs?
                   intLiteral = true;
               }
               // Zero by itself with no other piece of number.
               else if (stream.match(/^0(?![\dx])/i)) { intLiteral = true; }
               if (intLiteral) {
                   // Integer literals may be "long"
                   stream.eat(/L/i);
                   return 'number';
               }
           }

           // Handle Strings
           if (stream.match(stringPrefixes)) {
               state.tokenize = tokenStringFactory(stream.current());
               return state.tokenize(stream, state);
           }

           // Handle operators and Delimiters
           if (stream.match(doubleOperators)
               || stream.match(singleOperators)
               || stream.match(wordOperators)) {
               return 'operator';
           }
           if (stream.match(singleDelimiters)) {
               return null;
           }

           if (stream.match(brackets)) {
               return "bracket";
           }

           if (stream.match(noIndentWords)) {
               state.doInCurrentLine = true;

               return 'keyword';
           }

           if (stream.match(doOpening)) {
               indent(stream,state);
               state.doInCurrentLine = true;

               return 'keyword';
           }
           if (stream.match(opening)) {
               if (! state.doInCurrentLine)
                 indent(stream,state);
               else
                 state.doInCurrentLine = false;

               return 'keyword';
           }
           if (stream.match(middle)) {
               return 'keyword';
           }


           if (stream.match(doubleClosing)) {
               dedent(stream,state);
               dedent(stream,state);

               return 'keyword';
           }
           if (stream.match(closing)) {
               if (! state.doInCurrentLine)
                 dedent(stream,state);
               else
                 state.doInCurrentLine = false;

               return 'keyword';
           }

           if (stream.match(keywords)) {
               return 'keyword';
           }

           if (stream.match(atoms)) {
               return 'atom';
           }

           if (stream.match(known)) {
               return 'variableName.special';
           }

           if (stream.match(builtinFuncs)) {
               return 'builtin';
           }

           if (stream.match(builtinObjs)){
               return 'builtin';
           }

           if (stream.match(identifiers)) {
               return 'variable';
           }

           // Handle non-detected items
           stream.next();
           return ERRORCLASS;
       }

       function tokenStringFactory(delimiter) {
           var singleline = delimiter.length == 1;
           var OUTCLASS = 'string';

           return function(stream, state) {
               while (!stream.eol()) {
                   stream.eatWhile(/[^'"]/);
                   if (stream.match(delimiter)) {
                       state.tokenize = tokenBase;
                       return OUTCLASS;
                   } else {
                       stream.eat(/['"]/);
                   }
               }
               if (singleline) {
                 state.tokenize = tokenBase;
               }
               return OUTCLASS;
           };
       }


       function tokenLexer(stream, state) {
           var style = state.tokenize(stream, state);
           var current = stream.current();

           // Handle '.' connected identifiers
           if (current === '.') {
               style = state.tokenize(stream, state);

               current = stream.current();
               if (style && (style.substr(0, 8) === 'variable' || style==='builtin' || style==='keyword')){//|| knownWords.indexOf(current.substring(1)) > -1) {
                   if (style === 'builtin' || style === 'keyword') style='variable';
                   if (knownWords.indexOf(current.substr(1)) > -1) style='keyword';

                   return style;
               } else {
                   return ERRORCLASS;
               }
           }

           return style;
       }

       return {
           name: "vbscript",
           startState: function() {
               return {
                 tokenize: tokenBase,
                 lastToken: null,
                 currentIndent: 0,
                 nextLineIndent: 0,
                 doInCurrentLine: false,
                 ignoreKeyword: false


             };
           },

           token: function(stream, state) {
               if (stream.sol()) {
                 state.currentIndent += state.nextLineIndent;
                 state.nextLineIndent = 0;
                 state.doInCurrentLine = 0;
               }
               var style = tokenLexer(stream, state);

               state.lastToken = {style:style, content: stream.current()};

               if (style===null) style=null;

               return style;
           },

           indent: function(state, textAfter, cx) {
               var trueText = textAfter.replace(/^\s+|\s+$/g, '') ;
               if (trueText.match(closing) || trueText.match(doubleClosing) || trueText.match(middle)) return cx.unit*(state.currentIndent-1);
               if(state.currentIndent < 0) return 0;
               return state.currentIndent * cx.unit
           }

       };
   }
   const vbScript = mkVBScript({});
   const vbScriptASP = mkVBScript({isASP: true});

   var vbscript = /*#__PURE__*/Object.freeze({
      __proto__: null,
      vbScript: vbScript,
      vbScriptASP: vbScriptASP
   });

   function parseWords(str) {
     var obj = {}, words = str.split(" ");
     for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
     return obj;
   }

   var keywords$2 = parseWords("#end #else #break #stop #[[ #]] " +
                             "#{end} #{else} #{break} #{stop}");
   var functions = parseWords("#if #elseif #foreach #set #include #parse #macro #define #evaluate " +
                              "#{if} #{elseif} #{foreach} #{set} #{include} #{parse} #{macro} #{define} #{evaluate}");
   var specials = parseWords("$foreach.count $foreach.hasNext $foreach.first $foreach.last $foreach.topmost $foreach.parent.count $foreach.parent.hasNext $foreach.parent.first $foreach.parent.last $foreach.parent $velocityCount $!bodyContent $bodyContent");
   var isOperatorChar$1 = /[+\-*&%=<>!?:\/|]/;

   function chain$1(stream, state, f) {
     state.tokenize = f;
     return f(stream, state);
   }
   function tokenBase$3(stream, state) {
     var beforeParams = state.beforeParams;
     state.beforeParams = false;
     var ch = stream.next();
     // start of unparsed string?
     if ((ch == "'") && !state.inString && state.inParams) {
       state.lastTokenWasBuiltin = false;
       return chain$1(stream, state, tokenString$3(ch));
     }
     // start of parsed string?
     else if ((ch == '"')) {
       state.lastTokenWasBuiltin = false;
       if (state.inString) {
         state.inString = false;
         return "string";
       }
       else if (state.inParams)
         return chain$1(stream, state, tokenString$3(ch));
     }
     // is it one of the special signs []{}().,;? Separator?
     else if (/[\[\]{}\(\),;\.]/.test(ch)) {
       if (ch == "(" && beforeParams)
         state.inParams = true;
       else if (ch == ")") {
         state.inParams = false;
         state.lastTokenWasBuiltin = true;
       }
       return null;
     }
     // start of a number value?
     else if (/\d/.test(ch)) {
       state.lastTokenWasBuiltin = false;
       stream.eatWhile(/[\w\.]/);
       return "number";
     }
     // multi line comment?
     else if (ch == "#" && stream.eat("*")) {
       state.lastTokenWasBuiltin = false;
       return chain$1(stream, state, tokenComment$2);
     }
     // unparsed content?
     else if (ch == "#" && stream.match(/ *\[ *\[/)) {
       state.lastTokenWasBuiltin = false;
       return chain$1(stream, state, tokenUnparsed);
     }
     // single line comment?
     else if (ch == "#" && stream.eat("#")) {
       state.lastTokenWasBuiltin = false;
       stream.skipToEnd();
       return "comment";
     }
     // variable?
     else if (ch == "$") {
       stream.eat("!");
       stream.eatWhile(/[\w\d\$_\.{}-]/);
       // is it one of the specials?
       if (specials && specials.propertyIsEnumerable(stream.current())) {
         return "keyword";
       }
       else {
         state.lastTokenWasBuiltin = true;
         state.beforeParams = true;
         return "builtin";
       }
     }
     // is it a operator?
     else if (isOperatorChar$1.test(ch)) {
       state.lastTokenWasBuiltin = false;
       stream.eatWhile(isOperatorChar$1);
       return "operator";
     }
     else {
       // get the whole word
       stream.eatWhile(/[\w\$_{}@]/);
       var word = stream.current();
       // is it one of the listed keywords?
       if (keywords$2 && keywords$2.propertyIsEnumerable(word))
         return "keyword";
       // is it one of the listed functions?
       if (functions && functions.propertyIsEnumerable(word) ||
           (stream.current().match(/^#@?[a-z0-9_]+ *$/i) && stream.peek()=="(") &&
           !(functions && functions.propertyIsEnumerable(word.toLowerCase()))) {
         state.beforeParams = true;
         state.lastTokenWasBuiltin = false;
         return "keyword";
       }
       if (state.inString) {
         state.lastTokenWasBuiltin = false;
         return "string";
       }
       if (stream.pos > word.length && stream.string.charAt(stream.pos-word.length-1)=="." && state.lastTokenWasBuiltin)
         return "builtin";
       // default: just a "word"
       state.lastTokenWasBuiltin = false;
       return null;
     }
   }

   function tokenString$3(quote) {
     return function(stream, state) {
       var escaped = false, next, end = false;
       while ((next = stream.next()) != null) {
         if ((next == quote) && !escaped) {
           end = true;
           break;
         }
         if (quote=='"' && stream.peek() == '$' && !escaped) {
           state.inString = true;
           end = true;
           break;
         }
         escaped = !escaped && next == "\\";
       }
       if (end) state.tokenize = tokenBase$3;
       return "string";
     };
   }

   function tokenComment$2(stream, state) {
     var maybeEnd = false, ch;
     while (ch = stream.next()) {
       if (ch == "#" && maybeEnd) {
         state.tokenize = tokenBase$3;
         break;
       }
       maybeEnd = (ch == "*");
     }
     return "comment";
   }

   function tokenUnparsed(stream, state) {
     var maybeEnd = 0, ch;
     while (ch = stream.next()) {
       if (ch == "#" && maybeEnd == 2) {
         state.tokenize = tokenBase$3;
         break;
       }
       if (ch == "]")
         maybeEnd++;
       else if (ch != " ")
         maybeEnd = 0;
     }
     return "meta";
   }
   // Interface

   const velocity = {
     name: "velocity",

     startState: function() {
       return {
         tokenize: tokenBase$3,
         beforeParams: false,
         inParams: false,
         inString: false,
         lastTokenWasBuiltin: false
       };
     },

     token: function(stream, state) {
       if (stream.eatSpace()) return null;
       return state.tokenize(stream, state);
     },
     languageData: {
       commentTokens: {line: "##", block: {open: "#*", close: "*#"}}
     }
   };

   var velocity$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      velocity: velocity
   });

   function words$1(str) {
     var obj = {}, words = str.split(",");
     for (var i = 0; i < words.length; ++i) {
       var allCaps = words[i].toUpperCase();
       var firstCap = words[i].charAt(0).toUpperCase() + words[i].slice(1);
       obj[words[i]] = true;
       obj[allCaps] = true;
       obj[firstCap] = true;
     }
     return obj;
   }

   function metaHook(stream) {
     stream.eatWhile(/[\w\$_]/);
     return "meta";
   }

   var atoms = words$1("null"),
       hooks = {"`": metaHook, "$": metaHook},
       multiLineStrings = false;

   var keywords$1 = words$1("abs,access,after,alias,all,and,architecture,array,assert,attribute,begin,block," +
                        "body,buffer,bus,case,component,configuration,constant,disconnect,downto,else,elsif,end,end block,end case," +
                        "end component,end for,end generate,end if,end loop,end process,end record,end units,entity,exit,file,for," +
                        "function,generate,generic,generic map,group,guarded,if,impure,in,inertial,inout,is,label,library,linkage," +
                        "literal,loop,map,mod,nand,new,next,nor,null,of,on,open,or,others,out,package,package body,port,port map," +
                        "postponed,procedure,process,pure,range,record,register,reject,rem,report,return,rol,ror,select,severity,signal," +
                        "sla,sll,sra,srl,subtype,then,to,transport,type,unaffected,units,until,use,variable,wait,when,while,with,xnor,xor");

   var blockKeywords = words$1("architecture,entity,begin,case,port,else,elsif,end,for,function,if");

   var isOperatorChar = /[&|~><!\)\(*#%@+\/=?\:;}{,\.\^\-\[\]]/;
   var curPunc;

   function tokenBase$2(stream, state) {
     var ch = stream.next();
     if (hooks[ch]) {
       var result = hooks[ch](stream, state);
       if (result !== false) return result;
     }
     if (ch == '"') {
       state.tokenize = tokenString2(ch);
       return state.tokenize(stream, state);
     }
     if (ch == "'") {
       state.tokenize = tokenString$2(ch);
       return state.tokenize(stream, state);
     }
     if (/[\[\]{}\(\),;\:\.]/.test(ch)) {
       curPunc = ch;
       return null;
     }
     if (/[\d']/.test(ch)) {
       stream.eatWhile(/[\w\.']/);
       return "number";
     }
     if (ch == "-") {
       if (stream.eat("-")) {
         stream.skipToEnd();
         return "comment";
       }
     }
     if (isOperatorChar.test(ch)) {
       stream.eatWhile(isOperatorChar);
       return "operator";
     }
     stream.eatWhile(/[\w\$_]/);
     var cur = stream.current();
     if (keywords$1.propertyIsEnumerable(cur.toLowerCase())) {
       if (blockKeywords.propertyIsEnumerable(cur)) curPunc = "newstatement";
       return "keyword";
     }
     if (atoms.propertyIsEnumerable(cur)) return "atom";
     return "variable";
   }

   function tokenString$2(quote) {
     return function(stream, state) {
       var escaped = false, next, end = false;
       while ((next = stream.next()) != null) {
         if (next == quote && !escaped) {end = true; break;}
         escaped = !escaped && next == "--";
       }
       if (end || !(escaped || multiLineStrings))
         state.tokenize = tokenBase$2;
       return "string";
     };
   }
   function tokenString2(quote) {
     return function(stream, state) {
       var escaped = false, next, end = false;
       while ((next = stream.next()) != null) {
         if (next == quote && !escaped) {end = true; break;}
         escaped = !escaped && next == "--";
       }
       if (end || !(escaped || multiLineStrings))
         state.tokenize = tokenBase$2;
       return "string.special";
     };
   }

   function Context(indented, column, type, align, prev) {
     this.indented = indented;
     this.column = column;
     this.type = type;
     this.align = align;
     this.prev = prev;
   }
   function pushContext(state, col, type) {
     return state.context = new Context(state.indented, col, type, null, state.context);
   }
   function popContext(state) {
     var t = state.context.type;
     if (t == ")" || t == "]" || t == "}")
       state.indented = state.context.indented;
     return state.context = state.context.prev;
   }

   // Interface
   const vhdl = {
     name: "vhdl",
     startState: function(indentUnit) {
       return {
         tokenize: null,
         context: new Context(-indentUnit, 0, "top", false),
         indented: 0,
         startOfLine: true
       };
     },

     token: function(stream, state) {
       var ctx = state.context;
       if (stream.sol()) {
         if (ctx.align == null) ctx.align = false;
         state.indented = stream.indentation();
         state.startOfLine = true;
       }
       if (stream.eatSpace()) return null;
       curPunc = null;
       var style = (state.tokenize || tokenBase$2)(stream, state);
       if (style == "comment" || style == "meta") return style;
       if (ctx.align == null) ctx.align = true;

       if ((curPunc == ";" || curPunc == ":") && ctx.type == "statement") popContext(state);
       else if (curPunc == "{") pushContext(state, stream.column(), "}");
       else if (curPunc == "[") pushContext(state, stream.column(), "]");
       else if (curPunc == "(") pushContext(state, stream.column(), ")");
       else if (curPunc == "}") {
         while (ctx.type == "statement") ctx = popContext(state);
         if (ctx.type == "}") ctx = popContext(state);
         while (ctx.type == "statement") ctx = popContext(state);
       }
       else if (curPunc == ctx.type) popContext(state);
       else if (ctx.type == "}" || ctx.type == "top" || (ctx.type == "statement" && curPunc == "newstatement"))
         pushContext(state, stream.column(), "statement");
       state.startOfLine = false;
       return style;
     },

     indent: function(state, textAfter, cx) {
       if (state.tokenize != tokenBase$2 && state.tokenize != null) return 0;
       var firstChar = textAfter && textAfter.charAt(0), ctx = state.context, closing = firstChar == ctx.type;
       if (ctx.type == "statement") return ctx.indented + (firstChar == "{" ? 0 : cx.unit);
       else if (ctx.align) return ctx.column + (closing ? 0 : 1);
       else return ctx.indented + (closing ? 0 : cx.unit);
     },

     languageData: {
       indentOnInput: /^\s*[{}]$/,
       commentTokens: {line: "--"}
     }
   };

   var vhdl$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      vhdl: vhdl
   });

   // The keywords object is set to the result of this self executing
   // function. Each keyword is a property of the keywords object whose
   // value is {type: atype, style: astyle}
   var keywords = function(){
     // convenience functions used to build keywords object
     function kw(type) {return {type: type, style: "keyword"};}
     var operator = kw("operator")
     , atom = {type: "atom", style: "atom"}
     , punctuation = {type: "punctuation", style: null}
     , qualifier = {type: "axis_specifier", style: "qualifier"};

     // kwObj is what is return from this function at the end
     var kwObj = {
       ',': punctuation
     };

     // a list of 'basic' keywords. For each add a property to kwObj with the value of
     // {type: basic[i], style: "keyword"} e.g. 'after' --> {type: "after", style: "keyword"}
     var basic = ['after', 'all', 'allowing', 'ancestor', 'ancestor-or-self', 'any', 'array', 'as',
                  'ascending', 'at', 'attribute', 'base-uri', 'before', 'boundary-space', 'by', 'case', 'cast',
                  'castable', 'catch', 'child', 'collation', 'comment', 'construction', 'contains', 'content',
                  'context', 'copy', 'copy-namespaces', 'count', 'decimal-format', 'declare', 'default', 'delete',
                  'descendant', 'descendant-or-self', 'descending', 'diacritics', 'different', 'distance',
                  'document', 'document-node', 'element', 'else', 'empty', 'empty-sequence', 'encoding', 'end',
                  'entire', 'every', 'exactly', 'except', 'external', 'first', 'following', 'following-sibling',
                  'for', 'from', 'ftand', 'ftnot', 'ft-option', 'ftor', 'function', 'fuzzy', 'greatest', 'group',
                  'if', 'import', 'in', 'inherit', 'insensitive', 'insert', 'instance', 'intersect', 'into',
                  'invoke', 'is', 'item', 'language', 'last', 'lax', 'least', 'let', 'levels', 'lowercase', 'map',
                  'modify', 'module', 'most', 'namespace', 'next', 'no', 'node', 'nodes', 'no-inherit',
                  'no-preserve', 'not', 'occurs', 'of', 'only', 'option', 'order', 'ordered', 'ordering',
                  'paragraph', 'paragraphs', 'parent', 'phrase', 'preceding', 'preceding-sibling', 'preserve',
                  'previous', 'processing-instruction', 'relationship', 'rename', 'replace', 'return',
                  'revalidation', 'same', 'satisfies', 'schema', 'schema-attribute', 'schema-element', 'score',
                  'self', 'sensitive', 'sentence', 'sentences', 'sequence', 'skip', 'sliding', 'some', 'stable',
                  'start', 'stemming', 'stop', 'strict', 'strip', 'switch', 'text', 'then', 'thesaurus', 'times',
                  'to', 'transform', 'treat', 'try', 'tumbling', 'type', 'typeswitch', 'union', 'unordered',
                  'update', 'updating', 'uppercase', 'using', 'validate', 'value', 'variable', 'version',
                  'weight', 'when', 'where', 'wildcards', 'window', 'with', 'without', 'word', 'words', 'xquery'];
     for(var i=0, l=basic.length; i < l; i++) { kwObj[basic[i]] = kw(basic[i]);}
     // a list of types. For each add a property to kwObj with the value of
     // {type: "atom", style: "atom"}
     var types = ['xs:anyAtomicType', 'xs:anySimpleType', 'xs:anyType', 'xs:anyURI',
                  'xs:base64Binary', 'xs:boolean', 'xs:byte', 'xs:date', 'xs:dateTime', 'xs:dateTimeStamp',
                  'xs:dayTimeDuration', 'xs:decimal', 'xs:double', 'xs:duration', 'xs:ENTITIES', 'xs:ENTITY',
                  'xs:float', 'xs:gDay', 'xs:gMonth', 'xs:gMonthDay', 'xs:gYear', 'xs:gYearMonth', 'xs:hexBinary',
                  'xs:ID', 'xs:IDREF', 'xs:IDREFS', 'xs:int', 'xs:integer', 'xs:item', 'xs:java', 'xs:language',
                  'xs:long', 'xs:Name', 'xs:NCName', 'xs:negativeInteger', 'xs:NMTOKEN', 'xs:NMTOKENS',
                  'xs:nonNegativeInteger', 'xs:nonPositiveInteger', 'xs:normalizedString', 'xs:NOTATION',
                  'xs:numeric', 'xs:positiveInteger', 'xs:precisionDecimal', 'xs:QName', 'xs:short', 'xs:string',
                  'xs:time', 'xs:token', 'xs:unsignedByte', 'xs:unsignedInt', 'xs:unsignedLong',
                  'xs:unsignedShort', 'xs:untyped', 'xs:untypedAtomic', 'xs:yearMonthDuration'];
     for(var i=0, l=types.length; i < l; i++) { kwObj[types[i]] = atom;}
     // each operator will add a property to kwObj with value of {type: "operator", style: "keyword"}
     var operators = ['eq', 'ne', 'lt', 'le', 'gt', 'ge', ':=', '=', '>', '>=', '<', '<=', '.', '|', '?', 'and', 'or', 'div', 'idiv', 'mod', '*', '/', '+', '-'];
     for(var i=0, l=operators.length; i < l; i++) { kwObj[operators[i]] = operator;}
     // each axis_specifiers will add a property to kwObj with value of {type: "axis_specifier", style: "qualifier"}
     var axis_specifiers = ["self::", "attribute::", "child::", "descendant::", "descendant-or-self::", "parent::",
                            "ancestor::", "ancestor-or-self::", "following::", "preceding::", "following-sibling::", "preceding-sibling::"];
     for(var i=0, l=axis_specifiers.length; i < l; i++) { kwObj[axis_specifiers[i]] = qualifier; }
     return kwObj;
   }();

   function chain(stream, state, f) {
     state.tokenize = f;
     return f(stream, state);
   }

   // the primary mode tokenizer
   function tokenBase$1(stream, state) {
     var ch = stream.next(),
         mightBeFunction = false,
         isEQName = isEQNameAhead(stream);

     // an XML tag (if not in some sub, chained tokenizer)
     if (ch == "<") {
       if(stream.match("!--", true))
         return chain(stream, state, tokenXMLComment);

       if(stream.match("![CDATA", false)) {
         state.tokenize = tokenCDATA;
         return "tag";
       }

       if(stream.match("?", false)) {
         return chain(stream, state, tokenPreProcessing);
       }

       var isclose = stream.eat("/");
       stream.eatSpace();
       var tagName = "", c;
       while ((c = stream.eat(/[^\s\u00a0=<>\"\'\/?]/))) tagName += c;

       return chain(stream, state, tokenTag(tagName, isclose));
     }
     // start code block
     else if(ch == "{") {
       pushStateStack(state, { type: "codeblock"});
       return null;
     }
     // end code block
     else if(ch == "}") {
       popStateStack(state);
       return null;
     }
     // if we're in an XML block
     else if(isInXmlBlock(state)) {
       if(ch == ">")
         return "tag";
       else if(ch == "/" && stream.eat(">")) {
         popStateStack(state);
         return "tag";
       }
       else
         return "variable";
     }
     // if a number
     else if (/\d/.test(ch)) {
       stream.match(/^\d*(?:\.\d*)?(?:E[+\-]?\d+)?/);
       return "atom";
     }
     // comment start
     else if (ch === "(" && stream.eat(":")) {
       pushStateStack(state, { type: "comment"});
       return chain(stream, state, tokenComment$1);
     }
     // quoted string
     else if (!isEQName && (ch === '"' || ch === "'"))
       return chain(stream, state, tokenString$1(ch));
     // variable
     else if(ch === "$") {
       return chain(stream, state, tokenVariable);
     }
     // assignment
     else if(ch ===":" && stream.eat("=")) {
       return "keyword";
     }
     // open paren
     else if(ch === "(") {
       pushStateStack(state, { type: "paren"});
       return null;
     }
     // close paren
     else if(ch === ")") {
       popStateStack(state);
       return null;
     }
     // open paren
     else if(ch === "[") {
       pushStateStack(state, { type: "bracket"});
       return null;
     }
     // close paren
     else if(ch === "]") {
       popStateStack(state);
       return null;
     }
     else {
       var known = keywords.propertyIsEnumerable(ch) && keywords[ch];

       // if there's a EQName ahead, consume the rest of the string portion, it's likely a function
       if(isEQName && ch === '\"') while(stream.next() !== '"'){}
       if(isEQName && ch === '\'') while(stream.next() !== '\''){}

       // gobble up a word if the character is not known
       if(!known) stream.eatWhile(/[\w\$_-]/);

       // gobble a colon in the case that is a lib func type call fn:doc
       var foundColon = stream.eat(":");

       // if there's not a second colon, gobble another word. Otherwise, it's probably an axis specifier
       // which should get matched as a keyword
       if(!stream.eat(":") && foundColon) {
         stream.eatWhile(/[\w\$_-]/);
       }
       // if the next non whitespace character is an open paren, this is probably a function (if not a keyword of other sort)
       if(stream.match(/^[ \t]*\(/, false)) {
         mightBeFunction = true;
       }
       // is the word a keyword?
       var word = stream.current();
       known = keywords.propertyIsEnumerable(word) && keywords[word];

       // if we think it's a function call but not yet known,
       // set style to variable for now for lack of something better
       if(mightBeFunction && !known) known = {type: "function_call", style: "def"};

       // if the previous word was element, attribute, axis specifier, this word should be the name of that
       if(isInXmlConstructor(state)) {
         popStateStack(state);
         return "variable";
       }
       // as previously checked, if the word is element,attribute, axis specifier, call it an "xmlconstructor" and
       // push the stack so we know to look for it on the next word
       if(word == "element" || word == "attribute" || known.type == "axis_specifier") pushStateStack(state, {type: "xmlconstructor"});

       // if the word is known, return the details of that else just call this a generic 'word'
       return known ? known.style : "variable";
     }
   }

   // handle comments, including nested
   function tokenComment$1(stream, state) {
     var maybeEnd = false, maybeNested = false, nestedCount = 0, ch;
     while (ch = stream.next()) {
       if (ch == ")" && maybeEnd) {
         if(nestedCount > 0)
           nestedCount--;
         else {
           popStateStack(state);
           break;
         }
       }
       else if(ch == ":" && maybeNested) {
         nestedCount++;
       }
       maybeEnd = (ch == ":");
       maybeNested = (ch == "(");
     }

     return "comment";
   }

   // tokenizer for string literals
   // optionally pass a tokenizer function to set state.tokenize back to when finished
   function tokenString$1(quote, f) {
     return function(stream, state) {
       var ch;

       if(isInString(state) && stream.current() == quote) {
         popStateStack(state);
         if(f) state.tokenize = f;
         return "string";
       }

       pushStateStack(state, { type: "string", name: quote, tokenize: tokenString$1(quote, f) });

       // if we're in a string and in an XML block, allow an embedded code block
       if(stream.match("{", false) && isInXmlAttributeBlock(state)) {
         state.tokenize = tokenBase$1;
         return "string";
       }


       while (ch = stream.next()) {
         if (ch ==  quote) {
           popStateStack(state);
           if(f) state.tokenize = f;
           break;
         }
         else {
           // if we're in a string and in an XML block, allow an embedded code block in an attribute
           if(stream.match("{", false) && isInXmlAttributeBlock(state)) {
             state.tokenize = tokenBase$1;
             return "string";
           }

         }
       }

       return "string";
     };
   }

   // tokenizer for variables
   function tokenVariable(stream, state) {
     var isVariableChar = /[\w\$_-]/;

     // a variable may start with a quoted EQName so if the next character is quote, consume to the next quote
     if(stream.eat("\"")) {
       while(stream.next() !== '\"'){}    stream.eat(":");
     } else {
       stream.eatWhile(isVariableChar);
       if(!stream.match(":=", false)) stream.eat(":");
     }
     stream.eatWhile(isVariableChar);
     state.tokenize = tokenBase$1;
     return "variable";
   }

   // tokenizer for XML tags
   function tokenTag(name, isclose) {
     return function(stream, state) {
       stream.eatSpace();
       if(isclose && stream.eat(">")) {
         popStateStack(state);
         state.tokenize = tokenBase$1;
         return "tag";
       }
       // self closing tag without attributes?
       if(!stream.eat("/"))
         pushStateStack(state, { type: "tag", name: name, tokenize: tokenBase$1});
       if(!stream.eat(">")) {
         state.tokenize = tokenAttribute;
         return "tag";
       }
       else {
         state.tokenize = tokenBase$1;
       }
       return "tag";
     };
   }

   // tokenizer for XML attributes
   function tokenAttribute(stream, state) {
     var ch = stream.next();

     if(ch == "/" && stream.eat(">")) {
       if(isInXmlAttributeBlock(state)) popStateStack(state);
       if(isInXmlBlock(state)) popStateStack(state);
       return "tag";
     }
     if(ch == ">") {
       if(isInXmlAttributeBlock(state)) popStateStack(state);
       return "tag";
     }
     if(ch == "=")
       return null;
     // quoted string
     if (ch == '"' || ch == "'")
       return chain(stream, state, tokenString$1(ch, tokenAttribute));

     if(!isInXmlAttributeBlock(state))
       pushStateStack(state, { type: "attribute", tokenize: tokenAttribute});

     stream.eat(/[a-zA-Z_:]/);
     stream.eatWhile(/[-a-zA-Z0-9_:.]/);
     stream.eatSpace();

     // the case where the attribute has not value and the tag was closed
     if(stream.match(">", false) || stream.match("/", false)) {
       popStateStack(state);
       state.tokenize = tokenBase$1;
     }

     return "attribute";
   }

   // handle comments, including nested
   function tokenXMLComment(stream, state) {
     var ch;
     while (ch = stream.next()) {
       if (ch == "-" && stream.match("->", true)) {
         state.tokenize = tokenBase$1;
         return "comment";
       }
     }
   }


   // handle CDATA
   function tokenCDATA(stream, state) {
     var ch;
     while (ch = stream.next()) {
       if (ch == "]" && stream.match("]", true)) {
         state.tokenize = tokenBase$1;
         return "comment";
       }
     }
   }

   // handle preprocessing instructions
   function tokenPreProcessing(stream, state) {
     var ch;
     while (ch = stream.next()) {
       if (ch == "?" && stream.match(">", true)) {
         state.tokenize = tokenBase$1;
         return "processingInstruction";
       }
     }
   }


   // functions to test the current context of the state
   function isInXmlBlock(state) { return isIn(state, "tag"); }
   function isInXmlAttributeBlock(state) { return isIn(state, "attribute"); }
   function isInXmlConstructor(state) { return isIn(state, "xmlconstructor"); }
   function isInString(state) { return isIn(state, "string"); }

   function isEQNameAhead(stream) {
     // assume we've already eaten a quote (")
     if(stream.current() === '"')
       return stream.match(/^[^\"]+\"\:/, false);
     else if(stream.current() === '\'')
       return stream.match(/^[^\"]+\'\:/, false);
     else
       return false;
   }

   function isIn(state, type) {
     return (state.stack.length && state.stack[state.stack.length - 1].type == type);
   }

   function pushStateStack(state, newState) {
     state.stack.push(newState);
   }

   function popStateStack(state) {
     state.stack.pop();
     var reinstateTokenize = state.stack.length && state.stack[state.stack.length-1].tokenize;
     state.tokenize = reinstateTokenize || tokenBase$1;
   }

   // the interface for the mode API
   const xQuery = {
     name: "xquery",
     startState: function() {
       return {
         tokenize: tokenBase$1,
         cc: [],
         stack: []
       };
     },

     token: function(stream, state) {
       if (stream.eatSpace()) return null;
       var style = state.tokenize(stream, state);
       return style;
     },

     languageData: {
       commentTokens: {block: {open: "(:", close: ":)"}}
     }
   };

   var xquery = /*#__PURE__*/Object.freeze({
      __proto__: null,
      xQuery: xQuery
   });

   function words(str) {
     var obj = {}, words = str.split(" ");
     for (var i = 0; i < words.length; ++i) obj[words[i]] = true;
     return obj;
   }

   var bodiedOps = words("Assert BackQuote D Defun Deriv For ForEach FromFile " +
                         "FromString Function Integrate InverseTaylor Limit " +
                         "LocalSymbols Macro MacroRule MacroRulePattern " +
                         "NIntegrate Rule RulePattern Subst TD TExplicitSum " +
                         "TSum Taylor Taylor1 Taylor2 Taylor3 ToFile " +
                         "ToStdout ToString TraceRule Until While");

   // patterns
   var pFloatForm  = "(?:(?:\\.\\d+|\\d+\\.\\d*|\\d+)(?:[eE][+-]?\\d+)?)";
   var pIdentifier = "(?:[a-zA-Z\\$'][a-zA-Z0-9\\$']*)";

   // regular expressions
   var reFloatForm    = new RegExp(pFloatForm);
   var reIdentifier   = new RegExp(pIdentifier);
   var rePattern      = new RegExp(pIdentifier + "?_" + pIdentifier);
   var reFunctionLike = new RegExp(pIdentifier + "\\s*\\(");

   function tokenBase(stream, state) {
     var ch;

     // get next character
     ch = stream.next();

     // string
     if (ch === '"') {
       state.tokenize = tokenString;
       return state.tokenize(stream, state);
     }

     // comment
     if (ch === '/') {
       if (stream.eat('*')) {
         state.tokenize = tokenComment;
         return state.tokenize(stream, state);
       }
       if (stream.eat("/")) {
         stream.skipToEnd();
         return "comment";
       }
     }

     // go back one character
     stream.backUp(1);

     // update scope info
     var m = stream.match(/^(\w+)\s*\(/, false);
     if (m !== null && bodiedOps.hasOwnProperty(m[1]))
       state.scopes.push('bodied');

     var scope = currentScope(state);

     if (scope === 'bodied' && ch === '[')
       state.scopes.pop();

     if (ch === '[' || ch === '{' || ch === '(')
       state.scopes.push(ch);

     scope = currentScope(state);

     if (scope === '[' && ch === ']' ||
         scope === '{' && ch === '}' ||
         scope === '(' && ch === ')')
       state.scopes.pop();

     if (ch === ';') {
       while (scope === 'bodied') {
         state.scopes.pop();
         scope = currentScope(state);
       }
     }

     // look for ordered rules
     if (stream.match(/\d+ *#/, true, false)) {
       return 'qualifier';
     }

     // look for numbers
     if (stream.match(reFloatForm, true, false)) {
       return 'number';
     }

     // look for placeholders
     if (stream.match(rePattern, true, false)) {
       return 'variableName.special';
     }

     // match all braces separately
     if (stream.match(/(?:\[|\]|{|}|\(|\))/, true, false)) {
       return 'bracket';
     }

     // literals looking like function calls
     if (stream.match(reFunctionLike, true, false)) {
       stream.backUp(1);
       return 'variableName.function';
     }

     // all other identifiers
     if (stream.match(reIdentifier, true, false)) {
       return 'variable';
     }

     // operators; note that operators like @@ or /; are matched separately for each symbol.
     if (stream.match(/(?:\\|\+|\-|\*|\/|,|;|\.|:|@|~|=|>|<|&|\||_|`|'|\^|\?|!|%|#)/, true, false)) {
       return 'operator';
     }

     // everything else is an error
     return 'error';
   }

   function tokenString(stream, state) {
     var next, end = false, escaped = false;
     while ((next = stream.next()) != null) {
       if (next === '"' && !escaped) {
         end = true;
         break;
       }
       escaped = !escaped && next === '\\';
     }
     if (end && !escaped) {
       state.tokenize = tokenBase;
     }
     return 'string';
   }
   function tokenComment(stream, state) {
     var prev, next;
     while((next = stream.next()) != null) {
       if (prev === '*' && next === '/') {
         state.tokenize = tokenBase;
         break;
       }
       prev = next;
     }
     return 'comment';
   }

   function currentScope(state) {
     var scope = null;
     if (state.scopes.length > 0)
       scope = state.scopes[state.scopes.length - 1];
     return scope;
   }

   const yacas = {
     name: "yacas",
     startState: function() {
       return {
         tokenize: tokenBase,
         scopes: []
       };
     },
     token: function(stream, state) {
       if (stream.eatSpace()) return null;
       return state.tokenize(stream, state);
     },
     indent: function(state, textAfter, cx) {
       if (state.tokenize !== tokenBase && state.tokenize !== null)
         return null;

       var delta = 0;
       if (textAfter === ']' || textAfter === '];' ||
           textAfter === '}' || textAfter === '};' ||
           textAfter === ');')
         delta = -1;

       return (state.scopes.length + delta) * cx.unit;
     },

     languageData: {
       electricInput: /[{}\[\]()\;]/,
       commentTokens: {line: "//", block: {open: "/*", close: "*/"}}
     }
   };

   var yacas$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      yacas: yacas
   });

   var cons = ['true', 'false', 'on', 'off', 'yes', 'no'];
   var keywordRegex = new RegExp("\\b(("+cons.join(")|(")+"))$", 'i');

   const yaml = {
     name: "yaml",
     token: function(stream, state) {
       var ch = stream.peek();
       var esc = state.escaped;
       state.escaped = false;
       /* comments */
       if (ch == "#" && (stream.pos == 0 || /\s/.test(stream.string.charAt(stream.pos - 1)))) {
         stream.skipToEnd();
         return "comment";
       }

       if (stream.match(/^('([^']|\\.)*'?|"([^"]|\\.)*"?)/))
         return "string";

       if (state.literal && stream.indentation() > state.keyCol) {
         stream.skipToEnd(); return "string";
       } else if (state.literal) { state.literal = false; }
       if (stream.sol()) {
         state.keyCol = 0;
         state.pair = false;
         state.pairStart = false;
         /* document start */
         if(stream.match('---')) { return "def"; }
         /* document end */
         if (stream.match('...')) { return "def"; }
         /* array list item */
         if (stream.match(/^\s*-\s+/)) { return 'meta'; }
       }
       /* inline pairs/lists */
       if (stream.match(/^(\{|\}|\[|\])/)) {
         if (ch == '{')
           state.inlinePairs++;
         else if (ch == '}')
           state.inlinePairs--;
         else if (ch == '[')
           state.inlineList++;
         else
           state.inlineList--;
         return 'meta';
       }

       /* list separator */
       if (state.inlineList > 0 && !esc && ch == ',') {
         stream.next();
         return 'meta';
       }
       /* pairs separator */
       if (state.inlinePairs > 0 && !esc && ch == ',') {
         state.keyCol = 0;
         state.pair = false;
         state.pairStart = false;
         stream.next();
         return 'meta';
       }

       /* start of value of a pair */
       if (state.pairStart) {
         /* block literals */
         if (stream.match(/^\s*(\||\>)\s*/)) { state.literal = true; return 'meta'; }      /* references */
         if (stream.match(/^\s*(\&|\*)[a-z0-9\._-]+\b/i)) { return 'variable'; }
         /* numbers */
         if (state.inlinePairs == 0 && stream.match(/^\s*-?[0-9\.\,]+\s?$/)) { return 'number'; }
         if (state.inlinePairs > 0 && stream.match(/^\s*-?[0-9\.\,]+\s?(?=(,|}))/)) { return 'number'; }
         /* keywords */
         if (stream.match(keywordRegex)) { return 'keyword'; }
       }

       /* pairs (associative arrays) -> key */
       if (!state.pair && stream.match(/^\s*(?:[,\[\]{}&*!|>'"%@`][^\s'":]|[^,\[\]{}#&*!|>'"%@`])[^#]*?(?=\s*:($|\s))/)) {
         state.pair = true;
         state.keyCol = stream.indentation();
         return "atom";
       }
       if (state.pair && stream.match(/^:\s*/)) { state.pairStart = true; return 'meta'; }

       /* nothing found, continue */
       state.pairStart = false;
       state.escaped = (ch == '\\');
       stream.next();
       return null;
     },
     startState: function() {
       return {
         pair: false,
         pairStart: false,
         keyCol: 0,
         inlinePairs: 0,
         inlineList: 0,
         literal: false,
         escaped: false
       };
     },
     languageData: {
       commentTokens: {line: "#"}
     }
   };

   var yaml$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      yaml: yaml
   });

   function mkZ80(ez80) {
     var keywords1, keywords2;
     if (ez80) {
       keywords1 = /^(exx?|(ld|cp)([di]r?)?|[lp]ea|pop|push|ad[cd]|cpl|daa|dec|inc|neg|sbc|sub|and|bit|[cs]cf|x?or|res|set|r[lr]c?a?|r[lr]d|s[lr]a|srl|djnz|nop|[de]i|halt|im|in([di]mr?|ir?|irx|2r?)|ot(dmr?|[id]rx|imr?)|out(0?|[di]r?|[di]2r?)|tst(io)?|slp)(\.([sl]?i)?[sl])?\b/i;
       keywords2 = /^(((call|j[pr]|rst|ret[in]?)(\.([sl]?i)?[sl])?)|(rs|st)mix)\b/i;
     } else {
       keywords1 = /^(exx?|(ld|cp|in)([di]r?)?|pop|push|ad[cd]|cpl|daa|dec|inc|neg|sbc|sub|and|bit|[cs]cf|x?or|res|set|r[lr]c?a?|r[lr]d|s[lr]a|srl|djnz|nop|rst|[de]i|halt|im|ot[di]r|out[di]?)\b/i;
       keywords2 = /^(call|j[pr]|ret[in]?|b_?(call|jump))\b/i;
     }

     var variables1 = /^(af?|bc?|c|de?|e|hl?|l|i[xy]?|r|sp)\b/i;
     var variables2 = /^(n?[zc]|p[oe]?|m)\b/i;
     var errors = /^([hl][xy]|i[xy][hl]|slia|sll)\b/i;
     var numbers = /^([\da-f]+h|[0-7]+o|[01]+b|\d+d?)\b/i;

     return {
       name: "z80",
       startState: function() {
         return {
           context: 0
         };
       },
       token: function(stream, state) {
         if (!stream.column())
           state.context = 0;

         if (stream.eatSpace())
           return null;

         var w;

         if (stream.eatWhile(/\w/)) {
           if (ez80 && stream.eat('.')) {
             stream.eatWhile(/\w/);
           }
           w = stream.current();

           if (stream.indentation()) {
             if ((state.context == 1 || state.context == 4) && variables1.test(w)) {
               state.context = 4;
               return 'variable';
             }

             if (state.context == 2 && variables2.test(w)) {
               state.context = 4;
               return 'variableName.special';
             }

             if (keywords1.test(w)) {
               state.context = 1;
               return 'keyword';
             } else if (keywords2.test(w)) {
               state.context = 2;
               return 'keyword';
             } else if (state.context == 4 && numbers.test(w)) {
               return 'number';
             }

             if (errors.test(w))
               return 'error';
           } else if (stream.match(numbers)) {
             return 'number';
           } else {
             return null;
           }
         } else if (stream.eat(';')) {
           stream.skipToEnd();
           return 'comment';
         } else if (stream.eat('"')) {
           while (w = stream.next()) {
             if (w == '"')
               break;

             if (w == '\\')
               stream.next();
           }
           return 'string';
         } else if (stream.eat('\'')) {
           if (stream.match(/\\?.'/))
             return 'number';
         } else if (stream.eat('.') || stream.sol() && stream.eat('#')) {
           state.context = 5;

           if (stream.eatWhile(/\w/))
             return 'def';
         } else if (stream.eat('$')) {
           if (stream.eatWhile(/[\da-f]/i))
             return 'number';
         } else if (stream.eat('%')) {
           if (stream.eatWhile(/[01]/))
             return 'number';
         } else {
           stream.next();
         }
         return null;
       }
     };
   }
   const z80 = mkZ80(false);
   const ez80 = mkZ80(true);

   var z80$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      ez80: ez80,
      z80: z80
   });

   function mkParser(lang) {
     return {
       name: "mscgen",
       startState: startStateFn,
       copyState: copyStateFn,
       token: produceTokenFunction(lang),
       languageData: {
         commentTokens: {line: "#", block: {open: "/*", close: "*/"}}
       }
     }
   }

   const mscgen = mkParser({
     "keywords" : ["msc"],
     "options" : ["hscale", "width", "arcgradient", "wordwraparcs"],
     "constants" : ["true", "false", "on", "off"],
     "attributes" : ["label", "idurl", "id", "url", "linecolor", "linecolour", "textcolor", "textcolour", "textbgcolor", "textbgcolour", "arclinecolor", "arclinecolour", "arctextcolor", "arctextcolour", "arctextbgcolor", "arctextbgcolour", "arcskip"],
     "brackets" : ["\\{", "\\}"], // [ and  ] are brackets too, but these get handled in with lists
     "arcsWords" : ["note", "abox", "rbox", "box"],
     "arcsOthers" : ["\\|\\|\\|", "\\.\\.\\.", "---", "--", "<->", "==", "<<=>>", "<=>", "\\.\\.", "<<>>", "::", "<:>", "->", "=>>", "=>", ">>", ":>", "<-", "<<=", "<=", "<<", "<:", "x-", "-x"],
     "singlecomment" : ["//", "#"],
     "operators" : ["="]
   });

   const msgenny = mkParser({
     "keywords" : null,
     "options" : ["hscale", "width", "arcgradient", "wordwraparcs", "wordwrapentities", "watermark"],
     "constants" : ["true", "false", "on", "off", "auto"],
     "attributes" : null,
     "brackets" : ["\\{", "\\}"],
     "arcsWords" : ["note", "abox", "rbox", "box", "alt", "else", "opt", "break", "par", "seq", "strict", "neg", "critical", "ignore", "consider", "assert", "loop", "ref", "exc"],
     "arcsOthers" : ["\\|\\|\\|", "\\.\\.\\.", "---", "--", "<->", "==", "<<=>>", "<=>", "\\.\\.", "<<>>", "::", "<:>", "->", "=>>", "=>", ">>", ":>", "<-", "<<=", "<=", "<<", "<:", "x-", "-x"],
     "singlecomment" : ["//", "#"],
     "operators" : ["="]
   });

   const xu = mkParser({
     "keywords" : ["msc", "xu"],
     "options" : ["hscale", "width", "arcgradient", "wordwraparcs", "wordwrapentities", "watermark"],
     "constants" : ["true", "false", "on", "off", "auto"],
     "attributes" : ["label", "idurl", "id", "url", "linecolor", "linecolour", "textcolor", "textcolour", "textbgcolor", "textbgcolour", "arclinecolor", "arclinecolour", "arctextcolor", "arctextcolour", "arctextbgcolor", "arctextbgcolour", "arcskip", "title", "deactivate", "activate", "activation"],
     "brackets" : ["\\{", "\\}"],  // [ and  ] are brackets too, but these get handled in with lists
     "arcsWords" : ["note", "abox", "rbox", "box", "alt", "else", "opt", "break", "par", "seq", "strict", "neg", "critical", "ignore", "consider", "assert", "loop", "ref", "exc"],
     "arcsOthers" : ["\\|\\|\\|", "\\.\\.\\.", "---", "--", "<->", "==", "<<=>>", "<=>", "\\.\\.", "<<>>", "::", "<:>", "->", "=>>", "=>", ">>", ":>", "<-", "<<=", "<=", "<<", "<:", "x-", "-x"],
     "singlecomment" : ["//", "#"],
     "operators" : ["="]
   });

   function wordRegexpBoundary(pWords) {
     return new RegExp("^\\b(" + pWords.join("|") + ")\\b", "i");
   }

   function wordRegexp(pWords) {
     return new RegExp("^(?:" + pWords.join("|") + ")", "i");
   }

   function startStateFn() {
     return {
       inComment : false,
       inString : false,
       inAttributeList : false,
       inScript : false
     };
   }

   function copyStateFn(pState) {
     return {
       inComment : pState.inComment,
       inString : pState.inString,
       inAttributeList : pState.inAttributeList,
       inScript : pState.inScript
     };
   }

   function produceTokenFunction(pConfig) {
     return function(pStream, pState) {
       if (pStream.match(wordRegexp(pConfig.brackets), true, true)) {
         return "bracket";
       }
       /* comments */
       if (!pState.inComment) {
         if (pStream.match(/\/\*[^\*\/]*/, true, true)) {
           pState.inComment = true;
           return "comment";
         }
         if (pStream.match(wordRegexp(pConfig.singlecomment), true, true)) {
           pStream.skipToEnd();
           return "comment";
         }
       }
       if (pState.inComment) {
         if (pStream.match(/[^\*\/]*\*\//, true, true))
           pState.inComment = false;
         else
           pStream.skipToEnd();
         return "comment";
       }
       /* strings */
       if (!pState.inString && pStream.match(/\"(\\\"|[^\"])*/, true, true)) {
         pState.inString = true;
         return "string";
       }
       if (pState.inString) {
         if (pStream.match(/[^\"]*\"/, true, true))
           pState.inString = false;
         else
           pStream.skipToEnd();
         return "string";
       }
       /* keywords & operators */
       if (!!pConfig.keywords && pStream.match(wordRegexpBoundary(pConfig.keywords), true, true))
         return "keyword";

       if (pStream.match(wordRegexpBoundary(pConfig.options), true, true))
         return "keyword";

       if (pStream.match(wordRegexpBoundary(pConfig.arcsWords), true, true))
         return "keyword";

       if (pStream.match(wordRegexp(pConfig.arcsOthers), true, true))
         return "keyword";

       if (!!pConfig.operators && pStream.match(wordRegexp(pConfig.operators), true, true))
         return "operator";

       if (!!pConfig.constants && pStream.match(wordRegexp(pConfig.constants), true, true))
         return "variable";

       /* attribute lists */
       if (!pConfig.inAttributeList && !!pConfig.attributes && pStream.match('[', true, true)) {
         pConfig.inAttributeList = true;
         return "bracket";
       }
       if (pConfig.inAttributeList) {
         if (pConfig.attributes !== null && pStream.match(wordRegexpBoundary(pConfig.attributes), true, true)) {
           return "attribute";
         }
         if (pStream.match(']', true, true)) {
           pConfig.inAttributeList = false;
           return "bracket";
         }
       }

       pStream.next();
       return null
     };
   }

   var mscgen$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      mscgen: mscgen,
      msgenny: msgenny,
      xu: xu
   });

   // This file was generated by lezer-generator. You probably shouldn't edit it.
   const parser$1 = /*@__PURE__*/LRParser.deserialize({
     version: 14,
     states: "%pOVOWOOObQPOOOpOSO'#C_OOOO'#Cp'#CpQVOWOOQxQPOOO!TQQOOQ!YQPOOOOOO,58y,58yO!_OSO,58yOOOO-E6n-E6nO!dQQO'#CqQ{QPOOO!iQPOOQ{QPOOO!qQPOOOOOO1G.e1G.eOOQO,59],59]OOQO-E6o-E6oO!yOpO'#CiO#RO`O'#CiQOQPOOO#ZO#tO'#CmO#fO!bO'#CmOOQO,59T,59TO#qOpO,59TO#vO`O,59TOOOO'#Cr'#CrO#{O#tO,59XOOQO,59X,59XOOOO'#Cs'#CsO$WO!bO,59XOOQO1G.o1G.oOOOO-E6p-E6pOOQO1G.s1G.sOOOO-E6q-E6q",
     stateData: "$g~OjOS~OQROUROkQO~OWTOXUOZUO`VO~OSXOTWO~OXUO[]OlZO~OY^O~O[_O~OT`O~OYaO~OmcOodO~OmfOogO~O^iOnhO~O_jOphO~ObkOqkOrmO~OcnOsnOtmO~OnpO~OppO~ObkOqkOrrO~OcnOsnOtrO~OWX`~",
     goto: "!^hPPPiPPPPPPPPPmPPPpPPsy!Q!WTROSRe]Re_QSORYSS[T^Rb[QlfRqlQogRso",
     nodeNames: "⚠ Content Text Interpolation InterpolationContent }} Entity Attribute VueAttributeName : Identifier @ Is ScriptAttributeValue AttributeScript AttributeScript AttributeName AttributeValue Entity Entity",
     maxTerm: 36,
     skippedNodes: [0],
     repeatNodeCount: 4,
     tokenData: "'y~RdXY!aYZ!a]^!apq!ars!rwx!w}!O!|!O!P#t!Q![#y![!]$s!_!`%g!b!c%l!c!}#y#R#S#y#T#j#y#j#k%q#k#o#y%W;'S#y;'S;:j$m<%lO#y~!fSj~XY!aYZ!a]^!apq!a~!wOm~~!|Oo~!b#RX`!b}!O!|!Q![!|![!]!|!c!}!|#R#S!|#T#o!|%W;'S!|;'S;:j#n<%lO!|!b#qP;=`<%l!|~#yOl~%W$QXY#t`!b}!O!|!Q![#y![!]!|!c!}#y#R#S#y#T#o#y%W;'S#y;'S;:j$m<%lO#y%W$pP;=`<%l#y~$zXX~`!b}!O!|!Q![!|![!]!|!c!}!|#R#S!|#T#o!|%W;'S!|;'S;:j#n<%lO!|~%lO[~~%qOZ~%W%xXY#t`!b}!O&e!Q![#y![!]!|!c!}#y#R#S#y#T#o#y%W;'S#y;'S;:j$m<%lO#y!b&jX`!b}!O!|!Q![!|![!]!|!c!}'V#R#S!|#T#o'V%W;'S!|;'S;:j#n<%lO!|!b'^XW!b`!b}!O!|!Q![!|![!]!|!c!}'V#R#S!|#T#o'V%W;'S!|;'S;:j#n<%lO!|",
     tokenizers: [6, 7, /*@__PURE__*/new LocalTokenGroup("b~RP#q#rU~XP#q#r[~aOT~~", 17, 4), /*@__PURE__*/new LocalTokenGroup("!k~RQvwX#o#p!_~^TU~Opmq!]m!^;'Sm;'S;=`!X<%lOm~pUOpmq!]m!]!^!S!^;'Sm;'S;=`!X<%lOm~!XOU~~![P;=`<%lm~!bP#o#p!e~!jOk~~", 72, 2), /*@__PURE__*/new LocalTokenGroup("[~RPwxU~ZOp~~", 11, 15), /*@__PURE__*/new LocalTokenGroup("[~RPrsU~ZOn~~", 11, 14), /*@__PURE__*/new LocalTokenGroup("!e~RQvwXwx!_~^Tc~Opmq!]m!^;'Sm;'S;=`!X<%lOm~pUOpmq!]m!]!^!S!^;'Sm;'S;=`!X<%lOm~!XOc~~![P;=`<%lm~!dOt~~", 66, 35), /*@__PURE__*/new LocalTokenGroup("!e~RQrsXvw^~^Or~~cTb~Oprq!]r!^;'Sr;'S;=`!^<%lOr~uUOprq!]r!]!^!X!^;'Sr;'S;=`!^<%lOr~!^Ob~~!aP;=`<%lr~", 66, 33)],
     topRules: {"Content":[0,1],"Attribute":[1,7]},
     tokenPrec: 157
   });

   const exprParser$1 = /*@__PURE__*/javascriptLanguage.parser.configure({
       top: "SingleExpression"
   });
   const baseParser$1 = /*@__PURE__*/parser$1.configure({
       props: [
           /*@__PURE__*/styleTags({
               Text: tags$1.content,
               Is: tags$1.definitionOperator,
               AttributeName: tags$1.attributeName,
               VueAttributeName: tags$1.keyword,
               Identifier: tags$1.variableName,
               "AttributeValue ScriptAttributeValue": tags$1.attributeValue,
               Entity: tags$1.character,
               "{{ }}": tags$1.brace,
               "@ :": tags$1.punctuation
           })
       ]
   });
   const exprMixed$1 = { parser: exprParser$1 };
   const textParser$1 = /*@__PURE__*/baseParser$1.configure({
       wrap: /*@__PURE__*/parseMixed((node, input) => node.name == "InterpolationContent" ? exprMixed$1 : null),
   });
   const attrParser$1 = /*@__PURE__*/baseParser$1.configure({
       wrap: /*@__PURE__*/parseMixed((node, input) => node.name == "AttributeScript" ? exprMixed$1 : null),
       top: "Attribute"
   });
   const textMixed$1 = { parser: textParser$1 }, attrMixed$1 = { parser: attrParser$1 };
   /**
   A language provider for Vue templates.
   */
   const vueLanguage = /*@__PURE__*/LRLanguage.define({
       name: "vue",
       parser: /*@__PURE__*/htmlLanguage.parser.configure({
           dialect: "selfClosing",
           wrap: /*@__PURE__*/parseMixed(mixVue)
       }),
       languageData: {
           closeBrackets: { brackets: ["{", '"'] }
       }
   });
   function mixVue(node, input) {
       switch (node.name) {
           case "Attribute":
               return /^(@|:|v-)/.test(input.read(node.from, node.from + 2)) ? attrMixed$1 : null;
           case "Text":
               return textMixed$1;
       }
       return null;
   }
   /**
   Vue template support.
   */
   function vue() {
       return new LanguageSupport(vueLanguage);
   }

   var index$1 = /*#__PURE__*/Object.freeze({
      __proto__: null,
      vue: vue,
      vueLanguage: vueLanguage
   });

   // This file was generated by lezer-generator. You probably shouldn't edit it.
   const Text = 1,
     attributeContentSingle = 33,
     attributeContentDouble = 34,
     scriptAttributeContentSingle = 35,
     scriptAttributeContentDouble = 36;

   const text = /*@__PURE__*/new ExternalTokenizer(input => {
       let start = input.pos;
       for (;;) {
           if (input.next == 10 /* Ch.Newline */) {
               input.advance();
               break;
           }
           else if (input.next == 123 /* Ch.BraceL */ && input.peek(1) == 123 /* Ch.BraceL */ || input.next < 0) {
               break;
           }
           input.advance();
       }
       if (input.pos > start)
           input.acceptToken(Text);
   });
   function attrContent(quote, token, script) {
       return new ExternalTokenizer(input => {
           let start = input.pos;
           while (input.next != quote && input.next >= 0 &&
               (script || input.next != 38 /* Ch.Ampersand */ && (input.next != 123 /* Ch.BraceL */ || input.peek(1) != 123 /* Ch.BraceL */)))
               input.advance();
           if (input.pos > start)
               input.acceptToken(token);
       });
   }
   const attrSingle = /*@__PURE__*/attrContent(39 /* Ch.SingleQuote */, attributeContentSingle, false);
   const attrDouble = /*@__PURE__*/attrContent(34 /* Ch.DoubleQuote */, attributeContentDouble, false);
   const scriptAttrSingle = /*@__PURE__*/attrContent(39 /* Ch.SingleQuote */, scriptAttributeContentSingle, true);
   const scriptAttrDouble = /*@__PURE__*/attrContent(34 /* Ch.DoubleQuote */, scriptAttributeContentDouble, true);

   // This file was generated by lezer-generator. You probably shouldn't edit it.
   const parser = /*@__PURE__*/LRParser.deserialize({
     version: 14,
     states: "(jOVOqOOOeQpOOOvO!bO'#CaOOOP'#Cx'#CxQVOqOOO!OQpO'#CfO!WQpO'#ClO!]QpO'#CrO!bQpO'#CsOOQO'#Cv'#CvQ!gQpOOQ!lQpOOQ!qQpOOOOOV,58{,58{O!vOpO,58{OOOP-E6v-E6vO!{QpO,59QO#TQpO,59QOOQO,59W,59WO#YQpO,59^OOQO,59_,59_O#_QpOOO#_QpOOO#gQpOOOOOV1G.g1G.gO#oQpO'#CyO#tQpO1G.lOOQO1G.l1G.lO#|QpO1G.lOOQO1G.x1G.xO$UO`O'#DUO$ZOWO'#DUOOQO'#Co'#CoQOQpOOOOQO'#Cu'#CuO$`OtO'#CwO$qOrO'#CwOOQO,59e,59eOOQO-E6w-E6wOOQO7+$W7+$WO%SQpO7+$WO%[QpO7+$WOOOO'#Cp'#CpO%aOpO,59pOOOO'#Cq'#CqO%fOpO,59pOOOS'#Cz'#CzO%kOtO,59cOOQO,59c,59cOOOQ'#C{'#C{O%|OrO,59cO&_QpO<<GrOOQO<<Gr<<GrOOQO1G/[1G/[OOOS-E6x-E6xOOQO1G.}1G.}OOOQ-E6y-E6yOOQOAN=^AN=^",
     stateData: "&d~OvOS~OPROSQOVROWRO~OZTO[XO^VOaUOhWO~OR]OU^O~O[`O^aO~O[bO~O[cO~O[dO~ObeO~ObfO~ObgO~ORhO~O]kOwiO~O[lO~O_mO~OynOzoO~OysOztO~O[uO~O]wOwiO~O_yOwiO~OtzO~Os|O~OSQOV!OOW!OOr!OOy!QO~OSQOV!ROW!ROq!ROz!QO~O_!TOwiO~O]!UO~Oy!VO~Oz!VO~OSQOV!OOW!OOr!OOy!XO~OSQOV!ROW!ROq!ROz!XO~O]!ZO~O",
     goto: "#dyPPPPPzPPPP!WPPPPP!WPP!Z!^!a!d!dP!g!j!m!p!v#Q#WPPPPPPPP#^SROSS!Os!PT!Rt!SRYPRqeR{nR}oRZPRqfR[PRqgQSOR_SQj`SvjxRxlQ!PsR!W!PQ!StR!Y!SQpeRrf",
     nodeNames: "⚠ Text Content }} {{ Interpolation InterpolationContent Entity InvalidEntity Attribute BoundAttributeName [ Identifier ] ( ) ReferenceName # Is ExpressionAttributeValue AttributeInterpolation AttributeInterpolation EventName DirectiveName * StatementAttributeValue AttributeName AttributeValue",
     maxTerm: 42,
     nodeProps: [
       ["openedBy", 3,"{{",15,"("],
       ["closedBy", 4,"}}",14,")"]
     ],
     skippedNodes: [0],
     repeatNodeCount: 4,
     tokenData: "0r~RyOX#rXY$mYZ$mZ]#r]^$m^p#rpq$mqr#rrs%jst&Qtv#rvw&hwx)zxy*byz*xz{+`{}#r}!O+v!O!P-]!P!Q#r!Q![+v![!]+v!]!_#r!_!`-s!`!c#r!c!}+v!}#O.Z#O#P#r#P#Q.q#Q#R#r#R#S+v#S#T#r#T#o+v#o#p/X#p#q#r#q#r0Z#r%W#r%W;'S+v;'S;:j-V;:j;=`$g<%lO+vQ#wTUQO#q#r#q#r$W#r;'S#r;'S;=`$g<%lO#rQ$ZSO#q#r#r;'S#r;'S;=`$g<%lO#rQ$jP;=`<%l#rR$t[UQvPOX#rXY$mYZ$mZ]#r]^$m^p#rpq$mq#q#r#q#r$W#r;'S#r;'S;=`$g<%lO#rR%qTyPUQO#q#r#q#r$W#r;'S#r;'S;=`$g<%lO#rR&XTaPUQO#q#r#q#r$W#r;'S#r;'S;=`$g<%lO#rR&oXUQWPOp'[pq#rq!]'[!]!^#r!^#q'[#q#r(d#r;'S'[;'S;=`)t<%lO'[R'aXUQOp'[pq#rq!]'[!]!^'|!^#q'[#q#r(d#r;'S'[;'S;=`)t<%lO'[R(TTVPUQO#q#r#q#r$W#r;'S#r;'S;=`$g<%lO#rR(gXOp'[pq#rq!]'[!]!^'|!^#q'[#q#r)S#r;'S'[;'S;=`)t<%lO'[P)VUOp)Sq!])S!]!^)i!^;'S)S;'S;=`)n<%lO)SP)nOVPP)qP;=`<%l)SR)wP;=`<%l'[R*RTzPUQO#q#r#q#r$W#r;'S#r;'S;=`$g<%lO#rR*iT^PUQO#q#r#q#r$W#r;'S#r;'S;=`$g<%lO#rR+PT_PUQO#q#r#q#r$W#r;'S#r;'S;=`$g<%lO#rR+gThPUQO#q#r#q#r$W#r;'S#r;'S;=`$g<%lO#rR+}b[PUQO}#r}!O+v!O!Q#r!Q![+v![!]+v!]!c#r!c!}+v!}#R#r#R#S+v#S#T#r#T#o+v#o#q#r#q#r$W#r%W#r%W;'S+v;'S;:j-V;:j;=`$g<%lO+vR-YP;=`<%l+vR-dTwPUQO#q#r#q#r$W#r;'S#r;'S;=`$g<%lO#rR-zTUQbPO#q#r#q#r$W#r;'S#r;'S;=`$g<%lO#rR.bTZPUQO#q#r#q#r$W#r;'S#r;'S;=`$g<%lO#rR.xT]PUQO#q#r#q#r$W#r;'S#r;'S;=`$g<%lO#rR/^VUQO#o#r#o#p/s#p#q#r#q#r$W#r;'S#r;'S;=`$g<%lO#rR/zTSPUQO#q#r#q#r$W#r;'S#r;'S;=`$g<%lO#r~0^TO#q#r#q#r0m#r;'S#r;'S;=`$g<%lO#r~0rOR~",
     tokenizers: [text, attrSingle, attrDouble, scriptAttrSingle, scriptAttrDouble, 0, 1],
     topRules: {"Content":[0,2],"Attribute":[1,9]},
     tokenPrec: 0
   });

   const exprParser = /*@__PURE__*/javascriptLanguage.parser.configure({
       top: "SingleExpression"
   });
   const baseParser = /*@__PURE__*/parser.configure({
       props: [
           /*@__PURE__*/styleTags({
               Text: tags$1.content,
               Is: tags$1.definitionOperator,
               AttributeName: tags$1.attributeName,
               "AttributeValue ExpressionAttributeValue StatementAttributeValue": tags$1.attributeValue,
               Entity: tags$1.character,
               InvalidEntity: tags$1.invalid,
               "BoundAttributeName/Identifier": tags$1.attributeName,
               "EventName/Identifier": /*@__PURE__*/tags$1.special(tags$1.attributeName),
               "ReferenceName/Identifier": tags$1.variableName,
               "DirectiveName/Identifier": tags$1.keyword,
               "{{ }}": tags$1.brace,
               "( )": tags$1.paren,
               "[ ]": tags$1.bracket,
               "# '*'": tags$1.punctuation
           })
       ]
   });
   const exprMixed = { parser: exprParser }, statementMixed = { parser: javascriptLanguage.parser };
   const textParser = /*@__PURE__*/baseParser.configure({
       wrap: /*@__PURE__*/parseMixed((node, input) => node.name == "InterpolationContent" ? exprMixed : null),
   });
   const attrParser = /*@__PURE__*/baseParser.configure({
       wrap: /*@__PURE__*/parseMixed((node, input) => {
           var _a;
           return node.name == "InterpolationContent" ? exprMixed
               : node.name != "AttributeInterpolation" ? null
                   : ((_a = node.node.parent) === null || _a === void 0 ? void 0 : _a.name) == "StatementAttributeValue" ? statementMixed : exprMixed;
       }),
       top: "Attribute"
   });
   const textMixed = { parser: textParser }, attrMixed = { parser: attrParser };
   /**
   A language provider for Angular Templates.
   */
   const angularLanguage = /*@__PURE__*/LRLanguage.define({
       name: "angular",
       parser: /*@__PURE__*/htmlLanguage.parser.configure({
           wrap: /*@__PURE__*/parseMixed(mixAngular)
       }),
       languageData: {
           closeBrackets: { brackets: ["[", "{", '"'] },
           indentOnInput: /^\s*[\}\]]$/
       }
   });
   function mixAngular(node, input) {
       switch (node.name) {
           case "Attribute":
               return /^[*#(\[]|\{\{/.test(input.read(node.from, node.to)) ? attrMixed : null;
           case "Text":
               return textMixed;
       }
       return null;
   }
   /**
   Angular Template language support.
   */
   function angular() {
       return new LanguageSupport(angularLanguage);
   }

   var index = /*#__PURE__*/Object.freeze({
      __proto__: null,
      angular: angular,
      angularLanguage: angularLanguage
   });

   exports.WindowEditor = WindowEditor;

   return exports;

})({});
